/*TODOS.SQL Generado el dia 3/12/2021 16:40:14 */

/* C:\V3\SummaAdvanced\Scripts\Procedures\afiActivoFijo.sql*/
-- PRINT dbo.AfinuevoCondigo('DEPG',1)
-- AfiActivoFijoDatos 'ECO00001', 1

DROP function AfinuevoCondigo
GO
create function AfinuevoCondigo(@Rubro_id VarChar(5), @pEmpresa_Id INT)
RETURNS VarChar(15)
as
bEGIN
Declare  @Maximo int 
Declare @Digitos int
Declare @Maxstr VarChar(10)

SELECT  @Maximo = isnull(Convert(int,MAX(Right(ActivoFijo_id, AfiRubros.Digitos))),0)+1 , 
		@Digitos = AfiRubros.Digitos
		from AfiRubros  LEFT JOIN afiActivoFijo ON
		afiActivoFijo.Rubro_Id = AfiRubros.AfiRubros AND 
		afiActivoFijo.Empresa_Id = @pEmpresa_Id AND
		ActivoFijo_id like @Rubro_id+'%'
		Where
			AfiRubros.Rubro_Id = @Rubro_id  
	GROUP BY AfiRubros.Digitos

SET @Maxstr = LTRIM(STR(@Maximo,10))

Return (@Rubro_id + SUBSTRING('0000000000',1,@Digitos -LEN(@Maxstr))+@MaxStr)

END
GO

DROP PROCEDURE afiActivoFijoGuardar
GO
CREATE PROCEDURE afiActivoFijoGuardar
(
@pActivoFijo_Id varchar(15),
@pActivoFijo_Id_Nuevo varchar(15),
@pEmpresa_Id Int,
@pDescripcion QMemo = NULL,
@pFechaAlta qFecha,
@pFechaIniDepre qFecha,
@pFechaBaja qFecha = NULL,
@pValorInicial qMonedaD2,
@pValorFiscal qMonedaD2,
@pVidaUtil int,
@pVidaUtilRestante int,
@pPorResidual qPorcentaje,
@pAmortAcumulada qMonedaD2,
@pRubro_Id varchar(5) = NULL,
@pCantidad QCantidad,
@pCtaValorOrigen_Id varchar(25) = NULL,
@pCtaAmortAcum_Id varchar(25) = NULL,
@pCtaAmortizacion_Id varchar(25) = NULL,
@pTipo varchar(2),
@pValorInicialSI qMonedaD2,
@pAmortAcumSI qMonedaD2,
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM afiActivoFijo WHERE ActivoFijo_Id=@pActivoFijo_Id and Empresa_Id =@pEmpresa_Id))
BEGIN 
	UPDATE afiActivoFijo
	SET		@lIdentidad = AfiActivoFijo,
		ActivoFijo_Id = @pActivoFijo_Id_Nuevo,
		Descripcion = @pDescripcion,
		FechaAlta = @pFechaAlta,
		FechaIniDepre = @pFechaIniDepre,
		FechaBaja = @pFechaBaja,
		ValorInicial = @pValorInicial,
		ValorFiscal = @pValorFiscal,
		VidaUtil = @pVidaUtil,
		VidaUtilRestante = @pVidaUtilRestante,
		PorResidual = @pPorResidual,
		AmortAcumulada = @pAmortAcumulada,
		Rubro_Id = dbo.FuncFKAfiRubros( @pRubro_Id),
		Cantidad = @pCantidad,
		CtaValorOrigen_Id = dbo.FuncFKconCuentas(@pCtaValorOrigen_Id),
		CtaAmortAcum_Id = dbo.FuncFKconCuentas(@pCtaAmortAcum_Id),
		CtaAmortizacion_Id = dbo.FuncFKconCuentas(@pCtaAmortizacion_Id),
		Tipo = @pTipo,
		ValorInicialSI = @pValorInicialSI,
		AmortAcumSI = @pAmortAcumSI,
		Usuario_Id = @pUsuario_Id
	WHERE 
	ActivoFijo_Id=@pActivoFijo_Id  and 
	Empresa_Id = @pEmpresa_Id
END 
ELSE 
BEGIN 

	if (rtrim(@pActivoFijo_Id_Nuevo) ='')
	begin
		SET @pActivoFijo_Id_Nuevo = dbo.AfinuevoCondigo(@pRubro_Id, @pEmpresa_Id)
	end
	INSERT INTO afiActivoFijo
	(
		ActivoFijo_Id,
		Descripcion,
		FechaAlta,
		FechaIniDepre,
		FechaBaja,
		ValorInicial,
		ValorFiscal,
		VidaUtil,
		VidaUtilRestante,
		PorResidual,
		AmortAcumulada,
		Rubro_Id,
		Cantidad,
		CtaValorOrigen_Id,
		CtaAmortAcum_Id,
		CtaAmortizacion_Id,
		Tipo,
		ValorInicialSI,
		AmortAcumSI,
		Usuario_Id,
		FechaCarga, 
		Empresa_Id
	)
	VALUES 
	(
		@pActivoFijo_Id_Nuevo,
		@pDescripcion,
		@pFechaAlta,
		@pFechaIniDepre,
		@pFechaBaja,
		@pValorInicial,
		@pValorFiscal,
		@pVidaUtil,
		@pVidaUtilRestante,
		@pPorResidual,
		@pAmortAcumulada,
		dbo.FuncFKAfiRubros( @pRubro_Id),
		@pCantidad,
		dbo.FuncFKconCuentas(@pCtaValorOrigen_Id),
		dbo.FuncFKconCuentas(@pCtaAmortAcum_Id),
		dbo.FuncFKconCuentas(@pCtaAmortizacion_Id),
		@pTipo,
		@pValorInicialSI,
		@pAmortAcumSI,
		@pUsuario_Id,
		dbo.FechaActual(),
		@pEmpresa_Id
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE afiActivoFijoDatos
GO
CREATE PROCEDURE afiActivoFijoDatos
(
	@pActivoFijo_Id varchar(15), 
	@pEmpresa Int 
)
AS
SET NOCOUNT ON 

SELECT afiActivoFijo.AfiActivoFijo, afiActivoFijo.ActivoFijo_Id, afiActivoFijo.Descripcion, afiActivoFijo.FechaAlta,
	afiActivoFijo.FechaIniDepre, afiActivoFijo.FechaBaja, afiActivoFijo.ValorInicial, afiActivoFijo.ValorFiscal,
	afiActivoFijo.VidaUtil, afiActivoFijo.VidaUtilRestante, afiActivoFijo.PorResidual, afiActivoFijo.AmortAcumulada,AfiRubros.Rubro_Id,
	AfiRubros.Descripcion as DescripcionRubros, afiActivoFijo.Cantidad,  conCuentas.Cuenta_Id 
	as CtaValorOrigen_Id, conCuentas.Descripcion as DescripcionCuentasOrigen,
	conCuentas2.Cuenta_Id as CtaAmortAcum_Id, conCuentas2.Descripcion as DescripcionCtaAmortAcum_Id, conCuentas3.Cuenta_Id as CtaAmortizacion
	, conCuentas3.Descripcion as DescripcionCtaAmortizacion,
	afiActivoFijo.Tipo, afiActivoFijo.ValorInicialSI, afiActivoFijo.AmortAcumSI, genUsuarios.Usuario_Id,
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario, afiActivoFijo.FechaCarga, 
		afiActivoFijo.Empresa_Id, 
			CAST( case when exists(select 1 from AfiMovimientos inner join conAsientos on
				AfiMovimientos.conAsientos = conAsientos.conAsientos And
				AfiMovimientos.AfiActivoFijo = afiActivoFijo.AfiActivoFijo And 
				conAsientos.Anulado = 0) then 1 else 0 end as bit) as TieneMovimientos, 
				aficonMovCont.conASientos AsientoOrigen , aficonMovCont.Renglon RenglonOrigen, '' as Origen
FROM afiActivoFijo 
LEFT JOIN AfiRubros  ON (AfiRubros.AfiRubros = afiActivoFijo.Rubro_Id)
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = afiActivoFijo.CtaValorOrigen_Id)
LEFT JOIN conCuentas conCuentas2 ON (conCuentas2.conCuentas = afiActivoFijo.CtaAmortAcum_Id)
LEFT JOIN conCuentas conCuentas3 ON (conCuentas3.conCuentas = afiActivoFijo.CtaAmortizacion_Id)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = afiActivoFijo.Usuario_Id)
LEFT JOIN aficonMovCont ON aficonMovCont.ActivoFijo_Id = afiActivoFijo.afiActivoFijo
WHERE  
afiActivoFijo.ActivoFijo_Id=@pActivoFijo_Id and 
afiActivoFijo.Empresa_Id = @pEmpresa


 Declare @pidentity int= dbo.FuncFKafiActivoFijo(@pActivoFijo_Id, @pEmpresa)
 Exec   AfiCentrosDatos @pidentity, null, null
 select afiActivoFijo.ActivoFijo_Id, afiActivoFijo.Descripcion as DescripcionActivoFijo, afiResponsables.Responsable_Id, afiResponsables.Descripcion as DescripcionResponsable,
 afiResponsableActivo.Cantidad from afiResponsableActivo 
 inner join afiResponsables on afiResponsables.afiResponsables=afiResponsableActivo.Responsable_Id
inner join afiActivoFijo on afiActivoFijo.afiActivoFijo=afiResponsableActivo.ActivoFijo_Id
where
afiActivoFijo.ActivoFijo_Id=@pActivoFijo_Id and 
afiActivoFijo.Empresa_Id = @pEmpresa

 Exec genAtributosGeneralesIdentityDatos @pidentity, 'afiActivoFijo'
 exec genAdjuntosIdentityDatos 'afiActivoFijo',@pidentity
 RETURN @@Error 

GO

DROP PROCEDURE afiActivoFijoEliminar
GO
CREATE PROCEDURE afiActivoFijoEliminar
(
@pActivoFijo_Id varchar(15), 
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 

DELETE FROM afiActivoFijo 
WHERE  
	ActivoFijo_Id=@pActivoFijo_Id and Empresa_Id =@pEmpresa_Id
RETURN @@Error 

GO

drop FUNCTION FuncFKafiActivoFijo

GO
CREATE FUNCTION FuncFKafiActivoFijo
(
@pActivoFijo_Id varchar(15), 
@pEmpresa_Id int
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = afiActivoFijo 
	FROM afiActivoFijo 
	Where 
	ActivoFijo_Id=@pActivoFijo_Id and 
	Empresa_Id = @pEmpresa_Id
  RETURN @pIdentity
END
GO

DROP PROCEDURE afiActivoFijoDatosInt
GO
CREATE PROCEDURE afiActivoFijoDatosInt
(
	@pActivoFijo int
)
AS
SET NOCOUNT ON 

SELECT afiActivoFijo.ActivoFijo_Id
FROM afiActivoFijo 
WHERE  
afiActivoFijo.AfiActivoFijo =@pActivoFijo

 RETURN @@Error 

GO

DROP PROCEDURE afiActivoFijoActuDepAcum
GO
CREATE PROCEDURE afiActivoFijoActuDepAcum
(
	@pActivoFijo_Id varchar(15),
	@pEmpresa_Id Int,
	@pVidaUtil int,
	@pAmortAcumulada qMonedaD2
)
AS
	UPDATE afiActivoFijo
	SET		
		VidaUtilRestante = VidaUtilRestante - @pVidaUtil,
		AmortAcumulada = AmortAcumulada + @pAmortAcumulada
	WHERE 
	ActivoFijo_Id=@pActivoFijo_Id  and 
	Empresa_Id = @pEmpresa_Id
GO




-- afiActivoFijoAmortDatos '20181130',1,'BU'
DROP PROCEDURE afiActivoFijoAmortDatos
GO
CREATE PROCEDURE afiActivoFijoAmortDatos
(
	@pFechaHasta DateTime,
	@pEmpresa_Id Int, 
	@pTipo VarChar(2)
	
)
AS

	SELECT conAsientos.conAsientos,
	genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N, 
	genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C, conAsientos.Fecha, @pTipo as Tipo
	from conAsientos inner join genAsiSegmentos ON
		conAsientos.conAsientos =  genAsiSegmentos.Asiento_id
		INNER JOIN genSegmentos ON
		genSegmentos.genSegmentos =  genAsiSegmentos.Segmento_Id
	where Exists(select 1 from AfiMovimientos INNER JOIN afiActivoFijo on
		AfiMovimientos.AfiActivoFijo = afiActivoFijo.AfiActivoFijo 
	 WHERE
		afiActivoFijo.Tipo = @pTipo and 
		AfiMovimientos.conAsientos = conAsientos.conAsientos AND 
		AfiMovimientos.TipoMov = 'AM') and 
		conAsientos.Fecha = @pFechaHasta and 
		conAsientos.Empresa_Id = @pEmpresa_Id and 
		conAsientos.Anulado = 0

		

	SELECT  conAsientos.conAsientos,  afiActivoFijo.ActivoFijo_Id, 
		AfiMovimientos.AfiActivoFijo,
		conMovCont.Importe , conMovCont.Clase 
	from conAsientos INNER JOIN conMovCont ON
	conAsientos.conAsientos = conMovCont.conAsientos 
	INNER JOIN AfiMovimientos ON
	AfiMovimientos.conAsientos = conMovCont.conAsientos AND 
	AfiMovimientos.Renglon = conMovCont.Renglon 
	INNER JOIN afiActivoFijo ON
	afiActivoFijo.AfiActivoFijo =  AfiMovimientos.AfiActivoFijo
	Where
		conAsientos.Anulado = 0 AND 
		conAsientos.Empresa_Id = @pEmpresa_Id and 
		conMovCont.Clase = 'AM' AND 
		AfiMovimientos.TipoMov = 'AM' and
		conAsientos.Fecha = @pFechaHasta
GO



DROP PROCEDURE afiActivoFijoOtrosDatos
GO
CREATE PROCEDURE afiActivoFijoOtrosDatos
(
	@pActivoFijo_Id varchar(15), 
	@pEmpresa Int 
)
AS


exec afiActivoFijoDatos @pActivoFijo_Id,@pEmpresa
exec AficonMovcontPendDatos @pEmpresa

GO


DROP PROCEDURE afiActivoFijoDatosInt
GO
CREATE PROCEDURE afiActivoFijoDatosInt
(
	@pActivoFijo_Id int
)
AS
SET NOCOUNT ON 

SELECT afiActivoFijo.AfiActivoFijo, afiActivoFijo.ActivoFijo_Id, afiActivoFijo.ActivoFijo_Id as ActivoFijo_Id_Nueva, afiActivoFijo.Descripcion, afiActivoFijo.FechaAlta,
	afiActivoFijo.FechaIniDepre, afiActivoFijo.FechaBaja, afiActivoFijo.ValorInicial, afiActivoFijo.ValorFiscal,
	afiActivoFijo.VidaUtil, afiActivoFijo.VidaUtilRestante, afiActivoFijo.PorResidual, afiActivoFijo.AmortAcumulada,AfiRubros.Rubro_Id,
	AfiRubros.Descripcion as DescripcionRubros, afiActivoFijo.Cantidad,  conCuentas.Cuenta_Id 
	as CtaValorOrigen_Id, conCuentas.Descripcion as DescripcionCuentasOrigen,
	conCuentas2.Cuenta_Id as CtaAmortAcum_Id, conCuentas2.Descripcion as DescripcionCtaAmortAcum_Id, conCuentas3.Cuenta_Id as CtaAmortizacion
	, conCuentas3.Descripcion as DescripcionCtaAmortizacion,
	afiActivoFijo.Tipo, afiActivoFijo.ValorInicialSI, afiActivoFijo.AmortAcumSI, genUsuarios.Usuario_Id,
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario, afiActivoFijo.FechaCarga, 
		afiActivoFijo.Empresa_Id, 
			CAST( case when exists(select 1 from AfiMovimientos inner join conAsientos on
				AfiMovimientos.conAsientos = conAsientos.conAsientos And
				AfiMovimientos.AfiActivoFijo = afiActivoFijo.AfiActivoFijo And 
				conAsientos.Anulado = 0) then 1 else 0 end as bit) as TieneMovimientos, 
				aficonMovCont.conASientos AsientoOrigen , aficonMovCont.Renglon RenglonOrigen, '' as Origen
FROM afiActivoFijo 
LEFT JOIN AfiRubros  ON (AfiRubros.AfiRubros = afiActivoFijo.Rubro_Id)
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = afiActivoFijo.CtaValorOrigen_Id)
LEFT JOIN conCuentas conCuentas2 ON (conCuentas2.conCuentas = afiActivoFijo.CtaAmortAcum_Id)
LEFT JOIN conCuentas conCuentas3 ON (conCuentas3.conCuentas = afiActivoFijo.CtaAmortizacion_Id)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = afiActivoFijo.Usuario_Id)
LEFT JOIN aficonMovCont ON aficonMovCont.ActivoFijo_Id = afiActivoFijo.afiActivoFijo
WHERE  
afiActivoFijo.afiActivoFijo =@pActivoFijo_Id


 
 Exec   AfiCentrosDatos @pActivoFijo_Id, null, null
 Exec genAtributosGeneralesIdentityDatos @pActivoFijo_Id, 'afiActivoFijo'
 RETURN @@Error 

GO

--afiActivoFijoOtrosDatos ' ',1
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\afiActivoFijoOtrosDesactivar.sql*/
drop procedure AfiActivoFijoOtrosDesactivar


go
create PROCEDURE AfiActivoFijoOtrosDesactivar
(
	@pconAsientos bigint,
	@pRenglon int	
	)

	as
	update AficonMovcont 
	set Inactivo=1 where conAsientos=@pconAsientos and Renglon=@pRenglon


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\AfiActivoFijoXLSCatalogo.sql*/
-- AfiActivoFijoXLSCatalogo ' ','A' 

drop procedure AfiActivoFijoXLSCatalogo
go
create procedure AfiActivoFijoXLSCatalogo
(
    @pActivoFijoDesde varchar(15),
    @pActivoFijoHasta varchar(15), 
	@pEmpresa_Id int
)
as
select @pActivoFijoDesde as ActivoFijoDesde, @pActivoFijoHasta as ActivoFijoHasta
select ActivoFijo_Id, afiActivoFijo.Descripcion, FechaAlta, FechaIniDepre, isnull(FechaBaja,'') FechaBaja, ValorInicial, VidaUtil, VidaUtilRestante, PorResidual, AmortAcumulada,
afiActivoFijo.Rubro_Id, Cantidad, CtaValorOrigen.Cuenta_Id as CtaValorOrigen_Id, CtaAmortAcum.Cuenta_Id as CtaAmortAcum_Id, CtaAmortizacion.Cuenta_Id as CtaAmortizacion_Id
from afiActivoFijo
inner join conCuentas CtaValorOrigen on CtaValorOrigen.conCuentas=afiActivoFijo.CtaValorOrigen_Id
inner join conCuentas CtaAmortAcum on CtaAmortAcum.conCuentas=afiActivoFijo.CtaAmortAcum_Id
inner join conCuentas CtaAmortizacion on CtaAmortizacion.conCuentas=afiActivoFijo.CtaAmortizacion_Id
WHERE
	afiActivoFijo.Empresa_Id = @pEmpresa_Id AND 
	afiActivoFijo.ActivoFijo_Id BETWEEN @pActivoFijoDesde AND @pActivoFijoHasta
order by 1

select afiActivoFijo.ActivoFijo_Id, conCentro1.Centro1_Id, conCentro2.Centro2_Id, Porcentaje from afiCentros
inner join afiActivoFijo on afiActivoFijo.afiActivoFijo=afiCentros.ActivoFijo_Id
inner join conCentro1 on conCentro1.conCentro1=afiCentros.Centro1_Id
inner join conCentro2 on conCentro2.conCentro2=afiCentros.Centro2_Id
where
	afiActivoFijo.Empresa_Id = @pEmpresa_Id AND 
	afiActivoFijo.ActivoFijo_Id BETWEEN @pActivoFijoDesde AND @pActivoFijoHasta
Order by 1


select afiActivoFijo.ActivoFijo_Id, AfiResponsables.Responsable_Id, afiResponsableActivo.Cantidad 
	from afiResponsableActivo
inner join afiActivoFijo on afiActivoFijo.afiActivoFijo=afiResponsableActivo.ActivoFijo_Id
inner join AfiResponsables on AfiResponsables.AfiResponsables=afiResponsableActivo.Responsable_Id
where
	afiActivoFijo.Empresa_Id = @pEmpresa_Id AND 
	afiActivoFijo.ActivoFijo_Id BETWEEN @pActivoFijoDesde AND @pActivoFijoHasta
Order by 1

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\AfiBajasDatos.sql*/
-- AfiBajasDatos '',1, 'ABAJ', ' ',' ',' ',' ',1,0,0,0

DROP PROCEDURE AfiBajasDatos
GO

CREATE PROCEDURE AfiBajasDatos(
	@pActivoFijo_Id VarChar(15),
	@pEmpresa_Id Int, 
	@pSegmento_Id VarChar(10),
	@pSegmento1C Varchar(25),
	@pSegmento2C Varchar(25),
	@pSegmento3C Varchar(25),
	@pSegmento4C Varchar(25),
	@pSegmento1N Int,
	@pSegmento2N Int,
	@pSegmento3N Int,
	@pSegmento4N Int
)
as
begin

DECLARE @pActivoFijo1_Id VarChar(15)

SET @pActivoFijo1_Id =
	(SELECT max(afiActivoFijo.ActivoFijo_Id)
	 FROM genAsiSegmentos INNER JOIN AfiBajas ON
		genAsiSegmentos.Asiento_Id = AfiBajas.conAsientos
		inner join genSegmentos ON
		genAsiSegmentos.Segmento_Id =  genSegmentos.genSegmentos
		INNER JOIN AfiMovimientos ON
		AfiMovimientos.conAsientos = AfiBajas.conAsientos
		inner join afiActivoFijo on 
		afiActivoFijo.AfiActivoFijo = AfiMovimientos.AfiActivoFijo
		
	Where
		genSegmentos.Segmento_Id = @pSegmento_Id and 
		genAsiSegmentos.Segmento1C = @pSegmento1C and
		genAsiSegmentos.Segmento2C = @pSegmento2C and
		genAsiSegmentos.Segmento3C = @pSegmento3C and
		genAsiSegmentos.Segmento4C = @pSegmento4C and
		genAsiSegmentos.Segmento1N = @pSegmento1N and
		genAsiSegmentos.Segmento2N = @pSegmento2N and
		genAsiSegmentos.Segmento3N = @pSegmento3N and
		genAsiSegmentos.Segmento4N = @pSegmento4N )

-- Existe
if @pActivoFijo1_Id IS NOT NULL
	SET @pActivoFijo_Id = @pActivoFijo1_Id


Exec afiActivoFijoDatos @pActivoFijo_Id, @pEmpresa_Id

SELECT AfiBajas.conAsientos, genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, 
	genAsiSegmentos.Segmento4N ,	AfiBajas.Causa, AfiBajas.Cantidad, 
	AfiBajas.Monto, AfiBajas.MontoFiscal, AfiBajas.MontoDepreciacion
	 FROM genAsiSegmentos INNER JOIN AfiBajas ON
		genAsiSegmentos.Asiento_Id = AfiBajas.conAsientos
		inner join genSegmentos ON
		genAsiSegmentos.Segmento_Id =  genSegmentos.genSegmentos
	Where
		genSegmentos.Segmento_Id = @pSegmento_Id and 
		genAsiSegmentos.Segmento1C = @pSegmento1C and
		genAsiSegmentos.Segmento2C = @pSegmento2C and
		genAsiSegmentos.Segmento3C = @pSegmento3C and
		genAsiSegmentos.Segmento4C = @pSegmento4C and
		genAsiSegmentos.Segmento1N = @pSegmento1N and
		genAsiSegmentos.Segmento2N = @pSegmento2N and
		genAsiSegmentos.Segmento3N = @pSegmento3N and
		genAsiSegmentos.Segmento4N = @pSegmento4N 

SELECT conMovCont.Renglon, conCuentas.Cuenta_Id, conCuentas.Descripcion as  DescripcionCuenta,
	conMovCont.LeyendaLibroMayor, 
	conCentro1.Centro1_Id, conCentro1.Descripcion  as DescripcionCentro1,
	conCentro2.Centro2_Id , conCentro2.Descripcion as DescripcionCentro2,
	conMovCont.Importe, conMovCont.TipoMov
	 FROM genAsiSegmentos INNER JOIN AfiBajas ON
		genAsiSegmentos.Asiento_Id = AfiBajas.conAsientos
		inner join genSegmentos ON
		genAsiSegmentos.Segmento_Id =  genSegmentos.genSegmentos
		inner join  conMovCont on
		conMovCont.conAsientos = AfiBajas.conAsientos
		inner join conCuentas ON conMovCont.Cuenta_Id = conCuentas.conCuentas
		left join conCentro1 ON  conMovCont.Centro1_Id = conCentro1.conCentro1
		left join conCentro2 ON  conMovCont.Centro2_Id = conCentro2.conCentro2 
		Where
			conMovCont.Clase = 'CONTR' AND 
			genSegmentos.Segmento_Id = @pSegmento_Id and 
			genAsiSegmentos.Segmento1C = @pSegmento1C and
			genAsiSegmentos.Segmento2C = @pSegmento2C and
			genAsiSegmentos.Segmento3C = @pSegmento3C and
			genAsiSegmentos.Segmento4C = @pSegmento4C and
			genAsiSegmentos.Segmento1N = @pSegmento1N and
			genAsiSegmentos.Segmento2N = @pSegmento2N and
			genAsiSegmentos.Segmento3N = @pSegmento3N and
			genAsiSegmentos.Segmento4N = @pSegmento4N 
	

end

GO

DROP PROCEDURE AfiBajasGuardar
GO
CREATE PROCEDURE AfiBajasGuardar
(
@pconAsientos bigint,
@pCausa QMemo = NULL,
@pCantidad QCantidad,
@pMonto qMonedaD2,
@pMontoFiscal qMonedaD2,
@pMontoDepreciacion qMonedaD2
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM AfiBajas WHERE (conAsientos = @pconAsientos)))
BEGIN 
	UPDATE AfiBajas
	SET		Causa = @pCausa,
		Cantidad = @pCantidad,
		Monto = @pMonto,
		MontoFiscal = @pMontoFiscal,
		MontoDepreciacion = @pMontoDepreciacion
	WHERE (conAsientos = @pconAsientos)
END 
ELSE 
BEGIN 
	INSERT INTO AfiBajas
	(
		conAsientos,
		Causa,
		Cantidad,
		Monto,
		MontoFiscal,
		MontoDepreciacion
	)
	VALUES 
	(
		@pconAsientos,
		@pCausa,
		@pCantidad,
		@pMonto,
		@pMontoFiscal,
		@pMontoDepreciacion
	)
END 

GO

DROP PROCEDURE AfiBajasEliminar
GO
CREATE PROCEDURE AfiBajasEliminar
(
@pconAsientos bigint = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM AfiBajas 
WHERE (conAsientos = ISNULL(@pconAsientos, conAsientos))
 
RETURN @@Error 

GO
DROP Procedure AfiActivoFijoBaja
GO
CREATE Procedure AfiActivoFijoBaja(
	@pActivoFijo_Id VarChar(15),
	@pEmpresa_Id Int,
	@pCantidad             QCantidad ,
	@pMontoVO              qMonedaD2 ,
	@pMontoFiscal          qMonedaD2 ,
	@pMontoDepreciacion    qMonedaD2 , 
	@pFechaBaja			   DateTime = NULL
)
as

	Update afiActivoFijo SET Cantidad = Cantidad - @pCantidad, 
		ValorInicial = ValorInicial - @pMontoVO,
		ValorFiscal = ValorFiscal - @pMontoFiscal,
		AmortAcumulada = AmortAcumulada - @pMontoDepreciacion, 
		FechaBaja = @pFechaBaja
		Where
			ActivoFijo_Id = @pActivoFijo_Id and 
			Empresa_Id = @pEmpresa_Id
GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\AfiCalcDepre.sql*/
-- AfiCalcDepre  '20181130','BU', 1
DROP procedure AfiCalcDepre 
GO
create procedure AfiCalcDepre 
(
	@FechaHasta DateTime, 
	@Tipo VarChar(2), 
	@Empresa_id Int
)

as

SELECT AfiActivoFijo, ActivoFijo_Id, ValorInicial, AmortAcumulada, 
	CONVERT(	numeric(18,2), (ValorInicial - AmortAcumulada) / VidaUtilRestante) as Amortizacion, 
	CtaAmortizacion_Id,  	CtaAmotrAcum_Id, Centro1_Id, Centro2_Id, Porcentaje
FROM (
SELECT afiActivoFijo.AfiActivoFijo, afiActivoFijo.ActivoFijo_Id, 
	AfiActivoFijo.VidaUtilRestante, 
	AfiActivoFijo.ValorInicial - 
		ISNULL((select sum(conMovCont.Importe*(-2*conMovCont.Tipomov+3))
		from  conMovCont INNER join conAsientos ON 
		conMovCont.conAsientos = conAsientos.conAsientos 
		inner join AfiMovimientos on 
		AfiMovimientos.conAsientos = conAsientos.conAsientos  and 
		AfiMovimientos.AfiActivoFijo = afiActivoFijo.AfiActivoFijo
		Where
			conAsientos.Anulado = 0 and 
			conAsientos.Fecha > @FechaHasta and 
			conMovCont.Clase = 'VO'),0) AS ValorInicial,
		AfiActivoFijo.AmortAcumulada -
		ISNULL((select sum(conMovCont.Importe*(-2*conMovCont.Tipomov+3))
		from  conMovCont INNER join conAsientos ON 
		conMovCont.conAsientos = conAsientos.conAsientos 
		inner join AfiMovimientos on 
		AfiMovimientos.conAsientos = conAsientos.conAsientos  and 
		AfiMovimientos.AfiActivoFijo = afiActivoFijo.AfiActivoFijo
		Where
			conAsientos.Anulado = 0 and 
			conAsientos.Fecha > @FechaHasta and 
			conMovCont.Clase = 'AM'),0) AS AmortAcumulada,
	CtaAmortizacion.Cuenta_Id as CtaAmortizacion_Id,
	CtaAmortAcum.Cuenta_Id as CtaAmotrAcum_Id, 
	conCentro1.Centro1_Id, conCentro2.Centro2_Id, AfiCentros.Porcentaje
from afiActivoFijo 
	inner join conCuentas as CtaAmortAcum on CtaAmortAcum.conCuentas = AfiActivoFijo.CtaAmortAcum_Id
	inner join conCuentas as CtaAmortizacion on CtaAmortizacion.conCuentas = AfiActivoFijo.CtaAmortizacion_Id
	INNER JOIN AfiCentros ON AfiCentros.ActivoFijo_Id = afiActivoFijo.AfiActivoFijo
	inner join conCentro1 on  conCentro1.conCentro1 = AfiCentros.Centro1_Id 
	inner join conCentro2 on  conCentro2.conCentro2 = AfiCentros.Centro2_Id 
Where
	(FechaBaja IS NULL OR FechaBaja >@FechaHasta) and 
	(FechaIniDepre <= @FechaHasta) AND 
	AfiActivoFijo.Empresa_Id = @Empresa_id and 
	AfiActivoFijo.Tipo = @Tipo and 
	AfiActivoFijo.VidaUtilRestante > 0) AS XXX
WHERE
	ValorInicial > AmortAcumulada 
order by 2	
GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\AfiCentros.sql*/
DROP PROCEDURE AfiCentrosGuardar
GO
CREATE PROCEDURE AfiCentrosGuardar
(
@pActivoFijo_Id int,
@pCentro1_Id varchar(8),
@pCentro2_Id varchar(8),
@pPorcentaje numeric(5,2)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM AfiCentros WHERE (ActivoFijo_Id = @pActivoFijo_Id) AND 
		Centro1_Id = dbo.FuncFKconCentro1(@pCentro1_Id) AND Centro2_Id = dbo.FuncFKconCentro2(@pCentro2_Id)))
BEGIN 
	UPDATE AfiCentros
	SET		Porcentaje = @pPorcentaje
	WHERE Centro1_Id = dbo.FuncFKconCentro1(@pCentro1_Id) AND Centro2_Id = dbo.FuncFKconCentro2(@pCentro2_Id)
END 
ELSE 
BEGIN 
	INSERT INTO AfiCentros
	(
		ActivoFijo_Id,
		Centro1_Id,
		Centro2_Id,
		Porcentaje
	)
	VALUES 
	(
		@pActivoFijo_Id,
		dbo.FuncFKconCentro1(@pCentro1_Id),
		dbo.FuncFKconCentro2(@pCentro2_Id),
		@pPorcentaje
	)
END 

GO

DROP PROCEDURE AfiCentrosDatos
GO
CREATE PROCEDURE AfiCentrosDatos
(
@pActivoFijo_Id int,
@pCentro1_Id varchar(8)=NULL,
@pCentro2_Id varchar(8)=NULL
)
AS
SET NOCOUNT ON 

SELECT AfiCentros.ActivoFijo_Id, 
	conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, conCentro2.Centro2_Id,
	conCentro2.Descripcion as DescripcionCentro2, AfiCentros.Porcentaje
FROM AfiCentros 
INNER JOIN afiActivoFijo  ON (afiActivoFijo.AfiActivoFijo = AfiCentros.ActivoFijo_Id)
INNER JOIN conCentro1  ON (conCentro1.conCentro1 = AfiCentros.Centro1_Id)
INNER JOIN conCentro2  ON (conCentro2.conCentro2 = AfiCentros.Centro2_Id)
WHERE (afiActivoFijo.afiActivoFijo = @pActivoFijo_Id)
AND (conCentro1.Centro1_Id = isNull(@pCentro1_Id,conCentro1.Centro1_Id))
AND (conCentro2.Centro2_Id = isNull(@pCentro2_Id,conCentro2.Centro2_Id))
 
RETURN @@Error 

GO

DROP PROCEDURE AfiCentrosEliminar
GO
CREATE PROCEDURE AfiCentrosEliminar
(
@pActivoFijo_Id int
)
AS
SET NOCOUNT ON 

DELETE FROM AfiCentros 
WHERE (ActivoFijo_Id = @pActivoFijo_Id)
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\AficonMovCont.sql*/
DROP PROCEDURE AficonMovcontGuardar
GO
CREATE PROCEDURE AficonMovcontGuardar
(
@pconAsientos bigint,
@pRenglon int,
@pActivoFijo_Id VarChar(15) = NULL,
@pInactivo Sino,
@Empresa_Id Int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM AficonMovcont WHERE (conAsientos = @pconAsientos) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE AficonMovcont
	SET		ActivoFijo_Id = dbo.FuncFKafiActivoFijo(@pActivoFijo_Id, @Empresa_Id),
		Inactivo = @pInactivo
	WHERE (conAsientos = @pconAsientos) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO AficonMovcont
	(
		conAsientos,
		Renglon,
		ActivoFijo_Id,
		Inactivo
	)
	VALUES 
	(
		@pconAsientos,
		@pRenglon,
		dbo.FuncFKafiActivoFijo(@pActivoFijo_Id, @Empresa_Id),
		@pInactivo
	)
END 

GO

DROP PROCEDURE AficonMovcontDatos
GO
CREATE PROCEDURE AficonMovcontDatos
(
@pconAsientos bigint,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

SELECT AficonMovcont.conAsientos, AficonMovcont.Renglon, conMovCont.LeyendaLibroMayor as DescripcionMovCont, 
	afiActivoFijo.Empresa_Id, 	afiActivoFijo.ActivoFijo_Id, afiActivoFijo.Descripcion as DescripcionActivoFijo, 
	AficonMovcont.Inactivo
FROM AficonMovcont 
INNER JOIN conMovCont  ON (conMovCont.conAsientos = AficonMovcont.conAsientos) AND (conMovCont.Renglon = AficonMovcont.Renglon)
LEFT JOIN afiActivoFijo  ON (afiActivoFijo.afiActivoFijo = AficonMovcont.ActivoFijo_Id)
WHERE (AficonMovcont.conAsientos = @pconAsientos)
AND (AficonMovcont.Renglon = ISNULL(@pRenglon,AficonMovcont.Renglon))
 
 RETURN @@Error 

GO

DROP PROCEDURE AficonMovcontEliminar
GO
CREATE PROCEDURE AficonMovcontEliminar
(
@pconAsientos bigint,
@pRenglon int = Null
)
AS
SET NOCOUNT ON 

DELETE FROM AficonMovcont 
WHERE (conAsientos = @pconAsientos)
AND (Renglon = isnull(@pRenglon, AficonMovcont.Renglon)) and 
AficonMovcont.ActivoFijo_Id  IS NULL
 
RETURN @@Error 

GO

DROP PROCEDURE [dbo].[AficonMovcontPendDatos]
GO
CREATE PROCEDURE [dbo].[AficonMovcontPendDatos]
(
	@Empresa_id INT
)
AS
SET NOCOUNT ON 

SELECT AficonMovcont.conAsientos, AficonMovcont.Renglon, 
	ISNULL(comMovDetalle.Detalle, conMovCont.LeyendaLibroMayor) as DescripcionMovCont, 
	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C,
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, 
	genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as Comprobante,
	conAsientos.Fecha, 	conAsientos.Empresa_Id , conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuenta,
	conMovCont.Importe ,  ISNULL(comOcReceCuerpo.Cantidad, 1.00) as Cantidad,conCentro1.Centro1_Id,conCentro1.Descripcion as DescripcionCentro1,conCentro2.Centro2_Id,conCentro2.Descripcion as DescripcionCentro2,100 as Porcentaje
FROM AficonMovcont 
INNER JOIN conMovCont  ON (conMovCont.conAsientos = AficonMovcont.conAsientos) AND 
	(conMovCont.Renglon = AficonMovcont.Renglon)
INNER JOIN conAsientos ON conAsientos.conAsientos = conMovCont.conAsientos
INNER JOIN genAsiSegmentos ON conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
LEFT JOIN comMovDetalle ON comMovDetalle.comMovProv = conMovCont.conAsientos and 
	comMovDetalle.Renglon = conMovCont.Renglon
INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
left join conCentro1 on conMovCont.Centro1_Id=conCentro1.conCentro1
left join conCentro2 on conMovCont.Centro2_Id=conCentro2.conCentro2
LEFT JOIN comOcReceCuerpo ON comOcReceCuerpo.comOcRecepcion =  conMovCont.conAsientos and 
comOcReceCuerpo.conRenglon = conMovCont.Renglon
WHERE 
	AficonMovcont.ActivoFijo_Id  IS NULL AND
	AficonMovcont.Inactivo = 0 AND 
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and
	genAsiSegmentos.Empresa_Id = @Empresa_id 
ORDER BY 1
 
RETURN @@Error 

GO




DROP PROCEDURE [dbo].[AficonMovcontAsiInsertar]
GO


CREATE PROCEDURE [dbo].[AficonMovcontAsiInsertar]
(
	@pconAsientos bigint
)
AS
	INSERT INTO AficonMovcont
	(
		conAsientos,
		Renglon,
		ActivoFijo_Id,
		Inactivo
	)
	SELECT conMovCont.conAsientos, conMovCont.Renglon, NULL, 0
	FROM conMovCont 
	INNER JOIN conCuentas ON conMovCont.Cuenta_Id = conCuentas.conCuentas
	INNER JOIN conTipoEspecialesCuerpo ON conTipoEspecialesCuerpo.Tipo_Id =  conCuentas.Tipo_Id
	INNER JOIN conAsientos ON conAsientos.conAsientos = conMovCont.conAsientos
	Where
		conAsientos.Especial NOT IN ('APE','CIR','CCP') AND
		conMovCont.Clase != 'VO' AND 
		conMovCont.conAsientos = @pconAsientos and 
		conTipoEspecialesCuerpo.TipoEspe_Id = 'AFVO'
	


GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\AfiFijoCerrar.sql*/
DROP Procedure AfiFijoCerrar 
GO
CREATE Procedure AfiFijoCerrar
(
@Empresa_Id Int
)
as

SELECT FechaCierreActivoFijo as UltimoCierre, 
conPeriodos.Fecha_Hasta as ProximoCierre
FROM genEmpresas 
INNER JOIN conPeriodos on
genEmpresas.genEmpresas = conPeriodos.Empresa_Id and 
DATEADD(dd,1,FechaCierreActivoFijo) between conPeriodos.Fecha_Desde And conPeriodos.Fecha_Hasta
Where
	genEmpresas.genEmpresas = @Empresa_Id

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\AfiMovimientos.sql*/
DROP PROCEDURE AfiMovimientosGuardar
GO
CREATE PROCEDURE AfiMovimientosGuardar
(
@pAfiActivoFijo int,
@pRenglon int,
@pconAsientos bigint,
@pTipoMov varchar(2)
)
AS
	INSERT INTO AfiMovimientos
	(
		AfiActivoFijo,
		Renglon,
		conAsientos,
		TipoMov
	)
	VALUES 
	(
		@pAfiActivoFijo,
		@pRenglon,
		@pconAsientos,
		@pTipoMov
	)

GO

DROP PROCEDURE AfiMovimientosDatos
GO
CREATE PROCEDURE AfiMovimientosDatos
(
@pAfiActivoFijo int=NULL,
@pRenglon int=NULL,
@pconAsientos bigint=NULL
)
AS
SET NOCOUNT ON 

SELECT afiActivoFijo.ActivoFijo_Id, afiActivoFijo.Descripcion as DescripcionActivoFijo, 
	AfiMovimientos.Renglon, AfiMovimientos.conAsientos, AfiMovimientos.TipoMov
FROM AfiMovimientos 
INNER JOIN afiActivoFijo  ON (afiActivoFijo.AfiActivoFijo = AfiMovimientos.AfiActivoFijo)
WHERE AfiMovimientos.AfiActivoFijo = ISNULL(@pAfiActivoFijo,AfiMovimientos.AfiActivoFijo)
AND AfiMovimientos.Renglon = ISNULL(@pRenglon,AfiMovimientos.Renglon)
AND conAsientos =  iSNull(@pconAsientos,conAsientos)
 
RETURN @@Error 

GO

DROP PROCEDURE AfiMovimientosEliminar
GO
CREATE PROCEDURE AfiMovimientosEliminar
(
@pAfiActivoFijo int=NULL,
@pRenglon int=NULL,
@pconAsientos bigint
)
AS
SET NOCOUNT ON 

DELETE FROM AfiMovimientos 
WHERE (AfiActivoFijo = @pAfiActivoFijo)
AND (Renglon = ISNULL(Renglon,@pRenglon))
AND (conAsientos =ISNULL(@pconAsientos,conAsientos))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\afiResponsables.sql*/
DROP PROCEDURE afiResponsablesGuardar
GO
CREATE PROCEDURE afiResponsablesGuardar
(
@pResponsable_Id varchar(15) = NULL,
@pResponsable_Id_Nuevo varchar(15),
@pDescripcion varchar(200) = NULL,
@pEmpresa_Id int = NULL,
@pPosteado Sino,
@pInactivo Sino
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM afiResponsables WHERE (Responsable_Id = @pResponsable_Id)))
BEGIN 
	UPDATE afiResponsables
	SET		Responsable_Id = @pResponsable_Id_Nuevo,
		Descripcion = @pDescripcion,
		Empresa_Id = @pEmpresa_Id,
		Posteado = @pPosteado,
		Inactivo = @pInactivo
	WHERE (Responsable_Id = @pResponsable_Id)
END 
ELSE 
BEGIN 
	INSERT INTO afiResponsables
	(
		
		Responsable_Id,
		Descripcion,
		Empresa_Id,
		Posteado,
		Inactivo
	)
	VALUES 
	(
		
		@pResponsable_Id,
		@pDescripcion,
		@pEmpresa_Id,
		@pPosteado,
		@pInactivo
	)
END 

GO

DROP PROCEDURE afiResponsablesDatos
GO
CREATE PROCEDURE afiResponsablesDatos
(
@pResponsable_Id varchar(15)
)
AS
SET NOCOUNT ON 

SELECT afiResponsables.afiResponsables, afiResponsables.Responsable_Id, afiResponsables.Descripcion, afiResponsables.afiResponsables afiResponsables_Nueva,
	afiResponsables.Empresa_Id, Cast( Case When afiResponsables.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, afiResponsables.Posteado, afiResponsables.Inactivo
FROM afiResponsables 
WHERE (Responsable_Id = @pResponsable_Id)
 
RETURN @@Error 

GO

DROP PROCEDURE afiResponsablesEliminar
GO
CREATE PROCEDURE afiResponsablesEliminar
(
@pResponsable_Id varchar(15)
)
AS
SET NOCOUNT ON 

DELETE FROM afiResponsables 
WHERE (afiResponsables = @pResponsable_Id)
 
 RETURN @@Error 

GO

drop function dbo.FuncFKafiResponsables
go
create function dbo.FuncFKafiResponsables
(
	@pResponsable_Id varchar(15)
)
returns int
as
begin
declare @lIdentity int=(select afiResponsables from afiResponsables where Responsable_Id=@pResponsable_Id)
return @lIdentity
end
GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\afiResponsablesActivo.sql*/

DROP PROCEDURE afiResponsableActivoGuardar
GO
CREATE PROCEDURE afiResponsableActivoGuardar
(
@pResponsable_Id varchar(15),
@pActivoFijo_Id varchar(15),
@pFechaAsignacion datetime,
@pEmpresa_Id int,
@pCantidad qCantidad
)
AS
SET NOCOUNT ON 

	INSERT INTO afiResponsableActivo
	(
		Responsable_Id,
		ActivoFijo_Id,
		FechaAsignacion,
		Cantidad
	)
	VALUES 
	(
		dbo.funcfkafiResponsables( @pResponsable_Id),
		dbo.FuncFKafiActivoFijo(@pActivoFijo_Id, @pEmpresa_Id),
		@pFechaAsignacion,
		@pCantidad
	)


GO

DROP PROCEDURE afiResponsableActivoDatos
GO
CREATE PROCEDURE afiResponsableActivoDatos
(
@pResponsable_Id varchar(15),
@pActivoFijo_Id varchar(15),
@pFechaAsignacion datetime
)
AS
SET NOCOUNT ON 

SELECT afiResponsables.Responsable_Id, afiResponsables.Descripcion as DescripcionResponsables, afiActivoFijo.Empresa_Id, afiActivoFijo.ActivoFijo_Id,
	afiActivoFijo.Descripcion as DescripcionActivoFijo, afiResponsableActivo.FechaAsignacion, afiResponsableActivo.Cantidad
FROM afiResponsableActivo 
INNER JOIN afiResponsables  ON (afiResponsables.afiResponsables = afiResponsableActivo.Responsable_Id)
INNER JOIN afiActivoFijo  ON (afiActivoFijo.afiActivoFijo = afiResponsableActivo.ActivoFijo_Id)
WHERE (afiResponsables.Responsable_Id = @pResponsable_Id)
AND (afiActivoFijo.ActivoFijo_Id = @pActivoFijo_Id)
AND (FechaAsignacion = @pFechaAsignacion)
 
RETURN @@Error 

GO

DROP PROCEDURE afiResponsableActivoEliminar
GO
CREATE PROCEDURE afiResponsableActivoEliminar
(
@pResponsable_Id varchar(15)=NULL,
@pEmpresa_Id int,
@pActivoFijo_Id varchar(15)
)
AS
SET NOCOUNT ON 

DELETE FROM afiResponsableActivo 
WHERE 
(Responsable_Id IS NULL OR  Responsable_Id = isnull(dbo.FuncFKafiResponsables(@pResponsable_Id), Responsable_Id))
AND (ActivoFijo_Id = dbo.FuncFKafiActivoFijo(@pActivoFijo_Id,@pEmpresa_Id))
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\afiRubros.sql*/
DROP PROCEDURE AfiRubrosGuardar
GO
CREATE PROCEDURE AfiRubrosGuardar
(
@pRubro_Id varchar(5),
@pRubro_Id_Nuevo varchar(5),
@pEmpresa_Id Int=NULL,
@pDescripcion varchar(120),
@pVidaUtil int,
@pVidaUtilFiscal int,
@pCtaValorOrigen_Id varchar(25) = NULL,
@pCtaAmortAcum_Id varchar(25) = NULL,
@pCtaAmortizacion_Id varchar(25) = NULL,
@pTipo varchar(2),
@pDigitos smallint, 
@pUsuario_Id Int, 
@pPosteado bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM AfiRubros WHERE Rubro_Id=@pRubro_Id ))
BEGIN 
	UPDATE AfiRubros
	SET		@lIdentidad = AfiRubros,
		Rubro_Id = @pRubro_Id_Nuevo,
		Descripcion = @pDescripcion,
		VidaUtil = @pVidaUtil,
		VidaUtilFiscal = @pVidaUtilFiscal,
		CtaValorOrigen_Id = dbo.FuncFKconCuentas(@pCtaValorOrigen_Id),
		CtaAmortAcum_Id = dbo.FuncFKconCuentas(@pCtaAmortAcum_Id),
		CtaAmortizacion_Id = dbo.FuncFKconCuentas(@pCtaAmortizacion_Id),
		Tipo = @pTipo,
		Digitos = @pDigitos, 
		Usuario_Id =@pUsuario_Id, 
		Posteado = @pPosteado, 
		Empresa_Id = @pEmpresa_Id
	WHERE 
	Rubro_Id = @pRubro_Id
END 
ELSE 
BEGIN 
	INSERT INTO AfiRubros
	(
		Rubro_Id,
		Descripcion,
		VidaUtil,
		VidaUtilFiscal,
		CtaValorOrigen_Id,
		CtaAmortAcum_Id,
		CtaAmortizacion_Id,
		Tipo,
		Digitos, 
		Usuario_Id, 
		Posteado ,
		Empresa_Id, 
		FechaAlta
	)
	VALUES 
	(
		@pRubro_Id_Nuevo,
		@pDescripcion,
		@pVidaUtil,
		@pVidaUtilFiscal,
		dbo.FuncFKconCuentas(@pCtaValorOrigen_Id),
		dbo.FuncFKconCuentas(@pCtaAmortAcum_Id),
		dbo.FuncFKconCuentas(@pCtaAmortizacion_Id),
		@pTipo,
		@pDigitos, 
		@pUsuario_Id, 
		@pPosteado ,
		@pEmpresa_Id,
		dbo.FechaActual()
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE AfiRubrosDatos
GO
CREATE PROCEDURE AfiRubrosDatos
(@pRubro_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT AfiRubros.AfiRubros, AfiRubros.Rubro_Id, 
	Cast(Case when AfiRubros.Empresa_Id IS NULL THEN 1 ELSE 0 END as Bit) PTodasEmpresas,
	AfiRubros.Empresa_Id,
	AfiRubros.Descripcion, AfiRubros.VidaUtil,
	AfiRubros.VidaUtilFiscal, conCuentas.Cuenta_Id as CtaValorOrigen, conCuentas.Descripcion as DescripcionCtaValorOrigen, 
	conCuentas2.Cuenta_Id as CtaAmortAcum_Id,
	conCuentas2.Descripcion as DescripcionCtaAmortAcum_Id, conCuentas3.Cuenta_Id as CtaAmortizacion_Id, 
	conCuentas3.Descripcion as DescripcionCtaAmortizacion_Id, AfiRubros.Tipo,
	AfiRubros.Digitos, AfiRubros.Posteado, genUsuarios.Usuario_Id
FROM AfiRubros 
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = AfiRubros.CtaValorOrigen_Id)
LEFT JOIN conCuentas conCuentas2 ON (conCuentas2.conCuentas = AfiRubros.CtaAmortAcum_Id)
LEFT JOIN conCuentas conCuentas3 ON (conCuentas3.conCuentas = AfiRubros.CtaAmortizacion_Id)
INNER JOIN genUsuarios ON genUsuarios.genUsuarios = AfiRubros.Usuario_Id
WHERE  
AfiRubros.Rubro_Id=@pRubro_Id

  Declare @pidentity bigint= dbo.FuncFKAfiRubros(@pRubro_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'AfiRubros'
 RETURN @@Error 

GO

DROP PROCEDURE AfiRubrosEliminar
GO
CREATE PROCEDURE AfiRubrosEliminar
(@pRubro_Id varchar(5)
)
AS
SET NOCOUNT ON 

DELETE FROM AfiRubros 
WHERE
Rubro_Id =@pRubro_Id  
 RETURN @@Error 

GO

DROP FUNCTION FuncFKAfiRubros
GO

CREATE FUNCTION FuncFKAfiRubros
(
@pRubro_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = AfiRubros FROM AfiRubros WHERE 
	Rubro_Id = @pRubro_Id
  RETURN @pIdentity
END

GO


DROP PROCEDURE AfiRubrosCuentaDatos
GO
CREATE PROCEDURE AfiRubrosCuentaDatos
(
	@pCuenta_Id varchar(15)
)
AS
SET NOCOUNT ON 

SELECT AfiRubros.AfiRubros, AfiRubros.Rubro_Id, 
	Cast(Case when AfiRubros.Empresa_Id IS NULL THEN 1 ELSE 0 END as Bit) PTodasEmpresas,
	AfiRubros.Empresa_Id,
	AfiRubros.Descripcion, AfiRubros.VidaUtil,
	AfiRubros.VidaUtilFiscal, conCuentas.Cuenta_Id as CtaValorOrigen, conCuentas.Descripcion as DescripcionCtaValorOrigen, 
	conCuentas2.Cuenta_Id as CtaAmortAcum_Id,
	conCuentas2.Descripcion as DescripcionCtaAmortAcum_Id, conCuentas3.Cuenta_Id as CtaAmortizacion_Id, 
	conCuentas3.Descripcion as DescripcionCtaAmortizacion_Id, AfiRubros.Tipo,
	AfiRubros.Digitos, AfiRubros.Posteado, genUsuarios.Usuario_Id
FROM AfiRubros 
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = AfiRubros.CtaValorOrigen_Id)
LEFT JOIN conCuentas conCuentas2 ON (conCuentas2.conCuentas = AfiRubros.CtaAmortAcum_Id)
LEFT JOIN conCuentas conCuentas3 ON (conCuentas3.conCuentas = AfiRubros.CtaAmortizacion_Id)
INNER JOIN genUsuarios ON genUsuarios.genUsuarios = AfiRubros.Usuario_Id
WHERE  
conCuentas.Cuenta_Id = @pCuenta_Id

 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\ArmarValorCampoArchivo.sql*/
DROP function ArmarValorCampoArchivo
GO
Create function ArmarValorCampoArchivo(
@pNombreCliente varchar(250),
@pNombreServidor varchar(250)
)
returns varchar(350)
as
begin
return ('X|'+ @pNombreCliente + '|' + @pNombreServidor)
end
Go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\Borra_CuerpoForm.sql*/
DROP PROCEDURE [dbo].[Borra_cuerpoForm] 
GO

CREATE PROCEDURE [dbo].[Borra_cuerpoForm] (@Fomulario_id VarChar(30))
as
IF EXISTS(SELECT 1 FROM sysobjects where name = 'disControlesIndicador' and type = 'U')
BEGIN
Delete from disControlesIndicador where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
END


IF EXISTS(SELECT 1 FROM sysobjects where name = 'disControlesGrillaPivot' and type = 'U')
BEGIN
Delete from disControlesGrillaPivot where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
END


IF EXISTS(SELECT 1 FROM sysobjects where name = 'disControlesListaAdjuntos' and type = 'U')
BEGIN
Delete from disControlesListaAdjuntos where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
END

IF EXISTS(SELECT 1 FROM sysobjects where name = 'disControlesGrafico' and type = 'U')
BEGIN
Delete from disControlesGraficoTorta where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
Delete from disControlesGrafico where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
END


IF EXISTS(SELECT 1 FROM sysobjects where name = 'discontroleslink' and type = 'U')
BEGIN
Delete from discontroleslink where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
Delete from disControlesBoton where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
END

Delete From disFormulariosComentarios where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
Delete From disAccionesTablasaEnviar where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
Delete From disAccionesTablasaActualizar where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE FROM disControlesReferencia where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE FROM disRelacionesTablas where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE FROM disControlesParametros where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE from disControlesUpLoad where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE from discontrolesSegmento where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE from discontrolesCheckBox where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE from disControlesTexto where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE from disControlesNumerico where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
--DELETE from disControlesLupaCodigos where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE from disControlesLupa where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE from disControlesUpLoad where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE from disControlesSegmento where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE from disControlesFecha  where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE from disControlesComboItems where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE from disControlesCombo where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
--DELETE FROM disControlesGrillaColComboItems where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
--DELETE FROM disControlesGrillaColCombo where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
--DELETE FROM disControlesGrillaColBoton where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
--DELETE FROM disControlesGrillaColFecha where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
--DELETE FROM disControlesGrillaColTexto where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
--DELETE FROM disControlesGrillaColNumerico where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE FROM disControlesGrillaColumnas  where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE FROM disControlesGrilla where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE from disAcciones where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE from disEventos where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
--DELETE FROM disEventosColumnas where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
--DELETE FROM disAccionesColumnas where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE from disControlesFilaSolapa where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE from disControlesColumnaSolapa where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE from disControlesSolapa where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE from disControlesGrupoSolapa where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE FROM disControlesRefSolapa where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE FROM disControlesBotonLupa where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE FROM disControlesBotonSegmento where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE from discontroles where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id) and (disControles.Control_Id <> @Fomulario_id)
DELETE FROM disTablasColumnas where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
DELETE FROM disTablas where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
delete from disFormulariosComentarios where formulario_id = dbo.FuncFKdisFormularios(@Fomulario_id)
GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\Borra_Form.sql*/
drop procedure Borrar_Form
go
create procedure Borrar_Form (
	@Formulario_id VarChar(30)
)
as

exec Borra_cuerpoForm @Formulario_id
delete from disControles where Formulario_Id = dbo.FuncFKdisFormularios(@Formulario_id)
delete from disFormularios where Formulario_Id = @Formulario_id

go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comAjuEdoCtaDatos.sql*/
-- comAjuEdoCtaDatos ' ','ZZZZ', 6, 1
DROP Procedure comAjuEdoCtaDatos
GO
Create Procedure comAjuEdoCtaDatos
(
	@pProveeedDesde VarChar(15),
	@pProveeedHasta VarChar(15),
	@pMonto Numeric(18,2) ,
	@pEmpresa_Id Int
)

AS


SELECT @pProveeedDesde AS ProveeedDesde , ' ' as RazonSocialDesde, 
	@pProveeedHasta as ProveeedHasta, ' ' as RazonSocialHasta, 
	@pMonto as Monto, ' ' as CuentaDebe, ' ' as DescripcionCtaDebe, 
	' ' as CuentaHaber, ' ' as DescripcionCtaHaber, 
	' ' as Centro1_Id , ' ' as DescripcionCentro1, 
	' ' as Centro2_Id , ' ' as DescripcionCentro2 


SELECT comProveedores.Proveed_Id, genMonedas.Moneda_Id, comMovTipos.Signo,
	comMovProv.comMovProv, 
	dbo.Segmento(genAsiSegmentos.Segmento_Id, 
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C,  genAsiSegmentos.Segmento4C, 
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N,  genAsiSegmentos.Segmento4N) AS SegmentoStr,
	comProveedores.RazonSocial, 
	comMovprov.Fecha_CCP, genMovCuotas.CuotaNro, genMovCuotas.Importe*comMovTipos.Signo as Importe, 
	genMovCuotas.Saldo*comMovTipos.Signo as Saldo, 
	conAsientos.Cambio, conCuentas.Cuenta_Id
From comMovprov INNER JOIN conAsientos ON
comMovprov.comMovProv = conAsientos.conAsientos
INNER JOIN genAsiSegmentos ON
genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
INNER JOIN comProveedores ON
comProveedores.genEntidades = comMovprov.Proveed_Id
INNER JOIN genMovCuotas ON
genMovCuotas.Asiento_Id =conAsientos.conAsientos
INNER JOIN comMovTipos ON
comMovTipos.TipoMov = comMovprov.TipoMov
INNER JOIN genMonedas ON
genMonedas.genMonedas = conAsientos.Moneda_Id
	INNER JOIN conMovCont ON conMovCont.conAsientos = conAsientos.conAsientos And 
		conMovCont.Clase IN( 'PRO','ANTPR')
	INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
Where
conAsientos.Anulado = 0 and 
genAsiSegmentos.Empresa_Id = @pEmpresa_Id  and 
comProveedores.Proveed_Id Between @pProveeedDesde AND @pProveeedHasta AND 
ABS(genMovCuotas.Saldo*conAsientos.Cambio) <= @pMonto  and 
genMovCuotas.Saldo*conAsientos.Cambio > 0 
order by  1,2,3,5
GO
 
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comAsiCierre.sql*/

DROP PROCEDURE comAsiCierreGuardar
GO
CREATE PROCEDURE comAsiCierreGuardar
(
@pAsiento_Id bigint,
@pFecha qFecha,
@pMoneda_Id varchar(3)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comAsiCierre WHERE (Asiento_Id = @pAsiento_Id)))
BEGIN 
	UPDATE comAsiCierre
	SET	Fecha = @pFecha,
		Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id)
	WHERE (Asiento_Id = @pAsiento_Id)
END 
ELSE 
BEGIN 
	INSERT INTO comAsiCierre
	(
		Asiento_Id,
		Fecha,
		Moneda_Id
		
	)
	VALUES 
	(
		@pAsiento_Id,
		@pFecha,
		dbo.FuncFKgenMonedas(@pMoneda_Id)
	)
END 

GO

DROP PROCEDURE comAsiCierreDatos
GO
CREATE PROCEDURE comAsiCierreDatos
(
@pFecha DateTime, 
@pMoneda_id VarChar(3), 
@pEmpresa_Id Int
)
AS
SET NOCOUNT ON 

DECLARE @Asiento_id bigint
SET @Asiento_id = (SELECT comAsiCierre.Asiento_Id 
		FROM comAsiCierre inner join conAsientos ON
		comAsiCierre.Asiento_Id = conAsientos.conAsientos
		WHERE comAsiCierre.Fecha= @pFecha and 
			comAsiCierre.Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_id) and 
			conAsientos.Empresa_Id = @pEmpresa_Id)
 


SELECT comAsiCierre.Asiento_Id , conAsientos.Empresa_Id, comAsiCierre.Fecha, 
	conAsientos.FechaRegistro, conAsientos.Cambio, conAsientos.CambioMonedaOriginal, 
	conAsientos.Anulado, conAsientos.Observaciones, conAsientos.Posteado,
    comAsiCierre.Fecha, genMonedas.Moneda_Id,  	genMonedas.Descripcion as DescripcionMonedas
FROM comAsiCierre 
INNER JOIN conAsientos  ON conAsientos.conAsientos = comAsiCierre.Asiento_Id
INNER JOIN genMonedas  ON genMonedas.genMonedas = comAsiCierre.Moneda_Id
WHERE comAsiCierre.Fecha= @pFecha and 
	genMonedas.Moneda_Id = @pMoneda_id and 
	conAsientos.Empresa_Id = @pEmpresa_Id

Exec comAsiCierreCrDatos @Asiento_id, null		
 
RETURN @@Error 

GO

DROP PROCEDURE comAsiCierreEliminar
GO
CREATE PROCEDURE comAsiCierreEliminar
(
@Asiento_Id bigInt
)
AS
SET NOCOUNT ON 

DELETE FROM comAsiCierre 
WHERE comAsiCierre.Asiento_Id = @Asiento_Id
 
RETURN @@Error 

GO


-- Asiento a Insertar
drop PROCEDURE comAsiCierreCalculoDatos
go
-- comAsiCierreCalculoDatos '20180331',1
CREATE PROCEDURE comAsiCierreCalculoDatos (
@Fecha DateTime, 
@Empresa_Id Int
)
AS

SELECT @Fecha as Fecha

Select Proveed_id, RazonSocial, Cuenta_id, Descripcion, 
	Moneda_id, Sum(Importe) as Importe, 
	SUM(ImporteMonedaOriginal) AS ImporteMonedaOriginal
	
from (

SELECT genMonedas.Moneda_id, comproveedores.Proveed_id, comProveedores.RazonSocial,
	conCuentas.Cuenta_id,  conCuentas.Descripcion, 
	
	SUM(conMovCont.Importe * (-2*conMovCont.TipoMov+3)) as Importe, 
	SUM(conMovCont.ImporteMonedaOriginal * (-2*conMovCont.TipoMov+3)) as ImporteMonedaOriginal 
FROM comProveedores 
INNER join comMovProv ON comProveedores.genEntidades = comMovProv.Proveed_id
INNER JOIN conAsientos ON conAsientos.conAsientos = comMovProv.comMovProv
INNER JOIN conMovCont ON conMovCont.conAsientos =conAsientos.conAsientos AND conMovCont.Clase IN ('PRO', 'ANTPR')
INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_id 
INNER JOIN genMonedas ON genMonedas.genMonedas = conCuentas.Moneda_id 
INNER JOIn genEmpresas ON genEmpresas.genEmpresas = @Empresa_Id AND genEmpresas.Moneda_Id != genMonedas.genMonedas
WHERE 
	conAsientos.Anulado = 0 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha <= @Fecha 
GROUP BY genMonedas.Moneda_id, comproveedores.Proveed_id, comProveedores.RazonSocial,
	conCuentas.Cuenta_id,  conCuentas.Descripcion
UNION ALL
--APLICACIONES
SELECT  genMonedas.Moneda_id,comproveedores.Proveed_id, comProveedores.RazonSocial,
	conCuentas.Cuenta_id,  conCuentas.Descripcion,
	SUM(conMovCont.Importe * (-2*conMovCont.TipoMov+3)) as Importe, 
	SUM(conMovCont.ImporteMonedaOriginal * (-2*conMovCont.TipoMov+3)) as ImporteMonedaOriginal 
FROM comProveedores 
INNER join commovprov ON comProveedores.genEntidades = comMovProv.Proveed_id
INNER JOIN genCancMov ON genCancMov.Asiento_Id = comMovProv.comMovProv 
INNER JOIN conAsientos ON conAsientos.conAsientos = genCancMov.AsientoApli_Id
INNER JOIN conMovCont ON conMovCont.conAsientos = conAsientos.conAsientos AND conMovCont.Clase IN ('PRO', 'ANTPR')
INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_id 
INNER JOIN genMonedas ON genMonedas.genMonedas = conCuentas.Moneda_id 
INNER JOIn genEmpresas ON genEmpresas.genEmpresas = @Empresa_Id AND genEmpresas.Moneda_Id != genMonedas.genMonedas

WHERE 
	genCancMov.Importacion = 0 and 
	conAsientos.Anulado = 0 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha <= @Fecha 
GROUP BY comproveedores.Proveed_id, comProveedores.RazonSocial,
	conCuentas.Cuenta_id,  conCuentas.Descripcion, genMonedas.Moneda_id
UNION ALL
-- DIFERENCIA EN CAMBIOS
SELECT  genMonedas.Moneda_id,comproveedores.Proveed_id, comProveedores.RazonSocial,
	conCuentas.Cuenta_id,  conCuentas.Descripcion,
	SUM(conMovCont.Importe * (-2*conMovCont.TipoMov+3)) as Importe, 
	SUM(conMovCont.ImporteMonedaOriginal * (-2*conMovCont.TipoMov+3)) as ImporteMonedaOriginal 
FROM comProveedores INNER join commovprov ON
comProveedores.genEntidades = comMovProv.Proveed_id
INNER JOIN genCancMov ON 
genCancMov.Asiento_Id = comMovProv.comMovProv 
INNER JOIN conAsientos ON
conAsientos.conAsientos = genCancMov.AsieDifCambio_Id
INNER JOIN conMovCont ON
conMovCont.conAsientos =conAsientos.conAsientos AND 
conMovCont.Clase IN ('PRO', 'ANTPR')
INNER JOIN conCuentas ON 
conCuentas.conCuentas = conMovCont.Cuenta_id 
INNER JOIN genMonedas ON 
genMonedas.genMonedas = conCuentas.Moneda_id 
INNER JOIn genEmpresas ON
genEmpresas.genEmpresas = @Empresa_Id AND 
genEmpresas.Moneda_Id != genMonedas.genMonedas

WHERE 
	genCancMov.Importacion = 0 and 
	conAsientos.Anulado = 0 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha <= @Fecha 
GROUP BY comproveedores.Proveed_id, comProveedores.RazonSocial,
	conCuentas.Cuenta_id,  conCuentas.Descripcion, genMonedas.Moneda_id

UNION ALL
-- CIERRE DE MES
SELECT genMonedas.Moneda_id,comproveedores.Proveed_id, comProveedores.RazonSocial,
	conCuentas.Cuenta_id,  conCuentas.Descripcion, 
	SUM(conMovCont.Importe * (-2*conMovCont.TipoMov+3)) as Importe, 
	SUM(conMovCont.ImporteMonedaOriginal * (-2*conMovCont.TipoMov+3)) as ImporteMonedaOriginal 
FROM comProveedores INNER join comAsiCierreCr ON
comProveedores.genEntidades = comAsiCierreCr.Proveed_id
INNER JOIN conAsientos ON
conAsientos.conAsientos = comAsiCierreCr.Asiento_id
INNER JOIN conMovCont ON
conMovCont.conAsientos =conAsientos.conAsientos AND 
conMovcont.Renglon = comAsiCierreCr.conRenglon and 
conMovCont.Clase IN ('PRO', 'ANTPR')
INNER JOIN conCuentas ON 
conCuentas.conCuentas = conMovCont.Cuenta_id 
INNER JOIN genMonedas ON 
genMonedas.genMonedas = conCuentas.Moneda_id 
INNER JOIn genEmpresas ON
genEmpresas.genEmpresas = @Empresa_Id AND 
genEmpresas.Moneda_Id != genMonedas.genMonedas

WHERE 
	conAsientos.Anulado = 0 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha <= @Fecha
GROUP BY comproveedores.Proveed_id, comProveedores.RazonSocial,
	conCuentas.Cuenta_id,  conCuentas.Descripcion, genMonedas.Moneda_id
UNION ALL
-- IMPORTACIONES 
SELECT  genMonedas.Moneda_id,comproveedores.Proveed_id, comProveedores.RazonSocial,
	conCuentas.Cuenta_id,  conCuentas.Descripcion,
	SUM(conMovCont.Importe * (-2*conMovCont.TipoMov+3)) as Importe, 
	SUM(conMovCont.ImporteMonedaOriginal * (-2*conMovCont.TipoMov+3)) as ImporteMonedaOriginal 
FROM comProveedores INNER join commovprov ON
comProveedores.genEntidades = comMovProv.Proveed_id
INNER JOIN genCancMov ON 
genCancMov.Asiento_Id = comMovProv.comMovProv 
INNER JOIN conAsientos ON
conAsientos.conAsientos = genCancMov.AsientoApli_Id
INNER JOIN conMovCont ON
conMovCont.conAsientos =conAsientos.conAsientos AND 
conMovCont.Clase IN ('PRO', 'ANTPR')
INNER JOIN conCuentas ON 
conCuentas.conCuentas = conMovCont.Cuenta_id 
INNER JOIN genMonedas ON 
genMonedas.genMonedas = conCuentas.Moneda_id 
INNER JOIn genEmpresas ON
genEmpresas.genEmpresas = @Empresa_Id AND 
genEmpresas.Moneda_Id != genMonedas.genMonedas
INNER JOIN genCancMovApliImpor ON
genCancMovApliImpor.conAsientos = conMovCont.conAsientos and 
genCancMovApliImpor.Renglon = conMovCont.Renglon and 
genCancMovApliImpor.EsDelAp = 0
WHERE 
	genCancMov.Importacion = 1 and 
	conAsientos.Anulado = 0 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha <= @Fecha 
GROUP BY comproveedores.Proveed_id, comProveedores.RazonSocial,
	conCuentas.Cuenta_id,  conCuentas.Descripcion, genMonedas.Moneda_id
-- IMPORTACIONES AP
UNION ALL
SELECT  genMonedas.Moneda_id,comproveedores.Proveed_id, comProveedores.RazonSocial,
	conCuentas.Cuenta_id,  conCuentas.Descripcion,
	SUM(conMovCont.Importe * (-2*conMovCont.TipoMov+3)) as Importe, 
	SUM(conMovCont.ImporteMonedaOriginal * (-2*conMovCont.TipoMov+3)) as ImporteMonedaOriginal 
FROM comProveedores INNER join commovprov ON
comProveedores.genEntidades = comMovProv.Proveed_id
INNER JOIN genCancMov ON 
genCancMov.Asiento_Id_Ap = comMovProv.comMovProv 
INNER JOIN conAsientos ON
conAsientos.conAsientos = genCancMov.AsientoApli_Id
INNER JOIN conMovCont ON
conMovCont.conAsientos =conAsientos.conAsientos AND 
conMovCont.Clase IN ('PRO', 'ANTPR')
INNER JOIN conCuentas ON 
conCuentas.conCuentas = conMovCont.Cuenta_id 
INNER JOIN genMonedas ON 
genMonedas.genMonedas = conCuentas.Moneda_id 
INNER JOIn genEmpresas ON
genEmpresas.genEmpresas = @Empresa_Id AND 
genEmpresas.Moneda_Id != genMonedas.genMonedas
INNER JOIN genCancMovApliImpor ON
genCancMovApliImpor.conAsientos = conMovCont.conAsientos and 
genCancMovApliImpor.Renglon = conMovCont.Renglon and 
genCancMovApliImpor.EsDelAp = 1
WHERE 
	genCancMov.Importacion = 1 and 
	conAsientos.Anulado = 0 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha <= @Fecha 
GROUP BY comproveedores.Proveed_id, comProveedores.RazonSocial,
	conCuentas.Cuenta_id,  conCuentas.Descripcion, genMonedas.Moneda_id
-- IMPORTACIONES DC
UNION ALL
SELECT  genMonedas.Moneda_id,comproveedores.Proveed_id, comProveedores.RazonSocial,
	conCuentas.Cuenta_id,  conCuentas.Descripcion,
	SUM(conMovCont.Importe * (-2*conMovCont.TipoMov+3)) as Importe, 
	SUM(conMovCont.ImporteMonedaOriginal * (-2*conMovCont.TipoMov+3)) as ImporteMonedaOriginal 
FROM comProveedores INNER join commovprov ON
comProveedores.genEntidades = comMovProv.Proveed_id
INNER JOIN genCancMov ON 
genCancMov.Asiento_Id = comMovProv.comMovProv 
INNER JOIN conAsientos ON
conAsientos.conAsientos = genCancMov.AsieDifCambio_Id
INNER JOIN conMovCont ON
conMovCont.conAsientos =conAsientos.conAsientos AND 
conMovCont.Clase IN ('PRO', 'ANTPR')
INNER JOIN conCuentas ON 
conCuentas.conCuentas = conMovCont.Cuenta_id 
INNER JOIN genMonedas ON 
genMonedas.genMonedas = conCuentas.Moneda_id 
INNER JOIn genEmpresas ON
genEmpresas.genEmpresas = @Empresa_Id AND 
genEmpresas.Moneda_Id != genMonedas.genMonedas
INNER JOIN genCancMovApliImpor ON
genCancMovApliImpor.conAsientos = conMovCont.conAsientos and 
genCancMovApliImpor.Renglon = conMovCont.Renglon and 
genCancMovApliImpor.EsDelAp = 0
WHERE 
	genCancMov.Importacion = 1 and 
	conAsientos.Anulado = 0 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha <= @Fecha 
GROUP BY comproveedores.Proveed_id, comProveedores.RazonSocial,
	conCuentas.Cuenta_id,  conCuentas.Descripcion, genMonedas.Moneda_id
-- IMPROTACIONES DC AP
UNION ALL
SELECT  genMonedas.Moneda_id,comproveedores.Proveed_id, comProveedores.RazonSocial,
	conCuentas.Cuenta_id,  conCuentas.Descripcion,
	SUM(conMovCont.Importe * (-2*conMovCont.TipoMov+3)) as Importe, 
	SUM(conMovCont.ImporteMonedaOriginal * (-2*conMovCont.TipoMov+3)) as ImporteMonedaOriginal 
FROM comProveedores INNER join commovprov ON
comProveedores.genEntidades = comMovProv.Proveed_id
INNER JOIN genCancMov ON 
genCancMov.Asiento_Id_Ap = comMovProv.comMovProv 
INNER JOIN conAsientos ON
conAsientos.conAsientos = genCancMov.AsieDifCambio_Id
INNER JOIN conMovCont ON
conMovCont.conAsientos =conAsientos.conAsientos AND 
conMovCont.Clase IN ('PRO', 'ANTPR')
INNER JOIN conCuentas ON 
conCuentas.conCuentas = conMovCont.Cuenta_id 
INNER JOIN genMonedas ON 
genMonedas.genMonedas = conCuentas.Moneda_id 
INNER JOIn genEmpresas ON
genEmpresas.genEmpresas = @Empresa_Id AND 
genEmpresas.Moneda_Id != genMonedas.genMonedas
INNER JOIN genCancMovApliImpor ON
genCancMovApliImpor.conAsientos = conMovCont.conAsientos and 
genCancMovApliImpor.Renglon = conMovCont.Renglon and 
genCancMovApliImpor.EsDelAp = 1
WHERE 
	genCancMov.Importacion = 1 and 
	conAsientos.Anulado = 0 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha <= @Fecha 
GROUP BY comproveedores.Proveed_id, comProveedores.RazonSocial,
	conCuentas.Cuenta_id,  conCuentas.Descripcion, genMonedas.Moneda_id

	) as xxx
GROUP BY Proveed_id, RazonSocial, Cuenta_id, Descripcion, 
	Moneda_id	
ORDER BY 1	,2 


GO
-- aj traigo el revertido tambien si es que existe
DROP PROCEDURE comAsiCierreDatosCierre
GO
CREATE PROCEDURE comAsiCierreDatosCierre
(
@pFecha DateTime, 
@Empresa_Id Int
)
AS
SET NOCOUNT ON 

SELECT @pFecha as Fecha 



SELECT comAsiCierre.Asiento_Id , conAsientos.Empresa_Id, comAsiCierre.Fecha, 
	conAsientos.Anulado, genMonedas.Moneda_Id, 
	genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C,
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C
FROM comAsiCierre 
INNER JOIN conAsientos  ON conAsientos.conAsientos = comAsiCierre.Asiento_Id
INNER JOIN genMonedas  ON genMonedas.genMonedas = comAsiCierre.Moneda_Id
inner join genAsiSegmentos ON
genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
inner join genSegmentos ON
genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
WHERE comAsiCierre.Fecha between @pFecha  and DATEADD(dd,1,@pFecha) and 
conAsientos.Anulado = 0 and 
conAsientos.Empresa_Id = @Empresa_Id

 
RETURN @@Error 

GO





Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comAsiCierreCr.sql*/
DROP PROCEDURE comAsiCierreCrGuardar
GO
CREATE PROCEDURE comAsiCierreCrGuardar
(
@pAsiento_Id bigint,
@pconRenglon int,
@pProveed_id VarChar(15)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comAsiCierreCr WHERE (Asiento_Id = @pAsiento_Id) AND (conRenglon = @pconRenglon)))
BEGIN 
	UPDATE comAsiCierreCr
	SET		Proveed_id = dbo.FuncFKcomProveedores(@pProveed_id)
	WHERE (Asiento_Id = @pAsiento_Id) AND (conRenglon = @pconRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO comAsiCierreCr
	(
		Asiento_Id,
		conRenglon,
		Proveed_id
	)
	VALUES 
	(
		@pAsiento_Id,
		@pconRenglon,
		dbo.FuncFKcomProveedores(@pProveed_id)
	)
END 

GO

DROP PROCEDURE comAsiCierreCrDatos
GO
CREATE PROCEDURE comAsiCierreCrDatos
(
@pAsiento_Id bigint,
@pconRenglon int= NULL
)
AS
SET NOCOUNT ON 

SELECT 
	comAsiCierre.Asiento_Id, 
	comProveedores.Proveed_Id, comProveedores.RazonSocial as DescripcionProveedores,
	comAsiCierreCr.conRenglon, 
	conCuentas.Cuenta_Id, conCuentas.Descripcion DescripcionCuenta,
	conCentro1.Centro1_Id, conCentro1.Descripcion DescripcionCentro1,
	conCentro2.Centro2_Id, conCentro2.Descripcion DescripcionCentro2,
	conMovCont.LeyendaLibroMayor, conMovCont.Importe, 
	conMovCont.ImporteMonedaOriginal, conMovCont.Tipomov,
	conMovCont.Clase
FROM comAsiCierreCr 
INNER JOIN comAsiCierre  ON (comAsiCierre.Asiento_Id = comAsiCierreCr.Asiento_Id)
INNER JOIN conMovCont  ON (conMovCont.conAsientos = comAsiCierreCr.Asiento_Id) AND (conMovCont.Renglon = comAsiCierreCr.conRenglon)
INNER JOIN conMovCont conMovCont2 ON (conMovCont2.conAsientos = comAsiCierreCr.Asiento_Id) AND (conMovCont2.Renglon = comAsiCierreCr.conRenglon)
INNER JOIN comProveedores  ON (comProveedores.genEntidades = comAsiCierreCr.Proveed_id)
INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_id
INNER JOIN conCentro1 ON conCentro1.conCentro1 = conMovCont.Centro1_id
INNER JOIN conCentro2 ON conCentro2.conCentro2 = conMovCont.Centro2_id
WHERE comAsiCierreCr.Asiento_Id = @pAsiento_Id AND		
comAsiCierreCr.conRenglon = IsNull(@pconRenglon, comAsiCierreCr.conRenglon)
 
RETURN @@Error 

GO

DROP PROCEDURE comAsiCierreCrEliminar
GO
CREATE PROCEDURE comAsiCierreCrEliminar
(
@pAsiento_Id bigint,
@pconRenglon int=NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comAsiCierreCr 
WHERE Asiento_Id = @pAsiento_Id AND 
comAsiCierreCr.conRenglon = IsNull(@pconRenglon, comAsiCierreCr.conRenglon)
 
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comAsiSegmentosAnul.sql*/

DROP PROCEDURE comAsiSegmentosAnulGuardar
GO
CREATE PROCEDURE comAsiSegmentosAnulGuardar
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pFechaAnulacion qFechaHora,
@pAsiento_Id bigint,
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comAsiSegmentosAnul WHERE (Empresa_Id = @pEmpresa_Id) AND 
	(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
		(Segmento1N = @pSegmento1N) AND (Segmento2N = @pSegmento2N) AND (Segmento3N = @pSegmento3N) AND 
		(Segmento4N = @pSegmento4N) AND (Segmento1C = @pSegmento1C) AND (Segmento2C = @pSegmento2C) AND 
		(Segmento3C = @pSegmento3C) AND (Segmento4C = @pSegmento4C) AND (FechaAnulacion = @pFechaAnulacion)))
BEGIN 
	UPDATE comAsiSegmentosAnul
	SET	Empresa_Id = @pEmpresa_Id,
		Usuario_Id = @pUsuario_Id, 
		Asiento_Id = @pAsiento_Id
	WHERE (Empresa_Id = @pEmpresa_Id) AND 
		(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
		(Segmento1N = @pSegmento1N) AND (Segmento2N = @pSegmento2N) AND (Segmento3N = @pSegmento3N) AND 
		(Segmento4N = @pSegmento4N) AND 
		(Segmento1C = @pSegmento1C) AND (Segmento2C = @pSegmento2C) AND 
		(Segmento3C = @pSegmento3C) AND (Segmento4C = @pSegmento4C) AND 
		(FechaAnulacion = @pFechaAnulacion)
END 
ELSE 
BEGIN 
	INSERT INTO comAsiSegmentosAnul
	(
		Empresa_Id,
		Segmento_Id,
		Segmento1N,
		Segmento2N,
		Segmento3N,
		Segmento4N,
		Segmento1C,
		Segmento2C,
		Segmento3C,
		Segmento4C,
		FechaAnulacion,
		Asiento_Id,
		Usuario_Id
	)
	VALUES 
	(
		@pEmpresa_Id,
		dbo.FuncFKgenSegmentos(@pSegmento_Id),
		@pSegmento1N,
		@pSegmento2N,
		@pSegmento3N,
		@pSegmento4N,
		@pSegmento1C,
		@pSegmento2C,
		@pSegmento3C,
		@pSegmento4C,
		@pFechaAnulacion,
		@pAsiento_Id,
		@pUsuario_Id
	)
END 

GO

DROP PROCEDURE comAsiSegmentosAnulDatos
GO
CREATE PROCEDURE comAsiSegmentosAnulDatos
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pFechaAnulacion qFechaHora
)
AS
SET NOCOUNT ON 

SELECT comAsiSegmentosAnul.Empresa_Id, comAsiSegmentosAnul.Empresa_Id, 
	genSegmentos.Segmento_Id, comAsiSegmentosAnul.Segmento1N,
	comAsiSegmentosAnul.Segmento2N, comAsiSegmentosAnul.Segmento3N, comAsiSegmentosAnul.Segmento4N, comAsiSegmentosAnul.Segmento1C,
	comAsiSegmentosAnul.Segmento2C, comAsiSegmentosAnul.Segmento3C, comAsiSegmentosAnul.Segmento4C, genSegmentos.Descripcion as DescripciongenSegmentos,
	comAsiSegmentosAnul.FechaAnulacion, comAsiSegmentosAnul.Asiento_Id,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario
FROM comAsiSegmentosAnul 
INNER JOIN genSegmentos  ON 
		genSegmentos.genSegmentos = comAsiSegmentosAnul.Segmento_Id
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = comAsiSegmentosAnul.Usuario_Id)
WHERE 
(comAsiSegmentosAnul.Empresa_Id = @pEmpresa_Id)
AND (genSegmentos.Segmento_Id = @pSegmento_Id)
AND (Segmento1N = @pSegmento1N)
AND (Segmento2N = @pSegmento2N)
AND (Segmento3N = @pSegmento3N)
AND (Segmento4N = @pSegmento4N)
AND (Segmento1C = @pSegmento1C)
AND (Segmento2C = @pSegmento2C)
AND (Segmento3C = @pSegmento3C)
AND (Segmento4C = @pSegmento4C)
AND (FechaAnulacion = @pFechaAnulacion)
 
 RETURN @@Error 

GO

DROP PROCEDURE comAsiSegmentosAnulEliminar
GO
CREATE PROCEDURE comAsiSegmentosAnulEliminar
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pFechaAnulacion qFechaHora = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comAsiSegmentosAnul 
WHERE (Empresa_Id = @pEmpresa_Id)
AND (Segmento_Id =  dbo.FuncFKgenSegmentos(@pSegmento_Id))
AND (Segmento1N = @pSegmento1N)
AND (Segmento2N = @pSegmento2N)
AND (Segmento3N = @pSegmento3N)
AND (Segmento4N = @pSegmento4N)
AND (Segmento1C = @pSegmento1C)
AND (Segmento2C = @pSegmento2C)
AND (Segmento3C = @pSegmento3C)
AND (Segmento4C = @pSegmento4C)
AND (FechaAnulacion = ISNULL(@pFechaAnulacion, FechaAnulacion))
 
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comBorrarProveedorDesdeHasta.sql*/
Drop procedure dbo.comBorrarProveedorDesdeHasta
GO

Create procedure dbo.comBorrarProveedorDesdeHasta
(
@pProveed_IdDesde varChar(15),
@pProveed_IdHasta varChar(15),
@pFechaHasta datetime,
@pSecuencia int = NULL,
@pEmpresa_Id int,
@pMoneda varchar(3)
)

as SET NOCOUNT ON 

DELETE FROM comPagosHabilitados 
Where
comPagosHabilitados.tesMovimientos IS NULL AND 
(Secuencia = ISNULL(@pSecuencia, Secuencia)) And 
	exists(select 1 from comProveedores , comMovprov ,conAsientos,genMonedas
		where 
		comMovProv.comMovProv = comPagosHabilitados.comMovProv AND 
		comProveedores.genEntidades=comMovProv.Proveed_Id 
		and 
		comProveedores.Proveed_Id between @pProveed_IdDesde and @pProveed_IdHasta
		and comMovProv.comMovProv=conAsientos.conAsientos
		and conAsientos.Moneda_Id= genMonedas.genMonedas
		and	genMonedas.Moneda_Id=@pMoneda
		)
		
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comCategorias.sql*/
DROP PROCEDURE comCategoriasGuardar
GO
CREATE PROCEDURE comCategoriasGuardar
(
@pCategoria_Id varchar(5),
@pCategoria_Id_Nuevo varchar(5),
@pDescripcion varchar(60),
@pCuenta_Id varchar(25) = NULL,
@pInactivo Sino,
@pPosteado Sino,
@pUsuario_Id int = NULL,
@pEmpresa_Id int=null,
@pPTodasEmpresas bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM comCategorias WHERE (Categoria_Id = @pCategoria_Id)))
BEGIN 
	UPDATE comCategorias
	SET		@lIdentidad = comCategorias,
		Categoria_Id = @pCategoria_Id_Nuevo,
		Descripcion = @pDescripcion,
		Cuenta_Id = dbo.FuncFKconCuentas(@pCuenta_Id),
		Inactivo = @pInactivo,
		Posteado = @pPosteado,
		Usuario_Id = @pUsuario_Id,
		Empresa_Id=@pEmpresa_Id
	WHERE (Categoria_Id = @pCategoria_Id)
END 
ELSE 
BEGIN 
	INSERT INTO comCategorias
	(
		Categoria_Id,
		Descripcion,
		Cuenta_Id,
		Inactivo,
		Posteado,
		Usuario_Id,
		Empresa_Id
	)
	VALUES 
	(
		@pCategoria_Id,
		@pDescripcion,
		dbo.FuncFKconCuentas(@pCuenta_Id),
		@pInactivo,
		@pPosteado,
		@pUsuario_Id,
		@pEmpresa_Id
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE comCategoriasDatos
GO
CREATE PROCEDURE comCategoriasDatos
(
@pCategoria_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT comCategorias.comCategorias, comCategorias.Categoria_Id, comCategorias.Descripcion, conCuentas.Cuenta_Id,
	conCuentas.Descripcion as DescripcionCuentas, comCategorias.Inactivo, comCategorias.Posteado, genUsuarios.Usuario_Id,
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario, comCategorias.Empresa_Id, cast(case when comCategorias.Empresa_Id is null then 1 else 0 end as bit) as PTodasEmpresas
FROM comCategorias 
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = comCategorias.Cuenta_Id)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = comCategorias.Usuario_Id)
WHERE (Categoria_Id = @pCategoria_Id)

 SELECT comSubCategorias.comSubCategorias, comSubCategorias.SubCategoria_Id, comSubCategorias.Descripcion, comCategorias.Categoria_Id,
	comCategorias.Descripcion as DescripcionCategorias, conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, conCentro2.Centro2_Id,
	conCentro2.Descripcion as DescripcionCentro2
FROM comSubCategorias 
INNER JOIN comCategorias  ON (comCategorias.comCategorias = comSubCategorias.Categoria_Id)
LEFT JOIN conCentro1  ON (conCentro1.conCentro1 = comSubCategorias.Centro1_Id)
LEFT JOIN conCentro2  ON (conCentro2.conCentro2 = comSubCategorias.Centro2_Id)

WHERE (comCategorias.Categoria_Id = @pCategoria_Id)
 


 Declare @pidentity bigint= dbo.FuncFKcomCategorias(@pCategoria_Id)  
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'comCategorias'
 RETURN @@Error 

GO

DROP PROCEDURE comCategoriasEliminar
GO
CREATE PROCEDURE comCategoriasEliminar
(
@pCategoria_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comCategorias 
WHERE (Categoria_Id = @pCategoria_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKcomCategorias
GO

CREATE FUNCTION FuncFKcomCategorias
(
@pCategoria_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = comCategorias FROM comCategorias WHERE 
	Categoria_Id = @pCategoria_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comCfdiSat.sql*/
DROP PROCEDURE comCFDISatGuardar
GO
CREATE PROCEDURE comCFDISatGuardar
(
@pUUID char(36),
@pEmpresa_Id int,
@pRFCEmisor char(13),
@pFecha datetime,
@pMonto numeric(18,2),
@pFolio VarChar(25),
@pSerie varchar(100),
@pSubido bit,
@pXML varchar(max) = NULL,
@pUsuario int = NULL,
@pFechaCarga datetime = NULL,
@pTipoComprobante char
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comCFDISat WHERE (UUID = @pUUID)))
BEGIN 
	UPDATE comCFDISat
	SET		Empresa_Id = @pEmpresa_Id,
		RFCEmisor = @pRFCEmisor,
		Fecha = @pFecha,
		Monto = @pMonto,
		Folio = @pFolio,
		Serie = @pSerie,
		Subido = @pSubido,
		XML = @pXML,
		Usuario = @pUsuario,
		FechaCarga = @pFechaCarga,
		TipoDeComprobante=@pTipoComprobante
	WHERE (UUID = @pUUID)
END 
ELSE 
BEGIN 
	INSERT INTO comCFDISat
	(
		UUID,
		Empresa_Id,
		RFCEmisor,
		Fecha,
		Monto,
		Folio,
		Serie,
		Subido,
		XML,
		Usuario,
		FechaCarga,
		TipoDeComprobante
	)
	VALUES 
	(
		@pUUID,
		@pEmpresa_Id,
		@pRFCEmisor,
		@pFecha,
		@pMonto,
		@pFolio,
		@pSerie,
		@pSubido,
		@pXML,
		@pUsuario,
		@pFechaCarga,
		@pTipoComprobante
	)
END 

GO

DROP PROCEDURE comCFDISatDatos
GO
CREATE PROCEDURE comCFDISatDatos
(
@pUUID char(36)
)
AS
SET NOCOUNT ON 

SELECT comCFDISat.UUID, comCFDISat.Empresa_Id, comCFDISat.RFCEmisor, comCFDISat.Fecha,
	comCFDISat.Monto, comCFDISat.Folio, comCFDISat.Serie, comCFDISat.Subido,
	comCFDISat.XML, comCFDISat.Usuario, comCFDISat.FechaCarga, '' as Upload, TipoDeComprobante
FROM comCFDISat 
WHERE (UUID = @pUUID)
 exec comCFDISatPagoDatos @pUUID, null
 RETURN @@Error 

GO

DROP PROCEDURE comCFDISatEliminar
GO
CREATE PROCEDURE comCFDISatEliminar
(
@pUUID char(36) 
)
AS
SET NOCOUNT ON 

DELETE FROM comCFDISat 
WHERE (UUID = @pUUID)
 
 RETURN @@Error 

GO

DROP PROCEDURE comCFDISatDatosRango
GO
CREATE PROCEDURE comCFDISatDatosRango
(
 @pFechaDesde datetime,
 @pFechaHasta datetime,
 @pRFCEmisorDesde varchar(20),
 @pRFCEmisorHasta varchar(20)
)
AS
SET NOCOUNT ON 

select @pFechaDesde as FechaDesde, @pFechaHasta as FechaHasta, @pRFCEmisorDesde as RFCDesde, @pRFCEmisorHasta as RFCHasta
SELECT comCFDISat.UUID, comCFDISat.Empresa_Id, comCFDISat.RFCEmisor, comCFDISat.Fecha,
	comCFDISat.Monto, comCFDISat.Folio, comCFDISat.Serie, comCFDISat.Subido,
	--comCFDISat.XML, comento el xml por que quedaba muy pesado el paquete
	 comCFDISat.Usuario, comCFDISat.FechaCarga, TipoDeComprobante, cast (0 as bit) as Marca
FROM comCFDISat 
WHERE (Fecha between @pFechaDesde and @pFechaHasta) and RFCEmisor between @pRFCEmisorDesde and @pRFCEmisorHasta and Subido=0
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comCFDISatPago.sql*/
DROP PROCEDURE comCFDISatPagoGuardar
GO
CREATE PROCEDURE comCFDISatPagoGuardar
(
@pUUID char(36),
@pRenglon int,
@pUUIDR varchar(36),
@pMonto qMonedaD2,
@pMoneda varchar(3)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comCFDISatPago WHERE (UUID = @pUUID) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE comCFDISatPago
	SET		UUIDR = @pUUIDR,
		Monto = @pMonto,
		Moneda = @pMoneda
	WHERE (UUID = @pUUID) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO comCFDISatPago
	(
		UUID,
		Renglon,
		UUIDR,
		Monto,
		Moneda
	)
	VALUES 
	(
		@pUUID,
		@pRenglon,
		@pUUIDR,
		@pMonto,
		@pMoneda
	)
END 

GO

DROP PROCEDURE comCFDISatPagoDatos
GO
CREATE PROCEDURE comCFDISatPagoDatos
(
@pUUID char(36),
@pRenglon int
)
AS
SET NOCOUNT ON 

SELECT comCFDISatPago.UUID, comCFDISatPago.Renglon, comCFDISatPago.UUIDR,
	comCFDISatPago.Monto, comCFDISatPago.Moneda
FROM comCFDISatPago 
INNER JOIN comCFDISat  ON (comCFDISat.UUID = comCFDISatPago.UUID)
WHERE (comCFDISat.UUID = @pUUID)
AND (Renglon = @pRenglon)
 
 RETURN @@Error 

GO

DROP PROCEDURE comCFDISatPagoEliminar
GO
CREATE PROCEDURE comCFDISatPagoEliminar
(
@pUUID char(36),
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comCFDISatPago 
WHERE (UUID = @pUUID)
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comComprasConsPed.sql*/
DROP Procedure comComprasConsPendDatos
GO

Create Procedure comComprasConsPendDatos
(
	@Producto_Id VarChar(25),
	@Deposito_Id VarChar(5),
	@Empresa_Id int
)
as
select @Producto_Id as Producto_Id, @Deposito_Id Deposito_Id

SELECT comOCCuerpo.comOrdenComp, comOCCuerpo.Renglon_OC, 
	comOCCuerpo.CantidadConsignada - comOCCuerpo.Cantidad_Recibida as Cantidad, 
	genMonedas.Moneda_Id, conCuentas.Cuenta_Id
FROM comOCCuerpo 
	INNER JOIN comOCArticulo ON comOCCuerpo.comOrdenComp = comOCArticulo.comOrdencomp and 
							    comOCCuerpo.Renglon_OC = comOCArticulo.Renglon_OC
	INNER JOIN stkProductos ON  stkProductos.stkProductos = comOCArticulo.Producto_Id
	INNER JOIN comOrdenComp ON  comOrdenComp.comOrdenComp = comOCCuerpo.comOrdenComp
	INNER JOIN stkDepositos ON  stkDepositos.stkDepositos = comOCArticulo.Deposito_Id
	INNER JOIN comOCSegmentos ON comOCSegmentos.comOrdenComp = comOrdenComp.comOrdenComp
	inner join genMonedas on  genMonedas.genMonedas = comOrdenComp.Moneda_Id
	left JOIN conCuentas ON conCuentas.conCuentas = genMonedas.CtaFactaRecibir
WHERE
	stkProductos.Producto_Id = @Producto_Id and 
	stkDepositos.Deposito_id = @Deposito_Id and
	comOCSegmentos.Empresa_Id = @Empresa_Id and
	comOCCuerpo.CantidadConsignada > comOCCuerpo.Cantidad_Recibida and 
	comOrdenComp.Estado_Id IN ('A','P','E')
ORDER BY 1,2

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comCondFiscal.sql*/
DROP PROCEDURE comCondFiscalGuardar
GO
CREATE PROCEDURE comCondFiscalGuardar
(
@pCondFiscal_id varchar(5),
@pCondFiscal_id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(35),
@pCodigoFiscal varchar(3) = NULL,
@pInactivo bit,
@pUsuario_Id int,
@pPosteado bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM comCondFiscal WHERE (CondFiscal_id = @pCondFiscal_id)))
BEGIN 
	UPDATE comCondFiscal
	SET		@lIdentidad = comCondFiscal,
		CondFiscal_id = @pCondFiscal_id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		CodigoFiscal = @pCodigoFiscal,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (CondFiscal_id = @pCondFiscal_id)
END 
ELSE 
BEGIN 
	INSERT INTO comCondFiscal
	(
		CondFiscal_id,
		Empresa_Id,
		Descripcion,
		CodigoFiscal,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pCondFiscal_id,
		@pEmpresa_Id,
		@pDescripcion,
		@pCodigoFiscal,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE comCondFiscalDatos
GO
CREATE PROCEDURE comCondFiscalDatos
(
@pCondFiscal_id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT comCondFiscal.comCondFiscal, comCondFiscal.CondFiscal_id, comCondFiscal.Empresa_Id, Cast( Case When comCondFiscal.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	comCondFiscal.Descripcion, comCondFiscal.CodigoFiscal, comCondFiscal.Inactivo, genUsuarios.Usuario_Id,
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario, comCondFiscal.Posteado
FROM comCondFiscal 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = comCondFiscal.Usuario_Id)
WHERE (CondFiscal_id = @pCondFiscal_id)
 


  Declare @pidentity bigint= dbo.FuncFKcomCondFiscal(@pCondFiscal_id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'comCondFiscal'
 RETURN @@Error 

GO

DROP PROCEDURE comCondFiscalEliminar
GO
CREATE PROCEDURE comCondFiscalEliminar
(
@pCondFiscal_id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comCondFiscal 
WHERE (CondFiscal_id = @pCondFiscal_id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKcomCondFiscal
GO

CREATE FUNCTION FuncFKcomCondFiscal
(
@pCondFiscal_id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = comCondFiscal FROM comCondFiscal WHERE 
	CondFiscal_id = @pCondFiscal_id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comConPago.sql*/
DROP PROCEDURE comConPagoGuardar
GO
CREATE PROCEDURE comConPagoGuardar
(
@pCondPago_Id varchar(5),
@pCondPago_Id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(35),
@pDesde varchar(2),
@pDias int,
@pCantidadCuotas int,
@pAplicaFactCredito bit,
@pAdmiteFactPagoAdel bit,
@pInactivo bit,
@pUsuario_Id int,
@pPosteado bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM comConPago WHERE (CondPago_Id = @pCondPago_Id)))
BEGIN 
	UPDATE comConPago
	SET		@lIdentidad = comConPago,
		CondPago_Id = @pCondPago_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Desde = @pDesde,
		Dias = @pDias,
		CantidadCuotas = @pCantidadCuotas,
		AplicaFactCredito = @pAplicaFactCredito,
		AdmiteFactPagoAdel = @pAdmiteFactPagoAdel,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (CondPago_Id = @pCondPago_Id)
END 
ELSE 
BEGIN 
	INSERT INTO comConPago
	(
		CondPago_Id,
		Empresa_Id,
		Descripcion,
		Desde,
		Dias,
		CantidadCuotas,
		AplicaFactCredito,
		AdmiteFactPagoAdel,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pCondPago_Id,
		@pEmpresa_Id,
		@pDescripcion,
		@pDesde,
		@pDias,
		@pCantidadCuotas,
		@pAplicaFactCredito,
		@pAdmiteFactPagoAdel,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE comConPagoDatos
GO
CREATE PROCEDURE comConPagoDatos
(
@pCondPago_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT comConPago.comConPago, comConPago.CondPago_Id, comConPago.Empresa_Id, Cast( Case When comConPago.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	comConPago.Descripcion, comConPago.Desde, comConPago.Dias, comConPago.CantidadCuotas,
	comConPago.AplicaFactCredito, comConPago.AdmiteFactPagoAdel, comConPago.Inactivo, genUsuarios.Usuario_Id,
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario, comConPago.Posteado
FROM comConPago 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = comConPago.Usuario_Id)
WHERE (CondPago_Id = @pCondPago_Id)
 


 Declare @pidentity bigint= dbo.FuncFKcomConPago(@pCondPago_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'comConPago'
 RETURN @@Error 

GO

DROP PROCEDURE comConPagoEliminar
GO
CREATE PROCEDURE comConPagoEliminar
(
@pCondPago_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comConPago 
WHERE (CondPago_Id = @pCondPago_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKcomConPago
GO

CREATE FUNCTION FuncFKcomConPago
(
@pCondPago_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = comConPago FROM comConPago WHERE 
	CondPago_Id = @pCondPago_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comConsEdoCtaOcEmbDatos.sql*/

--exec comConsEdoCtaOcEmbDatos 5176

drop procedure comConsEdoCtaOcEmbDatos
go

create procedure comConsEdoCtaOcEmbDatos
(@pcomMovProv bigint)
as
select comMovProv , comMovPOC.comOrdenComp,	dbo.Segmento(Segmento_Id,Segmento1C,Segmento2C,Segmento3C,Segmento4C,Segmento1N,Segmento2N,Segmento3N,Segmento4N)as SegmentoSTR from comMovPOC
inner join comOCSegmentos on comOCSegmentos.comOrdenComp=comMovPOC.comOrdenComp
where comMovProv = @pcomMovProv

union
select comMovProv, comOcMovProv.comOrdenComp,	dbo.Segmento(Segmento_Id,Segmento1C,Segmento2C,Segmento3C,Segmento4C,Segmento1N,Segmento2N,Segmento3N,Segmento4N)as SegmentoSTR  from comOcMovProv 
inner join comOCSegmentos on comOCSegmentos.comOrdenComp=comOcMovProv.comOrdenComp
where comMovProv = @pcomMovProv


select comMovProv, comEmbarques,	dbo.Segmento(Segmento_Id,Segmento1C,Segmento2C,Segmento3C,Segmento4C,Segmento1N,Segmento2N,Segmento3N,Segmento4N)as SegmentoSTR  from comMovProvEmb
inner join genAsiSegmentos on genAsiSegmentos.Asiento_Id=comMovProvEmb.comEmbarques
 where  comMovProv = @pcomMovProv

union
select comMovProv, comEmbarques,	dbo.Segmento(Segmento_Id,Segmento1C,Segmento2C,Segmento3C,Segmento4C,Segmento1N,Segmento2N,Segmento3N,Segmento4N)as SegmentoSTR  from comEmbGastoMovProv 
inner join genAsiSegmentos on genAsiSegmentos.Asiento_Id=comEmbGastoMovProv.comEmbarques
where  comMovProv = @pcomMovProv
go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comConsEdoCtaProveedores.sql*/

-- comConsEdoCtaProveedores '0722',2, '20190401','20190531', 'DOL', 1
-- comConsEdoCtaProveedores 'Q001',2, '20170801','20171222', null, 1
-- comConsEdoCtaProveedores 'Q001',2, '20170801','20171222', 'DOL', 1


DROP PROCEDURE comConsEdoCtaProveedores
GO
CREATE PROCEDURE comConsEdoCtaProveedores(
	@Proveed_Id VarChar(15),
	@PendHist INT,
	@FechaDesde DateTime,
	@FechaHasta DateTime,
	@Moneda_Id VarChar(5)=NULL,
	@Empresa Int
)

AS
select @Proveed_Id as Proveed_Id, @PendHist as PendHist,
	@FechaDesde as FechaDesde, @FechaHasta as FechaHasta,
	@Moneda_Id as Moneda_Id, @Empresa as Empresa, ISNULL(comProveedores.RazonSocial, ' ') as RazonSocial,
	ISNULL(genMonedas.Descripcion,' ') as DescripcionMoneda, DATEADD(dd, 0, DATEDIFF(dd, 0, dbo.FechaActual())) as FechaAplicacion,
	dbo.FechaActual() as FechaApli, 0 as Renglon, ' ' AS XmlUpload, '' as Xml, cast('' as char) as OrigenXml
FROM comProveedores
	LEFT OUTER JOIN genMonedas ON genMonedas.Moneda_id = @Moneda_Id
WHERE Proveed_Id = @Proveed_Id

	SELECT commovprov.comMovProv,
		comMovTipos.TipoMov, comMovTipos.Descripcion as Tipomovs, dbo.Segmento(genAsiSegmentos.Segmento_Id, 
	genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Segmento,
		comMovProv.Fecha_CCP Fecha,
		case when comMovTipos.Signo=1  then 
	genMovCuotas.Importe ELSE 0 end 
		* case When @Moneda_Id IS NULL THEN dbo.func_TipoCambio(conAsientos.Moneda_id, @FechaHasta, @Empresa) else 1 end as Debe,
		case when comMovTipos.Signo=-1  then 
	genMovCuotas.Importe  else 0 end 
		* case When @Moneda_Id IS NULL THEN dbo.func_TipoCambio(conAsientos.Moneda_id, @FechaHasta, @Empresa) else 1 end as Haber,
		CASE WHEN @PendHist=1 THEN  genMovCuotas.Saldo else case when commovprov.FacturaTesoreria=1 then 0 else genMovCuotas.Saldo end end * comMovTipos.Signo 
	* case When @Moneda_Id IS NULL THEN dbo.func_TipoCambio(conAsientos.Moneda_id, @FechaHasta, @Empresa) else 1 end as Saldo,
		CASE WHEN @PendHist=1 THEN  genMovCuotas.Saldo else case when commovprov.FacturaTesoreria=1 then 0 else genMovCuotas.Importe end end * comMovTipos.Signo 
	* case When @Moneda_Id IS NULL THEN dbo.func_TipoCambio(conAsientos.Moneda_id, @FechaHasta, @Empresa) else 1 end as SaldoAcum,
		genMovCuotas.CuotaNro,
		genMovCuotas.FechaVencimiento, genMonedas.Moneda_Id, conAsientos.Cambio,
		genUsuarios.Apellido_y_Nombres, conAsientos.FechaRegistro,
		CASE WHEN ISNULL(CONVERT(char(1),comMovProv.XMLFiscal), ' ') = ' ' THEN 0 ELSE 1 END AS XML, cast(0 as bit) as EditaEmbarques,
		conAsientos.Observaciones, comMovProv.Base_Ganancias, comProveedoresTipoPasivo.TipoCtaProv, comProveedoresTipoPasivo.Descripcion TipoCtaProvDescripcion, comMovProv.ClaveFiscal
	FROM COMMOVPROV
		INNER JOIN comProveedores ON COMMOVPROV.Proveed_Id = comProveedores.genEntidades
		INNER JOIN comMovTipos ON comMovTipos.TipoMov = commovprov.TipoMov
		inner join genAsiSegmentos on genAsiSegmentos.Asiento_Id = comMovProv.comMovProv
		INNER JOIN conAsientos ON conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
		INNER JOIN genEmpresas ON conAsientos.Empresa_Id = genEmpresas.genEmpresas
		INNER JOIN genMovCuotas ON genMovCuotas.Asiento_Id =comMovProv.comMovProv
		INNER JOIN genMonedas ON genMonedas.genMonedas = case When @Moneda_Id IS NULL then genEmpresas.Moneda_Id else conAsientos.Moneda_Id end
		inner join genUsuarios ON genUsuarios.genUsuarios = conAsientos.Usuario_Id
		Left Join comProveedoresTipoPasivo On comProveedoresTipoPasivo.TipoCtaProv = comMovProv.TipoCtaProv
	--Left Join tesRengMovicomMovProv On tesRengMovicomMovProv.comMovProv = comMovProv.comMovProv
	WHERE
	conAsientos.Empresa_Id =@Empresa And conAsientos.Anulado = 0 And conAsientos.Posteado = 1 And --tesRengMovicomMovProv.tesMovimientos Is Null And
		comProveedores.Proveed_Id =@Proveed_Id and
		((genMovCuotas.Saldo > 0 and @PendHist = 1 AND comMovProv.FacturaTesoreria = 0 ) or (
			--conAsientos.Fecha between @FechaDesde and @FechaHasta and @PendHist = 2)) and 
			comMovProv.Fecha_CCP between @FechaDesde and @FechaHasta and @PendHist = 2 )) and
		genMonedas.Moneda_Id = ISNULL(@Moneda_Id, genMonedas.Moneda_Id)

UNION ALL
	-- IMPORTACIONES
	SELECT commovprov.comMovProv,
		comMovTipos.TipoMov, comMovTipos.Descripcion as Tipomovs, dbo.Segmento(genAsiSegmentos.Segmento_Id, 
	genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Segmento,
		genCancMov.FechaAplicacion Fecha,
		genCancMov.Importe_ap 	* case When @Moneda_Id IS NULL THEN dbo.func_TipoCambio(conAsientos1.Moneda_id, @FechaHasta, @Empresa) else 1 end  as Debe,
		0 as Haber,
		genCancMov.Importe_ap * case When @Moneda_Id IS NULL THEN dbo.func_TipoCambio(conAsientos1.Moneda_id, @FechaHasta, @Empresa) else 1 end  as Saldo,
		genCancMov.Importe_ap * case When @Moneda_Id IS NULL THEN dbo.func_TipoCambio(conAsientos1.Moneda_id, @FechaHasta, @Empresa) else 1 end  as SaldoAcum,
		genCancMov.CuotaNro CuotaNro,
		genMovCuotas.FechaVencimiento, genMonedas.Moneda_Id, conAsientos.Cambio,
		genUsuarios.Apellido_y_Nombres, conAsientos.FechaRegistro,
		CASE WHEN ISNULL(CONVERT(char(1),comMovProv.XMLFiscal), ' ') = ' ' THEN 0 ELSE 1 END AS XML, cast(0 as bit) as EditaEmbarques,
		conAsientos.Observaciones, comMovProv.Base_Ganancias, comProveedoresTipoPasivo.TipoCtaProv, comProveedoresTipoPasivo.Descripcion TipoCtaProvDescripcion, commovprov.ClaveFiscal
	FROM genCancMov INNER JOIN COMMOVPROV ON genCancMov.Asiento_Id = COMMOVPROV.comMovProv
		INNER JOIN commovprov  commovprov1 on genCancMov.Asiento_Id_ap = COMMOVPROV1.comMovProv
		INNER JOIN comProveedores ON COMMOVPROV1.Proveed_Id = comProveedores.genEntidades
		INNER JOIN comMovTipos ON comMovTipos.TipoMov = commovprov.TipoMov
		inner join genAsiSegmentos on genAsiSegmentos.Asiento_Id = comMovProv.comMovProv
		INNER JOIN conAsientos ON conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
		INNER JOIN genEmpresas ON conAsientos.Empresa_Id = genEmpresas.genEmpresas
		INNER JOIN genMovCuotas ON genMovCuotas.Asiento_Id =comMovProv.comMovProv
		inner join genUsuarios ON genUsuarios.genUsuarios = conAsientos.Usuario_Id
		INNER JOIN conAsientos conAsientos1 ON conAsientos1.conAsientos = commovprov1.comMovProv
		INNER JOIN genMonedas ON genMonedas.genMonedas = CASE WHEN @Moneda_Id  IS NULL THEN 
	genEmpresas.Moneda_Id else conAsientos1.Moneda_Id end
		Left Join comProveedoresTipoPasivo On comProveedoresTipoPasivo.TipoCtaProv = comMovProv.TipoCtaProv
	WHERE
	@PendHist= 2 and

		genCancMov.Importacion = 1 and
		conAsientos.Empresa_Id =@Empresa And
		conAsientos1.Anulado = 0 and
		conAsientos1.Posteado = 1 and
		conAsientos.Anulado = 0 And
		conAsientos.Posteado = 1 And --tesRengMovicomMovProv.tesMovimientos Is Null And
		comProveedores.Proveed_Id =@Proveed_Id And commovprov1.Proveed_Id <> comMovProv.Proveed_Id And
		genCancMov.FechaAplicacion between @FechaDesde and @FechaHasta and
		genMonedas.Moneda_Id = ISNULL(@Moneda_Id, genMonedas.Moneda_Id)

UNION ALL
	-- importaciones 2
	SELECT commovprov.comMovProv,
		comMovTipos.TipoMov, comMovTipos.Descripcion as Tipomovs, dbo.Segmento(genAsiSegmentos.Segmento_Id, 
	genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Segmento,
		genCancMov.FechaAplicacion Fecha,
		0 as Debe,
		genCancMov.Importe * case When @Moneda_Id IS NULL THEN dbo.func_TipoCambio(conAsientos.Moneda_id, @FechaHasta, @Empresa) else 1 end as Haber,
		-genCancMov.Importe * case When @Moneda_Id IS NULL THEN dbo.func_TipoCambio(conAsientos.Moneda_id, @FechaHasta, @Empresa) else 1 end  as Saldo,
		-genCancMov.Importe * case When @Moneda_Id IS NULL THEN dbo.func_TipoCambio(conAsientos.Moneda_id, @FechaHasta, @Empresa) else 1 end  as SaldoAcum,
		genCancMov.CuotaNro_Ap CuotaNro,
		genMovCuotas.FechaVencimiento, genMonedas.Moneda_Id, conAsientos.Cambio,
		genUsuarios.Apellido_y_Nombres, conAsientos.FechaRegistro,
		CASE WHEN ISNULL(CONVERT(char(1),comMovProv.XMLFiscal), ' ') = ' ' THEN 0 ELSE 1 END AS XML, cast(0 as bit) as EditaEmbarques,
		conAsientos.Observaciones, comMovProv.Base_Ganancias, comProveedoresTipoPasivo.TipoCtaProv, comProveedoresTipoPasivo.Descripcion TipoCtaProvDescripcion, comMovProv.ClaveFiscal
	FROM genCancMov INNER JOIN COMMOVPROV ON genCancMov.Asiento_Id_AP = COMMOVPROV.comMovProv
		INNER JOIN commovprov  commovprov1 on genCancMov.Asiento_Id = COMMOVPROV1.comMovProv
		INNER JOIN comProveedores ON COMMOVPROV1.Proveed_Id = comProveedores.genEntidades
		INNER JOIN comMovTipos ON comMovTipos.TipoMov = commovprov.TipoMov
		inner join genAsiSegmentos on genAsiSegmentos.Asiento_Id = comMovProv.comMovProv
		INNER JOIN conAsientos ON conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
		INNER JOIN genMovCuotas ON genMovCuotas.Asiento_Id =comMovProv.comMovProv
		inner join genUsuarios ON genUsuarios.genUsuarios = conAsientos.Usuario_Id
		INNER JOIN conAsientos conAsientos1 ON conAsientos1.conAsientos = commovprov1.comMovProv
		INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos1.Moneda_Id
		Left Join comProveedoresTipoPasivo On comProveedoresTipoPasivo.TipoCtaProv = comMovProv.TipoCtaProv
	WHERE
	@PendHist= 2 and
		conAsientos1.Anulado = 0 and
		conAsientos1.Posteado = 1 and
		genCancMov.Importacion = 1 and
		conAsientos.Empresa_Id =@Empresa And conAsientos.Anulado = 0 And conAsientos.Posteado = 1 And --tesRengMovicomMovProv.tesMovimientos Is Null And
		comProveedores.Proveed_Id =@Proveed_Id And commovprov1.Proveed_Id <> comMovProv.Proveed_Id And
		genCancMov.FechaAplicacion between @FechaDesde and @FechaHasta and
		genMonedas.Moneda_Id = ISNULL(@Moneda_Id, genMonedas.Moneda_Id)
UNION ALL
	SELECT SI.comMovProv, SI.TipoMov, SI.Tipomovs, SI.Segmento,
		SI.Fecha, SUM(SI.Debe) AS Debe, SUM(SI.Haber) AS Haber,
		SUM(SI.Saldo) as Saldo, SUM(SI.SaldoAcum) SaldoAcum,
		si.CuotaNro, si.FechaVenc, si.Moneda_Id, si.Cambio,
		si.Apellido_y_Nombres, si.FechaRegistro, si.XML, si.EditaEmbarques,
		si.Observaciones, si.Base_Ganancias, Si.TipoCtaProv, si.TipoCtaProvDescripcion, ''  as ClaveFiscal
	FROM (
					SELECT 0 as comMovProv, ' ' TipoMov, 'Saldo Inicial' as Tipomovs, ' ' Segmento,
				DATEADD(dd,-1,@FechaDesde) as Fecha,
				case when  
		SUM(genMovCuotas.Importe *comMovTipos.Signo ) > 0
	 then 
		SUM(genMovCuotas.Importe *comMovTipos.Signo ) ELSE 0 END as Debe,
				case when  
		SUM(genMovCuotas.Importe *comMovTipos.Signo ) < 0
	 then 
		-SUM(genMovCuotas.Importe *comMovTipos.Signo) ELSE 0  END as Haber,
				SUM(genMovCuotas.Importe *comMovTipos.Signo ) as Saldo,
				SUM(genMovCuotas.Importe *comMovTipos.Signo ) as SaldoAcum,
				0 CuotaNro,
				DATEADD(dd,-1,@FechaDesde) as FechaVenc, genMonedas.Moneda_Id, 1 Cambio,
				' ' Apellido_y_Nombres, DATEADD(dd,-1,@FechaDesde) FechaRegistro ,
				0 AS XML, cast(0 as bit) as EditaEmbarques, '' Observaciones, 0 Base_Ganancias, 0 TipoCtaProv, '' TipoCtaProvDescripcion
			FROM COMMOVPROV
				INNER JOIN comProveedores ON COMMOVPROV.Proveed_Id = comProveedores.genEntidades
				INNER JOIN comMovTipos ON comMovTipos.TipoMov = commovprov.TipoMov
				inner join genAsiSegmentos on genAsiSegmentos.Asiento_Id = comMovProv.comMovProv
				INNER JOIN conAsientos ON conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
				INNER JOIN genMovCuotas ON genMovCuotas.Asiento_Id =comMovProv.comMovProv
				INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
				inner join genUsuarios ON genUsuarios.genUsuarios = conAsientos.Usuario_Id
			--Left Join tesRengMovicomMovProv On tesRengMovicomMovProv.comMovProv = comMovProv.comMovProv
			WHERE commovprov.FacturaTesoreria = 0 and conAsientos.Anulado = 0 And conAsientos.Posteado = 1 And
				conAsientos.Empresa_Id =@Empresa and --tesRengMovicomMovProv.tesMovimientos Is Null And
				comProveedores.Proveed_Id =@Proveed_Id and
				--conAsientos.Fecha < @FechaDesde and
				comMovProv.Fecha_CCP < @FechaDesde and
				@PendHist = 2 and
				genMonedas.Moneda_Id = ISNULL(@Moneda_Id, genMonedas.Moneda_Id)
			GROUP BY genMonedas.Moneda_Id
		UNION ALL
			-- Aplicacion de Importaciones
			SELECT 0 as comMovProv, ' ' TipoMov, 'Saldo Inicial' as Tipomovs, ' ' Segmento,
				DATEADD(dd,-1,@FechaDesde) as Fecha,
				0 as Debe,
				SUM(genCancMov.Importe )   as Haber,
				SUM(-genCancMov.Importe ) as Saldo,
				SUM(-genCancMov.Importe ) as SaldoAcum,
				0 CuotaNro,
				DATEADD(dd,-1,@FechaDesde) as FechaVenc, genMonedas.Moneda_Id, 1 Cambio,
				' ' Apellido_y_Nombres, DATEADD(dd,-1,@FechaDesde) ,
				0 AS XML, cast(0 as bit) as EditaEmbarques, '' Observaciones, 0 Base_Ganancias, 0 TipoCtaProv, '' TipoCtaProvDescripcion
			FROM genCancMov INNER JOIN COMMOVPROV ON genCancMov.Asiento_id = COMMOVPROV.comMovProv
				INNER JOIN comProveedores ON COMMOVPROV.Proveed_Id = comProveedores.genEntidades
				INNER JOIN comMovTipos ON comMovTipos.TipoMov = commovprov.TipoMov
				inner join genAsiSegmentos on genAsiSegmentos.Asiento_Id = comMovProv.comMovProv
				INNER JOIN conAsientos ON conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
				INNER JOIN conAsientos conAsientos1 ON conAsientos1.conAsientos = genCancMov.Asiento_Id_ap
				INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
				inner join genUsuarios ON genUsuarios.genUsuarios = conAsientos.Usuario_Id
			--Left Join tesRengMovicomMovProv On tesRengMovicomMovProv.comMovProv = comMovProv.comMovProv
			WHERE conAsientos1.Anulado = 0 and
				conAsientos1.Posteado = 1 and
				genCancMov.Importacion = 1 and
				commovprov.FacturaTesoreria = 0 and conAsientos.Anulado = 0 And conAsientos.Posteado = 1 And
				conAsientos.Empresa_Id =@Empresa and --tesRengMovicomMovProv.tesMovimientos Is Null And
				comProveedores.Proveed_Id =@Proveed_Id and
				genCancMov.FechaAplicacion < @FechaDesde and
				@PendHist = 2 and
				genMonedas.Moneda_Id = ISNULL(@Moneda_Id, genMonedas.Moneda_Id)
			GROUP BY genMonedas.Moneda_Id

		UNION ALL
			-- Aplicacion de Importaciones
			SELECT 0 as comMovProv, ' ' TipoMov, 'Saldo Inicial' as Tipomovs, ' ' Segmento,
				DATEADD(dd,-1,@FechaDesde) as Fecha,
				SUM(genCancMov.Importe_Ap ) as Debe,
				0  as Haber,
				SUM(genCancMov.Importe_Ap ) as Saldo,
				SUM(genCancMov.Importe_Ap ) as SaldoAcum,
				0 CuotaNro,
				DATEADD(dd,-1,@FechaDesde) as FechaVenc, genMonedas.Moneda_Id, 1 Cambio,
				' ' Apellido_y_Nombres, DATEADD(dd,-1,@FechaDesde) ,
				0 AS XML, cast(0 as bit) as EditaEmbarques, '' Observaciones, 0 Base_Ganancias, 0 TipoCtaProv, '' TipoCtaProvDescripcion
			FROM genCancMov INNER JOIN COMMOVPROV ON genCancMov.Asiento_id_ap = COMMOVPROV.comMovProv
				INNER JOIN comProveedores ON COMMOVPROV.Proveed_Id = comProveedores.genEntidades
				INNER JOIN comMovTipos ON comMovTipos.TipoMov = commovprov.TipoMov
				inner join genAsiSegmentos on genAsiSegmentos.Asiento_Id = comMovProv.comMovProv
				INNER JOIN conAsientos ON conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
				INNER JOIN conAsientos conAsientos1 ON conAsientos1.conAsientos = genCancMov.Asiento_Id
				INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
				inner join genUsuarios ON genUsuarios.genUsuarios = conAsientos.Usuario_Id
			--Left Join tesRengMovicomMovProv On tesRengMovicomMovProv.comMovProv = comMovProv.comMovProv
			WHERE conAsientos1.Anulado = 0 and
				conAsientos1.Posteado = 1 and
				genCancMov.Importacion = 1 and
				commovprov.FacturaTesoreria = 0 and conAsientos.Anulado = 0 And conAsientos.Posteado = 1 And
				conAsientos.Empresa_Id =@Empresa and --tesRengMovicomMovProv.tesMovimientos Is Null And
				comProveedores.Proveed_Id =@Proveed_Id and
				genCancMov.FechaAplicacion < @FechaDesde and
				@PendHist = 2 and
				genMonedas.Moneda_Id = ISNULL(@Moneda_Id, genMonedas.Moneda_Id)
			GROUP BY genMonedas.Moneda_Id ) AS SI
	GROUP BY SI.comMovProv, SI.TipoMov, SI.Tipomovs, SI.Segmento, 
	SI.Fecha, si.CuotaNro, si.FechaVenc, si.Moneda_Id, si.Cambio, 
	si.Apellido_y_Nombres, si.FechaRegistro, si.XML, si.EditaEmbarques, 
	si.Observaciones, si.Base_Ganancias, Si.TipoCtaProv, si.TipoCtaProvDescripcion
	having  SUM(SI.Saldo) <> 0
ORDER BY 5, 15

--inventario
Select ' ' as Deposito_Id, ' ' as Producto_Id, ' ' as Descripcion, ' ' Medida_Id, 0.00 as Cantidad, 0.00 as Costo, 0.00 as Total

--asiento contable
select ' ' as Cuenta_Id, ' ' as Descripcion, ' ' as Centro1_Id, ' ' as Centro2_Id, 0.00 as Debe, 0.00 as Haber

--aplicaciones
select ' ' as Segmento, convert(datetime,null) as Fecha, 0.00 as Importe, ' ' as Usuario, cast(0 as bit) as Seleccionar, cast (0 as bigint) as Asiento_Id,
	cast(0 as smallint) as NroCuota, 0 as NroAplicacion, cast (0 as bigint) as AsientoApli_Id, cast (0 as bigint) as AsiDifCambio_Id,
	0.00 as Importe_Ap, cast(0 as bit) as Importacion



--impuestos
select ' ' as Impuesto_Id, ' ' as Descripcion, 0.00 as Base, 0.00 as Porcentaje, 0.00 as Importe

--orden de compra
select ' ' as Segmento, convert(datetime,null) as Fecha

--valores
select ' ' as Cartera, ' ' as Descripcion, 0.00 as importe, ' ' as NumeroDoc, convert(datetime, null) as FechaDoc

--Comprobantes
select cast(0 as bigint) as Asiento_Id, ' ' as Segmento, convert(datetime ,null) as Fecha, 0.00 as Importe, 0.00 as Saldo, cast(0 as smallint) as NroCuota, 0.00 as ImporteAplicado

--CompAAplic
select cast(0 as bigint) as Asiento_Id, cast(0 as smallint) as Cuota_Nro, 0.00 as Importe, 0.00 as Signo

--Embarques
select cast(0 as bigint) as comEmbarque, cast(0 as bigint) as comMovProv, '' as Segmento_Id, 0 as Segmento1N, 0 as Segmento2N,
	0 as Segmento3N, 0 as Segmento4N, '' as Segmento1C, '' as Segmento2C, '' as Segmento3C, '' as Segmento4C, '' as SegmentoSTR

--Oc y Emb
exec comConsEdoCtaOcEmbDatos 0

--- Adjuntos
exec genAdjuntosDatos 'comMovprov', 0,0

GO




DROP PROCEDURE comConsEdoCtaProveedoresEliminarXML
GO
CREATE PROCEDURE comConsEdoCtaProveedoresEliminarXML(
	@pcomMovProv bigint
)

as
update comMovProv set XMLFiscal='',ClaveFiscal=Null where comMovProv = @pcomMovProv




go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comConsEdoCtaProveedoresTesoreria.sql*/

-- comConsEdoCtaProveedoresTesoreria '0722','zzzzzzz',1, '20190401','20190531', NULL, 1
-- comConsEdoCtaProveedoresTesoreria 'Q001',2, '20170801','20171222', null, 1
 -- comConsEdoCtaProveedoresTesoreria 'Q001',2, '20170801','20171222', 'DOL', 1


DROP PROCEDURE comConsEdoCtaProveedoresTesoreria
GO
CREATE PROCEDURE comConsEdoCtaProveedoresTesoreria(
@Proveed_Id_Desde VarChar(15), 
@Proveed_Id_Hasta VarChar(15), 
@PendHist INT, 
@FechaDesde DateTime, 
@FechaHasta DateTime,
@Moneda_Id VarChar(5)=NULL, 
@Empresa Int
)

AS
select @Proveed_Id_Desde as Proveed_Id_Desde,@Proveed_Id_Hasta  as Proveed_Id_Hasta,@PendHist as PendHist,
@FechaDesde as FechaDesde, @FechaHasta as FechaHasta,
@Moneda_Id as Moneda_Id, @Empresa as Empresa, ISNULL(comProveedores.RazonSocial, ' ') as RazonSocial, 
ISNULL(genMonedas.Descripcion,' ') as DescripcionMoneda, DATEADD(dd, 0, DATEDIFF(dd, 0, dbo.FechaActual())) as FechaAplicacion, 
dbo.FechaActual() as FechaApli, 0 as Renglon, ' ' AS XmlUpload, '' as Xml, cast('' as char) as OrigenXml
FROM comProveedores 
LEFT OUTER JOIN genMonedas ON genMonedas.Moneda_id = @Moneda_Id
WHERE Proveed_Id between @Proveed_Id_Desde and @Proveed_Id_Hasta
	
SELECT  comProveedores.Proveed_Id, commovprov.comMovProv, 
comMovTipos.TipoMov, comMovTipos.Descripcion as Tipomovs, dbo.Segmento(genAsiSegmentos.Segmento_Id, 
	genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Segmento, 
	comMovProv.Fecha_CCP Fecha, case when comMovTipos.Signo=1  then 
		CASE WHEN @PendHist=1 THEN  genMovCuotas.Importe ELSE genMovCuotas.Importe END else 0 end 
		* case When @Moneda_Id IS NULL THEN dbo.func_TipoCambio(conAsientos.Moneda_id, @FechaHasta, @Empresa) else 1 end as Debe,
	case when comMovTipos.Signo=-1  then 
	CASE WHEN @PendHist=1 THEN  genMovCuotas.Importe ELSE case when commovprov.FacturaTesoreria=1 then 0 else genMovCuotas.Importe end END  else 0 end 
		* case When @Moneda_Id IS NULL THEN dbo.func_TipoCambio(conAsientos.Moneda_id, @FechaHasta, @Empresa) else 1 end as Haber, 
	CASE WHEN @PendHist=1 THEN  genMovCuotas.Saldo else case when commovprov.FacturaTesoreria=1 then 0 else genMovCuotas.Saldo end end * comMovTipos.Signo 
	* case When @Moneda_Id IS NULL THEN dbo.func_TipoCambio(conAsientos.Moneda_id, @FechaHasta, @Empresa) else 1 end as Saldo, 
	CASE WHEN @PendHist=1 THEN  genMovCuotas.Saldo else case when commovprov.FacturaTesoreria=1 then 0 else genMovCuotas.Importe end end * comMovTipos.Signo 
	* case When @Moneda_Id IS NULL THEN dbo.func_TipoCambio(conAsientos.Moneda_id, @FechaHasta, @Empresa) else 1 end as SaldoAcum, 
	Convert(Int,genMovCuotas.CuotaNro) as CuotaNro,
	genMovCuotas.FechaVencimiento, genMonedas.Moneda_Id, conAsientos.Cambio, 
	genUsuarios.Apellido_y_Nombres, conAsientos.FechaRegistro, 
	CASE WHEN ISNULL(CONVERT(char(1),comMovProv.XMLFiscal), ' ') = ' ' THEN 0 ELSE 1 END AS XML, cast(0 as bit) as EditaEmbarques,
	conAsientos.Observaciones, comMovProv.Base_Ganancias, comProveedoresTipoPasivo.TipoCtaProv, comProveedoresTipoPasivo.Descripcion TipoCtaProvDescripcion
FROM COMMOVPROV 
INNER JOIN comProveedores ON COMMOVPROV.Proveed_Id = comProveedores.genEntidades
INNER JOIN comMovTipos ON comMovTipos.TipoMov = commovprov.TipoMov
inner join genAsiSegmentos on genAsiSegmentos.Asiento_Id = comMovProv.comMovProv
INNER JOIN conAsientos ON conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
INNER JOIN genEmpresas ON conAsientos.Empresa_Id = genEmpresas.genEmpresas
INNER JOIN genMovCuotas ON genMovCuotas.Asiento_Id =comMovProv.comMovProv
INNER JOIN genMonedas ON genMonedas.genMonedas = case When @Moneda_Id IS NULL then genEmpresas.Moneda_Id else conAsientos.Moneda_Id end 
inner join genUsuarios ON genUsuarios.genUsuarios = conAsientos.Usuario_Id
Left Join comProveedoresTipoPasivo On comProveedoresTipoPasivo.TipoCtaProv = comMovProv.TipoCtaProv
--Left Join tesRengMovicomMovProv On tesRengMovicomMovProv.comMovProv = comMovProv.comMovProv
WHERE
	conAsientos.Empresa_Id =@Empresa And conAsientos.Anulado = 0 And conAsientos.Posteado = 1 And --tesRengMovicomMovProv.tesMovimientos Is Null And
	comProveedores.Proveed_Id between @Proveed_Id_Desde and @Proveed_Id_Hasta
	and comMovProv.FacturaTesoreria = 1 And
	((CASE WHEN ISNULL(CONVERT(char(1),comMovProv.XMLFiscal), ' ') = ' ' THEN 0 ELSE 1 END = 0 and @PendHist = 1) OR
			(comMovProv.Fecha_CCP between @FechaDesde and @FechaHasta and @PendHist = 2)) and 
				genMonedas.Moneda_Id = ISNULL(@Moneda_Id, genMonedas.Moneda_Id) 
ORDER BY 5, 15

--inventario
Select ' ' as Deposito_Id, ' ' as Producto_Id, ' ' as Descripcion, ' ' Medida_Id, 0.00 as Cantidad, 0.00 as Costo, 0.00 as Total

--asiento contable
select ' ' as Cuenta_Id, ' ' as Descripcion, ' ' as Centro1_Id, ' ' as Centro2_Id, 0.00 as Debe, 0.00 as Haber

--aplicaciones
select ' ' as Segmento, convert(datetime,null) as Fecha, 0.00 as Importe, ' ' as Usuario, cast(0 as bit) as Seleccionar, cast (0 as bigint) as Asiento_Id, 
	cast(0 as smallint) as NroCuota, 0 as NroAplicacion, cast (0 as bigint) as AsientoApli_Id, cast (0 as bigint) as AsiDifCambio_Id,
	0.00 as Importe_Ap, cast(0 as bit) as Importacion
		


--impuestos
select ' ' as Impuesto_Id, ' ' as Descripcion, 0.00 as Base, 0.00 as Porcentaje, 0.00 as Importe

--orden de compra
select ' ' as Segmento, convert(datetime,null) as Fecha

--valores
select ' ' as Cartera, ' ' as Descripcion, 0.00 as importe, ' ' as NumeroDoc, convert(datetime, null) as FechaDoc

--Comprobantes
select cast(0 as bigint) as Asiento_Id, ' ' as Segmento, convert(datetime ,null) as Fecha, 0.00 as Importe, 0.00 as Saldo, cast(0 as smallint) as NroCuota, 0.00 as ImporteAplicado

--CompAAplic
select cast(0 as bigint) as Asiento_Id, cast(0 as smallint) as Cuota_Nro, 0.00 as Importe, 0.00 as Signo

--Embarques
select cast(0 as bigint) as comEmbarque, cast(0 as bigint) as comMovProv, '' as Segmento_Id, 0 as Segmento1N, 0 as Segmento2N,
0 as Segmento3N, 0 as Segmento4N, '' as Segmento1C, '' as Segmento2C, '' as Segmento3C, '' as Segmento4C, '' as SegmentoSTR

--Oc y Emb
exec comConsEdoCtaOcEmbDatos 0

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comDespachos.sql*/
DROP PROCEDURE comDespachosGuardar
GO
CREATE PROCEDURE comDespachosGuardar
(
@pEmpresa_Id int,
@pDespacho_Id varchar(20),
@pDespacho_Id_Nuevo varchar(20),
@pOrigen varchar(35) = NULL,
@pAduana varchar(35) = NULL,
@pFecha qFecha = NULL,
@pUsuario_Id int, 
@pAduana_Id Char(2)=NULL,
@pAnio Char(2)=NULL,
@pPatente Char(4)=NULL,
@pPedimento NUMERIC(7,0)=NULL, 
@pCambio Numeric(18,4), 
@pMoneda_Id VarChar(5), 
@pTomaCambioTes Bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM comDespachos WHERE (Despacho_Id = @pDespacho_Id)))
BEGIN 
	UPDATE comDespachos
	SET	@lIdentidad = comDespachos,
		Empresa_Id = @pEmpresa_Id,
		Despacho_Id = @pDespacho_Id_Nuevo,
		Origen = @pOrigen,
		Aduana = @pAduana,
		Fecha = @pFecha,
		Usuario_Id = @pUsuario_Id, 
		Aduana_Id =@pAduana_Id, 
		Anio = @pAnio, 
		Patente = @pPatente,
		Pedimento = @pPedimento, 
		Cambio = @pCambio , 
		Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id), 
		TomaCambioTes = @pTomaCambioTes
	WHERE (Despacho_Id = @pDespacho_Id)
END 
ELSE 
BEGIN 
	INSERT INTO comDespachos
	(
		Empresa_Id,
		Despacho_Id,
		Origen,
		Aduana,
		Fecha,
		Usuario_Id, 
		Aduana_Id, 
		Anio,
		Patente, 
		Pedimento, 
		Cambio, 
		Moneda_Id ,
		FechaModificacion, 
		TomaCambioTes
	)
	VALUES 
	(
		@pEmpresa_Id,
		@pDespacho_Id,
		@pOrigen,
		@pAduana,
		@pFecha,
		@pUsuario_Id,
		@pAduana_Id, 
		@pAnio, 
		@pPatente, 
		@pPedimento,
		@pCambio,
		dbo.FuncFKgenMonedas(@pMoneda_Id),
		dbo.FechaActual(), 
		@pTomaCambioTes
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE comDespachosDatos
GO
CREATE PROCEDURE comDespachosDatos
(
@pDespacho_Id varchar(20)
)
AS
SET NOCOUNT ON 

SELECT comDespachos.comDespachos, comDespachos.Empresa_Id, comDespachos.Despacho_Id, comDespachos.Origen,
	comDespachos.Aduana, comDespachos.Fecha, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, 
	comDespachos.Aduana_Id, comDespachos.Anio, comDespachos.Patente, comDespachos.Pedimento, 
		comDespachos.Cambio, genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMoneda, 
		comDespachos.FechaModificacion, comDespachos.TomaCambioTes
FROM comDespachos 
Inner JOIN genUsuarios  ON (genUsuarios.genUsuarios = comDespachos.Usuario_Id)
inner join genMonedas on genMonedas.genMonedas = comDespachos.Moneda_Id
WHERE (Despacho_Id = @pDespacho_Id)
 
 Declare @pidentity bigint= dbo.FuncFKcomDespachos(@pDespacho_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'comDespachos'
 RETURN @@Error 

GO

DROP PROCEDURE comDespachosEliminar
GO
CREATE PROCEDURE comDespachosEliminar
(
@pDespacho_Id varchar(20)
)
AS
SET NOCOUNT ON 

DELETE FROM comDespachos 
WHERE (Despacho_Id = @pDespacho_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKcomDespachos
GO

CREATE FUNCTION FuncFKcomDespachos
(
@pDespacho_Id varchar (20)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = comDespachos FROM comDespachos WHERE 
	Despacho_Id = @pDespacho_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comEliminaPendOC.sql*/
DROP PROCEDURE comEliminaPendOCGuardar
GO
CREATE PROCEDURE comEliminaPendOCGuardar
(
@pcomOrdenComp int,
@pUsuario_Id int,
@pFecha qFecha,
@pAsiento_Id bigint = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comEliminaPendOC WHERE (comOrdenComp = @pcomOrdenComp)))
BEGIN 
	UPDATE comEliminaPendOC
	SET		Usuario_Id = @pUsuario_Id,
		Fecha = @pFecha,
		Asiento_Id = @pAsiento_Id
	WHERE (comOrdenComp = @pcomOrdenComp)
END 
ELSE 
BEGIN 
	INSERT INTO comEliminaPendOC
	(
		comOrdenComp,
		Usuario_Id,
		Fecha,
		Asiento_Id
	)
	VALUES 
	(
		@pcomOrdenComp,
		@pUsuario_Id,
		@pFecha,
		@pAsiento_Id
	)
END 

GO

DROP PROCEDURE comEliminaPendOCDatos
GO
CREATE PROCEDURE comEliminaPendOCDatos
(
@pcomOrdenComp int
)
AS
SET NOCOUNT ON 

SELECT comEliminaPendOC.Fecha, 	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, 
	conAsientos.Empresa_id, conAsientos.FechaRegistro, 
	genMonedas.Moneda_id, genMonedas.Descripcion DescripcionMoneda, 
	conAsientos.Cambio, conAsientos.CambioMonedaOriginal, conAsientos.Anulado,
	conAsientos.Observaciones, conAsientos.Posteado
FROM comEliminaPendOC 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = comEliminaPendOC.Usuario_Id)
left join 
	(conAsientos inner join genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_id )  ON conAsientos.conAsientos = comEliminaPendOC.Asiento_Id
WHERE (comEliminaPendOC.comOrdenComp = @pcomOrdenComp)


DECLARE @Asiento_id bigint 
SET @Asiento_id = (SELECT Asiento_id from comEliminaPendOC where 
	(comEliminaPendOC.comOrdenComp = @pcomOrdenComp))
	
exec conMovContDatos @Asiento_id

 
RETURN @@Error 

GO

DROP PROCEDURE comEliminaPendOCEliminar
GO
CREATE PROCEDURE comEliminaPendOCEliminar
(
@pcomOrdenComp int
)
AS
SET NOCOUNT ON 

DELETE FROM comEliminaPendOC 
WHERE (comOrdenComp = @pcomOrdenComp)
 
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comEmbarqueEdtoCta.sql*/


-- comEmbarqueEdtoCta 1, 'EMB',44,0,0,0, '0001',' ',' ',' '
DROP PROCEDURE comEmbarqueEdtoCta 
go

CREATE PROCEDURE comEmbarqueEdtoCta
(
	
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)	
)
AS

DECLARE @pcomEmbarques bigint 

SET @pcomEmbarques = (
SELECT Asiento_id from genAsiSegmentos where
	Empresa_Id = @pEmpresa_id and 
	Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_id) and
	Segmento1N =@pSegmento1N and
	Segmento2N = @pSegmento2N and
	Segmento3N = @pSegmento3N and
	Segmento4N = @pSegmento4N and
	Segmento1C = @pSegmento1C and
	Segmento2C = @pSegmento2C and 
	Segmento3C = @pSegmento3C and 
	Segmento4C = @pSegmento4C )

SELECT genAsiSegmentos.Asiento_Id,	genSegmentos.Segmento_Id, 
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, 
		genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
		genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, 
	genMonedas.Moneda_Id, genMonedas.Descripcion AS DescripcionMoneda, 
	ISNULL( case when comDespachos.TomaCambioTes = 1 then XXX.Cambio else
	comDespachos.Cambio end , 1.0000) as Cambio, Cast(0 as bit) as Cerrando, 
		Cast(0 as Bigint) stkMoviCabeReva, conAsientos.Fecha as FechaCierreStock, 
			ISNULL(( SELECT MAX(conAsientos.Fecha) 
				from 	conAsientos inner join comEmbAsiCierre on
					conAsientos.conAsientos = comEmbAsiCierre.stkMoviCabe
					WHERE
						conAsientos.Anulado = 0 AND 
						conAsientos.Posteado = 1 AND 
						comEmbAsiCierre.comEmbarques = @pcomEmbarques),dbo.FechaActual()) as FechaCierreEmb,
				conAsientos.FechaRegistro , 
				comEmbEstado.Estado_Id, comEmbEstado.Descripcion
from genAsiSegmentos inner join genSegmentos ON
genAsiSegmentos.Segmento_Id = genSegmentos.genSegmentos
INNER JOIN conAsientos ON 
conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
INNER JOIN comEmbarques ON 
	comEmbarques.comEmbarques = conAsientos.conAsientos 
INNER JOIN comEmbEstado ON comEmbEstado.Estado_Id= comEmbarques.Estado_Id
INNER JOIN genMonedas ON
	genMonedas.genMonedas = (select max(Moneda_Id) from comEmbCuerpo, comOrdenComp

			Where
				comEmbCuerpo.comEmbarques =genAsiSegmentos.Asiento_Id and 
				comEmbCuerpo.comOrdenComp = comOrdenComp.comOrdenComp)
left outer join (comDespachos INNER JOIN  (SELECT comEmbCuerpo.comEmbarques, 
				MIN(stkmoviDespa.Despacho_Id) as comDespachos,
 				 MAX(conAsientosE.CambioMonedaOriginal) AS Cambio 				
			FROM stkmoviDespa inner join stkMoviEmbarque on 
				stkmoviDespa.stkMoviCabe = stkMoviEmbarque.stkmovicabe  and 
				stkMoviEmbarque.comEmbarques = @pcomEmbarques
				inner join conAsientos conAsientosE ON conAsientosE.conAsientos = 
					stkmoviDespa.stkMoviCabe
				INNER JOIN comEmbCuerpo ON
					comEmbCuerpo.comEmbarques = @pcomEmbarques 
					group by comEmbCuerpo.comEmbarques) as XXX  ON
					XXX.comDespachos = comDespachos.comDespachos) ON 
					XXX.comEmbarques = genAsiSegmentos.Asiento_Id
					
			
WHere
	genAsiSegmentos.Asiento_Id = @pcomEmbarques

SELECT comMovProv.comMovProv, 
	dbo.Segmento(	
	genAsiSegmentos.Segmento_Id,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, 
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoStr,
	comProveedores.Proveed_Id, comProveedores.RazonSocial, 
	comMovProv.Fecha_CCP, genMonedas.Moneda_Id, conAsientos.Cambio,
	CASE WHEN commovtipos.Signo = 1 THEN 	genMovCuotas.Importe ELSE 0 END AS Debe,
	CASE WHEN commovtipos.Signo = -1 THEN 	genMovCuotas.Importe ELSE 0 END AS Haber,
	genMovCuotas.Saldo*commovtipos.Signo as Saldo, 
	genMovCuotas.Saldo*conAsientos.Cambio as SaldoBase, 
	genMovCuotas.CuotaNro, genMovCuotas.FechaVencimiento
from comMovProv inner join genAsiSegmentos ON
	comMovProv.comMovProv = genAsiSegmentos.Asiento_Id
	INNER JOIN genMovCuotas ON
	genMovCuotas.Asiento_Id = comMovProv.comMovProv
	INNER JOIN comProveedores ON
	comProveedores.genEntidades = comMovProv.Proveed_Id
	INNER JOIN conAsientos ON 
	conAsientos.conAsientos = comMovProv.comMovProv
	INNER JOIN genMonedas ON 
	genMonedas.genMonedas  =  conAsientos.Moneda_Id
	INNER JOIN comMovProvEmb ON
	comMovProvEmb.comMovProv = comMovProv.comMovProv
	INNER JOIN commovtipos ON
	commovtipos.TipoMov = comMovprov.Tipomov
	Where
		conAsientos.Anulado = 0 and 
		conAsientos.Posteado = 1 and
		comMovProvEmb.comEmbarques = @pcomEmbarques

	ORDER BY 5


-- Para Aplicar

--CompAAplic
select cast(0 as bigint) as Asiento_Id, cast(0 as smallint) as Cuota_Nro, 0.00 as Importe, 0.00 as Signo, 
		cast(0.0000 as Numeric(18,4)) as Cambio, ' ' as Moneda_Id, 
			Convert(Numeric(18,2), 0) as Monto, dbo.FechaActual() as FechaApli

-- CompAAplic_Ap
SELECT genCancMov.Asiento_Id_Ap, ' ' as Segmento_str_ap,  
	genCancMov.CuotaNro_Ap, ' ' RazonSocial,  genCancMov.Importe , genCancMov.Importe as Saldo, 
	 1.0000 as Cambio,
	' ' as Moneda_Id, genCancMov.Importe as ImporteAplicado, genCancMov.FechaAplicacion Fecha
from genCancMov where 1 = 2


-- Para Mostrar Gastos

SELECT comEmbGastos.Renglon, comEmbGastos.Detalle, comEmbGastos.Importe as Estimado, 
	ISNULL((SELECT SUM(conMovCont.Importe * (-2*conMovCont.Tipomov+3)) 
		FROM conAsientos 
			inner join comEmbGastoMovProv ON conAsientos.conAsientos = comEmbGastoMovProv.comMovProv 
			INNER join conMovCont ON comEmbGastoMovProv.comMovProv =  conMovCont.conAsientos and 
									 comEmbGastoMovProv.comRenglon = conMovCont.Renglon AND 
									 comEmbGastoMovProv.Renglon = comEmbGastos.Renglon 
			WHERE
				comEmbGastoMovProv.comEmbarques = @pcomEmbarques AND 
				conAsientos.Anulado= 0 and 
				conAsientos.Posteado = 1
		),0) as Real, comEmbGastos.CantidadImporte,0.00 as Diferencia
from comEmbGastos
WHERE
	 comEmbGastos.comEmbarques = @pcomEmbarques
order by 1

-- Para Mostar Productos
SELECT   dbo.Segmento(comOCSegmentos.Segmento_Id, comOCSegmentos.Segmento1C, 
comOCSegmentos.Segmento2C, comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C,
comOCSegmentos.Segmento1N,comOCSegmentos.Segmento2N, comOCSegmentos.Segmento3N,
comOCSegmentos.Segmento4N) as OrdenDeCompra,
comEmbCuerpo.comOrdenComp, comEmbCuerpo.Renglon_OC, stkProductos.Producto_Id,
	stkProductos.Descripcion, comOCCuerpo.Cantidad, comEmbCuerpo.PrecioCalculado* comOrdenComp.Cambio as PrecioCalculado, 
	comOCCuerpo.Precio * comOrdenComp.Cambio as PrecioReal, 0.00 as Diferencia
FROM comEmbCuerpo
inner join comOCArticulo ON  comOCArticulo.comOrdenComp = comEmbCuerpo.comOrdenComp AND 
							  comOCArticulo.Renglon_OC = comEmbCuerpo.Renglon_OC
inner join comOCCuerpo ON comOCArticulo.comOrdenComp = comOCCuerpo.comOrdenComp AND 
							  comOCArticulo.Renglon_OC = comOCCuerpo.Renglon_OC
INNER JOIN stkProductos ON  stkProductos.stkProductos = comOCArticulo.Producto_Id
INNER JOIN comOCSegmentos ON comOCSegmentos.comOrdenComp = comEmbCuerpo.comOrdenComp
INNER JOIN comOrdenComp ON  comOrdenComp.comOrdenComp = comEmbCuerpo.comOrdenComp
where
comEmbCuerpo.comEmbarques = @pcomEmbarques
order by 1,3
GO

Drop procedure comEmbarqueEdtoCtaBorrarCierre
Go
Create procedure comEmbarqueEdtoCtaBorrarCierre
(
@pcomEmbarques bigint
)
As
Update conAsientos Set Anulado = 1
From genEmpresas, comEmbAsiCierre
Where genEmpresas.genEmpresas = conAsientos.Empresa_Id And conAsientos.conAsientos = comEmbAsiCierre.stkMoviCabe And
	comEmbAsiCierre.comEmbarques = @pcomEmbarques And conAsientos.Fecha > genEmpresas.FechaCierreCompras
Go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comEmbarques.sql*/
DROP PROCEDURE comEmbarquesGuardar
GO
CREATE PROCEDURE comEmbarquesGuardar
(
@pcomEmbarques bigint,
@pTipoTransporte char(1),
@pNroOrdenExterior varchar(20),
@pFechaEmbarque qFecha,
@pFechaArribo qFecha,
@pPesoTotal QCantidad,
@pEstado_Id char(1)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comEmbarques WHERE (comEmbarques = @pcomEmbarques)))
BEGIN 
	UPDATE comEmbarques
	SET		TipoTransporte = @pTipoTransporte,
		NroOrdenExterior = @pNroOrdenExterior,
		FechaEmbarque = @pFechaEmbarque,
		FechaArribo = @pFechaArribo,
		PesoTotal = @pPesoTotal,
		Estado_Id = @pEstado_Id
	WHERE (comEmbarques = @pcomEmbarques)
END 
ELSE 
BEGIN 
	INSERT INTO comEmbarques
	(
		comEmbarques,
		TipoTransporte,
		NroOrdenExterior,
		FechaEmbarque,
		FechaArribo,
		PesoTotal,
		Estado_Id
	)
	VALUES 
	(
		@pcomEmbarques,
		@pTipoTransporte,
		@pNroOrdenExterior,
		@pFechaEmbarque,
		@pFechaArribo,
		@pPesoTotal,
		@pEstado_Id
	)
END 

GO



DROP PROCEDURE comEmbarquesDatosIdentity
GO
CREATE PROCEDURE comEmbarquesDatosIdentity
(
@pIdentity int
)
AS
SET NOCOUNT ON 

SELECT comEmbarques.comEmbarques, genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C,
	conAsientos.Fecha, conAsientos.Cambio, genMonedas.Moneda_Id, 
	genMonedas.Descripcion as DescripcionMonedas, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres,
	comEmbarques.TipoTransporte, comEmbarques.NroOrdenExterior,
	comEmbarques.FechaEmbarque, comEmbarques.FechaArribo, comEmbarques.PesoTotal, comEmbarques.Estado_Id,
	comEmbEstado.Descripcion as DescripcionEmbEstado, conAsientos.Posteado, 
	0.00 as Total
FROM comEmbarques
Inner Join conAsientos On conAsientos.conAsientos = comEmbarques.comEmbarques
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
Inner Join genSegmentos On genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
INNER JOIN comEmbEstado  ON (comEmbEstado.Estado_Id = comEmbarques.Estado_Id)
INNER JOIN genMonedas  ON (genMonedas.genMonedas = conAsientos.Moneda_Id)
Inner Join genUsuarios On genUsuarios.genUsuarios = conAsientos.Usuario_Id
WHERE comEmbarques.comEmbarques = @pIdentity

exec comEmbCuerpoDatos @pIdentity

exec comEmbGastosDatos @pIdentity

Exec genAtributosGeneralesIdentityDatos @pIdentity, 'comEmbarques'

Select ' ' Segmento_Id , Segmento1N, Segmento2N, Segmento3N, Segmento4N, 
	   Segmento1C, Segmento2C, Segmento3C, Segmento4C
	 from comocSegmentos 
	 Where 1 = 2

RETURN @@Error 

GO


DROP PROCEDURE comEmbarquesDatos
GO
CREATE PROCEDURE comEmbarquesDatos
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
AS
SET NOCOUNT ON 

Declare @lIdentity int= (select Asiento_Id From genAsiSegmentos
	Where
	genAsiSegmentos.Empresa_id = @pEmpresa_id and 
	genAsiSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C)

exec comEmbarquesDatosIdentity @lIdentity

RETURN @@Error 

GO


DROP PROCEDURE comEmbarquesEliminar
GO
CREATE PROCEDURE comEmbarquesEliminar
(
@pIdentity int
)
AS
SET NOCOUNT ON 

DELETE FROM comEmbarques
WHERE comEmbarques = @pIdentity
RETURN @@Error 

GO


DROP PROCEDURE comEmbarquesCambiarEstado
GO
CREATE PROCEDURE comEmbarquesCambiarEstado
(
@pcomEmbarques bigint,
@pEstado Char(1)
)
AS
Update comEmbarques Set Estado_Id = @pEstado WHERE comEmbarques = @pcomEmbarques
GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comEmbarquesCostoReal.sql*/
-- exec comEmbarquesCostoReal  311, 21.30, '20191231'
DROP PROCEDURE comEmbarquesCostoReal 
GO
CREATE PROCEDURE comEmbarquesCostoReal 
(
	@comEmbarques bigint, 
	@Cambio Numeric(18,4), 
	@Fecha DateTime = NULL
)
AS
Declare @lEmpresa_Id Int
Select @lEmpresa_Id = conAsientos.Empresa_Id
From comEmbarques
Inner Join conAsientos On conAsientos.conAsientos = comEmbarques.comEmbarques
Where comEmbarques.comEmbarques = @comEmbarques

-- Si Tiene 2 veces el mismo prodcuto esta mal
-- Embaruqes 
SELECT stkProductos.Producto_Id, stkProductos.Descripcion, 
	SUM(stkMoviCuerpo.Cantidad) AS Cantidad, comEmbCuerpo.PrecioCalculado*@Cambio as PrecioCalculado, 
	SUM(stkMoviCuerpo.Cantidad*stkMoviCuerpo.CostoUnitario) / SUM(stkMoviCuerpo.Cantidad) as Costo, 
	comOCCuerpo.Precio as PrecioOC, conCuentas.Cuenta_Id as CtaAjuInventario, 
	ISNULL((SELECT sum(stkMoviCuerpoReva.ImporteAjuste + ImporteAjusteCosto)
		from stkMoviCuerpoReva 
		INNER JOIN comEmbAsiCierre ON stkMoviCuerpoReva.stkMoviCabe=comEmbAsiCierre.stkMoviCabe and stkMoviCuerpoReva.Producto_Id = stkProductos.stkProductos
		inner join conasientos conA ON conA.conAsientos = comEmbAsiCierre.stkMoviCabe
			where
				(@Fecha IS NULL OR conA.FechaRegistro <= @Fecha) and 
				conA.Anulado = 0 and conA.Empresa_Id = @lEmpresa_Id And
				conA.Posteado = 1 And comEmbAsiCierre.comEmbarques = @comEmbarques),0) CierresAnt,
	ISNULL((SELECT sum(stkMoviCuerpo.Cantidad * stkMoviCabe.Signo)
		from stkMoviCuerpo
		Inner Join stkMoviCabe On stkMoviCabe.stkMoviCabe = stkMoviCuerpo.stkMoviCabe
		inner join conasientos conA ON conA.conAsientos = stkMoviCabe.stkMoviCabe
			where
				(@Fecha IS NULL OR conA.FechaRegistro <= @Fecha) and stkMoviCuerpo.Producto_Id = stkProductos.stkProductos And
				conA.Anulado = 0 and conA.Empresa_Id = @lEmpresa_Id And
				conA.Posteado = 1),0) Existencia

From stkMoviEmbarque
Inner Join conAsientos On conAsientos.conAsientos = stkMoviEmbarque.comEmbarques
INNER JOIN stkMoviCuerpo ON stkMoviEmbarque.stkMoviCabe = stkMoviCuerpo.stkMoviCabe 
inner join stkProductos ON stkProductos.stkProductos =stkMoviCuerpo.Producto_Id
inner join stkMoviOC ON stkMoviOC.stkMoviCabe = stkMoviCuerpo.stkMoviCabe AND stkMoviOC.Renglon = stkMoviCuerpo.Renglon
INNER JOIN comEmbCuerpo ON comEmbCuerpo.comEmbarques = stkMoviEmbarque.comEmbarques and 
		comEmbCuerpo.comOrdenComp =stkMoviOC.comOrdenComp and
		comEmbCuerpo.Renglon_OC = stkMoviOC.Renglon_OC
INNER JOIN comOCCuerpo ON comOCCuerpo.comOrdenComp = comEmbCuerpo.comOrdenComp and comOCCuerpo.Renglon_OC = comEmbCuerpo.Renglon_OC
inner join comOCArticulo on comocArticulo.comOrdenComp = comEmbCuerpo.comOrdenComp and comocArticulo.Renglon_OC = comEmbCuerpo.Renglon_OC
left JOIN conCuentas ON conCuentas.conCuentas = stkProductos.CtaAjuInventario
WHERE
	stkMoviEmbarque.comEmbarques = @comEmbarques
GROUP BY stkProductos.Producto_Id, stkProductos.Descripcion,comEmbCuerpo.PrecioCalculado, 
comOCCuerpo.Precio, conCuentas.Cuenta_Id, stkProductos.stkProductos

-- FACTURA DE GASTOS

SELECT comEmbGastos.Renglon, 
	comEmbGastos.Importe, comEmbGastos.CantidadImporte, 
	SUM(conMovCont.Importe*(-2*conMovCont.TipoMov+3)) AS ImporteReal
FROM conMovCont inner join comEmbGastoMovProv ON
conMovCont.conAsientos = comEmbGastoMovProv.comMovProv and 
conMovCont.Renglon =comEmbGastoMovProv.comRenglon
inner join comEmbGastos ON
comEmbGastos.comEmbarques = comEmbGastoMovProv.comEmbarques and
comEmbGastos.Renglon = comEmbGastoMovProv.Renglon
inner join comMovDetalle ON
comMovDetalle.comMovProv = comEmbGastoMovProv.comMovProv AND
comMovDetalle.Renglon =comEmbGastoMovProv.comRenglon
WHERE
	 
	comEmbGastoMovProv.comEmbarques = @comEmbarques
GROUP BY comEmbGastos.Renglon, 	comEmbGastos.Importe, comEmbGastos.CantidadImporte


	
GO




Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comEmbarquesOEFAR.sql*/
-- exec comEmbarquesOEFAR 311
DROP PROCEDURE comEmbarquesOEFAR 
GO
CREATE PROCEDURE comEmbarquesOEFAR 
(
	@comEmbarques bigint
)
AS

SELECT SUM(IMPORTE) as Monto FROM 
(

-- Embaruqes 

SELECT SUM(conMovCont.Importe*(-2*conMovCont.TipoMov+3))  AS Importe
FROM conMovCont 
inner join comEmbarques ON conMovCont.conAsientos = comEmbarques.comEmbarques
Inner Join conAsientos On conAsientos.conAsientos = conMovCont.conAsientos
WHERE
	clase = 'OEFAR' and
	conAsientos.Anulado = 0 And conAsientos.Posteado = 1 And
	comEmbarques.comEmbarques = @comEmbarques
-- RECPECION
UNION ALL
SELECT SUM(conMovCont.Importe*(-2*conMovCont.TipoMov+3)) 
FROM conMovCont 
inner join stkMoviEmbarque ON conMovCont.conAsientos = stkMoviEmbarque.stkMoviCabe
Inner Join conAsientos On conAsientos.conAsientos = conMovCont.conAsientos
WHERE
	clase = 'OEFAR' and
	conAsientos.Anulado = 0 And conAsientos.Posteado = 1 And
	stkMoviEmbarque.comEmbarques = @comEmbarques
-- FACTURAS DE ORDEN DE EMBARQUE
UNION ALL
SELECT SUM(conMovCont.Importe*(-2*conMovCont.TipoMov+3)) 
FROM conMovCont 
inner join comMovProvEmb ON conMovCont.conAsientos = comMovProvEmb.comMovProv
Inner Join conAsientos On conAsientos.conAsientos = conMovCont.conAsientos
WHERE
	clase = 'OEFAR' and
	conAsientos.Anulado = 0 And conAsientos.Posteado = 1 And
	comMovProvEmb.comEmbarques = @comEmbarques
UNION ALL
SELECT SUM(conMovCont.Importe*(-2*conMovCont.TipoMov+3)) 
FROM conMovCont 
inner join comEmbAsiCierre ON conMovCont.conAsientos = comEmbAsiCierre.stkMoviCabe 
Inner Join conAsientos On conAsientos.conAsientos = conMovCont.conAsientos
WHERE
	clase = 'OEFAR' and
	conAsientos.Anulado = 0 And conAsientos.Posteado = 1 And
	comEmbAsiCierre.comEmbarques = @comEmbarques
	) AS XXX

	
GO




Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comEmbAsiCierre.sql*/
DROP PROCEDURE comEmbAsiCierreInsertar
GO
CREATE PROCEDURE comEmbAsiCierreInsertar
(
@pcomEmbarques bigint,
@pstkMoviCabe bigint,
@pCambio numeric(18,4)
)
AS
	INSERT INTO comEmbAsiCierre
	(
		comEmbarques,
		stkMoviCabe,
		Cambio
	)
	VALUES 
	(
		@pcomEmbarques,
		@pstkMoviCabe,
		@pCambio
	)

GO

DROP PROCEDURE comEmbAsiCierreDatos
GO
CREATE PROCEDURE comEmbAsiCierreDatos
(
@pcomEmbarques bigint=NULL,
@pstkMoviCabe bigint=NULL
)
AS
SET NOCOUNT ON 

SELECT comEmbAsiCierre.comEmbarques, comEmbAsiCierre.stkMoviCabe, comEmbAsiCierre.Cambio, 
	genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, 
	genAsiSegmentos.Empresa_Id, conAsientos.Fecha
FROM comEmbAsiCierre
INNER JOIN genAsiSegmentos ON comEmbAsiCierre.comEmbarques = genAsiSegmentos.Asiento_Id
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
Inner Join conAsientos On conAsientos.conAsientos = comEmbAsiCierre.stkMoviCabe
WHERE (comEmbarques = ISNULL(@pcomEmbarques,comEmbarques))
	AND (stkMoviCabe = ISNULL(@pstkMoviCabe,stkMoviCabe))
 
 RETURN @@Error 

GO

DROP PROCEDURE comEmbAsiCierreEliminar
GO
CREATE PROCEDURE comEmbAsiCierreEliminar
(
@pcomEmbarques bigint,
@pstkMoviCabe bigint
)
AS
SET NOCOUNT ON 

DELETE FROM comEmbAsiCierre 
WHERE (comEmbarques = @pcomEmbarques)
	AND (stkMoviCabe = @pstkMoviCabe)
 
 RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comEmbCuerpo.sql*/
DROP PROCEDURE comEmbCuerpoGuardar
GO
CREATE PROCEDURE comEmbCuerpoGuardar
(
@pcomEmbarques bigint,
@pcomOrdenComp int,
@pRenglon_OC int,
@pCantidad qCantidadD8,
@pCantidadOriginal qCantidadD8,
@pCantidadRecibida qCantidadD8,
@pCantidadFacturada qCantidadD8,
@pPrecioCalculadoOriginal qMonedaD8,
@pPrecioCalculado qMonedaD8,
@pRenglonDebe int ,
@pRenglonHaber int 
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comEmbCuerpo WHERE (comEmbarques = @pcomEmbarques) AND (comOrdenComp = @pcomOrdenComp) AND (Renglon_OC = @pRenglon_OC)))
BEGIN 
	UPDATE comEmbCuerpo
	SET		Cantidad = @pCantidad,
		CantidadOriginal = @pCantidadOriginal,
		CantidadRecibida = @pCantidadRecibida,
		CantidadFacturada = @pCantidadFacturada,
		PrecioCalculadoOriginal = @pPrecioCalculadoOriginal,
		PrecioCalculado = @pPrecioCalculado,
		RenglonDebe = @pRenglonDebe,
		RenglonHaber = @pRenglonHaber
	WHERE (comEmbarques = @pcomEmbarques) AND (comOrdenComp = @pcomOrdenComp) AND (Renglon_OC = @pRenglon_OC)
END 
ELSE 
BEGIN 
	INSERT INTO comEmbCuerpo
	(
		comEmbarques,
		comOrdenComp,
		Renglon_OC,
		Cantidad,
		CantidadOriginal,
		CantidadRecibida,
		CantidadFacturada,
		PrecioCalculadoOriginal,
		PrecioCalculado,
		RenglonDebe,
		RenglonHaber
	)
	VALUES 
	(
		@pcomEmbarques,
		@pcomOrdenComp,
		@pRenglon_OC,
		@pCantidad,
		@pCantidadOriginal,
		@pCantidadRecibida,
		@pCantidadFacturada,
		@pPrecioCalculadoOriginal,
		@pPrecioCalculado,
		@pRenglonDebe,
		@pRenglonHaber
	)
END 

GO

DROP PROCEDURE comEmbCuerpoDatos
GO
CREATE PROCEDURE comEmbCuerpoDatos
(
@pcomEmbarques bigint,
@pcomOrdenComp int = Null,
@pRenglon_OC int = Null
)
AS
SET NOCOUNT ON 

SELECT comEmbCuerpo.comEmbarques, comEmbCuerpo.comOrdenComp, 
	dbo.Segmento(comOCSegmentos.Segmento_Id, comOCSegmentos.Segmento1C,comOCSegmentos.Segmento2C, 
	comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C, comOCSegmentos.Segmento1N,
	comOCSegmentos.Segmento2N, comOCSegmentos.Segmento3N, comOCSegmentos.Segmento4N) AS SegmentoStr,

	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C, 
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) AS SegmentoStrEmb,

	comEmbCuerpo.Renglon_OC, 
	stkProductos.Producto_Id, stkProductos.Descripcion DescripcionProductos, comOCArticulo.Factor,
	comOCArticulo.CantidadOriginal CantidadOcOriginal, comOcArticulo.PrecioOriginal PrecioOcOriginal, comOCCuerpo.Precio PrecioOc,
	stkDepositos.Deposito_Id, stkDepositos.Descripcion DescripcionDepositos, stkUniMed.Medida_Id,
	comEmbCuerpo.Cantidad, comEmbCuerpo.CantidadOriginal, comEmbCuerpo.CantidadRecibida, comEmbCuerpo.CantidadFacturada,
	comEmbCuerpo.PrecioCalculadoOriginal, comEmbCuerpo.PrecioCalculado, comEmbCuerpo.RenglonDebe, comEmbCuerpo.RenglonHaber,
	comProveedores.Proveed_Id, comProveedores.RazonSocial as DescripcionProveed
	/*, conCuentasDebe.Cuenta_Id, conCuentasDebe.Descripcion DescripcionCuentaDebe,*/

FROM comEmbCuerpo 
INNER JOIN comEmbarques  ON (comEmbarques.comEmbarques = comEmbCuerpo.comEmbarques)
INNER JOIN comOCCuerpo  ON (comOCCuerpo.comOrdenComp = comEmbCuerpo.comOrdenComp) AND (comOCCuerpo.Renglon_OC = comEmbCuerpo.Renglon_OC)
Inner Join comOCArticulo On comOCArticulo.comOrdenComp = comOCCuerpo.comOrdenComp And comOCArticulo.Renglon_OC = comOCCuerpo.Renglon_OC
Inner Join stkProductos On stkProductos.stkProductos = comOCArticulo.Producto_Id
Inner Join stkDepositos On stkDepositos.stkDepositos = comOCArticulo.Deposito_Id
Inner Join stkUniMed On stkUniMed.stkUniMed = comOCCuerpo.Medida_Id
inner join comOCSegmentos on comOCSegmentos.comOrdenComp = comEmbCuerpo.comOrdenComp
inner join comOrdenComp on comOrdenComp.comOrdenComp=comEmbCuerpo.comOrdenComp
inner join comProveedores on comProveedores.genEntidades=comOrdenComp.Proveed_Id
INNER JOIN genAsiSegmentos ON comEmbarques.comEmbarques = genAsiSegmentos.Asiento_Id
/*
Inner Join conMovCont conMovContDebe On conMovContDebe.conAsientos = comEmbCuerpo.comEmbarques And
	conMovContDebe.Renglon = comEmbCuerpo.RenglonDebe
Inner Join conCuentas conCuentasDebe On conCuentasDebe.conCuentas = conMovContDebe.Cuenta_Id
Left Join conCentro1 conCentro1Debe On conCentro1Debe.conCentro1 = conMovContDebe.Centro1_Id
Left Join conCentro2 conCentro2Debe On conCentro2Debe.conCentro2 = conMovContDebe.Centro2_Id
Inner Join conMovCont conMovContHaber On conMovContHaber.conAsientos = comEmbCuerpo.comEmbarques And
	conMovContHaber.Renglon = comEmbCuerpo.RenglonHaber
Inner Join conCuentas conCuentasHaber On conCuentasHaber.conCuentas = conMovContDebe.Cuenta_Id
Left Join conCentro1 conCentro1Haber On conCentro1Haber.conCentro1 = conMovContDebe.Centro1_Id
Left Join conCentro2 conCentro2Haber On conCentro2Haber.conCentro2 = conMovContDebe.Centro2_Id
*/
WHERE comEmbCuerpo.comEmbarques = @pcomEmbarques
AND comEmbCuerpo.comOrdenComp = IsNull(@pcomOrdenComp, comEmbCuerpo.comOrdenComp)
AND comEmbCuerpo.Renglon_OC = IsNull(@pRenglon_OC, comEmbCuerpo.Renglon_OC)
ORDER BY comEmbCuerpo.comOrdenComp, comEmbCuerpo.Renglon_OC
 
RETURN @@Error 

GO


DROP PROCEDURE comEmbCuerpoEliminar
GO
CREATE PROCEDURE comEmbCuerpoEliminar
(
@pcomEmbarques int,
@pcomOrdenComp int = Null,
@pRenglon_OC int = Null
)
AS
SET NOCOUNT ON 

DELETE FROM comEmbCuerpo 
WHERE comEmbCuerpo.comEmbarques = @pcomEmbarques
AND comEmbCuerpo.comOrdenComp = IsNull(@pcomOrdenComp, comEmbCuerpo.comOrdenComp)
AND comEmbCuerpo.Renglon_OC = IsNull(@pRenglon_OC, comEmbCuerpo.Renglon_OC)
 
RETURN @@Error 

GO

DROP PROCEDURE comEmbCuerpoRecibir
GO

CREATE PROCEDURE comEmbCuerpoRecibir
(
@pcomEmbarques int,
@pcomOrdenComp int,
@pRenglon_OC int,
@pCantidad qCantidadD8
)
As

UPDATE comEmbCuerpo Set CantidadRecibida = CantidadRecibida + @pCantidad
	Where comEmbarques = @pcomEmbarques And
		comOrdenComp = @pComOrdenComp And 
		Renglon_OC = @pRenglon_OC	
GO

DROP PROCEDURE comEmbCuerpoFacturar
GO

CREATE PROCEDURE comEmbCuerpoFacturar
(
@pcomEmbarques int,
@pcomOrdenComp int,
@pRenglon_OC int,
@pCantidad qCantidadD8
)
As

UPDATE comEmbCuerpo Set CantidadFacturada = CantidadFacturada + @pCantidad
	Where comEmbarques = @pcomEmbarques And
		comOrdenComp = @pComOrdenComp And 
		Renglon_OC = @pRenglon_OC	
GO

DROP PROCEDURE comOCEmbCuerpoTraeOC
GO
CREATE PROCEDURE comOCEmbCuerpoTraeOC (
@pEmpresa_Id int,
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)

AS

SELECT comOCCuerpo.comOrdenComp,  comOCCuerpo.Renglon_OC, 
	dbo.Segmento(comOCSegmentos.Segmento_Id, comOCSegmentos.Segmento1C,comOCSegmentos.Segmento2C, 
	comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C, comOCSegmentos.Segmento1N,
	comOCSegmentos.Segmento2N, comOCSegmentos.Segmento3N, comOCSegmentos.Segmento4N) AS SegmentoStr,
	stkProductos.Producto_Id, stkProductos.Descripcion DescripcionProductos, comOCArticulo.Factor,
	comOCArticulo.CantidadOriginal CantidadOcOriginal, comOcArticulo.PrecioOriginal PrecioOcOriginal, 
	comOCCuerpo.Precio PrecioOc, (comOCCuerpo.Cantidad - comOCCuerpo.Cantidad_Embarcada) / comOCArticulo.Factor AS CantidadPendiente,
	stkDepositos.Deposito_Id, stkDepositos.Descripcion DescripcionDepositos, stkUniMed.Medida_Id
FROM 
comOCCuerpo Inner Join comOCArticulo On comOCArticulo.comOrdenComp = comOCCuerpo.comOrdenComp And comOCArticulo.Renglon_OC = comOCCuerpo.Renglon_OC
Inner Join stkProductos On stkProductos.stkProductos = comOCArticulo.Producto_Id
Inner Join stkDepositos On stkDepositos.stkDepositos = comOCArticulo.Deposito_Id
Inner Join stkUniMed On stkUniMed.stkUniMed = comOCCuerpo.Medida_Id
inner join comOCSegmentos on comOCSegmentos.comOrdenComp = comOCCuerpo.comOrdenComp
inner join genSegmentos ON genSegmentos.genSegmentos = comOCSegmentos.Segmento_Id
WHERE 
	comOCCuerpo.Cantidad > comOCCuerpo.Cantidad_Embarcada AND 
	genSegmentos.Segmento_Id = @pSegmento_Id and 
	comOCSegmentos.Segmento1N = @pSegmento1N and 
	comOCSegmentos.Segmento2N = @pSegmento2N and 
	comOCSegmentos.Segmento3N = @pSegmento3N and 
	comOCSegmentos.Segmento4N = @pSegmento4N and 
	comOCSegmentos.Segmento1C = @pSegmento1C and 
	comOCSegmentos.Segmento2C = @pSegmento2C and 
	comOCSegmentos.Segmento3C = @pSegmento3C and 
	comOCSegmentos.Segmento4C = @pSegmento4C and
	comOCSegmentos.Empresa_Id = @pEmpresa_Id
ORDER BY 2

 
GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comEmbGastoMovProv.sql*/
DROP PROCEDURE comEmbGastoMovProvInsertar
GO
CREATE PROCEDURE comEmbGastoMovProvInsertar
(
@pcomMovProv bigint,
@pcomRenglon int,
@pcomEmbarques bigint,
@pRenglon int
)
AS
	INSERT INTO comEmbGastoMovProv
	(
		comMovProv,
		comRenglon,
		comEmbarques,
		Renglon
	)
	VALUES 
	(
		@pcomMovProv,
		@pcomRenglon,
		@pcomEmbarques,
		@pRenglon
	)

GO

DROP PROCEDURE comEmbGastoMovProvDatos
GO
CREATE PROCEDURE comEmbGastoMovProvDatos
(
@pcomMovProv bigint,
@pcomRenglon int=null
)
AS
SET NOCOUNT ON 

SELECT comEmbGastoMovProv.comMovProv, comEmbGastoMovProv.comRenglon, comEmbGastoMovProv.comEmbarques,
	comEmbGastoMovProv.Renglon, comEmbGastos.Detalle
FROM comEmbGastoMovProv  
INNER JOIN comEmbGastos  ON (comEmbGastos.comEmbarques = comEmbGastoMovProv.comEmbarques) AND (comEmbGastos.Renglon = comEmbGastoMovProv.Renglon)
WHERE (comMovProv = @pcomMovProv)
AND (comRenglon = ISNULL(@pcomRenglon, comRenglon))
 
RETURN @@Error 

GO

DROP PROCEDURE comEmbGastoMovProvEliminar
GO
CREATE PROCEDURE comEmbGastoMovProvEliminar
(
@pcomMovProv bigint,
@pcomRenglon int=null
)
AS
SET NOCOUNT ON 

DELETE FROM comEmbGastoMovProv 
WHERE (comMovProv = @pcomMovProv)
AND (comRenglon = ISNULL(@pcomRenglon, comRenglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comEmbGastos.sql*/
DROP PROCEDURE comEmbGastosGuardar
GO
CREATE PROCEDURE comEmbGastosGuardar
(
@pcomEmbarques int,
@pRenglon int,
@pDetalle varchar(50),
@pImporteOriginal qMonedaD2,
@pImporte qMonedaD2,
@pMoneda_Id varchar(3),
@pCantidadImporte char(1)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comEmbGastos WHERE (comEmbarques = @pcomEmbarques) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE comEmbGastos
	SET Detalle = @pDetalle,
		ImporteOriginal = @pImporteOriginal,
		Importe = @pImporte,
		Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id),
		CantidadImporte = @pCantidadImporte
	WHERE (comEmbarques = @pcomEmbarques) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO comEmbGastos
	(
		comEmbarques,
		Renglon,
		Detalle,
		ImporteOriginal,
		Importe,
		Moneda_Id,
		CantidadImporte
	)
	VALUES 
	(
		@pcomEmbarques,
		@pRenglon,
		@pDetalle,
		@pImporteOriginal,
		@pImporte,
		dbo.FuncFKgenMonedas(@pMoneda_Id),
		@pCantidadImporte
	)
END 

GO

DROP PROCEDURE comEmbGastosDatos
GO
CREATE PROCEDURE comEmbGastosDatos
(
@pcomEmbarques int,
@pRenglon int = Null
)
AS
SET NOCOUNT ON 

SELECT comEmbarques.comEmbarques, comEmbGastos.Renglon, comEmbGastos.Detalle, comEmbGastos.ImporteOriginal, comEmbGastos.Importe,
	genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas, comEmbGastos.CantidadImporte
FROM comEmbGastos 
INNER JOIN comEmbarques  ON (comEmbarques.comEmbarques = comEmbGastos.comEmbarques)
INNER JOIN genMonedas  ON (genMonedas.genMonedas = comEmbGastos.Moneda_Id)
WHERE (comEmbGastos.comEmbarques = @pcomEmbarques)
AND comEmbGastos.Renglon = IsNull(@pRenglon, comEmbGastos.Renglon)
 
 RETURN @@Error 

GO

DROP PROCEDURE comEmbGastosEliminar
GO
CREATE PROCEDURE comEmbGastosEliminar
(
@pcomEmbarques int,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comEmbGastos 
WHERE (comEmbarques = @pcomEmbarques)
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comEmbSegmentos.sql*/
DROP PROCEDURE comEmbSegmentosGuardar
GO
CREATE PROCEDURE comEmbSegmentosGuardar
(
@pEmpresa_Id int,
@pSegmento_Id varChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pcomEmbarques int,
@pTieneAutomatico bit
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comEmbSegmentos 
		WHERE (Empresa_Id = @pEmpresa_Id) AND 
		(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
		(Segmento1N = @pSegmento1N) AND 
		(Segmento2N = @pSegmento2N) AND 
		(Segmento3N = @pSegmento3N) AND 
		(Segmento4N = @pSegmento4N) AND 
		(Segmento1C = @pSegmento1C) AND 
		(Segmento2C = @pSegmento2C) AND 
		(Segmento3C = @pSegmento3C) AND 
		(Segmento4C = @pSegmento4C)))
BEGIN 
	UPDATE comEmbSegmentos
	SET		Empresa_Id = @pEmpresa_Id,
		comEmbarques = @pcomEmbarques
	WHERE (Empresa_Id = @pEmpresa_Id) AND 
		(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
		(Segmento1N = @pSegmento1N) AND 
		(Segmento2N = @pSegmento2N) AND 
		(Segmento3N = @pSegmento3N) AND 
		(Segmento4N = @pSegmento4N) AND 
		(Segmento1C = @pSegmento1C) AND 
		(Segmento2C = @pSegmento2C) AND 
		(Segmento3C = @pSegmento3C) AND 
		(Segmento4C = @pSegmento4C)
END 
ELSE 
BEGIN
	If @pTieneAutomatico = 1
	Begin
		SET @pSegmento1N = (SELECT MAX(comEmbSegmentos.Segmento1N)+1 AS Segmento1N 
				FROM comEmbSegmentos 
					Where				
					comEmbSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) AND 
					comEmbSegmentos.Segmento2N = @pSegmento2N AND 
					comEmbSegmentos.Segmento3N = @pSegmento3N AND 
					comEmbSegmentos.Segmento4N = @pSegmento4N AND 
					comEmbSegmentos.Segmento1C = @pSegmento1C AND 
					comEmbSegmentos.Segmento2C = @pSegmento2C AND 
					comEmbSegmentos.Segmento3C = @pSegmento3C AND 
					comEmbSegmentos.Segmento4C = @pSegmento4C And
					comEmbSegmentos.Empresa_Id = @pEmpresa_Id)

		If @pSegmento1N Is Null
			SET @pSegmento1N = (SELECT genContadorSegmento.PrimerNumero AS Segmento1N 
				FROM comEmbSegmentos 
				INNER JOIN genContadorSegmento ON genContadorSegmento.Empresa_Id = comEmbSegmentos.Empresa_id And
					(genContadorSegmento.Segmento_Id = comEmbSegmentos.Segmento_Id) AND 
					(genContadorSegmento.Segmento2N = comEmbSegmentos.Segmento2N) AND 
					(genContadorSegmento.Segmento3N = comEmbSegmentos.Segmento3N) AND 
					(genContadorSegmento.Segmento4N = comEmbSegmentos.Segmento4N) AND 
					(genContadorSegmento.Segmento1C = comEmbSegmentos.Segmento1C) AND 
					(genContadorSegmento.Segmento2C = comEmbSegmentos.Segmento2C) AND 
					(genContadorSegmento.Segmento3C = comEmbSegmentos.Segmento3C) AND 
					(genContadorSegmento.Segmento4C = comEmbSegmentos.Segmento4C)
					Where
					genContadorSegmento.Empresa_Id = @pEmpresa_Id)
-- esto solo pasa si empieza en 1 esta prendido
			if @pSegmento1N is null or @pSegmento1N < 0
			begin
				set @pSegmento1N = 1
			end	
	End


	INSERT INTO comEmbSegmentos
	(
		Empresa_Id,
		Segmento_Id,
		Segmento1N,
		Segmento2N,
		Segmento3N,
		Segmento4N,
		Segmento1C,
		Segmento2C,
		Segmento3C,
		Segmento4C,
		comEmbarques
	)
	VALUES 
	(
		@pEmpresa_Id,
		dbo.FuncFKgenSegmentos(@pSegmento_Id),
		@pSegmento1N,
		@pSegmento2N,
		@pSegmento3N,
		@pSegmento4N,
		@pSegmento1C,
		@pSegmento2C,
		@pSegmento3C,
		@pSegmento4C,
		@pcomEmbarques
	)
END 

GO

DROP PROCEDURE comEmbSegmentosDatos
GO
CREATE PROCEDURE comEmbSegmentosDatos
(
@pEmpresa_Id int,
@pSegmento_Id varChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20)
)
AS
SET NOCOUNT ON 

SELECT comEmbSegmentos.Empresa_Id, genSegmentos.Segmento_Id, genSegmentos.Descripcion as DescripcionSegmentos, comEmbSegmentos.Segmento1N,
	comEmbSegmentos.Segmento2N, comEmbSegmentos.Segmento3N, comEmbSegmentos.Segmento4N, comEmbSegmentos.Segmento1C,
	comEmbSegmentos.Segmento2C, comEmbSegmentos.Segmento3C, comEmbSegmentos.Segmento4C, comEmbSegmentos.comEmbarques,
	genSegmentos.TieneColumnaAutomatica
FROM comEmbSegmentos 
INNER JOIN genSegmentos  ON (genSegmentos.genSegmentos = comEmbSegmentos.Segmento_Id)
INNER JOIN comEmbarques  ON (comEmbarques.comEmbarques = comEmbSegmentos.comEmbarques)
WHERE (comEmbSegmentos.Empresa_Id = @pEmpresa_Id)
And (comEmbSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id))
AND (Segmento1N = @pSegmento1N)
AND (Segmento2N = @pSegmento2N)
AND (Segmento3N = @pSegmento3N)
AND (Segmento4N = @pSegmento4N)
AND (Segmento1C = @pSegmento1C)
AND (Segmento2C = @pSegmento2C)
AND (Segmento3C = @pSegmento3C)
AND (Segmento4C = @pSegmento4C)

 
 RETURN @@Error 

GO

DROP PROCEDURE comEmbSegmentosEliminar
GO
CREATE PROCEDURE comEmbSegmentosEliminar
(
@pEmpresa_Id int,
@pSegmento_Id varchar(10),
@pSegmento1N int = NULL,
@pSegmento2N int = NULL,
@pSegmento3N int = NULL,
@pSegmento4N int = NULL,
@pSegmento1C varchar(20) = NULL,
@pSegmento2C varchar(20) = NULL,
@pSegmento3C varchar(20) = NULL,
@pSegmento4C varchar(20) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comEmbSegmentos 
WHERE (Empresa_Id = dbo.FuncFKgenEmpresas(@pEmpresa_Id))
AND (Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id))
AND (Segmento1N = ISNULL(@pSegmento1N, Segmento1N))
AND (Segmento2N = ISNULL(@pSegmento2N, Segmento2N))
AND (Segmento3N = ISNULL(@pSegmento3N, Segmento3N))
AND (Segmento4N = ISNULL(@pSegmento4N, Segmento4N))
AND (Segmento1C = ISNULL(@pSegmento1C, Segmento1C))
AND (Segmento2C = ISNULL(@pSegmento2C, Segmento2C))
AND (Segmento3C = ISNULL(@pSegmento3C, Segmento3C))
AND (Segmento4C = ISNULL(@pSegmento4C, Segmento4C))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comEsquemaAuto.sql*/
DROP PROCEDURE comEsquemaAutoGuardar
GO
CREATE PROCEDURE comEsquemaAutoGuardar
(
@pEsquemaAuto_Id varchar(10),
@pEsquemaAuto_Id_Nuevo varchar(10),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(100),
@pInactivo bit,
@pPosteado bit,
@pUsuario_Id int
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM comEsquemaAuto WHERE (EsquemaAuto_Id = @pEsquemaAuto_Id)))
BEGIN 
	UPDATE comEsquemaAuto
	SET @lIdentidad = comEsquemaAuto,
		EsquemaAuto_Id = @pEsquemaAuto_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Inactivo=@pInactivo,
		Posteado=@pPosteado,
		Usuario_Id=@pUsuario_Id
	WHERE (EsquemaAuto_Id = @pEsquemaAuto_Id)
END 
ELSE 
BEGIN 
	INSERT INTO comEsquemaAuto
	(
		EsquemaAuto_Id,
		Empresa_Id,
		Descripcion,
		Inactivo,
		Posteado,
		Usuario_Id
	)
	VALUES 
	(
		@pEsquemaAuto_Id,
		@pEmpresa_Id,
		@pDescripcion,
		@pInactivo,
		@pPosteado,
		@pUsuario_Id
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE comEsquemaAutoDatos
GO
CREATE PROCEDURE comEsquemaAutoDatos
(
@pEsquemaAuto_Id varchar(10)
)
AS
SET NOCOUNT ON 

SELECT comEsquemaAuto.comEsquemaAuto, comEsquemaAuto.EsquemaAuto_Id, comEsquemaAuto.Empresa_Id,
	Cast( Case When comEsquemaAuto.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, comEsquemaAuto.Descripcion,
	comEsquemaAuto.Inactivo, comEsquemaAuto.Posteado, comEsquemaAuto.Usuario_Id
FROM comEsquemaAuto 
WHERE (EsquemaAuto_Id = @pEsquemaAuto_Id)
 
Exec comEsquemaAutoRengDatos @pEsquemaAuto_Id

Declare @pidentity bigint= dbo.FuncFKcomEsquemaAuto(@pEsquemaAuto_Id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'comEsquemaAuto'
RETURN @@Error 

GO

DROP PROCEDURE comEsquemaAutoEliminar
GO
CREATE PROCEDURE comEsquemaAutoEliminar
(
@pEsquemaAuto_Id varchar(10)
)
AS
SET NOCOUNT ON 

DELETE FROM comEsquemaAuto 
WHERE (EsquemaAuto_Id = @pEsquemaAuto_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKcomEsquemaAuto
GO

CREATE FUNCTION FuncFKcomEsquemaAuto
(
@pEsquemaAuto_Id varchar (10)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = comEsquemaAuto FROM comEsquemaAuto WHERE 
	EsquemaAuto_Id = @pEsquemaAuto_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comEsquemaAutoReng.sql*/
DROP PROCEDURE comEsquemaAutoRengGuardar
GO
CREATE PROCEDURE comEsquemaAutoRengGuardar
(
@pEsquemaAuto_Id varChar(10),
@pOrden int,
@pNivelAuto_Id varchar(5),
@pFormula varchar(max)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comEsquemaAutoReng WHERE EsquemaAuto_Id = dbo.FuncFKcomEsquemaAuto(@pEsquemaAuto_Id) AND Orden = @pOrden))
BEGIN 
	UPDATE comEsquemaAutoReng
	SET NivelAuto_Id = dbo.FuncFKcomNivelesAuto(@pNivelAuto_Id), Formula = @pFormula
	WHERE EsquemaAuto_Id = dbo.FuncFKcomEsquemaAuto(@pEsquemaAuto_Id) AND (Orden = @pOrden)
END 
ELSE 
BEGIN 
	INSERT INTO comEsquemaAutoReng
	(
		EsquemaAuto_Id,
		Orden,
		NivelAuto_Id,
		Formula
	)
	VALUES 
	(
		dbo.FuncFKcomEsquemaAuto(@pEsquemaAuto_Id),
		@pOrden,
		dbo.FuncFKcomNivelesAuto(@pNivelAuto_Id),
		@pFormula
	)
END 

GO

DROP PROCEDURE comEsquemaAutoRengDatos
GO
CREATE PROCEDURE comEsquemaAutoRengDatos
(
@pEsquemaAuto_Id varChar(10),
@pOrden int = Null
)
AS
SET NOCOUNT ON 

SELECT comEsquemaAuto.EsquemaAuto_Id, comEsquemaAuto.Descripcion as DescripcioncomEsquemaAuto, comEsquemaAutoReng.Orden, comNivelesAuto.NivelAuto_Id,
	comNivelesAuto.Descripcion as DescripcioncomNivelesAuto, comEsquemaAutoReng.Formula
FROM comEsquemaAutoReng 
INNER JOIN comEsquemaAuto ON (comEsquemaAuto.comEsquemaAuto = comEsquemaAutoReng.EsquemaAuto_Id)
LEFT JOIN comNivelesAuto ON (comNivelesAuto.ComNivelesAuto = comEsquemaAutoReng.NivelAuto_Id)
WHERE comEsquemaAuto.EsquemaAuto_Id = @pEsquemaAuto_Id
AND Orden = IsNull(@pOrden, Orden)
Order By comEsquemaAutoReng.Orden
 
RETURN @@Error 

GO

DROP PROCEDURE comEsquemaAutoRengEliminar
GO
CREATE PROCEDURE comEsquemaAutoRengEliminar
(
@pEsquemaAuto_Id varchar(10),
@pOrden int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comEsquemaAutoReng 
WHERE (EsquemaAuto_Id = dbo.FuncFKcomEsquemaAuto(@pEsquemaAuto_Id))
AND (Orden = ISNULL(@pOrden, Orden))
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comFactTesValoresSugeridos.sql*/
DROP PROCEDURE comFactTesValoresSugeridos
GO


CREATE PROCEDURE comFactTesValoresSugeridos(@Proveed_id VarChar(15), @Fecha DateTime)
AS

	SELECT @Proveed_id as Proveed_id, @Fecha as Fecha


	IF EXISTS(SELECT 1 FROM comProveedores WHERE Proveed_id = @Proveed_id)
		BEGIN 

			SELECT  comProvCtasContrap.Detalle, 
				conCuentas.Cuenta_Id, conCuentas.Descripcion, 
				conCentro1.Centro1_Id, conCentro2.Centro2_Id
				FROM 
				comProvCtasContrap inner join conCuentas ON
				comProvCtasContrap.Cuenta_Id = conCuentas.conCuentas
				inner join comProveedores ON
				comProveedores.genEntidades = comProvCtasContrap.Proveed_Id
				LEFT JOIN conCentro1 ON conCentro1.conCentro1 = comProvCtasContrap.Centro1_Id
				LEFT JOIN conCentro2 ON conCentro2.conCentro2 = comProvCtasContrap.Centro2_Id
				
				Where
					comProveedores.Proveed_Id = @Proveed_id

			SELECT comImpuestos.Impuesto_Id, comImpuestos.Descripcion, 
					comImpuestos.Porcentaje, 1 as Cantidad, comImpuestos.Formulacalc
			From 
				comProveedoresImpuestos INNER JOIN comImpuestos ON
				comProveedoresImpuestos.Impuesto_Id = comImpuestos.comImpuestos
				INNER JOIN comProveedores ON 
				comProveedores.genEntidades = comProveedoresImpuestos.Proveed_Id
				Where
					comProveedores.Proveed_Id = @Proveed_id AND 
					@Fecha between comImpuestos.Fecha_Desde and ISNULL(comImpuestos.Fecha_Hasta, @Fecha) 


		END
	ELSE
		BEGIN 

		
		SELECT D1.DETALLE , D2.Cuenta_Id, conCuentas.Descripcion, D3.Centro1_Id, 
			D4.Centro2_Id
			FROM 
			( SELECT TOP 1 COUNT(1) Cant, DETALLE FROM comParaSugerido WHERE
					Cuit = @Proveed_id  group by DETALLE  order by 1 Desc) as D1	
			Cross join  					 
			(SELECT TOP 1 COUNT(1) as Cant, Cuenta_Id FROM comParaSugerido WHERE
					Cuit = @Proveed_id group by Cuenta_Id order by 1 Desc) as D2
					 INNER JOIN conCuentas ON conCuentas.Cuenta_Id = d2.Cuenta_Id
			Cross join 
			(SELECT TOP 1 COUNT(1) as Cant, Centro1_id FROM comParaSugerido WHERE 
			Cuit = @Proveed_id  group by Centro1_id  order by 1 Desc) as D3
			 Cross Join 
			(SELECT TOP 1 COUNT(1) as Cant, Centro2_id  FROM comParaSugerido WHERE
					Cuit = @Proveed_id group by Centro2_id  order by 1 Desc) as D4
		


		SELECT TOP 1 comImpuestos.Impuesto_Id, comImpuestos.Descripcion, 
					comImpuestos.Porcentaje, count(*) as Cantidad, 
					comImpuestos.Formulacalc
			From 
				comMovImpuestos INNER JOIN comImpuestos ON
				comMovImpuestos.Impuesto_Id = comImpuestos.comImpuestos
				INNER JOIN comMovprov ON
				comMovprov.comMovProv = comMovImpuestos.comMovProv
				INNER JOIN genEntidades ON 
				genEntidades.genEntidades = comMovprov.Proveed_Id
				Where
					genEntidades.Cuit = @Proveed_id AND 
					@Fecha between comImpuestos.Fecha_Desde and ISNULL(comImpuestos.Fecha_Hasta, @Fecha) 
		GROUP BY comImpuestos.Impuesto_Id, comImpuestos.Descripcion,  comImpuestos.Porcentaje, comImpuestos.Formulacalc
		ORDER BY 4 Desc
				

		END


GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\ComFacturasConOrdenDeCompra.sql*/
-- comFacturasConOrdenDeCompraDatos 1, 'FPRO',1020,0,0,0,' ','R','0110',' ', 'OC',1318,0,0,0,'CCG',' ',' ',' '


DROP PROCEDURE comFacturasConOrdenDeCompraDatos
GO
CREATE PROCEDURE comFacturasConOrdenDeCompraDatos
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20),
@pSegmento_Id_OC VarChar(10), 
@pSegmento1N_OC int,
@pSegmento2N_OC int,
@pSegmento3N_OC int,
@pSegmento4N_OC int,
@pSegmento1C_OC VarChar(20),
@pSegmento2C_OC VarChar(20),
@pSegmento3C_OC VarChar(20),
@pSegmento4C_OC VarChar(20)

)


AS
SET NOCOUNT ON 

DECLARE @pComMovProv bigint

SET @pComMovProv = (
SELECT Asiento_id from genAsiSegmentos where
	Empresa_Id = @pEmpresa_id and 
	Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_id) and
	Segmento1N =@pSegmento1N and
	Segmento2N = @pSegmento2N and
	Segmento3N = @pSegmento3N and
	Segmento4N = @pSegmento4N and
	Segmento1C = @pSegmento1C and
	Segmento2C = @pSegmento2C and 
	Segmento3C = @pSegmento3C and 
	Segmento4C = @pSegmento4C )
	
	
exec comMovprovDatos @pComMovProv

--- Averiguo si es Nota de Credito
Declare @EsNC INT = 0
DECLARE @pOrigen int = 0

SELECT @pOrigen = Origen1C FROM genSegmentos where Segmento_Id = @pSegmento_Id
if (@pOrigen = 8 and @pSegmento1C= 'R')
	SET @EsNC = 1
SELECT @pOrigen = Origen2C FROM genSegmentos where Segmento_Id = @pSegmento_Id
if (@pOrigen = 8 and @pSegmento2C= 'R')
	SET @EsNC = 1
SELECT @pOrigen = Origen3C FROM genSegmentos where Segmento_Id = @pSegmento_Id
if (@pOrigen = 8 and @pSegmento3C= 'R')
	SET @EsNC = 1
SELECT @pOrigen = Origen4C FROM genSegmentos where Segmento_Id = @pSegmento_Id
if (@pOrigen = 8 and @pSegmento4C= 'R')
	SET @EsNC = 1


if @pComMovProv is null
BEGIN
-- Tiene que traer lo pendiente porque es la carga de una nueva factura --

	SELECT comOCSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
		comOCSegmentos.Segmento1N, comOCSegmentos.Segmento2N,
		comOCSegmentos.Segmento3N, comOCSegmentos.Segmento4N,
		comOCSegmentos.Segmento1C, comOCSegmentos.Segmento2C,
		comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C,
		comOrdenComp.Fecha, comProveedores.Proveed_Id, comProveedores.RazonSocial, 
		genMonedas.Moneda_Id,comconpago.CondPago_Id, comConPago.Descripcion as DescripcionConPago
	From comOCSegmentos 
	INNER JOIN comOrdenComp on comOCSegmentos.comOrdenComp = comOrdenComp.comOrdenComp
	INNER JOIN comProveedores ON comProveedores.genEntidades = comOrdenComp.Proveed_id
	INNER JOIN genMonedas ON genMonedas.genMonedas = comOrdenComp.Moneda_Id
	INNER JOIN genSegmentos	ON genSegmentos.genSegmentos = comOCSegmentos.Segmento_Id
	inner join comConPago on comOrdenComp.CondPago_Id=comConPago.comConPago
	WHERE 	
		comOCSegmentos.Empresa_Id = @pEmpresa_id and 
		comOCSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_id_OC) and
		comOCSegmentos.Segmento1N = @pSegmento1N_OC and
		comOCSegmentos.Segmento2N = @pSegmento2N_OC and
		comOCSegmentos.Segmento3N = @pSegmento3N_OC and
		comOCSegmentos.Segmento4N = @pSegmento4N_OC and
		comOCSegmentos.Segmento1C = @pSegmento1C_OC and
		comOCSegmentos.Segmento2C = @pSegmento2C_OC and 
		comOCSegmentos.Segmento3C = @pSegmento3C_OC and 
		comOCSegmentos.Segmento4C = @pSegmento4C_OC 
	ORDER BY 2

	/* No se usa
	DECLARE @pComOrdenComp as Int
	SET @pComOrdenComp = (SELECT comOrdenComp 
		FROM comOCSegmentos WHERE 
		(Empresa_Id = @pEmpresa_Id) AND 
		(Segmento_Id = dbo.FuncFkgenSegmentos(@pSegmento_Id)) AND 
		(Segmento1N = @pSegmento1N) AND 
		(Segmento2N = @pSegmento2N) AND 
		(Segmento3N = @pSegmento3N) AND 
		(Segmento4N = @pSegmento4N) AND 
		(Segmento1C = @pSegmento1C) AND 
		(Segmento2C = @pSegmento2C) AND 
		(Segmento3C = @pSegmento3C) AND 
		(Segmento4C = @pSegmento4C))
	*/
	

	
	SELECT Convert(bigint, 0) AS comMovProv, comOCCuerpo.Renglon_OC Renglon, 0 RenglonReferencia, 	
		stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos,
		stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, 
		comOCArticulo.Factor, comOCCuerpo.Cantidad*0 as Cantidad,
		comOCCuerpo.Cantidad*0 as CantidadForm, comOcArticulo.PrecioOriginal as CostoUnitario, 
		comOCArticulo.PrecioOriginal, 0 as conRenglonDebe, 
		comOcArticulo.CantidadOriginal as CantidadOC, comOcCuerpo.Cantidad_Recibida - comOCCuerpo.Cantidad_Facturada + comOCCuerpo.Cantidad_Creditos as CantidadPendiente,
		comOcCuerpo.Precio, comOCCuerpo.Renglon_OC, comOCCuerpo.comOrdenComp, 'P' ProdMemo
	FROM comOCSegmentos 
	INNER JOIN comOcCuerpo ON comOCSegmentos.comOrdenComp = comOcCuerpo.comOrdenComp
	INNER JOIN comOcArticulo ON comOcCuerpo.comOrdenComp = comOcArticulo.comOrdenComp and comOcCuerpo.Renglon_OC = comOcArticulo.Renglon_OC
	INNER JOIN stkProductos  ON (stkProductos.stkProductos = comOcArticulo.Producto_Id)
	INNER JOIN stkUniMed  ON (stkUniMed.stkUniMed = comOcCuerpo.Medida_Id)

	WHERE 
	(@EsNC =1 OR
	comOcCuerpo.Cantidad_Recibida - comOCCuerpo.Cantidad_Facturada + comOCCuerpo.Cantidad_Creditos > 0) and 
		comOCSegmentos.Empresa_Id = @pEmpresa_id and 
		comOCSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_id_OC) and
		comOCSegmentos.Segmento1N = @pSegmento1N_OC and
		comOCSegmentos.Segmento2N = @pSegmento2N_OC and
		comOCSegmentos.Segmento3N = @pSegmento3N_OC and
		comOCSegmentos.Segmento4N = @pSegmento4N_OC and
		comOCSegmentos.Segmento1C = @pSegmento1C_OC and
		comOCSegmentos.Segmento2C = @pSegmento2C_OC and 
		comOCSegmentos.Segmento3C = @pSegmento3C_OC and 
		comOCSegmentos.Segmento4C = @pSegmento4C_OC 
	union all
	SELECT Convert(bigint, 0) AS comMovProv, comOCCuerpo.Renglon_OC Renglon, 0 RenglonReferencia, 	
		' ' Producto_Id, comOCMemo.Detalle as DescripcionProductos,
		stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, 
		1 Factor, comOCCuerpo.Cantidad*0 as Cantidad,
		comOCCuerpo.Cantidad*0 as CantidadForm, comOcCuerpo.Precio as CostoUnitario, 
		comOcCuerpo.Precio PrecioOriginal, 0 as conRenglonDebe, 
		comOcCuerpo.Cantidad as CantidadOC, comOcCuerpo.Cantidad_Recibida - comOCCuerpo.Cantidad_Facturada + comOCCuerpo.Cantidad_Creditos as CantidadPendiente,
		comOcCuerpo.Precio, comOCCuerpo.Renglon_OC, comOCCuerpo.comOrdenComp, 'M' ProdMemo
	FROM comOCSegmentos 
	INNER JOIN comOcCuerpo ON comOCSegmentos.comOrdenComp = comOcCuerpo.comOrdenComp
	INNER JOIN comOCMemo ON comOCCuerpo.comOrdenComp = comOCMemo.comOrdenComp and comOcCuerpo.Renglon_OC = comOCMemo.Renglon_OC
	INNER JOIN stkUniMed  ON (stkUniMed.stkUniMed = comOcCuerpo.Medida_Id)
	WHERE 
	(@EsNC = 1 OR  comOcCuerpo.Cantidad_Recibida - comOCCuerpo.Cantidad_Facturada + comOCCuerpo.Cantidad_Creditos > 0) and 
		comOCSegmentos.Empresa_Id = @pEmpresa_id and 
		comOCSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_id_OC) and
		comOCSegmentos.Segmento1N = @pSegmento1N_OC and
		comOCSegmentos.Segmento2N = @pSegmento2N_OC and
		comOCSegmentos.Segmento3N = @pSegmento3N_OC and
		comOCSegmentos.Segmento4N = @pSegmento4N_OC and
		comOCSegmentos.Segmento1C = @pSegmento1C_OC and
		comOCSegmentos.Segmento2C = @pSegmento2C_OC and 
		comOCSegmentos.Segmento3C = @pSegmento3C_OC and 
		comOCSegmentos.Segmento4C = @pSegmento4C_OC 

 
END

ELSE
-- Cuerpo
-- Es una consulta de una factura existente --
BEGIN

	SELECT comOCSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
		comOCSegmentos.Segmento1N, comOCSegmentos.Segmento2N,
		comOCSegmentos.Segmento3N, comOCSegmentos.Segmento4N,
		comOCSegmentos.Segmento1C, comOCSegmentos.Segmento2C,
		comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C,
		comOrdenComp.Fecha, comProveedores.Proveed_Id, comProveedores.RazonSocial, 
		genMonedas.Moneda_Id,comconpago.CondPago_Id, comConPago.Descripcion as DescripcionConPago
	From comOCSegmentos 
	INNER JOIN comOrdenComp on comOCSegmentos.comOrdenComp = comOrdenComp.comOrdenComp
	INNER JOIN comProveedores ON comProveedores.genEntidades = comOrdenComp.Proveed_id
	INNER JOIN genMonedas ON genMonedas.genMonedas = comOrdenComp.Moneda_Id
	INNER JOIN genSegmentos	ON genSegmentos.genSegmentos = comOCSegmentos.Segmento_Id
	inner join comConPago on comConPago.comConPago=comOrdenComp.CondPago_Id
	WHERE 
		Exists(select 1 from comMovPOC where
			comMovPOC.comMovProv = @pComMovProv and 
			comMovPOC.comOrdenComp = comOrdenComp.comOrdenComp)
	ORDER BY 2

	
	SELECT comMovPOC.comMovProv, comMovPOC.Renglon_OC as Renglon, 0 RenglonReferencia, 	
		stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos,
		stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, 
		comOCArticulo.Factor, comMovPOC.Cantidad as Cantidad,
		comMovPOC.CantidadOriginal as CantidadForm, comOcCuerpo.Precio as CostoUnitario, 
		comOCArticulo.PrecioOriginal, 0 as conRenglonDebe, 
		comOCArticulo.CantidadOriginal as CantidadOC, comOcCuerpo.Cantidad_Recibida - comOCCuerpo.Cantidad_Facturada + comOCCuerpo.Cantidad_Creditos as CantidadPendiente,
		comOcCuerpo.Precio, comOCCuerpo.Renglon_OC,comOCCuerpo.comOrdenComp, 'P' ProdMemo
	FROM comMovPOC 
	Inner join comOCSegmentos on comMovPOC.comOrdenComp = comOCSegmentos.comOrdenComp
	INNER JOIN comOcCuerpo ON comMovPOC.comOrdenComp = comOcCuerpo.comOrdenComp and comMovPOC.Renglon_OC=comOCCuerpo.Renglon_OC
	INNER JOIN comOcArticulo ON comOcCuerpo.comOrdenComp = comOcArticulo.comOrdenComp and comOcCuerpo.Renglon_OC = comOcArticulo.Renglon_OC
	INNER JOIN stkProductos  ON (stkProductos.stkProductos = comOcArticulo.Producto_Id)
	INNER JOIN stkUniMed  ON (stkUniMed.stkUniMed = comOcCuerpo.Medida_Id)

	WHERE 
		comMovPOC.comMovProv = @pComMovProv
	UNION ALL
	SELECT comMovPOC.comMovProv, comMovPOC.Renglon_OC as Renglon, 0 RenglonReferencia, 	
		' ' Producto_Id, comOCMemo.Detalle as DescripcionProductos,
		stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, 
		1 Factor, comMovPOC.Cantidad as Cantidad,
		comMovPOC.CantidadOriginal as CantidadForm, comOcCuerpo.Precio as CostoUnitario, 
		comOCCuerpo.Precio AS PrecioOriginal, 0 as conRenglonDebe, 
		comOcCuerpo.Cantidad as CantidadOC, 
		comOcCuerpo.Cantidad_Recibida - comOCCuerpo.Cantidad_Facturada + comOCCuerpo.Cantidad_Creditos as CantidadPendiente,
		comOcCuerpo.Precio, comOCCuerpo.Renglon_OC,comOCCuerpo.comOrdenComp, 'M' ProdMemo
	FROM comMovPOC 
	Inner join comOCSegmentos on comMovPOC.comOrdenComp = comOCSegmentos.comOrdenComp
	INNER JOIN comOcCuerpo ON comMovPOC.comOrdenComp = comOcCuerpo.comOrdenComp and comMovPOC.Renglon_OC = comOCCuerpo.Renglon_OC
	INNER JOIN comOCMemo ON comOcCuerpo.comOrdenComp = comOCMemo.comOrdenComp and comOcCuerpo.Renglon_OC = comOCMemo.Renglon_OC
	INNER JOIN stkUniMed  ON (stkUniMed.stkUniMed = comOcCuerpo.Medida_Id)

	WHERE 

		comMovPOC.comMovProv = @pComMovProv
END


exec comMovImpuestosDatos @pComMovProv, null
Exec genAtributosGeneralesIdentityDatos @pComMovProv, 'comMovProv' 
Exec genMovCuotasDatos @pComMovProv, null
Exec comFactuReceOcDatos @pcomMovProv
Exec comFactuReceOcDatos @pcomMovProv

-- AJ Abr 19 Se agrega la posibilidad de Ajuste positivo o Negativo

Select commovprov.RenglonDtoFin , conCuentas.Cuenta_Id, 
	conCuentas.Descripcion as DescripcionCuenta, 
	conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, 
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, 
	conMovCont.Importe, conMovCont.ImporteMonedaOriginal, 
	conMovCont.LeyendaLibroMayor as Leyenda
from commovprov inner join conMovCont on 
commovprov.comMovProv = conMovcont.conAsientos and 
commovprov.RenglonDtoFin = conMovcont.Renglon
INNER JOIN conCuentas ON 
conCuentas.conCuentas = conmovCont.Cuenta_Id
LEFT JOIN conCentro1 ON
conCentro1.conCentro1 = conMovcont.Centro1_Id
LEFT JOIN conCentro2 ON 
conCentro2.conCentro2 = conMovcont.Centro2_Id
Where
	comMovProv.comMovProv = @pComMovProv


RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\ComFacturasConOrdenDeEmbarque.sql*/
--SELECT * FROM genAsiSegmentos
--- comFacturasConOrdenDeEmbarque 1, 'FPRO',11,0,0,0,'MX','R','Q001',' ','EMB',119,0,0,0,'0001',' ',' ',' ','E048'
DROP PROCEDURE comFacturasConOrdenDeEmbarque
GO
CREATE PROCEDURE comFacturasConOrdenDeEmbarque
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20),
@pSegmento_Id_EMB VarChar(10), 
@pSegmento1N_EMB int,
@pSegmento2N_EMB int,
@pSegmento3N_EMB int,
@pSegmento4N_EMB int,
@pSegmento1C_EMB VarChar(20),
@pSegmento2C_EMB VarChar(20),
@pSegmento3C_EMB VarChar(20),
@pSegmento4C_EMB VarChar(20),
@pProveed_id VarChar(15)=NULL
)


AS
SET NOCOUNT ON 

DECLARE @pComMovProv bigint


SET @pComMovProv = (
SELECT Asiento_id from genAsiSegmentos where
	Empresa_Id = @pEmpresa_id and 
	Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_id) and
	Segmento1N =@pSegmento1N and
	Segmento2N = @pSegmento2N and
	Segmento3N = @pSegmento3N and
	Segmento4N = @pSegmento4N and
	Segmento1C = @pSegmento1C and
	Segmento2C = @pSegmento2C and 
	Segmento3C = @pSegmento3C and 
	Segmento4C = @pSegmento4C )
	

	
exec comMovprovDatos @pComMovProv

if @pComMovProv is null
BEGIN
-- Tiene que traer lo pendiente porque es la carga de una nueva factura --

	SELECT genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
		genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
		genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
		genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
		genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
		comEmbarques.FechaArribo,	comEmbarques.comEmbarques
	From genAsiSegmentos
	INNER JOIN comEmbarques on genAsiSegmentos.Asiento_Id = comEmbarques.comEmbarques


	INNER JOIN genSegmentos	ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	left join comConPago on comConPago.comConPago = (select MAX(comOrdenComp.CondPago_Id) FROM comEmbCuerpo, comOrdenComp WHERE
				comOrdenComp.comOrdenComp = comEmbCuerpo.comOrdenComp and 
				comEmbCuerpo.comEmbarques = comEmbarques.comEmbarques)
	WHERE 	
		genAsiSegmentos.Empresa_Id =@pEmpresa_id and 
		genSegmentos.Segmento_Id = @pSegmento_id_EMB and
		genAsiSegmentos.Segmento1N =@pSegmento1N_EMB and
		genAsiSegmentos.Segmento2N = @pSegmento2N_EMB and
		genAsiSegmentos.Segmento3N = @pSegmento3N_EMB and
		genAsiSegmentos.Segmento4N = @pSegmento4N_EMB and
		genAsiSegmentos.Segmento1C = @pSegmento1C_EMB and
		genAsiSegmentos.Segmento2C = @pSegmento2C_EMB and 
		genAsiSegmentos.Segmento3C = @pSegmento3C_EMB and 
		genAsiSegmentos.Segmento4C = @pSegmento4C_EMB 
	ORDER BY 2




	
	SELECT Convert(bigint, 0) AS comMovProv, comOCCuerpo.Renglon_OC Renglon, 0 RenglonReferencia, 	
		stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos,
		stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, 
		comOCArticulo.Factor, comOCCuerpo.Cantidad*0 as Cantidad,
		comOCCuerpo.Cantidad*0 as CantidadForm, comOCArticulo.PrecioOriginal as CostoUnitario, 
		comOCArticulo.PrecioOriginal, 0 as conRenglonDebe, 
		comOCArticulo.CantidadOriginal as CantidadOC, case when @pSegmento1C='R' then  comEmbCuerpo.CantidadFacturada-comEmbCuerpo.Cantidad else comEmbCuerpo.Cantidad - comEmbCuerpo.CantidadFacturada end as CantidadPendiente, --TODO Verificar si el Segmento1C es el TipoMov
		comOcCuerpo.Precio, comOCCuerpo.Renglon_OC,comOCCuerpo.comOrdenComp
	FROM genAsiSegmentos
	INNER JOIN comEmbCuerpo ON genAsiSegmentos.Asiento_Id = comEmbCuerpo.comEmbarques
	INNER JOIN comOcCuerpo ON comEmbCuerpo.comOrdenComp = comOCCuerpo.comOrdenComp AND comEmbCuerpo.Renglon_OC = comOCCuerpo.Renglon_OC
	INNER JOIN comOcArticulo ON comOcCuerpo.comOrdenComp = comOcArticulo.comOrdenComp and comOcCuerpo.Renglon_OC = comOcArticulo.Renglon_OC
	INNER JOIN stkProductos  ON (stkProductos.stkProductos = comOcArticulo.Producto_Id)
	INNER JOIN stkUniMed  ON (stkUniMed.stkUniMed = comOcCuerpo.Medida_Id)
	INNER JOIN comOrdenComp on comEmbCuerpo.comOrdenComp = comOrdenComp.comOrdenComp
	WHERE 
		case when @pSegmento2C='R' then  comEmbCuerpo.CantidadFacturada-comEmbCuerpo.CantidadRecibida else comEmbCuerpo.Cantidad - comEmbCuerpo.CantidadFacturada end > 0 and 
		genAsiSegmentos.Empresa_Id =@pEmpresa_id and 
		genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_id_EMB) and
		genAsiSegmentos.Segmento1N =@pSegmento1N_EMB and
		genAsiSegmentos.Segmento2N = @pSegmento2N_EMB and
		genAsiSegmentos.Segmento3N = @pSegmento3N_EMB and
		genAsiSegmentos.Segmento4N = @pSegmento4N_EMB and
		genAsiSegmentos.Segmento1C = @pSegmento1C_EMB and
		genAsiSegmentos.Segmento2C = @pSegmento2C_EMB and 
		genAsiSegmentos.Segmento3C = @pSegmento3C_EMB and 
		genAsiSegmentos.Segmento4C = @pSegmento4C_EMB AND 
		comOrdenComp.Proveed_Id = dbo.FuncFKcomProveedores(@pProveed_id)

	-- Gastos

	SELECT comEmbGastos.Renglon, comEmbGastos.Detalle, comEmbGastos.ImporteOriginal, 
		genMonedas.Moneda_Id, comEmbGastos.ImporteOriginal*0 AS Monto, 
		comEmbGastos.Renglon as comRenglon
	FROM comEmbGastos 
	inner join genMonedas ON comEmbGastos.Moneda_Id = genMonedas.genMonedas
	INNER JOIN genAsiSegmentos ON 	genAsiSegmentos.Asiento_Id = comEmbGastos.comEmbarques
	Where
		genAsiSegmentos.Empresa_Id = @pEmpresa_id and 
		genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_id_EMB) and
		genAsiSegmentos.Segmento1N = @pSegmento1N_EMB and
		genAsiSegmentos.Segmento2N = @pSegmento2N_EMB and
		genAsiSegmentos.Segmento3N = @pSegmento3N_EMB and
		genAsiSegmentos.Segmento4N = @pSegmento4N_EMB and
		genAsiSegmentos.Segmento1C = @pSegmento1C_EMB and
		genAsiSegmentos.Segmento2C = @pSegmento2C_EMB and 
		genAsiSegmentos.Segmento3C = @pSegmento3C_EMB and 
		genAsiSegmentos.Segmento4C = @pSegmento4C_EMB 
		ORDER BY 1
END

ELSE
-- Cuerpo
-- Es una consulta de una factura existente --
BEGIN
	--segmento
	if exists(select 1 from comMovProvEmb where comMovProv=@pComMovProv)
	begin
	SELECT genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
		genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
		genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
		genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
		genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
		comEmbarques.FechaArribo, comEmbarques.comEmbarques
	From genAsiSegmentos 
	INNER JOIN comEmbarques on comEmbarques.comEmbarques = genAsiSegmentos.Asiento_Id
	inner join comMovProvEmb on comMovProvEmb.comEmbarques = comEmbarques.comEmbarques
	inner join comMovProv ON  comMovProv.comMovProv = comMovProvEmb.comMovProv
	INNER JOIN comProveedores ON comProveedores.genEntidades = comMovProv.Proveed_id
	Inner join conAsientos ON conAsientos.conAsientos = comMovProv.comMovProv 
	INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
	INNER JOIN genSegmentos	ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	WHERE 
			comMovProv.comMovProv = @pComMovProv 
	ORDER BY 2
end
else
BEGIN
SELECT genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
		genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
		genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
		genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
		genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
		comEmbarques.FechaArribo, comEmbarques.comEmbarques
	From genAsiSegmentos 
	INNER JOIN comEmbarques on comEmbarques.comEmbarques = genAsiSegmentos.Asiento_Id
	inner join comEmbGastoMovProv on comEmbGastoMovProv.comEmbarques = comEmbarques.comEmbarques
	inner join comMovProv ON  comMovProv.comMovProv = comEmbGastoMovProv.comMovProv
	INNER JOIN comProveedores ON comProveedores.genEntidades = comMovProv.Proveed_id
	Inner join conAsientos ON conAsientos.conAsientos = comMovProv.comMovProv 
	INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
	INNER JOIN genSegmentos	ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	WHERE 
			comMovProv.comMovProv = @pComMovProv 
	ORDER BY 2
end
		--cuerpo
	SELECT comMovProvEmb.comMovProv, comOCCuerpo.Renglon_OC as Renglon, 0 RenglonReferencia, 	
		stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos,
		stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, 
		comOCArticulo.Factor, comMovPOC.Cantidad as Cantidad,
		comMovPOC.CantidadOriginal as CantidadForm, comOcCuerpo.Precio as CostoUnitario, 
		comOCArticulo.PrecioOriginal, 0 as conRenglonDebe, 
		comEmbCuerpo.Cantidad as CantidadOC, comEmbCuerpo.Cantidad - comEmbCuerpo.CantidadFacturada as CantidadPendiente,
		comOcCuerpo.Precio, comOCCuerpo.Renglon_OC,comOCCuerpo.comOrdenComp
	FROM comMovProvEmb
	INNER JOIN comMovPOC ON comMovPOC.comMovProv = comMovProvEmb.comMovProv 
	INNER JOIN  comOcCuerpo ON comMovPOC.comOrdenComp = comOcCuerpo.comOrdenComp and comMovPOC.Renglon_OC = comOCCuerpo.Renglon_OC	
	INNER JOIN comOcArticulo ON comOcCuerpo.comOrdenComp = comOcArticulo.comOrdenComp and comOcCuerpo.Renglon_OC = comOcArticulo.Renglon_OC
	INNER JOIN comEmbCuerpo ON comEmbCuerpo.comEmbarques = comMovProvEmb.comEmbarques and comEmbCuerpo.comOrdenComp = comOcArticulo.comOrdenComp and 
							  comEmbCuerpo.Renglon_OC = comOcArticulo.Renglon_OC
	INNER JOIN stkProductos ON (stkProductos.stkProductos = comOcArticulo.Producto_Id)
	INNER JOIN stkUniMed ON (stkUniMed.stkUniMed = comOcCuerpo.Medida_Id)

	WHERE 
		comMovProvEmb.comMovProv = @pComMovProv

	-- Gastos

	SELECT comEmbGastos.Renglon, comEmbGastos.Detalle, comEmbGastos.ImporteOriginal, 
		genMonedas.Moneda_Id, comMovDetalle.Importe AS Monto,
		comEmbGastoMovProv.comRenglon
	FROM comEmbGastos 
	Inner join genMonedas ON comEmbGastos.Moneda_Id = genMonedas.genMonedas
	INNER JOIN comEmbGastoMovProv ON comEmbGastoMovProv.comEmbarques = comEmbGastos.comEmbarques and 
		comEmbGastoMovProv.Renglon = comEmbGastos.Renglon
	INNER JOIN comMovDetalle ON comMovDetalle.comMovProv =  comEmbGastoMovProv.comMovProv and
		comMovDetalle.Renglon =comEmbGastoMovProv.comRenglon
	Where
		comEmbGastoMovProv.comMovProv = @pComMovProv
	ORDER BY 1

end

exec comMovImpuestosDatos @pComMovProv, null
Exec genAtributosGeneralesIdentityDatos @pComMovProv, 'comMovProv' 
Exec genMovCuotasDatos @pComMovProv, null
 
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comFacturasVariasOC.sql*/
-- exec comFacturasVariasOCDatos 1,'FPRO',0,0,0,0, ' ',' ',' ',' ', 'BSD', 'PES'




DROP PROCEDURE comFacturasVariasOCDatos
GO
CREATE PROCEDURE comFacturasVariasOCDatos
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20),
@pProveed_id VarChar(15),
@pMoneda_Id VarChar(5)
)


AS
SET NOCOUNT ON 

DECLARE @pComMovProv bigint

SET @pComMovProv = (
SELECT Asiento_id from genAsiSegmentos where
	Empresa_Id = @pEmpresa_id and 
	Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_id) and
	Segmento1N =@pSegmento1N and
	Segmento2N = @pSegmento2N and
	Segmento3N = @pSegmento3N and
	Segmento4N = @pSegmento4N and
	Segmento1C = @pSegmento1C and
	Segmento2C = @pSegmento2C and 
	Segmento3C = @pSegmento3C and 
	Segmento4C = @pSegmento4C )
	
	
exec comMovprovDatos @pComMovProv

if @pComMovProv is null
BEGIN

	-- Productos pendientes --
	SELECT Convert(bigint, 0) AS comMovProv, 
		dbo.Segmento(comOCSegmentos.Segmento_Id, comOCSegmentos.Segmento1C, comOCSegmentos.Segmento2C,
		comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C, comOCSegmentos.Segmento1N, 
		comOCSegmentos.Segmento2N,comOCSegmentos.Segmento3N, comOCSegmentos.Segmento4N) as Segmento_str,
		genSegmentos.Segmento_Id, comOCSegmentos.Segmento1N, comOCSegmentos.Segmento2N,comOCSegmentos.Segmento3N, 
		comOCSegmentos.Segmento4N,comOCSegmentos.Segmento1C, comOCSegmentos.Segmento2C,
		comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C,
		comOrdenComp.Fecha, genMonedas.Moneda_Id, comOCCuerpo.Renglon_OC Renglon, 0 RenglonReferencia, 	
		stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos, stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, 
		comOCArticulo.Factor, comOCCuerpo.Cantidad*0 as Cantidad, comOCCuerpo.Cantidad*0 as CantidadForm, comOCArticulo.PrecioOriginal as CostoUnitario, 
		comOCArticulo.PrecioOriginal, 0 as conRenglonDebe, 
		comOCArticulo.CantidadOriginal as CantidadOC, comOcCuerpo.Cantidad_Recibida - comOCCuerpo.Cantidad_Facturada + comOCCuerpo.Cantidad_Creditos as CantidadPendiente,
		comOcCuerpo.Precio, comOCCuerpo.Renglon_OC,comOCCuerpo.comOrdenComp, 'P' ProdMemo
	FROM comOCSegmentos
	INNER JOIN comOcCuerpo ON comOCSegmentos.comOrdenComp = comOcCuerpo.comOrdenComp
	INNER JOIN comOcArticulo ON comOcCuerpo.comOrdenComp = comOcArticulo.comOrdenComp and comOcCuerpo.Renglon_OC = comOcArticulo.Renglon_OC
	INNER JOIN stkProductos  ON (stkProductos.stkProductos = comOcArticulo.Producto_Id)
	INNER JOIN stkUniMed  ON (stkUniMed.stkUniMed = comOcCuerpo.Medida_Id)
	INNER JOIN genSegmentos ON genSegmentos.genSegmentos = comOCSegmentos.Segmento_Id
	INNER JOIN comOrdenComp ON comOrdenComp.comOrdenComp = comOCSegmentos.comOrdenComp
	INNER JOIN comProveedores ON  comProveedores.genEntidades = comOrdenComp.Proveed_Id
	INNER JOIN genMonedas ON genMonedas.genMonedas = comOrdenComp.Moneda_Id
	inner join comTipoPermi ON comTipoPermi.comTipoPermi = comOrdenComp.TipoPermi_Id
	WHERE 
		comTipoPermi.Importaciones = 0 and 
		comOcCuerpo.Cantidad_Recibida - comOCCuerpo.Cantidad_Facturada + comOCCuerpo.Cantidad_Creditos>0 and 
		comOCSegmentos.Empresa_Id =@pEmpresa_id and 
		comProveedores.Proveed_Id = @pProveed_id AND 
		genMonedas.Moneda_Id = @pMoneda_Id
	Union all
	-- Memos pendientes --
	SELECT Convert(bigint, 0) AS comMovProv, 
		dbo.Segmento(comOCSegmentos.Segmento_Id, comOCSegmentos.Segmento1C, comOCSegmentos.Segmento2C,
		comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C, comOCSegmentos.Segmento1N, 
		comOCSegmentos.Segmento2N,comOCSegmentos.Segmento3N, comOCSegmentos.Segmento4N) as Segmento_str,
		genSegmentos.Segmento_Id, comOCSegmentos.Segmento1N, comOCSegmentos.Segmento2N,comOCSegmentos.Segmento3N, 
		comOCSegmentos.Segmento4N,comOCSegmentos.Segmento1C, comOCSegmentos.Segmento2C,
		comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C, comOrdenComp.Fecha, genMonedas.Moneda_Id,
		comOCCuerpo.Renglon_OC Renglon, 0 RenglonReferencia, ' ' Producto_Id, comOCMemo.Detalle as DescripcionProductos,
		stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, 1 Factor, comOCCuerpo.Cantidad*0 as Cantidad,
		comOCCuerpo.Cantidad*0 as CantidadForm, comOcCuerpo.Precio as CostoUnitario, 
		comOcCuerpo.Precio PrecioOriginal, 0 as conRenglonDebe, 
		 comOcCuerpo.Cantidad as CantidadOC, comOcCuerpo.Cantidad_Recibida - comOCCuerpo.Cantidad_Facturada + comOCCuerpo.Cantidad_Creditos as CantidadPendiente,
		comOcCuerpo.Precio, comOCCuerpo.Renglon_OC,comOCCuerpo.comOrdenComp, 'M' ProdMemo
	FROM comOCSegmentos 
	INNER JOIN comOcCuerpo ON comOCSegmentos.comOrdenComp = comOcCuerpo.comOrdenComp
	INNER JOIN comOCMemo ON comOCCuerpo.comOrdenComp = comOCMemo.comOrdenComp and 
		comOcCuerpo.Renglon_OC = comOCMemo.Renglon_OC
	INNER JOIN stkUniMed  ON (stkUniMed.stkUniMed = comOcCuerpo.Medida_Id)
	INNER JOIN genSegmentos ON genSegmentos.genSegmentos = comOCSegmentos.Segmento_Id
	INNER JOIN comOrdenComp ON comOrdenComp.comOrdenComp = comOCSegmentos.comOrdenComp
	INNER JOIN comProveedores ON comProveedores.genEntidades = comOrdenComp.Proveed_Id
	INNER JOIN genMonedas ON genMonedas.genMonedas = comOrdenComp.Moneda_Id
	WHERE 
		comOcCuerpo.Cantidad_Recibida - comOCCuerpo.Cantidad_Facturada +comOCCuerpo.Cantidad_Creditos>0 and 
		comOCSegmentos.Empresa_Id =@pEmpresa_id and 
		comOCSegmentos.Empresa_Id =@pEmpresa_id and 
		comProveedores.Proveed_Id = @pProveed_id AND 
		genMonedas.Moneda_Id = @pMoneda_Id

 
END

ELSE
-- Cuerpo
BEGIN

	-- Productos consulta de factura --
	SELECT comMovPOC.comMovProv, 
		dbo.Segmento(comOCSegmentos.Segmento_Id, comOCSegmentos.Segmento1C, comOCSegmentos.Segmento2C,
		comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C, comOCSegmentos.Segmento1N, 
		comOCSegmentos.Segmento2N,comOCSegmentos.Segmento3N, comOCSegmentos.Segmento4N) as Segmento_str,
		genSegmentos.Segmento_Id, comOCSegmentos.Segmento1N, comOCSegmentos.Segmento2N,comOCSegmentos.Segmento3N, 
		comOCSegmentos.Segmento4N,comOCSegmentos.Segmento1C, comOCSegmentos.Segmento2C,
		comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C, comOrdenComp.Fecha, genMonedas.Moneda_Id,
		comMovPOC.Renglon_OC as Renglon, 0 RenglonReferencia, stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos,
		stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, comOCArticulo.Factor, comMovPOC.Cantidad as Cantidad,
		comMovPOC.CantidadOriginal as CantidadForm, comOCArticulo.PrecioOriginal as CostoUnitario, 
		comOCArticulo.PrecioOriginal, 0 as conRenglonDebe, 
		comOCArticulo.CantidadOriginal as CantidadOC, comOcCuerpo.Cantidad_Recibida - comOCCuerpo.Cantidad_Facturada + comOCCuerpo.Cantidad_Creditos as CantidadPendiente,
		comOcCuerpo.Precio, comOCCuerpo.Renglon_OC,comOCCuerpo.comOrdenComp, 'P' ProdMemo
	FROM comMovPOC inner join comOCSegmentos on comMovPOC.comOrdenComp = comOCSegmentos.comOrdenComp
	INNER JOIN comOcCuerpo ON comMovPOC.comOrdenComp = comOcCuerpo.comOrdenComp and comMovPOC.Renglon_OC=comOCCuerpo.Renglon_OC
	INNER JOIN comOcArticulo ON comOcCuerpo.comOrdenComp = comOcArticulo.comOrdenComp and 
		comOcCuerpo.Renglon_OC = comOcArticulo.Renglon_OC
	INNER JOIN stkProductos  ON (stkProductos.stkProductos = comOcArticulo.Producto_Id)
	INNER JOIN stkUniMed  ON (stkUniMed.stkUniMed = comOcCuerpo.Medida_Id)
	INNER JOIN genSegmentos ON genSegmentos.genSegmentos = comOCSegmentos.Segmento_Id
	INNER JOIN comOrdenComp ON comOrdenComp.comOrdenComp = comOCSegmentos.comOrdenComp
	INNER JOIN comProveedores ON comProveedores.genEntidades = comOrdenComp.Proveed_Id
	INNER JOIN genMonedas ON genMonedas.genMonedas = comOrdenComp.Moneda_Id
	Inner Join genMonedas genMonedasOC On genMonedasOC.genMonedas = comOrdenComp.Moneda_Id
	WHERE 
		comMovPOC.comMovProv = @pComMovProv

	UNION ALL

	-- Memos consulta de factura --
	SELECT comMovPOC.comMovProv, 
	dbo.Segmento(comOCSegmentos.Segmento_Id, comOCSegmentos.Segmento1C, comOCSegmentos.Segmento2C,
		comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C, comOCSegmentos.Segmento1N, 
		comOCSegmentos.Segmento2N,comOCSegmentos.Segmento3N, comOCSegmentos.Segmento4N) as Segmento_str,
		genSegmentos.Segmento_Id, comOCSegmentos.Segmento1N, comOCSegmentos.Segmento2N,comOCSegmentos.Segmento3N, 
		comOCSegmentos.Segmento4N,comOCSegmentos.Segmento1C, comOCSegmentos.Segmento2C,
		comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C, comOrdenComp.Fecha, genMonedas.Moneda_Id,
		comMovPOC.Renglon_OC as Renglon, 0 RenglonReferencia, ' ' Producto_Id, comOCMemo.Detalle as DescripcionProductos,
		stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, 1 Factor, comMovPOC.Cantidad as Cantidad,
		comMovPOC.CantidadOriginal as CantidadForm, comOcCuerpo.Precio as CostoUnitario, 
		comOCCuerpo.Precio AS PrecioOriginal, 0 as conRenglonDebe, 
		comOcCuerpo.Cantidad as CantidadOC, comOcCuerpo.Cantidad_Recibida - comOCCuerpo.Cantidad_Facturada +comOCCuerpo.Cantidad_Creditos as CantidadPendiente,
		comOcCuerpo.Precio, comOCCuerpo.Renglon_OC,comOCCuerpo.comOrdenComp, 'M' ProdMemo
	FROM comMovPOC 
	inner join comOCSegmentos on comMovPOC.comOrdenComp = comOCSegmentos.comOrdenComp
	INNER JOIN comOcCuerpo ON comMovPOC.comOrdenComp = comOcCuerpo.comOrdenComp and comMovPOC.Renglon_OC=comOCCuerpo.Renglon_OC
	INNER JOIN comOCMemo ON comOcCuerpo.comOrdenComp = comOCMemo.comOrdenComp and 
		comOcCuerpo.Renglon_OC = comOCMemo.Renglon_OC
	INNER JOIN stkUniMed ON (stkUniMed.stkUniMed = comOcCuerpo.Medida_Id)
	INNER JOIN genSegmentos ON genSegmentos.genSegmentos = comOCSegmentos.Segmento_Id
	INNER JOIN comOrdenComp ON comOrdenComp.comOrdenComp = comOCSegmentos.comOrdenComp
	INNER JOIN genMonedas ON genMonedas.genMonedas = comOrdenComp.Moneda_Id
	Inner Join genMonedas genMonedasOC On genMonedasOC.genMonedas = comOrdenComp.Moneda_Id
	WHERE 
		comMovPOC.comMovProv = @pComMovProv

END


exec comMovImpuestosDatos @pComMovProv, null
Exec genAtributosGeneralesIdentityDatos @pComMovProv, 'comMovProv' 
Exec genMovCuotasDatos @pComMovProv, null

if @pComMovProv is null
BEGIN
-- Busco la Moneda base --
	Select genMonedas.Moneda_Id MonedaOc, genMonedas.Descripcion
	From genEmpresas
	Inner Join genMonedas On genMonedas.genMonedas = genEmpresas.Moneda_Id
	Where genEmpresas.genEmpresas = @pEmpresa_Id
End
Else
Begin
-- Busco la moneda de las Oc
	Select genMonedas.Moneda_Id MonedaOc, genMonedas.Descripcion
	From comOrdenComp 
	Inner Join comMovPOC On comMovPOC.comOrdenComp = comOrdenComp.comOrdenComp
	Inner Join genMonedas On genMonedas.genMonedas = comOrdenComp.Moneda_Id
	Where comMovPOC.comMovProv = @pComMovProv
End

-- FM 05/06/2019 Descuento/Recargo --
Select commovprov.RenglonDtoFin , conCuentas.Cuenta_Id, 
	conCuentas.Descripcion as DescripcionCuenta, 
	conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, 
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, 
	conMovCont.Importe, conMovCont.ImporteMonedaOriginal, 
	conMovCont.LeyendaLibroMayor as Leyenda
From commovprov 
inner join conMovCont on commovprov.comMovProv = conMovcont.conAsientos and commovprov.RenglonDtoFin = conMovcont.Renglon
INNER JOIN conCuentas ON conCuentas.conCuentas = conmovCont.Cuenta_Id
LEFT JOIN conCentro1 ON conCentro1.conCentro1 = conMovcont.Centro1_Id
LEFT JOIN conCentro2 ON conCentro2.conCentro2 = conMovcont.Centro2_Id
Where comMovProv.comMovProv = @pComMovProv
 
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comFactuReceOc.sql*/
DROP PROCEDURE comFactuReceOcGuardar
GO
CREATE PROCEDURE comFactuReceOcGuardar
(
@pcomMovProv bigint,
@pcomOrdenComp int,
@pRenglon_OC int,
@pcomOcRecepcion bigint,
@pconRenglon int,
@pCantidad qCantidadD8
)
AS
SET NOCOUNT ON 

	INSERT INTO comFactuReceOc
	(
		comMovProv,
		comOrdenComp,
		Renglon_OC,
		comOcRecepcion,
		conRenglon,
		Cantidad
	)
	VALUES 
	(
		@pcomMovProv,
		@pcomOrdenComp,
		@pRenglon_OC,
		@pcomOcRecepcion,
		@pconRenglon,
		@pCantidad
	)

GO

DROP PROCEDURE comFactuReceOcDatos
GO
CREATE PROCEDURE comFactuReceOcDatos
(
@pcomMovProv bigint
)
AS
SET NOCOUNT ON

Select @pcomMovProv comMovProv, 0 comOrdenComp, 0 Renglon_OC

SELECT 0 Renglon_OC, comFactuReceOc.comOcRecepcion, comFactuReceOc.conRenglon, comFactuReceOc.Cantidad, conAsientos.Cambio
FROM comFactuReceOc 
INNER JOIN comMovPOC  ON comMovPOC.comMovProv = comFactuReceOc.comMovProv AND comMovPOC.comOrdenComp = comFactuReceOc.comOrdenComp AND 
	comMovPOC.Renglon_OC = comFactuReceOc.Renglon_OC
INNER JOIN comOcReceCuerpo  ON comOcReceCuerpo.comOcRecepcion = comFactuReceOc.comOcRecepcion AND comOcReceCuerpo.conRenglon = comFactuReceOc.conRenglon
Inner Join conAsientos On conAsientos.conAsientos = comOcReceCuerpo.comOcRecepcion
WHERE comFactuReceOc.comMovProv = @pcomMovProv
 
RETURN @@Error 

GO

DROP PROCEDURE comFactuReceOcEliminar
GO
CREATE PROCEDURE comFactuReceOcEliminar
(
@pcomMovProv bigint,
@pcomOrdenComp int = Null,
@pRenglon_OC int = Null
)
AS
SET NOCOUNT ON 

DELETE FROM comFactuReceOc 
WHERE comMovProv = @pcomMovProv And
comFactuReceOc.comOrdenComp = IsNull(@pcomOrdenComp, comFactuReceOc.comOrdenComp)
AND comFactuReceOc.Renglon_OC = IsNull(@pRenglon_OC, comFactuReceOc.Renglon_OC)
 
 RETURN @@Error 

GO


DROP PROCEDURE comFactuReceOcCalcularPendiente
GO
CREATE PROCEDURE comFactuReceOcCalcularPendiente
(
@pcomOrdenComp int,
@pRenglon_OC int
)
AS
SET NOCOUNT ON 

Select Cast(0 As bigint) comMovProv, @pcomOrdenComp comOrdenComp, @pRenglon_OC Renglon_OC

SELECT @pRenglon_OC Renglon_OC, comOcReceCuerpo.comOcRecepcion, comOcReceCuerpo.conRenglon, comOcReceCuerpo.CantFactPendiente Cantidad, conAsientos.Cambio
FROM comOcReceCuerpo
Inner Join conAsientos On conAsientos.conAsientos = comOcReceCuerpo.comOcRecepcion
WHERE comOcReceCuerpo.comOrdenComp = @pcomOrdenComp
AND comOcReceCuerpo.Renglon_OC = @pRenglon_OC

RETURN @@Error 

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comFactuReceStk.sql*/
DROP PROCEDURE comFactuReceStkGuardar
GO
CREATE PROCEDURE comFactuReceStkGuardar
(
@pcomMovProv bigint,
@pcomOrdenComp int,
@pRenglon_OC int,
@pstkMoviCabe bigint,
@pRenglon int,
@pCantidad qCantidadD8
)
AS

	INSERT INTO comFactuReceStk
	(
		comMovProv,
		comOrdenComp,
		Renglon_OC,
		stkMoviCabe,
		Renglon,
		Cantidad
	)
	VALUES 
	(
		@pcomMovProv,
		@pcomOrdenComp,
		@pRenglon_OC,
		@pstkMoviCabe,
		@pRenglon,
		@pCantidad
	)

GO

DROP PROCEDURE comFactuReceStkDatos
GO
CREATE PROCEDURE comFactuReceStkDatos
(
@pcomMovProv bigint
)
AS
SET NOCOUNT ON 

Select Cast(0 As bigint) comMovProv, 0 comOrdenComp, 0 Renglon_OC

SELECT 0 Renglon_OC, stkMoviOC.stkMoviCabe, stkMoviOC.Renglon, comFactuReceStk.Cantidad, conAsientos.Cambio
FROM comFactuReceStk 
INNER JOIN comMovPOC  ON comMovPOC.comMovProv = comFactuReceStk.comMovProv AND comMovPOC.comOrdenComp = comFactuReceStk.comOrdenComp AND 
comMovPOC.Renglon_OC = comFactuReceStk.Renglon_OC
INNER JOIN stkMoviOC  ON stkMoviOC.stkMoviCabe = comFactuReceStk.stkMoviCabe AND stkMoviOC.Renglon = comFactuReceStk.Renglon
Inner Join stkMoviCuerpo On stkMoviCuerpo.stkMoviCabe = stkMoviOC.stkMoviCabe And stkMoviCuerpo.Renglon = stkMoviOC.Renglon
Inner Join conAsientos On conAsientos.conAsientos = stkMoviOC.stkMoviCabe
WHERE comFactuReceStk.comMovProv = @pcomMovProv

 
 RETURN @@Error 

GO

DROP PROCEDURE comFactuReceStkEliminar
GO
CREATE PROCEDURE comFactuReceStkEliminar
(
@pcomMovProv bigint,
@pcomOrdenComp int = Null,
@pRenglon_OC int = Null
)
AS
SET NOCOUNT ON 

DELETE FROM comFactuReceStk 
WHERE comMovProv = @pcomMovProv
AND comFactuReceStk.comOrdenComp = IsNull(@pcomOrdenComp, comFactuReceStk.comOrdenComp)
AND comFactuReceStk.Renglon_OC = IsNull(@pRenglon_OC, comFactuReceStk.Renglon_OC)
 
RETURN @@Error 

GO


Drop PROCEDURE comFactuReceStkCalcularPendiente
Go

CREATE PROCEDURE comFactuReceStkCalcularPendiente
(
@pcomOrdenComp int,
@pRenglon_OC int
)
AS
SET NOCOUNT ON

Select Cast(0 As bigint) comMovProv, @pcomOrdenComp comOrdenComp, @pRenglon_OC Renglon_OC

SELECT @pRenglon_OC Renglon_OC, stkMoviOC.stkMoviCabe, stkMoviOC.Renglon, stkMoviOc.CantFactPendiente Cantidad, conAsientos.Cambio
FROM stkMoviOC 
Inner Join stkMoviCuerpo On stkMoviCuerpo.stkMoviCabe = stkMoviOC.stkMoviCabe And stkMoviCuerpo.Renglon = stkMoviOC.Renglon
Inner Join conAsientos On conAsientos.conAsientos = stkMoviOC.stkMoviCabe
WHERE stkMoviOC.comOrdenComp = @pcomOrdenComp
AND stkMoviOC.Renglon_OC = @pRenglon_OC And
conAsientos.Anulado = 0
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comForEntre.sql*/
DROP PROCEDURE comForEntreGuardar
GO
CREATE PROCEDURE comForEntreGuardar
(
@pFormaEnt_Id varchar(5),
@pFormaEnt_Id_Nuevo varchar(5),
@pDescripcion varchar(35),
@pEmpresa_Id int = NULL,
@pInactivo bit,
@pUsuario_Id int,
@pPosteado bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM comForEntre WHERE (FormaEnt_Id = @pFormaEnt_Id)))
BEGIN 
	UPDATE comForEntre
	SET		@lIdentidad = comForEntre,
		FormaEnt_Id = @pFormaEnt_Id_Nuevo,
		Descripcion = @pDescripcion,
		Empresa_Id = @pEmpresa_Id,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (FormaEnt_Id = @pFormaEnt_Id)
END 
ELSE 
BEGIN 
	INSERT INTO comForEntre
	(
		FormaEnt_Id,
		Descripcion,
		Empresa_Id,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pFormaEnt_Id,
		@pDescripcion,
		@pEmpresa_Id,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE comForEntreDatos
GO
CREATE PROCEDURE comForEntreDatos
(
@pFormaEnt_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT comForEntre.comForEntre, comForEntre.FormaEnt_Id, comForEntre.Descripcion, comForEntre.Empresa_Id,
	Cast( Case When comForEntre.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, comForEntre.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
	comForEntre.Posteado
FROM comForEntre 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = comForEntre.Usuario_Id)
WHERE (FormaEnt_Id = @pFormaEnt_Id)
 


 Declare @pidentity bigint= dbo.FuncFKcomForEntre(@pFormaEnt_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'comForEntre'
 RETURN @@Error 

GO

DROP PROCEDURE comForEntreEliminar
GO
CREATE PROCEDURE comForEntreEliminar
(
@pFormaEnt_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comForEntre 
WHERE (FormaEnt_Id = @pFormaEnt_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKcomForEntre
GO

CREATE FUNCTION FuncFKcomForEntre
(
@pFormaEnt_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = comForEntre FROM comForEntre WHERE 
	FormaEnt_Id = @pFormaEnt_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comHabilitarPagos.sql*/
Drop procedure comHabilitarPagosDatos
Go

Create procedure comHabilitarPagosDatos
(
@pProveed_Id varChar(15),
@pMoneda_Id varChar(5),
@pSoloHabilitados bit,
@pEmpresa_Id int, 
@pFechaPago DateTime=NULL
)
As
Select distinct Proveed_Id, RazonSocial, genMonedas.Moneda_Id, genMonedas.Descripcion, @pSoloHabilitados SoloHabilitados, 0.00 as Total, 
	@pFechaPago FechaPago,'' as Upload
From comProveedores
Inner Join comProveedoresCtasPasivo On comProveedoresCtasPasivo.genEntidades = comProveedores.genEntidades
Inner Join genMonedas On genMonedas.genMonedas = comProveedoresCtasPasivo.Moneda_Id
Where Proveed_Id = @pProveed_Id And comProveedoresCtasPasivo.Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id)

Exec comPagosHabilitadosDatos @pProveed_Id, @pMoneda_Id, @pSoloHabilitados, @pEmpresa_Id, @pFechaPago

Exec comPagosAnticipoDatos @pProveed_Id, @pMoneda_Id, @pEmpresa_Id, @pFechaPago
Go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comHabilitarPagosMasivos.sql*/

-- comHabilitarPagosMasivosDatos ' ','ZZZ','PES','20200120',1

Drop procedure comHabilitarPagosMasivosDatos
Go

Create procedure comHabilitarPagosMasivosDatos
(
@pProveed_IdDesde varChar(15),
@pProveed_IdHasta varChar(15),
@pMoneda_Id varChar(5),
@pFechaHasta datetime,
@pEmpresa_Id int
)
As
Select @pProveed_IdDesde as ProveedorDesde,@pProveed_IdHasta as ProveedorHasta,  genMonedas.Moneda_Id, genMonedas.Descripcion,  0.00 as Total,@pFechaHasta as FechaHasta
From genMonedas where genMonedas.Moneda_Id = @pMoneda_Id




SELECT comProveedores.Proveed_Id,comProveedores.RazonSocial, comMovProv.comMovProv, dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoSTR,
	genMonedas.Moneda_Id, genMovCuotas.CuotaNro, genMovCuotas.Importe, genMovCuotas.Saldo,
	Convert(Numeric(18,2), genMovCuotas.Saldo*conAsientos.Cambio) as SaldoOri, conAsientos.Cambio,
	1 Secuencia, 0 Usuario_Id, ' ' Apellido_y_Nombres, conCuentas.Cuenta_Id, comMovProv.TipoCtaProv, comMovProv.Fecha_CCP,
	ISNULL(comPagosHabilitados.FechaHabilitacion, dbo.FechaActual()) FechaHabilitacion, ISNULL(comPagosHabilitados.ImporteHabilitado, genMovCuotas.Saldo * 0) ImporteHabilitado, Cast(0 as bigint) tesMovimientos,
	dbo.func_TipoCambio(conCuentas.Moneda_Id, dbo.FechaActual(), @pEmpresa_Id) as CambioPago,
	genMovCuotas.Saldo * 0 Importe1, genMovCuotas.Saldo * 0 Importe2, genMovCuotas.Saldo * 0 Importe3, genMovCuotas.FechaVencimiento
FROM comMovProv
INNER JOIN comMovTipos ON comMovTipos.TipoMov = comMovprov.TipoMov
Inner Join conAsientos On conAsientos.conAsientos = comMovProv.comMovProv
Inner Join genMonedas On genMonedas.genMonedas = conAsientos.Moneda_Id
INNER JOIN conMovCont ON conMovCont.conAsientos = conAsientos.conAsientos And conMovCont.Clase = 'PRO'
INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
Inner Join genAsiSegmentos ON genAsiSegmentos.Asiento_Id = comMovprov.comMovprov
Inner Join genMovCuotas On genMovCuotas.Asiento_Id = comMovProv.comMovProv
INNER JOIN comProveedores on comProveedores.genEntidades= comMovProv.Proveed_Id
left JOIN comPagosHabilitados ON comMovProv.comMovProv = comPagosHabilitados.comMovProv and
		  comPagosHabilitados.tesMovimientos IS NULL
Left Join tesRengMovicomMovProv On tesRengMovicomMovProv.comMovProv = comMovProv.comMovProv 
WHERE comProveedores.Proveed_Id Between @pProveed_IdDesde and @pProveed_IdHasta 
And conAsientos.Empresa_Id = @pEmpresa_Id And conAsientos.Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id)
And genMovCuotas.Saldo > 0 And comMovTipos.Signo = -1
and genMovCuotas.FechaVencimiento <= @pFechaHasta
And tesRengMovicomMovProv.tesMovimientos Is Null
ORDER by  genMovCuotas.FechaVencimiento
Go





Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comImpuestos.sql*/
DROP PROCEDURE comImpuestosGuardar
GO
CREATE PROCEDURE comImpuestosGuardar
(
@pImpuesto_Id varchar(5),
@pImpuesto_Id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pDescripcion char(35),
@pTipoImpuesto int,
@pFormulacalc char(200),
@pCtaDebe varchar(25) = NULL,
@pCtaHaber varchar(25) = NULL,
@pCtaReversion varchar(25) = NULL,
@pPorcentaje numeric(5,2),
@pFecha_Desde datetime,
@pFecha_Hasta datetime,
@pDepende_de char(3),
@pVaAlCosto bit,
@pPorAcreditacion bit,
@pInactivo bit,
@pUsuario_Id int,
@pPosteado bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM comImpuestos WHERE (Impuesto_Id = @pImpuesto_Id)))
BEGIN 
	UPDATE comImpuestos
	SET		@lIdentidad = comImpuestos,
		Impuesto_Id = @pImpuesto_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		TipoImpuesto = @pTipoImpuesto,
		Formulacalc = @pFormulacalc,
		CtaDebe = dbo.FuncFKconCuentas(@pCtaDebe),
		CtaHaber = dbo.FuncFKconCuentas(@pCtaHaber),
		CtaReversion = dbo.FuncFKconCuentas(@pCtaReversion),
		Porcentaje = @pPorcentaje,
		Fecha_Desde = @pFecha_Desde,
		Fecha_Hasta = @pFecha_Hasta,
		Depende_de = @pDepende_de,
		VaAlCosto = @pVaAlCosto,
		PorAcreditacion = @pPorAcreditacion,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (Impuesto_Id = @pImpuesto_Id)
END 
ELSE 
BEGIN 
	INSERT INTO comImpuestos
	(
		Impuesto_Id,
		Empresa_Id,
		Descripcion,
		TipoImpuesto,
		Formulacalc,
		CtaDebe,
		CtaHaber,
		CtaReversion,
		Porcentaje,
		Fecha_Desde,
		Fecha_Hasta,
		Depende_de,
		VaAlCosto,
		PorAcreditacion,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pImpuesto_Id,
		@pEmpresa_Id,
		@pDescripcion,
		@pTipoImpuesto,
		@pFormulacalc,
		dbo.FuncFKconCuentas(@pCtaDebe),
		dbo.FuncFKconCuentas(@pCtaHaber),
		dbo.FuncFKconCuentas(@pCtaReversion),
		@pPorcentaje,
		@pFecha_Desde,
		@pFecha_Hasta,
		@pDepende_de,
		@pVaAlCosto,
		@pPorAcreditacion,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE comImpuestosDatos
GO
CREATE PROCEDURE comImpuestosDatos
(
@pImpuesto_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT comImpuestos.comImpuestos, comImpuestos.Impuesto_Id, comImpuestos.Empresa_Id, Cast( Case When comImpuestos.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	comImpuestos.Descripcion, comImpuestos.TipoImpuesto, impTipoImpuesto.Descripcion as DescripcionTipoImpuesto, comImpuestos.Formulacalc,
	conCuentas.Cuenta_Id as CtaDebe, conCuentas.Descripcion as DescripcionCtaDebe, 
	conCuentas2.Cuenta_Id as CtaHaber, conCuentas2.Descripcion as DescripcionCtaHaber,
	conCuentas3.Cuenta_Id as CtaReversion, conCuentas3.Descripcion as DescripcionCtaReversion, 
	comImpuestos.Porcentaje, comImpuestos.Fecha_Desde,
	comImpuestos.Fecha_Hasta, comImpuestos.Depende_de, comImpuestos.VaAlCosto, comImpuestos.PorAcreditacion,
	comImpuestos.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
	comImpuestos.Posteado
FROM comImpuestos 
INNER JOIN impTipoImpuesto  ON (impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto)
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = comImpuestos.CtaDebe)
LEFT JOIN conCuentas conCuentas2 ON (conCuentas2.conCuentas = comImpuestos.CtaHaber)
LEFT JOIN conCuentas conCuentas3 ON (conCuentas3.conCuentas = comImpuestos.CtaReversion)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = comImpuestos.Usuario_Id)
WHERE (Impuesto_Id = @pImpuesto_Id)
 


 Declare @pidentity bigint= dbo.FuncFKcomImpuestos(@pImpuesto_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'comImpuestos'
 RETURN @@Error 

GO

DROP PROCEDURE comImpuestosEliminar
GO
CREATE PROCEDURE comImpuestosEliminar
(
@pImpuesto_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comImpuestos 
WHERE (Impuesto_Id = @pImpuesto_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKcomImpuestos
GO

CREATE FUNCTION FuncFKcomImpuestos
(
@pImpuesto_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = comImpuestos FROM comImpuestos WHERE 
	Impuesto_Id = @pImpuesto_Id
  RETURN @pIdentity
END


GO


DROP PROCEDURE comImpuestosPorTipoDatos
GO
CREATE PROCEDURE comImpuestosPorTipoDatos
(
	@pTipo int,
	@pPorcentaje Numeric(5,2),
	@pFecha DateTime,
	@pEmpresa_Id int

)
AS
SET NOCOUNT ON 

SELECT comImpuestos.comImpuestos, comImpuestos.Impuesto_Id, comImpuestos.Empresa_Id, Cast( Case When comImpuestos.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	comImpuestos.Descripcion, comImpuestos.TipoImpuesto, impTipoImpuesto.Descripcion as DescripcionTipoImpuesto, comImpuestos.Formulacalc,
	conCuentas.Cuenta_Id as CtaDebe, conCuentas.Descripcion as DescripcionCtaDebe, 
	conCuentas2.Cuenta_Id as CtaHaber, conCuentas2.Descripcion as DescripcionCtaHaber,
	conCuentas3.Cuenta_Id as CtaReversion, conCuentas3.Descripcion as DescripcionCtaReversion, 
	comImpuestos.Porcentaje, comImpuestos.Fecha_Desde,
	comImpuestos.Fecha_Hasta, comImpuestos.Depende_de, comImpuestos.VaAlCosto, comImpuestos.PorAcreditacion,
	comImpuestos.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
	comImpuestos.Posteado
FROM comImpuestos 
INNER JOIN impTipoImpuesto  ON (impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto)
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = comImpuestos.CtaDebe)
LEFT JOIN conCuentas conCuentas2 ON (conCuentas2.conCuentas = comImpuestos.CtaHaber)
LEFT JOIN conCuentas conCuentas3 ON (conCuentas3.conCuentas = comImpuestos.CtaReversion)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = comImpuestos.Usuario_Id)
WHERE comImpuestos.TipoImpuesto = @pTipo and 
	(comImpuestos.Porcentaje = @pPorcentaje or @pPorcentaje =0) AND
	comImpuestos.Inactivo = 0 and 
	@pFecha between comImpuestos.Fecha_Desde and comImpuestos.Fecha_Hasta and 
	isnull(comImpuestos.Empresa_Id,@pEmpresa_Id) = @pEmpresa_Id
 


 --Declare @pidentity bigint= dbo.FuncFKcomImpuestos(@pImpuesto_Id)
 --Exec genAtributosGeneralesIdentityDatos @pidentity, 'comImpuestos'

 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comLibros.sql*/
DROP FUNCTION FuncFKcomLIbros
GO

CREATE FUNCTION FuncFKcomLIbros
(
	@pLibro_Id varchar (10)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = comLibros FROM comLIbros WHERE 
	Libro_Id = @pLibro_Id 
  RETURN @pIdentity
END

GO


DROP PROCEDURE comLIbrosGuardar
GO
CREATE PROCEDURE comLIbrosGuardar
(
	@pEmpresa_Id int = null,
	@pLibro_Id varchar(10),
	@pLibro_Id_Nuevo varchar(10),
	@pDescripcion varchar(50)
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM comLIbros WHERE (Libro_Id = @pLibro_Id)))
BEGIN 
	UPDATE comLIbros
	SET		@lIdentidad = comLibros,
		Empresa_Id = @pEmpresa_Id,
		Libro_Id = @pLibro_Id_Nuevo,
		Descripcion = @pDescripcion
	WHERE (Libro_Id = @pLibro_Id) 
END 
ELSE 
BEGIN 
	INSERT INTO comLIbros
	(
		Empresa_Id,
		Libro_Id,
		Descripcion
	)
	VALUES 
	(
		@pEmpresa_Id,
		@pLibro_Id,
		@pDescripcion
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE comLIbrosDatos
GO
CREATE PROCEDURE comLIbrosDatos
(
	@pLibro_Id varchar(10)
)
AS
SET NOCOUNT ON 
SELECT comLIbros.comLibros, 
	Cast(case when comLIbros.Empresa_Id is null then 0 else 1 end as bit) as  PTodasLasEmpresas,
	comLIbros.Libro_Id,comLIbros.Libro_Id as Libro_Id_Nuevo, comLIbros.Descripcion
FROM comLIbros 
WHERE (Libro_Id = @pLibro_Id)

Declare @pidentity bigint= dbo.FuncFKcomLIbros(@pLibro_Id)

exec comlibrosColumnasDatos @pIdentity 
exec comlibrosImpuestosDatos @pIdentity 
Exec genAtributosGeneralesIdentityDatos @pidentity, 'comLIbros'

RETURN @@Error 

GO

DROP PROCEDURE comLIbrosEliminar
GO
CREATE PROCEDURE comLIbrosEliminar
(
@pLibro_Id varchar(10) 
)
AS
SET NOCOUNT ON 

DELETE FROM comLIbros 
WHERE (Libro_Id = @pLibro_Id)
 
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comLibrosColumnas.sql*/
DROP PROCEDURE comLibrosColumnasGuardar
GO
CREATE PROCEDURE comLibrosColumnasGuardar
(
@pcomLibros int,
@pColumna int,
@pTitulo varchar(20)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comLibrosColumnas WHERE (comLibros = @pcomLibros) AND (Columna = @pColumna)))
BEGIN 
	UPDATE comLibrosColumnas
	SET		Titulo = @pTitulo
	WHERE (comLibros = @pcomLibros) AND (Columna = @pColumna)
END 
ELSE 
BEGIN 
	INSERT INTO comLibrosColumnas
	(
		comLibros,
		Columna,
		Titulo
	)
	VALUES 
	(
		@pcomLibros,
		@pColumna,
		@pTitulo
	)
END 

GO

DROP PROCEDURE comLibrosColumnasDatos
GO
CREATE PROCEDURE comLibrosColumnasDatos
(
@pcomLibros int,
@pColumna int=NULL
)
AS
SET NOCOUNT ON 

SELECT comLibrosColumnas.comLibros, comLIbros.Libro_Id, comLIbros.Descripcion as DescripcionLIbros, comLibrosColumnas.Columna,
	comLibrosColumnas.Titulo
FROM comLibrosColumnas 
INNER JOIN comLIbros  ON (comLIbros.comLibros = comLibrosColumnas.comLibros)
WHERE (comLibrosColumnas.comLibros = @pcomLibros)
AND (Columna = ISNULL(@pColumna,Columna))
 
 RETURN @@Error 

GO

DROP PROCEDURE comLibrosColumnasEliminar
GO
CREATE PROCEDURE comLibrosColumnasEliminar
(@pcomLibros int,
@pColumna int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comLibrosColumnas 
WHERE (comLibros = @pcomLibros)
AND (Columna = ISNULL(@pColumna, Columna))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comLibrosImpuestos.sql*/
DROP PROCEDURE comLibrosImpuestosGuardar
GO
CREATE PROCEDURE comLibrosImpuestosGuardar
(
@pcomLibros int,
@pColumna int,
@pImpuesto_Id varchar(5),
@pTipoRenglon varchar(2)
)
as
	INSERT INTO comLibrosImpuestos
	(
		comLibros,
		Columna,
		Impuesto_Id,
		TipoRenglon
	)
	VALUES 
	(
		@pcomLibros,
		@pColumna,
		dbo.FuncFKcomImpuestos(@pImpuesto_Id),
		@pTipoRenglon
	)


GO

DROP PROCEDURE comLibrosImpuestosDatos
GO
CREATE PROCEDURE comLibrosImpuestosDatos
(
@pcomLibros int,
@pColumna int=NULL,
@pImpuesto_Id varchar(5)=NULL,
@pTipoRenglon varchar(2)=NULL
)
AS
SET NOCOUNT ON 

SELECT comLibrosImpuestos.comLibros, comLibrosImpuestos.Columna,  comImpuestos.Impuesto_Id,
	comImpuestos.Descripcion as DescripcionImpuestos, comLibrosImpuestos.TipoRenglon, impLibrosTiposRenglon.Descripcion as DescripcionTipoImpuesto
FROM comLibrosImpuestos 
INNER JOIN comLibrosColumnas  ON (comLibrosColumnas.comLibros = comLibrosImpuestos.comLibros) AND (comLibrosColumnas.Columna = comLibrosImpuestos.Columna)
INNER JOIN comImpuestos  ON (comImpuestos.comImpuestos = comLibrosImpuestos.Impuesto_Id)
INNER JOIN impLibrosTiposRenglon  ON (impLibrosTiposRenglon.TipoRenglon = comLibrosImpuestos.TipoRenglon)
WHERE (comlibrosImpuestos.comLibros = @pcomLibros)
AND (comlibrosImpuestos.Columna = ISNULL(@pColumna,comlibrosImpuestos.Columna))
AND (comlibrosImpuestos.Impuesto_Id =ISNULL( @pImpuesto_Id,comlibrosImpuestos.Impuesto_Id))
AND (comlibrosImpuestos.TipoRenglon = ISNULL(@pTipoRenglon,comlibrosImpuestos.TipoRenglon))
 
 RETURN @@Error 

GO

DROP PROCEDURE comLibrosImpuestosEliminar
GO
CREATE PROCEDURE comLibrosImpuestosEliminar
(
@pcomLibros int,
@pColumna int=null,
@pImpuesto_Id varchar(5)=null,
@pTipoRenglon varchar(2)=null
)
AS
SET NOCOUNT ON 

DELETE FROM comLibrosImpuestos 
WHERE (comLibros = @pcomLibros)
AND (Columna = ISNULL(@pColumna, Columna))
AND (Impuesto_Id =ISNULL( dbo.FuncFKcomImpuestos(@pImpuesto_Id),Impuesto_Id))
AND (TipoRenglon = ISNULL(@pTipoRenglon,TipoRenglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comListaNegraMX.sql*/
DROP PROCEDURE comListaNegraMXInsertar
GO
CREATE PROCEDURE comListaNegraMXInsertar
(
@pRFC varchar(13),
@pRazonSocial varchar(500),
@pSituacion varchar(50)
)
AS
SET NOCOUNT ON 

if not exists(SELECT 1 FROM comListaNegraMX Where RFC = @pRFC)
begin
	INSERT INTO comListaNegraMX
	(
		RFC,
		RazonSocial,
		Situacion
	)
	VALUES 
	(
		@pRFC,
		@pRazonSocial,
		@pSituacion
	)
end
GO

DROP PROCEDURE comListaNegraMXDatos
GO
CREATE PROCEDURE comListaNegraMXDatos
(
@pRFC varchar(13)
)
AS
SET NOCOUNT ON 

SELECT comListaNegraMX.RFC, comListaNegraMX.RazonSocial, comListaNegraMX.Situacion
FROM comListaNegraMX 
WHERE (RFC = @pRFC)
 
 RETURN @@Error 

GO

DROP PROCEDURE comListaNegraMXEliminar
GO
CREATE PROCEDURE comListaNegraMXEliminar
AS
SET NOCOUNT ON 

DELETE FROM comListaNegraMX 
 
RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comMovContCuentaDatos.sql*/
-- comMovContCuentaDatos 126

DROP PROCEDURE comMovContCuentaDatos
GO

CREATE PROCEDURE comMovContCuentaDatos (
	@Asiento_Id BigInt
)
AS
SELECT conMovCont.conAsientos Asiento_Id, conCuentas.Cuenta_Id, conMovCont.Clase,
	conAsientos.Cambio, genMonedas.Moneda_Id, genMonedas.CantidadDigitos as Decimales,
	SUM(conMovCont.Importe*(-2*conMovCont.TipoMov+3)) as Monto 
FROM
conMovCont INNER JOIN conCuentas ON 
conCuentas.conCuentas = conMovCont.Cuenta_Id
INNER JOIN conAsientos ON
conAsientos.conAsientos =  conMovCont.conAsientos
INNER JOIN genMonedas ON
genMonedas.genMonedas = conAsientos.Moneda_Id
Where
	conMovCont.Clase IN ('ANTPR','PRO') AND 
	conAsientos.Anulado = 0 and 
	conAsientos.conAsientos = @Asiento_Id
GROUP BY conCuentas.Cuenta_Id, conMovCont.Clase, conMovCont.conAsientos, conAsientos.Cambio, 
genMonedas.Moneda_Id, genMonedas.CantidadDigitos 
GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comMovDetalle.sql*/

DROP PROCEDURE comMovDetalleGuardar
GO
CREATE PROCEDURE comMovDetalleGuardar
(
@pcomMovProv bigint,
@pRenglon int,
@pDetalle varchar(250),
@pImporte qMonedaD2,
@pCuenta_id varChar(25)= NULL,
@pCentro1_Id varchar(8) = NULL,
@pCentro2_Id varchar(8) = NULL,
@pBase_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comMovDetalle WHERE (comMovProv = @pcomMovProv) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE comMovDetalle
	SET		Detalle = @pDetalle,
		Importe = @pImporte,
		Cuenta_id = dbo.FuncFKconCuentas(@pCuenta_id),
		Centro1_Id = dbo.FuncFKconCentro1(@pCentro1_Id),
		Centro2_Id = dbo.FuncFKconCentro2(@pCentro2_Id),
		Base_Id = dbo.FuncFKconBaseDistri(@pBase_Id)
	WHERE (comMovProv = @pcomMovProv) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO comMovDetalle
	(
		comMovProv,
		Renglon,
		Detalle,
		Importe,
		Cuenta_id,
		Centro1_Id,
		Centro2_Id,
		Base_Id
	)
	VALUES 
	(
		@pcomMovProv,
		@pRenglon,
		@pDetalle,
		@pImporte,
		dbo.FuncFKconCuentas(@pCuenta_id),
		dbo.FuncFKconCentro1(@pCentro1_Id),
		dbo.FuncFKconCentro2(@pCentro2_Id),
		dbo.FuncFKconBaseDistri(@pBase_Id)
	)
END 

GO

DROP PROCEDURE comMovDetalleDatos
GO
CREATE PROCEDURE comMovDetalleDatos
(
@pcomMovProv bigint,
@pRenglon int=null
)
AS
SET NOCOUNT ON 


SELECT comMovDetalle.comMovProv, comMovDetalle.Renglon, comMovDetalle.Detalle,
	comMovDetalle.Importe, 
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuenta,
	conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, 
	conCentro2.Centro2_Id, 	conCentro2.Descripcion as DescripcionCentro2, 
	conBaseDistri.Base_Id, conBaseDistri.Descripcion as DescripcionBaseDistri
FROM comMovDetalle 
INNER JOIN comMovProv  ON (comMovProv.comMovProv = comMovDetalle.comMovProv)
LEFT JOIN conCuentas ON (conCuentas.conCuentas = comMovDetalle.Cuenta_id)
LEFT JOIN conCentro1  ON (conCentro1.conCentro1 = comMovDetalle.Centro1_Id)
LEFT JOIN conCentro2  ON (conCentro2.conCentro2 = comMovDetalle.Centro2_Id)
LEFT JOIN conBaseDistri  ON (conBaseDistri.conBaseDistri = comMovDetalle.Base_Id)
WHERE (comMovProv.comMovProv = @pcomMovProv)
AND (Renglon = ISNULL(@pRenglon,Renglon))
order by 2
 
 RETURN @@Error 

GO

DROP PROCEDURE comMovDetalleEliminar
GO
CREATE PROCEDURE comMovDetalleEliminar
(
@pcomMovProv bigint,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comMovDetalle 
WHERE (comMovProv = @pcomMovProv)
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comMovDetalleCont.sql*/
DROP PROCEDURE comMovDetalleContInsertar
GO
CREATE PROCEDURE comMovDetalleContInsertar
(
@pcomMovProv bigint,
@pRenglon int,
@pconRenglon int
)
AS

	INSERT INTO comMovDetalleCont
	(
		comMovProv,
		Renglon,
		conRenglon
	)
	VALUES 
	(
		@pcomMovProv,
		@pRenglon,
		@pconRenglon
	)

GO

DROP PROCEDURE comMovDetalleContDatos
GO
CREATE PROCEDURE comMovDetalleContDatos
(
@pcomMovProv bigint,
@pRenglon int = Null,
@pconRenglon int= Null
)
AS
SET NOCOUNT ON 

SELECT comMovDetalleCont.comMovProv, comMovDetalleCont.Renglon, comMovDetalleCont.conRenglon
FROM comMovDetalleCont 
WHERE comMovProv = @pcomMovProv
	AND Renglon = ISNULL(@pRenglon,Renglon)
	AND conRenglon = ISNULL(@pRenglon,conRenglon)
 
RETURN @@Error 

GO

DROP PROCEDURE comMovDetalleContEliminar
GO
CREATE PROCEDURE comMovDetalleContEliminar
(
@pcomMovProv bigint,
@pRenglon int=null,
@pconRenglon int= null
)
AS
SET NOCOUNT ON 

DELETE FROM comMovDetalleCont 
WHERE comMovProv = @pcomMovProv
	AND Renglon = ISNULL(@pRenglon,Renglon)
	AND conRenglon = ISNULL(@pRenglon,conRenglon)
 
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comMovImpAcredita.sql*/
DROP PROCEDURE comMovImpAcreditaGuardar
GO
CREATE PROCEDURE comMovImpAcreditaGuardar
(
@pAsiento_Id bigint,
@pRenglonDebe int,
@pRenglonHaber int = NULL,
@pcomMovProv bigint = NULL,
@ptesMovimientos bigint = NULL,
@pImpuesto_Id varchar(5),
@pCartera_Id varchar(5),
@pBaseImponible qMonedaD2,
@pMonto qMonedaD2,
@pTotalPago qMonedaD2,
@pOrigen char(1),
@pDifCambio qMonedaD2, 
@pRenDifCambio Int = NULL
)
AS
	INSERT INTO comMovImpAcredita
	(
		Asiento_Id,
		RenglonDebe,
		RenglonHaber,
		comMovProv,
		tesMovimientos,
		Impuesto_Id,
		Cartera_Id,
		BaseImponible,
		Monto,
		TotalPago,
		Origen,
		DifCambio,
		RenDifCambio
	)
	VALUES 
	(
		@pAsiento_Id,
		@pRenglonDebe,
		@pRenglonHaber,
		@pcomMovProv,
		@ptesMovimientos,
		dbo.FuncFKcomImpuestos(@pImpuesto_Id),
		dbo.FuncFKtesIdentifica(@pCartera_Id),
		@pBaseImponible,
		@pMonto,
		@pTotalPago,
		@pOrigen,
		@pDifCambio,
		@pRenDifCambio
	)

GO

DROP PROCEDURE comMovImpAcreditaDatos
GO
CREATE PROCEDURE comMovImpAcreditaDatos
(
@pAsiento_Id bigint,
@pRenglonDebe int
)
AS
SET NOCOUNT ON 

SELECT comMovImpAcredita.Asiento_Id, comMovImpAcredita.RenglonDebe, 
	comMovImpAcredita.RenglonHaber,  comMovImpAcredita.comMovProv, 
	comMovImpAcredita.tesMovimientos, comImpuestos.Impuesto_Id, comImpuestos.Descripcion as DescripcionImpuestos,
	tesIdentifica.Cartera_Id, tesIdentifica.Descripcion as DescripcionIdentifica, comMovImpAcredita.BaseImponible, comMovImpAcredita.Monto,
	comMovImpAcredita.TotalPago, comMovImpAcredita.Origen, comMovImpAcredita.DifCambio, 
	comMovImpAcredita.RenDifCambio
FROM comMovImpAcredita 
INNER JOIN conMovCont  ON (conMovCont.conAsientos = comMovImpAcredita.Asiento_Id) AND (conMovCont.Renglon = comMovImpAcredita.RenglonDebe)
LEFT JOIN conMovCont conMovCont2 ON (conMovCont2.conAsientos = comMovImpAcredita.Asiento_Id) AND (conMovCont2.Renglon = comMovImpAcredita.RenglonHaber)
LEFT JOIN comMovProv  ON (comMovProv.comMovProv = comMovImpAcredita.comMovProv)
LEFT JOIN tesMovimientos  ON (tesMovimientos.tesMovimientos = comMovImpAcredita.tesMovimientos)
INNER JOIN comImpuestos  ON (comImpuestos.comImpuestos = comMovImpAcredita.Impuesto_Id)
INNER JOIN tesIdentifica  ON (tesIdentifica.tesIdentifica = comMovImpAcredita.Cartera_Id)
WHERE (comMovImpAcredita.Asiento_Id = @pAsiento_Id)
AND (comMovImpAcredita.RenglonDebe = @pRenglonDebe)
 
 RETURN @@Error 

GO

DROP PROCEDURE comMovImpAcreditaEliminar
GO
CREATE PROCEDURE comMovImpAcreditaEliminar
(
@pAsiento_Id bigint,
@pRenglonDebe int
)
AS
SET NOCOUNT ON 

DELETE FROM comMovImpAcredita 
WHERE (Asiento_Id = @pAsiento_Id)
AND (RenglonDebe = @pRenglonDebe)
 
RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comMovImpuestos.sql*/
DROP PROCEDURE comMovImpuestosGuardar
GO
CREATE PROCEDURE comMovImpuestosGuardar
(
@pcomMovProv bigint,
@pconRenglon int,
@pImpuesto_Id varchar(5),
@pPorcentaje qPorcentaje,
@pBase_Imponible qMonedaD2,
@pImporte_Impuesto qMonedaD2
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comMovImpuestos WHERE (comMovProv = @pcomMovProv) AND (conRenglon = @pconRenglon)))
BEGIN 
	UPDATE comMovImpuestos
	SET	Impuesto_Id = dbo.FuncFKcomImpuestos(@pImpuesto_Id),
		Porcentaje = @pPorcentaje,
		Base_Imponible = @pBase_Imponible,
		Importe_Impuesto = @pImporte_Impuesto
	WHERE (comMovProv = @pcomMovProv) AND (conRenglon = @pconRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO comMovImpuestos
	(
		comMovProv,
		conRenglon,
		Impuesto_Id,
		Porcentaje,
		Base_Imponible,
		Importe_Impuesto
	)
	VALUES 
	(
		@pcomMovProv,
		@pconRenglon,
		dbo.FuncFKcomImpuestos(@pImpuesto_Id),
		@pPorcentaje,
		@pBase_Imponible,
		@pImporte_Impuesto
	)
END 

GO

DROP PROCEDURE comMovImpuestosDatos
GO
CREATE PROCEDURE comMovImpuestosDatos
(
@pcomMovProv bigint,
@pconRenglon int= null
)
AS
SET NOCOUNT ON 

SELECT comMovImpuestos.comMovProv, comMovImpuestos.conRenglon, 
	comImpuestos.Impuesto_Id, comImpuestos.Descripcion as DescripcionImpuesto,
	comMovImpuestos.Porcentaje, 
	comMovImpuestos.Base_Imponible, comMovImpuestos.Importe_Impuesto,
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuenta,
	conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1,
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2,
	conMovCont.TipoMov, conMovCont.Clase, conMovCont.Importe as ImporteContable
 FROM 
	comMovImpuestos INNER JOIN conMovCont ON
	comMovImpuestos.comMovprov =conMovCont.conAsientos and 
	comMovImpuestos.conRenglon = conMovCont.Renglon 
	INNER JOIN comImpuestos ON 
	comImpuestos.comImpuestos = comMovImpuestos.Impuesto_id
	INNER JOIN conCuentas ON 
	conCuentas.conCuentas = conMovCont.cuenta_id 
	LEFT OUTER JOIN conCentro1 ON 
	conCentro1.conCentro1 = conMovCont.Centro1_id
	LEFT OUTER JOIN conCentro2 ON 
	conCentro2.conCentro2 = conMovCont.Centro2_id
	Where 
	comMovImpuestos.conRenglon = IsNull(@pconRenglon, comMovImpuestos.conRenglon) AND 
	comMovImpuestos.comMovProv = @pcomMovProv
ORDER BY 2 
RETURN @@Error 

GO

DROP PROCEDURE comMovImpuestosEliminar
GO
CREATE PROCEDURE comMovImpuestosEliminar
(
@pcomMovProv bigint,
@pconRenglon int= null
)
AS
SET NOCOUNT ON 

DELETE FROM comMovImpuestos 
WHERE (comMovProv = @pcomMovProv) AND (conRenglon = IsNull(@pconRenglon, comMovImpuestos.conRenglon))
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comMovPAnexo.sql*/

DROP PROCEDURE comMovpAnexoGuardar
GO
CREATE PROCEDURE comMovpAnexoGuardar
(
@pAsiento_Id bigint,
@pProvAnexo bigint,
@ptesRengMovi_Id bigint,
@pRenglonRengMovi int,
@pFecha_Ane datetime,
@pFechaFiscal datetime,
@pCondFiscal_Id varchar(5) = NULL,
@pOrigen_Id smallint = NULL,
@pVieneDeFiscal Sino,
@pXMLFiscal text = NULL,
@pClaveFiscal varchar(36) = NULL,
@pconRenglonProv int = null
)
AS

SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comMovpAnexo WHERE (Asiento_Id = @pAsiento_Id)))
BEGIN 
	UPDATE comMovpAnexo
	SET	ProvAnexo = @pProvAnexo,
		tesRengMovi_Id = @ptesRengMovi_Id,
		RenglonRengMovi = @pRenglonRengMovi,
		Fecha_Ane = @pFecha_Ane,
		FechaFiscal = @pFechaFiscal,
		Origen_Id = dbo.FuncFKcomOrigenesFiscales(@pOrigen_Id),
		CondFiscal_Id = dbo.FuncFKcomCondFiscal(@pCondFiscal_Id),
		VieneDeFiscal = @pVieneDeFiscal,
		XMLFiscal = @pXMLFiscal,
		ClaveFiscal = @pClaveFiscal,
		conRenglonProv = @pconRenglonProv
	WHERE (Asiento_Id = @pAsiento_Id)
END 
ELSE 
BEGIN 

	INSERT INTO comMovpAnexo
	(
		Asiento_Id,
		ProvAnexo,
		tesRengMovi_Id,
		RenglonRengMovi,
		Fecha_Ane,
		FechaFiscal,
		Origen_Id,
		CondFiscal_Id,
		VieneDeFiscal,
		XMLFiscal,
		ClaveFiscal,
		conRenglonProv
	)
	VALUES 
	(
		@pAsiento_Id,
		@pProvAnexo,
		@ptesRengMovi_Id,
		@pRenglonRengMovi,
		@pFecha_Ane,
		@pFechaFiscal,
		dbo.FuncFKcomOrigenesFiscales(@pOrigen_Id),
		dbo.FuncFKcomCondFiscal(@pCondFiscal_Id),
		@pVieneDeFiscal,
		@pXMLFiscal,
		@pClaveFiscal,
		@pconRenglonProv
	)
END 

GO

DROP PROCEDURE comMovpAnexoDatos
GO
CREATE PROCEDURE comMovpAnexoDatos
(
@pAsiento_Id bigint=null,
@pTesMovimientos bigint=null,
@pRenglonRengMovi int=null
)
AS
SET NOCOUNT ON 

SELECT comMovpAnexo.Asiento_Id, genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id,
	genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,genAsiSegmentos.Segmento4C,
	conAsientos.Posteado, genMonedas.Moneda_Id, conAsientos.Cambio, 
	conAsientos.CambioMonedaOriginal, conAsientos.Observaciones,
	comMovpAnexo.tesRengMovi_Id, comMovpAnexo.RenglonRengMovi, comMovPAnexo.conRenglonProv,
	conMovCont.Tipomov, conAsientos.Fecha as Fecha_Contable, 
	conMovCont.Importe, conMovCont.ImporteMonedaOriginal,  tesIdentifica.Cartera_Id, 
	tesIdentifica.Descripcion as DescripcionCartera, 
	conCuentas.Cuenta_Id, conCuentas.Descripcion DescripcionCuenta,
	conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1,
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2,
	genEntidades.CUIT, genEntidades.genEntidades,
	comProvAnexo.RazonSocial , comProvAnexo.Direccion1, comProvAnexo.Direccion2, 
	comProvAnexo.Localidad, comProvAnexo.Cod_Postal, 
	genProvincias.Provincia_id, genProvincias.Descripcion as DescripcionProvincia,
	comMovpAnexo.Fecha_Ane, comMovpAnexo.FechaFiscal, 
	comOrigenesFiscales.Origen_Id, 
	comOrigenesFiscales.Descripcion as DescripcioncomOrigenesFiscales, comCondFiscal.CondFiscal_Id,
	comCondFiscal.Descripcion as DescripcionCondFiscal, comMovpAnexo.VieneDeFiscal,
	comMovpAnexo.XMLFiscal, comMovpAnexo.ClaveFiscal
FROM comMovpAnexo 
INNER JOIN genEntidades ON genEntidades.genEntidades = comMovpAnexo.ProvAnexo
INNER JOIN conAsientos  ON (conAsientos.conAsientos = comMovpAnexo.Asiento_Id)
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_id = conAsientos.conAsientos 
INNER JOIN genSegmentos on genSegmentos.genSegmentos = genAsiSegmentos.Segmento_id
INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_id
INNER JOIN conMovCont  ON conMovCont.conAsientos = comMovPAnexo.tesRengMovi_Id and 
							conMovCont.Renglon =comMovPAnexo.conRenglonProv
INNER JOIN comProvAnexo  ON (comProvAnexo.genEntidades = comMovpAnexo.ProvAnexo)
INNER JOIN tesRengMovi  ON (tesRengMovi.tesMovimientos = comMovpAnexo.tesRengMovi_Id) AND 
			(tesRengMovi.conRenglon = comMovpAnexo.conRenglonProv)
INNER JOIN tesIdentifica ON tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id 							
INNER JOIN conCuentas ON conMovCont.Cuenta_Id = conCuentas.conCuentas
INNER JOIN conCentro1 ON conMovCont.Centro1_Id = conCentro1.conCentro1
INNER JOIN conCentro2 ON conMovCont.Centro2_Id = conCentro2.conCentro2
LEFT JOIN comOrigenesFiscales  ON (comOrigenesFiscales.comOrigenesFiscales = comMovpAnexo.Origen_Id)
LEFT JOIN comCondFiscal  ON (comCondFiscal.comCondFiscal = comMovpAnexo.CondFiscal_Id)
LEFT JOIN genProvincias ON comProvAnexo.Provincia_Id = genProvincias.genProvincias
WHERE 
	comMovpAnexo.Asiento_Id = IsNull(@pAsiento_Id,comMovpAnexo.Asiento_Id) and 
	comMovpAnexo.tesRengMovi_Id = IsNull(@pTesMovimientos,comMovpAnexo.tesRengMovi_Id) and
	comMovpAnexo.RenglonRengMovi = IsNull(@pRenglonRengMovi, comMovpAnexo.RenglonRengMovi)
ORDER BY 2,3

SELECT commovpanexoDetalle.Asiento_id, commovpanexoDetalle.Renglon, 
	conCuentas.Cuenta_id, conCuentas.Descripcion as DescripcionCuenta, 
	conCentro1.Centro1_id, conCentro1.Descripcion as DescripcionCentro1,
	conCentro2.Centro2_id, conCentro2.Descripcion as DescripcionCentro2,
	conBaseDistri.Base_id, conBaseDistri.Descripcion as DescripcionBase,
	commovpanexoDetalle.Importe, comMovpAnexo.RenglonRengMovi
FROM 
	commovpanexoDetalle INNER JOIN comMovpAnexo ON commovpanexoDetalle.Asiento_id =comMovpAnexo.Asiento_id
	INNER JOIN conCuentas ON commovpanexoDetalle.Cuenta_Id = conCuentas.conCuentas
	INNER JOIN conCentro1 ON commovpanexoDetalle.Centro1_Id = conCentro1.conCentro1
	INNER JOIN conCentro2 ON commovpanexoDetalle.Centro2_Id = conCentro2.conCentro2
	left outer join conBaseDistri ON commovpanexoDetalle.Base_id = conBaseDistri.conBaseDistri 
WHERE	
	comMovpAnexo.Asiento_Id = IsNull(@pAsiento_Id,comMovpAnexo.Asiento_Id) and 
	comMovpAnexo.tesRengMovi_Id = IsNull(@pTesMovimientos,comMovpAnexo.tesRengMovi_Id) and
	comMovpAnexo.RenglonRengMovi = IsNull(@pRenglonRengMovi, comMovpAnexo.RenglonRengMovi)
ORDER BY 1,2

EXEC comMovProvAnexoImpDatos @pAsiento_id, @pTesMovimientos, @pRenglonRengMovi

 
RETURN @@Error 

GO

DROP PROCEDURE comMovpAnexoEliminar
GO
CREATE PROCEDURE comMovpAnexoEliminar
(
@pAsiento_Id bigint
)
AS
SET NOCOUNT ON 

DELETE FROM comMovpAnexo 
WHERE (Asiento_Id = @pAsiento_Id)
 
RETURN @@Error 

GO


DROP PROCEDURE comMovpAnexoEliminarTes
GO
CREATE PROCEDURE comMovpAnexoEliminarTes
(
@pTesMovimientos bigint=null,
@pRenglonRengMovi int=null
)
AS
SET NOCOUNT ON 

DELETE FROM comMovpAnexo 
WHERE 
	tesRengMovi_id = @pTesMovimientos and 
	RenglonRengMovi  = @pRenglonRengMovi
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comMovpAnexoCont.sql*/
DROP PROCEDURE comMovpAnexoContGuardar
GO
CREATE PROCEDURE comMovpAnexoContGuardar
(
@pAsiento_Id bigint,
@pconRenglon int,
@pRenglon int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comMovpAnexoCont WHERE (Asiento_Id = @pAsiento_Id) AND (conRenglon = @pconRenglon)))
BEGIN 
	UPDATE comMovpAnexoCont
	SET		Renglon = @pRenglon
	WHERE (Asiento_Id = @pAsiento_Id) AND (conRenglon = @pconRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO comMovpAnexoCont
	(
		Asiento_Id,
		conRenglon,
		Renglon
	)
	VALUES 
	(
		@pAsiento_Id,
		@pconRenglon,
		@pRenglon
	)
END 

GO

DROP PROCEDURE comMovpAnexoContDatos
GO
CREATE PROCEDURE comMovpAnexoContDatos
(
@pAsiento_Id bigint,
@pconRenglon int
)
AS
SET NOCOUNT ON 

SELECT comMovpAnexoCont.Asiento_Id, comMovpAnexoCont.conRenglon, 
	comMovpAnexoCont.Renglon
FROM comMovpAnexoCont 
INNER JOIN conMovCont  ON (conMovCont.conAsientos = comMovpAnexoCont.Asiento_Id) AND (conMovCont.Renglon = comMovpAnexoCont.conRenglon)
INNER JOIN comMovpAnexoDetalle  ON (comMovpAnexoDetalle.Asiento_Id = comMovpAnexoCont.Asiento_Id) AND (comMovpAnexoDetalle.Renglon = comMovpAnexoCont.Renglon)
WHERE (comMovpAnexoCont.Asiento_Id = @pAsiento_Id)
AND (comMovpAnexoCont.conRenglon = @pconRenglon)
 
 RETURN @@Error 

GO

DROP PROCEDURE comMovpAnexoContEliminar
GO
CREATE PROCEDURE comMovpAnexoContEliminar
(
@pAsiento_Id bigint,
@pconRenglon int
)
AS
SET NOCOUNT ON 

DELETE FROM comMovpAnexoCont 
WHERE (Asiento_Id = @pAsiento_Id)
AND (conRenglon = @pconRenglon)
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comMovpAnexoDetalle.sql*/
DROP PROCEDURE comMovpAnexoDetalleGuardar
GO
CREATE PROCEDURE comMovpAnexoDetalleGuardar
(
@pAsiento_Id bigint,
@pRenglon int,
@pImporte qMonedaD2,
@pCuenta_Id varchar(25) = NULL,
@pCentro1_Id varchar(8) = NULL,
@pCentro2_Id varchar(8) = NULL,
@pBase_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comMovpAnexoDetalle WHERE (Asiento_Id = @pAsiento_Id) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE comMovpAnexoDetalle
	SET		Importe = @pImporte,
		Cuenta_Id = dbo.FuncFKconCuentas(@pCuenta_Id),
		Centro1_Id = dbo.FuncFKconCentro1(@pCentro1_Id),
		Centro2_Id = dbo.FuncFKconCentro2(@pCentro2_Id),
		Base_Id = dbo.FuncFKconBaseDistri(@pBase_Id)
	WHERE (Asiento_Id = @pAsiento_Id) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO comMovpAnexoDetalle
	(
		Asiento_Id,
		Renglon,
		Importe,
		Cuenta_Id,
		Centro1_Id,
		Centro2_Id,
		Base_Id
	)
	VALUES 
	(
		@pAsiento_Id,
		@pRenglon,
		@pImporte,
		dbo.FuncFKconCuentas(@pCuenta_Id),
		dbo.FuncFKconCentro1(@pCentro1_Id),
		dbo.FuncFKconCentro2(@pCentro2_Id),
		dbo.FuncFKconBaseDistri(@pBase_Id)
	)
END 

GO

DROP PROCEDURE comMovpAnexoDetalleDatos
GO
CREATE PROCEDURE comMovpAnexoDetalleDatos
(
@pAsiento_Id bigint,
@pRenglon int
)
AS
SET NOCOUNT ON 

SELECT comMovpAnexoDetalle.Asiento_Id, comMovpAnexoDetalle.Renglon, comMovpAnexoDetalle.Importe,
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuentas, conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1,
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, conBaseDistri.Base_Id, conBaseDistri.Descripcion as DescripcionBaseDistri
FROM comMovpAnexoDetalle 
INNER JOIN comMovpAnexo  ON (comMovpAnexo.Asiento_Id = comMovpAnexoDetalle.Asiento_Id)
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = comMovpAnexoDetalle.Cuenta_Id)
LEFT JOIN conCentro1  ON (conCentro1.conCentro1 = comMovpAnexoDetalle.Centro1_Id)
LEFT JOIN conCentro2  ON (conCentro2.conCentro2 = comMovpAnexoDetalle.Centro2_Id)
LEFT JOIN conBaseDistri  ON (conBaseDistri.conBaseDistri = comMovpAnexoDetalle.Base_Id)
WHERE (comMovpAnexoDetalle.Asiento_Id = @pAsiento_Id)
AND (comMovpAnexoDetalle.Renglon = @pRenglon)
 
 RETURN @@Error 

GO

DROP PROCEDURE comMovpAnexoDetalleEliminar
GO
CREATE PROCEDURE comMovpAnexoDetalleEliminar
(
@pAsiento_Id bigint,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comMovpAnexoDetalle 
WHERE (Asiento_Id = @pAsiento_Id)
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comMovPOC.sql*/
DROP PROCEDURE comMovPOCInsertar
GO
CREATE PROCEDURE comMovPOCInsertar
(
@pcomMovProv bigint,
@pcomOrdenComp int,
@pRenglon_OC int,
@pCantidad qCantidadD8,
@pCantidadOriginal qCantidadD8,
@pFactor qCantidadD8, 
@pCambio qMonedaD8
)
AS
BEGIN 
	INSERT INTO comMovPOC
	(
		comMovProv,
		comOrdenComp,
		Renglon_OC,
		Cantidad,
		CantidadOriginal,
		Factor,
		Cambio
	)
	VALUES 
	(
		@pcomMovProv,
		@pcomOrdenComp,
		@pRenglon_OC,
		@pCantidad,
		@pCantidadOriginal,
		@pFactor,
		@pCambio
	)
END 

GO

DROP PROCEDURE comMovPOCDatos
GO
CREATE PROCEDURE comMovPOCDatos
(
@pcomMovProv bigint,
@pcomOrdenComp int,
@pRenglon_OC int=null
)
AS
SET NOCOUNT ON 

SELECT comMovPOC.comMovProv, 
	comMovPOC.comOrdenComp, comMovPOC.Renglon_OC, 
	comOCCuerpo.Cantidad CantidadOC, comOCCuerpo.Cantidad_Recibida, 
	comOCCuerpo.Cantidad_Facturada, comOCCuerpo.Fecha_Entrega,
	comOCCuerpo.Precio, comOCCuerpo.Pendiente, comOCCuerpo.Cantidad_Creditos, 
	ISNULL(comOCArticulo.PrecioOriginal, comOCCuerpo.Precio) AS PrecioOriginal,
	ISNULL(comOCArticulo.CantidadOriginal, comOCCuerpo.Cantidad) AS CantidadOriginalOC,
	comMovPOC.Cantidad, comMovPOC.CantidadOriginal, comMovPOC.Factor,
	stkUniMed.Medida_id, stkUniMed.Descripcion as DescripcionMedida, 
	conCentro1.Centro1_id, conCentro1.Descripcion DescripcionCentro1,
	conCentro2.Centro2_id, conCentro2.Descripcion DescripcionCentro2, 
	stkProductos.Producto_id, ISNULL(stkProductos.Descripcion, comOcMemo.Detalle) as Detalle, 
	commovpoc.Cambio
FROM comMovPOC 
INNER JOIN comMovProv  ON (comMovProv.comMovProv = comMovPOC.comMovProv)
INNER JOIN comOCCuerpo  ON (comOCCuerpo.comOrdenComp = comMovPOC.comOrdenComp) AND (comOCCuerpo.Renglon_OC = comMovPOC.Renglon_OC)
INNER JOIN stkUniMed ON stkUniMed.stkUniMed = comOCCuerpo.Medida_Id
INNER JOIN conCentro1 ON conCentro1.conCentro1 = comOCCuerpo.Centro1_id
INNER JOIN conCentro2 ON conCentro2.conCentro2 = comOCCuerpo.Centro2_id
LEFT OUTER JOIN (comOCArticulo INNER JOIN stkProductos ON
comOCArticulo.Producto_id =stkProductos.stkProductos) ON
comOCArticulo.comOrdenComp = comOCCuerpo.comOrdenComp AND 
comOCArticulo.Renglon_OC = comOCCuerpo.Renglon_OC
LEFT OUTER JOIN comOCMemo ON
comOCMemo.comOrdenComp = comOCCuerpo.comOrdenComp AND 
comOCMemo.Renglon_OC = comOCCuerpo.Renglon_OC
WHERE (comMovPOC.comMovProv = @pcomMovProv)
AND (comMovPOC.comOrdenComp = @pcomOrdenComp)
AND (comMovPOC.Renglon_OC = ISNULL(@pRenglon_OC,comMovPOC.Renglon_OC))
ORDER BY 3 

RETURN @@Error 

GO

DROP PROCEDURE comMovPOCEliminar
GO
CREATE PROCEDURE comMovPOCEliminar
(
@pcomMovProv bigint,
@pcomOrdenComp int,
@pRenglon_OC int
)
AS
SET NOCOUNT ON 

DELETE FROM comMovPOC 
WHERE (comMovProv = @pcomMovProv)
AND (comOrdenComp = @pcomOrdenComp)
AND (Renglon_OC = @pRenglon_OC)
 
 RETURN @@Error 

GO


DROP PROCEDURE comMovPOCDatosPendiente
GO
CREATE PROCEDURE comMovPOCDatosPendiente
(
@pcomOrdenComp int
)
AS
SET NOCOUNT ON 

SELECT comOCCuerpo.comOrdenComp, comOCCuerpo.Renglon_OC, 
	comOCCuerpo.Cantidad CantidadOC, comOCCuerpo.Cantidad_Recibida, 
	comOCCuerpo.Cantidad_Facturada, comOCCuerpo.Fecha_Entrega,
	comOCCuerpo.Precio, comOCCuerpo.Pendiente, comOCCuerpo.Cantidad_Creditos, 
	ISNULL(comOCArticulo.PrecioOriginal, comOCCuerpo.Precio) AS PrecioOriginal,
	ISNULL(comOCArticulo.CantidadOriginal, comOCCuerpo.Cantidad) AS CantidadOriginalOC,
	comOCCuerpo.Cantidad*0 as Cantidad, comOCCuerpo.Cantidad*0 as CantidadOriginal, 
	comOCArticulo.Factor, stkUniMed.Medida_id, stkUniMed.Descripcion as DescripcionMedida, 
	conCentro1.Centro1_id, conCentro1.Descripcion DescripcionCentro1,
	conCentro2.Centro2_id, conCentro2.Descripcion DescripcionCentro2, 
	stkProductos.Producto_id, ISNULL(stkProductos.Descripcion, comOcMemo.Detalle) as Detalle, 
	1.0000 as Cambio
FROM 
comOCCuerpo INNER JOIN stkUniMed ON stkUniMed.stkUniMed = comOCCuerpo.Medida_Id
INNER JOIN conCentro1 ON conCentro1.conCentro1 = comOCCuerpo.Centro1_id
INNER JOIN conCentro2 ON conCentro2.conCentro2 = comOCCuerpo.Centro2_id
LEFT OUTER JOIN (comOCArticulo INNER JOIN stkProductos ON
comOCArticulo.Producto_id =stkProductos.stkProductos) ON
comOCArticulo.comOrdenComp = comOCCuerpo.comOrdenComp AND 
comOCArticulo.Renglon_OC = comOCCuerpo.Renglon_OC
LEFT OUTER JOIN comOCMemo ON
comOCMemo.comOrdenComp = comOCCuerpo.comOrdenComp AND 
comOCMemo.Renglon_OC = comOCCuerpo.Renglon_OC
WHERE (comOCCuerpo.comOrdenComp = @pcomOrdenComp)
ORDER BY 3 

RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comMovProv.sql*/

--comMovProvDatosSinStock 1, 1, 0,0,0,0,' ',' ',' ',' '

DROP PROCEDURE comMovProvGuardar
GO
CREATE PROCEDURE comMovProvGuardar
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20),
@pProveed_Id VarChar(15),
@pTipomov Char(1),
@pTipoCtaProv int,
@pFecha_CCP qFecha,
@pBase_Ganancias qMonedaD2,
@pImportacion Sino,
@pOrigen_Id smallint = NULL,
@pComCondPago_Id varchar(5) = NULL,
@pCondFiscal_Id varchar(5) = NULL,
@pFechaFiscal qFecha = NULL,
@pClaveFiscal varchar(36) = NULL,
@pVieneDeFiscal Sino = NULL,
@pXMLFiscal text,
@pImporte qMonedaD2,
@pSaldo qMonedaD2,
@pTipoCompFE int = Null,
@pFacturaTesoreria bit, 
@pRenglonDtoFin INT=NULL
)
AS


SET NOCOUNT ON 
Declare @pidentity bigint = (select Asiento_Id
 from genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and 
	genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C )

SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comMovProv WHERE (comMovProv = @pidentity)))
BEGIN 
	UPDATE comMovProv
	SET		Proveed_Id = dbo.FuncFkcomProveedores(@pProveed_Id),
		Tipomov = @pTipomov,
		TipoCtaProv = @pTipoCtaProv,
		Fecha_CCP = @pFecha_CCP,
		Base_Ganancias = @pBase_Ganancias,
		Importacion = @pImportacion,
		Origen_Id = dbo.FuncFKcomOrigenesFiscales(@pOrigen_Id),
		ComCondPago_Id = dbo.FuncFKcomConPago(@pComCondPago_Id),
		CondFiscal_Id = dbo.FuncFKcomCondFiscal(@pCondFiscal_Id),
		FechaFiscal = @pFechaFiscal,
		ClaveFiscal = @pClaveFiscal,
		VieneDeFiscal = @pVieneDeFiscal,
		XMLFiscal = @pXMLFiscal,
		Importe = @pImporte,
		Saldo = @pSaldo,
		TipoCompFE = @pTipoCompFE, 
		FacturaTesoreria = @pFacturaTesoreria,
		RenglonDtoFin = @pRenglonDtoFin
	WHERE (comMovProv = @pidentity)
END 
ELSE 
BEGIN 
	INSERT INTO comMovProv
	(
		comMovProv,
		Proveed_Id,
		Tipomov,
		TipoCtaProv,
		Fecha_CCP,
		Base_Ganancias,
		Importacion,
		Origen_Id,
		ComCondPago_Id,
		CondFiscal_Id,
		FechaFiscal,
		ClaveFiscal,
		VieneDeFiscal,
		XMLFiscal,
		Importe,
		Saldo,
		TipoCompFE, 
		FacturaTesoreria, 
		RenglonDtoFin
	)
	VALUES 
	(
		@pidentity,
		dbo.FuncFkcomProveedores(@pProveed_Id),
		@pTipomov,
		@pTipoCtaProv,
		@pFecha_CCP,
		@pBase_Ganancias,
		@pImportacion,
		dbo.FuncFKcomOrigenesFiscales(@pOrigen_Id),
		dbo.FuncFKcomConPago(@pComCondPago_Id),
		dbo.FuncFKcomCondFiscal(@pCondFiscal_Id),
		@pFechaFiscal,
		@pClaveFiscal,
		@pVieneDeFiscal,
		@pXMLFiscal,
		@pImporte,
		@pSaldo,
		@pTipoCompFE, 
		@pFacturaTesoreria, 
		@pRenglonDtoFin
	)
END 

GO


DROP PROCEDURE comMovProvDatos
GO
CREATE PROCEDURE comMovProvDatos (
@pComMovprov bigint
)
AS

SELECT comMovProv.comMovProv, 
	genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C, comMovProv.Tipomov,
	conAsientos.Posteado, conAsientos.Fecha, conAsientos.FechaRegistro, 
	conAsientos.Cambio,conAsientos.CambioMonedaOriginal, 
	conAsientos.Anulado, conAsientos.Observaciones,  disFormularios.Formulario_Id as Formulario,
	genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas,
	comProveedores.Proveed_Id, comProveedores.RazonSocial as DescripcionProveedores,
	comMovProv.TipoCtaProv, comProveedoresTipoPasivo.Descripcion as DescripcionProveedoresTipoPasivo, 
	comMovProv.Fecha_CCP, comMovProv.Base_Ganancias, comMovProv.Importacion, 
	comOrigenesFiscales.Origen_Id, comOrigenesFiscales.Descripcion as DescripcionOrCredFisc, 
	comConPago.CondPago_Id, comConPago.Descripcion as DescripcionConPago, 
	comCondFiscal.CondFiscal_Id,comCondFiscal.Descripcion as DescripcionCondFiscal, 
	comMovProv.FechaFiscal, comMovProv.ClaveFiscal, comMovProv.VieneDeFiscal,
	comMovProv.XMLFiscal, comMovProv.Importe, comMovProv.Saldo, comMovProv.TipoCompFE,
	genTiposCompAfip.Descripcion DescripcionTipoCompFE,
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuenta,
	conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1,
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2,
	conMovCont.TipoMov as TipomovCont, conMovCont.Clase, conMovCont.Importe as ImporteContable, 
	genMovimientos.CantCuotas, 
	(SELECT MIN(genMovCuotas.FechaVencimiento) FROM genMovCuotas where
		genMovCuotas.Asiento_Id = comMovProv.comMovProv) as FechaVencimiento,
	conCuentas.Cuenta_Id as CtaProveedores, conCuentas.Descripcion as DescripcionCtaProveedores, 
	FacturaTesoreria, Cast(0 as bit) Cierre, conAsientos.Fecha as FechaCierre, '' as RFCPrveedor, 
	RenglonDtoFin, ' ' AS ArchivoXML
FROM comMovProv 
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = comMovProv.comMovProv 
INNER JOIN genSegmentos ON genAsiSegmentos.Segmento_Id = genSegmentos.genSegmentos
INNER JOIN conAsientos ON comMovProv.comMovProv  = conAsientos.conAsientos
INNER JOIN disFormularios ON disFormularios.disFormularios = conAsientos.Formulario_Id
INNER JOIN conMovCont ON conMovCont.conAsientos = comMovProv.comMovProv  and conMovCont.Clase in('PRO','ANTPR')
INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.cuenta_Id 
LEFT JOIN conCentro1 ON conCentro1.conCentro1 = conMovCont.Centro1_Id
LEFT JOIN conCentro2 ON conCentro2.conCentro2 = conMovCont.Centro2_Id
INNER JOIN genMovimientos  ON (genMovimientos.Asiento_Id = comMovProv.comMovProv)
INNER JOIN comProveedores  ON (comProveedores.genEntidades = comMovProv.Proveed_Id)
Left JOIN comProveedoresTipoPasivo  ON (comProveedoresTipoPasivo.TipoCtaProv = comMovProv.TipoCtaProv)
INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
LEFT JOIN comOrigenesFiscales  ON (comOrigenesFiscales.comOrigenesFiscales = comMovProv.Origen_Id)
LEFT JOIN comConPago  ON (comConPago.comConPago = comMovProv.ComCondPago_Id)
LEFT JOIN comCondFiscal  ON (comCondFiscal.comCondFiscal = comMovProv.CondFiscal_Id)
Left Join genTiposCompAfip On genTiposCompAfip.Comprobante_Id = comMovProv.TipoCompFE
WHERE (comMovProv = @pComMovprov)

GO



DROP PROCEDURE comMovProvDatosSinStock
GO
CREATE PROCEDURE comMovProvDatosSinStock
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)

)
AS
SET NOCOUNT ON 
Declare @pidentity bigint = (select Asiento_Id
 from genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and 
	genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C )

PRINT @pIdentity

exec comMovprovDatos @pidentity


SELECT comMovDetalle.comMovProv, comMovDetalle.Renglon, comMovDetalle.Detalle,
	comMovDetalle.Importe, 
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuenta,
	conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, 
	conCentro2.Centro2_Id, 	conCentro2.Descripcion as DescripcionCentro2, 
	conBaseDistri.Base_Id, conBaseDistri.Descripcion as DescripcionBaseDistri
FROM comMovDetalle 
INNER JOIN comMovProv  ON (comMovProv.comMovProv = comMovDetalle.comMovProv)
LEFT JOIN conCuentas ON (conCuentas.conCuentas = comMovDetalle.Cuenta_Id)
LEFT JOIN conCentro1  ON (conCentro1.conCentro1 = comMovDetalle.Centro1_Id)
LEFT JOIN conCentro2  ON (conCentro2.conCentro2 = comMovDetalle.Centro2_Id)
LEFT JOIN conBaseDistri  ON (conBaseDistri.conBaseDistri = comMovDetalle.Base_Id)
WHERE (comMovProv.comMovProv = @pidentity)
order by 2


exec comMovImpuestosDatos @pidentity, null
Exec genAtributosGeneralesIdentityDatos @pidentity, 'comMovProv' 
Exec genMovCuotasDatos @pidentity, null

-- AJ MAY 2019 para poder controlar si es del mismo en que rendicion esta
Exec tesRengMovicomMovProvDatosXcomMovProv @pidentity
--Exec genSegmentosConfiguracion @pSegmento_Id, @pEmpresa_Id

RETURN @@Error 
GO

DROP PROCEDURE comMovProvEliminar
GO
CREATE PROCEDURE comMovProvEliminar
(
@pcomMovProv bigint
)
AS
SET NOCOUNT ON 

DELETE FROM comMovProv WHERE (comMovProv = @pcomMovProv)
 
RETURN @@Error 

GO

DROP PROCEDURE [dbo].[comMovProvDatosConStock]
GO

CREATE PROCEDURE [dbo].[comMovProvDatosConStock]
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)

)
AS
SET NOCOUNT ON 
Declare @pIdentity bigint = (select Asiento_Id
 from genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and 
	genAsiSegmentos.Segmento_Id =  dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C )

exec comMovprovDatos @pIdentity


SELECT stkMoviCuerpo.stkMoviCabe, stkMoviCuerpo.Renglon, 0 RenglonReferencia, stkMoviCuerpo.Fecha,
	stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos, stkProductos.Producto_Id, 
	stkProductos.Descripcion as DescripcionProductos,
	stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, stkMoviCuerpo.Factor, stkMoviCuerpo.Cantidad,
	stkMoviCuerpo.CantidadForm, stkMoviCuerpo.CostoUnitario, stkMoviCuerpo.PrecioOriginal,
	stkMedidaAlterna.Medida_Id MedidaAlterna, stkMedidaAlterna.Descripcion DescripcionUnidadAlterna,
	stkMoviCuerpo.CantidadAlternaForm,
	stkMoviCuerpo.Observaciones, stkMoviCuerpo.Descuento, 
	stkMoviCuerpo.conRenglonDebe, 
	conCuentasDebe.Cuenta_Id as CuentaDebe, conCuentasDebe.Descripcion as DescripcionCuentaDebe,
	conCentro1Debe.Centro1_Id as Centro1Debe, conCentro1Debe.Descripcion as DescripcionCentro1Debe,
	conCentro2Debe.Centro2_Id as Centro2Debe, conCentro2Debe.Descripcion as DescripcionCentro2Debe,
	conMovContDebe.Clase as ClaseDebe, conMovContDebe.Importe as ImporteContableDebe, 
	stkMoviCuerpo.conRenglonHaber, 
	conCuentasHaber.Cuenta_Id as CuentaHaber, conCuentasHaber.Descripcion as DescripcionCuentaHaber,
	conCentro1Haber.Centro1_Id as Centro1Haber, conCentro1Haber.Descripcion as DescripcionCentro1Haber,
	conCentro2Haber.Centro2_Id as Centro2Haber, conCentro2Haber.Descripcion as DescripcionCentro2Haber,
	conMovContHaber.Clase as ClaseHaber, conMovContDebe.Importe as ImporteContableHaber, comDespachos.Despacho_Id
FROM stkMoviCuerpo 
INNER JOIN stkMoviCabe ON stkMoviCabe.stkMoviCabe = stkMoviCuerpo.stkMoviCabe
LEFT JOIN stkDepositos ON stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id
LEFT JOIN stkProductos ON stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
LEFT JOIN stkUniMed ON stkUniMed.stkUniMed = stkMoviCuerpo.Medida_Id
INNER JOIN conMovCont ON conMovCont.conAsientos = stkMoviCuerpo.stkMoviCabe AND conMovCont.Renglon = stkMoviCuerpo.conRenglonDebe
INNER JOIN conMovCont conMovCont2 ON conMovCont2.conAsientos = stkMoviCuerpo.stkMoviCabe AND conMovCont2.Renglon = stkMoviCuerpo.conRenglonHaber
INNER JOIN conMovCont as conMovContDebe ON conMovContDebe.conAsientos = stkMoviCuerpo.stkMoviCabe And
	conMovContDebe.Renglon = stkMoviCuerpo.conRenglonDebe
INNER JOIN conCuentas as conCuentasDebe ON conCuentasDebe.conCuentas = conMovContDebe.cuenta_Id 
left JOIN conCentro1 as conCentro1Debe ON conCentro1Debe.conCentro1 = conMovContDebe.Centro1_Id
left JOIN conCentro2  as conCentro2Debe ON conCentro2Debe.conCentro2 = conMovContDebe.Centro2_Id
INNER JOIN conMovCont as conMovContHaber ON conMovContHaber.conAsientos = stkMoviCuerpo.stkMoviCabe And
	conMovContHaber.Renglon = stkMoviCuerpo.conRenglonHaber
INNER JOIN conCuentas as conCuentasHaber ON conCuentasHaber.conCuentas = conMovContHaber.cuenta_Id 
left JOIN conCentro1 as conCentro1Haber ON conCentro1Haber.conCentro1 = conMovContHaber.Centro1_Id
left JOIN conCentro2  as conCentro2Haber ON conCentro2Haber.conCentro2 = conMovContHaber.Centro2_Id
Left Join stkUniMed stkMedidaAlterna On stkMedidaAlterna.stkUniMed = stkMoviCuerpo.MedidaAlterna
Left Join stkMoviDespa On stkMoviDespa.stkMoviCabe = stkMoviCuerpo.stkMoviCabe And stkMoviDespa.Renglon = stkMoviCuerpo.Renglon
Left Join comDespachos On comDespachos.comDespachos = stkMoviDespa.Despacho_Id
WHERE 
	stkMoviCuerpo.stkMoviCabe = @pIdentity
ORDER BY 2


exec comMovImpuestosDatos @pIdentity, null
Exec genAtributosGeneralesIdentityDatos @pIdentity, 'comMovProv' 
Exec genMovCuotasDatos @pIdentity, null
-- Exec genSegmentosConfiguracion @pSegmento_Id, @pEmpresa_Id

Exec stkMoviSerieDatos @pIdentity
Exec stkMoviDespaDatos @pIdentity



-- AJ Abr 19 Se agrega la posibilidad de Ajuste positivo o Negativo

Select commovprov.RenglonDtoFin , conCuentas.Cuenta_Id, 
	conCuentas.Descripcion as DescripcionCuenta, 
	conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, 
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, 
	conMovCont.Importe, conMovCont.ImporteMonedaOriginal, 
	conMovCont.LeyendaLibroMayor as Leyenda
from commovprov inner join conMovCont on 
commovprov.comMovProv = conMovcont.conAsientos and 
commovprov.RenglonDtoFin = conMovcont.Renglon
INNER JOIN conCuentas ON 
conCuentas.conCuentas = conmovCont.Cuenta_Id
LEFT JOIN conCentro1 ON
conCentro1.conCentro1 = conMovcont.Centro1_Id
LEFT JOIN conCentro2 ON 
conCentro2.conCentro2 = conMovcont.Centro2_Id
Where
	comMovProv.comMovProv = @pIdentity

Exec stkMoviUbicacionDatos @pIdentity
RETURN @@Error 

GO




DROP PROCEDURE comMovProvDatosConsulta
GO
CREATE PROCEDURE comMovProvDatosConsulta
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)

)
AS
SET NOCOUNT ON 
Declare @pidentity bigint = (select Asiento_Id
 from genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and 
	genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C )

exec comMovprovDatos @pidentity



SELECT stkMoviCuerpo.stkMoviCabe, stkMoviCuerpo.Renglon, 
	stkProductos.Producto_Id, stkProductos.Descripcion DescripcionProducto, 
	stkMoviCuerpo.Fecha, stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDeposito, 
	stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUnimed, 
	stkMoviCuerpo.Factor, stkMoviCuerpo.Cantidad, stkMoviCuerpo.CantidadForm Cantidad_Original, 
	stkMoviCuerpo.CostoUnitario, 
	stkMoviCuerpo.PrecioOriginal, stkMoviCuerpo.Observaciones, 
	stkMoviCuerpo.Descuento, 
	stkMoviCuerpo.conRenglonDebe, 
	conCuentasDebe.Cuenta_Id as CuentaDebe, conCuentasDebe.Descripcion as DescripcionCuentaDebe,
	conCentro1Debe.Centro1_Id as Centro1Debe, conCentro1Debe.Descripcion as DescripcionCentro1Debe,
	conCentro2Debe.Centro2_Id as Centro2Debe, conCentro2Debe.Descripcion as DescripcionCentro2Debe,
	conMovContDebe.Clase as ClaseDebe, conMovContDebe.Importe as ImporteContableDebe, 
	conCuentasHaber.Cuenta_Id as CuentaHaber, conCuentasHaber.Descripcion as DescripcionCuentaHaber,
	stkMoviCuerpo.conRenglonHaber	,
	conCentro1Haber.Centro1_Id as Centro1Haber, conCentro1Haber.Descripcion as DescripcionCentro1Haber,
	conCentro2Haber.Centro2_Id as Centro2Haber, conCentro2Haber.Descripcion as DescripcionCentro2Haber,
	conMovContHaber.Clase as ClaseHaber, conMovContDebe.Importe as ImporteContableHaber
FROM stkMoviCuerpo INNER JOIN stkProductos ON
	stkMoviCuerpo.Producto_Id = stkProductos.stkProductos
	INNER JOIN stkUniMed ON
	stkMoviCuerpo.Medida_Id = stkUniMed.stkUniMed
	INNER JOIN stkDepositos ON
	stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id
	INNER JOIN conMovCont as conMovContDebe ON
	conMovContDebe.conAsientos = stkMoviCuerpo.stkMoviCabe And
	conMovContDebe.Renglon = stkMoviCuerpo.conRenglonDebe
	INNER JOIN conCuentas as conCuentasDebe ON 
	conCuentasDebe.conCuentas = conMovContDebe.cuenta_Id 
	INNER JOIN conCentro1 as conCentro1Debe ON 
	conCentro1Debe.conCentro1 = conMovContDebe.Centro1_Id
	INNER JOIN conCentro2  as conCentro2Debe ON 
	conCentro2Debe.conCentro2 = conMovContDebe.Centro2_Id
	INNER JOIN conMovCont as conMovContHaber ON
	conMovContHaber.conAsientos = stkMoviCuerpo.stkMoviCabe And
	conMovContHaber.Renglon = stkMoviCuerpo.conRenglonHaber
	INNER JOIN conCuentas as conCuentasHaber ON 
	conCuentasHaber.conCuentas = conMovContHaber.cuenta_Id 
	INNER JOIN conCentro1 as conCentro1Haber ON 
	conCentro1Haber.conCentro1 = conMovContHaber.Centro1_Id
	INNER JOIN conCentro2  as conCentro2Haber ON 
	conCentro2Haber.conCentro2 = conMovContHaber.Centro2_Id
Where 
	stkMoviCuerpo.stkMoviCabe = @pidentity
UNION ALL
SELECT comMovDetalle.comMovProv, comMovDetalle.Renglon, 
	null as Producto_Id , comMovDetalle.Detalle DescripcionProducto, 
	NULL AS Fecha, Null AS Deposito_Id, Null AS DescripcionDeposito,
	Null AS Medida_Id, Null AS DescripcionUniMed,
	1 AS Factor, 1 AS Cantidad, 1 AS Cantidad_Original,
	comMovDetalle.Importe AS Costo_Unitario,
	comMovDetalle.Importe AS PrecioOriginal, null AS Observaciones, 
	0 as Descuento,
	NULL RenglonDebe,
	case when comMovTipos.Signo=-1 THEN  conCuentas.Cuenta_Id ELSE NULL END  CuentaDebe, 
	case when comMovTipos.Signo=-1 THEN  conCuentas.Descripcion ELSE NULL END  DescripcionCuentaDebe,
	case when comMovTipos.Signo=-1 THEN  conCentro1.Centro1_Id ELSE NULL END Centro1Debe, 
	case when comMovTipos.Signo=-1 THEN  conCentro1.Descripcion ELSE NULL END  DescripcionCentro1Debe,
	case when comMovTipos.Signo=-1 THEN  conCentro2.Centro2_Id ELSE NULL END  Centro2Debe, 
	case when comMovTipos.Signo=-1 THEN  conCentro2.Descripcion ELSE NULL END DescripcionCentro2Debe,
	NULL ClaseDebe, 
	NULL as ImporteContableDebe,
	NULL as RenglonHaber,
	case when comMovTipos.Signo=1 THEN  conCuentas.Cuenta_Id ELSE NULL END  CuentaHaber, 
	case when comMovTipos.Signo=1 THEN  conCuentas.Descripcion ELSE NULL END  DescripcionCuentaHaber,
	case when comMovTipos.Signo=1 THEN  conCentro1.Centro1_Id ELSE NULL END Centro1Haber, 
	case when comMovTipos.Signo=1 THEN  conCentro1.Descripcion ELSE NULL END  DescripcionCentro1Haber,
	case when comMovTipos.Signo=1 THEN  conCentro2.Centro2_Id ELSE NULL END  Centro2Haber, 
	case when comMovTipos.Signo=1 THEN  conCentro2.Descripcion ELSE NULL END DescripcionCentro2Haber,
	NULL as  ClaseHaber, 
	NULL as ImporteContableHaber
FROM comMovDetalle INNER JOIN comMovprov ON
comMovprov.comMovprov = comMovDetalle.comMovProv
INNER JOIN comMovTipos ON
comMovTipos.TipoMov = comMovprov.Tipomov
INNER JOIN conCuentas ON 
conCuentas.conCuentas = comMovDetalle.Cuenta_Id 
left JOIN conCentro1 ON 
conCentro1.conCentro1 = comMovDetalle.Centro1_Id
left JOIN conCentro2 ON 
conCentro2.conCentro2 = comMovDetalle.Centro2_Id
Where 
	comMovDetalle.comMovProv = @pidentity
	
ORDER BY 2


exec comMovImpuestosDatos @pidentity, null
Exec genAtributosGeneralesIdentityDatos @pidentity, 'comMovProv' 
Exec genMovCuotasDatos @pidentity, null


RETURN @@Error 

GO

DROP Procedure comMovProvxClaveFiscal
GO
Create Procedure comMovProvxClaveFiscal(
	@ClaveFiscal VarChar(36),
	@Empresa_Id iNT
)
AS

Select dbo.Segmento( genAsiSegmentos.Segmento_Id,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as Comprobante, 
	comProveedores.Proveed_Id, comProveedores.RazonSocial, 
	conAsientos.Fecha, comMovProv.ClaveFiscal
from comMovProv 
	INNER JOIN conAsientos ON conAsientos.conAsientos = comMovProv.comMovProv
	INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id= conAsientos.conAsientos
	INNER JOIN comProveedores ON comProveedores.genEntidades = comMovProv.Proveed_Id
Where
	comMovProv.ClaveFiscal = @ClaveFiscal AND 
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id= @Empresa_Id
GO
	



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comMovProvAdjuntarXML.sql*/
drop procedure comMovProvAdjuntarXML
go
create procedure comMovProvAdjuntarXML
(
@pcomMovProv bigint,
@pXml text,
@pClaveFiscal varchar(36)
)
as
update comMovProv set XMLFiscal=@pXml, ClaveFiscal=@pClaveFiscal where comMovProv.comMovProv=@pcomMovProv
go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comMovProvAnexoImp.sql*/
DROP PROCEDURE comMovProvAnexoImpInsertar
GO
CREATE PROCEDURE comMovProvAnexoImpInsertar
(
@pAsiento_Id bigint,
@pconRenglon int,
@pImpuesto_Id varchar(5),
@pPorcentaje qPorcentaje,
@pBase_Imponible qMonedaD2,
@pImporte_Impuesto qMonedaD2
)
AS
BEGIN 
	INSERT INTO comMovProvAnexoImp
	(
		Asiento_Id,
		conRenglon,
		Impuesto_Id,
		Porcentaje,
		Base_Imponible,
		Importe_Impuesto
	)
	VALUES 
	(
		@pAsiento_Id,
		@pconRenglon,
		dbo.FuncFKcomImpuestos(@pImpuesto_Id),
		@pPorcentaje,
		@pBase_Imponible,
		@pImporte_Impuesto
	)
END 

GO

DROP PROCEDURE comMovProvAnexoImpDatos
GO
CREATE PROCEDURE comMovProvAnexoImpDatos
(
@pAsiento_Id bigint=null,
@ptesMovimientos bigint=null,
@pconRenglon int=null
)
AS
SET NOCOUNT ON 

SELECT comMovProvAnexoImp.Asiento_Id, comMovpAnexo.tesRengMovi_Id as tesMovimientos , comMovProvAnexoImp.conRenglon, 
	comImpuestos.Impuesto_Id, comImpuestos.Descripcion as DescripcionImpuestos, comMovProvAnexoImp.Porcentaje,
	comMovProvAnexoImp.Base_Imponible, comMovProvAnexoImp.Importe_Impuesto, 
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuenta, 
	conCentro1.Centro1_id, conCentro1.Descripcion as DescripcionCentro1,
	conCentro2.Centro2_id, conCentro2.Descripcion as DescripcionCentro2
FROM comMovProvAnexoImp 
INNER JOIN comMovpAnexo  ON (comMovpAnexo.Asiento_Id = comMovProvAnexoImp.Asiento_Id)
INNER JOIN conMovCont  ON (conMovCont.conAsientos = comMovProvAnexoImp.Asiento_Id) AND (conMovCont.Renglon = comMovProvAnexoImp.conRenglon)
INNER JOIN comImpuestos  ON (comImpuestos.comImpuestos = comMovProvAnexoImp.Impuesto_Id)
LEFT OUTER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_id
LEFT OUTER JOIN conCentro1 ON conCentro1.conCentro1 = conMovCont.Centro1_id
LEFT OUTER JOIN conCentro2 ON conCentro2.conCentro2 = conMovCont.Centro2_id
WHERE 
comMovpAnexo.Asiento_Id = ISNULL(@pAsiento_Id, comMovpAnexo.Asiento_Id) and 
comMovpAnexo.RenglonRengMovi = ISNULL(@pconRenglon, comMovpAnexo.RenglonRengMovi) and
comMovpAnexo.tesRengMovi_id = ISNULL(@pTesMovimientos, comMovpAnexo.tesRengMovi_id)

 
RETURN @@Error 

GO

DROP PROCEDURE comMovProvAnexoImpEliminar
GO
CREATE PROCEDURE comMovProvAnexoImpEliminar
(
@pAsiento_Id bigint,
@pconRenglon int=NULL
)
AS
SET NOCOUNT ON 


DELETE FROM comMovProvAnexoImp  WHERE 
(comMovProvAnexoImp.Asiento_Id = @pAsiento_Id) AND 
(comMovProvAnexoImp.conRenglon = IsNull(@pconRenglon,comMovProvAnexoImp.conRenglon))
 
RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comMovProvDatosPorDifPrecio.sql*/
--comMovProvDatosPorDifPrecio 1, 'PROV', 0,0,0,0,' ',' ',' ',' '

DROP PROCEDURE comMovProvDatosPorDifPrecio
GO

CREATE PROCEDURE comMovProvDatosPorDifPrecio
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)

)
AS
SET NOCOUNT ON 
Declare @pidentity bigint = (select Asiento_Id
 from genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and 
	genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C )

exec comMovprovDatos @pidentity


SELECT comMovProvDPreFactDir.comMovProv, comMovProvDPreFactDir.Renglon, 
	comMovProvDPreFactDir.RenglonStk as RenglonOrig,
	genSegmentos.Segmento_Id, 
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, 
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, 
	dbo.Segmento(genAsiSegmentos.Segmento_Id, 
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, 
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoStr ,
	comMovProvDPreFactDir.CantidadOriginal as CantidadForm, comMovProvDPreFactDir.Cantidad, 
	comMovProvDPreFactDir.Descuento, comMovProvDPreFactDir.Monto, 
	comMovProvDPreFactDir.Monto *comMovProvDPreFactDir.CantidadOriginal as Total, 
	0 as ComordenComp, comMovProvDPreFactDir.stkMoviCabe as MovimientoOrig, 
	stkProductos.Producto_Id, stkProductos.Descripcion, 
	stkMoviCuerpo.CantidadForm as CantidadOriginal, stkUniMed.Medida_Id, 
	stkMoviCuerpo.Factor, stkMoviCuerpo.PrecioOriginal 
FROM comMovProvDPreFactDir INNER JOIN genAsiSegmentos ON
genAsiSegmentos.Asiento_Id = comMovProvDPreFactDir.stkMoviCabe
INNER JOIN genSegmentos ON
genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
INNER JOIN stkMoviCuerpo ON 
stkMoviCuerpo.stkMoviCabe = comMovProvDPreFactDir.stkMoviCabe AND 
stkMoviCuerpo.Renglon = comMovProvDPreFactDir.RenglonStk
INNER JOIN stkProductos ON
stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
INNER JOIN stkUniMed ON
stkUniMed.stkUniMed = stkMoviCuerpo.Medida_Id
Where 
	comMovProvDPreFactDir.comMovProv = @pidentity

UNION ALL
SELECT comMovProvDPreOC.comMovProv, comMovProvDPreOC.Renglon, 
	comMovProvDPreOC.Renglon_OC,
	genSegmentos.Segmento_Id, 
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, 
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, 
	dbo.Segmento(genAsiSegmentos.Segmento_Id, 
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, 
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoStr ,
	comMovProvDPreOC.CantidadOriginal as CantidadForm, comMovProvDPreOC.Cantidad, 
	comMovProvDPreOC.Descuento, comMovProvDPreOC.Monto, 
	comMovProvDPreOC.Monto *comMovProvDPreOC.CantidadOriginal as Total, 
	comMovProvDPreOC.comOrdenComp, comMovProvDPreOC.comMovProvFactOrig as MovimientoOrig, 
	stkProductos.Producto_Id, stkProductos.Descripcion, 
	comMovPOC.Cantidad , stkUniMed.Medida_Id, 
	comMovpOC.Factor, comOCArticulo.PrecioOriginal

FROM comMovProvDPreOC INNER JOIN genAsiSegmentos ON
genAsiSegmentos.Asiento_Id = comMovProvDPreOC.comMovProvFactOrig
INNER JOIN genSegmentos ON
genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
INNER JOIN comOCArticulo ON
comOCArticulo.comOrdenComp = comMovProvDPreOC.comOrdenComp and 
comOCArticulo.Renglon_OC =comMovProvDPreOC.Renglon_OC
INNER JOIN comOCCuerpo ON
comOCCuerpo.comOrdenComp = comMovProvDPreOC.comOrdenComp and 
comOCCuerpo.Renglon_OC =comMovProvDPreOC.Renglon_OC
INNER JOIN comMovpOC ON 
comMovpOC.comMovProv = comMovProvDPreOC.comMovProvFactOrig AND 
comMovpOC.comOrdenComp = comMovProvDPreOC.comOrdenComp AND 
comMovpOC.Renglon_OC = comMovProvDPreOC.Renglon_OC

INNER JOIN stkProductos ON
stkProductos.stkProductos = comOCArticulo.Producto_Id
INNER JOIN stkUniMed ON
stkUniMed.stkUniMed = comOCCuerpo.Medida_Id
Where 
	comMovProvDPreOC.comMovProv = @pidentity
ORDER BY 2


exec comMovImpuestosDatos @pidentity, null
Exec genAtributosGeneralesIdentityDatos @pidentity, 'comMovProv' 
Exec genMovCuotasDatos @pidentity, null


RETURN @@Error 

GO

DROP PROCEDURE comMovprovFactDifPrecRengDatos 
GO
CREATE PROCEDURE comMovprovFactDifPrecRengDatos 
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20),
@pProducto_Id VarChar(25)
)
AS


SELECT  
	stkMoviCuerpo.Renglon as RenglonOrig,
	genSegmentos.Segmento_Id, 
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, 
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, 
	dbo.Segmento(genAsiSegmentos.Segmento_Id, 
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, 
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoStr ,
	0 as ComordenComp, genAsiSegmentos.Asiento_Id as MovimientoOrig, 
	stkProductos.Producto_Id, stkProductos.Descripcion, 
	stkMoviCuerpo.CantidadForm as CantidadOriginal, stkUniMed.Medida_Id, 
	stkMoviCuerpo.Factor, stkMoviCuerpo.PrecioOriginal
FROM genAsiSegmentos INNER JOIN genSegmentos ON
genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
INNER JOIN stkMoviCuerpo ON 
stkMoviCuerpo.stkMoviCabe = genAsiSegmentos.Asiento_Id
INNER JOIN stkProductos ON
stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
INNER JOIN stkUniMed ON
stkUniMed.stkUniMed = stkMoviCuerpo.Medida_Id
Where 
	genSegmentos.Segmento_Id = @pSegmento_Id and 
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and
	genAsiSegmentos.Segmento2C = @pSegmento2C and
	genAsiSegmentos.Segmento3C = @pSegmento3C and
	genAsiSegmentos.Segmento4C = @pSegmento4C and
	genAsiSegmentos.Segmento1N = @pSegmento1N and
	genAsiSegmentos.Segmento2N = @pSegmento2N and
	genAsiSegmentos.Segmento3N = @pSegmento3N and
	genAsiSegmentos.Segmento4N = @pSegmento4N and
	stkProductos.Producto_Id = @pProducto_Id


UNION ALL
SELECT comMovPOC.Renglon_OC,
	genSegmentos.Segmento_Id, 
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, 
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, 
	dbo.Segmento(genAsiSegmentos.Segmento_Id, 
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, 
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoStr ,
	comMovPOC.comOrdenComp, comMovPOC.comMovProv as MovimientoOrig, 
	stkProductos.Producto_Id, stkProductos.Descripcion, 
	comMovPOC.Cantidad , stkUniMed.Medida_Id, 
	comMovpOC.Factor, comOCArticulo.PrecioOriginal

FROM genAsiSegmentos INNER JOIN genSegmentos ON
genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
INNER JOIN comMovpOC ON 
comMovpOC.comMovProv = genAsiSegmentos.Asiento_Id 
INNER JOIN comOCArticulo ON
comMovpOC.comOrdenComp = comOCArticulo.comOrdenComp AND 
comMovpOC.Renglon_OC = comOCArticulo.Renglon_OC
INNER JOIN comOCCuerpo ON
comOCCuerpo.comOrdenComp = comOCArticulo.comOrdenComp and 
comOCCuerpo.Renglon_OC =comOCArticulo.Renglon_OC
INNER JOIN stkProductos ON
stkProductos.stkProductos = comOCArticulo.Producto_Id
INNER JOIN stkUniMed ON
stkUniMed.stkUniMed = comOCCuerpo.Medida_Id
Where 
	genSegmentos.Segmento_Id = @pSegmento_Id and 
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and
	genAsiSegmentos.Segmento2C = @pSegmento2C and
	genAsiSegmentos.Segmento3C = @pSegmento3C and
	genAsiSegmentos.Segmento4C = @pSegmento4C and
	genAsiSegmentos.Segmento1N = @pSegmento1N and
	genAsiSegmentos.Segmento2N = @pSegmento2N and
	genAsiSegmentos.Segmento3N = @pSegmento3N and
	genAsiSegmentos.Segmento4N = @pSegmento4N and
	stkProductos.Producto_Id = @pProducto_Id

GO





Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comMovProvDPreFactDir.sql*/
DROP PROCEDURE comMovProvDPreFactDirInsertar
GO
CREATE PROCEDURE comMovProvDPreFactDirInsertar
(
@pcomMovProv bigint,
@pRenglon int,
@pstkMoviCabe bigint ,
@pRenglonStk int ,
@pCantidadOriginal qCantidadD8,
@pCantidad qCantidadD8,
@pDescuento qPorcentaje,
@pMonto qMonedaD8
)
AS
SET NOCOUNT ON 
	INSERT INTO comMovProvDPreFactDir
	(
		comMovProv,
		Renglon,
		stkMoviCabe,
		RenglonStk,
		CantidadOriginal,
		Cantidad,
		Descuento,
		Monto
	)
	VALUES 
	(
		@pcomMovProv,
		@pRenglon,
		@pstkMoviCabe,
		@pRenglonStk,
		@pCantidadOriginal,
		@pCantidad,
		@pDescuento,
		@pMonto
	)
GO

DROP PROCEDURE comMovProvDPreFactDirDatos
GO
CREATE PROCEDURE comMovProvDPreFactDirDatos
(
@pcomMovProv bigint,
@pRenglon int
)
AS
SET NOCOUNT ON 

SELECT comMovProvDPreFactDir.comMovProv, comMovProvDPreFactDir.Renglon, comMovProvDPreFactDir.stkMoviCabe,
	comMovProvDPreFactDir.RenglonStk, comMovProvDPreFactDir.CantidadOriginal, comMovProvDPreFactDir.Cantidad, comMovProvDPreFactDir.Descuento,
	comMovProvDPreFactDir.Monto
FROM comMovProvDPreFactDir 
WHERE (comMovProvDPreFactDir.comMovProv = @pcomMovProv)
AND (Renglon = @pRenglon)
 
 RETURN @@Error 

GO

DROP PROCEDURE comMovProvDPreFactDirEliminar
GO
CREATE PROCEDURE comMovProvDPreFactDirEliminar
(
@pcomMovProv bigint,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comMovProvDPreFactDir 
WHERE (comMovProv = @pcomMovProv)
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comMovProvDPreOC.sql*/
DROP PROCEDURE comMovProvDPreOCInsertar
GO
CREATE PROCEDURE comMovProvDPreOCInsertar
(
@pcomMovProv bigint,
@pRenglon int,
@pcomMovProvFactOrig bigint ,
@pcomOrdenComp int ,
@pRenglon_OC int ,
@pCantidadOriginal qCantidadD8,
@pCantidad qCantidadD8,
@pDescuento qPorcentaje,
@pMonto qMonedaD8
)
AS
SET NOCOUNT ON 
	INSERT INTO comMovProvDPreOC
	(
		comMovProv,
		Renglon,
		comMovProvFactOrig,
		comOrdenComp,
		Renglon_OC,
		CantidadOriginal,
		Cantidad,
		Descuento,
		Monto
	)
	VALUES 
	(
		@pcomMovProv,
		@pRenglon,
		@pcomMovProvFactOrig,
		@pcomOrdenComp,
		@pRenglon_OC,
		@pCantidadOriginal,
		@pCantidad,
		@pDescuento,
		@pMonto
	)

GO

DROP PROCEDURE comMovProvDPreOCDatos
GO
CREATE PROCEDURE comMovProvDPreOCDatos
(
@pcomMovProv bigint,
@pRenglon int
)
AS
SET NOCOUNT ON 

SELECT comMovProvDPreOC.comMovProv, comMovProvDPreOC.Renglon, comMovProvDPreOC.comMovProvFactOrig, comMovProvDPreOC.comOrdenComp,
	comMovProvDPreOC.Renglon_OC, comMovProvDPreOC.CantidadOriginal, comMovProvDPreOC.Cantidad, comMovProvDPreOC.Descuento,
	comMovProvDPreOC.Monto
FROM comMovProvDPreOC 
WHERE (comMovProv = @pcomMovProv)
AND (Renglon = @pRenglon)
 
 RETURN @@Error 

GO

DROP PROCEDURE comMovProvDPreOCEliminar
GO
CREATE PROCEDURE comMovProvDPreOCEliminar
(
@pcomMovProv bigint = NULL,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comMovProvDPreOC 
WHERE (comMovProv = ISNULL(@pcomMovProv, comMovProv))
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comMovProvEmb.sql*/
DROP PROCEDURE comMovProvEmbInsertar
GO
CREATE PROCEDURE comMovProvEmbInsertar
(
@pcomEmbarques bigint,
@pcomMovProv bigint
)
AS
	INSERT INTO comMovProvEmb
	(
		comEmbarques,
		comMovProv
	)
	VALUES 
	(
		@pcomEmbarques,
		@pcomMovProv
	)

GO

DROP PROCEDURE comMovProvEmbDatos
GO
CREATE PROCEDURE comMovProvEmbDatos
(
@pcomMovProv bigint,
@pcomEmbarques bigint=NULL
)
AS
SET NOCOUNT ON 

SELECT comMovProvEmb.comMovProv, comEmbarques
FROM comMovProvEmb 
WHERE (comMovProv = @pcomMovProv)
 
RETURN @@Error 

GO

DROP PROCEDURE comMovProvEmbEliminar
GO
CREATE PROCEDURE comMovProvEmbEliminar
(
@pcomMovProv bigint,
@pcomEmbarques bigint=NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comMovProvEmb 
WHERE (comMovProv = @pcomMovProv)
 
RETURN @@Error

GO
drop procedure comMovProvEmbDatosFull
go
create procedure comMovProvEmbDatosFull
(
@pcomMovProv bigint
)
as
set nocount on
select conAsientos.conAsientos, genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,
genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, genAsiSegmentos.Segmento1C, 
genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, dbo.Segmento(genAsiSegmentos.Segmento_Id,
genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, 
genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) AS SegmentoSTR
from conAsientos
inner join genAsiSegmentos on genAsiSegmentos.Asiento_Id=conAsientos.conAsientos
inner join genSegmentos on genSegmentos.genSegmentos=genAsiSegmentos.Segmento_Id
where conAsientos.conAsientos=@pcomMovProv
go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comMovProvRemiPendDatos.sql*/

-- comMovProvRemiPendDatos 1,'STOCK',0,0,0,0,' ',' ',' ',' ','C008'
 --- exec comMovProvRemiPendDatosRemi 20632

DROP PROCEDURE comMovProvRemiPendDatos
GO
CREATE PROCEDURE comMovProvRemiPendDatos
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20),
@pProveed_Id VarChar(15)
)
AS
SET NOCOUNT ON 
Declare @pidentity bigint = (select Asiento_Id
 from genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and 
	genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C )

PRINT @pIdentity

exec comMovprovDatos @pidentity

-- Cuerpo
SELECT comRemiPendFact.Renglon, comRemiPendFact.RenglonCuerpo, comRemiPendFact.CantidadFacturado,
	stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProducto, 
	comRemiPendFact.CantidadOriginalFact, comRemiPendFact.PrecioFacturado,
	stkMoviCuerpo.PrecioOriginal, stkUniMed.Medida_Id, stkMoviCuerpo.Cantidad, 
	stkMoviCuerpo.Factor, stkMoviCuerpo.CantidadForm as CantidadOriginal,
	dbo.Segmento(genAsiSegmentos.Segmento_Id,  
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoStr, 
	stkMoviCuerpo.stkMoviCabe
from comRemiPendFact inner join stkMoviCuerpo ON
	comRemiPendFact.stkMoviCabe = stkMoviCuerpo.stkMoviCabe and 
	comRemiPendFact.Renglon = stkMoviCuerpo.Renglon
	inner join stkProductos ON
	stkProductos.stkProductos = stkMoviCuerpo.Producto_Id 
	INNER JOIN stkUniMed ON
	stkUniMed.stkUniMed = stkMoviCuerpo.Medida_Id
	inner join genAsiSegmentos ON
	genAsiSegmentos.Asiento_Id = comRemiPendFact.stkMoviCabe
	left JOIN conCuentas ON 
	conCuentas.conCuentas = stkProductos.CtaCompra
Where
	comRemiPendFact.comMovprov = @pidentity


exec comMovImpuestosDatos @pidentity, null
Exec genAtributosGeneralesIdentityDatos @pidentity, 'comMovProv' 
Exec genMovCuotasDatos @pidentity, null

-- esta es para agregar el segmento del remito
SELECT stkmoviprov.FechaRemito,  
	dbo.Segmento(genAsiSegmentos.Segmento_Id,  
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoStr,
	stkmoviprov.RemitoProv,genAsiSegmentos.Asiento_Id as stkMoviCabe,
	Cast(0 as Bit) as Marca, 
	Convert(Numeric(18,2),SUM(stkMoviCuerpo.CostoUnitario * stkRemiPendFactPro.CantidadPendiente)) as Monto
from genSegmentos INNER JOIN genAsiSegmentos ON
	genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	INNER JOIN stkRemiPendFactPro ON
	stkRemiPendFactPro.stkMoviCabe = genAsiSegmentos.Asiento_Id  
	inner join stkmoviprov ON
	stkmoviprov.stkMoviCabe =stkRemiPendFactPro.stkMoviCabe
	INNER JOIN comProveedores ON
	comProveedores.genEntidades =stkmoviprov.Proveed_Id
	INNER JOIN conAsientos on
	conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
	INNER JOIN stkMoviCuerpo ON
	stkMoviCuerpo.stkMoviCabe = stkRemiPendFactPro.stkMoviCabe AND
	stkMoviCuerpo.Renglon =stkRemiPendFactPro.Renglon
Where 
	@pidentity IS NULL AND 
	stkRemiPendFactPro.CantidadPendiente > 0 and 
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and
	conAsientos.Anulado = 0 and 
	comProveedores.Proveed_Id = @pProveed_Id

GROUP BY genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N, genAsiSegmentos.Asiento_Id,
	genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, 
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, 
	genAsiSegmentos.Segmento4C,  stkmoviprov.FechaRemito,genAsiSegmentos.Segmento_Id, stkmoviprov.RemitoProv
UNION ALL
-- ya existe
SELECT stkmoviprov.FechaRemito,  
	dbo.Segmento(genAsiSegmentos.Segmento_Id,  
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoStr,
	stkmoviprov.RemitoProv, genAsiSegmentos.Asiento_Id as stkMoviCabe,
	Cast(1 as Bit) as Marca, 
	Convert(Numeric(18,2),SUM(comRemiPendFact.CantidadOriginalFact * comRemiPendFact.CantidadFacturado)) as Monto
from genSegmentos INNER JOIN genAsiSegmentos ON
	genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	INNER JOIN comRemiPendFact ON
	comRemiPendFact.stkMoviCabe = genAsiSegmentos.Asiento_Id  
	inner join comMovprov ON
	comMovprov.comMovProv = comRemiPendFact.comMovProv
	INNER JOIN comProveedores ON
	comProveedores.genEntidades =comMovprov.Proveed_Id
	inner join stkMoviProv ON
	stkMoviProv.stkMoviCabe = comRemiPendFact.stkMoviCabe
	INNER JOIN conAsientos on
	conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
Where 
	commovprov.comMovProv = @pidentity and
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and
	conAsientos.Anulado = 0 and 
	comProveedores.Proveed_Id = @pProveed_Id
GROUP BY genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N, 
	genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, 
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, 
	genAsiSegmentos.Segmento4C,  stkmoviprov.FechaRemito, genAsiSegmentos.Segmento_Id, stkmoviprov.RemitoProv, 
	genAsiSegmentos.Asiento_Id 
order by 1,2

GO
DROP PROCEDURE comMovProvRemiPendDatosRemi
GO
CREATE PROCEDURE comMovProvRemiPendDatosRemi(
	@pStkMoviCabe bigint
)
as

-- Cuerpo
SELECT stkRemiPendFactPro.Renglon, 
	stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProducto, 
	Convert(Numeric(19,8),stkRemiPendFactPro.CantidadPendiente /stkMoviCuerpo.Factor) as CantidadOriginal,
	stkMoviCuerpo.PrecioOriginal, stkUniMed.Medida_Id, stkRemiPendFactPro.CantidadPendiente as Cantidad , 
	stkMoviCuerpo.Factor, 
	dbo.Segmento(genAsiSegmentos.Segmento_Id,  
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoStr, 
	stkMoviCuerpo.stkMoviCabe
from stkRemiPendFactPro inner join stkMoviCuerpo ON
	stkRemiPendFactPro.stkMoviCabe = stkMoviCuerpo.stkMoviCabe and 
	stkRemiPendFactPro.Renglon =stkMoviCuerpo.Renglon
	inner join stkProductos ON
	stkProductos.stkProductos = stkMoviCuerpo.Producto_Id 
	INNER JOIN stkUniMed ON
	stkUniMed.stkUniMed = stkMoviCuerpo.Medida_Id
	inner join genAsiSegmentos ON
	genAsiSegmentos.Asiento_Id = stkRemiPendFactPro.stkMoviCabe
	inner join conAsientos ON
	conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
	left JOIN conCuentas ON 
	conCuentas.conCuentas = stkProductos.CtaCompra
Where
	conAsientos.Anulado = 0 and 
	stkRemiPendFactPro.stkMoviCabe = @pStkMoviCabe 

order by 1

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comMovProvXml.sql*/
-- comMovProvXmlDatos ' ', 'zzzz', '20200201','20200229', 'H',1
-- comMovprovXmlBuscarDatos ' ', 'zzzz', '20200201','20200229',1
drop procedure comMovProvXmlDatos
go
create procedure comMovProvXmlDatos
(
@pProveedorDesde varchar(16),
@pProveedorHasta varchar(15),
@pFechaDesde datetime,
@pFechaHasta datetime,
@pPendiende char,
@Empresa_Id int
)
as
select @pProveedorDesde as ProveedorDesde, @pProveedorHasta as ProveedorHasta,  @pFechaDesde as FechaDesde, @pFechaHasta as FechaHasta,
@pPendiende as Pendiente, '' as Upload, '' as lupXml

select comMovProv.comMovProv, XMLFiscal, Cuit, 
	cast(CASE WHEN ClaveFiscal is null or ClaveFiscal='' THEN 0 ELSE 1 END as bit) as Marca, 
		ClaveFiscal as UUID, 
		comProveedores.Proveed_Id , 
		dbo.Segmento(genAsiSegmentos.Segmento_Id, 
		genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C,
		genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N,
		genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Pago, 
		conAsientos.Fecha, comProveedores.RazonSocial, 
			comMovprov.Importe, genMonedas.Moneda_Id 
From comMovProv 
INNER JOIN genEntidades on genEntidades.genEntidades=comMovProv.Proveed_Id
INNER JOIN comProveedores on comProveedores.genEntidades=comMovProv.Proveed_Id 
INNER JOIN conAsientos ON conAsientos.conAsientos =comMovProv.comMovProv 
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = comMovProv.comMovProv 
INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
Where 
conAsientos.Anulado = 0 and
conAsientos.Posteado = 1 and
conAsientos.Empresa_Id = @Empresa_Id and 
comMovProv.TipoMov='P' and 
comMovProv.VieneDeFiscal=1 and 
comProveedores.Proveed_Id BETWEEN @pProveedorDesde and @pProveedorHasta and
conAsientos.Fecha BETWEEN @pFechaDesde  and @pFechaHasta and 
(@pPendiende='H' or ClaveFiscal is null or ClaveFiscal='')
go

drop procedure comMovProvXmlGuardar
go
create procedure comMovProvXmlGuardar
(
@pcomMovProv bigint,
@pXml text,
@pUUID varchar(35),
@pRequiere Bit
)
as
update comMovProv set ClaveFiscal=@pUUID, XMLFiscal=@pXml, 
VieneDeFiscal =@pRequiere 
Where comMovProv=@pcomMovProv
go



DROP PROCEDURE comMovprovXmlBuscarDatos
GO
CREATE PROCEDURE comMovprovXmlBuscarDatos
(
@ProveedorDesde varchar(16),
@ProveedorHasta varchar(15),
@FechaDesde datetime,
@FechaHasta datetime,
@Empresa_Id int
)
as

select comMovProvP.comMovprov ,	comCFDISatPago.UUID, comCFDISat.Xml,genCancMov.Importe
from 
	tesMovimientos inner join genCancMov ON
		tesMovimientos.tesMovimientos = genCancMov.Asiento_Id 
	INNER JOIN comMovprov ON
		genCancMov.Asiento_Id_Ap =comMovprov.comMovProv
	inner join comMovProv  comMovProvp on comMovProvp.comMovProv = tesMovimientos.tesMovimientos
	left join comCFDISatPago ON uuidr = comMovProv.clavefiscal
	INNER JOIN comCFDISat on comCFDISat.uuid = comCFDISatPago.UUID
	INNER JOIN conAsientos ON conAsientos.conAsientos = tesMovimientos.tesMovimientos 
	INNER JOIN conAsientos conAsientosF ON conAsientosf.conAsientos = comMovprov.comMovprov
	INNER JOIN comProveedores ON comProveedores.genEntidades = comMovprov.Proveed_Id
	INNER JOIN genEntidades ON genEntidades .genEntidades = comProveedores.genEntidades

WHERE
	genEntidades.Cuit = comCFDISat.RFCEmisor and 
	conasientos.Anulado = 0 and 
	conasientosF.Anulado = 0 and 
	conAsientos.Fecha >= @FechaDesde and -- @FechaHasta and
	comProveedores.Proveed_Id Between @ProveedorDesde and @ProveedorHasta and 
	conasientos.Empresa_Id = @Empresa_Id and 
	comCFDISat.Subido = 0 /*and
	commovprovp.Importe = comCFDISat.Monto and 
	genCancMov.Importe = comCFDISatPago.Monto*/
GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comMovTipos.sql*/
DROP PROCEDURE comMovTiposDatos
GO
CREATE PROCEDURE comMovTiposDatos
(
@pTipoMov char(1)
)
AS
SET NOCOUNT ON 

SELECT comMovTipos.TipoMov, comMovTipos.Descripcion, comMovTipos.Signo
FROM comMovTipos 
WHERE (TipoMov = @pTipoMov)
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comNivelesAuto.sql*/
DROP PROCEDURE comNivelesAutoGuardar
GO
CREATE PROCEDURE comNivelesAutoGuardar
(
@pNivelAuto_Id varchar(5),
@pNivelAuto_Id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(100),
@pInactivo Sino,
@pUsuario_Id int,
@pPosteado bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM comNivelesAuto WHERE (NivelAuto_Id = @pNivelAuto_Id)))
BEGIN 
	UPDATE comNivelesAuto
	SET @lIdentidad = ComNivelesAuto,
		NivelAuto_Id = @pNivelAuto_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado=@pPosteado
	WHERE (NivelAuto_Id = @pNivelAuto_Id)
END 
ELSE 
BEGIN 
	INSERT INTO comNivelesAuto
	(
		NivelAuto_Id,
		Empresa_Id,
		Descripcion,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pNivelAuto_Id,
		@pEmpresa_Id,
		@pDescripcion,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO



DROP PROCEDURE comNivelesAutoDatos
GO
CREATE PROCEDURE comNivelesAutoDatos
(
@pNivelAuto_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT comNivelesAuto.ComNivelesAuto, comNivelesAuto.NivelAuto_Id,
comNivelesAuto.Empresa_Id, Cast( Case When comNivelesAuto.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, 
comNivelesAuto.Descripcion, comNivelesAuto.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
comNivelesAuto.Posteado
FROM comNivelesAuto 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = comNivelesAuto.Usuario_Id)
WHERE (NivelAuto_Id = @pNivelAuto_Id)

Exec comNivelesAutoUsuDatos @pNivelAuto_Id

Declare @pidentity bigint= dbo.FuncFKcomNivelesAuto(@pNivelAuto_Id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'comNivelesAuto'
RETURN @@Error 

GO


DROP PROCEDURE comNivelesAutoEliminar
GO
CREATE PROCEDURE comNivelesAutoEliminar
(
@pNivelAuto_Id varchar(5)
)
AS
SET NOCOUNT ON 

DELETE FROM comNivelesAuto 
WHERE (NivelAuto_Id = @pNivelAuto_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKcomNivelesAuto
GO

CREATE FUNCTION FuncFKcomNivelesAuto
(
@pNivelAuto_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = ComNivelesAuto FROM comNivelesAuto WHERE 
	NivelAuto_Id = @pNivelAuto_Id
  RETURN @pIdentity
END


GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comNivelesAutoUsu.sql*/
DROP PROCEDURE comNivelesAutoUsuGuardar
GO
CREATE PROCEDURE comNivelesAutoUsuGuardar
(
@pNivel_Id varChar(5),
@pUsuario_Id varChar(25)
)
AS
SET NOCOUNT ON 
	INSERT INTO comNivelesAutoUsu
	(
		NivelAuto_Id,
		Usuario_Id
	)
	VALUES 
	(
		dbo.FuncFKcomNivelesAuto(@pNivel_Id),
		dbo.FuncFKgenUsuarios(@pUsuario_Id)
	)

GO

DROP PROCEDURE comNivelesAutoUsuDatos
GO
CREATE PROCEDURE comNivelesAutoUsuDatos
(
@pNivel_Id varChar(5) = Null,
@pUsuario_Id varChar(25) = Null
)
AS
SET NOCOUNT ON 

SELECT genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, comNivelesAuto.NivelAuto_Id, 
comNivelesAuto.Descripcion as DescripcioncomNivelesAuto
FROM comNivelesAutoUsu 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = comNivelesAutoUsu.Usuario_Id)
INNER JOIN comNivelesAuto  ON (comNivelesAuto.ComNivelesAuto = comNivelesAutoUsu.NivelAuto_Id)
WHERE comNivelesAutoUsu.Usuario_Id = IsNull(dbo.FuncFKgenUsuarios(@pUsuario_Id), comNivelesAutoUsu.Usuario_Id)
AND comNivelesAutoUsu.NivelAuto_Id = IsNull(dbo.FuncFKcomNivelesAuto(@pNivel_Id), comNivelesAutoUsu.NivelAuto_Id)
 
RETURN @@Error 

GO

DROP PROCEDURE comNivelesAutoUsuEliminar
GO
CREATE PROCEDURE comNivelesAutoUsuEliminar
(
@pNivel_Id varChar(5) = Null,
@pUsuario_Id varChar(25) = Null
)
AS
SET NOCOUNT ON 

DELETE FROM comNivelesAutoUsu 
WHERE comNivelesAutoUsu.Usuario_Id = IsNull(dbo.FuncFKgenUsuarios(@pUsuario_Id), comNivelesAutoUsu.Usuario_Id)
AND comNivelesAutoUsu.NivelAuto_Id = IsNull(dbo.FuncFKcomNivelesAuto(@pNivel_Id), comNivelesAutoUsu.NivelAuto_Id)
 
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comOCAntiRecepcion.sql*/
DROP PROCEDURE comOCAntiRecepcionInsertar
GO
CREATE PROCEDURE comOCAntiRecepcionInsertar
(
@pcomAntiRecepcion bigint,
@pcomOcRecepcion bigint = NULL
)
AS
SET NOCOUNT ON 
	INSERT INTO comOCAntiRecepcion
	(
		comAntiRecepcion,
		comOcRecepcion
	)
	VALUES 
	(
		@pcomAntiRecepcion,
		@pcomOcRecepcion
	)

GO

DROP PROCEDURE comOCAntiRecepcionDatos
GO
CREATE PROCEDURE comOCAntiRecepcionDatos
(
@pcomAntiRecepcion bigint
)
AS
SET NOCOUNT ON 

SELECT comOCAntiRecepcion.comAntiRecepcion, comOCAntiRecepcion.comOcRecepcion
FROM comOCAntiRecepcion 
WHERE (comAntiRecepcion = @pcomAntiRecepcion)
 
RETURN @@Error 

GO

DROP PROCEDURE comOCAntiRecepcionEliminar
GO
CREATE PROCEDURE comOCAntiRecepcionEliminar
(
@pcomAntiRecepcion bigint 
)
AS
SET NOCOUNT ON 

DELETE FROM comOCAntiRecepcion 
WHERE comAntiRecepcion = @pcomAntiRecepcion
 
RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comOCArticulo.sql*/
DROP PROCEDURE comOCArticuloGuardar
GO
CREATE PROCEDURE comOCArticuloGuardar
(
@pcomOrdenComp int,
@pRenglon_OC int,
@pProducto_Id varchar(25) = NULL,
@pFactor qCantidadD8,
@pCantidadOriginal qCantidadD8,
@pPrecioOriginal qMonedaD8,
@pDeposito_Id varchar(15) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comOCArticulo WHERE (comOrdenComp = @pcomOrdenComp) AND (Renglon_OC = @pRenglon_OC)))
BEGIN 
	UPDATE comOCArticulo
	SET		Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id),
		Factor = @pFactor,
		CantidadOriginal = @pCantidadOriginal,
		PrecioOriginal = @pPrecioOriginal,
		Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id)
	WHERE (comOrdenComp = @pcomOrdenComp) AND (Renglon_OC = @pRenglon_OC)
END 
ELSE 
BEGIN 
	INSERT INTO comOCArticulo
	(
		comOrdenComp,
		Renglon_OC,
		Producto_Id,
		Factor,
		CantidadOriginal,
		PrecioOriginal,
		Deposito_Id
	)
	VALUES 
	(
		@pcomOrdenComp,
		@pRenglon_OC,
		dbo.FuncFKstkProductos(@pProducto_Id),
		@pFactor,
		@pCantidadOriginal,
		@pPrecioOriginal,
		dbo.FuncFKstkDepositos(@pDeposito_Id)
	)
END 

GO

DROP PROCEDURE comOCArticuloDatos
GO
CREATE PROCEDURE comOCArticuloDatos
(
@pcomOrdenComp int,
@pRenglon_OC int=null
)
AS
SET NOCOUNT ON 

SELECT comOCArticulo.comOrdenComp, comOCArticulo.Renglon_OC, stkProductos.Producto_Id,
	stkProductos.Descripcion as DescripcionProductos, comOCArticulo.Factor, comOCArticulo.CantidadOriginal, comOCArticulo.PrecioOriginal,
	stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos, 
	comOCCuerpo.Cantidad, comOCCuerpo.Cantidad_Recibida, comOcCuerpo.Cantidad_Embarcada,
	comOCCuerpo.Cantidad_Facturada, comOCCuerpo.Fecha_Entrega, comOCCuerpo.Precio, comOCCuerpo.Pendiente,
	comOCCuerpo.Cantidad_Creditos, stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, conCentro1.Centro1_Id,
	conCentro1.Descripcion as DescripcionCentro1, conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, 
	comOCCuerpo.CantidadConsignada, cast(0 as bit) as Marca, comOCCuerpo.Observaciones
FROM comOCArticulo 
INNER JOIN comOCCuerpo  ON (comOCCuerpo.comOrdenComp = comOCArticulo.comOrdenComp) AND (comOCCuerpo.Renglon_OC = comOCArticulo.Renglon_OC)
LEFT JOIN stkProductos  ON (stkProductos.stkProductos = comOCArticulo.Producto_Id)
LEFT JOIN stkDepositos  ON (stkDepositos.stkDepositos = comOCArticulo.Deposito_Id)
INNER JOIN comOrdenComp  ON (comOrdenComp.comOrdenComp = comOCCuerpo.comOrdenComp)
LEFT JOIN stkUniMed  ON (stkUniMed.stkUniMed = comOCCuerpo.Medida_Id)
LEFT JOIN conCentro1  ON (conCentro1.conCentro1 = comOCCuerpo.Centro1_Id)
LEFT JOIN conCentro2  ON (conCentro2.conCentro2 = comOCCuerpo.Centro2_Id)
WHERE (comOCArticulo.comOrdenComp = @pcomOrdenComp)
AND (comOCArticulo.Renglon_OC = isnull(@pRenglon_OC,comOCArticulo.Renglon_oc))
 
 RETURN @@Error 

GO

DROP PROCEDURE comOCArticuloEliminar
GO
CREATE PROCEDURE comOCArticuloEliminar
(
@pcomOrdenComp int,
@pRenglon_OC int= null
)
AS
SET NOCOUNT ON 

DELETE FROM comOCArticulo 
WHERE (comOrdenComp = @pcomOrdenComp)
AND (Renglon_OC = isnull(@pRenglon_OC,Renglon_oc))
 
 RETURN @@Error 

GO

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comOCAutorizando.sql*/
DROP PROCEDURE comOCAutorizandoGuardar
GO
CREATE PROCEDURE comOCAutorizandoGuardar
(
@pcomOrdenComp int,
@pSecuencia int,
@pNivelAuto_Id varchar(5),
@pUsuario_Id int = NULL,
@pFecha qFechaHora = NULL,
@pTipoApro char(1),
@pResultadoFormula varchar(max) = NULL
)
AS
SET NOCOUNT ON 
print @pSecuencia
IF (@pSecuencia > 0)

BEGIN 
	print 'Entro'
	UPDATE comOCAutorizando
	SET		NivelAuto_Id = dbo.FuncFKcomNivelesAuto(@pNivelAuto_Id),
		Usuario_Id = @pUsuario_Id,
		Fecha = @pFecha,
		TipoApro = @pTipoApro,
		ResultadoFormula = @pResultadoFormula
	WHERE (comOrdenComp = @pcomOrdenComp) AND (Secuencia = @pSecuencia)
END 
ELSE 
BEGIN 

SET @pSecuencia = ISNULL((SELECT MAX(Secuencia) 
		from comOCAutorizando
			WHERE
			comOrdenComp = @pcomOrdenComp),0)+1

	INSERT INTO comOCAutorizando
	(
		comOrdenComp,
		Secuencia,
		NivelAuto_Id,
		Usuario_Id,
		Fecha,
		TipoApro,
		ResultadoFormula
	)
	VALUES 
	(
		@pcomOrdenComp,
		@pSecuencia,
		dbo.FuncFKcomNivelesAuto(@pNivelAuto_Id),
		@pUsuario_Id,
		@pFecha,
		@pTipoApro,
		@pResultadoFormula
	)
END 
SELECT @pSecuencia AS Secuencia
GO

DROP PROCEDURE comOCAutorizandoDatos
GO
CREATE PROCEDURE comOCAutorizandoDatos
(
@pcomOrdenComp int,
@pSecuencia int=null
)
AS
SET NOCOUNT ON 


SELECT  comOrdenComp.comOrdenComp, comOCAutorizando.Secuencia, comNivelesAuto.NivelAuto_Id, comNivelesAuto.Descripcion as DescripcionNivelesAuto,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, comOCAutorizando.Fecha, comOCAutorizando.TipoApro,
	comOCAutorizando.ResultadoFormula
FROM comOCAutorizando 
INNER JOIN comOrdenComp  ON (comOrdenComp.comOrdenComp = comOCAutorizando.comOrdenComp)
INNER JOIN comNivelesAuto  ON (comNivelesAuto.comNivelesAuto = comOCAutorizando.NivelAuto_Id)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = comOCAutorizando.Usuario_Id)
WHERE (comOrdenComp.comOrdenComp = @pcomOrdenComp)
AND (Secuencia = isnull(@pSecuencia,Secuencia))
 
 RETURN @@Error 

GO

DROP PROCEDURE comOCAutorizandoEliminar
GO
CREATE PROCEDURE comOCAutorizandoEliminar
(
@pcomOrdenComp int,
@pSecuencia int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comOCAutorizando 
WHERE (comOrdenComp = @pcomOrdenComp)
AND (Secuencia = ISNULL(@pSecuencia, Secuencia))
 
 RETURN @@Error 

GO

DROP PROCEDURE comOCAutorizandoDatosSecuencia
GO
CREATE PROCEDURE comOCAutorizandoDatosSecuencia
(
@pcomOrdenComp int,
@pSecuencia int
)
AS
SET NOCOUNT ON 

SELECT comOCAutorizando.comOrdenComp, 
	comOCAutorizando.Secuencia, comNivelesAuto.NivelAuto_Id, comNivelesAuto.Descripcion as DescripcionNivelesAuto,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, comOCAutorizando.Fecha, comOCAutorizando.TipoApro,
	comOCAutorizando.ResultadoFormula, genUsuarios.genUsuarios
FROM comOCAutorizando 
INNER JOIN comOrdenComp ON (comOrdenComp.comOrdenComp = comOCAutorizando.comOrdenComp)
INNER JOIN comNivelesAuto  ON (comNivelesAuto.ComNivelesAuto = comOCAutorizando.NivelAuto_Id)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = comOCAutorizando.Usuario_Id)
WHERE comOrdenComp.comOrdenComp =@pcomOrdenComp
AND comOCAutorizando.Secuencia = @pSecuencia
 
RETURN @@Error 

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comOCCuerpo.sql*/
DROP PROCEDURE comOCCuerpoGuardar
GO
CREATE PROCEDURE comOCCuerpoGuardar
(
@pcomOrdenComp int,
@pRenglon_OC int,
@pCantidad qCantidadD8,
@pCantidad_Recibida qCantidadD8,
@pCantidad_Embarcada qCantidadD8,
@pCantidad_Facturada qCantidadD8,
@pFecha_Entrega qFecha,
@pPrecio qMonedaD8,
@pPendiente Sino,
@pCantidad_Creditos qCantidadD8,
@pMedida_Id varchar(5) = NULL,
@pCentro1_Id varchar(8) = NULL,
@pCentro2_Id varchar(8) = NULL, 
@pCantidadConsignada qCantidadD8, 
@pObservaciones VarChar(max) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comOCCuerpo WHERE (comOrdenComp = @pcomOrdenComp) AND (Renglon_OC = @pRenglon_OC)))
BEGIN 
	UPDATE comOCCuerpo
	SET		Cantidad = @pCantidad,
		Cantidad_Recibida = @pCantidad_Recibida,
		Cantidad_Embarcada = @pCantidad_Embarcada,
		Cantidad_Facturada = @pCantidad_Facturada,
		Fecha_Entrega = @pFecha_Entrega,
		Precio = @pPrecio,
		Pendiente = @pPendiente,
		Cantidad_Creditos = @pCantidad_Creditos,
		Medida_Id = dbo.FuncFKstkUniMed(@pMedida_Id),
		Centro1_Id = dbo.FuncFKconCentro1(@pCentro1_Id),
		Centro2_Id = dbo.FuncFKconCentro2(@pCentro2_Id), 
		CantidadConsignada = @pCantidadConsignada, 
		Observaciones = @pObservaciones
	WHERE (comOrdenComp = @pcomOrdenComp) AND (Renglon_OC = @pRenglon_OC)
END 
ELSE 
BEGIN 
	INSERT INTO comOCCuerpo
	(
		comOrdenComp,
		Renglon_OC,
		Cantidad,
		Cantidad_Recibida,
		Cantidad_Embarcada,
		Cantidad_Facturada,
		Fecha_Entrega,
		Precio,
		Pendiente,
		Cantidad_Creditos,
		Medida_Id,
		Centro1_Id,
		Centro2_Id,
		CantidadConsignada, 
		Observaciones
	)
	VALUES 
	(
		@pcomOrdenComp,
		@pRenglon_OC,
		@pCantidad,
		@pCantidad_Recibida,
		@pCantidad_Embarcada,
		@pCantidad_Facturada,
		@pFecha_Entrega,
		@pPrecio,
		@pPendiente,
		@pCantidad_Creditos,
		dbo.FuncFKstkUniMed(@pMedida_Id),
		dbo.FuncFKconCentro1(@pCentro1_Id),
		dbo.FuncFKconCentro2(@pCentro2_Id), 
		@pCantidadConsignada, 
		@pObservaciones
	)
END 

GO

DROP PROCEDURE comOCCuerpoDatos
GO
CREATE PROCEDURE comOCCuerpoDatos
(
@pcomOrdenComp int,
@pRenglon_OC int= null
)
AS
SET NOCOUNT ON 

SELECT comOCCuerpo.Renglon_OC, comOCCuerpo.Cantidad, comOCCuerpo.Cantidad_Recibida, comOcCuerpo.Cantidad_Embarcada,
	comOCCuerpo.Cantidad_Facturada, comOCCuerpo.Fecha_Entrega, comOCCuerpo.Precio, comOCCuerpo.Pendiente,
	comOCCuerpo.Cantidad_Creditos, stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, conCentro1.Centro1_Id,
	conCentro1.Descripcion as DescripcionCentro1, conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, 
		comOCCuerpo.comOrdencomp, comOCCuerpo.CantidadConsignada, 
			comOCCuerpo.Observaciones
FROM comOCCuerpo 
INNER JOIN comOrdenComp  ON (comOrdenComp.comOrdenComp = comOCCuerpo.comOrdenComp)
LEFT JOIN stkUniMed  ON (stkUniMed.stkUniMed = comOCCuerpo.Medida_Id)
LEFT JOIN conCentro1  ON (conCentro1.conCentro1 = comOCCuerpo.Centro1_Id)
LEFT JOIN conCentro2  ON (conCentro2.conCentro2 = comOCCuerpo.Centro2_Id)
WHERE (comOCCuerpo.comOrdenComp = @pcomOrdenComp)
AND (comOCCuerpo.Renglon_OC = isnull(@pRenglon_OC, comOCCuerpo.Renglon_OC))
ORDER BY 1 
 RETURN @@Error 

GO

DROP PROCEDURE comOCCuerpoEliminar
GO
CREATE PROCEDURE comOCCuerpoEliminar
(
@pcomOrdenComp int,
@pRenglon_OC int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comOCCuerpo 
WHERE (comOrdenComp = @pcomOrdenComp)
AND (Renglon_OC = ISNULL(@pRenglon_OC, Renglon_OC))
 
 RETURN @@Error 

GO

DROP PROCEDURE comOCCuerpoRecibir
GO

CREATE PROCEDURE comOCCuerpoRecibir
(
@pcomOrdenComp int,
@pRenglon_OC int,
@pCantidad qCantidadD8
)
as

UPDATE comOcCuerpo Set Cantidad_Recibida = Cantidad_Recibida + @pCantidad
	Where comOrdenComp = @pComOrdenComp And 
		Renglon_OC = @pRenglon_OC

UPDATE comOcCuerpo Set Pendiente = Case when Cantidad_Recibida >= Cantidad 
	Then 0 else 1 end  
	Where comOrdenComp = @pComOrdenComp And 
		Renglon_OC = @pRenglon_OC 
		
GO


DROP PROCEDURE comOCCuerpoEmbarcar
GO

CREATE PROCEDURE comOCCuerpoEmbarcar
(
@pcomOrdenComp int,
@pRenglon_OC int,
@pCantidad qCantidadD8
)
as

UPDATE comOcCuerpo Set Cantidad_Embarcada = Cantidad_Embarcada + @pCantidad
	Where comOrdenComp = @pComOrdenComp And 
		Renglon_OC = @pRenglon_OC
Go


DROP PROCEDURE comOCCuerpoFacturar
GO

CREATE PROCEDURE comOCCuerpoFacturar
(
@pcomOrdenComp int,
@pRenglon_OC int,
@pCantidad qCantidadD8
)
as

UPDATE comOcCuerpo Set Cantidad_Facturada = Cantidad_Facturada + @pCantidad
	Where comOrdenComp = @pComOrdenComp And 
		Renglon_OC = @pRenglon_OC

GO

DROP PROCEDURE comOCCuerpoCeditos
GO

CREATE PROCEDURE comOCCuerpoCeditos
(
@pcomOrdenComp int,
@pRenglon_OC int,
@pCantidad qCantidadD8
)
as

UPDATE comOcCuerpo Set Cantidad_Creditos = Cantidad_Creditos + @pCantidad
	Where comOrdenComp = @pComOrdenComp And 
		Renglon_OC = @pRenglon_OC

GO


DROP PROCEDURE comOCCuerpoConsignar
GO

CREATE PROCEDURE comOCCuerpoConsignar
(
@pcomOrdenComp int,
@pRenglon_OC int,
@pCantidad qCantidadD8
)
as

UPDATE comOcCuerpo Set CantidadConsignada = CantidadConsignada + @pCantidad
	Where comOrdenComp = @pComOrdenComp And 
		Renglon_OC = @pRenglon_OC
		
GO


DROP PROCEDURE comOCCuerpoActuPendiente
GO

CREATE PROCEDURE comOCCuerpoActuPendiente
(
@pcomOrdenComp int,
@pRenglon_OC int,
@pPendiente Bit
)
as

UPDATE comOcCuerpo Set Pendiente = @pPendiente
	Where comOrdenComp = @pComOrdenComp And 
		Renglon_OC = @pRenglon_OC
		
GO



DROP PROCEDURE comOCCuerpoActuFecha
GO
CREATE PROCEDURE comOCCuerpoActuFecha
(
@pcomOrdenComp int,
@pRenglon_OC int,
@pFecha_Entrega qFecha
)
AS
	UPDATE comOCCuerpo
	SET Fecha_Entrega = @pFecha_Entrega
	WHERE (comOrdenComp = @pcomOrdenComp) AND (Renglon_OC = @pRenglon_OC)

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comOcEstados.sql*/
DROP PROCEDURE comOcEstadosGuardar
GO
CREATE PROCEDURE comOcEstadosGuardar
(
@pEstado_Id char(1),
@pDescripcion varchar(25)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comOcEstados WHERE (Estado_Id = @pEstado_Id)))
BEGIN 
	UPDATE comOcEstados
	SET		Descripcion = @pDescripcion
	WHERE (Estado_Id = @pEstado_Id)
END 
ELSE 
BEGIN 
	INSERT INTO comOcEstados
	(
		Estado_Id,
		Descripcion
	)
	VALUES 
	(
		@pEstado_Id,
		@pDescripcion
	)
END 

GO

DROP PROCEDURE comOcEstadosDatos
GO
CREATE PROCEDURE comOcEstadosDatos
(
@pEstado_Id char(1)
)
AS
SET NOCOUNT ON 

SELECT comOcEstados.Estado_Id, comOcEstados.Descripcion
FROM comOcEstados 
WHERE (Estado_Id = @pEstado_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE comOcEstadosEliminar
GO
CREATE PROCEDURE comOcEstadosEliminar
(
@pEstado_Id char(1) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comOcEstados 
WHERE (Estado_Id = ISNULL(@pEstado_Id, Estado_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comOCMemo.sql*/
DROP PROCEDURE comOCMemoGuardar
GO
CREATE PROCEDURE comOCMemoGuardar
(
@pcomOrdenComp int,
@pRenglon_OC int,
@pDetalle varchar(2000),
@pCuenta_Id varchar(25) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comOCMemo WHERE (comOrdenComp = @pcomOrdenComp) AND (Renglon_OC = @pRenglon_OC)))
BEGIN 
	UPDATE comOCMemo
	SET		Detalle = @pDetalle,
		Cuenta_Id = dbo.FuncFKconCuentas(@pCuenta_Id)
	WHERE (comOrdenComp = @pcomOrdenComp) AND (Renglon_OC = @pRenglon_OC)
END 
ELSE 
BEGIN 
	INSERT INTO comOCMemo
	(
		comOrdenComp,
		Renglon_OC,
		Detalle,
		Cuenta_Id
	)
	VALUES 
	(
		@pcomOrdenComp,
		@pRenglon_OC,
		@pDetalle,
		dbo.FuncFKconCuentas(@pCuenta_Id)
	)
END 

GO

DROP PROCEDURE comOCMemoDatos
GO
CREATE PROCEDURE comOCMemoDatos
(
@pcomOrdenComp int,
@pRenglon_OC int= null
)
AS
SET NOCOUNT ON 

SELECT comOCMemo.comOrdenComp, comOCMemo.Renglon_OC, comOCMemo.Detalle,
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuentas, 
	comOCCuerpo.Cantidad, comOCCuerpo.Cantidad_Recibida, comOcCuerpo.Cantidad_Embarcada,
	comOCCuerpo.Cantidad_Facturada, comOCCuerpo.Fecha_Entrega, comOCCuerpo.Precio, comOCCuerpo.Pendiente,
	comOCCuerpo.Cantidad_Creditos, stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, conCentro1.Centro1_Id,
	conCentro1.Descripcion as DescripcionCentro1, conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, 
	comOCCuerpo.CantidadConsignada, cast(0 as bit) as Marca, comOCCuerpo.Observaciones
FROM comOCMemo 
INNER JOIN comOCCuerpo  ON (comOCCuerpo.comOrdenComp = comOCMemo.comOrdenComp) AND (comOCCuerpo.Renglon_OC = comOCMemo.Renglon_OC)
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = comOCMemo.Cuenta_Id)
INNER JOIN comOrdenComp  ON (comOrdenComp.comOrdenComp = comOCCuerpo.comOrdenComp)
LEFT JOIN stkUniMed  ON (stkUniMed.stkUniMed = comOCCuerpo.Medida_Id)
LEFT JOIN conCentro1  ON (conCentro1.conCentro1 = comOCCuerpo.Centro1_Id)
LEFT JOIN conCentro2  ON (conCentro2.conCentro2 = comOCCuerpo.Centro2_Id)
WHERE (comOCMemo.comOrdenComp = @pcomOrdenComp)
AND (comOCMemo.Renglon_OC = isNull(@pRenglon_OC,comOCMemo.Renglon_oc))
 
 RETURN @@Error 

GO

DROP PROCEDURE comOCMemoEliminar
GO
CREATE PROCEDURE comOCMemoEliminar
(
@pcomOrdenComp int,
@pRenglon_OC int= NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comOCMemo 
WHERE (comOrdenComp = @pcomOrdenComp)
AND (comOCMemo.Renglon_OC = isNull(@pRenglon_OC,comOCMemo.Renglon_oc))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comOcMovProv.sql*/
DROP PROCEDURE comOcMovProvGuardar
GO
CREATE PROCEDURE comOcMovProvGuardar
(
@pcomOrdenComp int,
@pcomMovProv bigint,
@pAnticipoNC Sino,
@pImporte qMonedaD2,
@pPorcentaje qPorcentaje,
@pDadoRestado Sino
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comOcMovProv WHERE (comOrdenComp = @pcomOrdenComp) AND (comMovProv = @pcomMovProv) AND (AnticipoNC = @pAnticipoNC)))
BEGIN 
	UPDATE comOcMovProv
	SET		Importe = @pImporte,
		Porcentaje = @pPorcentaje,
		DadoRestado = @pDadoRestado
	WHERE (comOrdenComp = @pcomOrdenComp) AND (comMovProv = @pcomMovProv) AND (AnticipoNC = @pAnticipoNC)
END 
ELSE 
BEGIN 
	INSERT INTO comOcMovProv
	(
		comOrdenComp,
		comMovProv,
		AnticipoNC,
		Importe,
		Porcentaje,
		DadoRestado
	)
	VALUES 
	(
		@pcomOrdenComp,
		@pcomMovProv,
		@pAnticipoNC,
		@pImporte,
		@pPorcentaje,
		@pDadoRestado
	)
END 

GO

DROP PROCEDURE comOcMovProvDatos
GO
CREATE PROCEDURE comOcMovProvDatos
(
@pcomOrdenComp int,
@pcomMovProv bigint,
@pAnticipoNC Sino
)
AS
SET NOCOUNT ON 

SELECT comOcMovProv.comOrdenComp,
	comOcMovProv.comMovProv,	comOcMovProv.AnticipoNC, comOcMovProv.Importe,
	comOcMovProv.Porcentaje, comOcMovProv.DadoRestado
FROM comOcMovProv 
WHERE (comOcMovProv.comOrdenComp = @pcomOrdenComp)
AND (comOcMovProv.comMovProv = @pcomMovProv)
AND (comOcMovProv.AnticipoNC = @pAnticipoNC)
 
 RETURN @@Error 

GO

DROP PROCEDURE comOcMovProvEliminar
GO
CREATE PROCEDURE comOcMovProvEliminar
(
@pcomOrdenComp int,
@pcomMovProv bigint,
@pAnticipoNC Sino = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comOcMovProv 
WHERE (comOrdenComp = @pcomOrdenComp)
AND (comMovProv = @pcomMovProv)
AND (AnticipoNC = ISNULL(@pAnticipoNC, AnticipoNC))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comOCPendAuto.sql*/

-- comOrdenCompPendAuto 1,46
DROP PROCEDURE comOrdenCompPendAuto
GO
CREATE PROCEDURE comOrdenCompPendAuto 
( 
	@Empresa_Id int , 
	@pUsuario Int
)
AS

	SELECT @Empresa_Id AS Empresa_Id 

	select comOCSegmentos.comOrdenComp, comOCSegmentos.Empresa_Id, 
	dbo.Segmento(comOCSegmentos.Segmento_Id,
	comOCSegmentos.Segmento1C, comOCSegmentos.Segmento2C, comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C,
	comOCSegmentos.Segmento1N,comOCSegmentos.Segmento2N, comOCSegmentos.Segmento3N, comOCSegmentos.Segmento4N) as SegmentoStr, 
		comOrdenComp.Fecha, comProveedores.Proveed_Id, comProveedores.RazonSocial, 
		Convert(Numeric(18,2),sum(comOCCuerpo.Cantidad * comOCCuerpo.Precio))  as Total, 
		comOrdenComp.Estado_Id , comOCEstados.Descripcion as DescripcionEstadoRI, 
		genSegmentos.Segmento_Id,
		comOCSegmentos.Segmento1C, comOCSegmentos.Segmento2C, comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C,
		comOCSegmentos.Segmento1N,comOCSegmentos.Segmento2N, comOCSegmentos.Segmento3N, comOCSegmentos.Segmento4N, 
		genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres, 
			comOCAutorizando.Secuencia, comNivelesAuto.NivelAuto_Id
		
	from comOCSegmentos INNER JOIN comOrdenComp ON
		comOCSegmentos.comOrdenComp = comOrdenComp.comOrdenComp
		INNER JOIN comOCCuerpo ON
		comOCCuerpo.comOrdenComp = comOrdenComp.comOrdenComp
		LEFT JOIN comProveedores ON
		comProveedores.genEntidades = comOrdenComp.Proveed_Id
		INNER JOIN comOCEstados ON 
		comOcEstados.Estado_Id = comOrdenComp.Estado_Id
		INNER JOIN genSegmentos ON 
		genSegmentos.genSegmentos = comOCSegmentos.Segmento_Id
		inner JOIN comOCAutorizando on comOCAutorizando.comOrdenComp= comOrdenComp.comOrdenComp 
		inner join comNivelesAutoUsu ON comNivelesAutoUsu.NivelAuto_id = comOCAutorizando.NivelAuto_Id
		INNER JOIN comNivelesAuto ON comNivelesAuto.comNivelesAuto = comOCAutorizando.NivelAuto_Id
		INNER JOIN genUsuarios ON genUsuarios.genUsuarios = comOrdenComp.Usuario_Id
	WHERE	
		comOCSegmentos.Empresa_Id = @Empresa_Id and 
		comNivelesAutoUsu.Usuario_Id = @pUsuario and 
		comOCAutorizando.Usuario_Id IS NULL AND 
		comOrdenComp.Estado_Id = 'P'  
	Group by comOCSegmentos.comOrdenComp, comOCSegmentos.Empresa_Id, 
	comOCSegmentos.Segmento1N,comOCSegmentos.Segmento2N, comOCSegmentos.Segmento3N, comOCSegmentos.Segmento4N, 
	comOCSegmentos.Segmento1C, comOCSegmentos.Segmento2C, comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C, 
		comOrdenComp.Fecha, comProveedores.Proveed_id, comProveedores.RazonSocial, 
		comOrdenComp.Estado_Id , comOCEstados.Descripcion, 
		comOCSegmentos.Segmento_Id , genSegmentos.Segmento_Id, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres,
		comOCAutorizando.Secuencia, comNivelesAuto.NivelAuto_Id
	ORDER BY 1

	-- Agrego las que Necesito para Consulta
	exec comOrdenCompDatos 0,' ', 0,0,0,0,' ',' ',' ',' '
GO	

DROP PROCEDURE comOrdenCompCambiarEstado
GO

CREATE PROCEDURE comOrdenCompCambiarEstado
	(
	@pcomOrdenComp Int, 
	@pEstado_Id Char(1),
	@pUsuario_Id Int
	)
	as
	
	Update comOrdenComp set Estado_Id = @pEstado_Id
		--,Autorizo = 
			--case when @pEstado_Id IN ('R','A') THEN @pUsuario_id else Autorizo end
	Where
		comOrdenComp = @pcomOrdenComp
GO		
			
	

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comOcReceCuerpo.sql*/
DROP PROCEDURE comOcReceCuerpoGuardar
GO
CREATE PROCEDURE comOcReceCuerpoGuardar
(
@pcomOcRecepcion bigint,
@pconRenglon int,
@pcomOrdenComp int,
@pRenglon_OC int,
@pCantidad qCantidadD8,
@pObservaciones QMemo = NULL,
@pCantFactPendiente qCantidadD8
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comOcReceCuerpo WHERE (comOcRecepcion = @pcomOcRecepcion) AND (conRenglon = @pconRenglon)))
BEGIN 
	UPDATE comOcReceCuerpo
	SET comOrdenComp = @pcomOrdenComp,
		Renglon_OC = @pRenglon_OC,
		Cantidad = @pCantidad,
		Observaciones = @pObservaciones,
		CantFactPendiente = @pCantFactPendiente
	WHERE comOcRecepcion = @pcomOcRecepcion AND conRenglon = @pconRenglon
END 
ELSE 
BEGIN 
	INSERT INTO comOcReceCuerpo
	(
		comOcRecepcion,
		conRenglon,
		comOrdenComp,
		Renglon_OC,
		Cantidad,
		Observaciones,
		CantFactPendiente
	)
	VALUES 
	(
		@pcomOcRecepcion,
		@pconRenglon,
		@pcomOrdenComp,
		@pRenglon_OC,
		@pCantidad,
		@pObservaciones,
		@pCantFactPendiente
	)
END 

GO

DROP PROCEDURE comOcReceCuerpoDatos
GO
CREATE PROCEDURE comOcReceCuerpoDatos
(
@pcomOcRecepcion bigint,
@pconRenglon int=null
)
AS
SET NOCOUNT ON 

SELECT comOcReceCuerpo.comOcRecepcion as Asiento_Id, comOcReceCuerpo.conRenglon, 
	comOcReceCuerpo.comOrdenComp,comOcReceCuerpo.Renglon_OC, 
	comOCMemo.Detalle,  comOCCuerpo.Cantidad as CantidadOC,
	comOcReceCuerpo.Cantidad, comOcReceCuerpo.Observaciones,
	conCuentas.Cuenta_Id, conCuentas.Descripcion as  DescripcionCuenta, 
	conCentro1.Centro1_Id, conCentro1.Descripcion as  DescripcionCentro1, 
	conCentro2.Centro2_Id, conCentro2.Descripcion as  DescripcionCentro2, 
	conMovCont.Importe, conMovCont.ImporteMonedaOriginal, comOcReceCuerpo.CantFactPendiente
FROM comOcReceCuerpo 
INNER JOIN conMovCont  ON (conMovCont.conAsientos = comOcReceCuerpo.comOcRecepcion) AND (conMovCont.Renglon = comOcReceCuerpo.conRenglon)
INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
INNER JOIN conCentro1 ON conCentro1.conCentro1 = conMovCont.Centro1_id
INNER JOIN conCentro2 ON conCentro2.conCentro2 = conMovCont.Centro2_id
INNER JOIN comOCMemo  ON (comOCMemo.comOrdenComp = comOcReceCuerpo.comOrdenComp) AND (comOCMemo.Renglon_OC = comOcReceCuerpo.Renglon_OC)
INNER JOIN comOCCuerpo ON (comOCCuerpo.comOrdenComp = comOcReceCuerpo.comOrdenComp) AND (comOCCuerpo.Renglon_OC = comOcReceCuerpo.Renglon_OC)
WHERE (comOcReceCuerpo.comOcRecepcion = @pcomOcRecepcion)
AND (comOcReceCuerpo.conRenglon = @pconRenglon)
 
 RETURN @@Error 

GO


DROP PROCEDURE comOcReceCuerpoDatosPendientes
GO
CREATE PROCEDURE comOcReceCuerpoDatosPendientes
(
@pComOrdenComp int

)
AS
SET NOCOUNT ON 

SELECT comOcCuerpo.comOrdenComp,comOcCuerpo.Renglon_OC, 
	comOCMemo.Detalle,  comOCCuerpo.Cantidad as CantidadOC,
	comOCCuerpo.Cantidad*0 Cantidad, ' ' as Observaciones,
	conCuentas.Cuenta_Id, conCuentas.Descripcion as  DescripcionCuenta, 
	conCentro1.Centro1_Id, conCentro1.Descripcion as  DescripcionCentro1, 
	conCentro2.Centro2_Id, conCentro2.Descripcion as  DescripcionCentro2, 
	comOcCuerpo.Precio
FROM 
comOCMemo
INNER JOIN comOCCuerpo ON comOCCuerpo.comOrdenComp = comOCMemo.comOrdenComp AND comOCCuerpo.Renglon_OC = comOCMemo.Renglon_OC
INNER JOIN conCuentas ON conCuentas.conCuentas = comOCMemo.Cuenta_Id
INNER JOIN conCentro1 ON conCentro1.conCentro1 = comOCCuerpo.Centro1_id
INNER JOIN conCentro2 ON conCentro2.conCentro2 = comOCCuerpo.Centro2_id
WHERE comOcCuerpo.comOrdencomp = @pcomOrdencomp
order by 2 
RETURN @@Error 

GO

DROP PROCEDURE comOcReceCuerpoEliminar
GO
CREATE PROCEDURE comOcReceCuerpoEliminar
(
@pcomOcRecepcion bigint,
@pconRenglon int= NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comOcReceCuerpo 
WHERE (comOcRecepcion = @pcomOcRecepcion)
AND (conRenglon = ISNULL(@pconRenglon,conRenglon))
 
 RETURN @@Error 

GO

Drop Procedure comOcReceCuerpoActuPendiente
Go
Create Procedure comOcReceCuerpoActuPendiente
(
@pcomOcRecepcion bigint,
@pconRenglon int,
@pCantidad qMonedaD8
)
As
Update comOcReceCuerpo Set CantFactPendiente = CantFactPendiente - @pCantidad Where comOcRecepcion = @pcomOcRecepcion And conRenglon = @pconRenglon
Go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comOcRecepcionDatos.sql*/
-- exec comOcRecepcionDatos 1, 'REOC', 3,0,0,0,'0001',' ',' ',' ', ' ',0,0,0,0,' ',' ',' ',' '
DROP PROCEDURE comOcRecepcionDatos 
GO
CREATE PROCEDURE comOcRecepcionDatos (

@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20),
@pSegmento_Id_OC VarChar(10), 
@pSegmento1N_OC int,
@pSegmento2N_OC int,
@pSegmento3N_OC int,
@pSegmento4N_OC int,
@pSegmento1C_OC VarChar(20),
@pSegmento2C_OC VarChar(20),
@pSegmento3C_OC VarChar(20),
@pSegmento4C_OC VarChar(20)

)

as

SET NOCOUNT ON 

DECLARE @pAsiento_Id bigint

SET @pAsiento_Id = (
SELECT Asiento_id from genAsiSegmentos where
	Empresa_Id = @pEmpresa_id and 
	Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_id) and
	Segmento1N =@pSegmento1N and
	Segmento2N = @pSegmento2N and
	Segmento3N = @pSegmento3N and
	Segmento4N = @pSegmento4N and
	Segmento1C = @pSegmento1C and
	Segmento2C = @pSegmento2C and 
	Segmento3C = @pSegmento3C and 
	Segmento4C = @pSegmento4C )




SELECT conAsientos.conAsientos, 
	genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C,
	conAsientos.Fecha, conAsientos.FechaRegistro,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, genMonedas.Moneda_Id, 
	genMonedas.Descripcion as DescripcionMonedas,
	conAsientos.Cambio, conAsientos.CambioMonedaOriginal, conAsientos.Anulado, conAsientos.Observaciones,
	disFormularios.Formulario_Id , disFormularios.Descripcion as DescripcionFormulario, conAsientos.Posteado, 
		conAsientos.Especial, ISNULL(genSucursalesEmpr.Sucursal,' ') AS Sucursal
FROM conAsientos 
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_id = conAsientos.conAsientos
INNER JOIN genSegmentos ON  genSegmentos.genSegmentos = genAsiSegmentos.Segmento_id
INNER JOIN genUsuarios  ON genUsuarios.genUsuarios = conAsientos.Usuario_Id
LEFT JOIN genMonedas  ON genMonedas.genMonedas = conAsientos.Moneda_Id
INNER JOIN disFormularios  ON disFormularios.disFormularios = conAsientos.Formulario_Id
LEFT JOIN genSucursalesEmpr ON genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
WHERE  
	conAsientos.conAsientos = @pAsiento_id




if @pAsiento_Id is null
-- es nuevo
BEGIN

	SELECT comOCSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
		comOCSegmentos.Segmento1N, comOCSegmentos.Segmento2N,
		comOCSegmentos.Segmento3N, comOCSegmentos.Segmento4N,
		comOCSegmentos.Segmento1C, comOCSegmentos.Segmento2C,
		comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C,
		comOrdenComp.Fecha, comProveedores.Proveed_Id, comProveedores.RazonSocial, 
		genMonedas.Moneda_Id

	From comOCSegmentos 
	INNER JOIN comOrdenComp on comOCSegmentos.comOrdenComp = comOrdenComp.comOrdenComp
	INNER JOIN comProveedores ON comProveedores.genEntidades = comOrdenComp.Proveed_id
	INNER JOIN genMonedas ON genMonedas.genMonedas = comOrdenComp.Moneda_Id
	INNER JOIN genSegmentos	ON genSegmentos.genSegmentos = comOCSegmentos.Segmento_Id
	WHERE 
	
		comOCSegmentos.Empresa_Id =@pEmpresa_id and 
		comOCSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_id_OC) and
		comOCSegmentos.Segmento1N =@pSegmento1N_OC and
		comOCSegmentos.Segmento2N = @pSegmento2N_OC and
		comOCSegmentos.Segmento3N = @pSegmento3N_OC and
		comOCSegmentos.Segmento4N = @pSegmento4N_OC and
		comOCSegmentos.Segmento1C = @pSegmento1C_OC and
		comOCSegmentos.Segmento2C = @pSegmento2C_OC and 
		comOCSegmentos.Segmento3C = @pSegmento3C_OC and 
		comOCSegmentos.Segmento4C = @pSegmento4C_OC 
	ORDER BY 2


	SELECT comOCMemo.comOrdenComp,  comOCMemo.Renglon_OC, 
		comOCMemo.Detalle , conCuentas.Cuenta_Id, 
		conCuentas.Descripcion, comOCCuerpo.Cantidad, 
		comOCCuerpo.Cantidad_Recibida, comOCCuerpo.Cantidad - comOCCuerpo.Cantidad_Recibida as CantidadPendiente,
		conCentro1.Centro1_id, conCentro2.Centro2_id , 
		comOCCuerpo.Cantidad*0 as CantidadForm, ' ' as Observaciones, comOCCuerpo.Precio, 0 as conRenglon
	from comOCMemo INNER JOIN comOCCuerpo on
		comOCMemo.comOrdenComp = comOCCuerpo.comOrdenComp and 
		comOCMemo.Renglon_OC = comOCCuerpo.Renglon_OC
		inner join comOrdenComp ON
		comOrdenComp.comOrdenComp = comOCCuerpo.comOrdenComp 
		INNER JOIN comOCSegmentos ON
		comOCSegmentos.comOrdenComp = comOrdenComp.comOrdenComp
		INNER JOIN conCuentas ON conCuentas.conCuentas = comOCMemo.Cuenta_Id
		LEFT JOIN conCentro1 ON conCentro1.conCentro1 = comOCCuerpo.Centro1_Id
		LEFT JOIN conCentro2 ON conCentro2.conCentro2 = comOCCuerpo.Centro2_Id
		Where
			comOCCuerpo.Cantidad > comOCCuerpo.Cantidad_Recibida  and
			comOCCuerpo.Pendiente = 1 and 
			comOCSegmentos.Empresa_Id =@pEmpresa_id and 
			comOCSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_id_OC) and
			comOCSegmentos.Segmento1N =@pSegmento1N_OC and
			comOCSegmentos.Segmento2N = @pSegmento2N_OC and
			comOCSegmentos.Segmento3N = @pSegmento3N_OC and
			comOCSegmentos.Segmento4N = @pSegmento4N_OC and
			comOCSegmentos.Segmento1C = @pSegmento1C_OC and
			comOCSegmentos.Segmento2C = @pSegmento2C_OC and 
			comOCSegmentos.Segmento3C = @pSegmento3C_OC and 
			comOCSegmentos.Segmento4C = @pSegmento4C_OC 

end

else
begin


SELECT comOCSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
	comOCSegmentos.Segmento1N, comOCSegmentos.Segmento2N,
	comOCSegmentos.Segmento3N, comOCSegmentos.Segmento4N,
	comOCSegmentos.Segmento1C, comOCSegmentos.Segmento2C,
	comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C,
	comOrdenComp.Fecha, comProveedores.Proveed_Id, comProveedores.RazonSocial, 
	genMonedas.Moneda_Id

From comOCSegmentos 
INNER JOIN comOrdenComp on comOCSegmentos.comOrdenComp = comOrdenComp.comOrdenComp
INNER JOIN comProveedores ON comProveedores.genEntidades = comOrdenComp.Proveed_id
INNER JOIN genMonedas ON genMonedas.genMonedas = comOrdenComp.Moneda_Id
INNER JOIN genSegmentos	ON genSegmentos.genSegmentos = comOCSegmentos.Segmento_Id


WHERE 
	Exists(select 1 from comOcReceCuerpo where
		comOcReceCuerpo.comOcRecepcion = @pAsiento_Id and 
		comOcReceCuerpo.comOrdenComp =	comOrdenComp.comOrdenComp)


	SELECT comOCMemo.comOrdenComp,  comOCMemo.Renglon_OC, 
		comOCMemo.Detalle , conCuentas.Cuenta_Id, 
		conCuentas.Descripcion, comOCCuerpo.Cantidad, 
		comOCCuerpo.Cantidad_Recibida, comOCCuerpo.Cantidad - comOCCuerpo.Cantidad_Recibida as CantidadPendiente,
		conCentro1.Centro1_id, conCentro2.Centro2_id , 
		comOcReceCuerpo.Cantidad as CantidadForm, comOcReceCuerpo.Observaciones, comOCCuerpo.Precio, comOcReceCuerpo.conRenglon
	from comOcReceCuerpo INNER JOIN  comOCMemo ON
		comOcReceCuerpo.comOrdenComp = comOCMemo.comOrdenComp and 
		comOcReceCuerpo.Renglon_OC = comOCMemo.Renglon_OC
		INNER JOIN comOCCuerpo on
		comOCMemo.comOrdenComp = comOCCuerpo.comOrdenComp and 
		comOCMemo.Renglon_OC = comOCCuerpo.Renglon_OC
		inner join conMovCont ON
		conMovCont.conAsientos = comOcReceCuerpo.comOcRecepcion and 
		conMovCont.Renglon = comOcReceCuerpo.conRenglon
		INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
		LEFT JOIN conCentro1 ON conCentro1.conCentro1 = conMovCont.Centro1_Id
		LEFT JOIN conCentro2 ON conCentro2.conCentro2 = conMovCont.Centro2_Id
		Where
			comOcReceCuerpo.comOcRecepcion = @pAsiento_Id

end
Go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comOcReveRecepcionDatos.sql*/
-- exec comOcReveRecepcionDatos 1, 'REVOC', 1,0,0,0,'0001',' ',' ',' ', 'REOC',0,0,0,0,'',' ',' ',' '
DROP PROCEDURE comOcReveRecepcionDatos 
GO
CREATE PROCEDURE comOcReveRecepcionDatos (

@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20),
@pSegmento_Id_RE VarChar(10), 
@pSegmento1N_RE int,
@pSegmento2N_RE int,
@pSegmento3N_RE int,
@pSegmento4N_RE int,
@pSegmento1C_RE VarChar(20),
@pSegmento2C_RE VarChar(20),
@pSegmento3C_RE VarChar(20),
@pSegmento4C_RE VarChar(20)

)

as

SET NOCOUNT ON 

DECLARE @pAsiento_Id bigint
DECLARE @pAsiento_Id_Re bigint

SET @pAsiento_Id = (
SELECT Asiento_id from genAsiSegmentos where
	Empresa_Id = @pEmpresa_id and 
	Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_id) and
	Segmento1N =@pSegmento1N and
	Segmento2N = @pSegmento2N and
	Segmento3N = @pSegmento3N and
	Segmento4N = @pSegmento4N and
	Segmento1C = @pSegmento1C and
	Segmento2C = @pSegmento2C and 
	Segmento3C = @pSegmento3C and 
	Segmento4C = @pSegmento4C )



SELECT conAsientos.conAsientos, 
	genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C,
	conAsientos.Fecha, conAsientos.FechaRegistro,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, genMonedas.Moneda_Id, 
	genMonedas.Descripcion as DescripcionMonedas,
	conAsientos.Cambio, conAsientos.CambioMonedaOriginal, conAsientos.Anulado, conAsientos.Observaciones,
	disFormularios.Formulario_Id , disFormularios.Descripcion as DescripcionFormulario, conAsientos.Posteado, 
		conAsientos.Especial, ISNULL(genSucursalesEmpr.Sucursal,' ') AS Sucursal
FROM conAsientos 
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_id = conAsientos.conAsientos
INNER JOIN genSegmentos ON  genSegmentos.genSegmentos = genAsiSegmentos.Segmento_id
INNER JOIN genUsuarios  ON genUsuarios.genUsuarios = conAsientos.Usuario_Id
LEFT JOIN genMonedas  ON genMonedas.genMonedas = conAsientos.Moneda_Id
INNER JOIN disFormularios  ON disFormularios.disFormularios = conAsientos.Formulario_Id
LEFT JOIN genSucursalesEmpr ON genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
WHERE  
	conAsientos.conAsientos = @pAsiento_id






SET @pAsiento_Id_Re = (
SELECT Asiento_id from genAsiSegmentos where
	Empresa_Id = @pEmpresa_id and 
	Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_id_RE) and
	Segmento1N =@pSegmento1N_RE and
	Segmento2N = @pSegmento2N_RE and
	Segmento3N = @pSegmento3N_RE and
	Segmento4N = @pSegmento4N_RE and
	Segmento1C = @pSegmento1C_RE and
	Segmento2C = @pSegmento2C_RE and 
	Segmento3C = @pSegmento3C_RE and 
	Segmento4C = @pSegmento4C_RE )



			
if @pAsiento_Id is null
-- es nuevo
BEGIN


	SELECT genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
		genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
		genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
		genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
		genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
		conAsientos.Fecha, comProveedores.Proveed_Id, comProveedores.RazonSocial, 
		genMonedas.Moneda_Id, conAsientos.Cambio, conAsientos.conAsientos
	From genAsiSegmentos 
	INNER JOIN conAsientos on conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
	inner join (select distinct comOcReceCuerpo.comOrdenComp, comOcReceCuerpo.comOcRecepcion 
		from comOcReceCuerpo ) as comOcRecepcion ON
		comOcRecepcion.comOcRecepcion = conAsientos.conAsientos
	INNER JOIN comOrdenComp ON  comOrdenComp.comOrdenComp = comOcRecepcion.comOrdenComp
	INNER JOIN comProveedores ON comProveedores.genEntidades = comOrdenComp.Proveed_id
	INNER JOIN genMonedas ON genMonedas.genMonedas = comOrdenComp.Moneda_Id
	INNER JOIN genSegmentos	ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	Where
			comOcRecepcion.comOcRecepcion = @pAsiento_Id_Re

	SELECT comOCMemo.comOrdenComp,  comOCMemo.Renglon_OC, 
		comOCMemo.Detalle , conCuentas.Cuenta_Id, 
		conCuentas.Descripcion, comOCCuerpo.Cantidad, 
		conCentro1.Centro1_id, conCentro2.Centro2_id , 
		comOcReceCuerpo.Cantidad as Cantidad_Recibida, 
		comOcReceCuerpo.Cantidad*0 as CantidadForm, 
			comOcReceCuerpo.Observaciones, comOCCuerpo.Precio, comOcReceCuerpo.conRenglon
	from comOcReceCuerpo INNER JOIN  comOCMemo ON
		comOcReceCuerpo.comOrdenComp = comOCMemo.comOrdenComp and 
		comOcReceCuerpo.Renglon_OC = comOCMemo.Renglon_OC
		INNER JOIN comOCCuerpo on
		comOCMemo.comOrdenComp = comOCCuerpo.comOrdenComp and 
		comOCMemo.Renglon_OC = comOCCuerpo.Renglon_OC
		inner join conMovCont ON
		conMovCont.conAsientos = comOcReceCuerpo.comOcRecepcion and 
		conMovCont.Renglon = comOcReceCuerpo.conRenglon
		INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
		LEFT JOIN conCentro1 ON conCentro1.conCentro1 = conMovCont.Centro1_Id
		LEFT JOIN conCentro2 ON conCentro2.conCentro2 = conMovCont.Centro2_Id
		Where
			comOcReceCuerpo.comOcRecepcion = @pAsiento_Id_re

end

ELSE
begin

	
	SELECT genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
		genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
		genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
		genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
		genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
		conAsientos.Fecha, comProveedores.Proveed_Id, comProveedores.RazonSocial, 
		genMonedas.Moneda_Id, conAsientos.Cambio, conAsientos.conAsientos
	From genAsiSegmentos 
	INNER JOIN conAsientos on conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
	INNER JOIN comOCAntiRecepcion ON comOCAntiRecepcion.comOcRecepcion = conAsientos.conAsientos
	inner join (select distinct comOcReceCuerpo.comOrdenComp, comOcReceCuerpo.comOcRecepcion 
		from comOcReceCuerpo ) as comOcRecepcion ON
		comOcRecepcion.comOcRecepcion = conAsientos.conAsientos
	INNER JOIN comOrdenComp ON  comOrdenComp.comOrdenComp = comOcRecepcion.comOrdenComp
	INNER JOIN comProveedores ON comProveedores.genEntidades = comOrdenComp.Proveed_id
	INNER JOIN genMonedas ON genMonedas.genMonedas = comOrdenComp.Moneda_Id
	INNER JOIN genSegmentos	ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	Where
			comOCAntiRecepcion.comAntiRecepcion = @pAsiento_Id


	SELECT comOCMemo.comOrdenComp,  comOCMemo.Renglon_OC, 
		comOCMemo.Detalle , conCuentas.Cuenta_Id, 
		conCuentas.Descripcion, comOCCuerpo.Cantidad, 
		conCentro1.Centro1_id, conCentro2.Centro2_id , 
		comOcReceCuerpo.Cantidad as Cantidad_Recibida, 
		-comOcReceCuerpoAnti.Cantidad as CantidadForm, 
			comOcReceCuerpo.Observaciones, comOCCuerpo.Precio, comOcReceCuerpo.conRenglon
	from comOcReceCuerpo INNER JOIN  comOCMemo ON
		comOcReceCuerpo.comOrdenComp = comOCMemo.comOrdenComp and 
		comOcReceCuerpo.Renglon_OC = comOCMemo.Renglon_OC
		INNER JOIN comOCCuerpo on
		comOCMemo.comOrdenComp = comOCCuerpo.comOrdenComp and 
		comOCMemo.Renglon_OC = comOCCuerpo.Renglon_OC
		inner join conMovCont ON
		conMovCont.conAsientos = comOcReceCuerpo.comOcRecepcion and 
		conMovCont.Renglon = comOcReceCuerpo.conRenglon
		INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
		INNER JOIN comOCAntiRecepcion on comOCAntiRecepcion.comOcRecepcion = comOcReceCuerpo.comOcRecepcion
		INNER JOIN comOcReceCuerpo AS comOcReceCuerpoAnti on 
			comOcReceCuerpoAnti.comOcRecepcion = comOCAntiRecepcion.comAntiRecepcion and 
			comOcReceCuerpo.comOrdenComp = comOcReceCuerpoAnti.comOrdenComp and
			comOcReceCuerpo.conRenglon = comOcReceCuerpoAnti.conRenglon
		LEFT JOIN conCentro1 ON conCentro1.conCentro1 = conMovCont.Centro1_Id
		LEFT JOIN conCentro2 ON conCentro2.conCentro2 = conMovCont.Centro2_Id
		Where
			comOCAntiRecepcion.comAntiRecepcion = @pAsiento_Id


end
Go



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comOCSegmentos.sql*/
DROP PROCEDURE comOCSegmentosInsertar
GO
CREATE PROCEDURE comOCSegmentosInsertar
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pcomOrdenComp int 
)
AS
BEGIN 
	INSERT INTO comOCSegmentos
	(
		Empresa_Id,
		Segmento_Id,
		Segmento1N,
		Segmento2N,
		Segmento3N,
		Segmento4N,
		Segmento1C,
		Segmento2C,
		Segmento3C,
		Segmento4C,
		comOrdenComp
	)
	VALUES 
	(
		@pEmpresa_Id,
		dbo.FuncFKgenSegmentos(@pSegmento_Id),
		@pSegmento1N,
		@pSegmento2N,
		@pSegmento3N,
		@pSegmento4N,
		@pSegmento1C,
		@pSegmento2C,
		@pSegmento3C,
		@pSegmento4C,
		@pcomOrdenComp
	)
END 

GO

DROP PROCEDURE comOCSegmentosDatos
GO
CREATE PROCEDURE comOCSegmentosDatos
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20)
)
AS
SET NOCOUNT ON 

SELECT comOCSegmentos.Empresa_Id, genSegmentos.Segmento_Id, genSegmentos.Descripcion as DescripcionSegmentos, comOCSegmentos.Segmento1N,
	comOCSegmentos.Segmento2N, comOCSegmentos.Segmento3N, comOCSegmentos.Segmento4N, comOCSegmentos.Segmento1C,
	comOCSegmentos.Segmento2C, comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C
FROM comOCSegmentos 
INNER JOIN genSegmentos  ON (genSegmentos.genSegmentos = comOCSegmentos.Segmento_Id)
LEFT JOIN comOrdenComp  ON (comOrdenComp.comOrdenComp = comOCSegmentos.comOrdenComp)
WHERE (comOCSegmentos.Empresa_Id = @pEmpresa_Id)
AND (genSegmentos.Segmento_Id = @pSegmento_Id)
AND (Segmento1N = @pSegmento1N)
AND (Segmento2N = @pSegmento2N)
AND (Segmento3N = @pSegmento3N)
AND (Segmento4N = @pSegmento4N)
AND (Segmento1C = @pSegmento1C)
AND (Segmento2C = @pSegmento2C)
AND (Segmento3C = @pSegmento3C)
AND (Segmento4C = @pSegmento4C)
 
 RETURN @@Error 

GO

DROP PROCEDURE comOCSegmentosEliminar
GO
CREATE PROCEDURE comOCSegmentosEliminar
(
@pEmpresa_Id int ,
@pSegmento_Id varchar(10),
@pSegmento1N int = NULL,
@pSegmento2N int = NULL,
@pSegmento3N int = NULL,
@pSegmento4N int = NULL,
@pSegmento1C varchar(20) = NULL,
@pSegmento2C varchar(20) = NULL,
@pSegmento3C varchar(20) = NULL,
@pSegmento4C varchar(20) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comOCSegmentos 
WHERE (Empresa_Id = @pEmpresa_Id)
AND (Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id))
AND (Segmento1N = ISNULL(@pSegmento1N, Segmento1N))
AND (Segmento2N = ISNULL(@pSegmento2N, Segmento2N))
AND (Segmento3N = ISNULL(@pSegmento3N, Segmento3N))
AND (Segmento4N = ISNULL(@pSegmento4N, Segmento4N))
AND (Segmento1C = ISNULL(@pSegmento1C, Segmento1C))
AND (Segmento2C = ISNULL(@pSegmento2C, Segmento2C))
AND (Segmento3C = ISNULL(@pSegmento3C, Segmento3C))
AND (Segmento4C = ISNULL(@pSegmento4C, Segmento4C))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comOrdenComp.sql*/


-- comordencompDatos 1, 'OC',0,0,0,0, ' ',' ',' ',' '
DROP PROCEDURE comOrdenCompGuardar
GO
CREATE PROCEDURE comOrdenCompGuardar
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pTieneAutomatico bit,
@pFecha qFecha,
@pProveed_Id VarChar(15) = NULL,
@pTipoPermi_Id varchar(5) = NULL,
@pMoneda_Id varchar(3) = NULL,
@pAutorizo int = NULL,
@pCondPago_Id varchar(5) = NULL,
@pImpreso Sino,
@pObservaciones QMemo = NULL,
@pEstado_Id char(1),
@pSaldo_Anticipo qMonedaD2,
@pImporteImpuestos qMonedaD2,
@pSaldo_NC qMonedaD2,
@pCambio qMonedaD8,
@pUsuario_Id int,
@pPosteado Sino
)
AS
SET NOCOUNT ON 
DECLARE @pComOrdenComp as Int
SET @pComOrdenComp = (SELECT comOrdenComp 
	FROM comOCSegmentos WHERE 
	(Empresa_Id = @pEmpresa_Id) AND 
	(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
	(Segmento1N = @pSegmento1N) AND 
	(Segmento2N = @pSegmento2N) AND 
	(Segmento3N = @pSegmento3N) AND 
	(Segmento4N = @pSegmento4N) AND 
	(Segmento1C = @pSegmento1C) AND 
	(Segmento2C = @pSegmento2C) AND 
	(Segmento3C = @pSegmento3C) AND 
	(Segmento4C = @pSegmento4C))

IF (@pComOrdenComp is not null)

BEGIN 
	UPDATE comOrdenComp
	SET		
		Fecha = @pFecha,
		Proveed_Id = dbo.FuncFKcomProveedores(@pProveed_Id),
		TipoPermi_Id = dbo.FuncFKcomTipoPermi(@pTipoPermi_Id),
		Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id),
		Autorizo = @pAutorizo,
		CondPago_Id = dbo.FuncFKcomConPago(@pCondPago_Id),
		Impreso = @pImpreso,
		Observaciones = @pObservaciones,
		Estado_Id = @pEstado_Id,
		Saldo_Anticipo = @pSaldo_Anticipo,
		ImporteImpuestos = @pImporteImpuestos,
		Saldo_NC = @pSaldo_NC,
		Cambio = @pCambio,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE 
		comOrdencomp.comOrdencomp = @pcomOrdencomp
END 
ELSE 
-- Si tiene Automatico Averiguo cual Sigue
BEGIN

		if ((@pTieneAutomatico=1) AND (@pSegmento1N = 0))
		BEGIN
			
			set @pSegmento1N = (SELECT MAX(Segmento1N) 
				FROM 	comOcSegmentos inner join genSegmentos ON
				comOcSegmentos.Segmento_id = genSegmentos.genSegmentos
				WHERE
				(comOcSegmentos.Empresa_Id = @pEmpresa_Id) AND 
				(genSegmentos.Segmento_Id = @pSegmento_Id) AND 
				(Segmento2N = @pSegmento2N) AND 
				(Segmento3N = @pSegmento3N) AND 
				(Segmento4N = @pSegmento4N) AND 
				(Segmento1C = @pSegmento1C) AND 
				(Segmento2C = @pSegmento2C) AND 
				(Segmento3C = @pSegmento3C) AND 
				(Segmento4C = @pSegmento4C)) + 1

			If @pSegmento1N Is Null
			SET @pSegmento1N = (SELECT genContadorSegmento.PrimerNumero AS Segmento1N 
				FROM genContadorSegmento Where
					(genContadorSegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
					(genContadorSegmento.Segmento2N = @pSegmento2N) AND 
					(genContadorSegmento.Segmento3N = @pSegmento3N) AND 
					(genContadorSegmento.Segmento4N = @pSegmento4N) AND 
					(genContadorSegmento.Segmento1C = @pSegmento1C) AND 
					(genContadorSegmento.Segmento2C = @pSegmento2C) AND 
					(genContadorSegmento.Segmento3C = @pSegmento3C) AND 
					(genContadorSegmento.Segmento4C = @pSegmento4C) And
					genContadorSegmento.Empresa_Id = @pEmpresa_Id)

			If @pSegmento1N Is Null 
				Set @pSegmento1N = 1

		END

		/* FM 08/06/2020 Corregir el BE para que no pase esto
		if (@pSegmento1N = 0)
			SET @pSegmento1N = 1
		*/
	INSERT INTO comOrdenComp
	(
		Fecha,
		Proveed_Id,
		TipoPermi_Id,
		Moneda_Id,
		Autorizo,
		CondPago_Id,
		Impreso,
		Observaciones,
		Estado_Id,
		Saldo_Anticipo,
		ImporteImpuestos,
		Saldo_NC,
		Cambio,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pFecha,
		dbo.FuncFKcomProveedores(@pProveed_Id),
		dbo.FuncFKcomTipoPermi(@pTipoPermi_Id),
		dbo.FuncFKgenMonedas(@pMoneda_Id),
		@pAutorizo,
		dbo.FuncFKcomConPago(@pCondPago_Id),
		@pImpreso,
		@pObservaciones,
		@pEstado_Id,
		@pSaldo_Anticipo,
		@pImporteImpuestos,
		@pSaldo_NC,
		@pCambio,
		@pUsuario_Id,
		@pPosteado
	)
	
	SET @pComOrdencomp =  Cast(SCOPE_IDENTITY() as int) 
	
	-- Inserto en la Cabecera
	EXEC comOCSegmentosInsertar @pEmpresa_Id ,@pSegmento_Id , @pSegmento1N ,@pSegmento2N ,
		@pSegmento3N ,@pSegmento4N , @pSegmento1C ,@pSegmento2C ,@pSegmento3C ,
		@pSegmento4C , @pComOrdenComp
		
	
END 

Select @pComOrdencomp as RetVal 

GO


DROP PROCEDURE comOrdenCompDatos
GO
CREATE PROCEDURE comOrdenCompDatos
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20)
)
AS
SET NOCOUNT ON 

DECLARE @pComOrdenComp as Int
SET @pComOrdenComp = (SELECT comOrdenComp 
	FROM comOCSegmentos WHERE 
	(Empresa_Id = @pEmpresa_Id) AND 
	(Segmento_Id = dbo.FuncFkgenSegmentos(@pSegmento_Id)) AND 
	(Segmento1N = @pSegmento1N) AND 
	(Segmento2N = @pSegmento2N) AND 
	(Segmento3N = @pSegmento3N) AND 
	(Segmento4N = @pSegmento4N) AND 
	(Segmento1C = @pSegmento1C) AND 
	(Segmento2C = @pSegmento2C) AND 
	(Segmento3C = @pSegmento3C) AND 
	(Segmento4C = @pSegmento4C))



SELECT comOrdenComp.comOrdenComp, comOCSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
	comOCSegmentos.Segmento1N,comOCSegmentos.Segmento2N, comOCSegmentos.Segmento3N, comOCSegmentos.Segmento4N, 
	comOCSegmentos.Segmento1C, comOCSegmentos.Segmento2C, comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C,
	comOrdenComp.Fecha, comProveedores.Proveed_Id, comProveedores.RazonSocial as DescripcionProveedores,
	comTipoPermi.TipoPermi_Id, comTipoPermi.Descripcion as DescripcionTipoPermi, 
	genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas, comOrdenComp.Autorizo as NroUsuAuto,
	Autorizo.Usuario_Id as Autorizo, Autorizo.Apellido_y_Nombres as DescripcionUsuarioAutorizo, 
	comConPago.CondPago_Id, comConPago.Descripcion as DescripcionConPago,
	comOrdenComp.Impreso, comOrdenComp.Observaciones, 
	comOcEstados.Estado_Id, comOcEstados.Descripcion as DescripcionOcEstados,
	comOrdenComp.Saldo_Anticipo, comOrdenComp.ImporteImpuestos, 
	comOrdenComp.Saldo_NC, comOrdenComp.Cambio,
	genUsuarios2.Usuario_Id, genUsuarios2.Apellido_y_Nombres as DescripcionUsuario, 
	comOrdenComp.Posteado, comTipoPermi.TipoCuerpo, 
	ISNULL((SELECT SUM(Cantidad*Precio) from comOCCuerpo where
			comOCCuerpo.comOrdenComp = comOrdenComp.comOrdenComp),0) as SubTotal,
	comOrdenComp.ImporteImpuestos + ISNULL((SELECT SUM(Cantidad*Precio) from comOCCuerpo where
			comOCCuerpo.comOrdenComp = comOrdenComp.comOrdenComp),0) as Total, dbo.FechaActual() as FechaNueva
FROM comOrdenComp 
LEFT JOIN comProveedores  ON (comProveedores.genEntidades = comOrdenComp.Proveed_Id)
LEFT JOIN comTipoPermi  ON (comTipoPermi.comTipoPermi = comOrdenComp.TipoPermi_Id)
LEFT JOIN genMonedas  ON (genMonedas.genMonedas = comOrdenComp.Moneda_Id)
LEFT JOIN genUsuarios  as Autorizo ON (Autorizo.genUsuarios = comOrdenComp.Autorizo)
LEFT JOIN comConPago  ON (comConPago.comConPago = comOrdenComp.CondPago_Id)
INNER JOIN comOcEstados  ON (comOcEstados.Estado_Id = comOrdenComp.Estado_Id)
INNER JOIN genUsuarios genUsuarios2 ON (genUsuarios2.genUsuarios = comOrdenComp.Usuario_Id)
INNER JOIN comOcSegmentos ON comOcSegmentos.comOrdencomp = comOrdencomp.comOrdenComp
INNER JOIN genSegmentos  ON (genSegmentos.genSegmentos = comOCSegmentos.Segmento_Id)
WHERE  
	comOrdenComp.comOrdenComp = @pComOrdenComp

 exec comOcArticuloDatos @pComOrdenComp
 exec comOCMemoDatos @pComOrdenComp
 Exec genAtributosGeneralesIdentityDatos @pComOrdenComp, 'comOrdenComp'
 exec comOCAutorizandoDatos @pComOrdenComp, null

-- Solo necesito la estructura porque se llama a demanda desde otra acci?n --
exec genAdjuntosIdentityDatos 'comOrdenComp', 0

RETURN @@Error 

GO

DROP PROCEDURE comOrdenCompEliminar
GO
CREATE PROCEDURE comOrdenCompEliminar
(
 @pComordencomp int
)
AS
SET NOCOUNT ON 

DELETE FROM comOrdenComp 
WHERE  
	comordencomp = @pComordencomp
 RETURN @@Error 

GO

DROP PROCEDURE comOrdenCompDatosInt
GO
CREATE PROCEDURE comOrdenCompDatosInt
( @pComOrdenComp int)
as
	select comOcSegmentos.comOrdenComp, comOCSegmentos.Empresa_Id, genSegmentos.Segmento_Id,
	comOCSegmentos.Segmento1N,comOCSegmentos.Segmento2N, comOCSegmentos.Segmento3N, comOCSegmentos.Segmento4N, 
	comOCSegmentos.Segmento1C, comOCSegmentos.Segmento2C, comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C
	from comOcSegmentos INNER JOIN genSegmentos ON
	comOcSegmentos.Segmento_Id = genSegmentos.genSegmentos
	Where
	comOcSegmentos.comOrdenComp = @pcomOrdenComp

GO

DROP PROCEDURE comOrdenCompCambiarEstado
GO

CREATE PROCEDURE comOrdenCompCambiarEstado(
	@pComOrdenComp Int, 
	@pEstado_Id Char(1),
	@pUsuario_Id Int
	)
	as
	
	Update ComOrdenComp set Estado_Id = @pEstado_Id,
		Autorizo = 
			case when @pEstado_Id IN ('R','A') THEN @pUsuario_id else Autorizo end
	Where
		comOrdenComp = @pComOrdenComp
GO		
			
	

	
	
	
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comOrdenCompDatosCons.sql*/
-- comOrdenCompDatosCons 1, 'OC', 290,0,0,0,'0001',' ',' ',' '
DROP PROCEDURE comOrdenCompDatosCons
GO
CREATE PROCEDURE comOrdenCompDatosCons
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20)
)
AS

DECLARE @lComOrdenComp as Int
SET @lComOrdenComp = (SELECT comOrdenComp 
	FROM comOCSegmentos WHERE 
	(Empresa_Id = @pEmpresa_Id) AND 
	(Segmento_Id = dbo.FuncFkgenSegmentos(@pSegmento_Id)) AND 
	(Segmento1N = @pSegmento1N) AND 
	(Segmento2N = @pSegmento2N) AND 
	(Segmento3N = @pSegmento3N) AND 
	(Segmento4N = @pSegmento4N) AND 
	(Segmento1C = @pSegmento1C) AND 
	(Segmento2C = @pSegmento2C) AND 
	(Segmento3C = @pSegmento3C) AND 
	(Segmento4C = @pSegmento4C))

Exec comOrdenCompDatos @pEmpresa_Id, @pSegmento_Id, @pSegmento1N, @pSegmento2N, @pSegmento3N, @pSegmento4N, @pSegmento1C, @pSegmento2C, @pSegmento3C, @pSegmento4C

-- Para mostrar las cantidad recibidas/facturadas por rengl?n --
Select '' Producto_Id, '' Descripcion, '' Medida_Id, Cast(0 As numeric(19,8)) CantidadPedida, Cast(0 As numeric(19,8)) CantidadRecibida,
	Cast(0 As numeric(19,8)) CantidadPendRec, Cast(0 As numeric(19,8)) CantidadFacturada, Cast(0 As numeric(19,8)) CantidadPendFac, 
		Cast(0 As numeric(19,8)) CantidadConsignada

-- Para mostrar una grilla de las recepciones por rengl?n --
Select getDate() Fecha, '' Recepcion, '' Medida_Id, Cast(0 As numeric(19,8)) Cantidad, '' Deposito_Id, '' Observacion

-- Para mostrar una grilla de las facturas recibidas por rengl?n --
Select getDate() Fecha, '' Comprobante, '' Medida_Id, Cast(0 As numeric(19,8)) Cantidad

-- Para mostrar una grilla con todas las recepciones de la OC --
Select Distinct conAsientos.conAsientos, conAsientos.Fecha, dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Recepcion
From comOcReceCuerpo
Inner Join conAsientos On conAsientos.conAsientos = comOcReceCuerpo.comOcRecepcion
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
Where comOcReceCuerpo.comOrdenComp = @lComOrdenComp
Union all
Select Distinct conAsientos.conAsientos, conAsientos.Fecha, dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Recepcion
From stkMoviOC
Inner Join conAsientos On conAsientos.conAsientos = stkMoviOC.stkMoviCabe
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
Where stkMoviOC.comOrdenComp = @lComOrdenComp And conAsientos.Posteado = 1 And conAsientos.Anulado = 0


-- Para mostrar una grilla con todas las facturas de la OC --
Select Distinct conAsientos.conAsientos, conAsientos.Fecha, dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Comprobante
From comMovPOC
Inner Join conAsientos On conAsientos.conAsientos = comMovPOC.comMovProv
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
Where comMovPOC.comOrdenComp = @lComOrdenComp And conAsientos.Posteado = 1 And conAsientos.Anulado = 0

select comocRI.Renglon_OC,
genSegmentos.Segmento_Id, comRISegmento.Segmento1N, comRISegmento.Segmento2N, comRISegmento.Segmento3N, comRISegmento.Segmento4N, comRISegmento.Segmento1C, comRISegmento.Segmento2C, comRISegmento.Segmento3C,
comRISegmento.Segmento4C, 
	dbo.Segmento(comRISegmento.Segmento_Id, comRISegmento.Segmento1C, Segmento2C, Segmento3C, Segmento4C, Segmento1N, Segmento2N, Segmento3N, Segmento4N) as SegmentoSTR 
from comOCRI
inner join comRISegmento on comRISegmento.comReqInterno=comOCRI.comReqInterno
inner join genSegmentos on genSegmentos.genSegmentos=comRISegmento.Segmento_Id
where comOCRI.comOrdenComp=@lComOrdenComp
order by 1
RETURN @@Error 

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comOrdenCompDesechado.sql*/
DROP PROCEDURE comOrdenCompDesechadoGuardar
GO
CREATE PROCEDURE comOrdenCompDesechadoGuardar
(
@pcomOrdenComp int,
@pUsuario_Id int,
@pFecha datetime
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comOrdenCompDesechado WHERE (comOrdenComp = @pcomOrdenComp)))
BEGIN 
	UPDATE comOrdenCompDesechado
	SET		Usuario_Id = @pUsuario_Id,
		Fecha = @pFecha
	WHERE (comOrdenComp = @pcomOrdenComp)
END 
ELSE 
BEGIN 
	INSERT INTO comOrdenCompDesechado
	(
		comOrdenComp,
		Usuario_Id,
		Fecha
	)
	VALUES 
	(
		@pcomOrdenComp,
		@pUsuario_Id,
		@pFecha
	)
END 

GO

DROP PROCEDURE comOrdenCompDesechadoDatos
GO
CREATE PROCEDURE comOrdenCompDesechadoDatos
(
@pcomOrdenComp int
)
AS
SET NOCOUNT ON 

SELECT comOrdenCompDesechado.comOrdenComp, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, 
	comOrdenCompDesechado.Fecha
FROM comOrdenCompDesechado 
INNER JOIN comOrdenComp  ON (comOrdenComp.comOrdenComp = comOrdenCompDesechado.comOrdenComp)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = comOrdenCompDesechado.Usuario_Id)
WHERE (comOrdenCompDesechado.comOrdenComp = @pcomOrdenComp)
 
 RETURN @@Error 

GO

DROP PROCEDURE comOrdenCompDesechadoEliminar
GO
CREATE PROCEDURE comOrdenCompDesechadoEliminar
(
@pcomOrdenComp int
)
AS
SET NOCOUNT ON 

DELETE FROM comOrdenCompDesechado 
WHERE (comOrdenComp = @pcomOrdenComp)
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comOrdenCompSePuedeModificar.sql*/

DROP PROCEDURE comOrdenCompSePuedeModificar
GO

CREATE PROCEDURE comOrdenCompSePuedeModificar(

@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20)

)
AS

select 'Tiene_Facturas' as Mensaje
from comOrdenComp 
INNER JOIN comOCSegmentos ON comOrdenComp.comOrdenComp =comOCSegmentos.comOrdenComp
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = comOCSegmentos.Segmento_Id
where
(exists(SELECT 1 FROM comMovpoc WHERE comMovpoc.comOrdenComp = comOrdenComp.comOrdenComp) or
exists(SELECT 1 FROM comOCMovProv WHERE comOCMovProv.comOrdenComp = comOrdenComp.comOrdenComp) ) and 
genSegmentos.Segmento_Id = @pSegmento_Id and 
comOCSegmentos.Segmento1N = @pSegmento1N AND 
comOCSegmentos.Segmento2N = @pSegmento2N AND 
comOCSegmentos.Segmento3N = @pSegmento3N AND 
comOCSegmentos.Segmento4N = @pSegmento4N AND 
comOCSegmentos.Segmento1C = @pSegmento1C AND 
comOCSegmentos.Segmento2C = @pSegmento2C AND 
comOCSegmentos.Segmento3C = @pSegmento3C AND 
comOCSegmentos.Segmento4C = @pSegmento4C AND 
comOCSegmentos.Empresa_Id = @pEmpresa_Id
UNION ALL
select 'Tiene_Entregas' as Mensaje
from comOrdenComp 
INNER JOIN comOCSegmentos ON comOrdenComp.comOrdenComp =comOCSegmentos.comOrdenComp
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = comOCSegmentos.Segmento_Id
where
exists(SELECT 1 FROM stkMoviOC WHERE stkMoviOC.comOrdenComp = comOrdenComp.comOrdenComp) and 
genSegmentos.Segmento_Id = @pSegmento_Id and 
comOCSegmentos.Segmento1N = @pSegmento1N AND 
comOCSegmentos.Segmento2N = @pSegmento2N AND 
comOCSegmentos.Segmento3N = @pSegmento3N AND 
comOCSegmentos.Segmento4N = @pSegmento4N AND 
comOCSegmentos.Segmento1C = @pSegmento1C AND 
comOCSegmentos.Segmento2C = @pSegmento2C AND 
comOCSegmentos.Segmento3C = @pSegmento3C AND 
comOCSegmentos.Segmento4C = @pSegmento4C AND 
comOCSegmentos.Empresa_Id = @pEmpresa_Id
UNION ALL
select 'Es_Por_Requerimiento_Interno' as Mensaje
from comOrdenComp 
INNER JOIN comOCSegmentos ON comOrdenComp.comOrdenComp =comOCSegmentos.comOrdenComp
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = comOCSegmentos.Segmento_Id
where
exists(SELECT 1 FROM comOCRi WHERE comOCRi.comOrdenComp = comOrdenComp.comOrdenComp) and 
genSegmentos.Segmento_Id = @pSegmento_Id and 
comOCSegmentos.Segmento1N = @pSegmento1N AND 
comOCSegmentos.Segmento2N = @pSegmento2N AND 
comOCSegmentos.Segmento3N = @pSegmento3N AND 
comOCSegmentos.Segmento4N = @pSegmento4N AND 
comOCSegmentos.Segmento1C = @pSegmento1C AND 
comOCSegmentos.Segmento2C = @pSegmento2C AND 
comOCSegmentos.Segmento3C = @pSegmento3C AND 
comOCSegmentos.Segmento4C = @pSegmento4C AND 
comOCSegmentos.Empresa_Id = @pEmpresa_Id
GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comOrdenCompTienePendEntrega.sql*/
DROP PROCEDURE comOrdenCompTienePendEntrega 
GO
CREATE PROCEDURE comOrdenCompTienePendEntrega (
	@comOrdenComp Int 
)

AS

DECLARE @Cant INT

SET @Cant = (SELECT COUNT(1) FROM comOCCuerpo where 
	comOCCuerpo.comOrdenComp = @comOrdenComp and 
	comOCCuerpo.Pendiente = 1
	)
	
SELECT @comOrdenComp as comOrdenComp , cast(CASE WHEN @Cant > 0 then 1 else 0 end	as Bit) Pendiente
GO
	

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comOrdenCompTienePendFact.sql*/
DROP PROCEDURE comOrdenCompTienePendFact 
GO
CREATE PROCEDURE comOrdenCompTienePendFact (
	@comOrdenComp Int 
)

AS

DECLARE @Cant INT

SET @Cant = (SELECT COUNT(1) FROM comOCCuerpo where 
	comOCCuerpo.comOrdenComp = @comOrdenComp and 
	comOCCuerpo.Cantidad_Facturada - comOCCuerpo.Cantidad_Creditos < comOCCuerpo.Cantidad
	)
	
SELECT @comOrdenComp as comOrdenComp , cast(CASE WHEN @Cant > 0 then 1 else 0 end	as Bit) Pendiente
GO
	

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comOrigenesFiscales.sql*/
DROP PROCEDURE comOrigenesFiscalesGuardar
GO
CREATE PROCEDURE comOrigenesFiscalesGuardar
(
@pOrigen_Id smallint,
@pOrigen_Id_Nuevo smallint,
@pDescripcion varchar(35),
@pDominio_Id char(2) = NULL
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM comOrigenesFiscales WHERE (Origen_Id = @pOrigen_Id)))
BEGIN 
	UPDATE comOrigenesFiscales
	SET		@lIdentidad = comOrigenesFiscales,
		Origen_Id = @pOrigen_Id_Nuevo,
		Descripcion = @pDescripcion,
		Dominio_Id = @pDominio_Id
	WHERE (Origen_Id = @pOrigen_Id)
END 
ELSE 
BEGIN 
	INSERT INTO comOrigenesFiscales
	(
		Origen_Id,
		Descripcion,
		Dominio_Id
	)
	VALUES 
	(
		@pOrigen_Id,
		@pDescripcion,
		@pDominio_Id
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE comOrigenesFiscalesDatos
GO
CREATE PROCEDURE comOrigenesFiscalesDatos
(
@pOrigen_Id smallint
)
AS
SET NOCOUNT ON 

SELECT comOrigenesFiscales.comOrigenesFiscales, comOrigenesFiscales.Origen_Id, comOrigenesFiscales.Descripcion, comOrigenesFiscales.Dominio_Id,
	genDominios.Descripcion as DescripcionDominios
FROM comOrigenesFiscales 
LEFT JOIN genDominios  ON (genDominios.Dominio_Id = comOrigenesFiscales.Dominio_Id)
WHERE (Origen_Id = @pOrigen_Id)
 


 Declare @pidentity bigint= dbo.FuncFKcomOrigenesFiscales(@pOrigen_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'comOrigenesFiscales'
 RETURN @@Error 

GO

DROP PROCEDURE comOrigenesFiscalesEliminar
GO
CREATE PROCEDURE comOrigenesFiscalesEliminar
(
@pOrigen_Id smallint = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comOrigenesFiscales 
WHERE (Origen_Id = @pOrigen_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKcomOrigenesFiscales
GO

CREATE FUNCTION FuncFKcomOrigenesFiscales
(
@pOrigen_Id smallint
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = comOrigenesFiscales FROM comOrigenesFiscales WHERE 
	Origen_Id = @pOrigen_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comPagosAnticipoDatos.sql*/
DROP PROCEDURE comPagosAnticipoGuardar
GO
CREATE PROCEDURE comPagosAnticipoGuardar
(
@pProveed_Id varChar(15),
@pMoneda_Id varChar(5),
@pEmpresa_Id int,
@pImporte qMonedaD2,
@pTipoCtaProv int,
@pCuenta_Id varchar(25),
@pUsuario_Id int,
@ptesMovimientos bigint=NULL, 
@pcomEmbarques bigint=NULL ,
@pFechaPago DateTime
)
AS
	INSERT INTO comPagosAnticipo
	(
		Proveed_Id,
		Moneda_Id,
		Empresa_Id,
		Importe,
		TipoCtaProv,
		Cuenta_Id,
		Usuario_Id,
		tesMovimientos, 
		ComEmbarques, 
		FechaPago
	)
	VALUES 
	(
		dbo.FuncFKcomProveedores(@pProveed_Id),
		dbo.FuncFKgenMonedas(@pMoneda_Id),
		@pEmpresa_Id,
		@pImporte,
		@pTipoCtaProv,
		dbo.FuncFKconCuentas(@pCuenta_Id),
		@pUsuario_Id,
		@ptesMovimientos, 
		@pComEmbarques,
		@pFechaPago
	)

Select Cast(SCOPE_IDENTITY() as int)  as RetVal 

GO

DROP PROCEDURE comPagosAnticipoDatos
GO
CREATE PROCEDURE comPagosAnticipoDatos
(
@pProveed_Id varChar(15),
@pMoneda_Id varchar(5),
@pEmpresa_Id int, 
@pFechaPago DateTime=NULL
)
AS
SET NOCOUNT ON 

SELECT comProveedores.Proveed_Id, genMonedas.Moneda_Id, genMonedas.Descripcion DescripcionMoneda,
	comPagosAnticipo.Importe as ImporteHabilitado, comPagosAnticipo.TipoCtaProv,
	comProveedoresTipoPasivo.Descripcion as DescripcionProveedoresTipoPasivo, conCuentas.Cuenta_Id, 
	conCuentas.Descripcion as DescripcionCuentas, genUsuarios.Usuario_Id,
	comPagosAnticipo.FechaPago,
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario, comPagosAnticipo.tesMovimientos,
	comPagosAnticipo.comEmbarques, genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
		genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, 
		genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
		genAsiSegmentos.Segmento3N,  genAsiSegmentos.Segmento4N ,
		dbo.Segmento( genAsiSegmentos.Segmento_Id, 
		genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, 
		genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
		genAsiSegmentos.Segmento3N,  genAsiSegmentos.Segmento4N ) as SegmentoStr, 
			comPagosAnticipo.comPagosAnticipo 
		
FROM comPagosAnticipo 
INNER JOIN comProveedores ON comProveedores.genEntidades = comPagosAnticipo.Proveed_Id
INNER JOIN comProveedoresTipoPasivo ON comProveedoresTipoPasivo.TipoCtaProv = comPagosAnticipo.TipoCtaProv
INNER JOIN conCuentas ON conCuentas.conCuentas = comPagosAnticipo.Cuenta_Id
INNER JOIN genUsuarios ON genUsuarios.genUsuarios = comPagosAnticipo.Usuario_Id
Inner Join genMonedas On genMonedas.genMonedas = comPagosAnticipo.Moneda_Id
LEFT JOIN tesMovimientos ON tesMovimientos.tesMovimientos = comPagosAnticipo.tesMovimientos
LEFT JOIN (genAsiSegmentos inner join genSegmentos ON 
	genAsiSegmentos.Segmento_Id = genSegmentos.genSegmentos) ON	
	genAsiSegmentos.Asiento_Id = comPagosAnticipo.comEmbarques
WHERE comPagosAnticipo.Proveed_Id = dbo.FuncFKcomProveedores(@pProveed_Id) And comPagosAnticipo.Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id) And
	comPagosAnticipo.Empresa_Id = @pEmpresa_Id AND 
	comPagosAnticipo.FechaPago <= ISNULL(@pFechaPago,comPagosAnticipo.FechaPago) And comPagosAnticipo.tesMovimientos Is Null

RETURN @@Error 

GO


DROP PROCEDURE comPagosAnticipoEliminar
GO
CREATE PROCEDURE comPagosAnticipoEliminar
(
@pProveed_Id varChar(15),
@pMoneda_Id varChar(3),
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 

DELETE FROM comPagosAnticipo 
WHERE Proveed_Id = dbo.FuncFKcomProveedores(@pProveed_Id) And comPagosAnticipo.Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id) And
	Empresa_Id = @pEmpresa_Id and tesMovimientos IS NULL
 
RETURN @@Error 

GO


DROP PROCEDURE comPagosAnticipoMarcarPagado
GO
CREATE PROCEDURE comPagosAnticipoMarcarPagado
(
	@pcomPagosAnticipo bigint,
	@ptesMovimietnos bigint
)
AS
	UPDATE comPagosAnticipo SET tesMovimientos = @ptesMovimietnos 
	WHERE
		comPagosAnticipo = @pcomPagosAnticipo


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comPagosHabilitados.sql*/
DROP PROCEDURE comPagosHabilitadosGuardar
GO
CREATE PROCEDURE comPagosHabilitadosGuardar
(
@pcomMovProv bigint,
@pSecuencia int,
@pUsuario_Id int,
@pFechaHabilitacion qFechaHora,
@pImporteHabilitado qMonedaD2,
@ptesMovimientos bigint = NULL,
@pImporte1 qMonedaD2,
@pImporte2 qMonedaD2,
@pImporte3 qMonedaD2
)
AS
SET NOCOUNT ON

Declare @lSecuencia int
Set @lSecuencia = @pSecuencia

If @pSecuencia = 0
	Select @lSecuencia = IsNull(Max(Secuencia), 0) + 1 From comPagosHabilitados Where comMovProv = @pcomMovProv


IF (EXISTS (SELECT 1 FROM comPagosHabilitados WHERE (comMovProv = @pcomMovProv) AND (Secuencia = @lSecuencia)))
BEGIN 
	UPDATE comPagosHabilitados
	SET Usuario_Id = @pUsuario_Id,
		FechaHabilitacion = @pFechaHabilitacion,
		ImporteHabilitado = @pImporteHabilitado,
		tesMovimientos = @ptesMovimientos,
		Importe1 = @pImporte1,
		Importe2 = @pImporte2,
		Importe3 = @pImporte3
	WHERE (comMovProv = @pcomMovProv) AND (Secuencia = @pSecuencia)
END 
ELSE 
BEGIN 
	INSERT INTO comPagosHabilitados
	(
		comMovProv,
		Secuencia,
		Usuario_Id,
		FechaHabilitacion,
		ImporteHabilitado,
		tesMovimientos,
		Importe1,
		Importe2,
		Importe3
	)
	VALUES 
	(
		@pcomMovProv,
		@lSecuencia,
		@pUsuario_Id,
		@pFechaHabilitacion,
		@pImporteHabilitado,
		@ptesMovimientos,
		@pImporte1,
		@pImporte2,
		@pImporte3
	)
END 

GO
--EXEC comPagosHabilitadosDatos 'A001','PES',0,1
DROP PROCEDURE comPagosHabilitadosDatos
GO
CREATE PROCEDURE comPagosHabilitadosDatos
(
@pProveed_Id varChar(15),
@pMoneda_Id varChar(5),
@pSoloHabilitados bit,
@pEmpresa_Id int, 
@pFechaPago DateTime=NULL
)
AS
SET NOCOUNT ON 
-- Comprobantes pendientes --
SELECT comMovProv.comMovProv, genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento4C,
dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoSTR,
	genMonedas.Moneda_Id, genMovCuotas.CuotaNro, genMovCuotas.Importe, genMovCuotas.Saldo,
	Convert(Numeric(18,2), genMovCuotas.Saldo*conAsientos.Cambio) as SaldoOri, conAsientos.Cambio,
	0 Secuencia, 0 Usuario_Id, ' ' Apellido_y_Nombres, conCuentas.Cuenta_Id, comMovProv.TipoCtaProv, comMovProv.Fecha_CCP,
	dbo.FechaActual() FechaHabilitacion, genMovCuotas.Saldo * 0 ImporteHabilitado, Cast(0 as bigint) tesMovimientos,
	dbo.func_TipoCambio(conCuentas.Moneda_Id, dbo.FechaActual(), @pEmpresa_Id) as CambioPago,
	genMovCuotas.Saldo * 0 Importe1, genMovCuotas.Saldo * 0 Importe2, genMovCuotas.Saldo * 0 Importe3, genMovCuotas.FechaVencimiento, 
	genSucursalesEmpr.Sucursal
FROM comMovProv
INNER JOIN comMovTipos ON comMovTipos.TipoMov = comMovprov.TipoMov
Inner Join conAsientos On conAsientos.conAsientos = comMovProv.comMovProv
Inner Join genMonedas On genMonedas.genMonedas = conAsientos.Moneda_Id
INNER JOIN conMovCont ON conMovCont.conAsientos = conAsientos.conAsientos And conMovCont.Clase = 'PRO'
INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
Inner Join genAsiSegmentos ON genAsiSegmentos.Asiento_Id = comMovprov.comMovprov
Inner Join genMovCuotas On genMovCuotas.Asiento_Id = comMovProv.comMovProv
Left Join tesRengMovicomMovProv On tesRengMovicomMovProv.comMovProv = comMovProv.comMovProv
inner join genSucursalesEmpr on genSucursalesEmpr.genSucursalesEmpr=conAsientos.Sucursal
WHERE comMovProv.Proveed_Id = dbo.FuncFKcomProveedores(@pProveed_Id)
And conAsientos.Empresa_Id = @pEmpresa_Id And conAsientos.Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id)
And genMovCuotas.Saldo > 0 And comMovTipos.Signo = -1 And conAsientos.Anulado = 0
And comMovProv.comMovProv Not In (Select comMovProv From comPagosHabilitados Where tesMovimientos Is Null)
And @pSoloHabilitados = 0 And tesRengMovicomMovProv.tesMovimientos Is Null And
conAsientos.Anulado = 0

Union All
-- Comprobantes ya habilitados --
SELECT comMovProv.comMovProv, genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento4C,dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoSTR,
	genMonedas.Moneda_Id, genMovCuotas.CuotaNro, genMovCuotas.Importe, genMovCuotas.Saldo,
	Convert(Numeric(18,2), genMovCuotas.Saldo*conAsientos.Cambio) as SaldoOri, conAsientos.Cambio,
	comPagosHabilitados.Secuencia, genUsuarios.genUsuarios Usuario_Id, genUsuarios.Apellido_y_Nombres, conCuentas.Cuenta_Id, comMovProv.TipoCtaProv,
	comMovProv.Fecha_CCP, comPagosHabilitados.FechaHabilitacion, comPagosHabilitados.ImporteHabilitado, Cast(0 as bigint) tesMovimientos,
	dbo.func_TipoCambio(conCuentas.Moneda_Id, dbo.FechaActual(), @pEmpresa_Id) as CambioPago,
	comPagosHabilitados.Importe1, comPagosHabilitados.Importe2, comPagosHabilitados.Importe3, genMovCuotas.FechaVencimiento,
	genSucursalesEmpr.Sucursal
FROM comMovProv
INNER JOIN comMovTipos ON comMovTipos.TipoMov = comMovprov.TipoMov
Inner Join conAsientos On conAsientos.conAsientos = comMovProv.comMovProv
Inner Join genMonedas On genMonedas.genMonedas = conAsientos.Moneda_Id
INNER JOIN conMovCont ON conMovCont.conAsientos = conAsientos.conAsientos And conMovCont.Clase = 'PRO'
INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
Inner Join genAsiSegmentos ON genAsiSegmentos.Asiento_Id = comMovprov.comMovprov
Inner Join genMovCuotas On genMovCuotas.Asiento_Id = comMovProv.comMovProv
Inner JOIN comPagosHabilitados ON comMovProv.comMovProv = comPagosHabilitados.comMovProv
Inner JOIN genUsuarios  ON (genUsuarios.genUsuarios = comPagosHabilitados.Usuario_Id)
inner join genSucursalesEmpr on genSucursalesEmpr.genSucursalesEmpr=conAsientos.Sucursal
WHERE comMovProv.Proveed_Id = dbo.FuncFKcomProveedores(@pProveed_Id) And comPagosHabilitados.tesMovimientos Is Null
And conAsientos.Empresa_Id = @pEmpresa_Id And conAsientos.Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id) and 
comPagosHabilitados.FechaHabilitacion <= ISNULL(@pFechaPago,comPagosHabilitados.FechaHabilitacion) And
conAsientos.Anulado = 0
order by 16,2,3 
RETURN @@Error 

GO

DROP PROCEDURE comPagosHabilitadosEliminar
GO
CREATE PROCEDURE comPagosHabilitadosEliminar
(
@pProveed_Id varChar(15),
@pEmpresa_Id int,
@pSecuencia int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comPagosHabilitados 
From comMovProv, conAsientos Where 
comMovProv.comMovProv = conAsientos.conAsientos
And comMovProv.comMovProv = comPagosHabilitados.comMovProv
And comPagosHabilitados.tesMovimientos Is Null
AND (Secuencia = ISNULL(@pSecuencia, Secuencia))
And comMovProv.Proveed_Id = dbo.FuncFKcomProveedores(@pProveed_Id)
And conAsientos.Empresa_Id = @pEmpresa_Id And conAsientos.Anulado = 0
 
RETURN @@Error 

GO


DROP PROCEDURE comPagosHabilitadosVolveraHabi
GO
CREATE PROCEDURE comPagosHabilitadosVolveraHabi
(
	@pTesMovimientos bigint
)
AS
SET NOCOUNT ON 

Update comPagosHabilitados set tesMovimientos = null where
	tesMovimientos = @pTesMovimientos

Update comPagosAnticipo set tesMovimientos = null where
	tesMovimientos = @pTesMovimientos
 
RETURN @@Error 

GO


DROP PROCEDURE comPagosHabilitadosEliminarFact
GO
CREATE PROCEDURE comPagosHabilitadosEliminarFact
(
@pcomMovProv bigint
)
AS
SET NOCOUNT ON 

DELETE FROM comPagosHabilitados 
From comMovProv Where comMovProv.comMovProv = @pcomMovProv
RETURN @@Error 

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comPFXDatos.sql*/
drop procedure comPFXDatos
go
create procedure comPFXDatos
(
@pEmpresa_Id int
)
as
select genGlobales.cValor as ArchivoPFX, Clave.cValor as ClavePFX, '' as UploadCer, '' as UploadKey, '' as ClaveKey ,
CAST(0 AS Bit) as EsCSD
from genGlobales
inner join genGlobales Clave on Clave.Empresa_Id=@pEmpresa_Id and Clave.Nombre_Var='ClavePFX' 
where genGlobales.Nombre_Var='ArchivoPFX' and genGlobales.Empresa_Id=@pEmpresa_Id
go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\ComprasCerrar.sql*/
DROP Procedure ComprasCerrar
GO
CREATE Procedure ComprasCerrar
(
@Empresa_Id Int
)
as

SELECT FechaCierreCompras as UltimoCierre, 
conPeriodos.Fecha_Hasta as ProximoCierre
FROM genEmpresas 
INNER JOIN conPeriodos on
genEmpresas.genEmpresas = conPeriodos.Empresa_Id and 
DATEADD(dd,1,FechaCierreCompras) between conPeriodos.Fecha_Desde And conPeriodos.Fecha_Hasta
Where
	genEmpresas.genEmpresas = @Empresa_Id

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\Compras_Pagadas.sql*/


--select * from vcomImpPagados where commovprov = 10543
-- comCompras_Pagadas '20191001','20191130', 1
--	
DROP PROCEDURE comCompras_Pagadas
GO
CREATE PROCEDURE comCompras_Pagadas( 
	@FECHADESDE DATETIME, 
	@FECHAHASTA DATETIME, 
	@Empresa_id int)
AS
select @FECHADESDE as FechaDesde, @FECHAHASTA as FechaHasta


select XXX.Pais, XXX.Origen AS Origen_id, XXX.RFC, XXX.RazonSocial, XXX.idFiscal,
	XXX.NACIONALIDAD, SUM(BASE16) AS BASE16, 
	SUM(IVA16) AS IVA16, SUM(BASE0) AS BASE0, 
	SUM(BaseExe) AS BaseExe, 
	SUM(RISR) AS RISR, SUM(RIVA) AS RIVA, 
	SUM(IVAIM) AS IVAIM, SUM(OTROS) AS OTROS, 
	SUM(BaseFront) as  BaseFront, SUM(IVAFront) as IVAFront
from (

SELECT genPaises.Dominio_Id AS Pais, 
	CASE WHEN genPaises.Dominio_Id<>'MX' THEN genEntidades.IDFISCAL ELSE '' END  idFiscal,
	comOrigenesFiscales.Origen_id as Origen,
	isnull(genEntidades.Cuit, 'XAXX010101000') RFC,  
	ISNULL(COMPROVEEDORES.NOMBRELEGAL, 'PROVEEDOR GLOBAL') AS RazonSocial ,
	genPaises.DESCRIPCION NACIONALIDAD,
	vComImpPagados.Fecha, commovprov.commovprov, 
	
ISNULL((SELECT SUM(BaseImponible) from comMovImpAcredita, comImpuestos, impTipoImpuesto  Where
	comImpuestos.comImpuestos = comMovImpAcredita.Impuesto_id and
	comMovImpAcredita.tesMovimientos = vcomImpPagados.tesMovimientos and
	comMovImpAcredita.comMovprov = vcomImpPagados.comMovprov and 
	comMovImpAcredita.Asiento_Id =vcomImpPagados.Asiento_id and
	impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto AND 
	impTipoImpuesto.CodigoFiscal = vcomImpPagados.Tipo AND 
	vcomImpPagados.Tipo = 'I7' ),0) as Base16, 
ISNULL((SELECT SUM(Monto) from comMovImpAcredita, comImpuestos, impTipoImpuesto Where
	comImpuestos.comImpuestos = comMovImpAcredita.Impuesto_id and
	comMovImpAcredita.tesMovimientos = vcomImpPagados.tesMovimientos and
	comMovImpAcredita.comMovprov = vcomImpPagados.comMovprov and 
	comMovImpAcredita.Asiento_Id =vcomImpPagados.Asiento_id and
	impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto AND 
	impTipoImpuesto.CodigoFiscal = vcomImpPagados.Tipo AND 
	vcomImpPagados.Tipo = 'I7'),0) as IVA16, 
ISNULL((SELECT SUM(BaseImponible) from comMovImpAcredita, comImpuestos, impTipoImpuesto Where
	comImpuestos.comImpuestos = comMovImpAcredita.Impuesto_id and
	comMovImpAcredita.tesMovimientos = vcomImpPagados.tesMovimientos and
	comMovImpAcredita.comMovprov = vcomImpPagados.comMovprov and 
	comMovImpAcredita.Asiento_Id =vcomImpPagados.Asiento_id and
	impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto AND 
	impTipoImpuesto.CodigoFiscal = vcomImpPagados.Tipo AND 
	vcomImpPagados.Tipo = 'T0'),0) as Base0, 	
ISNULL((SELECT SUM(BaseImponible) from comMovImpAcredita, comImpuestos, impTipoImpuesto Where
	comImpuestos.comImpuestos = comMovImpAcredita.Impuesto_id and
	comMovImpAcredita.tesMovimientos = vcomImpPagados.tesMovimientos and
	comMovImpAcredita.comMovprov = vcomImpPagados.comMovprov and 
	comMovImpAcredita.Asiento_Id =vcomImpPagados.Asiento_id and
	impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto AND 
	impTipoImpuesto.CodigoFiscal = vcomImpPagados.Tipo AND 
	vcomImpPagados.Tipo = 'EX'),0) as BaseExe, 
-(ISNULL((SELECT SUM(Monto) from comMovImpAcredita, comImpuestos, impTipoImpuesto Where
	comImpuestos.comImpuestos = comMovImpAcredita.Impuesto_id and
	comMovImpAcredita.tesMovimientos = vcomImpPagados.tesMovimientos and
	comMovImpAcredita.comMovprov = vcomImpPagados.comMovprov and 
	comMovImpAcredita.Asiento_Id =vcomImpPagados.Asiento_id and
	impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto AND 
	impTipoImpuesto.CodigoFiscal = vcomImpPagados.Tipo AND 
	vcomImpPagados.Tipo = 'RS'),0) +

ISNULL((SELECT SUM(comMovImpuestos.Importe_Impuesto) from comMovImpuestos, comImpuestos, impTipoImpuesto Where
	comImpuestos.comImpuestos = comMovImpuestos.Impuesto_id and
	comMovImpuestos.comMovprov = vcomImpPagados.comMovprov and 
	impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto AND 
	comImpuestos.PorAcreditacion = 0 and
	impTipoImpuesto.CodigoFiscal = 'RS'),0)) as RISR, 
	
-(ISNULL((SELECT SUM(Monto) from comMovImpAcredita, comImpuestos, impTipoImpuesto Where
	comImpuestos.comImpuestos = comMovImpAcredita.Impuesto_id and
	comMovImpAcredita.tesMovimientos = vcomImpPagados.tesMovimientos and
	comMovImpAcredita.comMovprov = vcomImpPagados.comMovprov and 
	comMovImpAcredita.Asiento_Id =vcomImpPagados.Asiento_id and
	impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto AND 
	impTipoImpuesto.CodigoFiscal = vcomImpPagados.Tipo AND 
	vcomImpPagados.Tipo = 'R1'),0) + 
	ISNULL((SELECT SUM(comMovImpuestos.Importe_Impuesto) from comMovImpuestos, comImpuestos, impTipoImpuesto Where
	comImpuestos.comImpuestos = comMovImpuestos.Impuesto_id and
	comMovImpuestos.comMovprov = vcomImpPagados.comMovprov and 
	impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto AND 
	comImpuestos.PorAcreditacion = 0 and
	impTipoImpuesto.CodigoFiscal = 'R1'),0))  as RIVA, 

ISNULL((SELECT SUM(Monto) from comMovImpAcredita, comImpuestos, impTipoImpuesto Where
	comImpuestos.comImpuestos = comMovImpAcredita.Impuesto_id and
	comMovImpAcredita.tesMovimientos = vcomImpPagados.tesMovimientos and
	comMovImpAcredita.comMovprov = vcomImpPagados.comMovprov and 
	comMovImpAcredita.Asiento_Id =vcomImpPagados.Asiento_id and
	impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto AND 
	impTipoImpuesto.CodigoFiscal = vcomImpPagados.Tipo AND 
	vcomImpPagados.Tipo = 'I5'),0) +
	ISNULL((SELECT SUM(comMovImpuestos.Importe_Impuesto) from comMovImpuestos, comImpuestos, impTipoImpuesto Where
	comImpuestos.comImpuestos = comMovImpuestos.Impuesto_id and
	comMovImpuestos.comMovprov = vcomImpPagados.comMovprov and 
	impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto AND 
	comImpuestos.PorAcreditacion = 0 and
	impTipoImpuesto.CodigoFiscal = 'I5'),0) as IVAIM,	
abs(ISNULL((SELECT SUM(Monto) from comMovImpAcredita, comImpuestos, impTipoImpuesto Where
	comImpuestos.comImpuestos = comMovImpAcredita.Impuesto_id and
	comMovImpAcredita.tesMovimientos = vcomImpPagados.tesMovimientos and
	comMovImpAcredita.comMovprov = vcomImpPagados.comMovprov and 
	comMovImpAcredita.Asiento_Id =vcomImpPagados.Asiento_id and
	impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto AND 
	impTipoImpuesto.CodigoFiscal = vcomImpPagados.Tipo AND 
	vcomImpPagados.Tipo  NOT IN ('IF','I7','I5','R1','RS','T0','EX')),0) +
	ISNULL((SELECT SUM(comMovImpuestos.Importe_Impuesto) from comMovImpuestos, comImpuestos, impTipoImpuesto Where
	comImpuestos.comImpuestos = comMovImpuestos.Impuesto_id and
	comMovImpuestos.comMovprov = vcomImpPagados.comMovprov and 
	impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto AND 
	comImpuestos.PorAcreditacion = 0 and
	impTipoImpuesto.CodigoFiscal NOT IN ('IF','I7','I5','R1','RS','T0','EX')),0)) as Otros, 
	ISNULL((SELECT SUM(BaseImponible) from comMovImpAcredita, comImpuestos, impTipoImpuesto  Where
	comImpuestos.comImpuestos = comMovImpAcredita.Impuesto_id and
	comMovImpAcredita.tesMovimientos = vcomImpPagados.tesMovimientos and
	comMovImpAcredita.comMovprov = vcomImpPagados.comMovprov and 
	comMovImpAcredita.Asiento_Id =vcomImpPagados.Asiento_id and
	impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto AND 
	impTipoImpuesto.CodigoFiscal = vcomImpPagados.Tipo AND 
	vcomImpPagados.Tipo = 'IF' ),0)  as BASEFront,
		ISNULL((SELECT SUM(comMovImpAcredita.Monto) from comMovImpAcredita, comImpuestos, impTipoImpuesto  Where
	comImpuestos.comImpuestos = comMovImpAcredita.Impuesto_id and
	comMovImpAcredita.tesMovimientos = vcomImpPagados.tesMovimientos and
	comMovImpAcredita.comMovprov = vcomImpPagados.comMovprov and 
	comMovImpAcredita.Asiento_Id =vcomImpPagados.Asiento_id and
	impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto AND 
	impTipoImpuesto.CodigoFiscal = vcomImpPagados.Tipo AND 
	vcomImpPagados.Tipo = 'IF' ),0)  as IVAFront,
	@FechaDesde FechaDesde, @FechaHasta FechaHasta
 from  vcomImpPagados 
	inner JOIN comProveedores ON
	comProveedores.Proveed_id = vcomImpPagados.Proveed_id 
	INNER JOIN genEntidades ON
	genEntidades.genEntidades = comProveedores.genEntidades
	INNER JOIN comMovprov ON 
	comMovprov.comMovprov = vcomImpPagados.comMovprov 
	INNER JOIN conAsientos ON
    conAsientos.conAsientos  = comMovprov.comMovProv
	INNER JOIN genPaises ON 
		genPaises.genPaises = comProveedores.Pais
		inner join comOrigenesFiscales on comOrigenesFiscales.comOrigenesFiscales=commovprov.Origen_Id
WHERE
		vcomImpPagados.Empresa_id = @Empresa_id and 
		vcomImpPagados.Fecha Between @FechaDesde And @FechaHasta
UNION ALL -- PROVEEDORES MENORES

SELECT DISTINCT  genPaises.Dominio_Id AS Pais, 
	CASE WHEN genPaises.Dominio_Id<>'MX' THEN genEntidades.IDFISCAL ELSE '' END  idFiscal,
	comOrigenesFiscales.Origen_id as Origen,
	isnull(genEntidades.Cuit, 'XAXX010101000') RFC,  
	ISNULL(COMPROVEEDORES.NOMBRELEGAL, 'PROVEEDOR GLOBAL') AS RazonSocial ,
	genPaises.DESCRIPCION NACIONALIDAD,
	conAsientos.Fecha, commovprov.commovprov, 
	
ISNULL((SELECT SUM(comMovImpuestos.Base_Imponible) from comMovImpuestos, comImpuestos, impTipoImpuesto Where
	comImpuestos.comImpuestos = comMovImpuestos.Impuesto_id and
	comMovImpuestos.comMovprov = comMovprov.comMovprov and 
	impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto and 
	impTipoImpuesto.CodigoFiscal = 'I7' ),0) as Base16, 
	ISNULL((SELECT SUM(comMovImpuestos.Importe_Impuesto) from comMovImpuestos, comImpuestos, impTipoImpuesto Where
	comImpuestos.comImpuestos = comMovImpuestos.Impuesto_id and
	comMovImpuestos.comMovprov = comMovprov.comMovprov and 
	impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto and 
	impTipoImpuesto.CodigoFiscal = 'I7' ),0) as IVA16, 
ISNULL((SELECT SUM(comMovImpuestos.Base_Imponible) from comMovImpuestos, comImpuestos, impTipoImpuesto Where
	comImpuestos.comImpuestos = comMovImpuestos.Impuesto_id and
	comMovImpuestos.comMovprov = comMovprov.comMovprov and 
	impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto and 
	impTipoImpuesto.CodigoFiscal = 'T0' ),0) as Base0, 	
ISNULL((SELECT SUM(comMovImpuestos.Base_Imponible) from comMovImpuestos, comImpuestos, impTipoImpuesto Where
	comImpuestos.comImpuestos = comMovImpuestos.Impuesto_id and
	comMovImpuestos.comMovprov = comMovprov.comMovprov and 
	impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto and 
	impTipoImpuesto.CodigoFiscal = 'EX' ),0) as BaseExe, 
-ISNULL((SELECT SUM(comMovImpuestos.Importe_Impuesto) from comMovImpuestos, comImpuestos, impTipoImpuesto Where
	comImpuestos.comImpuestos = comMovImpuestos.Impuesto_id and
	comMovImpuestos.comMovprov = comMovprov.comMovprov and 
	impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto and 
	impTipoImpuesto.CodigoFiscal = 'RS' ),0) as  RISR, 
	
-ISNULL((SELECT SUM(comMovImpuestos.Importe_Impuesto) from comMovImpuestos, comImpuestos, impTipoImpuesto Where
	comImpuestos.comImpuestos = comMovImpuestos.Impuesto_id and
	comMovImpuestos.comMovprov = comMovprov.comMovprov and 
	impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto and 
	impTipoImpuesto.CodigoFiscal = 'R1' ),0) as RIVA, 

ISNULL((SELECT SUM(comMovImpuestos.Importe_Impuesto) from comMovImpuestos, comImpuestos, impTipoImpuesto Where
	comImpuestos.comImpuestos = comMovImpuestos.Impuesto_id and
	comMovImpuestos.comMovprov = comMovprov.comMovprov and 
	impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto and 
	impTipoImpuesto.CodigoFiscal = 'I5' ),0)  as IVAIM,	

abs(ISNULL((SELECT SUM(comMovImpuestos.Importe_Impuesto) from comMovImpuestos, comImpuestos, impTipoImpuesto Where
	comImpuestos.comImpuestos = comMovImpuestos.Impuesto_id and
	comMovImpuestos.comMovprov = comMovprov.comMovprov and 
	impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto and 
	impTipoImpuesto.CodigoFiscal NOT IN ('I7','I5','R1','RS','T0','EX') ),0)) as Otros, 
ISNULL((SELECT SUM(comMovImpuestos.Base_Imponible) from comMovImpuestos, comImpuestos, impTipoImpuesto Where
	comImpuestos.comImpuestos = comMovImpuestos.Impuesto_id and
	comMovImpuestos.comMovprov = comMovprov.comMovprov and 
	impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto and 
	impTipoImpuesto.CodigoFiscal = 'IF' ),0) as  BASEFront,
ISNULL((SELECT SUM(comMovImpuestos.Importe_Impuesto) from comMovImpuestos, comImpuestos, impTipoImpuesto Where
	comImpuestos.comImpuestos = comMovImpuestos.Impuesto_id and
	comMovImpuestos.comMovprov = comMovprov.comMovprov and 
	impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto and 
	impTipoImpuesto.CodigoFiscal = 'IF' ),0) as  IVAFront,
	@FechaDesde FechaDesde, @FechaHasta FechaHasta
 from comMovImpuestos
	INNER JOIN comMovprov ON 
	comMovprov.comMovprov = comMovImpuestos.comMovprov 
	inner JOIN comProveedores ON
	comProveedores.genEntidades = comMovProv.Proveed_id 
	INNER JOIN genEntidades ON
	genEntidades.genEntidades = comProveedores.genEntidades
	LEFT JOIN genPaises ON 
			(comProveedores.Pais IS NULL and genPaises.Dominio_id = 'MX') or
			genPaises.genPaises = comProveedores.Pais 
	inner join comOrigenesFiscales on comOrigenesFiscales.comOrigenesFiscales=commovprov.Origen_Id
	INNER JOIN conAsientos ON 
	conAsientos.conAsientos = commovprov.comMovProv
	inner join tesRengMovicomMovProv on
	tesRengMovicomMovProv.comMovProv = comMovProv.comMovProv
WHERE
		conAsientos.Empresa_id = @Empresa_id and 
		conAsientos.Fecha Between @FechaDesde And @FechaHasta and 
		conAsientos.Anulado = 0 and 
		conAsientos.Posteado = 1 

		 ) as XXX
GROUP BY XXX.Pais, XXX.Origen, XXX.RFC, XXX.RazonSocial, 
	XXX.NACIONALIDAD, XXX.idFiscal 

GO
	


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comProvAnexo.sql*/
DROP PROCEDURE comProvAnexoGuardar
GO
CREATE PROCEDURE comProvAnexoGuardar
(
@pgenEntidades bigint,
@pRazonSocial varchar(120),
@pDireccion1 varchar(35),
@pDireccion2 varchar(35),
@pLocalidad varchar(35),
@pCod_Postal varchar(10),
@pProvincia_Id varchar(5) = NULL,
@pCondFiscal_Id varchar(5) = NULL,
@pUsuario_Id int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comProvAnexo WHERE (genEntidades = @pgenEntidades)))
BEGIN 
	UPDATE comProvAnexo
	SET		RazonSocial = @pRazonSocial,
		Direccion1 = @pDireccion1,
		Direccion2 = @pDireccion2,
		Localidad = @pLocalidad,
		Cod_Postal = @pCod_Postal,
		Provincia_Id = dbo.FuncFKgenProvincias(@pProvincia_Id),
		CondFiscal_Id = dbo.FuncFKcomCondFiscal(@pCondFiscal_Id),
		Usuario_Id = @pUsuario_Id
	WHERE (genEntidades = @pgenEntidades)
END 
ELSE 
BEGIN 
	INSERT INTO comProvAnexo
	(
		genEntidades,
		RazonSocial,
		Direccion1,
		Direccion2,
		Localidad,
		Cod_Postal,
		Provincia_Id,
		CondFiscal_Id,
		Usuario_Id
	)
	VALUES 
	(
		@pgenEntidades,
		@pRazonSocial,
		@pDireccion1,
		@pDireccion2,
		@pLocalidad,
		@pCod_Postal,
		dbo.FuncFKgenProvincias(@pProvincia_Id),
		dbo.FuncFKcomCondFiscal(@pCondFiscal_Id),
		@pUsuario_Id
	)
END 

GO

DROP PROCEDURE comProvAnexoDatos
GO
CREATE PROCEDURE comProvAnexoDatos
(
@pCuit VarChar(25)
)
AS
SET NOCOUNT ON 

SELECT genEntidades.genEntidades, genEntidades.CUIT , comProvAnexo.RazonSocial, comProvAnexo.Direccion1, comProvAnexo.Direccion2,
	comProvAnexo.Localidad, comProvAnexo.Cod_Postal, genProvincias.Provincia_Id, genProvincias.Descripcion as DescripcionProvincias,
	comCondFiscal.CondFiscal_Id, comCondFiscal.Descripcion as DescripcionCondFiscal,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario
FROM comProvAnexo 
INNER JOIN genEntidades  ON (genEntidades.genEntidades = comProvAnexo.genEntidades)
LEFT JOIN genProvincias  ON (genProvincias.genProvincias = comProvAnexo.Provincia_Id)
LEFT JOIN comCondFiscal  ON (comCondFiscal.comCondFiscal = comProvAnexo.CondFiscal_Id)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = comProvAnexo.Usuario_Id)
WHERE (genEntidades.Cuit = @pCuit)
 
 RETURN @@Error 

GO

DROP PROCEDURE comProvAnexoEliminar
GO
CREATE PROCEDURE comProvAnexoEliminar
(
@pgenEntidades bigint
)
AS
SET NOCOUNT ON 

DELETE FROM comProvAnexo 
WHERE (genEntidades = @pgenEntidades)
 
 RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comProvCtasContrap.sql*/
DROP PROCEDURE comProvCtasContrapInsertar
GO
CREATE PROCEDURE comProvCtasContrapInsertar
(
@pProveed_Id bigint,
@pCuenta_Id VarChar(25) ,
@pCentro1_Id VarChar(8),
@pCentro2_Id VarChar(8),
@pDetalle varchar(35)
)
AS
SET NOCOUNT ON 
	INSERT INTO comProvCtasContrap
	(
		Proveed_Id,
		Cuenta_Id,
		Centro1_Id,
		Centro2_Id,
		Detalle
	)
	VALUES 
	(
		@pProveed_Id,
		dbo.FuncFKconCuentas(@pCuenta_Id),
		dbo.FuncFKconCentro1(@pCentro1_Id),
		dbo.FuncFKconCentro2(@pCentro2_Id),
		@pDetalle
	)

GO

DROP PROCEDURE comProvCtasContrapDatos
GO
CREATE PROCEDURE comProvCtasContrapDatos
(
@pProveed_Id bigint,
@pCuenta_Id VarChar(25) =NULL,
@pCentro1_Id VarChar(8) =NULL,
@pCentro2_Id VarChar(8) =NULL
)
AS
SET NOCOUNT ON 

SELECT comProvCtasContrap.Proveed_Id,
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuentas,
	conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, 
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2,
	comProvCtasContrap.Detalle
FROM comProvCtasContrap 
INNER JOIN comProveedores  ON (comProveedores.genEntidades = comProvCtasContrap.Proveed_Id)
INNER JOIN conCuentas  ON (conCuentas.conCuentas = comProvCtasContrap.Cuenta_Id)
INNER JOIN conCentro1  ON (conCentro1.conCentro1 = comProvCtasContrap.Centro1_Id)
INNER JOIN conCentro2  ON (conCentro2.conCentro2 = comProvCtasContrap.Centro2_Id)
WHERE 
     comProvCtasContrap.Proveed_Id = @pProveed_Id AND 
	 comProvCtasContrap.Cuenta_Id = ISNULL(dbo.FuncFKconCuentas(@pCuenta_Id),comProvCtasContrap.Cuenta_Id) AND 
	 comProvCtasContrap.Centro1_Id = ISNULL(dbo.FuncFKconCentro1(@pCentro1_Id),comProvCtasContrap.Centro1_Id) AND 
	 comProvCtasContrap.Centro2_Id = ISNULL(dbo.FuncFKconCentro2(@pCentro2_Id),comProvCtasContrap.Centro2_Id)

 
 RETURN @@Error 

GO

DROP PROCEDURE comProvCtasContrapEliminar
GO
CREATE PROCEDURE comProvCtasContrapEliminar
(
@pProveed_Id bigint,
@pCuenta_Id VarChar(25)= null ,
@pCentro1_Id VarChar(8) = null,
@pCentro2_Id VarChar(8) = null
)
AS
SET NOCOUNT ON 

DELETE FROM comProvCtasContrap 
WHERE 
Proveed_Id = @pProveed_Id AND 
(@pCuenta_Id IS NULL OR Cuenta_Id = dbo.FuncFKconCuentas(@pCuenta_Id)) AND 
(@pCentro1_Id IS NULL OR Centro1_Id = dbo.FuncFKconCentro1(@pCentro1_Id)) AND 
(@pCentro2_Id IS NULL OR Centro2_Id = dbo.FuncFKconCentro2(@pCentro2_Id))
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comProveedores.sql*/


-- comProveedoresDatos 'ABB'
DROP PROCEDURE comProveedoresGuardar
GO
CREATE PROCEDURE comProveedoresGuardar
(
@pgenEntidades bigint,
@pProveed_Id varchar(15),
@pEmpresa_Id int = NULL,
@pRazonSocial varchar(120),
@pNombreLegal varchar(120),
@pDireccion1 varchar(100),
@pDireccion2 varchar(100),
@pLocalidad varchar(30),
@pCodigoPostal CodigoPostal,
@pProvincia_Id varchar(5) = NULL,
@pPais smallint = NULL,
@pTelefono varchar(100),
@pRegion_Id varchar(5) = NULL,
@pCondPago_Id varchar(5) = NULL,
@pFormaEnt_Id varchar(5) = NULL,
@pContacto varchar(20),
@pEMail varchar(60),
@pFax varchar(30),
@pFecha_Alta datetime,
@pFechaUltActiv datetime,
@pLetra_Fact char(1),
@pObservaciones VarChar(max) = NULL,
@pCondFiscal_Id varchar(5) = NULL,
@pGanancias bit,
@pIBrutos varchar(20),
@pEspecializacion char(1),
@pOrigen_Id smallint = NULL,
@pEsAduana bit,
@pTipoCuenta char(2),
@pNroCuenta varchar(17),
@pCBU varchar(22),
@pInterbanking qFechaHora = Null,
@pBanco_Id varchar(3) = NULL,
@pProvTipo_Id varChar(5) = Null,
@pInactivo bit,
@pUsuario_Id int = NULL,
@pPosteado bit
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comProveedores WHERE (genEntidades = @pgenEntidades)))
BEGIN 
	UPDATE comProveedores
	SET	
		Proveed_Id = @pProveed_Id,
		Empresa_Id = @pEmpresa_Id,
		RazonSocial = @pRazonSocial,
		NombreLegal = @pNombreLegal,
		Direccion1 = @pDireccion1,
		Direccion2 = @pDireccion2,
		Localidad = @pLocalidad,
		CodigoPostal = @pCodigoPostal,
		Provincia_Id = dbo.FuncFKgenProvincias(@pProvincia_Id),
		Pais = dbo.FuncFKgenPaises(@pPais),
		Telefono = @pTelefono,
		Region_Id = dbo.FuncFKcomRegiones(@pRegion_Id),
		CondPago_Id = dbo.FuncFKcomConPago(@pCondPago_Id),
		FormaEnt_Id = dbo.FuncFKcomForEntre(@pFormaEnt_Id),
		Contacto = @pContacto,
		EMail = @pEMail,
		Fax = @pFax,
		Fecha_Alta = @pFecha_Alta,
		FechaUltActiv = @pFechaUltActiv,
		Letra_Fact = @pLetra_Fact,
		Observaciones = @pObservaciones,
		CondFiscal_Id = dbo.FuncFKcomCondFiscal(@pCondFiscal_Id),
		Ganancias = @pGanancias,
		IBrutos = @pIBrutos,
		Especializacion = @pEspecializacion,
		Origen_Id = dbo.FuncFKcomOrigenesFiscales(@pOrigen_Id),
		EsAduana = @pEsAduana,
		TipoCuenta = @pTipoCuenta,
		NroCuenta = @pNroCuenta,
		CBU = @pCBU,
		Interbanking = @pInterbanking,
		Banco_Id = dbo.FuncFKtesBancos(@pBanco_Id),
		ProvTipo_Id = dbo.FuncFKcomProvTipos(@pProvTipo_Id),
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (genEntidades = @pgenEntidades)
END 
ELSE 
BEGIN 
	INSERT INTO comProveedores
	(
		genEntidades,
		Proveed_Id,
		Empresa_Id,
		RazonSocial,
		NombreLegal,
		Direccion1,
		Direccion2,
		Localidad,
		CodigoPostal,
		Provincia_Id,
		Pais,
		Telefono,
		Region_Id,
		CondPago_Id,
		FormaEnt_Id,
		Contacto,
		EMail,
		Fax,
		Fecha_Alta,
		FechaUltActiv,
		Letra_Fact,
		Observaciones,
		CondFiscal_Id,
		Ganancias,
		IBrutos,
		Especializacion,
		Origen_Id,
		EsAduana,
		TipoCuenta,
		NroCuenta,
		CBU,
		Interbanking,
		Banco_Id,
		ProvTipo_Id,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pgenEntidades,
		@pProveed_Id,
		@pEmpresa_Id,
		@pRazonSocial,
		@pNombreLegal,
		@pDireccion1,
		@pDireccion2,
		@pLocalidad,
		@pCodigoPostal,
		dbo.FuncFKgenProvincias(@pProvincia_Id),
		dbo.FuncFKgenPaises(@pPais),
		@pTelefono,
		dbo.FuncFKcomRegiones(@pRegion_Id),
		dbo.FuncFKcomConPago(@pCondPago_Id),
		dbo.FuncFKcomForEntre(@pFormaEnt_Id),
		@pContacto,
		@pEMail,
		@pFax,
		@pFecha_Alta,
		@pFechaUltActiv,
		@pLetra_Fact,
		@pObservaciones,
		dbo.FuncFKcomCondFiscal(@pCondFiscal_Id),
		@pGanancias,
		@pIBrutos,
		@pEspecializacion,
		dbo.FuncFKcomOrigenesFiscales(@pOrigen_Id),
		@pEsAduana,
		@pTipoCuenta,
		@pNroCuenta,
		@pCBU,
		@pInterbanking,
		dbo.FuncFKtesBancos(@pBanco_Id),
		dbo.FuncFKcomProvTipos(@pProvTipo_Id),
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
END 

GO


DROP PROCEDURE comProveedoresDatos
GO
CREATE PROCEDURE comProveedoresDatos
(
@pProveed_Id VarChar(15),
@pEspecializacion char(1)
)
AS
SET NOCOUNT ON 

SELECT genEntidades.genEntidades,  genEntidades.CUIT, genEntidades.TipoDoc, genEntidades.idFiscal,
	comProveedores.Proveed_Id, comProveedores.Empresa_Id, 
	Cast(Case When comProveedores.Empresa_Id IS NULL THEN 1 ELSE 0 END as Bit) as PTodasEmpresas, 
	comProveedores.RazonSocial,
	comProveedores.NombreLegal, comProveedores.Direccion1, comProveedores.Direccion2, 
	comProveedores.Localidad,  comProveedores.CodigoPostal, genProvincias.Provincia_Id, 
	genProvincias.Descripcion as DescripcionProvincias, 
	genPaises.Pais_Id, genPaises.Descripcion as DescripcionPaises, 
	comProveedores.Telefono, comRegiones.Region_Id, comRegiones.Descripcion as DescripcionRegiones,
	comConPago.CondPago_Id, comConPago.Descripcion as DescripcionConPago, 
	comForEntre.FormaEnt_Id, comForEntre.Descripcion as DescripcionForEntre,
	comProveedores.Contacto, comProveedores.EMail,
	comProveedores.Fax, comProveedores.Fecha_Alta, comProveedores.FechaUltActiv, 
	comProveedores.Letra_Fact,comProveedores.Observaciones, 
	comCondFiscal.CondFiscal_Id, comCondFiscal.Descripcion as DescripcionCondFiscal, 
	comProveedores.Ganancias,comProveedores.IBrutos, comProveedores.Especializacion, 
	comOrigenesFiscales.Origen_Id, comOrigenesFiscales.Descripcion as DescripcionOrCredFisc,
	comProveedores.EsAduana, comProveedores.TipoCuenta, comProveedores.NroCuenta, comProveedores.CBU, 
	comProveedores.Interbanking,
	tesBancos.Banco_Id, tesBancos.Descripcion as DescripcionBancos, 
	comProvTipos.ProvTipo_Id, comProvTipos.Descripcion DescripcionProvTipos,
	comProveedores.Inactivo,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, 
	comProveedores.Posteado
FROM comProveedores 
INNER JOIN genEntidades  ON (genEntidades.genEntidades = comProveedores.genEntidades)
LEFT JOIN genProvincias  ON (genProvincias.genProvincias = comProveedores.Provincia_Id)
LEFT JOIN genPaises  ON (genPaises.genPaises = comProveedores.Pais)
LEFT JOIN comRegiones  ON (comRegiones.comRegiones = comProveedores.Region_Id)
LEFT JOIN comConPago  ON (comConPago.comConPago = comProveedores.CondPago_Id)
LEFT JOIN comForEntre  ON (comForEntre.comForEntre = comProveedores.FormaEnt_Id)
LEFT JOIN comCondFiscal  ON (comCondFiscal.comCondFiscal = comProveedores.CondFiscal_Id)
LEFT JOIN comOrigenesFiscales  ON (comOrigenesFiscales.comOrigenesFiscales= comProveedores.Origen_Id)
LEFT JOIN tesBancos  ON (tesBancos.tesBancos = comProveedores.Banco_Id)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = comProveedores.Usuario_Id)
Left Join comProvTipos On comProvTipos.comProvTipos = comProveedores.ProvTipo_Id
WHERE comProveedores.Proveed_Id = @pProveed_Id /* And comProveedores.Especializacion = @pEspecializacion*/
 
Declare @pidentity bigint= dbo.FuncFKcomProveedores(@pProveed_Id)

-- Cuentas Pasivo

exec comProveedoresCtasPasivoDatos @pidentity
 /*
 SELECT comProveedoresTipoPasivo.TipoCtaProv,  
		genMonedas.Moneda_id, genMonedas.Descripcion as DescripcioMoneda,
		comProveedoresTipoPasivo.Descripcion as DescripcionTC,
		conCuentas.Cuenta_id, conCuentas.Descripcion as DescripcionCuenta,
		CtaPagoXAdelantado.Cuenta_id as CtaPagoXAdelantado , 
			CtaPagoXAdelantado.Descripcion as DescripcionCtaPagoXAdelantado
	FROM 
	comProveedoresTipoPasivo INNER JOIN comProveedoresCtasPasivo on
	comProveedoresTipoPasivo.TipoCtaProv = comProveedoresCtasPasivo.TipoCtaProv 
	INNER JOIN genMonedas ON
	comProveedoresCtasPasivo.Moneda_id = genMonedas.genMonedas
	LEFT OUTER JOIN  conCuentas ON 
	comProveedoresCtasPasivo.Cuenta_id = conCuentas.conCuentas
	LEFT OUTER JOIN  conCuentas as CtaPagoXAdelantado ON
	CtaPagoXAdelantado.conCuentas = comProveedoresCtasPasivo.CtaPagoXAdelantado 
	inner join comProveedores ON
	comProveedores.genEntidades =comProveedoresCtasPasivo.genEntidades
	WHERE
		comProveedores.Proveed_id = @pProveed_id  
	 
	 order by 2,1		
*/
 
exec comProvCtasContrapDatos @pidentity
/*
 -- Cuentas ContraPartida
SELECT conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuentas,
	conCentro1.Centro1_id, conCentro1.Descripcion as DescripcionCentro1, 
	conCentro2.Centro2_id, conCentro2.Descripcion as DescripcionCentro2,
	comProvCtasContrap.Detalle
FROM comProvCtasContrap 
INNER JOIN comProveedores  ON (comProveedores.genEntidades = comProvCtasContrap.Proveed_Id)
INNER JOIN conCuentas  ON (conCuentas.conCuentas = comProvCtasContrap.Cuenta_Id)
INNER JOIN conCentro1  ON (conCentro1.conCentro1 = comProvCtasContrap.Centro1_Id)
INNER JOIN conCentro2  ON (conCentro2.conCentro2 = comProvCtasContrap.Centro2_Id)
WHERE 
     comProveedores .Proveed_Id = @pProveed_Id 
*/

exec comProveedoresImpuestosDatos @pProveed_Id

/*
SELECT comImpuestos.Impuesto_id, comImpuestos.Descripcion
 FROM comProveedoresImpuestos INNER JOIN comProveedores ON
comProveedoresImpuestos.Proveed_id = comProveedores.genEntidades
inner join comImpuestos ON
comImpuestos.comImpuestos = comProveedoresImpuestos.Impuesto_id
where
comProveedores.Proveed_Id = @pProveed_Id 
*/


Exec genAtributosGeneralesIdentityDatos @pidentity, 'comProveedores'

exec genJurisCoeficientesDatos @pIdentity

exec comProveedoresRetencionDatos @pIdentity
 
RETURN @@Error 

GO

DROP PROCEDURE comProveedoresEliminar
GO
CREATE PROCEDURE comProveedoresEliminar
(
@pProveed_Id VarChar(15)
)
AS
SET NOCOUNT ON 

declare @genEntidad bigint  = (SELECT GenEntidades from	
	comProveedores where Proveed_Id = @pProveed_Id)
	
DELETE FROM comProveedores 
WHERE (Proveed_Id = @pProveed_Id)

IF NOT EXISTS(SELECT 1 FROM venClientes where GenEntidades = @genEntidad)
begin
	--IF NOT EXISTS(SELECT 1 FROM suePersonal where GenEntidades = @genEntidad)
		
		delete from genEntidades where GenEntidades = @genEntidad

end

 
 RETURN @@Error 


GO


DROP FUNCTION FuncFKcomProveedores
GO

CREATE FUNCTION FuncFKcomProveedores
(
@pProveed_Id VarChar(15)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = genEntidades FROM comProveedores  WHERE 
		Proveed_Id = @pProveed_Id  
  RETURN @pIdentity
END


GO


DROP PROCEDURE comProveedoresDatosCUIT
GO
CREATE PROCEDURE comProveedoresDatosCUIT
(
@pCuit VarChar(15)
)
AS
SET NOCOUNT ON 

SELECT comProveedores.Proveed_Id, comProveedores.Especializacion
	FROM comProveedores 
	INNER JOIN genEntidades ON (genEntidades.genEntidades = comProveedores.genEntidades)
	Where
	genEntidades.Cuit = @pCuit or
	genEntidades.Cuit = ' ' + @pCuit
ORDER BY comProveedores.Especializacion DESC
GO	

Drop Procedure comProveedoresDatosId
GO
Create Procedure comProveedoresDatosId
(
@pIdentity bigint
)
As

Declare @pProveed_Id varChar(15)
Select @pProveed_Id = Proveed_Id From comProveedores Where genEntidades = @pIdentity

exec comProveedoresDatos @pProveed_Id, 'H'
Go



 
 
 
 
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comProveedoresCtasPasivo.sql*/
-- exec comProveedoresCtasPasivoDatos 1, 1, 'PES'
DROP PROCEDURE comProveedoresCtasPasivoInsertar
GO
CREATE PROCEDURE comProveedoresCtasPasivoInsertar
(
@pgenEntidades bigint,
@pTipoCtaProv int,
@pMoneda_Id VarChar(5),
@pCuenta_Id varchar(25),
@pctaPagoXAdelantado varchar(25),
@pCtaAnticipo varchar(25)
)
AS
SET NOCOUNT ON 
	INSERT INTO comProveedoresCtasPasivo
	(
		genEntidades,
		TipoCtaProv,
		Moneda_Id,
		Cuenta_Id,
		ctaPagoXAdelantado,
		CtaAnticipo
	)
	VALUES 
	(
		@pgenEntidades,
		@pTipoCtaProv,
		dbo.FuncFKgenMonedas(@pMoneda_Id),
		dbo.FuncFKconCuentas(@pCuenta_Id),
		dbo.FuncFKconCuentas(@pctaPagoXAdelantado),
		dbo.FuncFKconCuentas(@pCtaAnticipo)
	)

GO

DROP PROCEDURE comProveedoresCtasPasivoDatos
GO
CREATE PROCEDURE comProveedoresCtasPasivoDatos
(
@pgenEntidades bigint,
@pTipoCtaProv int=null,
@pMoneda_Id VarChar(5)=null
)
AS
SET NOCOUNT ON 

SELECT comProveedoresCtasPasivo.genEntidades, 
	comProveedoresCtasPasivo.TipoCtaProv, comProveedoresTipoPasivo.Descripcion as DescripcionProveedoresTipoPasivo,
	genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMoneda, conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuenta,
	ctaPagoXAdelantado.Cuenta_Id AS ctaPagoXAdelantado, ctaPagoXAdelantado.Descripcion as DescripcionctaPagoXAdelantado,
	conCuentasAnt.Cuenta_Id CtaAnticipo, conCuentasAnt.Descripcion DescripcionCtaAnticipo
FROM comProveedoresCtasPasivo 
INNER JOIN comProveedores  ON (comProveedores.genEntidades = comProveedoresCtasPasivo.genEntidades)
INNER JOIN comProveedoresTipoPasivo  ON (comProveedoresTipoPasivo.TipoCtaProv = comProveedoresCtasPasivo.TipoCtaProv)
INNER JOIN genMonedas  ON (genMonedas.genMonedas = comProveedoresCtasPasivo.Moneda_Id)
INNER JOIN conCuentas  ON (conCuentas.conCuentas = comProveedoresCtasPasivo.Cuenta_Id)
Left Join conCuentas conCuentasAnt On conCuentasAnt.conCuentas = comProveedoresCtasPasivo.CtaAnticipo
LEFT JOIN conCuentas ctaPagoXAdelantado ON (ctaPagoXAdelantado.conCuentas = comProveedoresCtasPasivo.ctaPagoXAdelantado)
WHERE (comProveedoresCtasPasivo.genEntidades = @pgenEntidades)
AND (comProveedoresCtasPasivo.TipoCtaProv = ISNULL(@pTipoCtaProv,comProveedoresCtasPasivo.TipoCtaProv))
AND (comProveedoresCtasPasivo.Moneda_Id =  dbo.FuncFKgenMonedas(@pMoneda_Id) or @pMoneda_Id IS NULL)
 
 RETURN @@Error 

GO

DROP PROCEDURE comProveedoresCtasPasivoEliminar
GO
CREATE PROCEDURE comProveedoresCtasPasivoEliminar
(
@pgenEntidades bigint,
@pTipoCtaProv int=NULL,
@pMoneda_Id varchar(3)=NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comProveedoresCtasPasivo 
WHERE (genEntidades = @pgenEntidades)
AND (TipoCtaProv = ISNULL(@pTipoCtaProv,TipoCtaProv))
AND (Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id) OR @pMoneda_Id IS NULL)
 
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comProveedoresImpuestos.sql*/
DROP PROCEDURE comProveedoresImpuestosInsertar
GO
CREATE PROCEDURE comProveedoresImpuestosInsertar
(
@pProveed_Id bigint,
@pImpuesto_Id VarChar(5)
)
AS
BEGIN 
	INSERT INTO comProveedoresImpuestos
	(
		Proveed_Id,
		Impuesto_Id
	)
	VALUES 
	(
		@pProveed_Id,
		 dbo.FuncFKcomImpuestos(@pImpuesto_Id)
	)
END 

GO

DROP PROCEDURE comProveedoresImpuestosDatos
GO
CREATE PROCEDURE comProveedoresImpuestosDatos
(
@pProveed_Id VarChar(15),
@pImpuesto_Id VarChar(5)=NULL
)
AS
SET NOCOUNT ON 

SELECT comProveedores.genEntidades , comProveedores.Proveed_Id,  
	comImpuestos.Impuesto_Id, comImpuestos.Descripcion as DescripcionImpuestos, 
		comImpuestos.Depende_De, impTipoImpuesto.CodigoFiscal, 
		comImpuestos.Fecha_Desde, comImpuestos.Fecha_Hasta,
			comImpuestos.Porcentaje, comImpuestos.FormulaCalc,
			comImpuestos.VaAlCosto, 
			conCuentas.Cuenta_id as CuentaDebe, conCuentas.Descripcion as DescricpionCtaDebe,
			CtaCredito.Cuenta_id as CuentaHaber, CtaCredito.Descripcion as DescricpionCuentaCtaHaber
FROM comProveedoresImpuestos 
INNER JOIN comProveedores ON  comProveedores.genEntidades = comProveedoresImpuestos.Proveed_Id
INNER JOIN comImpuestos  ON (comImpuestos.comImpuestos = comProveedoresImpuestos.Impuesto_Id)
INNER JOIN impTipoImpuesto ON  impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto
LEFT OUTER JOIN conCuentas ON conCuentas.conCuentas = comImpuestos.CtaDebe
LEFT OUTER JOIN conCuentas CtaCredito ON CtaCredito.conCuentas = comImpuestos.CtaHaber
WHERE 
comProveedores.Proveed_Id = @pProveed_Id AND
ComImpuestos.Impuesto_Id = ISNULL(@pImpuesto_Id ,ComImpuestos.Impuesto_Id)
 
RETURN @@Error 

GO


DROP PROCEDURE comProveedoresImpuestosEliminar
GO
CREATE PROCEDURE comProveedoresImpuestosEliminar
(
@pProveed_Id bigint ,
@pImpuesto_Id VarChar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comProveedoresImpuestos 
WHERE 
Proveed_Id = @pProveed_Id AND 
(@pImpuesto_Id IS NULL OR Impuesto_Id = dbo.FuncFKcomImpuestos(@pImpuesto_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comProveedoresRetencion.sql*/
DROP PROCEDURE comProveedoresRetencionGuardar
GO
CREATE PROCEDURE comProveedoresRetencionGuardar
(
@pProveed_Id bigint,
@pCartera_Id varChar(5),
@pExencion qPorcentaje,
@pFechaHasta qFecha = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comProveedoresRetencion WHERE (Proveed_Id = @pProveed_Id) AND Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id)))
BEGIN 
	UPDATE comProveedoresRetencion
	SET Exencion = @pExencion,
		FechaHasta = @pFechaHasta
	WHERE (Proveed_Id = @pProveed_Id) AND Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id)
END 
ELSE 
BEGIN 
	INSERT INTO comProveedoresRetencion
	(
		Proveed_Id,
		Cartera_Id,
		Exencion,
		FechaHasta
	)
	VALUES
	(
		@pProveed_Id,
		dbo.FuncFKtesIdentifica(@pCartera_Id),
		@pExencion,
		@pFechaHasta
	)
END 

GO

DROP PROCEDURE comProveedoresRetencionDatos
GO
CREATE PROCEDURE comProveedoresRetencionDatos
(
@pProveed_Id bigint,
@pCartera_Id varChar(5) = Null
)
AS
SET NOCOUNT ON 

SELECT comProveedoresRetencion.Proveed_Id, comProveedores.RazonSocial, tesIdentifica.Cartera_Id, tesIdentifica.Descripcion as DescripcionIdRetProv,
	comProveedoresRetencion.Exencion, comProveedoresRetencion.FechaHasta
FROM comProveedoresRetencion 
INNER JOIN comProveedores  ON (comProveedores.genEntidades = comProveedoresRetencion.Proveed_Id)
INNER JOIN tesIdRetProv  ON (tesIdRetProv.Cartera_Id = comProveedoresRetencion.Cartera_Id)
Inner Join tesIdentifica On tesIdentifica.tesIdentifica = tesIdRetProv.Cartera_Id
WHERE comProveedoresRetencion.Proveed_Id = @pProveed_Id
AND comProveedoresRetencion.Cartera_Id = IsNull(dbo.FuncFKtesIdentifica(@pCartera_Id), comProveedoresRetencion.Cartera_Id)

RETURN @@Error 

GO

DROP PROCEDURE comProveedoresRetencionEliminar
GO
CREATE PROCEDURE comProveedoresRetencionEliminar
(
@pProveed_Id bigint,
@pCartera_Id varChar(5) = Null
)
AS
SET NOCOUNT ON 

DELETE FROM comProveedoresRetencion 
WHERE Proveed_Id = @pProveed_Id
AND Cartera_Id = IsNull(dbo.FuncFKtesIdentifica(@pCartera_Id), Cartera_Id)

RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comProveedoresSaldoIni.sql*/
DROP PROCEDURE comProveedoresSaldoIniDatos
GO
CREATE PROCEDURE comProveedoresSaldoIniDatos(
@ProveedDesde VarChar(15) ,
@ProveedHasta VarChar(15) , 
@pEmpresa_Id int
)

AS


SELECT @ProveedDesde as ProveedDesde, @ProveedHasta as ProveedHasta, @pEmpresa_Id as Empresa_Id, 
	' ' as  Archivo 


SELECT comMovprov.comMovprov as Renglon, 
	comProveedores.Proveed_Id, comProveedores.RazonSocial,  comMovprov.comMovprov,
	comMovprov.Fecha_CCP,  comMovprov.TipoMov, comMovTipos.Descripcion DescripcionTM, 
	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, 
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoStr, 
	genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, 
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
	genMovCuotas.CuotaNro,  genMovCuotas.Importe, genMovCuotas.FechaVencimiento, 
	comMovProv.ClaveFiscal,
	conAsientos.Cambio, genMonedas.Moneda_Id, genMonedas.Descripcion DescripcionMoneda,
	--conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuenta, 
	comProveedoresTipoPasivo.TipoCtaProv, comProveedoresTipoPasivo.Descripcion DescripcionTipoCtaProv,
	comMovProv.TipoCompFE, comMovProv.Base_Ganancias, 
	Cast(Case When Max(Comprob.Asiento_Id) Is Null Then 0 Else 1 End + Case When Max(Comprob_Ap.Asiento_Id) Is Null Then 0 Else 1 End As Bit) Aplicado
	From comMovProv 
	inner join comProveedores ON commovprov.Proveed_Id = comProveedores.genEntidades
		inner join conAsientos ON conAsientos.conAsientos = commovprov.commovprov
		INNER JOIN genEmpresas ON genEmpresas.genEmpresas =conAsientos.Empresa_Id
		INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id =conAsientos.conAsientos
		INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
		INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
		inner join conMovCont ON conMovCont.conAsientos = conAsientos.conAsientos and conMovCont.Clase IN ('PRO', 'ANTPR')
		--INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
		INNER JOIN comMovTipos ON comMovTipos.TipoMov = comMovprov.TipoMov
		INNER JOIN genMovCuotas ON genMovCuotas.Asiento_Id = comMovprov.comMovProv
		Inner Join comProveedoresTipoPasivo On comProveedoresTipoPasivo.TipoCtaProv = comMovProv.TipoCtaProv
		Left Join genCancMov Comprob On Comprob.Asiento_Id = comMovProv.comMovProv
		Left Join genCancMov Comprob_Ap On Comprob_Ap.Asiento_Id_Ap = comMovProv.comMovProv

Where
	conAsientos.Formulario_Id = dbo.FuncFKdisFormularios('frmcomProvSaldoIni') and 
	conAsientos.Anulado = 0 AND 
	comProveedores.Proveed_Id between @ProveedDesde and @ProveedHasta and
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id

Group By comMovprov.comMovprov, 
	comProveedores.Proveed_Id, comProveedores.RazonSocial,  comMovprov.comMovprov,
	comMovprov.Fecha_CCP,  comMovprov.TipoMov, comMovTipos.Descripcion, 
	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, 
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N), 
	genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, 
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
	genMovCuotas.CuotaNro,  genMovCuotas.Importe, genMovCuotas.FechaVencimiento, 
	comMovProv.ClaveFiscal,
	conAsientos.Cambio, genMonedas.Moneda_Id, genMonedas.Descripcion,
	comProveedoresTipoPasivo.TipoCtaProv, comProveedoresTipoPasivo.Descripcion,
	comMovProv.TipoCompFE, comMovProv.Base_Ganancias
-- IMPUESTOS


SELECT comMovprov.comMovprov as Renglon, comImpuestos.Impuesto_Id, comImpuestos.Descripcion, 
	comMovImpuestos.Base_Imponible, comMovImpuestos.Porcentaje, comMovImpuestos.Importe_Impuesto,
	comMovprov.comMovProv
	From comMovImpuestos inner join conAsientos ON
		conAsientos.conAsientos = comMovImpuestos.commovprov
		INNER JOIN comMovprov ON
		conAsientos.conAsientos = commovprov.commovprov
		inner join comProveedores ON
		commovprov.Proveed_Id = comProveedores.genEntidades
		INNER JOIN comImpuestos ON
		comImpuestos.comImpuestos = comMovImpuestos.Impuesto_Id
		INNER JOIN genAsiSegmentos ON
		genAsiSegmentos.Asiento_Id =conAsientos.conAsientos
Where
	conAsientos.Formulario_Id = dbo.FuncFKdisFormularios('frmcomProvSaldoIni') and 
	conAsientos.Anulado = 0 AND 
	comProveedores.Proveed_Id between @ProveedDesde and @ProveedHasta and 
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id


GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comProveedoresTipoPasivo.sql*/
DROP PROCEDURE comProveedoresTipoPasivoGuardar
GO
CREATE PROCEDURE comProveedoresTipoPasivoGuardar
(
@pTipoCtaProv int,
@pDescripcion varchar(100)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comProveedoresTipoPasivo WHERE (TipoCtaProv = @pTipoCtaProv)))
BEGIN 
	UPDATE comProveedoresTipoPasivo
	SET		Descripcion = @pDescripcion
	WHERE (TipoCtaProv = @pTipoCtaProv)
END 
ELSE 
BEGIN 
	INSERT INTO comProveedoresTipoPasivo
	(
		TipoCtaProv,
		Descripcion
	)
	VALUES 
	(
		@pTipoCtaProv,
		@pDescripcion
	)
END 

GO

DROP PROCEDURE comProveedoresTipoPasivoDatos
GO
CREATE PROCEDURE comProveedoresTipoPasivoDatos
(
@pTipoCtaProv int
)
AS
SET NOCOUNT ON 

SELECT comProveedoresTipoPasivo.TipoCtaProv, comProveedoresTipoPasivo.Descripcion
FROM comProveedoresTipoPasivo 
WHERE (TipoCtaProv = @pTipoCtaProv)
 
 RETURN @@Error 

GO

DROP PROCEDURE comProveedoresTipoPasivoEliminar
GO
CREATE PROCEDURE comProveedoresTipoPasivoEliminar
(
@pTipoCtaProv int 
)
AS
SET NOCOUNT ON 

DELETE FROM comProveedoresTipoPasivo 
WHERE @pTipoCtaProv = TipoCtaProv
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comProveedoresXLSCatalogo.sql*/
drop procedure comProveedoresXLSCatalogo
go
create procedure comProveedoresXLSCatalogo
(
    @pProveedorDesde varchar(15),
    @pProveedorHasta varchar(15)
)
as
select @pProveedorDesde as ProveedorDesde, @pProveedorHasta as ProveedorHasta
select Proveed_Id, genEntidades.Cuit as ClaveFiscal, TipoDoc, idFiscal,
case when comProveedores.Empresa_Id is null then 1 else 0 END as PTodasEmpresas,
RazonSocial, NombreLegal, Direccion1, Direccion2, Localidad, CodigoPostal, genProvincias.Provincia_Id,
genPaises.Pais_Id, Telefono, comRegiones.Region_Id, comConPago.CondPago_Id, comForEntre.FormaEnt_Id,
Contacto, EMail, Fax, Letra_Fact, Observaciones, comCondFiscal.CondFiscal_Id, Ganancias,
IBrutos, comOrigenesFiscales.Origen_Id, EsAduana, TipoCuenta, NroCuenta, CBU, tesBancos.Banco_Id,
comProveedores.Inactivo, comProvTipos.ProvTipo_Id
from comProveedores
inner join genEntidades on genEntidades.genEntidades=comProveedores.genEntidades
inner join genProvincias on genProvincias.genProvincias=comProveedores.Provincia_Id
inner join genPaises on genPaises.genPaises=comProveedores.Pais
inner join comRegiones on comRegiones.comRegiones=comProveedores.Region_Id
inner join comConPago on comConPago.comConPago=comProveedores.CondPago_Id
inner join comForEntre on comForEntre.comForEntre=comProveedores.FormaEnt_Id
inner join comCondFiscal on comCondFiscal.comCondFiscal=comProveedores.CondFiscal_Id
inner join comOrigenesFiscales on comOrigenesFiscales.comOrigenesFiscales=comProveedores.Origen_Id
inner join comProvTipos on comProvTipos.comProvTipos=comProveedores.ProvTipo_Id
left join tesBancos on tesBancos.tesBancos=comProveedores.Banco_Id
where comProveedores.Proveed_Id between @pProveedorDesde and @pProveedorHasta

select comProveedores.Proveed_Id, TipoCtaProv, genMonedas.Moneda_Id, conCuentas.Cuenta_Id, 
ctaPagoXAdelantado.Cuenta_Id ctaPagoXAdelantado, CtaAnticipo.Cuenta_Id as CtaAnticipo
from comProveedoresCtasPasivo
inner join comProveedores on comProveedores.genEntidades=comProveedoresCtasPasivo.genEntidades
inner join genMonedas on genMonedas.genMonedas=comProveedoresCtasPasivo.Moneda_Id
inner join conCuentas on conCuentas.conCuentas=comProveedoresCtasPasivo.Cuenta_Id
inner join conCuentas ctaPagoXAdelantado on ctaPagoXAdelantado.conCuentas=comProveedoresCtasPasivo.ctaPagoXAdelantado
inner join conCuentas CtaAnticipo on CtaAnticipo.conCuentas=comProveedoresCtasPasivo.CtaAnticipo
where comProveedores.Proveed_Id between @pProveedorDesde and @pProveedorHasta

select comProveedores.Proveed_Id, conCuentas.Cuenta_Id, conCentro1.Centro1_Id, conCentro2.Centro2_Id, comProvCtasContrap.Detalle
from comProvCtasContrap
inner join conCuentas on conCuentas.conCuentas=comProvCtasContrap.Cuenta_Id
inner join comProveedores on comProveedores.genEntidades=comProvCtasContrap.Proveed_Id
inner join conCentro1 on conCentro1.conCentro1=comProvCtasContrap.Centro1_Id
inner join conCentro2 on conCentro2.conCentro2=comProvCtasContrap.Centro2_Id
where comProveedores.Proveed_Id between @pProveedorDesde and @pProveedorHasta

select comProveedores.Proveed_Id, impImpuestos.Impuesto_Id from comProveedoresImpuestos
inner join comProveedores on comProveedores.genEntidades=comProveedoresImpuestos.Proveed_Id
inner join impImpuestos on impImpuestos.impImpuestos=comProveedoresImpuestos.Impuesto_Id
where comProveedores.Proveed_Id between @pProveedorDesde and @pProveedorHasta

select comProveedores.Proveed_Id, impJurisdicciones.Juris_Id, Situacion, Coeficiente, FechaHasta from genJurisCoeficientes
inner join comProveedores on comProveedores.genEntidades=genJurisCoeficientes.genEntidades
inner join impJurisdicciones on impJurisdicciones.impJurisdicciones=genJurisCoeficientes.Juris_Id

select comProveedores.Proveed_Id, tesIdentifica.Cartera_Id, Exencion, FechaHasta
from comProveedoresRetencion
inner join comProveedores on comProveedores.genEntidades=comProveedoresRetencion.Proveed_Id
inner join tesIdentifica on tesIdentifica.tesIdentifica=comProveedoresRetencion.Cartera_Id
where comProveedores.Proveed_Id between @pProveedorDesde and @pProveedorHasta
go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comProvTipos.sql*/
DROP PROCEDURE comProvTiposGuardar
GO
CREATE PROCEDURE comProvTiposGuardar
(
@pProvTipo_Id varchar(5),
@pProvTipo_Id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(35),
@pInactivo bit,
@pUsuario_Id int,
@pPosteado bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM comProvTipos WHERE (ProvTipo_Id = @pProvTipo_Id)))
BEGIN 
	UPDATE comProvTipos
	SET		@lIdentidad = comProvTipos,
		ProvTipo_Id = @pProvTipo_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (ProvTipo_Id = @pProvTipo_Id)
END 
ELSE 
BEGIN 
	INSERT INTO comProvTipos
	(
		ProvTipo_Id,
		Empresa_Id,
		Descripcion,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pProvTipo_Id,
		@pEmpresa_Id,
		@pDescripcion,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE comProvTiposDatos
GO
CREATE PROCEDURE comProvTiposDatos
(
@pProvTipo_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT comProvTipos.comProvTipos, comProvTipos.ProvTipo_Id, comProvTipos.Empresa_Id, Cast( Case When comProvTipos.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	comProvTipos.Descripcion, comProvTipos.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
	comProvTipos.Posteado
FROM comProvTipos 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = comProvTipos.Usuario_Id)
WHERE (ProvTipo_Id = @pProvTipo_Id)
 


  Declare @pidentity bigint= dbo.FuncFKcomProvTipos(@pProvTipo_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'comProvTipos'
 RETURN @@Error 

GO

DROP PROCEDURE comProvTiposEliminar
GO
CREATE PROCEDURE comProvTiposEliminar
(
@pProvTipo_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comProvTipos 
WHERE (ProvTipo_Id = @pProvTipo_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKcomProvTipos
GO

CREATE FUNCTION FuncFKcomProvTipos
(
@pProvTipo_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = comProvTipos FROM comProvTipos WHERE 
	ProvTipo_Id = @pProvTipo_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comRegiones.sql*/
DROP PROCEDURE comRegionesGuardar
GO
CREATE PROCEDURE comRegionesGuardar
(
@pRegion_Id varchar(5),
@pRegion_Id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(35),
@pInactivo bit,
@pUsuario_Id int,
@pPosteado bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM comRegiones WHERE (Region_Id = @pRegion_Id)))
BEGIN 
	UPDATE comRegiones
	SET		@lIdentidad = comRegiones,
		Region_Id = @pRegion_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (Region_Id = @pRegion_Id)
END 
ELSE 
BEGIN 
	INSERT INTO comRegiones
	(
		Region_Id,
		Empresa_Id,
		Descripcion,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pRegion_Id,
		@pEmpresa_Id,
		@pDescripcion,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE comRegionesDatos
GO
CREATE PROCEDURE comRegionesDatos
(
@pRegion_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT comRegiones.comRegiones, comRegiones.Region_Id, comRegiones.Empresa_Id, Cast( Case When comRegiones.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	comRegiones.Descripcion, comRegiones.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
	comRegiones.Posteado
FROM comRegiones 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = comRegiones.Usuario_Id)
WHERE (Region_Id = @pRegion_Id)
 


  Declare @pidentity bigint= dbo.FuncFKcomRegiones(@pRegion_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'comRegiones'
 RETURN @@Error 

GO

DROP PROCEDURE comRegionesEliminar
GO
CREATE PROCEDURE comRegionesEliminar
(
@pRegion_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comRegiones 
WHERE (Region_Id = @pRegion_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKcomRegiones
GO

CREATE FUNCTION FuncFKcomRegiones
(
@pRegion_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = comRegiones FROM comRegiones WHERE 
	Region_Id = @pRegion_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comRemiPendFact.sql*/
DROP PROCEDURE comRemiPendFactGuardar
GO
CREATE PROCEDURE comRemiPendFactGuardar
(
@pcomMovProv bigint,
@pRenglonCuerpo int,
@pstkMoviCabe bigint = NULL,
@pRenglon int = NULL,
@pCantidadFacturado qCantidadD8,
@pPrecioFacturado numeric(18,8),
@pCantidadOriginalFact numeric(18,8)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comRemiPendFact WHERE (comMovProv = @pcomMovProv) AND (RenglonCuerpo = @pRenglonCuerpo)))
BEGIN 
	UPDATE comRemiPendFact
	SET		stkMoviCabe = @pstkMoviCabe,
		Renglon = @pRenglon,
		CantidadFacturado = @pCantidadFacturado,
		PrecioFacturado = @pPrecioFacturado,
		CantidadOriginalFact = @pCantidadOriginalFact
	WHERE (comMovProv = @pcomMovProv) AND (RenglonCuerpo = @pRenglonCuerpo)
END 
ELSE 
BEGIN 
	INSERT INTO comRemiPendFact
	(
		comMovProv,
		RenglonCuerpo,
		stkMoviCabe,
		Renglon,
		CantidadFacturado,
		PrecioFacturado,
		CantidadOriginalFact
	)
	VALUES 
	(
		@pcomMovProv,
		@pRenglonCuerpo,
		@pstkMoviCabe,
		@pRenglon,
		@pCantidadFacturado,
		@pPrecioFacturado,
		@pCantidadOriginalFact
	)
END 

GO

DROP PROCEDURE comRemiPendFactDatos
GO
CREATE PROCEDURE comRemiPendFactDatos
(
@pcomMovProv bigint,
@pRenglonCuerpo int
)
AS
SET NOCOUNT ON 

SELECT comRemiPendFact.comMovProv, comRemiPendFact.RenglonCuerpo, comRemiPendFact.stkMoviCabe,
	comRemiPendFact.Renglon, comRemiPendFact.CantidadFacturado, comRemiPendFact.PrecioFacturado,
	comRemiPendFact.CantidadOriginalFact
FROM comRemiPendFact 
WHERE (comMovProv = @pcomMovProv)
AND (RenglonCuerpo = @pRenglonCuerpo)
 
 RETURN @@Error 

GO

DROP PROCEDURE comRemiPendFactEliminar
GO
CREATE PROCEDURE comRemiPendFactEliminar
(
@pcomMovProv bigint,
@pRenglonCuerpo int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comRemiPendFact 
WHERE (comMovProv = @pcomMovProv)
AND (RenglonCuerpo = ISNULL(@pRenglonCuerpo, RenglonCuerpo))
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comReqInterno.sql*/
DROP PROCEDURE comReqInternoGuardar
GO
CREATE PROCEDURE comReqInternoGuardar
(
@pSegmento_Id varchar(5),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pEmpresa_Id int,
@pFecha qFecha,
@pTipoPermi_Id varchar(5) = NULL,
@pObservaciones QMemo = NULL,
@pProveed_Id varchar(15) = NULL,
@pEstadoRI_Id char(1),
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int=(select comRISegmento.comReqInterno from comRISegmento where
Segmento_Id=dbo.FuncFKgenSegmentos(@pSegmento_Id) and Empresa_Id=@pEmpresa_Id and
Segmento1N=@pSegmento1N and Segmento2N=@pSegmento2N and Segmento3N= @pSegmento3N and Segmento4N=@pSegmento4N and
Segmento1C=@pSegmento1C and Segmento2C=@pSegmento2C and Segmento3C= @pSegmento3C and Segmento4C= @pSegmento4C)
IF (EXISTS (SELECT 1 FROM comRISegmento WHERE comReqInterno=@lIdentidad))
BEGIN 
	UPDATE comReqInterno
	SET		@lIdentidad = comReqInterno,
		Fecha = @pFecha,
		TipoPermi_Id = dbo.FuncFKcomTipoPermiRI(@pTipoPermi_Id),
		Observaciones = @pObservaciones,
		Proveed_Id = dbo.FuncFKcomProveedores(@pProveed_Id),
		EstadoRI_Id = @pEstadoRI_Id,
		Usuario_Id = @pUsuario_Id
	WHERE 
	comReqInterno=@lIdentidad
END 
ELSE 
BEGIN 
	INSERT INTO comReqInterno
	(
		Fecha,
		TipoPermi_Id,
		Observaciones,
		Proveed_Id,
		EstadoRI_Id,
		Usuario_Id
	)
	VALUES 
	(
		@pFecha,
		dbo.FuncFKcomTipoPermiRI(@pTipoPermi_Id),
		@pObservaciones,
		dbo.FuncFKcomProveedores(@pProveed_Id),
		@pEstadoRI_Id,
		@pUsuario_Id
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE comReqInternoDatos
GO
CREATE PROCEDURE comReqInternoDatos
(
@pSegmento_Id varchar(5),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad bigint=(select comRISegmento.comReqInterno from comRISegmento where
Segmento_Id=dbo.FuncFKgenSegmentos(@pSegmento_Id) and Empresa_Id=@pEmpresa_Id and
Segmento1N=@pSegmento1N and Segmento2N=@pSegmento2N and Segmento3N= @pSegmento3N and Segmento4N=@pSegmento4N and
Segmento1C=@pSegmento1C and Segmento2C=@pSegmento2C and Segmento3C= @pSegmento3C and Segmento4C= @pSegmento4C)

SELECT genSegmentos.Segmento_Id, Segmento1N, Segmento2N, Segmento3N, Segmento4N, Segmento1C, Segmento2C, Segmento3C, Segmento4C, comRISegmento.Empresa_Id,
comReqInterno.comReqInterno, comReqInterno.Fecha, comTipoPermiRI.TipoPermiRI_Id, 
	comTipoPermiRI.Descripcion as DescripcionTipoPermiRI,
	comReqInterno.Observaciones, comProveedores.Proveed_Id, comProveedores.RazonSocial as DescripcionProveedores, comReqInterno.EstadoRI_Id,
	comRIEstados.Descripcion as DescripcionRIEstados, genUsuarios.Usuario_Id
FROM comReqInterno 
LEFT JOIN comTipoPermiRI  ON (comTipoPermiRI.comTipoPermiRI = comReqInterno.TipoPermi_Id)
LEFT JOIN comProveedores  ON (comProveedores.genEntidades = comReqInterno.Proveed_Id)
INNER JOIN comRIEstados  ON (comRIEstados.EstadoRI_Id = comReqInterno.EstadoRI_Id)
inner join comRISegmento on comRISegmento.comReqInterno=comReqInterno.comReqInterno
inner join genSegmentos on genSegmentos.genSegmentos=comRISegmento.Segmento_Id
INNER JOIN genUsuarios ON genUsuarios.genUsuarios = comReqInterno.Usuario_Id
WHERE  
comReqInterno.comReqInterno=@lIdentidad

exec comRIArticuloDatos @lIdentidad
exec comRIMemoDatos @lIdentidad
exec comRIAutorizandoDatos @lIdentidad


Exec genAtributosGeneralesIdentityDatos @lIdentidad, 'comReqInterno'
 RETURN @@Error 

GO


DROP PROCEDURE comReqInternoDatosInt
GO
CREATE PROCEDURE comReqInternoDatosInt
(
@pReqInterno int
)
AS
SET NOCOUNT ON 

SELECT genSegmentos.Segmento_Id, Segmento1N, Segmento2N, Segmento3N, Segmento4N, Segmento1C, Segmento2C, Segmento3C, Segmento4C, comRISegmento.Empresa_Id,
comReqInterno.comReqInterno, comReqInterno.Fecha, comTipoPermiRI.TipoPermiRI_Id, comTipoPermiRI.Descripcion as DescripcionTipoPermiRI,
	comReqInterno.Observaciones, comProveedores.Proveed_Id, comProveedores.RazonSocial as DescripcionProveedores, comReqInterno.EstadoRI_Id,
	comRIEstados.Descripcion as DescripcionRIEstados, genUsuarios.Usuario_Id
FROM comReqInterno 
LEFT JOIN comTipoPermiRI  ON (comTipoPermiRI.comTipoPermiRI = comReqInterno.TipoPermi_Id)
LEFT JOIN comProveedores  ON (comProveedores.genEntidades = comReqInterno.Proveed_Id)
INNER JOIN comRIEstados  ON (comRIEstados.EstadoRI_Id = comReqInterno.EstadoRI_Id)
inner join comRISegmento on comRISegmento.comReqInterno=comReqInterno.comReqInterno
inner join genSegmentos on genSegmentos.genSegmentos=comRISegmento.Segmento_Id
INNER JOIN genUsuarios ON genUsuarios.genUsuarios = comReqInterno.Usuario_Id
WHERE  
comReqInterno.comReqInterno=@pReqInterno
exec comRIArticuloDatos @pReqInterno
exec comRIMemoDatos @pReqInterno
exec comRIAutorizandoDatos @pReqInterno

 Exec genAtributosGeneralesIdentityDatos @pReqInterno, 'comReqInterno'
 RETURN @@Error 

GO


DROP PROCEDURE comRICambiarEstado
GO
CREATE PROCEDURE comRICambiarEstado
(
	@pReqInterno int, 
	@pEstado Char(1)
)
as
Update comReqInterno set EstadoRI_Id = @pEstado where comReqInterno = @pReqInterno
GO


DROP PROCEDURE comReqInternoCompTienePendEntrega
GO
CREATE PROCEDURE comReqInternoCompTienePendEntrega (
	@comReqInerno Int 
)

AS

DECLARE @Cant INT

SET @Cant = (SELECT COUNT(1) FROM comRICuerpo where 
	comRICuerpo.comReqInterno = @comReqInerno and 
	comRICuerpo.Pendiente = 1
	)
	
SELECT @comReqInerno as comReqInterno , cast(CASE WHEN @Cant > 0 then 1 else 0 end	as Bit) Pendiente
GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comRetProv.sql*/
DROP PROCEDURE comRetProvInsertar
GO
CREATE PROCEDURE comRetProvInsertar
(
@pProveed_Id VarChar(15),
@pCartera_Id VarChar(5),
@pExencion qPorcentaje,
@pHasta qFecha
)
AS
SET NOCOUNT ON 
BEGIN 
	INSERT INTO comRetProv
	(
		Proveed_Id,
		Cartera_Id,
		Exencion,
		Hasta
	)
	VALUES 
	(
		dbo.FuncFKcomProveedores(@pProveed_Id),
		dbo.FuncFKtesIdentifica(@pCartera_Id),
		@pExencion,
		@pHasta
	)
END 

GO

DROP PROCEDURE comRetProvDatos
GO
CREATE PROCEDURE comRetProvDatos
(
@pProveed_Id VarChar(15),
@pCartera_Id VarChar(5)
)
AS
SET NOCOUNT ON 

SELECT comProveedores.Proveed_Id, comProveedores.RazonSocial as DescripcionProveedores, 
	tesIdentifica.Cartera_Id, tesIdentifica.Descripcion as DescripcionCartera, 
	comRetProv.Exencion, comRetProv.Hasta
FROM comRetProv 
INNER JOIN comProveedores  ON (comProveedores.genEntidades = comRetProv.Proveed_Id)
INNER JOIN tesIdRetProv  ON (tesIdRetProv.Cartera_Id = comRetProv.Cartera_Id)
INNER JOIN tesIdentifica  ON tesIdentifica.tesIdentifica =comRetProv.Cartera_Id

WHERE (comProveedores.Proveed_Id = @pProveed_Id)
AND (tesIdentifica.Cartera_Id = @pCartera_Id)
ORDER BY 3
 
RETURN @@Error 

GO

DROP PROCEDURE comRetProvEliminar
GO
CREATE PROCEDURE comRetProvEliminar
(
@pProveed_Id VarChar(15),
@pCartera_Id VarChar(5)
)
AS
SET NOCOUNT ON 

DELETE FROM comRetProv 
WHERE (Proveed_Id = dbo.FuncFKcomProveedores(@pProveed_Id))
AND (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comRIArticulo.sql*/
DROP PROCEDURE comRIArticuloGuardar
GO
CREATE PROCEDURE comRIArticuloGuardar
(
@pcomReqInterno int,
@pRenglon_RI int,
@pProducto_Id varchar(25) = NULL,
@pFactor qCantidadD8,
@pCantidadOriginal qCantidadD8,
@pPrecioOriginal qMonedaD4,
@pDeposito_Id varchar(15) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comRIArticulo WHERE (comReqInterno = @pcomReqInterno) AND (Renglon_RI = @pRenglon_RI)))
BEGIN 
	UPDATE comRIArticulo
	SET		Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id),
		Factor = @pFactor,
		CantidadOriginal = @pCantidadOriginal,
		PrecioOriginal = @pPrecioOriginal,
		Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id)
	WHERE (comReqInterno = @pcomReqInterno) AND (Renglon_RI = @pRenglon_RI)
END 
ELSE 
BEGIN 
	INSERT INTO comRIArticulo
	(
		comReqInterno,
		Renglon_RI,
		Producto_Id,
		Factor,
		CantidadOriginal,
		PrecioOriginal,
		Deposito_Id
	)
	VALUES 
	(
		@pcomReqInterno,
		@pRenglon_RI,
		dbo.FuncFKstkProductos(@pProducto_Id),
		@pFactor,
		@pCantidadOriginal,
		@pPrecioOriginal,
		dbo.FuncFKstkDepositos(@pDeposito_Id)
	)
END 

GO

DROP PROCEDURE comRIArticuloDatos
GO
CREATE PROCEDURE comRIArticuloDatos
(
@pcomReqInterno int,
@pRenglon_RI int=null
)
AS
SET NOCOUNT ON 

SELECT comRICuerpo.FechaNecesidad, comRICuerpo.Cantidad,
	comRICuerpo.Precio, comRICuerpo.CantidadRecibida, comRICuerpo.Observaciones, comRICuerpo.Pendiente,
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuentas, conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1,
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed,

comRIArticulo.comReqInterno, stkProductos.Producto_Id,
	stkProductos.Descripcion as DescripcionProductos, comRIArticulo.Factor, comRIArticulo.CantidadOriginal, comRIArticulo.PrecioOriginal,
	stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos
FROM comRIArticulo 
INNER JOIN comRICuerpo  ON (comRICuerpo.comReqInterno = comRIArticulo.comReqInterno) AND (comRICuerpo.Renglon_RI = comRIArticulo.Renglon_RI)
inner join comReqInterno on comReqInterno.comReqInterno=comRICuerpo.comReqInterno
LEFT JOIN stkProductos  ON (stkProductos.stkProductos = comRIArticulo.Producto_Id)
LEFT JOIN stkDepositos  ON (stkDepositos.stkDepositos = comRIArticulo.Deposito_Id)
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = comRICuerpo.Cuenta_Id)
LEFT JOIN conCentro1  ON (conCentro1.conCentro1 = comRICuerpo.Centro1_Id)
LEFT JOIN conCentro2  ON (conCentro2.conCentro2 = comRICuerpo.Centro2_Id)
LEFT JOIN stkUniMed  ON (stkUniMed.stkUniMed = comRICuerpo.Medida_Id)
WHERE (comReqInterno.comReqInterno = @pcomReqInterno)
AND (comRIArticulo.Renglon_RI = isnull(@pRenglon_RI, comRIArticulo.Renglon_RI))
 
 RETURN @@Error 

GO

DROP PROCEDURE comRIArticuloEliminar
GO
CREATE PROCEDURE comRIArticuloEliminar
(
@pcomReqInterno int,
@pRenglon_RI int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comRIArticulo 
WHERE (comReqInterno = @pcomReqInterno)
AND (Renglon_RI = ISNULL(@pRenglon_RI,Renglon_RI))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comRIAutorizando.sql*/
DROP PROCEDURE comRIAutorizandoGuardar
GO
CREATE PROCEDURE comRIAutorizandoGuardar
(
@pcomReqInterno int,
@pSecuencia int,
@pNivelAuto_Id varchar(5),
@pUsuario_Id int = NULL,
@pFecha qFechaHora = NULL,
@pTipoApro char(1),
@pResultadoFormula QMemo = NULL
)
AS
SET NOCOUNT ON 
IF (@pSecuencia > 0)
BEGIN 
	UPDATE comRIAutorizando
	SET		NivelAuto_Id = dbo.FuncFKcomNivelesAuto(@pNivelAuto_Id),
		Usuario_Id = @pUsuario_Id,
		Fecha = @pFecha,
		TipoApro = @pTipoApro,
		ResultadoFormula = @pResultadoFormula
	WHERE (comReqInterno = @pcomReqInterno) AND (Secuencia = @pSecuencia)
END 
ELSE 
BEGIN 
	SET @pSecuencia = ISNULL((SELECT MAX(Secuencia) 
		from comRIAutorizando 
			WHERE
			comReqInterno = @pcomReqInterno),0)+1

	INSERT INTO comRIAutorizando
	(
		comReqInterno,
		Secuencia,
		NivelAuto_Id,
		Usuario_Id,
		Fecha,
		TipoApro,
		ResultadoFormula
	)
	VALUES 
	(
		@pcomReqInterno,
		@pSecuencia,
		dbo.FuncFKcomNivelesAuto(@pNivelAuto_Id),
		@pUsuario_Id,
		@pFecha,
		@pTipoApro,
		@pResultadoFormula
	)
END 

SELECT @pSecuencia AS Secuencia

GO

DROP PROCEDURE comRIAutorizandoDatos
GO
CREATE PROCEDURE comRIAutorizandoDatos
(
@pcomReqInterno int,
@pSecuencia int=null
)
AS
SET NOCOUNT ON 

SELECT comRIAutorizando.comReqInterno, 
	comRIAutorizando.Secuencia, comNivelesAuto.NivelAuto_Id, comNivelesAuto.Descripcion as DescripcionNivelesAuto,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, comRIAutorizando.Fecha, comRIAutorizando.TipoApro,
	comRIAutorizando.ResultadoFormula, genUsuarios.genUsuarios
FROM comRIAutorizando 
INNER JOIN comReqInterno  ON (comReqInterno.comReqInterno = comRIAutorizando.comReqInterno)
INNER JOIN comNivelesAuto  ON (comNivelesAuto.comNivelesAuto = comRIAutorizando.NivelAuto_Id)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = comRIAutorizando.Usuario_Id)
WHERE (comReqInterno.comReqInterno = @pcomReqInterno)
AND (Secuencia = isnull(@pSecuencia,Secuencia))
 
 RETURN @@Error 

GO

DROP PROCEDURE comRIAutorizandoEliminar
GO
CREATE PROCEDURE comRIAutorizandoEliminar
(
@pcomReqInterno int,
@pSecuencia int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comRIAutorizando 
WHERE (comReqInterno = @pcomReqInterno)
AND (Secuencia = ISNULL(@pSecuencia, Secuencia))
 
 RETURN @@Error 

GO

DROP PROCEDURE comRiAutorizandoDatosSecuencia
GO
CREATE PROCEDURE comRiAutorizandoDatosSecuencia
(
@pcomReqInterno int,
@pSecuencia int
)
AS
SET NOCOUNT ON 

SELECT comRIAutorizando.comReqInterno, 
	comRIAutorizando.Secuencia, comNivelesAuto.NivelAuto_Id, comNivelesAuto.Descripcion as DescripcionNivelesAuto,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, comRIAutorizando.Fecha, comRIAutorizando.TipoApro,
	comRIAutorizando.ResultadoFormula, genUsuarios.genUsuarios
FROM comRiAutorizando 
INNER JOIN comReqInterno ON (comReqInterno.comReqInterno = comRiAutorizando.comReqInterno)
INNER JOIN comNivelesAuto  ON (comNivelesAuto.ComNivelesAuto = comRiAutorizando.NivelAuto_Id)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = comRiAutorizando.Usuario_Id)
WHERE comRiAutorizando.comReqInterno = @pcomReqInterno
AND comRiAutorizando.Secuencia = @pSecuencia
 
RETURN @@Error 

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comRIConsolidacion.sql*/
-- exec comRIConsolidacion '20200101','20200531',' ','OC','0','PES',' ','zz',1

drop procedure comRIConsolidacion
go
create procedure comRIConsolidacion
(
@pFechaDesde datetime,
@pFechaHasta datetime,
@pProveed_Id varchar(15),
@pTipoPermi_Id varchar(5),
@pCondPago_Id varchar(5),
@pMoneda_Id varchar(3),
@pFamiliaDesde VarChar(15),
@pFamiliaHasta VarChar(15),
@pEmpresa_Id int
)
as

Select @pFechaDesde as FechaDesde, @pFechaHasta as FechaHasta, @pProveed_Id as Proveed_Id, comProveedores.RazonSocial as DescripcionProveed, 
@pTipoPermi_Id as TipoPermi_Id, comTipoPermi.Descripcion as DescripcionTipoPermiRI, @pCondPago_Id as CondPago_Id, comConPago.Descripcion as DescripcionCondPago,
@pMoneda_Id as Moneda_Id, genMonedas.Descripcion as DescripcionMoneda, Convert(Numeric(18,2),0.00) as Total , 
	@pFamiliaDesde  FamiliaDesde, @pFamiliaHasta FamiliaHasta, '' as Observaciones
from 
comTipoPermi
left join comProveedores on comProveedores.Proveed_Id=@pProveed_Id
left join comConPago on comConPago.CondPago_Id=@pCondPago_Id
left join genMonedas on genMonedas.Moneda_Id=@pMoneda_Id
where comTipoPermi.TipoPermi_Id=@pTipoPermi_Id


Select dbo.Segmento(comRISegmento.Segmento_Id, comRISegmento.Segmento1C, comRISegmento.Segmento2C, comRISegmento.Segmento3C, comRISegmento.Segmento4C,
	comRISegmento.Segmento1N, comRISegmento.Segmento2N, comRISegmento.Segmento3N, comRISegmento.Segmento4N) as SegmentoSTR,
comRISegmento.Empresa_Id, comReqInterno.comReqInterno, comRICuerpo.FechaNecesidad, comRICuerpo.Cantidad, comRICuerpo.Precio, comProveedores.Proveed_Id, 
comProveedores.RazonSocial as DescripcionProveed, stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProducto, cast(0 as bit) as Marca,
stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDeposito, stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionMedida,
conCentro1.Centro1_Id, concentro1.Descripcion as DescripcionCentro1, conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, comRICuerpo.Renglon_RI,
comTipoPermiRI.GeneraOC,
isnull(sum(comOCCuerpo.Cantidad),0) as CantidadComprada, 
comRICuerpo.Cantidad-isnull(sum(comOCCuerpo.Cantidad),0) as Faltante,
comRICuerpo.Cantidad-isnull(sum(comOCCuerpo.Cantidad),0) as Comprar, 
ISNULL((SELECT sum(comOCCuerpo.Cantidad - comOCCuerpo.Cantidad_Recibida) 
	from comOCCuerpo, comOCArticulo, comOrdenComp, comOCSegmentos
	where
	comOrdenComp.comOrdenComp = comOCCuerpo.comOrdenComp and 
	comOCCuerpo.comOrdenComp = comOCArticulo.comOrdenComp and 
	comOCCuerpo.Renglon_OC = comOCArticulo.Renglon_OC and 
	comOCArticulo.Producto_Id = stkProductos.stkProductos and 
	comOCSegmentos.comOrdenComp = comOrdenComp.comOrdenComp and 
	comOrdenComp.Estado_Id IN ('P','A') AND 
	comOCCuerpo.Pendiente = 1 AND 
	comOCCuerpo.Cantidad > comOCCuerpo.Cantidad_Recibida AND 
	comOcArticulo.Deposito_Id = stkDepositos.stkDepositos and 
	comOCSegmentos.Empresa_Id = @pEmpresa_Id),0) as PorRecibir,
genUsuarios.Apellido_y_Nombres as Usuario, '' as Observaciones
from comReqInterno
right join comRICuerpo on comRICuerpo.comReqInterno=comReqInterno.comReqInterno
inner join comRIArticulo on comRIArticulo.comReqInterno=comReqInterno.comReqInterno and comRIArticulo.Renglon_RI=comRICuerpo.Renglon_RI
inner join comRISegmento on comRISegmento.comReqInterno=comReqInterno.comReqInterno
left join comOCRI on comOCRI.comReqInterno=comReqInterno.comReqInterno and comOCRI.Renglon_RI = comRICuerpo.Renglon_RI
left join comOrdenComp on comOrdenComp.comOrdenComp=comOCRI.comOrdenComp
--inner join genSegmentos on genSegmentos.genSegmentos=comRISegmento.Segmento_Id
left join stkProductos on stkProductos.stkProductos=comRIArticulo.Producto_Id
left join comProveedores on comProveedores.genEntidades=comReqInterno.Proveed_Id
inner join comTipoPermiRI on comReqInterno.TipoPermi_Id=comTipoPermiRI.comTipoPermiRI
left join comOCArticulo on comOCArticulo.comOrdenComp=comOCRI.comOrdenComp and 
	comOCArticulo.Renglon_OC=comOCRI.Renglon_OC
left join comOCCuerpo on comOCCuerpo.comOrdenComp=comOrdenComp.comOrdenComp and 
	comOCCuerpo.Renglon_OC=comOCArticulo.Renglon_OC
left join stkDepositos on comRIArticulo.Deposito_Id=stkDepositos.stkDepositos
left join stkUniMed on stkUniMed.stkUniMed=comRICuerpo.Medida_Id
left join conCentro1 on conCentro1.conCentro1=comRICuerpo.Centro1_Id
left join conCentro2 on concentro2.conCentro2=comRICuerpo.Centro2_Id
inner join comTipoPermi on comTipoPermi.TipoPermi_Id=@pTipoPermi_Id
Left join stkFamilias ON  stkFamilias.stkFamilias = stkProductos.Familia_Id
INNER JOIN genUsuarios ON  genUsuarios.genUsuarios = comReqInterno.Usuario_Id
where comReqInterno.Fecha between @pFechaDesde and @pFechaHasta and
comTipoPermiRI.GeneraOC=1 and comRICuerpo.Pendiente=1 and
comTipoPermi.TipoCuerpo in ('A','P') and 
ISNULL(stkFamilias.Familia_Id, ' ') between @pFamiliaDesde and @pFamiliaHasta
group by
comRISegmento.Segmento_Id, comRISegmento.Segmento1N, comRISegmento.Segmento2N, comRISegmento.Segmento3N, comRISegmento.Segmento4N,
comRISegmento.Segmento1C, comRISegmento.Segmento2C, comRISegmento.Segmento3C, comRISegmento.Segmento4C,
comRISegmento.Empresa_Id, comReqInterno.comReqInterno, comRICuerpo.FechaNecesidad, comRICuerpo.Cantidad, comRICuerpo.Precio, comProveedores.Proveed_Id, 
comProveedores.RazonSocial, stkProductos.Producto_Id, stkProductos.Descripcion, stkDepositos.Deposito_Id, stkDepositos.Descripcion,
stkUniMed.Medida_Id, stkUniMed.Descripcion, conCentro1.Centro1_Id, conCentro1.Descripcion, conCentro2.Centro2_Id, conCentro2.Descripcion, comRICuerpo.Renglon_RI,
comTipoPermiRI.GeneraOC, genUsuarios.Apellido_y_Nombres , stkProductos.stkProductos, stkDepositos.stkDepositos
Having comRICuerpo.Cantidad >isnull(sum(comOCCuerpo.Cantidad),0)


Select dbo.Segmento(comRISegmento.Segmento_Id, 
comRISegmento.Segmento1C, comRISegmento.Segmento2C, comRISegmento.Segmento3C, comRISegmento.Segmento4C,
comRISegmento.Segmento1N, comRISegmento.Segmento2N, comRISegmento.Segmento3N, comRISegmento.Segmento4N) as SegmentoSTR, comReqInterno.comReqInterno,
comRISegmento.Empresa_Id, comRICuerpo.FechaNecesidad, comRICuerpo.Cantidad, comRICuerpo.Precio, comProveedores.Proveed_Id, 
comProveedores.RazonSocial as DescripcionProveed, comRIMemo.Detalle, cast(0 as bit) as Marca, stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionMedida,
conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, conCentro2.Centro2_Id, conCentro2.Descripcion as  DescripcionCentro2,
conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuenta, comRICuerpo.Renglon_RI, comTipoPermiRI.GeneraOC,
isnull(sum(comOCCuerpo.Cantidad),0) as CantidadComprada, comRICuerpo.Cantidad-isnull(sum(comOCCuerpo.Cantidad),0) as Faltante,
comRICuerpo.Cantidad-isnull(sum(comOCCuerpo.Cantidad),0) as Comprar,
genUsuarios.Apellido_y_Nombres as Usuario, '' as Observaciones
from comReqInterno
right join comRICuerpo on comRICuerpo.comReqInterno=comReqInterno.comReqInterno
inner join comRISegmento on comRISegmento.comReqInterno=comReqInterno.comReqInterno
left join comOCRI on comOCRI.comReqInterno=comReqInterno.comReqInterno
left join comOrdenComp on comOrdenComp.comOrdenComp=comOCRI.comOrdenComp
--inner join genSegmentos on genSegmentos.genSegmentos=comRISegmento.Segmento_Id
left join comProveedores on comProveedores.genEntidades=comReqInterno.Proveed_Id
inner join comTipoPermiRI on comReqInterno.TipoPermi_Id=comTipoPermiRI.comTipoPermiRI
inner join comRIMemo on comRIMemo.comReqInterno=comReqInterno.comReqInterno and comRIMemo.Renglon_RI=comRICuerpo.Renglon_RI
left join comOCMemo on comOCMemo.comOrdenComp=comOrdenComp.comOrdenComp and comOCMemo.Detalle=comRIMemo.Detalle
left join comOCCuerpo on comOCCuerpo.comOrdenComp=comOrdenComp.comOrdenComp and comOCCuerpo.Renglon_OC=comOCMemo.Renglon_OC
left join stkUniMed on stkUniMed.stkUniMed=comRICuerpo.Medida_Id
left join conCentro1 on conCentro1.conCentro1=comRICuerpo.Centro1_Id
left join conCentro2 on conCentro2.conCentro2=comRICuerpo.Centro2_Id
left join conCuentas on conCuentas.conCuentas=comRICuerpo.Cuenta_Id
inner join comTipoPermi on comTipoPermi.TipoPermi_Id=@pTipoPermi_Id
INNER JOIN genUsuarios ON  genUsuarios.genUsuarios = comReqInterno.Usuario_Id
where comReqInterno.Fecha between @pFechaDesde and @pFechaHasta and
comTipoPermiRI.GeneraOC=1 and comRICuerpo.Pendiente=1 and
comTipoPermi.TipoCuerpo in ('A','M') and comReqInterno.EstadoRI_Id='A'  
group by
comRISegmento.Segmento_Id, comRISegmento.Segmento1N, comRISegmento.Segmento2N, comRISegmento.Segmento3N, comRISegmento.Segmento4N,
comRISegmento.Segmento1C, comRISegmento.Segmento2C, comRISegmento.Segmento3C, comRISegmento.Segmento4C, comReqInterno.comReqInterno,
comRISegmento.Empresa_Id, comRICuerpo.FechaNecesidad, comRICuerpo.Cantidad, comRICuerpo.Precio, comProveedores.Proveed_Id, 
comProveedores.RazonSocial, stkUniMed.Medida_Id, stkUniMed.Descripcion, comRIMemo.Detalle, conCentro1.Centro1_Id, conCentro1.Descripcion, conCentro2.Centro2_Id,
conCentro2.Descripcion, conCuentas.Cuenta_Id, conCuentas.Descripcion, comRICuerpo.Renglon_RI, comTipoPermiRI.GeneraOC, 
genUsuarios.Apellido_y_Nombres 
HAVING comRICuerpo.Cantidad> isnull(sum(comOCCuerpo.Cantidad),0)

select dbo.Segmento(comRISegmento.Segmento_Id, comRISegmento.Segmento1N, comRISegmento.Segmento2N, comRISegmento.Segmento3N, comRISegmento.Segmento4N,
comRISegmento.Segmento1C, comRISegmento.Segmento2C, comRISegmento.Segmento3C, comRISegmento.Segmento4C) as SegmentoSTR,
comRISegmento.Empresa_Id, comReqInterno.comReqInterno, comRICuerpo.FechaNecesidad, comRICuerpo.Cantidad, comRICuerpo.Precio, comProveedores.Proveed_Id, 
comProveedores.RazonSocial as DescripcionProveed, stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProducto, cast(0 as bit) as Marca,
stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDeposito, stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionMedida,
conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, comRICuerpo.Renglon_RI,
comTipoPermiRI.GeneraOC,
isnull(sum(RIGeneraOC.CantidadOriginal),0) + 
	isnull(sum(comRIArticulo.CantidadOriginal),0) + isnull(sum(stkExistencia.Cantidad),0) as StockVirtual, 
ISNULL((SELECT sum(comOCCuerpo.Cantidad - comOCCuerpo.Cantidad_Recibida)
	from comOCCuerpo, comOCArticulo, comOrdenComp, comOCSegmentos
	where
	comOrdenComp.comOrdenComp = comOCCuerpo.comOrdenComp and 
	comOCCuerpo.comOrdenComp = comOCArticulo.comOrdenComp and 
	comOCCuerpo.Renglon_OC = comOCArticulo.Renglon_OC and 
	comOCArticulo.Producto_Id = stkProductos.stkProductos and 
	comOCSegmentos.comOrdenComp = comOrdenComp.comOrdenComp and 
	comOrdenComp.Estado_Id IN ('P','A') AND 
	comOCCuerpo.Pendiente = 1 AND 
	comOCCuerpo.Cantidad > comOCCuerpo.Cantidad_Recibida AND 
	comOcArticulo.Deposito_Id = stkDepositos.stkDepositos and 
	comOCSegmentos.Empresa_Id = @pEmpresa_Id),0) as PorRecibir,
genUsuarios.Apellido_y_Nombres as Usuario
from comReqInterno
right join comRICuerpo on comRICuerpo.comReqInterno=comReqInterno.comReqInterno
inner join comRIArticulo on comRIArticulo.comReqInterno=comReqInterno.comReqInterno and comRIArticulo.Renglon_RI=comRICuerpo.Renglon_RI
inner join comRISegmento on comRISegmento.comReqInterno=comReqInterno.comReqInterno
left join stkProductos on stkProductos.stkProductos=comRIArticulo.Producto_Id
left join comProveedores on comProveedores.genEntidades=comReqInterno.Proveed_Id
inner join comTipoPermiRI on comReqInterno.TipoPermi_Id=comTipoPermiRI.comTipoPermiRI
left join stkDepositos on stkDepositos.stkDepositos=comRIArticulo.Deposito_Id
left join stkUniMed on stkUniMed.stkUniMed=comRICuerpo.Medida_Id
left join conCentro1 on conCentro1.conCentro1=comRICuerpo.Centro1_Id
left join conCentro2 on conCentro2.conCentro2=comRICuerpo.Centro2_Id
left join comTipoPermi on comTipoPermi.TipoPermi_Id=@pTipoPermi_Id
Left join stkFamilias ON  stkFamilias.stkFamilias = stkProductos.Familia_Id
INNER JOIN genUsuarios ON  genUsuarios.genUsuarios = comReqInterno.Usuario_Id
--Requesiciones Existentes que Generan Ordenes de Compra
left join comRIArticulo RIGeneraOC on RIGeneraOC.Producto_Id=comRIArticulo.Producto_Id and RIGeneraOC.Deposito_Id=comRIArticulo.Deposito_Id and
exists(select 1 from comRICuerpo where comRICuerpo.Renglon_RI=RIGeneraOC.Renglon_RI and 
comRICuerpo.comReqInterno= comRIArticulo.comReqInterno and comRICuerpo.Cantidad<comRICuerpo.CantidadRecibida) and
exists(select 1 from comRISegmento where comRISegmento.Empresa_Id=@pEmpresa_Id and comRISegmento.comReqInterno=RIGeneraOC.comReqInterno)
-- Ordenes de Compra Existentes
left join (comOCArticulo  INNER JOIN comOrdenComp ON comOrdenComp.comOrdenComp=comOCArticulo.comOrdenComp and 
	comOrdenComp.Estado_Id  != 'R' 
	inner join comOCSegmentos on comOCSegmentos.comOrdenComp = comOrdenComp.comOrdenComp and
	comOCSegmentos.Empresa_Id=@pEmpresa_Id) ON 
	comOCArticulo.Producto_Id=comRIArticulo.Producto_Id and 
	comOCArticulo.Deposito_Id= comRIArticulo.Deposito_Id  
--Existencia
left join stkExistencia on stkExistencia.Producto_Id=comRIArticulo.Producto_Id and comRIArticulo.Deposito_Id= stkExistencia.Deposito_Id and 
stkExistencia.Empresa_Id=@pEmpresa_Id
where comReqInterno.Fecha between @pFechaDesde and @pFechaHasta and
comTipoPermiRI.GeneraOC=0 and comTipoPermi.TipoCuerpo in ('A','P') and comReqInterno.EstadoRI_Id='A' and 
ISNULL(stkFamilias.Familia_Id, ' ') between @pFamiliaDesde and @pFamiliaHasta
group by
comRISegmento.Segmento_Id, comRISegmento.Segmento1N, comRISegmento.Segmento2N, comRISegmento.Segmento3N, comRISegmento.Segmento4N,
comRISegmento.Segmento1C, comRISegmento.Segmento2C, comRISegmento.Segmento3C, comRISegmento.Segmento4C,
comRISegmento.Empresa_Id, comReqInterno.comReqInterno, comRICuerpo.FechaNecesidad, comRICuerpo.Cantidad, comRICuerpo.Precio, comProveedores.Proveed_Id, 
comProveedores.RazonSocial , stkProductos.Producto_Id, stkProductos.Descripcion, stkDepositos.Deposito_Id, stkDepositos.Descripcion,
stkUniMed.Medida_Id, stkUniMed.Descripcion, conCentro1.Centro1_Id, conCentro1.Descripcion, conCentro2.Centro2_Id, conCentro2.Descripcion, comRICuerpo.Renglon_RI,
comTipoPermiRI.GeneraOC, genUsuarios.Apellido_y_Nombres, stkProductos.stkProductos, stkDepositos.stkDepositos
go


DROP PROCEDURE comOCRIGuardar
GO
CREATE PROCEDURE comOCRIGuardar
(
@pcomOrdenComp int,
@pRenglon_OC int,
@pcomReqInterno int,
@pRenglon_RI int,
@pCantidad qCantidadD8
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comOCRI WHERE (comOrdenComp = @pcomOrdenComp) AND (Renglon_OC = @pRenglon_OC) AND (comReqInterno = @pcomReqInterno) AND (Renglon_RI = @pRenglon_RI)))
BEGIN 
	UPDATE comOCRI
	SET		Cantidad = @pCantidad
	WHERE (comOrdenComp = @pcomOrdenComp) AND (Renglon_OC = @pRenglon_OC) AND (comReqInterno = @pcomReqInterno) AND (Renglon_RI = @pRenglon_RI)
END 
ELSE 
BEGIN 
	INSERT INTO comOCRI
	(
		comOrdenComp,
		Renglon_OC,
		comReqInterno,
		Renglon_RI,
		Cantidad
	)
	VALUES 
	(
		@pcomOrdenComp,
		@pRenglon_OC,
		@pcomReqInterno,
		@pRenglon_RI,
		@pCantidad
	)
END 

GO

drop procedure comRICambiarPendiente
go
create procedure comRICambiarPendiente
(
@pcomReqInterno int,
@pRenglon_RI int, 
@pPendiente Bit
)
as
update comRICuerpo
set Pendiente=@pPendiente
where comRICuerpo.comReqInterno=@pcomReqInterno and comRICuerpo.Renglon_RI=@pRenglon_RI
go


Drop Procedure comOCRIDatos
GO
CREATE Procedure comOCRIDatos
(
	@comOrdenComp int = NULL, 
	@Renglon_OC Int = NULL,
	@comReqInterno int = NULL,
	@Renglon_Ri Int = NULL
)
AS

SELECT comOrdenComp, Renglon_OC, comReqInterno, Renglon_RI
from comOCRI 
Where
comOrdenComp = ISNULL(@comOrdenComp,comOrdenComp) AND
Renglon_OC = ISNULL(@Renglon_OC, Renglon_OC) AND 
comReqInterno = ISNULL(@comReqInterno, comReqInterno) AND 
Renglon_RI = ISNULL(@Renglon_RI, Renglon_RI)
ORDER BY 1,2,3,4

GO 

Drop Procedure comOCRIEliminar
GO
CREATE Procedure comOCRIEliminar
(
	@comOrdenComp int , 
	@Renglon_OC Int = NULL,
	@comReqInterno int = NULL,
	@Renglon_Ri Int = NULL
)
AS

DELETE from comOCRI 
Where
comOrdenComp = @comOrdenComp AND
Renglon_OC = ISNULL(@Renglon_OC, Renglon_OC) AND 
comReqInterno = ISNULL(@comReqInterno, comReqInterno) AND 
Renglon_RI = ISNULL(@Renglon_RI, Renglon_RI)
GO 
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comRICuerpo.sql*/
DROP PROCEDURE comRICuerpoGuardar
GO
CREATE PROCEDURE comRICuerpoGuardar
(
@pcomReqInterno int,
@pRenglon_RI int,
@pFechaNecesidad qFecha,
@pCantidad qCantidadD8,
@pPrecio qMonedaD4,
@pCantidadRecibida qCantidadD8,
@pObservaciones QMemo = NULL,
@pPendiente Sino,
@pCuenta_Id varchar(25) = NULL,
@pCentro1_Id varchar(8) = NULL,
@pCentro2_Id varchar(8) = NULL,
@pMedida_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comRICuerpo WHERE (comReqInterno = @pcomReqInterno) AND (Renglon_RI = @pRenglon_RI)))
BEGIN 
	UPDATE comRICuerpo
	SET		FechaNecesidad = @pFechaNecesidad,
		Cantidad = @pCantidad,
		Precio = @pPrecio,
		CantidadRecibida = @pCantidadRecibida,
		Observaciones = @pObservaciones,
		Pendiente = @pPendiente,
		Cuenta_Id = dbo.FuncFKconCuentas(@pCuenta_Id),
		Centro1_Id = dbo.FuncFKconCentro1(@pCentro1_Id),
		Centro2_Id = dbo.FuncFKconCentro2(@pCentro2_Id),
		Medida_Id = dbo.FuncFKstkUniMed(@pMedida_Id)
	WHERE (comReqInterno = @pcomReqInterno) AND (Renglon_RI = @pRenglon_RI)
END 
ELSE 
BEGIN 
	INSERT INTO comRICuerpo
	(
		comReqInterno,
		Renglon_RI,
		FechaNecesidad,
		Cantidad,
		Precio,
		CantidadRecibida,
		Observaciones,
		Pendiente,
		Cuenta_Id,
		Centro1_Id,
		Centro2_Id,
		Medida_Id
	)
	VALUES 
	(
		@pcomReqInterno,
		@pRenglon_RI,
		@pFechaNecesidad,
		@pCantidad,
		@pPrecio,
		@pCantidadRecibida,
		@pObservaciones,
		@pPendiente,
		dbo.FuncFKconCuentas(@pCuenta_Id),
		dbo.FuncFKconCentro1(@pCentro1_Id),
		dbo.FuncFKconCentro2(@pCentro2_Id),
		dbo.FuncFKstkUniMed(@pMedida_Id)
	)
END 

GO
DROP PROCEDURE comRICuerpoDatos
GO
CREATE PROCEDURE comRICuerpoDatos
(
@pcomReqInterno int,
@pRenglon_RI int
)
AS
SET NOCOUNT ON 

SELECT comRICuerpo.Renglon_RI, comRICuerpo.FechaNecesidad, comRICuerpo.Cantidad,
	comRICuerpo.Precio, comRICuerpo.CantidadRecibida, comRICuerpo.Observaciones, comRICuerpo.Pendiente,
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuentas, conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1,
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed,
	comReqInterno.comReqInterno
FROM comRICuerpo 
INNER JOIN comReqInterno  ON (comReqInterno.comReqInterno = comRICuerpo.comReqInterno)
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = comRICuerpo.Cuenta_Id)
LEFT JOIN conCentro1  ON (conCentro1.conCentro1 = comRICuerpo.Centro1_Id)
LEFT JOIN conCentro2  ON (conCentro2.conCentro2 = comRICuerpo.Centro2_Id)
LEFT JOIN stkUniMed  ON (stkUniMed.stkUniMed = comRICuerpo.Medida_Id)
WHERE (comReqInterno.comReqInterno = @pcomReqInterno)
AND (Renglon_RI = @pRenglon_RI)
 
 RETURN @@Error 

GO

DROP PROCEDURE comRICuerpoEliminar
GO
CREATE PROCEDURE comRICuerpoEliminar
(
@pcomReqInterno int,
@pRenglon_RI int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comRICuerpo 
WHERE (comReqInterno = @pcomReqInterno)
AND (Renglon_RI = ISNULL(@pRenglon_RI, Renglon_RI))
 
 RETURN @@Error 

GO

DROP PROCEDURE comRICuerpoRecibir
GO
CREATE PROCEDURE comRICuerpoRecibir
(
@pcomReqInterno int,
@pRenglon_RI int ,
@pCantidad qCantidadD8
)
AS
SET NOCOUNT ON 

Update comRICuerpo  set CantidadRecibida = CantidadRecibida + @pCantidad
WHERE (comReqInterno = @pcomReqInterno)
AND (Renglon_RI = @pRenglon_RI)

Update comRICuerpo  set Pendiente = 
	case when CantidadRecibida >= Cantidad then 0 else 1 end
WHERE (comReqInterno = @pcomReqInterno)
AND (Renglon_RI = @pRenglon_RI)

 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comRIMemo.sql*/
DROP PROCEDURE comRIMemoGuardar
GO
CREATE PROCEDURE comRIMemoGuardar
(
@pcomReqInterno int,
@pRenglon_RI int,
@pSubCategoria_Id varchar(5) = NULL,
@pDetalle QMemo = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comRIMemo WHERE (comReqInterno = @pcomReqInterno) AND (Renglon_RI = @pRenglon_RI)))
BEGIN 
	UPDATE comRIMemo
	SET		SubCategoria_Id = dbo.FuncFKcomSubCategorias(@pSubCategoria_Id),
		Detalle = @pDetalle
	WHERE (comReqInterno = @pcomReqInterno) AND (Renglon_RI = @pRenglon_RI)
END 
ELSE 
BEGIN 
	INSERT INTO comRIMemo
	(
		comReqInterno,
		Renglon_RI,
		SubCategoria_Id,
		Detalle
	)
	VALUES 
	(
		@pcomReqInterno,
		@pRenglon_RI,
		dbo.FuncFKcomSubCategorias(@pSubCategoria_Id),
		@pDetalle
	)
END 

GO

DROP PROCEDURE comRIMemoDatos
GO
CREATE PROCEDURE comRIMemoDatos
(
@pcomReqInterno int,
@pRenglon_RI int=null
)
AS
SET NOCOUNT ON 

SELECT  comRICuerpo.FechaNecesidad, comRICuerpo.Cantidad,
	comRICuerpo.Precio, comRICuerpo.CantidadRecibida, comRICuerpo.Observaciones, comRICuerpo.Pendiente,
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuentas, conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1,
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed,

comRIMemo.comReqInterno, comSubCategorias.SubCategoria_Id,
	comSubCategorias.Descripcion as DescripcionSubCategorias, comRIMemo.Detalle, comCategorias.Categoria_Id, comCategorias.Descripcion as DescripcionCategoria
FROM comRIMemo 
INNER JOIN comRICuerpo  ON (comRICuerpo.comReqInterno = comRIMemo.comReqInterno) AND (comRICuerpo.Renglon_RI = comRIMemo.Renglon_RI)
LEFT JOIN comSubCategorias  ON (comSubCategorias.comSubCategorias = comRIMemo.SubCategoria_Id)
INNER JOIN comReqInterno  ON (comReqInterno.comReqInterno = comRICuerpo.comReqInterno)
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = comRICuerpo.Cuenta_Id)
LEFT JOIN conCentro1  ON (conCentro1.conCentro1 = comRICuerpo.Centro1_Id)
LEFT JOIN conCentro2  ON (conCentro2.conCentro2 = comRICuerpo.Centro2_Id)
LEFT JOIN stkUniMed  ON (stkUniMed.stkUniMed = comRICuerpo.Medida_Id)
left join comCategorias on comCategorias.comCategorias=comSubCategorias.Categoria_Id
WHERE (comReqInterno.comReqInterno = @pcomReqInterno)
AND (comRIMemo.Renglon_RI = isnull(@pRenglon_RI, comRIMemo.Renglon_RI))
 
 RETURN @@Error 

GO

DROP PROCEDURE comRIMemoEliminar
GO
CREATE PROCEDURE comRIMemoEliminar
(
@pcomReqInterno int,
@pRenglon_RI int=null
)
AS
SET NOCOUNT ON 

DELETE FROM comRIMemo 
WHERE (comReqInterno = @pcomReqInterno)
AND (Renglon_RI = isnull(@pRenglon_RI, Renglon_RI))
 
 RETURN @@Error 

GO

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comRIPendAuto.sql*/

-- comReqInternoPendAuto 1,46
DROP PROCEDURE comReqInternoPendAuto
GO
CREATE PROCEDURE comReqInternoPendAuto 
( 
	@Empresa_Id int , 
	@pUsuario Int
)
AS

	SELECT @Empresa_Id AS Empresa_Id 

	select comRISegmento.comReqInterno, comRISegmento.Empresa_Id, 
	dbo.Segmento(comRISegmento.Segmento_Id,
	comRISegmento.Segmento1C, comRISegmento.Segmento2C, comRISegmento.Segmento3C, comRISegmento.Segmento4C,
	comRISegmento.Segmento1N,comRISegmento.Segmento2N, comRISegmento.Segmento3N, comRISegmento.Segmento4N) as SegmentoStr, 
		comReqInterno.Fecha, comProveedores.Proveed_Id, comProveedores.RazonSocial, 
		Convert(Numeric(18,2),sum(comRICuerpo.Cantidad * comRICuerpo.Precio))  as Total, 
		comReqInterno.EstadoRI_Id , comRIEstados.Descripcion as DescripcionEstadoRI, 
		genSegmentos.Segmento_Id,
		comRISegmento.Segmento1C, comRISegmento.Segmento2C, comRISegmento.Segmento3C, comRISegmento.Segmento4C,
		comRISegmento.Segmento1N,comRISegmento.Segmento2N, comRISegmento.Segmento3N, comRISegmento.Segmento4N, 
		genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres, 
			comRIAutorizando.Secuencia, comNivelesAuto.NivelAuto_Id
		
	from comRISegmento INNER JOIN comReqInterno ON
		comRISegmento.comReqInterno = comReqInterno.comReqInterno
		INNER JOIN comRICuerpo ON
		comRICuerpo.comReqInterno = comReqInterno.comReqInterno
		LEFT JOIN comProveedores ON
		comProveedores.genEntidades = comReqInterno.Proveed_Id
		INNER JOIN comRIEstados ON 
		comRIEstados.EstadoRI_Id = comReqInterno.EstadoRI_Id
		INNER JOIN genSegmentos ON 
		genSegmentos.genSegmentos = comRISegmento.Segmento_Id
		inner JOIN comRIAutorizando on comRIAutorizando.comReqInterno= comReqInterno.comReqInterno 
		inner join comNivelesAutoUsu ON comNivelesAutoUsu.NivelAuto_id = comRIAutorizando.NivelAuto_Id
		INNER JOIN comNivelesAuto ON comNivelesAuto.comNivelesAuto = comRIAutorizando.NivelAuto_Id
		INNER JOIN genUsuarios ON genUsuarios.genUsuarios = comReqInterno.Usuario_Id
	WHERE	
		comRISegmento.Empresa_Id = @Empresa_Id and 
		comNivelesAutoUsu.Usuario_Id = @pUsuario and 
		comRIAutorizando.Usuario_Id IS NULL AND 
		comReqInterno.EstadoRI_Id = 'P'  
	Group by comRISegmento.comReqInterno, comRISegmento.Empresa_Id, 
	comRISegmento.Segmento1N,comRISegmento.Segmento2N, comRISegmento.Segmento3N, comRISegmento.Segmento4N, 
	comRISegmento.Segmento1C, comRISegmento.Segmento2C, comRISegmento.Segmento3C, comRISegmento.Segmento4C, 
		comReqInterno.Fecha, comProveedores.Proveed_id, comProveedores.RazonSocial, 
		comReqInterno.EstadoRI_Id , comRIEstados.Descripcion, 
		comRISegmento.Segmento_Id , genSegmentos.Segmento_Id, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres,
		comRIAutorizando.Secuencia, comNivelesAuto.NivelAuto_Id
	ORDER BY 1

	-- Agrego las que Necesito para Consulta
	exec comReqInternoDatos 0,' ', 0,0,0,0,' ',' ',' ',' '
GO	

DROP PROCEDURE comReqInternoCambiarEstado
GO

CREATE PROCEDURE comReqInternoCambiarEstado
	(
	@pComReqInterno Int, 
	@pEstado_Id Char(1),
	@pUsuario_Id Int
	)
	as
	
	Update comReqInterno set EstadoRI_Id = @pEstado_Id
		--,Autorizo = 
			--case when @pEstado_Id IN ('R','A') THEN @pUsuario_id else Autorizo end
	Where
		comReqInterno = @pComReqInterno
GO		
			
	

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comRISegmento.sql*/
DROP PROCEDURE comRISegmentoGuardar
GO
CREATE PROCEDURE comRISegmentoGuardar
(
@pSegmento_Id varchar(5),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pEmpresa_Id int,
@pcomReqInterno int,
@pTieneAutomatico bit
)
AS
SET NOCOUNT ON 

IF (EXISTS (SELECT 1 FROM comRISegmento WHERE (Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND (Segmento1N = @pSegmento1N) AND (Segmento2N = @pSegmento2N) AND (Segmento3N = @pSegmento3N) AND (Segmento4N = @pSegmento4N) AND (Segmento1C = @pSegmento1C) AND (Segmento2C = @pSegmento2C) AND (Segmento3C = @pSegmento3C) AND (Segmento4C = @pSegmento4C) AND (Empresa_Id = @pEmpresa_Id)))
BEGIN 
	UPDATE comRISegmento
	SET		Empresa_Id = @pEmpresa_Id,
		comReqInterno = @pcomReqInterno
	WHERE (Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND (Segmento1N = @pSegmento1N) AND (Segmento2N = @pSegmento2N) AND (Segmento3N = @pSegmento3N) AND (Segmento4N = @pSegmento4N) AND (Segmento1C = @pSegmento1C) AND (Segmento2C = @pSegmento2C) AND (Segmento3C = @pSegmento3C) AND (Segmento4C = @pSegmento4C) AND (Empresa_Id = @pEmpresa_Id)
END 
ELSE 
BEGIN 
if (@pTieneAutomatico=1)
	BEGIN
		
		
			SET @pSegmento1N = (SELECT MAX(comRISegmento.Segmento1N)+1 AS Segmento1N 
					FROM comRISegmento 
					Where
						comRISegmento.Empresa_id = @pEmpresa_Id and 
						comRISegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) And
						comRISegmento.Segmento2N = @pSegmento2N And
						comRISegmento.Segmento3N = @pSegmento3N And
						comRISegmento.Segmento4N = @pSegmento4N And
						comRISegmento.Segmento1C = @pSegmento1C And
						comRISegmento.Segmento2C = @pSegmento2C And
						comRISegmento.Segmento3C = @pSegmento3C And
						comRISegmento.Segmento4C = @pSegmento4C)
						
						
			IF (@pSegmento1N IS NULL) 
			begin
				SET @pSegmento1N = (SELECT PrimerNumero
					FROM genContadorSegmento Where
						(genContadorSegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
						(genContadorSegmento.Segmento2N = @pSegmento2N) AND 
						(genContadorSegmento.Segmento3N = @pSegmento3N) AND 
						(genContadorSegmento.Segmento4N = @pSegmento4N) AND 
						(genContadorSegmento.Segmento1C = @pSegmento1C) AND 
						(genContadorSegmento.Segmento2C = @pSegmento2C) AND 
						(genContadorSegmento.Segmento3C = @pSegmento3C) AND 
						(genContadorSegmento.Segmento4C = @pSegmento4C) and 
						genContadorSegmento.Empresa_id = @pEmpresa_id and 
						genContadorSegmento.Segmento_Id =dbo.FuncFKgenSegmentos(@pSegmento_Id))
								
			end

			-- esto solo pasa si empieza en 1 esta prendido
			if @pSegmento1N is null or @pSegmento1N < 0
			begin
				set @pSegmento1N = 1
			end	
		
			
	END
	INSERT INTO comRISegmento
	(
		Segmento_Id,
		Segmento1N,
		Segmento2N,
		Segmento3N,
		Segmento4N,
		Segmento1C,
		Segmento2C,
		Segmento3C,
		Segmento4C,
		Empresa_Id,
		comReqInterno
	)
	VALUES 
	(
		dbo.FuncFKgenSegmentos(@pSegmento_Id),
		@pSegmento1N,
		@pSegmento2N,
		@pSegmento3N,
		@pSegmento4N,
		@pSegmento1C,
		@pSegmento2C,
		@pSegmento3C,
		@pSegmento4C,
		@pEmpresa_Id,
		@pcomReqInterno
	)
END 
SELECT @pSegmento1N as Segmento
GO

DROP PROCEDURE comRISegmentoDatos
GO
CREATE PROCEDURE comRISegmentoDatos
(
@pSegmento_Id varchar(5),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 

SELECT genSegmentos.Segmento_Id, comRISegmento.Segmento1N, comRISegmento.Segmento2N,
	comRISegmento.Segmento3N, comRISegmento.Segmento4N, comRISegmento.Segmento1C, comRISegmento.Segmento2C,
	comRISegmento.Segmento3C, comRISegmento.Segmento4C, comRISegmento.Empresa_Id, comRISegmento.comReqInterno,
	genSegmentos.TieneColumnaAutomatica
FROM comRISegmento 
INNER JOIN genSegmentos  ON (genSegmentos.genSegmentos = comRISegmento.Segmento_Id)
LEFT JOIN comReqInterno  ON (comReqInterno.comReqInterno = comRISegmento.comReqInterno)
WHERE (genSegmentos.Segmento_Id = @pSegmento_Id)
AND (Segmento1N = @pSegmento1N)
AND (Segmento2N = @pSegmento2N)
AND (Segmento3N = @pSegmento3N)
AND (Segmento4N = @pSegmento4N)
AND (Segmento1C = @pSegmento1C)
AND (Segmento2C = @pSegmento2C)
AND (Segmento3C = @pSegmento3C)
AND (Segmento4C = @pSegmento4C)
AND (Empresa_Id = @pEmpresa_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE comRISegmentoEliminar
GO
CREATE PROCEDURE comRISegmentoEliminar
(
@pSegmento_Id varchar(10),
@pSegmento1N int = NULL,
@pSegmento2N int = NULL,
@pSegmento3N int = NULL,
@pSegmento4N int = NULL,
@pSegmento1C varchar(20) = NULL,
@pSegmento2C varchar(20) = NULL,
@pSegmento3C varchar(20) = NULL,
@pSegmento4C varchar(20) = NULL,
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 

DELETE FROM comRISegmento 
WHERE (Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id))
AND (Segmento1N = ISNULL(@pSegmento1N, Segmento1N))
AND (Segmento2N = ISNULL(@pSegmento2N, Segmento2N))
AND (Segmento3N = ISNULL(@pSegmento3N, Segmento3N))
AND (Segmento4N = ISNULL(@pSegmento4N, Segmento4N))
AND (Segmento1C = ISNULL(@pSegmento1C, Segmento1C))
AND (Segmento2C = ISNULL(@pSegmento2C, Segmento2C))
AND (Segmento3C = ISNULL(@pSegmento3C, Segmento3C))
AND (Segmento4C = ISNULL(@pSegmento4C, Segmento4C))
AND (Empresa_Id =  @pEmpresa_Id) 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comSolicitudSat.sql*/
DROP PROCEDURE comSolicitudesSatGuardar
GO
CREATE PROCEDURE comSolicitudesSatGuardar
(
@pSolicitud int,
@pFechaDesde datetime,
@pFechaHasta datetime,
@pEmpresa_Id int = NULL,
@pEmitidos bit = NULL,
@pDescargados bit = NULL,
@pFecha datetime = NULL,
@pUsuario_Id int = NULL,
@pSolicitud_Sat varchar(max),
@pRespuestaSat varchar(100),
@pMetaDatos bit
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM comSolicitudesSat WHERE (Solicitud = @pSolicitud)))
BEGIN 
	UPDATE comSolicitudesSat
	SET		FechaDesde = @pFechaDesde,
		FechaHasta = @pFechaHasta,
		Empresa_Id = @pEmpresa_Id,
		Emitidos = @pEmitidos,
		Descargados = @pDescargados,
		Fecha = @pFecha,
		Usuario_Id = @pUsuario_Id,
		SolicitudSat=@pSolicitud_Sat,
		UltimaRespuestaSat=@pRespuestaSat, 
		MetaDatos = @pMetaDatos
	WHERE (Solicitud = @pSolicitud)
END 
ELSE 
BEGIN 
	INSERT INTO comSolicitudesSat
	(
		FechaDesde,
		FechaHasta,
		Empresa_Id,
		Emitidos,
		Descargados,
		Fecha,
		Usuario_Id,
		SolicitudSat,
		UltimaRespuestaSat,
		MetaDatos
	)
	VALUES 
	(
		@pFechaDesde,
		@pFechaHasta,
		@pEmpresa_Id,
		@pEmitidos,
		@pDescargados,
		@pFecha,
		@pUsuario_Id,
		@pSolicitud_Sat,
		@pRespuestaSat,
		@pMetaDatos
	)

	SET @pSolicitud =  Cast(SCOPE_IDENTITY() as bigint) 
END 
Select @pSolicitud as RetVal 

GO

DROP PROCEDURE comSolicitudesSatDatos
GO
CREATE PROCEDURE comSolicitudesSatDatos
(
@pSolicitud int,
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 

SELECT comSolicitudesSat.Solicitud, comSolicitudesSat.FechaDesde, comSolicitudesSat.FechaHasta, comSolicitudesSat.Solicitud Solicitud_Nueva,
	comSolicitudesSat.Empresa_Id, comSolicitudesSat.Emitidos, comSolicitudesSat.Descargados,
	comSolicitudesSat.Fecha, comSolicitudesSat.Usuario_Id, cast(0 as bit) as Pendiente, SolicitudSat, 
	comSolicitudesSat.MetaDatos, cast(0 as bit) as Nueva
FROM comSolicitudesSat 
WHERE (Solicitud = @pSolicitud)

SELECT comSolicitudesSat.Solicitud, SolicitudSat, comSolicitudesSat.FechaDesde, comSolicitudesSat.FechaHasta, 
	comSolicitudesSat.Emitidos,comSolicitudesSat.Metadatos,
	comSolicitudesSat.Fecha, genUsuarios.Usuario_Id, cast(0 as bit) as Pendiente,UltimaRespuestaSat
	FROM comSolicitudesSat
	inner join genUsuarios on genUsuarios=comSolicitudesSat.Usuario_Id
	where comSolicitudesSat.Descargados=0 and comSolicitudesSat.Empresa_Id=@pEmpresa_Id
 RETURN @@Error 

GO

DROP PROCEDURE comSolicitudesSatEliminar
GO
CREATE PROCEDURE comSolicitudesSatEliminar
(
@pSolicitud int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comSolicitudesSat 
WHERE (Solicitud = ISNULL(@pSolicitud, Solicitud))
 
 RETURN @@Error 

GO

GO


DROP PROCEDURE comSolicitudesSatDatosXEmpresa
GO
CREATE PROCEDURE comSolicitudesSatDatosXEmpresa
(
@pEmpresa_Id int,
@pPendientes sino
)
AS
SET NOCOUNT ON 

SELECT comSolicitudesSat.Solicitud, comSolicitudesSat.FechaDesde, comSolicitudesSat.FechaHasta, comSolicitudesSat.Solicitud Solicitud_Nueva,
	comSolicitudesSat.Empresa_Id, comSolicitudesSat.Emitidos, comSolicitudesSat.Descargados,
	comSolicitudesSat.Fecha, comSolicitudesSat.Usuario_Id, cast(0 as bit) as Pendiente, SolicitudSat, 
	comSolicitudesSat.MetaDatos, cast(0 as bit) as Nueva
FROM comSolicitudesSat 
WHERE (Solicitud = @pEmpresa_Id and 
	(@pPendientes=1 or Descargados=0))

SELECT comSolicitudesSat.Solicitud, SolicitudSat, comSolicitudesSat.FechaDesde, comSolicitudesSat.FechaHasta, 
	comSolicitudesSat.Emitidos, comSolicitudesSat.Metadatos,
	comSolicitudesSat.Fecha, genUsuarios.Usuario_Id, cast(1-comSolicitudesSat.Descargados as bit) as Pendiente,UltimaRespuestaSat
	FROM comSolicitudesSat
	inner join genUsuarios on genUsuarios=comSolicitudesSat.Usuario_Id
	where 
	(comSolicitudesSat.Descargados=0 or @pPendientes=0) and 
	comSolicitudesSat.Empresa_Id=@pEmpresa_Id
	-- and comSolicitudesSat.Fecha>dateadd(DD,-7,GETDATE()) 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comSubCategorias.sql*/
DROP PROCEDURE comSubCategoriasGuardar
GO
CREATE PROCEDURE comSubCategoriasGuardar
(
@pSubCategoria_Id varchar(5),
@pSubCategoria_Id_Nuevo varchar(5),
@pDescripcion varchar(60),
@pCategoria_Id varchar(5),
@pCentro1_Id varchar(8) = NULL,
@pCentro2_Id varchar(8) = NULL
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM comSubCategorias WHERE (SubCategoria_Id = @pSubCategoria_Id)))
BEGIN 
	UPDATE comSubCategorias
	SET		@lIdentidad = comSubCategorias,
		SubCategoria_Id = @pSubCategoria_Id_Nuevo,
		Descripcion = @pDescripcion,
		Categoria_Id = dbo.FuncFKcomCategorias(@pCategoria_Id),
		Centro1_Id = dbo.FuncFKconCentro1(@pCentro1_Id),
		Centro2_Id = dbo.FuncFKconCentro2(@pCentro2_Id)
	WHERE (SubCategoria_Id = @pSubCategoria_Id)
END 
ELSE 
BEGIN 
	INSERT INTO comSubCategorias
	(
		SubCategoria_Id,
		Descripcion,
		Categoria_Id,
		Centro1_Id,
		Centro2_Id
	)
	VALUES 
	(
		@pSubCategoria_Id,
		@pDescripcion,
		dbo.FuncFKcomCategorias(@pCategoria_Id),
		dbo.FuncFKconCentro1(@pCentro1_Id),
		dbo.FuncFKconCentro2(@pCentro2_Id)
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE comSubCategoriasDatos
GO
CREATE PROCEDURE comSubCategoriasDatos
(
@pSubCategoria_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT comSubCategorias.comSubCategorias, comSubCategorias.SubCategoria_Id, comSubCategorias.Descripcion, comCategorias.Categoria_Id,
	comCategorias.Descripcion as DescripcionCategorias, conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, conCentro2.Centro2_Id,
	conCentro2.Descripcion as DescripcionCentro2
FROM comSubCategorias 
INNER JOIN comCategorias  ON (comCategorias.comCategorias = comSubCategorias.Categoria_Id)
LEFT JOIN conCentro1  ON (conCentro1.conCentro1 = comSubCategorias.Centro1_Id)
LEFT JOIN conCentro2  ON (conCentro2.conCentro2 = comSubCategorias.Centro2_Id)
WHERE (SubCategoria_Id = @pSubCategoria_Id)
 


  Declare @pidentity bigint= dbo.FuncFKcomSubCategorias(@pSubCategoria_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'comSubCategorias'
 RETURN @@Error 

GO

DROP PROCEDURE comSubCategoriasEliminar
GO
CREATE PROCEDURE comSubCategoriasEliminar
(
@pCategoria_Id varchar(5),
@pSubCategoria_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comSubCategorias 
WHERE (SubCategoria_Id = isnull(@pSubCategoria_Id, SubCategoria_Id)) and
Categoria_Id=dbo.FuncFKcomCategorias(@pCategoria_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKcomSubCategorias
GO

CREATE FUNCTION FuncFKcomSubCategorias
(
@pSubCategoria_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = comSubCategorias FROM comSubCategorias WHERE 
	SubCategoria_Id = isnull(@pSubCategoria_Id,SubCategoria_Id)
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comTipoPermi.sql*/
DROP PROCEDURE comTipoPermiGuardar
GO
CREATE PROCEDURE comTipoPermiGuardar
(
@pTipoPermi_Id varchar(5),
@pTipoPermi_Id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(80),
@pTipoCuerpo Char(1),
@pRequiereAutorizacion bit,
@pInactivo bit,
@pUsuario_Id int,
@pPosteado bit, 
@pImportaciones bit,
@pReporte_Id varchar(50)=null,
@pEsquemaAuto_Id varchar(10)
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM comTipoPermi WHERE (TipoPermi_Id = @pTipoPermi_Id)))
BEGIN 
	UPDATE comTipoPermi
	SET		@lIdentidad = comTipoPermi,
		TipoPermi_Id = @pTipoPermi_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		TipoCuerpo = @pTipoCuerpo,
		RequiereAutorizacion = @pRequiereAutorizacion,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado, 
		Importaciones = @pImportaciones,
		Reporte_Id=dbo.FuncFKgenReportes(@pReporte_Id),
		EsquemaAuto_Id=dbo.FuncFKcomEsquemaAuto(@pEsquemaAuto_Id)
	WHERE (TipoPermi_Id = @pTipoPermi_Id)
END 
ELSE 
BEGIN 
	INSERT INTO comTipoPermi
	(
		TipoPermi_Id,
		Empresa_Id,
		Descripcion,
		TipoCuerpo,
		RequiereAutorizacion,
		Inactivo,
		Usuario_Id,
		Posteado, 
		Importaciones,
		Reporte_Id,
		EsquemaAuto_Id
	)
	VALUES 
	(
		@pTipoPermi_Id,
		@pEmpresa_Id,
		@pDescripcion,
		@pTipoCuerpo,
		@pRequiereAutorizacion,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado, 
		@pImportaciones,
		dbo.FuncFKgenReportes(@pReporte_Id),
		dbo.FuncFKcomEsquemaAuto(@pEsquemaAuto_Id)
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE comTipoPermiDatos
GO
CREATE PROCEDURE comTipoPermiDatos
(
@pTipoPermi_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT comTipoPermi.comTipoPermi, comTipoPermi.TipoPermi_Id, comTipoPermi.Empresa_Id, Cast( Case When comTipoPermi.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	comTipoPermi.Descripcion, comTipoPermi.TipoCuerpo, comTipoPermi.RequiereAutorizacion, comTipoPermi.Inactivo,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, comTipoPermi.Posteado, 
	comTipoPermi.Importaciones, genReportes.Reporte_Id, genReportes.Titulo as DescripcionReporte, comEsquemaAuto.EsquemaAuto_Id,
	comEsquemaAuto.Descripcion as DescripcionEsquemaAuto
FROM comTipoPermi 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = comTipoPermi.Usuario_Id)
left join genReportes on comTipoPermi.Reporte_Id=genReportes.genReportes
left join comEsquemaAuto on comEsquemaAuto.comEsquemaAuto=comTipoPermi.EsquemaAuto_Id
WHERE (TipoPermi_Id = @pTipoPermi_Id)
 


  Declare @pidentity bigint= dbo.FuncFKcomTipoPermi(@pTipoPermi_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'comTipoPermi'
 RETURN @@Error 

GO

DROP PROCEDURE comTipoPermiEliminar
GO
CREATE PROCEDURE comTipoPermiEliminar
(
@pTipoPermi_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comTipoPermi 
WHERE (TipoPermi_Id = @pTipoPermi_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKcomTipoPermi
GO

CREATE FUNCTION FuncFKcomTipoPermi
(
@pTipoPermi_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = comTipoPermi FROM comTipoPermi WHERE 
	TipoPermi_Id = @pTipoPermi_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comTipoPermiRI.sql*/
DROP PROCEDURE comTipoPermiRIGuardar
GO
CREATE PROCEDURE comTipoPermiRIGuardar
(
@pTipoPermiRI_Id varchar(5),
@pTipoPermiRI_Id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(60),
@pEsquemaAuto_Id varchar(10) = NULL,
@pTipoCuerpo char(1),
@pReporte_Id varchar(50) = NULL,
@pTipoRI char(1),
@pUsuarioAutorizado_Id varchar(25) = NULL,
@pInactivo Sino,
@pPosteado Sino,
@pUsuario_Id int = NULL,
@pGeneraOC bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM comTipoPermiRI WHERE (TipoPermiRI_Id = @pTipoPermiRI_Id)))
BEGIN 
	UPDATE comTipoPermiRI
	SET		@lIdentidad = comTipoPermiRI,
		TipoPermiRI_Id = @pTipoPermiRI_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		EsquemaAuto_Id = dbo.FuncFKcomEsquemaAuto(@pEsquemaAuto_Id),
		TipoCuerpo = @pTipoCuerpo,
		Reporte_Id = dbo.FuncFKgenReportes(@pReporte_Id),
		TipoRI = @pTipoRI,
		UsuarioAutorizado_Id = dbo.FuncFKgenUsuarios(@pUsuarioAutorizado_Id),
		Inactivo = @pInactivo,
		Posteado = @pPosteado,
		Usuario_Id = @pUsuario_Id,
		GeneraOC=@pGeneraOC
	WHERE (TipoPermiRI_Id = @pTipoPermiRI_Id)
END 
ELSE 
BEGIN 
	INSERT INTO comTipoPermiRI
	(
		TipoPermiRI_Id,
		Empresa_Id,
		Descripcion,
		EsquemaAuto_Id,
		TipoCuerpo,
		Reporte_Id,
		TipoRI,
		UsuarioAutorizado_Id,
		Inactivo,
		Posteado,
		Usuario_Id,
		GeneraOC
	)
	VALUES 
	(
		@pTipoPermiRI_Id,
		@pEmpresa_Id,
		@pDescripcion,
		dbo.FuncFKcomEsquemaAuto(@pEsquemaAuto_Id),
		@pTipoCuerpo,
		dbo.FuncFKgenReportes(@pReporte_Id),
		@pTipoRI,
		dbo.FuncFKgenUsuarios(@pUsuarioAutorizado_Id),
		@pInactivo,
		@pPosteado,
		@pUsuario_Id,
		@pGeneraOC
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE comTipoPermiRIDatos
GO
CREATE PROCEDURE comTipoPermiRIDatos
(
@pTipoPermiRI_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT comTipoPermiRI.comTipoPermiRI, comTipoPermiRI.TipoPermiRI_Id, comTipoPermiRI.Empresa_Id,
	Cast( Case When comTipoPermiRI.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, comTipoPermiRI.Descripcion, comEsquemaAuto.EsquemaAuto_Id, comEsquemaAuto.Descripcion as DescripcionEsquemaAuto,
	comTipoPermiRI.TipoCuerpo, comTipoPermiRI.TipoRI, UsuAutorizacion.Usuario_Id as UsuarioAutoriz,
	UsuAutorizacion.Apellido_y_Nombres as DescripcionUsuarioAutoriz, comTipoPermiRI.Inactivo, comTipoPermiRI.Posteado, genUsuarios.Usuario_Id,
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario, genReportes.Reporte_Id, genReportes.Titulo as DescripcionReporte,
	comTipoPermiRI.GeneraOC
FROM comTipoPermiRI 
LEFT JOIN comEsquemaAuto  ON (comEsquemaAuto.comEsquemaAuto = comTipoPermiRI.EsquemaAuto_Id)
LEFT JOIN genReportes  ON (genReportes.genReportes = comTipoPermiRI.Reporte_Id)
LEFT JOIN genUsuarios UsuAutorizacion ON (UsuAutorizacion.genUsuarios = comTipoPermiRI.UsuarioAutorizado_Id)
LEFT JOIN genUsuarios ON (genUsuarios.genUsuarios = comTipoPermiRI.Usuario_Id)
WHERE (TipoPermiRI_Id = @pTipoPermiRI_Id)
 


  Declare @pidentity bigint= dbo.FuncFKcomTipoPermiRI(@pTipoPermiRI_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'comTipoPermiRI'
 RETURN @@Error 

GO

DROP PROCEDURE comTipoPermiRIEliminar
GO
CREATE PROCEDURE comTipoPermiRIEliminar
(
@pTipoPermiRI_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM comTipoPermiRI 
WHERE (TipoPermiRI_Id = @pTipoPermiRI_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKcomTipoPermiRI
GO

CREATE FUNCTION FuncFKcomTipoPermiRI
(
@pTipoPermiRI_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = comTipoPermiRI FROM comTipoPermiRI WHERE 
	TipoPermiRI_Id = @pTipoPermiRI_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\comTraePendientes.sql*/
DROP PROCEDURE comTraePendientes 
GO
CREATE PROCEDURE comTraePendientes (
	@Proveed_Id VarChar(15), 
	@Moneda_Id VarChar(3), 
	@Signo Int,
	@Empresa_Id Int)

AS
select Cast(0 as bigint) as comMovProv, 0.00 as Importe, @Moneda_Id as Moneda_Id, @Proveed_Id as Proveee_id, @Signo as Signo

SELECT genMovCuotas.FechaVencimiento as Fecha, comMovProv.comMovProv, 
	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,
		genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
		genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,
		genAsiSegmentos.Segmento4N) SegmentoStr, genMovCuotas.CuotaNro, 
		genMovCuotas.Importe,
		genMovCuotas.Saldo, genMovCuotas.Saldo*0 as ImporteAplicado
From comMovProv
inner join genMovCuotas ON comMovProv.comMovProv = genMovCuotas.Asiento_Id
INNER join comProveedores ON comProveedores.genEntidades = comMovprov.Proveed_Id
INNER JOIN conAsientos ON conAsientos.conAsientos = comMovProv.comMovProv
inner join genMonedas ON genMonedas.genMonedas =  conAsientos.Moneda_Id
inner join comMovTipos ON comMovTipos.TipoMov = comMovprov.TipoMov
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = comMovProv.comMovProv
Where
	genMovCuotas.Saldo > 0 And conAsientos.Anulado = 0 And conAsientos.Posteado = 1 And
	comMovTipos.Signo = @Signo and 
	comProveedores.Proveed_Id = @Proveed_Id and 
	genMonedas.Moneda_Id = @Moneda_Id And
	conAsientos.Empresa_Id = @Empresa_Id
order by 1, 2
GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conActualizarCuentasMovimientos.sql*/
drop procedure conActualizarCuentasMovimientosDatos
go
create procedure conActualizarCuentasMovimientosDatos
(
@pCuentaARemplazar varchar(25),
@pFechaDesde datetime,
@pFechaHasta datetime,
@pEmpresa_Id int,
@pCuentaRemplazo varchar(25)
)
as
select conCuentas.Cuenta_Id as Cuenta_A_Remplazar, conCuentas.Descripcion as DescripcionCuenta_A_Remplazar, CuentaRemplazo.Cuenta_Id as Cuenta_Remplazo,
CuentaRemplazo.Descripcion as DescripcionCuenta_Remplazo ,@pFechaDesde as FechaDesde,
@pFechaHasta as FechaHasta 
from conCuentas 
left join conCuentas CuentaRemplazo on CuentaRemplazo.Cuenta_Id= @pCuentaRemplazo
where conCuentas.conCuentas= dbo.FuncFKconCuentas(@pCuentaARemplazar)
select dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as Segmento, LeyendaLibroMayor, conCentro1.Centro1_Id,
conCentro1.Descripcion as DescripcionCentro1, conCentro2.conCentro2, conCentro2.Descripcion as DescripcionCentro2,
disFormularios.Descripcion as Formulario, conAsientos.Fecha, conMovCont.conasientos, conMovCont.Renglon, conMovCont.Importe*(conMovCont.TipoMov*2-3)*-1 as Importe
from conMovCont
inner join conCuentas on conCuentas= conMovCont.Cuenta_Id 
inner join genAsiSegmentos on genAsiSegmentos.Asiento_Id= conMovCont.conAsientos
left join conCentro1 on conMovCont.Centro1_Id= conCentro1.conCentro1
left join conCentro2 on conMovCont.Centro2_Id= conCentro2.conCentro2
inner join conAsientos on conAsientos.conAsientos=conMovCont.conAsientos
inner join disFormularios on conAsientos.Formulario_Id=disFormularios.disFormularios
where conCuentas.Cuenta_Id=@pCuentaARemplazar and conAsientos.Fecha between @pFechaDesde and @pFechaHasta and conAsientos.Empresa_Id=@pEmpresa_Id and 
conAsientos.Anulado = 0 and conAsientos.Posteado =1
go

drop procedure conActualizarCuentasMovimientosGuardar
go
create procedure conActualizarCuentasMovimientosGuardar
(
@pCuentaARemplazar varchar(25),
@pCuentaRemplazo varchar(25),
@pconAsientos bigint,
@pRenglon int
)
as
update conMovCont set Cuenta_Id= dbo.FuncFKconCuentas(@pCuentaRemplazo)
from conMovCont
inner join conAsientos on conMovCont.conAsientos= conAsientos.conAsientos
where conMovCont.Cuenta_Id=dbo.FuncFKconCuentas(@pCuentaARemplazar) and
conMovCont.conAsientos = @pconAsientos and 
conMovCont.renglon = @pRenglon and 
conAsientos.Anulado = 0 and conAsientos.Posteado = 1


update conMovContCon set Cuenta_Id= dbo.FuncFKconCuentas(@pCuentaRemplazo)
from conMovContCon
inner join conAsientos on conMovContCon.conAsientos= conAsientos.conAsientos
where conMovContCon.Cuenta_Id=dbo.FuncFKconCuentas(@pCuentaARemplazar) and
conMovContcon.conAsientos = @pconAsientos and 
conMovContcon.renglon = @pRenglon and
conAsientos.Anulado = 0 and conAsientos.Posteado = 1

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conAnexoGrupoTipos.sql*/
Drop procedure conAnexoGrupoTiposInsertar
go
create procedure conAnexoGrupoTiposInsertar
(
@pGruposAne_Id varchar(5),
@pTipo_Id varchar(5)
)
as
set nocount on
insert into conAnexoGrupoTipos
(
GrupoAne_Id,
Tipo_id
)
values
(
@pGruposAne_Id,
@pTipo_Id
)
go

drop procedure conAnexoGrupoTiposEliminar
go
create procedure conAnexoGrupoTiposEliminar
(
@pGrupoAne_Id varchar(5),
@pTipo_Id varchar(5)=null
)
as
set nocount on
delete from conAnexoGrupoTipos
where GrupoAne_Id=@pGrupoAne_Id and isnull(@pTipo_Id,Tipo_Id) =Tipo_Id
go





Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conAnexosGrupos.sql*/
--conAnexosGruposDatos 'COS'
DROP PROCEDURE conAnexosGruposDatos
GO
CREATE PROCEDURE conAnexosGruposDatos
(
@pGrupoAne_Id varchar(5)
)
as
select conAnexosGrupos.GrupoAne_ID, conAnexosGrupos.Descripcion, orden, conAnexosGrupos.Origen,
conAnexosOrigenes.Descripcion as DescripcionOrigen, conAnexosOrigenes.TipoRubro as VerifTipo,
conAnexosGrupos.Description
From conAnexosGrupos INNER JOIN conAnexosOrigenes on conAnexosGrupos.Origen=conAnexosOrigenes.Origen
where conAnexosGrupos.GrupoAne_Id=@pGrupoAne_Id

SELECT conAnexoGrupoTipos.Tipo_Id, conTiposContables.Descripcion, conRubros.Tipo
FROM conAnexoGrupoTipos
INNER JOIN conTiposContables on conAnexoGrupoTipos.Tipo_Id= conTiposContables.Tipo_Id
inner join conRubros on conTiposContables.Rubro_Id=conRubros.Rubro_Id
WHERE 
conAnexoGrupoTipos.GrupoAne_Id=@pGrupoAne_Id
go

drop PROCEDURE conAnexosGruposGuardar
go
CREATE PROCEDURE conAnexosGruposGuardar
(
@pGrupoAne_Id varchar(5),
@pDescripcion varchar(60),
@pOrden int,
@pOrigen int, 
@pDescription VarChar(60)
)
as
set nocount on
if(exists(select 1 from conAnexosGrupos where GrupoAne_Id=@pGrupoAne_Id))
begin
update conAnexosGrupos
set Descripcion=@pDescripcion, Orden=@pOrden, Origen=@pOrigen , 
Description = @pDescription
WHERE GrupoAne_Id=@pGrupoAne_Id
end
else
begin
insert into conAnexosGrupos
(
GrupoAne_Id,
Descripcion,
Orden,
Origen,
Description
)
values
(
@pGrupoAne_Id,
@pDescripcion,
@pOrden,
@pOrigen, 
@pDescription
)
end
go

drop procedure conAnexosGruposEliminar
go
create procedure conAnexosGruposEliminar
(
@pGrupoAne_Id varchar (25)
)
as
set nocount on
delete from conAnexosGrupos where GrupoAne_Id=@pGrupoAne_Id
go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conAnexosOrigenes.sql*/
DROP PROCEDURE conAnexosOrigenesGuardar
GO
CREATE PROCEDURE conAnexosOrigenesGuardar
(
@pOrigen smallint,
@pDescripcion varchar(60),
@pTipoRubro varchar(3)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM conAnexosOrigenes WHERE (Origen = @pOrigen)))
BEGIN 
	UPDATE conAnexosOrigenes
	SET		Descripcion = @pDescripcion,
		TipoRubro = @pTipoRubro
	WHERE (Origen = @pOrigen)
END 
ELSE 
BEGIN 
	INSERT INTO conAnexosOrigenes
	(
		Origen,
		Descripcion,
		TipoRubro
	)
	VALUES 
	(
		@pOrigen,
		@pDescripcion,
		@pTipoRubro
	)
END 

GO

DROP PROCEDURE conAnexosOrigenesDatos
GO
CREATE PROCEDURE conAnexosOrigenesDatos
(
@pOrigen smallint
)
AS
SET NOCOUNT ON 

SELECT conAnexosOrigenes.Origen, conAnexosOrigenes.Descripcion, conAnexosOrigenes.TipoRubro
FROM conAnexosOrigenes 
WHERE (Origen = @pOrigen)
 
 RETURN @@Error 

GO

DROP PROCEDURE conAnexosOrigenesEliminar
GO
CREATE PROCEDURE conAnexosOrigenesEliminar
(
@pOrigen smallint = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM conAnexosOrigenes 
WHERE (Origen = ISNULL(@pOrigen, Origen))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conArbolAsientosDatos.sql*/
-- conArbolAsientosDatos 2019,12,1
-- conArbolAsientosSFDatos 2019,12,1,' ','zzz',' ','zzz'


DROP Procedure conArbolAsientosDatos
go
CREATE Procedure conArbolAsientosDatos
(
	@Ejercicio int, 
	@PeriodoHasta smallint,
	@Empresa Int,
	@Centro1Desde varchar(8),
	@Centro1Hasta varchar(8),
	@Centro2Desde varchar(8),
	@Centro2Hasta varchar(8)
)
AS

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
select conPeriodos.Ejercicio, conPeriodos.Periodo, vconMovcontRes.* into #Tb1
from vconMovcontRes 
	INNER JOIN conPeriodos ON vconMovcontRes.Fecha between  conPeriodos.Fecha_Desde AND conPeriodos.Fecha_Hasta
		 AND conPeriodos.Empresa_Id = vconMovcontRes.Empresa_Id
	where 
		vconMovContRes.Especial NOT IN ('CIR','CCP') AND 
		conPeriodos.Ejercicio = @Ejercicio and 
		conPeriodos.Periodo <= @PeriodoHasta and 
		conPeriodos.Empresa_id = @Empresa and 
		Centro1_Id between @Centro1Desde and @Centro1Hasta and 
		Centro2_Id between @Centro2Desde and @Centro2Hasta 


select conPeriodos.Ejercicio, @PeriodoHasta AS Periodo, 'E' AS Tipo, @centro1Desde as Centro1Desde, @Centro1Hasta as Centro1Hasta, @Centro2Desde as Centro2Desde, @Centro2Hasta as Centro2Hasta
from conPeriodos 
where
Ejercicio = @Ejercicio AND 
Empresa_Id = @Empresa and 
conPeriodos.Periodo <= @PeriodoHasta
GROUP BY conPeriodos.Ejercicio
select xxx.Orden, xxx.Cuenta_Id, ISNULL(concuentas1.concuentas,0) hijo, 
	xxx.Descripcion, xxx.Nivel, xxx.Imputable, ISNULL(concuentas2.concuentas,-1) as Padre, 
	xxx.PER01, xxx.PER02, xxx.PER03, xxx.PER04, xxx.PER05, xxx.PER06, 
	xxx.PER07, xxx.PER08, xxx.PER09, xxx.PER10, xxx.PER11, xxx.PER12, 
	xxx.PER13, 
	xxx.PER01 + xxx.PER02 + xxx.PER03 + xxx.PER04 + xxx.PER05 + xxx.PER06 + 
	xxx.PER07 + xxx.PER08 + xxx.PER09 + xxx.PER10 + xxx.PER11 + xxx.PER12 +
	xxx.PER13 as Total 
from 
(
SELECT 1 as Orden, conCuentas.Cuenta_Id, conCuentas.Descripcion, 
	conCuentas.Nivel, conCuentas.Imputable, 
		(SELECT Max(vcuentasRango.Cuenta_Id) from vcuentasRango
			Where
				conCuentas.Cuenta_Id > vcuentasRango.Cuenta_Id and 
				conCuentas.Cuenta_Id < vcuentasRango.CuentaHasta) as Padre, 
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 1 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER01 ,
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 2 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER02 ,
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 3 and
			#Tb1.Ejercicio = @Ejercicio ),0)  AS PER03 ,
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 4 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER04 ,
						
ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 5 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER05 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 6 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER06 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 7 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER07 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 8 and
			#Tb1.Ejercicio = @Ejercicio ),0)  AS PER08 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 9 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER09 ,
				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 10 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER10 ,

		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 11 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER11 ,

		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 12 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER12 ,
ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 13 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER13, 
	0.00 as Total
from conCuentas INNER JOIN conRubros ON
conCuentas.Rubro_Id = conRubros.Rubro_Id

Where
	conRubros.Tipo = 'ING'
UNION ALL -- COSTO DE VENTAS

SELECT 2 as Orden, conCuentas.Cuenta_Id, conCuentas.Descripcion, 
	conCuentas.Nivel, conCuentas.Imputable, 
		(SELECT Max(vcuentasRango.Cuenta_Id) from vcuentasRango Where
			conCuentas.Cuenta_Id > vcuentasRango.Cuenta_Id and 
				conCuentas.Cuenta_Id < vcuentasRango.CuentaHasta) as Padre, 
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 1 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER01 ,
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 2 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER02 ,
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 3 and
			#Tb1.Ejercicio = @Ejercicio ),0)  AS PER03 ,
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 4 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER04 ,
						
ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 5 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER05 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 6 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER06 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 7 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER07 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 8 and
			#Tb1.Ejercicio = @Ejercicio ),0)  AS PER08 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 9 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER09 ,
				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 10 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER10 ,

		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 11 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER11 ,

		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 12 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER12 ,
ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 13 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER13, 0.00 AS TOTAL

from conCuentas INNER JOIN conRubros ON
conCuentas.Rubro_Id = conRubros.Rubro_Id

Where
	conRubros.Tipo = 'COS'

UNION ALL -- RESULTADO BRUTO
SELECT 3 AS Orden, ' ' Cuenta_Id, 'Resultado Bruto' Descripcion , 1 Nivel ,0 Imputable , NULL Padre,
	 0,0,0,0,0,0,0,0,0,0,0,0, 0,0

UNION ALL -- GASTOS

SELECT 4 as Orden, conCuentas.Cuenta_Id, conCuentas.Descripcion, 
	conCuentas.Nivel, conCuentas.Imputable, 
		(SELECT Max(vcuentasRango.Cuenta_Id) from vcuentasRango Where
			conCuentas.Cuenta_Id > vcuentasRango.Cuenta_Id and 
				conCuentas.Cuenta_Id < vcuentasRango.CuentaHasta) as Padre, 
ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 1 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER01 ,
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 2 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER02 ,
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 3 and
			#Tb1.Ejercicio = @Ejercicio ),0)  AS PER03 ,
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 4 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER04 ,
						
ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 5 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER05 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 6 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER06 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 7 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER07 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 8 and
			#Tb1.Ejercicio = @Ejercicio ),0)  AS PER08 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 9 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER09 ,
				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 10 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER10 ,

		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 11 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER11 ,

		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 12 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER12 ,
ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 13 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER13, 0.00 AS TOTAL
from conCuentas INNER JOIN conRubros ON
conCuentas.Rubro_Id = conRubros.Rubro_Id

Where
	conRubros.Tipo = 'GAS'
UNION ALL -- RESULTADO OPERACION
SELECT 5 AS Orden, ' ' Cuenta_Id, 'Resultado Operacion' Descripcion , 1 Nivel ,0 Imputable , NULL Padre,
	 0,0,0,0,0,0,0,0,0,0,0,0, 0,0

UNION ALL -- OTROS INGRESOS

SELECT 6 as Orden, conCuentas.Cuenta_Id, conCuentas.Descripcion, 
	conCuentas.Nivel, conCuentas.Imputable, 
		(SELECT Max(vcuentasRango.Cuenta_Id) from vcuentasRango Where
			conCuentas.Cuenta_Id > vcuentasRango.Cuenta_Id and 
				conCuentas.Cuenta_Id < vcuentasRango.CuentaHasta) as Padre, 
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 1 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER01 ,
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 2 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER02 ,
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 3 and
			#Tb1.Ejercicio = @Ejercicio ),0)  AS PER03 ,
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 4 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER04 ,
						
ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 5 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER05 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 6 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER06 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 7 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER07 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 8 and
			#Tb1.Ejercicio = @Ejercicio ),0)  AS PER08 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 9 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER09 ,
				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 10 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER10 ,

		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 11 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER11 ,

		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 12 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER12 ,
ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 13 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER13, 0.00 AS TOTAL

from conCuentas INNER JOIN conRubros ON
conCuentas.Rubro_Id = conRubros.Rubro_Id

Where
	conRubros.Tipo = 'OI'

UNION ALL -- OTROS EGRESOS

SELECT 7 as Orden, conCuentas.Cuenta_Id, conCuentas.Descripcion, 
	conCuentas.Nivel, conCuentas.Imputable, 
		(SELECT Max(vcuentasRango.Cuenta_Id) from vcuentasRango Where
			conCuentas.Cuenta_Id > vcuentasRango.Cuenta_Id and 
				conCuentas.Cuenta_Id < vcuentasRango.CuentaHasta) as Padre, 
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 1 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER01 ,
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 2 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER02 ,
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 3 and
			#Tb1.Ejercicio = @Ejercicio ),0)  AS PER03 ,
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 4 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER04 ,
						
ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 5 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER05 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 6 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER06 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 7 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER07 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 8 and
			#Tb1.Ejercicio = @Ejercicio ),0)  AS PER08 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 9 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER09 ,
				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 10 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER10 ,

		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 11 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER11 ,

		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 12 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER12 ,
ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 13 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER13, 0.00 AS TOTAL

from conCuentas INNER JOIN conRubros ON
conCuentas.Rubro_Id = conRubros.Rubro_Id
Where
	conRubros.Tipo = 'OE'
UNION ALL -- Resultado Ejericio
SELECT 9 AS Orden, ' ' Cuenta_Id, 'Resultado Ejericio' Descripcion , 1 Nivel ,0 Imputable , NULL Padre,
	 0,0,0,0,0,0,0,0,0,0,0,0, 0,0

) as xxx
LEFT join conCuentas conCuentas1 ON 
conCuentas1.Cuenta_Id = xxx.Cuenta_Id
LEFT join conCuentas conCuentas2 ON 
conCuentas2.Cuenta_Id = xxx.Padre
order by 1,2
OPTION	(RECOMPILE)


SELECT conCuentas.Cuenta_Id, conCuentas.Descripcion,  ' ' Formulario_Id , 	
	' ' as Detalle, ' ' as Centro1_Id, ' ' as Centro2_Id,
	0.00 as Debe, 0.00 as Haber
from conCuentas
Where 1 = 2


SELECT conCuentas.Cuenta_Id, conCuentas.Descripcion, 
	getDate() as Fecha,
	' ' Segmento , 
	' ' AS Entidad, ' ' as Detalle,  ' ' as Centro1_Id, ' ' as Centro2_Id,
		0.00 as Debe, 0.00 as Haber, ' ' as Observaciones
from conCuentas
Where 1 = 2

-- para los parametros

SELECT conCuentas.Cuenta_Id, 0 AS Ejercicio, 0 as Periodo, ' ' as Formulario_Id,	
	' ' Centro1_Id, ' ' Centro2_Id
from conCuentas
Where 1 = 2

GO

DROP PROCEDURE conResumenDatos
GO

CREATE PROCEDURE conResumenDatos(
	@Cuenta_Id VarChar(25),
	@Ejercicio int, 
	@Periodo Int,
	@Empresa Int
	)
as

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

Select @Cuenta_Id AS Cuenta_Id, @Ejercicio Ejercicio,  @Periodo Periodo

select concuentas.Cuenta_Id, conCuentas.Descripcion, disFormularios.Formulario_id, 
	conCentro1.Centro1_Id, conCentro2.Centro2_Id,
	disFormularios.Descripcion as Detalle, 
		sum(case when conMovCont.Tipomov = 1 then conMovCont.Importe else 0 end) as Debe,
		sum(case when conMovCont.Tipomov = 2 then conMovCont.Importe else 0 end) as Haber
from conAsientos INNER JOIN conMovCont ON 
	conAsientos.conAsientos = conMovCont.conASientos 
	INNER JOIN disFormularios ON disFormularios.disFormularios = conAsientos.Formulario_Id
	INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
	INNER JOIN  conCentro1 ON conCentro1.conCentro1 = isnull(conMovCont.centro1_id, 1)
	INNER JOIN  conCentro2 ON conCentro2.conCentro2 = isnull(conMovCont.centro2_id, 1)
	INNER JOIN conPeriodos ON  conAsientos.Fecha between conPeriodos.Fecha_Desde and conPeriodos.Fecha_Hasta
WHERE
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conCuentas.Cuenta_Id = @Cuenta_Id and
	conAsientos.Empresa_Id = @Empresa and 
	conPeriodos.Ejercicio = @Ejercicio and 
	conPeriodos.Empresa_Id = @Empresa and 
	conPeriodos.Periodo = @Periodo 
GROUP BY concuentas.Cuenta_Id, conCuentas.Descripcion, disFormularios.Formulario_id, 
	conCentro1.Centro1_Id, conCentro2.Centro2_Id,
	disFormularios.Descripcion , conMovCont.Tipomov
	order by 4,5,3
GO



DROP PROCEDURE conDetalleDatos
GO

CREATE PROCEDURE conDetalleDatos(
	@Cuenta_Id VarChar(25),
	@Centro1_Id VarChar(8),
	@Centro2_Id VarChar(8),
	@Formulario_Id VarChar(30),
	@Ejercicio int, 
	@Periodo Int,
	@Empresa Int
	)
as

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

Select @Cuenta_Id AS Cuenta_Id, @Centro1_Id as Centro1_Id, @Centro2_Id as Centro2_Id,
	@Formulario_Id  Formulario_Id, @Ejercicio Ejercicio,  @Periodo Periodo 

select concuentas.Cuenta_Id, conCuentas.Descripcion,conAsientos.Fecha,
	conCentro1.Centro1_Id, conCentro2.Centro2_Id,
	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C , 
		genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
		genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N,
		genAsiSegmentos.Segmento4N) AS Segmento,
	ISNULL(venClientes.Cliente_Id, comProveedores.Proveed_Id) as Entidad,
	ISNULL(venClientes.RazonSocial, comProveedores.RazonSocial) as Detalle, 
	conAsientos.Observaciones,
		sum(case when conMovCont.Tipomov = 1 then conMovCont.Importe else 0 end) as Debe,
		sum(case when conMovCont.Tipomov = 2 then conMovCont.Importe else 0 end) as Haber
from conAsientos INNER JOIN conMovCont ON 
	conAsientos.conAsientos = conMovCont.conASientos 
	INNER JOIN disFormularios ON disFormularios.disFormularios = conAsientos.Formulario_Id
	INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
	INNER JOIN  conCentro1 ON conCentro1.conCentro1 = isnull(conMovCont.centro1_id, 1)
	INNER JOIN  conCentro2 ON conCentro2.conCentro2 = isnull(conMovCont.centro2_id, 1)
	INNER JOIN conPeriodos ON  conAsientos.Fecha between conPeriodos.Fecha_Desde and conPeriodos.Fecha_Hasta and
		conPeriodos.Empresa_Id = conAsientos.Empresa_Id
	INNER JOIN genAsiSegmentos ON  genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
	LEFT JOIN (venMovimientos INNER JOIN venClientes ON 
		venMovimientos.Cliente_Id = venClientes.genEntidades) ON 
		venMovimientos.venMovimientos = conAsientos.conAsientos
	LEFT JOIN (commovprov INNER JOIN comProveedores ON 
		comMovprov.Proveed_Id = comProveedores.genEntidades) ON 
		comMovprov.comMovprov = conAsientos.conAsientos
WHERE
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa and 
	conCuentas.Cuenta_Id = @Cuenta_Id and
	conPeriodos.Ejercicio = @Ejercicio and 
	conPeriodos.Periodo = @Periodo  and 
	conperiodos.Empresa_Id = conAsientos.Empresa_Id and 
	conCentro1.Centro1_Id = @Centro1_Id and 
	conCentro2.Centro2_Id = @Centro2_Id and 
	disFormularios.Formulario_Id = @Formulario_Id
GROUP BY concuentas.Cuenta_Id, conCuentas.Descripcion, disFormularios.Formulario_id, 
	conCentro1.Centro1_Id, conCentro2.Centro2_Id,
	disFormularios.Descripcion , conMovCont.Tipomov,
	conAsientos.Fecha, genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C , 
		genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
		genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N,
		genAsiSegmentos.Segmento4N, venClientes.Cliente_Id, comProveedores.Proveed_Id,
		venClientes.RazonSocial, comProveedores.RazonSocial,
	conAsientos.Observaciones
	order by 4,5,3
GO


DROP Procedure conArbolAsientosSFDatos
GO

CREATE Procedure conArbolAsientosSFDatos
(
	@Ejercicio int, 
	@PeriodoHasta smallint,
	@Empresa Int,
	@Centro1Desde varchar(8),
	@Centro1Hasta varchar(8),
	@Centro2Desde varchar(8),
	@Centro2Hasta varchar(8)
)
AS

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

select conPeriodos.Ejercicio, conPeriodos.Periodo, vconMovcontRes.* into #Tb1
from vconMovcontRes 
	INNER JOIN conPeriodos ON vconMovcontRes.Fecha between  conPeriodos.Fecha_Desde AND conPeriodos.Fecha_Hasta
	AND conPeriodos.Empresa_Id = vconMovcontRes.Empresa_Id
	where 
		vconMovContRes.Especial NOT IN ('CIR','CCP') AND 
		conPeriodos.Ejercicio = @Ejercicio and 
		conPeriodos.Periodo <= @PeriodoHasta and 
		conPeriodos.Empresa_id = @Empresa and 
		Centro1_Id between @Centro1Desde and @Centro1Hasta and 
		Centro2_Id between @Centro2Desde and @Centro2Hasta 


select conPeriodos.Ejercicio, @PeriodoHasta AS Periodo, 'B' AS Tipo, @centro1Desde as Centro1Desde, @Centro1Hasta as Centro1Hasta, @Centro2Desde as Centro2Desde, @Centro2Hasta as Centro2Hasta
from conPeriodos 
where
Ejercicio = @Ejercicio AND 
conPeriodos.Empresa_Id = @Empresa and 
conPeriodos.Periodo <= @PeriodoHasta
GROUP BY conPeriodos.Ejercicio
select xxx.Orden, xxx.Cuenta_Id, ISNULL(concuentas1.concuentas,0) hijo, 
	xxx.Descripcion, xxx.Nivel, Cast(xxx.Imputable as Int) Imputable, ISNULL(concuentas2.concuentas,-1) as Padre, 
	xxx.PER01, xxx.PER02, xxx.PER03, xxx.PER04, xxx.PER05, xxx.PER06, 
	xxx.PER07, xxx.PER08, xxx.PER09, xxx.PER10, xxx.PER11, xxx.PER12, 
	xxx.PER13, 
	xxx.PER01 + xxx.PER02 + xxx.PER03 + xxx.PER04 + xxx.PER05 + xxx.PER06 + 
	xxx.PER07 + xxx.PER08 + xxx.PER09 + xxx.PER10 + xxx.PER11 + xxx.PER12 +
	xxx.PER13 as Total 
from 
(
SELECT 1 as Orden, conCuentas.Cuenta_Id, conCuentas.Descripcion, 
	conCuentas.Nivel, conCuentas.Imputable, 
		(SELECT Max(vcuentasRango.Cuenta_Id) from vcuentasRango
			Where
				conCuentas.Cuenta_Id > vcuentasRango.Cuenta_Id and 
				conCuentas.Cuenta_Id < vcuentasRango.CuentaHasta) as Padre, 
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 1 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER01 ,
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 2 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER02 ,
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 3 and
			#Tb1.Ejercicio = @Ejercicio ),0)  AS PER03 ,
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 4 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER04 ,
						
ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 5 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER05 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 6 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER06 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 7 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER07 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 8 and
			#Tb1.Ejercicio = @Ejercicio ),0)  AS PER08 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 9 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER09 ,
				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 10 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER10 ,

		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 11 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER11 ,

		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 12 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER12 ,
ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 13 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER13, 0.00 AS TOTAL

from conCuentas INNER JOIN conRubros ON
conCuentas.Rubro_Id = conRubros.Rubro_Id

Where
	conRubros.Tipo = 'ACT'
UNION ALL
SELECT 2 as Orden, conCuentas.Cuenta_Id, conCuentas.Descripcion, 
	conCuentas.Nivel, conCuentas.Imputable, 
		(SELECT Max(vcuentasRango.Cuenta_Id) from vcuentasRango
			Where
				conCuentas.Cuenta_Id > vcuentasRango.Cuenta_Id and 
				conCuentas.Cuenta_Id < vcuentasRango.CuentaHasta) as Padre, 
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 1 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER01 ,
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 2 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER02 ,
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 3 and
			#Tb1.Ejercicio = @Ejercicio ),0)  AS PER03 ,
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 4 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER04 ,
						
ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 5 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER05 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 6 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER06 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 7 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER07 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 8 and
			#Tb1.Ejercicio = @Ejercicio ),0)  AS PER08 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 9 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER09 ,
				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 10 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER10 ,

		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 11 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER11 ,

		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 12 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER12 ,
ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 13 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER13, 0.00 AS TOTAL

from conCuentas INNER JOIN conRubros ON
conCuentas.Rubro_Id = conRubros.Rubro_Id

Where
	conRubros.Tipo = 'PAS'
UNION ALL
SELECT 3 as Orden, conCuentas.Cuenta_Id, conCuentas.Descripcion, 
	conCuentas.Nivel, conCuentas.Imputable, 
		(SELECT Max(vcuentasRango.Cuenta_Id) from vcuentasRango
			Where
				conCuentas.Cuenta_Id > vcuentasRango.Cuenta_Id and 
				conCuentas.Cuenta_Id < vcuentasRango.CuentaHasta) as Padre, 
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 1 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER01 ,
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 2 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER02 ,
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 3 and
			#Tb1.Ejercicio = @Ejercicio ),0)  AS PER03 ,
		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 4 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER04 ,
						
ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 5 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER05 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 6 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER06 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 7 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER07 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 8 and
			#Tb1.Ejercicio = @Ejercicio ),0)  AS PER08 ,

				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 9 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER09 ,
				ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 10 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER10 ,

		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 11 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER11 ,

		ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 12 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER12 ,
ISNULL((SELECT sum(DEBE-HABER)
			from #Tb1
			WHERE
			#Tb1.conCuentas = conCuentas.conCuentas AND 
			#Tb1.Periodo = 13 and
			#Tb1.Ejercicio = @Ejercicio ),0) AS PER13, 0.00 AS TOTAL

from conCuentas INNER JOIN conRubros ON
conCuentas.Rubro_Id = conRubros.Rubro_Id

Where
	conRubros.Tipo = 'CAP'
) as xxx
LEFT join conCuentas conCuentas1 ON 
conCuentas1.Cuenta_Id = xxx.Cuenta_Id
LEFT join conCuentas conCuentas2 ON 
conCuentas2.Cuenta_Id = xxx.Padre
order by 1,2
OPTION	(RECOMPILE)


SELECT conCuentas.Cuenta_Id, conCuentas.Descripcion,  ' ' Formulario_Id , 	
	' ' as Detalle, ' ' as Centro1_Id, ' ' as Centro2_Id,
	0.00 as Debe, 0.00 as Haber
from conCuentas
Where 1 = 2


GO




Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conAsieCierre.sql*/
--set transaction isolation level read uncommitted
-- conAsieCierreResDATOS 1,2018
-- conAsieCierrePatDATOS 1,2018

DROP PROCEDURE conAsieCierreResDATOS
GO
CREATE PROCEDURE conAsieCierreResDATOS
(
	@Empresa INT, 
	@Ejercicio smallint
	

)
AS


SELECT @Ejercicio AS Ejercicio

SELECT conCuentas.Cuenta_Id, conCuentas.Descripcion, ISNULL(conCentro1.Centro1_Id,' ') as Centro1_Id, 
	ISNULL(conCentro2.Centro2_Id,' ') as Centro2_Id, Sum(-conMovCont.Importe*(-2*conMovCont.Tipomov+3)) as Monto
from conCuentas 
INNER JOIN conMovCont ON conCuentas.conCuentas = conMovCont.Cuenta_Id
INNER JOIN conAsientos ON conAsientos.conAsientos = conMovCont.conAsientos 
INNER JOIN conPeriodos ON conAsientos.Fecha between conPeriodos.Fecha_Desde and conPeriodos.Fecha_Hasta and 
	conPeriodos.Empresa_Id = conAsientos.Empresa_Id
INNER JOIN conRubros ON conRubros.Rubro_Id = conCuentas.Rubro_Id
inner join genEmpresas on conAsientos.Empresa_Id=genEmpresas.genEmpresas
left join conAsientosCon ON conAsientosCon.conAsientos = conAsientos.conAsientos
Left Join conCentro1 On conCentro1.conCentro1 = conMovCont.Centro1_Id
Left Join conCentro2 On conCentro2.conCentro2 = conMovCont.Centro2_Id
WHERE
	(conAsientos.Fecha>= genEmpresas.FechaInicioSumma or conAsientosCon.conAsientos IS Not NULL) AND
	conAsientos.Empresa_Id = @Empresa  and
	conPeriodos.Ejercicio = @Ejercicio and
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado=1and
	conRubros.Tipo NOT IN ('ACT','PAS','CAP', 'ORD')
GROUP BY conCuentas.Cuenta_Id, conCuentas.Descripcion, ISNULL(conCentro1.Centro1_Id,' '), ISNULL(conCentro2.Centro2_Id,' ')
HAVING sum(conMovCont.Importe*(-2*conMovCont.Tipomov+3)) <> 0
order by 1	

GO




DROP PROCEDURE conAsieCierrePatDATOS
GO
CREATE PROCEDURE conAsieCierrePatDATOS
(
	@Empresa INT, 
	@Ejercicio smallint
	

)
AS


SELECT @Ejercicio AS Ejercicio

SELECT conCuentas.Cuenta_Id, conCuentas.Descripcion, 
	ISNULL(conCentro1.Centro1_Id,' ') as Centro1_id, 
	ISNULL(conCentro2.Centro2_Id,' ') as Centro2_id, 
	sum(-conMovCont.Importe*(-2*conMovCont.Tipomov+3)) as Monto
from conCuentas INNER JOIN conMovCont ON
 conCuentas.conCuentas = conMovCont.Cuenta_Id
 INNER JOIN conAsientos ON
 conAsientos.conAsientos = conMovCont.conAsientos 
 INNER JOIN conPeriodos ON 
 conAsientos.Fecha between conPeriodos.Fecha_Desde and conPeriodos.Fecha_Hasta and 
 conPeriodos.Empresa_Id = conAsientos.Empresa_Id
 INNER JOIN conRubros ON
 conRubros.Rubro_Id = conCuentas.Rubro_Id
 LEFT JOIN conCentro1 ON conCentro1.conCentro1 = conMovCont.Centro1_Id
 LEFT JOIN conCentro2 ON conCentro2.conCentro2 = conMovCont.Centro2_Id
 inner join genEmpresas on genEmpresas.genEmpresas=conAsientos.Empresa_Id
 left join conAsientosCon ON conAsientosCon.conAsientos = conAsientos.conAsientos
 WHERE
	conAsientos.Empresa_Id = @Empresa  and
	conPeriodos.Ejercicio = @Ejercicio and
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado=1and
	(conAsientos.Fecha>= genEmpresas.FechaInicioSumma or conAsientosCon.conAsientos IS Not NULL) and
	conRubros.Tipo IN ('ACT','PAS','CAP', 'ORD')
GROUP BY conCuentas.Cuenta_Id, conCuentas.Descripcion, 
	ISNULL(conCentro1.Centro1_Id,' ') , ISNULL(conCentro2.Centro2_Id,' ') 
HAVING sum(conMovCont.Importe*(-2*conMovCont.Tipomov+3)) <> 0
order by 1	

GO


DROP PROCEDURE conAsieCierreDATOS
GO
CREATE PROCEDURE conAsieCierreDATOS
(
	@Empresa INT, 
	@Ejercicio smallint,
	@CtaResEjer VarChar(25),
	@CtaResAcum VarChar(25)
)
AS

SELECT @Ejercicio AS Ejercicio, @CtaResEjer CtaResEjer,	 ' ' as DescripcionCtaResEjer,
@CtaResAcum CtaResAcum,	 ' ' as DescripcionCtaResAcum
	

select conAsientos.conAsientos, conAsientos.Especial, 
	genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C
FROM conAsientos INNER JOIN conPeriodos ON
  conAsientos.Fecha between conPeriodos.Fecha_Desde and conPeriodos.Fecha_Hasta and 
  conPeriodos.Empresa_Id = conAsientos.Empresa_Id
  inner join genAsiSegmentos ON
  genAsiSegmentos.Asiento_Id = conAsientos.conAsientos 
  INNER JOIN genSegmentos ON
  genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
WHERE
	conAsientos.Especial IN ('CCP','CIR') AND 
	conAsientos.Empresa_Id = @Empresa AND 
	conAsientos.Anulado = 0 and
	conAsientos.Posteado=1 and
	conPeriodos.Ejercicio = @Ejercicio
GO	

DROP PROCEDURE conAsieApeDATOS
GO
CREATE PROCEDURE conAsieApeDATOS
(
	@Empresa INT, 
	@Ejercicio smallint
)
AS
SELECT @Ejercicio AS Ejercicio

select conAsientos.conAsientos, conAsientos.Especial, 
	genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C
FROM conAsientos INNER JOIN conPeriodos ON
   conAsientos.Fecha between conPeriodos.Fecha_Desde and conPeriodos.Fecha_Hasta and 
   conPeriodos.Empresa_Id = conAsientos.Empresa_Id
  inner join genAsiSegmentos ON
  genAsiSegmentos.Asiento_Id = conAsientos.conAsientos 
  INNER JOIN genSegmentos ON
  genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
WHERE
	conAsientos.Especial = 'APE' AND 
	conAsientos.Empresa_Id = @Empresa AND 
	conAsientos.Anulado = 0 and
	conAsientos.Posteado=1 and
	conPeriodos.Ejercicio = @Ejercicio

GO	





Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conAsientos.sql*/
-- AGO 17 Especial en ConAsientos

DROP PROCEDURE conAsientosGuardar
GO
CREATE PROCEDURE conAsientosGuardar
(
@pEmpresa_id int, 
@pSegmento_id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20),
@pFecha qFecha,
/*@pFechaRegistro datetime,*/
@pUsuario_Id int,
@pMoneda_Id varchar(3) = NULL,
@pCambio qMonedaD8,
@pCambioMonedaOriginal qMonedaD8,
@pAnulado Sino,
@pObservaciones QMemo = NULL,
@pFormulario varchar(45),
@pPosteado Sino, 
@pEspecial VarChar(3), 
@pSucursal VarChar(4)
)
AS
SET NOCOUNT ON 
Declare @pidentity bigint = (select Asiento_id
 from genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_id = @pEmpresa_id and 
	genAsiSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C )




IF (@pidentity IS NOT NULL)
BEGIN 
	UPDATE conAsientos
	SET	
		Empresa_Id = @pEmpresa_Id,
		Fecha = @pFecha,
		FechaRegistro =dbo.FechaActual(),
		Usuario_Id = @pUsuario_Id,
		Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id),
		Cambio = @pCambio,
		CambioMonedaOriginal = @pCambioMonedaOriginal,
		Anulado = @pAnulado,
		Observaciones = @pObservaciones,
		Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario),
		Posteado = @pPosteado, 
		Especial = @pEspecial, 
		Sucursal = dbo.FuncFKgenSucursalesEmpr(@pSucursal)
	WHERE 
		conAsientos = @pidentity
END 
ELSE 
BEGIN 
	INSERT INTO conAsientos
	(
		Empresa_Id,
		Fecha,
		FechaRegistro,
		Usuario_Id,
		Moneda_Id,
		Cambio,
		CambioMonedaOriginal,
		Anulado,
		Observaciones,
		Formulario_Id,
		Posteado, 
		Especial,
		Sucursal
	)
	VALUES 
	(
		@pEmpresa_Id,
		@pFecha,
		dbo.FechaActual(),
		@pUsuario_Id,
		dbo.FuncFKgenMonedas(@pMoneda_Id),
		@pCambio,
		@pCambioMonedaOriginal,
		@pAnulado,
		@pObservaciones,
		dbo.FuncFKdisFormularios(@pFormulario),
		@pPosteado, 
		@pEspecial,
		dbo.FuncFKgenSucursalesEmpr(@pSucursal)
	)
	SET @pidentity =  Cast(SCOPE_IDENTITY() as bigint) 
END 
Select @pidentity as RetVal 

GO
DROP PROCEDURE conAsientosDatos_Private 
GO
CREATE PROCEDURE conAsientosDatos_Private 
(
@pAsiento_id bigint
)

AS

SELECT conAsientos.conAsientos, 
	genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C,
	conAsientos.Fecha, conAsientos.FechaRegistro,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, genMonedas.Moneda_Id, 
	genMonedas.Descripcion as DescripcionMonedas,
	conAsientos.Cambio, conAsientos.CambioMonedaOriginal, conAsientos.Anulado, conAsientos.Observaciones,
	disFormularios.Formulario_Id , disFormularios.Descripcion as DescripcionFormulario, conAsientos.Posteado, 
		conAsientos.Especial, isnull(genSucursalesEmpr.Sucursal,' ')  as Sucursal, 
		Cast(0 as bit) as EsSaldoInicial, ' ' as TipoEnvio, ' ' Cliente_Id , 
			' ' Proveed_Id, ' ' AS Tipomov, 0 as AnioSueldos, 0 as MesSueldos, 
			0 as QuinSueldos, 0 as DecenaSueldos, 0 as SemanaSueldos, 0 as VezSueldos
FROM conAsientos 
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_id = conAsientos.conAsientos
INNER JOIN genSegmentos ON  genSegmentos.genSegmentos = genAsiSegmentos.Segmento_id
INNER JOIN genUsuarios  ON genUsuarios.genUsuarios = conAsientos.Usuario_Id
LEFT JOIN genMonedas  ON genMonedas.genMonedas = conAsientos.Moneda_Id
INNER JOIN disFormularios  ON disFormularios.disFormularios = conAsientos.Formulario_Id
LEFT JOIN genSucursalesEmpr ON genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
WHERE  
	conAsientos.conAsientos = @pAsiento_id



SELECT conAsientos.conAsientos, conMovCont.Renglon,
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuentas,
	conMovCont.LeyendaLibroMayor, conMovCont.Importe, conMovCont.ImporteMonedaOriginal, 
	conMovCont.TipoMov, conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, 
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, conMovCont.Clase
FROM conMovCont 
INNER JOIN conAsientos  ON (conAsientos.conAsientos = conMovCont.conAsientos)
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = conMovCont.Cuenta_Id)
LEFT JOIN conCentro1  ON (conCentro1.conCentro1 = conMovCont.Centro1_Id)
LEFT JOIN conCentro2  ON (conCentro2.conCentro2 = conMovCont.Centro2_Id)
WHERE 
	(conMovCont.conAsientos = @pAsiento_id)
ORDER BY 2	

 Exec genAtributosGeneralesIdentityDatos @pAsiento_id, 'conAsientos'
 RETURN @@Error 

GO


DROP PROCEDURE conAsientosDatos
GO
CREATE PROCEDURE conAsientosDatos
(
@pEmpresa_id int, 
@pSegmento_id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
AS
SET NOCOUNT ON 

Declare @pIdentity bigint= (select Asiento_id from genAsiSegmentos
	Where
	genAsiSegmentos.Empresa_id = @pEmpresa_id and 
	genAsiSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C)

EXEC 	conAsientosDatos_Private @pIdentity
GO


DROP PROCEDURE conAsientosEliminar
GO
CREATE PROCEDURE conAsientosEliminar
(
	@pconAsientos bigint
)
AS
SET NOCOUNT ON 

DELETE FROM conAsientos WHERE  conAsientos = @pconAsientos
RETURN @@Error 

GO


DROP PROCEDURE conAsientosAnular
GO
CREATE PROCEDURE conAsientosAnular
(
	@pconAsientos bigint,
	@pUsuario_id int 
	
)
AS
SET NOCOUNT ON 

UPDATE conAsientos SET Anulado = 1, Usuario_id = @pUsuario_id, 
	FechaRegistro = dbo.FechaActual()
	WHERE  conAsientos = @pconAsientos
RETURN @@Error 

GO


DROP PROCEDURE conAsientosContDatos
GO
CREATE PROCEDURE conAsientosContDatos
(
@pEmpresa_id int, 
@pSegmento_id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)

AS
Declare @pAsiento_id bigint= (select Asiento_id from genAsiSegmentos
	Where
	genAsiSegmentos.Empresa_id = @pEmpresa_id and 
	genAsiSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C)



SELECT conAsientos.conAsientos, conEjercicio.Ejercicio, 
	genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C,
	conAsientos.Fecha, conAsientos.FechaRegistro, conAsientosCon.LeyendaLibroDiario,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, genMonedas.Moneda_Id, 
	genMonedas.Descripcion as DescripcionMonedas,
	conAsientos.Cambio, conAsientos.CambioMonedaOriginal, conAsientos.Anulado, conAsientos.Observaciones,
	disFormularios.Formulario_Id , disFormularios.Descripcion as DescripcionFormulario, conAsientos.Posteado, 
	conAsientos.Especial, genSucursalesEmpr.Sucursal,
	SUM(CASE WHEN conMovContCon.TipoMov=1 THEN  conMovContCon.Importe ELSE 0 END) as TotalDebe, 
	SUM(CASE WHEN conMovContCon.TipoMov=2 THEN  conMovContCon.Importe ELSE 0 END) as TotalHaber,
	SUM(conMovContCon.Importe *(-2*conMovContCon.TipoMov+3)) Diferencia, 
	0 as AsientosTipo_Id, ' ' as LeyendaLibroDiario1, '' as Upload
FROM conAsientos 
INNER JOIN conAsientosCon ON conAsientosCon.conAsientos = conAsientos.conAsientos
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_id = conAsientos.conAsientos
INNER JOIN genSegmentos ON  genSegmentos.genSegmentos = genAsiSegmentos.Segmento_id
INNER JOIN genUsuarios  ON genUsuarios.genUsuarios = conAsientos.Usuario_Id
INNER JOIN conPeriodos ON conAsientos.Fecha between conPeriodos.Fecha_Desde AND conPeriodos.Fecha_Hasta and 
conPeriodos.Empresa_Id = @pEmpresa_id
INNER JOIN conEjercicio ON conEjercicio.Ejercicio = conPeriodos.Ejercicio
LEFT JOIN genMonedas  ON genMonedas.genMonedas = conAsientos.Moneda_Id
INNER JOIN disFormularios  ON disFormularios.disFormularios = conAsientos.Formulario_Id
INNER JOIN conMovContCon on conMovContCon.conAsientos = conASientos.conAsientos
INNER JOIN genSucursalesEmpr ON genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
WHERE  
	conAsientos.conAsientos = @pAsiento_id
	GROUP BY conAsientos.conAsientos, 
	genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C,
	conAsientos.Fecha, conAsientos.FechaRegistro,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres , genMonedas.Moneda_Id, 
	genMonedas.Descripcion ,conAsientos.Cambio, conAsientos.CambioMonedaOriginal, 
	conAsientos.Anulado, conAsientos.Observaciones,conAsientosCon.LeyendaLibroDiario, 
	disFormularios.Formulario_Id , disFormularios.Descripcion ,conAsientos.Posteado, 
	conAsientos.Especial,genSucursalesEmpr.Sucursal, conEjercicio.Ejercicio

Exec conMovContConDatos @pAsiento_id,null
Exec genAtributosGeneralesIdentityDatos @pAsiento_id, 'conAsientos'
RETURN @@Error 

GO



DROP PROCEDURE conMarcarEspecial
GO
CREATE PROCEDURE conMarcarEspecial
(
@pEmpresa_id int, 
@pSegmento_id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20),
@pEspecial VarChar(3)
)
AS
SET NOCOUNT ON 

	UPDATE conAsientos
	SET	Especial = @pEspecial
		WHERE Exists(select 1 from genAsiSegmentos
	Where
	genAsiSegmentos.Asiento_Id = conAsientos.conAsientos and
	genAsiSegmentos.Empresa_id = @pEmpresa_id and 
	genAsiSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C )

GO



DROP PROCEDURE conAsientosConGuardar
GO
CREATE PROCEDURE conAsientosConGuardar
(
@pconAsientos bigint,
@pLeyendaLibroDiario varchar(100)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM conAsientosCon WHERE (conAsientos = @pconAsientos)))
BEGIN 
	UPDATE conAsientosCon
	SET		LeyendaLibroDiario = @pLeyendaLibroDiario
	WHERE (conAsientos = @pconAsientos)
END 
ELSE 
BEGIN 
	INSERT INTO conAsientosCon
	(
		conAsientos,
		LeyendaLibroDiario
	)
	VALUES 
	(
		@pconAsientos,
		@pLeyendaLibroDiario
	)
END 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conAsientosAnul.sql*/
DROP PROCEDURE conAsientosAnulGuardar
GO
CREATE PROCEDURE conAsientosAnulGuardar
(
@pAsiento_Id bigint,
@pUsuario_Id int,
@pTipoEnvio char(1), 
@pCausa VarChar(Max) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM conAsientosAnul WHERE (Asiento_Id = @pAsiento_Id)))
BEGIN 
	UPDATE conAsientosAnul
	SET		FechaAnulacion = dbo.FechaActual(),
		Usuario_Id = @pUsuario_Id,
		TipoEnvio = @pTipoEnvio, 
		Causa = @pCausa
	WHERE (Asiento_Id = @pAsiento_Id)
END 
ELSE 
BEGIN 
	INSERT INTO conAsientosAnul
	(
		Asiento_Id,
		FechaAnulacion,
		Usuario_Id,
		TipoEnvio, 
		Causa
	)
	VALUES 
	(
		@pAsiento_Id,
		dbo.FechaActual(),
		@pUsuario_Id,
		@pTipoEnvio, 
		@pCausa
	)
END 

GO

DROP PROCEDURE conAsientosAnulDatos
GO
CREATE PROCEDURE conAsientosAnulDatos
(
@pAsiento_Id bigint
)
AS
SET NOCOUNT ON 

SELECT conAsientos.conAsientos, 
	conAsientosAnul.FechaAnulacion, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
	conAsientosAnul.TipoEnvio, conAsientosAnul.Causa
FROM conAsientosAnul 
INNER JOIN conAsientos  ON (conAsientos.conAsientos = conAsientosAnul.Asiento_Id)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = conAsientosAnul.Usuario_Id)
WHERE (Asiento_Id = @pAsiento_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE conAsientosAnulEliminar
GO
CREATE PROCEDURE conAsientosAnulEliminar
(
@pAsiento_Id bigint
)
AS
SET NOCOUNT ON 

DELETE FROM conAsientosAnul 
WHERE (Asiento_Id = @pAsiento_Id)
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conAsientosApertura.sql*/
drop procedure conAsientosAperturaDatos
go
create procedure conAsientosAperturaDatos
(
@pEmpresa_id int, 
@pSegmento_id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)

AS
Declare @pAsiento_id bigint= (select Asiento_id from genAsiSegmentos
	Where
	genAsiSegmentos.Empresa_id = @pEmpresa_id and 
	genAsiSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C)
	select conAsientos.conAsientos, conEjercicio.Ejercicio, 
	genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C,
	Especial from conAsientos 
	INNER JOIN conPeriodos ON conAsientos.Fecha between conPeriodos.Fecha_Desde AND conPeriodos.Fecha_Hasta
INNER JOIN conEjercicio ON conEjercicio.Ejercicio = conPeriodos.Ejercicio
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_id = conAsientos.conAsientos
INNER JOIN genSegmentos ON  genSegmentos.genSegmentos = genAsiSegmentos.Segmento_id
where conAsientos=@pAsiento_id
go
drop procedure conAsientosAperturaGuardar
go
create procedure conAsientosAperturaGuardar
(
@pAsiento_Id bigint
)
as
set nocount on
update conAsientos
set Especial='APE'
where conAsientos=@pAsiento_Id
go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conAsientosCont_Inver.sql*/
DROP PROCEDURE conAsientosInverDatos
GO
CREATE PROCEDURE conAsientosInverDatos
(
@pEmpresa_id int, 
@pSegmento_id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20),
@pSegmento_id_Inver VarChar(10), 
@pSegmento1N_Inver int,
@pSegmento2N_Inver int,
@pSegmento3N_Inver int,
@pSegmento4N_Inver int,
@pSegmento1C_Inver VarChar(20),
@pSegmento2C_Inver VarChar(20),
@pSegmento3C_Inver VarChar(20),
@pSegmento4C_Inver VarChar(20)
)
AS
if @pSegmento1N_Inver is null or @pSegmento1N_Inver=0
begin 

exec conAsientosContDatos @pEmpresa_Id, @pSegmento_Id,@pSegmento1N,@pSegmento2N,@pSegmento3N,@pSegmento4N,@pSegmento1C,@pSegmento2C,@pSegmento3C,@pSegmento4C

select conEjercicio.Ejercicio,conAsientosInver.Asiento_Id_Inver as Asiento_Id,genSegmentos.Segmento_Id, SegmentoOri.Segmento1N as Segmento1N, SegmentoOri.Segmento2N as Segmento2N, SegmentoOri.Segmento3N as Segmento3N,
SegmentoOri.Segmento4N as Segmento4N, SegmentoOri.Segmento1C as Segmento1C, SegmentoOri.Segmento2C as Segmento2C,SegmentoOri.Segmento3C as Segmento3C,
genAsiSegmentos.Segmento4C as Segmento4C
from conAsientos 
left join conAsientosInver on conAsientos.conAsientos=conAsientosInver.Asiento_Id
left join genAsiSegmentos on genAsiSegmentos.Asiento_Id=conAsientosInver.Asiento_Id_Inver
inner join genAsiSegmentos SegmentoOri on SegmentoOri.Asiento_Id=conAsientos.conAsientos
inner join genSegmentos on genAsiSegmentos.Segmento_Id=genSegmentos.genSegmentos
inner join conPeriodos on conAsientos.Fecha between conPeriodos.Fecha_Desde and conPeriodos.Fecha_Hasta
inner join conEjercicio on conPeriodos.Ejercicio=conEjercicio.Ejercicio
where
genAsiSegmentos.Empresa_id = @pEmpresa_id and 
	genAsiSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C 
end
else
begin
Declare @pidentity bigint = (select Asiento_id
 from genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_id = @pEmpresa_id and 
	genAsiSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_id_Inver) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N_Inver and 
	genAsiSegmentos.Segmento2N = @pSegmento2N_Inver and 
	genAsiSegmentos.Segmento3N = @pSegmento3N_Inver and 
	genAsiSegmentos.Segmento4N = @pSegmento4N_Inver and 
	genAsiSegmentos.Segmento1C = @pSegmento1C_Inver and 
	genAsiSegmentos.Segmento2C = @pSegmento2C_Inver and 
	genAsiSegmentos.Segmento3C = @pSegmento3C_Inver and 
	genAsiSegmentos.Segmento4C = @pSegmento4C_Inver )
exec conAsientosContDatos @pEmpresa_Id, @pSegmento_Id_Inver,@pSegmento1N_Inver,@pSegmento2N_Inver,@pSegmento3N_Inver,@pSegmento4N_Inver,@pSegmento1C_Inver,
@pSegmento2C_Inver,@pSegmento3C_Inver,@pSegmento4C_Inver

select conEjercicio.Ejercicio,genAsiSegmentos.Asiento_Id, genSegmentos.Segmento_Id, Segmento1N, Segmento2N, Segmento3N, Segmento4N, Segmento1C, Segmento2C, Segmento3C, Segmento4C
 from genAsiSegmentos 
 left join conAsientosInver on conAsientosInver.Asiento_Id_Inver=@pidentity
 inner join genSegmentos on genSegmentos=genAsiSegmentos.Segmento_Id 
 inner join conAsientos on conAsientos.conAsientos=genAsiSegmentos.Asiento_Id
 inner join conPeriodos on conAsientos.Fecha between conPeriodos.Fecha_Desde and conPeriodos.Fecha_Hasta
 inner join conEjercicio on conPeriodos.Ejercicio=conEjercicio.Ejercicio

 where conAsientosInver.Asiento_Id= genAsiSegmentos.Asiento_Id


end
go

DROP PROCEDURE conAsientosInverGuardar
GO
CREATE PROCEDURE conAsientosInverGuardar
(
@pAsiento_Id bigint,
@pAsiento_Id_Inver bigint
)
AS
SET NOCOUNT ON 

	INSERT INTO conAsientosInver
	(
		Asiento_Id,
		Asiento_Id_Inver
	)
	VALUES 
	(
		@pAsiento_Id,
		@pAsiento_Id_Inver
	)

GO


DROP PROCEDURE conAsientosInverEliminar
GO
CREATE PROCEDURE conAsientosInverEliminar
(
@pAsiento_Id bigint,
@pAsiento_Id_Inver bigint
)
AS
SET NOCOUNT ON 

DELETE FROM conAsientosInver 
WHERE (Asiento_Id = @pAsiento_Id)
AND (Asiento_Id_Inver = @pAsiento_Id_Inver)
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conAsientosTipo.sql*/
DROP PROCEDURE conAsientosTipoGuardar
GO
CREATE PROCEDURE conAsientosTipoGuardar
(
@pAsiTipo_Id int,
@pEmpresa_Id int = NULL,
@pLeyendaLibroDiario varchar(100),
@pReservada Sino,
@pInactivo Sino,
@pUsuario_Id int,
@pPosteado Sino
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM conAsientosTipo WHERE (AsiTipo_Id = @pAsiTipo_Id)))
BEGIN 
	UPDATE conAsientosTipo
	SET		Empresa_Id = @pEmpresa_Id,
		LeyendaLibroDiario = @pLeyendaLibroDiario,
		Reservada = @pReservada,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (AsiTipo_Id = @pAsiTipo_Id)
END 
ELSE 
BEGIN 
	INSERT INTO conAsientosTipo
	(
		AsiTipo_Id,
		Empresa_Id,
		LeyendaLibroDiario,
		Reservada,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pAsiTipo_Id,
		@pEmpresa_Id,
		@pLeyendaLibroDiario,
		@pReservada,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
END 

GO

DROP PROCEDURE conAsientosTipoDatos
GO
CREATE PROCEDURE conAsientosTipoDatos
(
@pAsiTipo_Id int
)
AS
SET NOCOUNT ON 

SELECT conAsientosTipo.AsiTipo_Id, conAsientosTipo.Empresa_Id, Cast( Case When conAsientosTipo.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, conAsientosTipo.LeyendaLibroDiario,
	conAsientosTipo.Reservada, conAsientosTipo.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
	conAsientosTipo.Posteado
FROM conAsientosTipo 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = conAsientosTipo.Usuario_Id)
WHERE (AsiTipo_Id = @pAsiTipo_Id)

exec conAsieTipoCuerpoDatos @pAsiTipo_id
RETURN @@Error 

GO

DROP PROCEDURE conAsientosTipoEliminar
GO
CREATE PROCEDURE conAsientosTipoEliminar
(
@pAsiTipo_Id int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM conAsientosTipo 
WHERE (AsiTipo_Id = ISNULL(@pAsiTipo_Id, AsiTipo_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conAsieReversion.sql*/
DROP PROCEDURE conAsieReversionGuardar
GO
CREATE PROCEDURE conAsieReversionGuardar
(
@pAsiento_Id bigint,
@pAsiento_Rever bigint
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM conAsieReversion WHERE (Asiento_Id = @pAsiento_Id)))
BEGIN 
	UPDATE conAsieReversion
	SET		Asiento_Rever = @pAsiento_Rever
	WHERE (Asiento_Id = @pAsiento_Id)
END 
ELSE 
BEGIN 
	INSERT INTO conAsieReversion
	(
		Asiento_Id,
		Asiento_Rever
	)
	VALUES 
	(
		@pAsiento_Id,
		@pAsiento_Rever
	)
END 

GO

DROP PROCEDURE conAsieReversionDatos
GO
CREATE PROCEDURE conAsieReversionDatos
(
@pAsiento_Id bigint
)
AS
SET NOCOUNT ON 

SELECT conAsieReversion.Asiento_Id, conAsieReversion.Asiento_Rever , 
	genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_id, 
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,	
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, 
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, 
	genAsiSegmentos.Segmento3C,	genAsiSegmentos.Segmento4C
FROM conAsieReversion inner join genAsiSegmentos on
conAsieReversion.Asiento_Rever = genAsiSegmentos.Asiento_Id
inner join genSegmentos on 
genAsiSegmentos.Segmento_Id = genSegmentos.genSegmentos

WHERE (conAsieReversion.Asiento_Id = @pAsiento_Id)
 
RETURN @@Error 

GO

DROP PROCEDURE conAsieReversionEliminar
GO
CREATE PROCEDURE conAsieReversionEliminar
(
@pAsiento_Id bigint
)
AS
SET NOCOUNT ON 

DELETE FROM conAsieReversion 
WHERE (Asiento_Id = @pAsiento_Id)
 
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conAsieTipoCuerpo.sql*/
DROP PROCEDURE conAsieTipoCuerpoInsertar
GO
CREATE PROCEDURE conAsieTipoCuerpoInsertar
(
@pAsiTipo_Id int,
@pRenglon smallint,
@pCuenta_Id varchar(25) = NULL,
@pCentro1_Id varchar(8) = NULL,
@pCentro2_Id varchar(8) = NULL,
@pLeyendaLibroMayor varchar(100),
@pHaber qMonedaD2,
@pDebe qMonedaD2
)
AS
SET NOCOUNT ON 

	INSERT INTO conAsieTipoCuerpo
	(
		AsiTipo_Id,
		Renglon,
		Cuenta_Id,
		Centro1_Id,
		Centro2_Id,
		LeyendaLibroMayor,
		Haber,
		Debe
	)
	VALUES 
	(
		@pAsiTipo_Id,
		@pRenglon,
		dbo.FuncFKconCuentas(@pCuenta_Id),
		dbo.FuncFKconCentro1(@pCentro1_Id),
		dbo.FuncFKconCentro2(@pCentro2_Id),
		@pLeyendaLibroMayor,
		@pHaber,
		@pDebe
	)


GO

DROP PROCEDURE conAsieTipoCuerpoDatos
GO
CREATE PROCEDURE conAsieTipoCuerpoDatos
(
@pAsiTipo_Id int,
@pRenglon smallint=null
)
AS
SET NOCOUNT ON 

SELECT conAsieTipoCuerpo.AsiTipo_Id, conAsieTipoCuerpo.Renglon, 
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuentas, 
	conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, 
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, 
	conAsieTipoCuerpo.LeyendaLibroMayor, conAsieTipoCuerpo.Haber, conAsieTipoCuerpo.Debe
FROM conAsieTipoCuerpo 
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = conAsieTipoCuerpo.Cuenta_Id)
LEFT JOIN conCentro1  ON (conCentro1.conCentro1 = conAsieTipoCuerpo.Centro1_Id)
LEFT JOIN conCentro2  ON (conCentro2.conCentro2 = conAsieTipoCuerpo.Centro2_Id)
WHERE (conAsieTipoCuerpo.AsiTipo_Id = @pAsiTipo_Id)
AND (conAsieTipoCuerpo.Renglon = ISNULL(@pRenglon,conAsieTipoCuerpo.Renglon))
 
RETURN @@Error 

GO

DROP PROCEDURE conAsieTipoCuerpoEliminar
GO
CREATE PROCEDURE conAsieTipoCuerpoEliminar
(
@pAsiTipo_Id int,
@pRenglon smallint = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM conAsieTipoCuerpo 
WHERE (AsiTipo_Id = @pAsiTipo_Id)
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conBalanzaElectroMX.sql*/
Drop procedure conBalanzaElectroMX
go
create procedure conBalanzaElectroMX
(
@pAnio int,
@pMes int,
@pNivel Int,
@pEmpresa int
)
as
select @pAnio as Anio, @pMes as Mes,@pNivel as Nivel
declare @FechaDesde datetime, @FechaDesdeE datetime, @FechaHasta datetime

set @FechaDesdeE = (select Fecha_Desde from conPeriodos where Ejercicio=@pAnio and Periodo=1 and Empresa_Id=@pEmpresa)

if @pMes = 13
begin

set @FechaHasta = (select Fecha_Hasta from conPeriodos where Ejercicio=@pAnio and Periodo=12 and Empresa_Id=@pEmpresa)

SELECT conCuentas.Cuenta_Id, conCuentas.Descripcion, conCuentas.Nivel , conCuentas.Imputable,
	SUM(case when conAsientos.Especial != 'CIR' Then 	conMovCont.Importe * (-2*conMovCont.Tipomov+3) else 0 end/**case when conCuentas.Naturaleza ='A' THEN -1 ELSE 1 END*/) as Saldoinicial,
	SUM(case when conAsientos.Especial != 'CIR' and conMovCont.Tipomov=1	then  conMovCont.Importe else 0 end) as Debe,
	SUM(case when conAsientos.Especial != 'CIR' and  conMovCont.Tipomov=2	then  conMovCont.Importe else 0 end) as Haber,
	ISNULL(SUM(conMovCont.Importe * (-2*conMovCont.Tipomov+3)/**case when conCuentas.Naturaleza ='A' THEN -1 ELSE 1 END */),0) as SaldoiFinal,conCuentas.Naturaleza
FROM conCuentas
LEFT OUTER JOIN (conMovCont INNER JOIN conAsientos ON
	conAsientos.conAsientos = conMovCont.conAsientos AND 
	conAsientos.Fecha between @FechaDesdeE and @FechaHasta and
	conAsientos.Empresa_Id = @pEmpresa) ON 
	conMovCont.Cuenta_Id = conCuentas.conCuentas 
Where
	conAsientos.Especial NOT IN ('CCP') AND
	conAsientos.Anulado = 0 and 
	conCuentas.Imputable = 1 AND 
	ISNULL(conCuentas.Empresa_Id,@pEmpresa) = @pEmpresa 
GROUP BY conCuentas.Cuenta_Id, conCuentas.Descripcion, conCuentas.Nivel , conCuentas.Imputable,conCuentas.Naturaleza
UNION ALL
SELECT conCuentas.Cuenta_Id, conCuentas.Descripcion, conCuentas.Nivel, conCuentas.Imputable, 
	0,0,0 ,0,conCuentas.Naturaleza
from conCuentas
where
	Imputable = 0 and 
	Nivel = @pNivel and 
	ISNULL(conCuentas.Empresa_Id,@pEmpresa) = @pEmpresa 
ORDER BY 1

end

ELSE

begin

set @FechaDesde= (select Fecha_Desde from conPeriodos where Ejercicio=@pAnio and Periodo=@pMes and Empresa_Id=@pEmpresa)
set @FechaHasta = (select Fecha_Hasta from conPeriodos where Ejercicio=@pAnio and Periodo=@pMes and Empresa_Id=@pEmpresa)

SELECT conCuentas.Cuenta_Id, conCuentas.Descripcion, conCuentas.Nivel , conCuentas.Imputable,
	SUM(case when conAsientos.Fecha < @FechaDesde  or conAsientos.Especial = 'APE' Then 
		conMovCont.Importe * (-2*conMovCont.Tipomov+3) else 0 end /*case when conCuentas.Naturaleza ='A' THEN -1 ELSE 1 END*/) 		as Saldoinicial,
	SUM(case when conAsientos.Especial <> 'APE' AND  conAsientos.Fecha >= @FechaDesde and conMovCont.Tipomov=1	then  conMovCont.Importe else 0 end) as Debe,
	SUM(case when conAsientos.Especial <> 'APE' AND  conAsientos.Fecha >= @FechaDesde and  conMovCont.Tipomov=2	then  conMovCont.Importe else 0 end) as Haber,
	ISNULL(SUM(conMovCont.Importe * (-2*conMovCont.Tipomov+3)/**case when conCuentas.Naturaleza ='A' THEN -1 ELSE 1 END*/ ),0)	as SaldoiFinal,conCuentas.Naturaleza
FROM conCuentas
LEFT OUTER JOIN (conMovCont INNER JOIN conAsientos ON
	conAsientos.conAsientos = conMovCont.conAsientos AND 
	conAsientos.Fecha between @FechaDesdeE and @FechaHasta and
	conAsientos.Empresa_Id = @pEmpresa) ON 
	conMovCont.Cuenta_Id = conCuentas.conCuentas 
Where
	conAsientos.Especial NOT IN ('CCP','CIR') AND
	conAsientos.Anulado = 0 and 
	conCuentas.Imputable = 1 AND 
	ISNULL(conCuentas.Empresa_Id,@pEmpresa) = @pEmpresa 
GROUP BY conCuentas.Cuenta_Id, conCuentas.Descripcion, conCuentas.Nivel , conCuentas.Imputable,conCuentas.Naturaleza
UNION ALL
SELECT conCuentas.Cuenta_Id, conCuentas.Descripcion, conCuentas.Nivel, conCuentas.Imputable, 
	0,0,0 ,0,conCuentas.Naturaleza
from conCuentas
where
	Imputable = 0 and 
	Nivel = @pNivel and 
	ISNULL(conCuentas.Empresa_Id,@pEmpresa) = @pEmpresa 
ORDER BY 1
end
go



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conBaseCentro.sql*/
DROP PROCEDURE conBaseCentroGuardar
GO
CREATE PROCEDURE conBaseCentroGuardar
(
@pBase_Id int,
@pCentro1_Id int,
@pValor QCantidad
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM conBaseCentro WHERE (Base_Id = @pBase_Id) AND (Centro1_Id = @pCentro1_Id)))
BEGIN 
	UPDATE conBaseCentro
	SET		Valor = @pValor
	WHERE (Base_Id = @pBase_Id) AND (Centro1_Id = @pCentro1_Id)
END 
ELSE 
BEGIN 
	INSERT INTO conBaseCentro
	(
		Base_Id,
		Centro1_Id,
		Valor
	)
	VALUES 
	(
		@pBase_Id,
		@pCentro1_Id,
		@pValor
	)
END 

GO

DROP PROCEDURE conBaseCentroEliminar
GO
CREATE PROCEDURE conBaseCentroEliminar
(
@pBase_Id int,
@pCentro1_Id int = Null
)
AS
SET NOCOUNT ON 

DELETE FROM conBaseCentro 
WHERE (Base_Id = @pBase_Id)
AND (Centro1_Id = IsNull(@pCentro1_Id, Centro1_Id))
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conBaseDistri.sql*/
DROP PROCEDURE conBaseDistriGuardar
GO
CREATE PROCEDURE conBaseDistriGuardar
(
@pBase_Id varchar(5),
@pBase_Id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(35),
@pMedida_Id varchar(3),
@pInactivo Sino,
@pUsuario_Id int = NULL,
@pPosteado Sino
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM conBaseDistri WHERE (Base_Id = @pBase_Id)))
BEGIN 
	UPDATE conBaseDistri
	SET		@lIdentidad = conBaseDistri,
		Base_Id = @pBase_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Medida_Id = @pMedida_Id,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (Base_Id = @pBase_Id)
END 
ELSE 
BEGIN 
	INSERT INTO conBaseDistri
	(
		Base_Id,
		Empresa_Id,
		Descripcion,
		Medida_Id,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pBase_Id,
		@pEmpresa_Id,
		@pDescripcion,
		@pMedida_Id,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal

GO

DROP PROCEDURE conBaseDistriDatos
GO
CREATE PROCEDURE conBaseDistriDatos
(
@pBase_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT conBaseDistri.conBaseDistri, conBaseDistri.Base_Id, conBaseDistri.Empresa_Id, 
	Cast( Case When conBaseDistri.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	conBaseDistri.Descripcion, conBaseDistri.Medida_Id, conBaseDistri.Inactivo, genUsuarios.Usuario_Id,
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario, conBaseDistri.Posteado
FROM conBaseDistri 
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = conBaseDistri.Usuario_Id)
WHERE (Base_Id = @pBase_Id)
 


Declare @pidentity bigint= dbo.FuncFKconBaseDistri(@pBase_Id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'conBaseDistri'

SELECT conCentro1.Centro1_id, conCentro1.Descripcion as DescripcionCentro1,
	conBaseCentro.Valor
FROM conBaseCentro 
INNER JOIN conCentro1 ON (conCentro1.conCentro1 = conBaseCentro.Centro1_Id)
WHERE (Base_Id = @pidentity)
 
 RETURN @@Error 

GO

DROP PROCEDURE conBaseDistriEliminar
GO
CREATE PROCEDURE conBaseDistriEliminar
(
@pBase_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM conBaseDistri 
WHERE (Base_Id = @pBase_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKconBaseDistri
GO

CREATE FUNCTION FuncFKconBaseDistri
(
@pBase_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = conBaseDistri FROM conBaseDistri WHERE 
	Base_Id = @pBase_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conCatalogosElectroMX.sql*/
drop procedure conCatalogoElectroMX
go
create procedure conCatalogoElectroMX
(
@pEmpresa_Id int,
@pNivel int
)
as
select YEAR(GETDATE()) as Anio, MONTH(GETDATE()) as Mes, cast(0 as bit) as Genera_Catalogo, cast(0 as bit) as Genera_Balanza, 
cast(0 as bit) as Genera_Poliza, ' ' as TipoSolicitud, ' ' as Numorden, ' ' as NumTramite, 99 as Nivel
	

SELECT Cuenta_id, Descripcion, Nivel, TipoSat_Id, Naturaleza, 
 (select max(cuenta_id) from conCuentas c1 where
  c1.Cuenta_Id < concuentas.Cuenta_Id and 
  c1.Nivel < conCuentas.Nivel) SubcuentaDe
  FROM conCuentas where isnull(conCuentas.Empresa_Id,@pEmpresa_Id)=@pEmpresa_Id and conCuentas.Nivel<=@pNivel
order by 1
go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conCentro1.sql*/
DROP PROCEDURE conCentro1Guardar
GO
CREATE PROCEDURE conCentro1Guardar
(
@pCentro1_Id varchar(8),
@pCentro1_Id_Nuevo varchar(8),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(35),
@pNivel smallint,
@pImputable Sino,
@pNotas QMemo = NULL,
@pInactivo Sino,
@pUsuario_Id int,
@pPosteado Sino
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM conCentro1 WHERE (Centro1_Id = @pCentro1_Id)))
BEGIN 
	UPDATE conCentro1
	SET		@lIdentidad = conCentro1,
		Centro1_Id = @pCentro1_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Nivel = @pNivel,
		Imputable = @pImputable,
		Notas = @pNotas,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (Centro1_Id = @pCentro1_Id)
END 
ELSE 
BEGIN 
	INSERT INTO conCentro1
	(
		Centro1_Id,
		Empresa_Id,
		Descripcion,
		Nivel,
		Imputable,
		Notas,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pCentro1_Id,
		@pEmpresa_Id,
		@pDescripcion,
		@pNivel,
		@pImputable,
		@pNotas,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE conCentro1Datos
GO
CREATE PROCEDURE conCentro1Datos
(
@pCentro1_Id varchar(8)
)
AS
SET NOCOUNT ON 

SELECT conCentro1.conCentro1, conCentro1.Centro1_Id, conCentro1.Empresa_Id, 
	Cast( Case When conCentro1.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	conCentro1.Descripcion, conCentro1.Nivel, conCentro1.Imputable, conCentro1.Notas,
	conCentro1.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, conCentro1.Posteado
FROM conCentro1 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = conCentro1.Usuario_Id)
WHERE (Centro1_Id = @pCentro1_Id)
 


Declare @pidentity bigint= dbo.FuncFKconCentro1(@pCentro1_Id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'conCentro1'
RETURN @@Error 

GO

DROP PROCEDURE conCentro1Eliminar
GO
CREATE PROCEDURE conCentro1Eliminar
(
@pCentro1_Id varchar(8) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM conCentro1 
WHERE (Centro1_Id = @pCentro1_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKconCentro1
GO

CREATE FUNCTION FuncFKconCentro1
(
@pCentro1_Id varchar (8)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = conCentro1 FROM conCentro1 WHERE 
	Centro1_Id = @pCentro1_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conCentro2.sql*/
DROP PROCEDURE conCentro2Guardar
GO
CREATE PROCEDURE conCentro2Guardar
(
@pCentro2_Id varchar(8),
@pCentro2_Id_Nuevo varchar(8),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(35),
@pNivel smallint,
@pImputable Sino,
@pNotas QMemo = NULL,
@pInactivo Sino,
@pUsuario_Id int,
@pPosteado Sino
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM conCentro2 WHERE (Centro2_Id = @pCentro2_Id)))
BEGIN 
	UPDATE conCentro2
	SET		@lIdentidad = conCentro2,
		Centro2_Id = @pCentro2_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Nivel = @pNivel,
		Imputable = @pImputable,
		Notas = @pNotas,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (Centro2_Id = @pCentro2_Id)
END 
ELSE 
BEGIN 
	INSERT INTO conCentro2
	(
		Centro2_Id,
		Empresa_Id,
		Descripcion,
		Nivel,
		Imputable,
		Notas,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pCentro2_Id,
		@pEmpresa_Id,
		@pDescripcion,
		@pNivel,
		@pImputable,
		@pNotas,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE conCentro2Datos
GO
CREATE PROCEDURE conCentro2Datos
(
@pCentro2_Id varchar(8)
)
AS
SET NOCOUNT ON 

SELECT conCentro2.conCentro2, conCentro2.Centro2_Id, conCentro2.Empresa_Id, Cast( Case When conCentro2.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	conCentro2.Descripcion, conCentro2.Nivel, conCentro2.Imputable, conCentro2.Notas,
	conCentro2.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, conCentro2.Posteado
FROM conCentro2 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = conCentro2.Usuario_Id)
WHERE (Centro2_Id = @pCentro2_Id)
 


  Declare @pidentity bigint= dbo.FuncFKconCentro2(@pCentro2_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'conCentro2'
 RETURN @@Error 

GO

DROP PROCEDURE conCentro2Eliminar
GO
CREATE PROCEDURE conCentro2Eliminar
(
@pCentro2_Id varchar(8) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM conCentro2 
WHERE (Centro2_Id = @pCentro2_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKconCentro2
GO

CREATE FUNCTION FuncFKconCentro2
(
@pCentro2_Id varchar (8)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = conCentro2 FROM conCentro2 WHERE 
	Centro2_Id = @pCentro2_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conCuadro1Filas.sql*/
DROP PROCEDURE conCuadro1FilasGuardar
GO
CREATE PROCEDURE conCuadro1FilasGuardar
(
@pCuadro1Fila_Id int,
@pCuadro1Fila_Id_Nuevo int,
@pDescripcion varchar(40),
@pEmpresa_Id int = NULL,
@pInactivo Sino,
@pUsuario_Id int,
@pPosteado Sino
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM conCuadro1Filas WHERE (Cuadro1Fila_Id = @pCuadro1Fila_Id)))
BEGIN 
	UPDATE conCuadro1Filas
	SET		@lIdentidad = conCuadro1Filas,
		Cuadro1Fila_Id = @pCuadro1Fila_Id_Nuevo,
		Descripcion = @pDescripcion,
		Empresa_Id = @pEmpresa_Id,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (Cuadro1Fila_Id = @pCuadro1Fila_Id)
END 
ELSE 
BEGIN 
	INSERT INTO conCuadro1Filas
	(
		Cuadro1Fila_Id,
		Descripcion,
		Empresa_Id,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pCuadro1Fila_Id,
		@pDescripcion,
		@pEmpresa_Id,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE conCuadro1FilasDatos
GO
CREATE PROCEDURE conCuadro1FilasDatos
(
@pCuadro1Fila_Id int
)
AS
SET NOCOUNT ON 

SELECT conCuadro1Filas.conCuadro1Filas, conCuadro1Filas.Cuadro1Fila_Id, conCuadro1Filas.Descripcion, conCuadro1Filas.Empresa_Id,
	Cast( Case When conCuadro1Filas.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, conCuadro1Filas.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
	conCuadro1Filas.Posteado
FROM conCuadro1Filas 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = conCuadro1Filas.Usuario_Id)
WHERE (Cuadro1Fila_Id = @pCuadro1Fila_Id)
 


  Declare @pidentity bigint= dbo.FuncFKconCuadro1Filas(@pCuadro1Fila_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'conCuadro1Filas'
 RETURN @@Error 

GO

DROP PROCEDURE conCuadro1FilasEliminar
GO
CREATE PROCEDURE conCuadro1FilasEliminar
(
@pCuadro1Fila_Id int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM conCuadro1Filas 
WHERE (Cuadro1Fila_Id = @pCuadro1Fila_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKconCuadro1Filas
GO

CREATE FUNCTION FuncFKconCuadro1Filas
(
@pCuadro1Fila_Id int
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = conCuadro1Filas FROM conCuadro1Filas WHERE 
	Cuadro1Fila_Id = @pCuadro1Fila_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conCuentas.sql*/
DROP PROCEDURE conCuentasGuardar
GO
CREATE PROCEDURE conCuentasGuardar
(
@pCuenta_Id varchar(25),
@pCuenta_Id_Nuevo varchar(25),
@pEmpresa_Id int = NULL,
@pTipo_Id varchar(5) = NULL,
@pDescripcion varchar(80),
@pRubro_Id char(1) = NULL,
@pImputable bit,
@pNivel int,
@pBase_Id varchar(5) = NULL,
@pGrupo_Id varchar(5) = NULL,
@pCuadro1Fila_Id int = NULL,
@pReservadaPor varchar(3) = NULL,
@pFecha_Reserva qFecha,
@pSubCuenta_Id VarChar(24) = NULL,
@pNoSeReserva Sino,
@pRubro_Balance varchar(15) = NULL,
@pAjustable Sino,
@pNotas VarChar(max) = NULL,
@pMoneda_Id varchar(3) = NULL,
@pIndice_Id char(5) = NULL,
@pMetodo smallint,
@pEliminaConsolida Sino,
@pTipoSAT_Id varchar(25) = NULL,
@pNaturaleza Char(1), 
@pInactivo bit,
@pUsuario_Id int,
@pPosteado Sino, 
@pDescription VarChar(80), 
@pRubroAxi_Id int = NULL
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM conCuentas WHERE (Cuenta_Id = @pCuenta_Id)))
BEGIN 
	UPDATE conCuentas
	SET		@lIdentidad = conCuentas,
		Cuenta_Id = @pCuenta_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Tipo_Id = @pTipo_Id,
		Descripcion = @pDescripcion,
		Rubro_Id = @pRubro_Id,
		Imputable = @pImputable,
		Nivel = @pNivel,
		Base_Id = dbo.FuncFKconBaseDistri(@pBase_Id),
		Grupo_Id = dbo.FuncFKconGruposCont(@pGrupo_Id),
		Cuadro1Fila_Id = @pCuadro1Fila_Id,
		ReservadaPor = @pReservadaPor,
		Fecha_Reserva = @pFecha_Reserva,
		SubCuenta_Id = dbo.FuncFkconSubCuentas(@pSubCuenta_Id),
		NoSeReserva = @pNoSeReserva,
		Rubro_Balance = @pRubro_Balance,
		Ajustable = @pAjustable,
		Notas = @pNotas,
		Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id),
		Indice_Id = dbo.FuncFKconIndicesAjustes(@pIndice_Id),
		Metodo = @pMetodo,
		EliminaConsolida = @pEliminaConsolida,
		TipoSAT_Id = @pTipoSAT_Id,
		Naturaleza = @pNaturaleza,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado, 
		Description = @pDescription, 
		RubroAxi_Id = dbo.FuncFkconRubrosAxi(@pRubroAxi_Id)
	WHERE (Cuenta_Id = @pCuenta_Id)
END 
ELSE 
BEGIN 
	INSERT INTO conCuentas
	(
		Cuenta_Id,
		Empresa_Id,
		Tipo_Id,
		Descripcion,
		Rubro_Id,
		Imputable,
		Nivel,
		Base_Id,
		Grupo_Id,
		Cuadro1Fila_Id,
		ReservadaPor,
		Fecha_Reserva,
		SubCuenta_Id,
		NoSeReserva,
		Rubro_Balance,
		Ajustable,
		Notas,
		Moneda_Id,
		Indice_Id,
		Metodo,
		EliminaConsolida,
		TipoSAT_Id,
		Naturaleza,
		Inactivo,
		Usuario_Id,
		Posteado, 
		Description,
		RubroAxi_Id 
	)
	VALUES 
	(
		@pCuenta_Id,
		@pEmpresa_Id,
		@pTipo_Id,
		@pDescripcion,
		@pRubro_Id,
		@pImputable,
		@pNivel,
		dbo.FuncFKconBaseDistri(@pBase_Id),
		dbo.FuncFKconGruposCont(@pGrupo_Id),
		@pCuadro1Fila_Id,
		@pReservadaPor,
		@pFecha_Reserva,
		dbo.FuncFkconSubCuentas(@pSubCuenta_Id),
		@pNoSeReserva,
		@pRubro_Balance,
		@pAjustable,
		@pNotas,
		dbo.FuncFKgenMonedas(@pMoneda_Id),
		dbo.FuncFKconIndicesAjustes(@pIndice_Id),
		@pMetodo,
		@pEliminaConsolida,
		@pTipoSAT_Id,
		@pNaturaleza,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado, 
		@pDescription,
		dbo.FuncFkconRubrosAxi(@pRubroAxi_Id)
	)
	SET @lIdentidad =  Cast(SCOPE_IdENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE conCuentasDatos
GO
CREATE PROCEDURE conCuentasDatos(
@pCuenta_Id varchar (25)
)
AS
SELECT conCuentas.conCuentas, conCuentas.Cuenta_Id, conCuentas.Empresa_Id,
	Cast(case When conCuentas.Empresa_Id is null then 1 else 0 end  as bit) as PTodasEmpresas,
conTiposContables.Tipo_Id, conCuentas.Descripcion, 
conRubros.Rubro_Id, conCuentas.Imputable, 
conCuentas.Nivel, conBaseDistri.Base_Id, conGruposCont.Grupo_Id, 
conCuadro1Filas.Cuadro1Fila_Id, conCuentas.ReservadaPor, conCuentas.Fecha_Reserva, 
conSubCuentas.SubCuenta_Id, conCuentas.NoSeReserva, 
conSituPatri.Rubro_Balance, conCuentas.Ajustable, conCuentas.Notas, 
genMonedas.Moneda_Id, 
conIndicesAjustes.Indice_Id, conCuentas.Metodo, conCuentas.EliminaConsolida, 
conTiposSAT.TipoSAT_Id, conCuentas.Naturaleza, conCuentas.Inactivo, 
genUsuarios.Usuario_Id,  conCuentas.Posteado ,conBaseDistri.Descripcion as DescripcionconBaseDistri
 ,conCuadro1Filas.Descripcion as DescripcionconCuadro1Filas
 ,conGruposCont.Descripcion as DescripcionconGruposCont
 ,conRubros.Descripcion as DescripcionconRubros ,conSituPatri.Descripcion as DescripcionconSituPatri
 ,conSubCuentas.Descripcion as DescripcionconSubCuentas
 ,conTiposContables.Descripcion as DescripcionconTiposContables
 ,conTiposSAT.Descripcion as DescripcionconTiposSAT
 ,conIndicesAjustes.Descripcion as DescripcionIndicesAjustes
 ,genEmpresas.Detalle as DescripcionEmpresa ,genMonedas.Descripcion as DescripciongenMonedas
 ,genUsuarios.Apellido_y_Nombres as DescripcionUsuario, 
	conCuentas.Description, 
	conRubrosAxi.RubroAxi_Id, conRubrosAxi.Descripcion as DescripcionRubroAxi
 FROM conCuentas  
 LEFT OUTER JOIN conBaseDistri ON conBaseDistri.conBaseDistri=conCuentas.Base_Id
 LEFT OUTER JOIN conCuadro1Filas ON conCuadro1Filas.Cuadro1Fila_Id=conCuentas.Cuadro1Fila_Id
 LEFT OUTER JOIN conGruposCont ON conGruposCont.conGruposCont=conCuentas.Grupo_Id
 LEFT OUTER JOIN conRubros ON conRubros.Rubro_Id=conCuentas.Rubro_Id
 LEFT OUTER JOIN conSituPatri ON conSituPatri.Rubro_Balance=conCuentas.Rubro_Balance
 LEFT OUTER JOIN conSubCuentas ON conSubCuentas.conSubCuentas=conCuentas.SubCuenta_Id
 LEFT OUTER JOIN conTiposContables ON conTiposContables.Tipo_Id=conCuentas.Tipo_Id
 LEFT OUTER JOIN conTiposSAT ON conTiposSAT.TipoSAT_Id=conCuentas.TipoSAT_Id
 LEFT OUTER JOIN genEmpresas ON genEmpresas.genEmpresas=conCuentas.Empresa_Id
 LEFT OUTER JOIN genMonedas ON genMonedas.genMonedas=conCuentas.Moneda_Id
 INNER JOIN genUsuarios ON genUsuarios.genUsuarios=conCuentas.Usuario_Id
 LEFT OUTER JOIN conIndicesAjustes ON conIndicesAjustes.conIndicesAjuste = conCuentas.Indice_id
 LEFT OUTER JOIN conRubrosAxi ON conRubrosAxi.conRubrosAxi = conCuentas.RubroAxi_Id
 	
 Where 
	conCuentas.Cuenta_Id = @pCuenta_Id



GO


DROP PROCEDURE conCuentasActualizacionDatos
GO
CREATE PROCEDURE conCuentasActualizacionDatos(
@pCuenta_Id varchar (25), 
@pEmpresa_Id int
)
AS

DECLARE @pCuenta1 varCHAR(25)
DECLARE @pDigitos int

SELECT @pDigitos = conDigiCta FROM genInstalacion

set @pCuenta1 = LEFT(@pCuenta_Id, @pDigitos)+'%'


SELECT conCuentas.conCuentas, conCuentas.Cuenta_Id, conCuentas.Cuenta_Id as Cuenta_Id_Nueva, conCuentas.Empresa_Id,
	Cast(case When conCuentas.Empresa_Id is null then 1 else 0 end  as bit) as PTodasEmpresas,
conTiposContables.Tipo_Id, conCuentas.Descripcion, 
conRubros.Rubro_Id, conCuentas.Imputable, conRubros.Tipo as TipoRubro,
conCuentas.Nivel, conBaseDistri.Base_Id, conGruposCont.Grupo_Id, 
conCuadro1Filas.Cuadro1Fila_Id, conCuentas.ReservadaPor, conCuentas.Fecha_Reserva, 
conSubCuentas.SubCuenta_Id, conCuentas.NoSeReserva, 
conSituPatri.Rubro_Balance, conCuentas.Ajustable, conCuentas.Notas, 
genMonedas.Moneda_Id, 
conIndicesAjustes.Indice_Id, conCuentas.Metodo, conCuentas.EliminaConsolida, 
conTiposSAT.TipoSAT_Id, conCuentas.Naturaleza,  conCuentas.Inactivo, 
genUsuarios.Usuario_Id,  conCuentas.Posteado ,conBaseDistri.Descripcion as DescripcionconBaseDistri
 ,conCuadro1Filas.Descripcion as DescripcionconCuadro1Filas
 ,conGruposCont.Descripcion as DescripcionconGruposCont
 ,conRubros.Descripcion as DescripcionconRubros ,conSituPatri.Descripcion as DescripcionconSituPatri
 ,conSubCuentas.Descripcion as DescripcionconSubCuentas
 ,conTiposContables.Descripcion as DescripcionconTiposContables
 ,conTiposSAT.Descripcion as DescripcionconTiposSAT
 ,conIndicesAjustes.Descripcion as DescripcionIndicesAjustes
 ,genEmpresas.Detalle as DescripcionEmpresa ,genMonedas.Descripcion as DescripciongenMonedas
 ,genUsuarios.Apellido_y_Nombres as DescripcionUsuario, 
 LEFT(conCuentas.Cuenta_id,@pDigitos) as CuentaSC, conCuentasSinSC.Descripcion DescripcionSC,
 cast(0 as bit) as PorSubCuenta, conCuentas.Description, 
 conRubrosAxi.RubroAxi_Id, conRubrosAxi.Descripcion as DescripcionRubroAxi
 
 FROM conCuentas  
 LEFT OUTER JOIN conBaseDistri ON conBaseDistri.conBaseDistri=conCuentas.Base_Id
 LEFT OUTER JOIN conCuadro1Filas ON conCuadro1Filas.Cuadro1Fila_Id=conCuentas.Cuadro1Fila_Id
 LEFT OUTER JOIN conGruposCont ON conGruposCont.conGruposCont=conCuentas.Grupo_Id
 LEFT OUTER JOIN conRubros ON conRubros.Rubro_Id=conCuentas.Rubro_Id
 LEFT OUTER JOIN conSituPatri ON conSituPatri.Rubro_Balance=conCuentas.Rubro_Balance
 LEFT OUTER JOIN conSubCuentas ON conSubCuentas.conSubCuentas=conCuentas.SubCuenta_Id
 LEFT OUTER JOIN conTiposContables ON conTiposContables.Tipo_Id=conCuentas.Tipo_Id
 LEFT OUTER JOIN conTiposSAT ON conTiposSAT.TipoSAT_Id=conCuentas.TipoSAT_Id
 LEFT OUTER JOIN genEmpresas ON genEmpresas.genEmpresas=conCuentas.Empresa_Id
 LEFT OUTER JOIN genMonedas ON genMonedas.genMonedas=conCuentas.Moneda_Id
 INNER JOIN genUsuarios ON genUsuarios.genUsuarios=conCuentas.Usuario_Id
 LEFT OUTER JOIN conIndicesAjustes  ON conIndicesAjustes.conIndicesAjuste = conCuentas.Indice_id
 LEFT OUTER JOIN conCuentasSinSC ON conCuentasSinSC.Cuenta_id = conCuentas.conCuentas
 LEFT OUTER JOIN conRubrosAxi ON conRubrosAxi.conRubrosAxi = conCuentas.RubroAxi_Id
 Where conCuentas.Cuenta_Id = @pCuenta_Id


SELECT conSubCuentas.conSubCuentas, conSubCuentas.SubCuenta_Id, 
	conSubCuentas.Descripcion, 
		Cast(case when conCuentas.SubCuenta_Id is null then 0 else 1 end  as Bit) as Marca,
	conTiposSAT.TipoSAT_Id, conBaseDistri.Base_Id,
	conTiposSAT.Descripcion as DescripcionTipoSat ,
	conBaseDistri.Descripcion as  DescripcionBaseDistri,
	conCuentas.Inactivo, conGruposCont.Grupo_Id, conGruposCont.Descripcion as DescripcionGrupo
From conSubCuentas 
Left outer join conCuentas ON conCuentas.SubCuenta_Id = conSubCuentas.conSubCuentas and 
		conCuentas.Cuenta_Id like @pCuenta1
left outer join conBaseDistri on ISNULL(conCuentas.Base_Id, conSubCuentas.Base_Id) = conBaseDistri.conBaseDistri
left outer join conTiposSat ON conCuentas.TipoSat_Id = conTiposSat.TipoSat_Id 
left join conGruposCont on conGruposCont.conGruposCont=conCuentas.Grupo_Id
Where ISNULL(conSubCuentas.Empresa_id, @pEmpresa_id) = @pEmpresa_id and 
			conSubCuentas.Inactivo = 0
ORDER BY 2		
GO

DROP PROCEDURE conCuentasEliminar
GO
CREATE PROCEDURE conCuentasEliminar
(
@pCuenta_Id varchar(25) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM conCuentas 
WHERE (Cuenta_Id = @pCuenta_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKconCuentas
GO

CREATE FUNCTION FuncFKconCuentas
(
@pCuenta_Id varchar (25)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = conCuentas FROM conCuentas WHERE 
	Cuenta_Id = @pCuenta_Id
  RETURN @pIdentity
END


GO


drop procedure conCuentasSinSCGuardar
go
create procedure conCuentasSinSCGuardar
(
@pCuenta_Id varchar(25),
@pDescripcion varchar(80)
)
as
if(exists(select 1 from conCuentasSinSC where Cuenta_Id=dbo.FuncFKconCuentas( @pCuenta_Id)))
begin
update conCuentasSinSC set Descripcion=@pDescripcion
where Cuenta_Id=dbo.FuncFKconCuentas( @pCuenta_Id)
end
else
begin
insert into conCuentasSinSC values(dbo.FuncFKconCuentas(@pCuenta_Id), @pDescripcion)
end
go
drop procedure conCuentasSinSCDatos
go
create procedure conCuentasSinSCDatos
(
@pCuenta_Id varchar(25)
)
aS
select conCuentas.Cuenta_Id, conCuentasSinSC.Descripcion 
from conCuentasSinSC inner join conCuentas on conCuentasSinSC.Cuenta_Id=conCuentas.conCuentas
where conCuentas.Cuenta_Id=@pCuenta_Id

go

drop procedure conCuentasSinSCEliminar
go
create procedure conCuentasSinSCEliminar
(
@pCuenta_Id varchar(25)
)
AS
delete from conCuentasSinSC where Cuenta_Id = dbo.FuncFKconCuentas(@pCuenta_Id)

go


Drop Procedure conCuentasCuentasDatos
GO
create procedure conCuentasCuentasDatos
AS
SELECT COUNT(1) as Cantidad FROM concuentas

go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conEjercicio.sql*/
DROP PROCEDURE conEjercicioGuardar
GO
CREATE PROCEDURE conEjercicioGuardar
(
@pEjercicio smallint,
@pFecha qFecha,
@pUsuario_Id int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM conEjercicio WHERE (Ejercicio = @pEjercicio)))
BEGIN 
	UPDATE conEjercicio
	SET		Fecha = @pFecha,
		Usuario_Id = @pUsuario_Id
	WHERE (Ejercicio = @pEjercicio)
END 
ELSE 
BEGIN 
	INSERT INTO conEjercicio
	(
		Ejercicio,
		Fecha,
		Usuario_Id
	)
	VALUES 
	(
		@pEjercicio,
		@pFecha,
		@pUsuario_Id
	)
END 

GO

DROP PROCEDURE conEjercicioDatos
GO
CREATE PROCEDURE conEjercicioDatos
(
@pEjercicio smallint
)
AS
SET NOCOUNT ON 

SELECT conEjercicio.Ejercicio, conEjercicio.Fecha, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario
FROM conEjercicio 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = conEjercicio.Usuario_Id)
WHERE (Ejercicio = @pEjercicio)
 
 RETURN @@Error 

GO

DROP PROCEDURE conEjercicioEliminar
GO
CREATE PROCEDURE conEjercicioEliminar
(
@pEjercicio smallint
)
AS
SET NOCOUNT ON 

DELETE FROM conEjercicio 
WHERE Ejercicio = @pEjercicio 
 
 RETURN @@Error 

GO
DROP PROCEDURE conEjercicioPeriodoDatos
GO
CREATE PROCEDURE conEjercicioPeriodoDatos
(
@pEjercicio smallint, 
@pEmpresa Int
)
AS
SET NOCOUNT ON 

SELECT conEjercicio.Ejercicio, conEjercicio.Fecha, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario
FROM conEjercicio 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = conEjercicio.Usuario_Id)
WHERE (Ejercicio = @pEjercicio)


SELECT conPeriodos.Ejercicio, conPeriodos.Periodo, 
	conPeriodos.Fecha_Desde, conPeriodos.Fecha_Hasta, conPeriodos.Estado
	 from conPeriodos 
	 Where
		conPeriodos.Empresa_Id = @pEmpresa and
		conPeriodos.Ejercicio = @pEjercicio
 
RETURN @@Error 

GO





Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conFechasCierres.sql*/
drop procedure conFechasCierres
go
create procedure conFechasCierres
(
@pEmpresa_Id int
)
as
-- FALTA PRODUCCION Y SUELDOS	
select FechaCierreCompras,FechaCierreImpuestos,FechaCierreTesoreria,
	FechaCierreStock,FechaCierreVentas , FechaCierreActivoFijo, FechaCierreSueldos
	From genEmpresas where genEmpresas=@pEmpresa_Id
go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conGrupoCentro.sql*/
Drop Procedure conGrupoCentroGuardar
GO
Create Procedure conGrupoCentroGuardar
(
@pGrupo_Id varchar(5), 
@pCentro1_id varchar(8), 
@pCentro2_id varchar(8) 
) 
AS 
SET NOCOUNT ON  
	INSERT INTO  conGrupoCentro
	(Grupo_Id , 
	Centro1_Id , 
	Centro2_Id ) 
	Values 
	(dbo.FuncFKconGruposCont(@pGrupo_Id) , 
	dbo.FuncFKconCentro1(@pCentro1_Id) , 
	dbo.FuncFKconCentro2(@pCentro2_Id) ) 
RETURN @@Error 

GO
Drop Procedure conGrupoCentroDatos
GO
CREATE PROCEDURE conGrupoCentroDatos(
@pGrupo_Id int,
@pCentro1_Id VarChar(8)=null,
@pCentro2_Id VarChar(8)=null
)
AS
SELECT conGruposCont.conGruposCont,  conGruposCont.Grupo_Id, conCentro1.Centro1_Id, conCentro2.Centro2_Id ,
	conCentro1.Descripcion as DescripcionconCentro1 ,
	conCentro2.Descripcion as DescripcionconCentro2
 FROM conGrupoCentro  INNER JOIN conCentro1
	ON conCentro1.conCentro1=conGrupoCentro.Centro1_Id
 INNER JOIN conCentro2
	ON conCentro2.conCentro2=conGrupoCentro.Centro2_Id
 INNER JOIN conGruposCont
	ON conGruposCont.conGruposCont=conGrupoCentro.Grupo_Id
 Where 
	conGrupoCentro.Grupo_Id = @pGrupo_Id and 
	conCentro1.Centro1_Id = ISNULL(@pCentro1_Id,conCentro1.Centro1_Id) and 
	conCentro2.Centro2_Id = ISNULL(@pCentro2_Id, conCentro2.Centro2_Id)

GO
Drop Procedure conGrupoCentroEliminar
GO
Create Procedure conGrupoCentroEliminar(
@pGrupo_Id int, 
@pCentro1_Id VarChar(8)=null,
@pCentro2_Id VarChar(8)=null 
) 
AS 
SET NOCOUNT ON  
DELETE FROM conGrupoCentro 
	 Where 
	conGrupoCentro.Grupo_Id = @pGrupo_Id and 
	conGrupoCentro.Centro1_Id = isnull(dbo.FuncFKconCentro1(@pCentro1_Id), conGrupoCentro.Centro1_Id) and 
	conGrupoCentro.Centro2_Id = ISNULL(dbo.FuncFKconCentro1(@pCentro2_Id), conGrupoCentro.Centro2_Id)
 
 RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conGruposCont.sql*/
Drop Procedure conGruposContGuardar
GO
CREATE PROCEDURE conGruposContGuardar
(
@pGrupo_Id varchar(5),
@pGrupo_Id_Nuevo varchar(5),
@pEmpresa_Id int,
@pDescripcion varchar(35),
@pInactivo Sino,
@pUsuario_Id int,
@pPosteado Sino
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM conGruposCont WHERE 
(Grupo_Id = @pGrupo_Id
)))
BEGIN 
		UPDATE conGruposCont
		SET	@lIdentidad = conGruposCont,
			Grupo_Id = @pGrupo_Id_Nuevo,
			Empresa_Id = @pEmpresa_Id,
			Descripcion = @pDescripcion,
			Inactivo = @pInactivo,
			Usuario_Id = @pUsuario_Id,
			Posteado = @pPosteado
		WHERE Grupo_Id = @pGrupo_Id
END 
ELSE 
BEGIN 
	INSERT INTO conGruposCont
	(   Grupo_Id,
		Empresa_Id,
		Descripcion,
		Inactivo,
		Usuario_Id,
		Posteado )
	VALUES 
	(	@pGrupo_Id,
		@pEmpresa_Id,
		@pDescripcion,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int)	
END 
Select @lIdentidad as RetVal 


GO
Drop Procedure conGruposContDatos
GO
CREATE PROCEDURE conGruposContDatos(
@pGrupo_Id varchar (5)
)
AS
DECLARE @pIdentidad INT 

set @pIdentidad= (SELECT conGruposCont FROM conGruposCont WHERE 
	conGruposCont.Grupo_Id = @pGrupo_Id)

SELECT conGruposCont.conGruposCont, conGruposCont.Grupo_Id, conGruposCont.Empresa_Id, Cast( Case When conGruposCont.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	conGruposCont.Descripcion, conGruposCont.Inactivo, genUsuarios.Usuario_Id, 
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario, conGruposCont.Posteado
FROM conGruposCont 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = conGruposCont.Usuario_Id)
WHERE (Grupo_Id = @pGrupo_Id)


Execute conGrupoCentroDatos @pIdentidad, null, null
Exec genAtributosGeneralesIdentityDatos @pIdentidad, 'conGruposCont'

GO
Drop Procedure conGruposContEliminar
GO
Create Procedure conGruposContEliminar(
@pGrupo_Id varchar (5)
 
) 
AS 
SET NOCOUNT ON  
DELETE FROM conGruposCont 
	 Where 
	conGruposCont.Grupo_Id = @pGrupo_Id
 
 RETURN @@Error 

GO

Drop Function FuncFKconGruposCont
GO

Create Function FuncFKconGruposCont
(
@pGrupo_Id varchar (5)
)
Returns int

As
Begin
  Declare @pIdentity int
  Select @pIdentity = conGruposCont From conGruposCont Where 
	Grupo_Id = @pGrupo_Id
  Return @pIdentity
End


GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conIndAjus.sql*/

--exec conIndAjusDatos 'INPC',2019,1
drop procedure conIndAjusDatos
go
create procedure conIndAjusDatos
(
@pIndice_Id varchar(5),
@pEjercicio smallint,
@pEmpresa_Id int
)
as
set nocount on
select conIndicesAjustes.Indice_Id, Descripcion, @pEjercicio as Ejercicio 
from conIndicesAjustes
where conIndicesAjustes.Indice_Id=@pIndice_Id

select conIndicesAjustes.Indice_Id, conIndAjusCuerpo.Indice, conPeriodos.Ejercicio, conPeriodos.Periodo,
conPeriodos.Empresa_Id, genEmpresas.Detalle as DescripcionEmpresa 
from conPeriodos left join 
	(conIndAjusCuerpo inner join conIndicesAjustes on 
		conIndicesAjustes.conIndicesAjuste=conIndAjusCuerpo.Indice_Id AND 
		conIndicesAjustes.Indice_Id=@pIndice_Id) ON 
conPeriodos.Periodo=conIndAjusCuerpo.Periodo AND 
conPeriodos.Ejercicio = conIndAjusCuerpo.Ejercicio 
inner join genEmpresas on genEmpresas.genEmpresas=conPeriodos.Empresa_Id
Where conPeriodos.Empresa_Id=@pEmpresa_Id and 
	  conPeriodos.Ejercicio=@pEjercicio 
	  
go


drop procedure conIndAjusGuardar
go
create procedure conIndAjusGuardar
(
@pIndice_Id varchar(5),
@pDescripcion varchar(50),
@pIndice qMonedaD4,
@pEjercicio smallint,
@pEmpresa int,
@pPeriodo smallint
)
as
set nocount on
if(exists(select 1 from conIndicesAjustes where Indice_Id=@pIndice_Id) )
begin
update conIndicesAjustes set Descripcion=@pDescripcion
end
else
begin
insert into conIndicesAjustes (Indice_Id, Descripcion)
values (@pIndice_Id, @pDescripcion)
end
if(exists(select 1 from conIndAjusCuerpo where Indice_Id=dbo.FuncFKconIndicesAjustes(@pIndice_Id) and
Empresa_Id=@pEmpresa and conIndAjusCuerpo.Ejercicio=@pEjercicio and conIndAjusCuerpo.Periodo=@pPeriodo))
BEGIN
update conIndAjusCuerpo set 
Indice=@pIndice where Indice_Id=dbo.FuncFKconIndicesAjustes(@pIndice_Id) and
Empresa_Id=@pEmpresa and conIndAjusCuerpo.Ejercicio=@pEjercicio and Periodo=@pPeriodo
end
else
begin
insert into conIndAjusCuerpo (Indice_Id,Indice,Ejercicio,Periodo,Empresa_Id)
values (dbo.FuncFKconIndicesAjustes(@pIndice_Id),@pIndice,@pEjercicio,@pPeriodo,@pEmpresa)
end
go

drop procedure conIndAjusEliminar
go
create procedure conIndAjusEliminar
(
@pIndice_Id varchar(5),
@pEjercicio smallint=null,
@pEmpresa int
)
as set nocount on
delete from conIndAjusCuerpo where Indice_Id=dbo.FuncFKconIndicesAjustes(@pIndice_Id) and
Ejercicio=isnull(@pEjercicio,Ejercicio) and Empresa_Id=isnull(@pEmpresa,Empresa_Id)
go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conIndicesAjuste.sql*/
DROP PROCEDURE conIndicesAjustesGuardar
GO
CREATE PROCEDURE conIndicesAjustesGuardar
(
@pIndice_Id varchar(5),
@pIndice_Id_Nuevo varchar(5),
@pDescripcion varchar(50)
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM conIndicesAjustes WHERE (Indice_Id = @pIndice_Id)))
BEGIN 
	UPDATE conIndicesAjustes
	SET		@lIdentidad = conIndicesAjuste,
		Indice_Id = @pIndice_Id_Nuevo,
		Descripcion = @pDescripcion
	WHERE (Indice_Id = @pIndice_Id)
END 
ELSE 
BEGIN 
	INSERT INTO conIndicesAjustes
	(
		Indice_Id,
		Descripcion
	)
	VALUES 
	(
		@pIndice_Id,
		@pDescripcion
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE conIndicesAjustesDatos
GO
CREATE PROCEDURE conIndicesAjustesDatos
(
@pIndice_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT conIndicesAjustes.conIndicesAjuste, conIndicesAjustes.Indice_Id, conIndicesAjustes.Descripcion
FROM conIndicesAjustes 
WHERE (Indice_Id = @pIndice_Id)
 


  Declare @pidentity bigint= dbo.FuncFKconIndicesAjustes(@pIndice_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'conIndicesAjustes'
 RETURN @@Error 

GO

DROP PROCEDURE conIndicesAjustesEliminar
GO
CREATE PROCEDURE conIndicesAjustesEliminar
(
@pIndice_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM conIndicesAjustes 
WHERE (Indice_Id = @pIndice_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKconIndicesAjustes
GO

CREATE FUNCTION FuncFKconIndicesAjustes
(
@pIndice_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = conIndicesAjuste FROM conIndicesAjustes WHERE 
	Indice_Id = @pIndice_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conInfDefCuentas.sql*/
DROP PROCEDURE conInfDefCuentasInsertar
GO
CREATE PROCEDURE conInfDefCuentasInsertar
(
@pInforme_Id int,
@pFila int,
@pCuentaDesde varchar(25),
@pCuentaHasta varchar(25)
)
AS
BEGIN 
	INSERT INTO conInfDefCuentas
	(
		Informe_Id,
		Fila,
		CuentaDesde,
		CuentaHasta
	)
	VALUES 
	(
		@pInforme_Id,
		@pFila,
		@pCuentaDesde,
		@pCuentaHasta
	)
END 

GO

DROP PROCEDURE conInfDefCuentasDatos
GO
CREATE PROCEDURE conInfDefCuentasDatos
(
@pInforme_Id VarChar(15),
@pFila int = NULL,
@pCuentaDesde varchar(25)= NULL
)
AS
SET NOCOUNT ON 

SELECT conInfDefinibles.Informe_Id, conInfDefCuentas.Fila,  conInfDefCuentas.CuentaDesde, conInfDefCuentas.CuentaHasta,
	conInfDefinibles.conInfDefinibles
FROM conInfDefCuentas 
	INNER JOIN conInfDefinibles ON  conInfDefinibles.conInfDefinibles = conInfDefCuentas.Informe_Id
WHERE 
conInfDefinibles.Informe_Id = @pInforme_Id
AND Fila = ISNULL(@pFila,Fila)
AND CuentaDesde = ISNULL(@pCuentaDesde,CuentaDesde)
 
RETURN @@Error 

GO

DROP PROCEDURE conInfDefCuentasEliminar
GO
CREATE PROCEDURE conInfDefCuentasEliminar
(
@pInforme_Id varchar(15),
@pFila int = null,
@pCuentaDesde varchar(25) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM conInfDefCuentas 
WHERE  
(Informe_Id = dbo.FuncFKconInfDefinibles(@pInforme_Id))
AND Fila = ISNULL(@pFila,Fila)
AND CuentaDesde = ISNULL(@pCuentaDesde,CuentaDesde)
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conInfDefFilas.sql*/
DROP PROCEDURE conInfDefFilasInsertar
GO
CREATE PROCEDURE conInfDefFilasInsertar
(
@pInforme_Id int,
@pFila int,
@pNivel int,
@pTitulo VarChar(100),
@pTipo char(2),
@pFuente char(1),
@pInvierteSigno Sino,
@pCentro1Desde varchar(8),
@pCentro1Hasta varchar(8),
@pCentro2Desde varchar(8),
@pCentro2Hasta varchar(8)
)
AS
SET NOCOUNT ON 
	INSERT INTO conInfDefFilas
	(
		Informe_Id,
		Fila,
		Nivel,
		Titulo,
		Tipo,
		Fuente,
		InvierteSigno,
		Centro1Desde,
		Centro1Hasta,
		Centro2Desde,
		Centro2Hasta
	)
	VALUES 
	(
		@pInforme_Id,
		@pFila,
		@pNivel,
		@pTitulo,
		@pTipo,
		@pFuente,
		@pInvierteSigno,
		@pCentro1Desde,
		@pCentro1Hasta,
		@pCentro2Desde,
		@pCentro2Hasta
	)
GO

DROP PROCEDURE conInfDefFilasDatos
GO
CREATE PROCEDURE conInfDefFilasDatos
(
@pInforme_Id VarChar(15),
@pFila int = NULL
)
AS
SET NOCOUNT ON 

SELECT conInfDefinibles.Informe_Id, conInfDefFilas.Fila, conInfDefFilas.Nivel,
	conInfDefFilas.Titulo, 
	conInfDefFilas.Tipo, conInfDefFilas.Fuente, conInfDefFilas.InvierteSigno, conInfDefFilas.Centro1Desde,
	conInfDefFilas.Centro1Hasta, conInfDefFilas.Centro2Desde, conInfDefFilas.Centro2Hasta, 
	conInfDefinibles.conInfDefinibles, conInfDefFilas.Fila as FilaMan
FROM conInfDefFilas 
INNER JOIN conInfDefinibles  ON (conInfDefinibles.conInfDefinibles = conInfDefFilas.Informe_Id)
WHERE conInfDefinibles.Informe_Id = @pInforme_Id
AND Fila = ISNULL(@pFila,Fila)
 
 RETURN @@Error 

GO

DROP PROCEDURE conInfDefFilasEliminar
GO
CREATE PROCEDURE conInfDefFilasEliminar
(
@pInforme_Id varchar(15),
@pFila int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM conInfDefFilas 
WHERE (Informe_Id = dbo.FuncFKconInfDefinibles(@pInforme_Id))
AND (Fila = ISNULL(@pFila, Fila))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conInfDefinibles.sql*/
DROP PROCEDURE conInfDefiniblesGuardar
GO
CREATE PROCEDURE conInfDefiniblesGuardar
(
@pInforme_Id varchar(15),
@pInforme_Id_Nuevo varchar(15),
@pDescripcion varchar(80),
@pUsuario_Id int ,
@pEmpresa_Id int = NULL,
@pInactivo Sino,
@pPosteado Sino
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM conInfDefinibles WHERE (Informe_Id = @pInforme_Id)))
BEGIN 
	UPDATE conInfDefinibles
	SET		@lIdentidad = conInfDefinibles,
		Informe_Id = @pInforme_Id_Nuevo,
		Descripcion = @pDescripcion,
		Usuario_Id = @pUsuario_Id,
		Empresa_Id = @pEmpresa_Id,
		Inactivo = @pInactivo,
		Posteado = @pPosteado
	WHERE (Informe_Id = @pInforme_Id)
END 
ELSE 
BEGIN 
	INSERT INTO conInfDefinibles
	(
		Informe_Id,
		Descripcion,
		Usuario_Id,
		Empresa_Id,
		Inactivo,
		Posteado
	)
	VALUES 
	(
		@pInforme_Id,
		@pDescripcion,
		@pUsuario_Id,
		@pEmpresa_Id,
		@pInactivo,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE conInfDefiniblesDatos
GO
CREATE PROCEDURE conInfDefiniblesDatos
(
@pInforme_Id varchar(15)
)
AS
SET NOCOUNT ON 

SELECT conInfDefinibles.conInfDefinibles, conInfDefinibles.Informe_Id, conInfDefinibles.Descripcion, genUsuarios.Usuario_Id,
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario, conInfDefinibles.Informe_Id Informe_Id_Nueva, conInfDefinibles.Empresa_Id, Cast( Case When conInfDefinibles.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	conInfDefinibles.Inactivo, conInfDefinibles.Posteado
FROM conInfDefinibles 
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = conInfDefinibles.Usuario_Id)
WHERE (Informe_Id = @pInforme_Id)
 
 Exec  conInfDefFilasDatos @pInforme_Id, NULL
 Exec  conInfDefCuentasDatos @pInforme_Id, NULL

 Declare @pidentity bigint= dbo.FuncFKconInfDefinibles(@pInforme_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'conInfDefinibles'
 RETURN @@Error 

GO

DROP PROCEDURE conInfDefiniblesEliminar
GO
CREATE PROCEDURE conInfDefiniblesEliminar
(
@pInforme_Id varchar(15) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM conInfDefinibles 
WHERE (Informe_Id = @pInforme_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKconInfDefinibles
GO

CREATE FUNCTION FuncFKconInfDefinibles
(
@pInforme_Id varchar (15)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = conInfDefinibles FROM conInfDefinibles WHERE 
	Informe_Id = @pInforme_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conInfDefiniblesGenerar.sql*/
-- conInfDefiniblesMenGenerar 'ANRES',2021,4,' ','ZZZZ',' ','ZZZ',1
-- conInfDefiniblesAcuGenerar 'ER',2019,8,' ','ZZZZ',' ','ZZZ',1
-- conInfDefiniblesAcu1Generar 'ER',2019,9,' ','ZZZZ',' ','ZZZ',1
-- conInfDefiniblesCabecera 'ER',2019,9,' ','ZZZZ',' ','ZZZ',1


DROP PROCEDURE conInfDefiniblesCabecera
GO
CREATE PROCEDURE conInfDefiniblesCabecera
(
	@Informe_Id VarChar(15),
	@Ejercicio Int,
	@PeriodoHasta Int,
	@Centro1Desde VarChar(8),
	@Centro1Hasta VarChar(8),
	@Centro2Desde VarChar(8),
	@Centro2Hasta VarChar(8),
	@Empresa_Id Int
)
AS


SELECT conInfDefinibles.Descripcion, 
	(SELECT LEFT(DateName(MONTH,Fecha_Desde),3)+' '+
		Substring(DateName(Year, Fecha_Desde),3,2) 
		FROM conPeriodos where
		conPeriodos.Ejercicio = @Ejercicio and 
		conPeriodos.Empresa_Id = @Empresa_Id and
		conPeriodos.Periodo = 1)   as Per01,
		(SELECT LEFT(DateName(MONTH,Fecha_Desde),3)+' '+
		Substring(DateName(Year, Fecha_Desde),3,2) 
		FROM conPeriodos where
		conPeriodos.Ejercicio = @Ejercicio and 
		conPeriodos.Empresa_Id = @Empresa_Id and
		conPeriodos.Periodo = 2)   as Per02,
		(SELECT LEFT(DateName(MONTH,Fecha_Desde),3)+' '+
		Substring(DateName(Year, Fecha_Desde),3,2) 
		FROM conPeriodos where
		conPeriodos.Ejercicio = @Ejercicio and 
		conPeriodos.Empresa_Id = @Empresa_Id and
		conPeriodos.Periodo = 3)   as Per03,
		(SELECT LEFT(DateName(MONTH,Fecha_Desde),3)+' '+
		Substring(DateName(Year, Fecha_Desde),3,2) 
		FROM conPeriodos where
		conPeriodos.Ejercicio = @Ejercicio and 
		conPeriodos.Empresa_Id = @Empresa_Id and
		conPeriodos.Periodo = 4)   as Per04,
		(SELECT LEFT(DateName(MONTH,Fecha_Desde),3)+' '+
		Substring(DateName(Year, Fecha_Desde),3,2) 
		FROM conPeriodos where
		conPeriodos.Ejercicio = @Ejercicio and 
		conPeriodos.Empresa_Id = @Empresa_Id and
		conPeriodos.Periodo = 5)   as Per05,
		(SELECT LEFT(DateName(MONTH,Fecha_Desde),3)+' '+
		Substring(DateName(Year, Fecha_Desde),3,2) 
		FROM conPeriodos where
		conPeriodos.Ejercicio = @Ejercicio and 
		conPeriodos.Empresa_Id = @Empresa_Id and
		conPeriodos.Periodo = 6)   as Per06,
		(SELECT LEFT(DateName(MONTH,Fecha_Desde),3)+' '+
		Substring(DateName(Year, Fecha_Desde),3,2) 
		FROM conPeriodos where
		conPeriodos.Ejercicio = @Ejercicio and 
		conPeriodos.Empresa_Id = @Empresa_Id and
		conPeriodos.Periodo = 7)   as Per07,
		(SELECT LEFT(DateName(MONTH,Fecha_Desde),3)+' '+
		Substring(DateName(Year, Fecha_Desde),3,2) 
		FROM conPeriodos where
		conPeriodos.Ejercicio = @Ejercicio and 
		conPeriodos.Empresa_Id = @Empresa_Id and
		conPeriodos.Periodo = 8)   as Per08,
		(SELECT LEFT(DateName(MONTH,Fecha_Desde),3)+' '+
		Substring(DateName(Year, Fecha_Desde),3,2) 
		FROM conPeriodos where
		conPeriodos.Ejercicio = @Ejercicio and 
		conPeriodos.Empresa_Id = @Empresa_Id and
		conPeriodos.Periodo = 9)   as Per09,
		(SELECT LEFT(DateName(MONTH,Fecha_Desde),3)+' '+
		Substring(DateName(Year, Fecha_Desde),3,2) 
		FROM conPeriodos where
		conPeriodos.Ejercicio = @Ejercicio and 
		conPeriodos.Empresa_Id = @Empresa_Id and
		conPeriodos.Periodo = 10)   as Per10,
		(SELECT LEFT(DateName(MONTH,Fecha_Desde),3)+' '+
		Substring(DateName(Year, Fecha_Desde),3,2) 
		FROM conPeriodos where
		conPeriodos.Ejercicio = @Ejercicio and 
		conPeriodos.Empresa_Id = @Empresa_Id and
		conPeriodos.Periodo = 11)   as Per11,
		(SELECT LEFT(DateName(MONTH,Fecha_Desde),3)+' '+
		Substring(DateName(Year, Fecha_Desde),3,2) 
		FROM conPeriodos where
		conPeriodos.Ejercicio = @Ejercicio and 
		conPeriodos.Empresa_Id = @Empresa_Id and
		conPeriodos.Periodo = 12)   as Per12,
		'Audit' Per13, 
		0.00 as Total,
		(SELECT Fecha_Hasta FROM conPeriodos where
		conPeriodos.Ejercicio = @Ejercicio and 
		conPeriodos.Empresa_Id = @Empresa_Id and
		conPeriodos.Periodo = @PeriodoHasta) FechaHasta, 
		conInfDefinibles.Informe_Id, @Ejercicio as Ejercicio, @PeriodoHasta as PeriodoHasta, 
		@Centro1Desde as Centro1Desde, @Centro1Hasta as Centro1Hasta, 
		@Centro2Desde as Centro2Desde, @Centro2Hasta as Centro2Hasta
	from conInfDefinibles 
where Informe_Id= @Informe_Id
GO



DROP PROCEDURE conInfDefiniblesMenGenerar
GO
CREATE PROCEDURE conInfDefiniblesMenGenerar
(
	@Informe_Id VarChar(15),
	@Ejercicio Int,
	@PeriodoHasta Int,
	@Centro1Desde VarChar(8),
	@Centro1Hasta VarChar(8),
	@Centro2Desde VarChar(8),
	@Centro2Hasta VarChar(8),
	@Empresa_Id Int
)
AS


select conPeriodos.Ejercicio, conPeriodos.Periodo, vconMovcontRes.* into #TbG 
from vconMovcontRes 
	INNER JOIN conPeriodos ON vconMovcontRes.Fecha between  conPeriodos.Fecha_Desde AND conPeriodos.Fecha_Hasta and 
		conPeriodos.Empresa_Id = vconMovcontRes.Empresa_Id
	where 
		vconMovContRes.Especial NOT IN ('CIR','CCP') AND 
		conPeriodos.Ejercicio = @Ejercicio and 
		conPeriodos.Periodo <= @PeriodoHasta and 
		conPeriodos.Empresa_id = @Empresa_Id and 
		Centro1_Id between @Centro1Desde and @Centro1Hasta and 
		Centro2_Id between @Centro2Desde and @Centro2Hasta 


SELECT conInfDefFilas.Fila, conInfDefFilas.Tipo, conInfDefFilas.Nivel, 
	conInfDefFilas.Titulo, conInfDefFilas.InvierteSigno, 
	conInfDefFilas.Fuente, 
	ISNULL((SELECT SUM(#TbG.Debe-#TbG.Haber) 
		from
			#TbG 	INNER JOIN conCuentas ON conCuentas.conCuentas = #TbG.conCuentas
			INNER JOIN conInfDefCuentas ON
				conInfDefCuentas.Informe_Id = conInfDefFilas.Informe_Id and 
				conInfDefCuentas.Fila = conInfDefFilas.Fila and 
				conCuentas.Cuenta_Id Between conInfDefCuentas.CuentaDesde and conInfDefCuentas.CuentaHasta and 
				#TbG.Centro1_Id Between conInfDefFilas.Centro1Desde and conInfDefFilas.Centro1Hasta and 
				#TbG.Centro2_Id Between conInfDefFilas.Centro2Desde and conInfDefFilas.Centro2Hasta 
			WHERE
				#TbG.Ejercicio = @Ejercicio and 
				#TbG.Periodo = 1 ),0) as Per01,

ISNULL((SELECT SUM(#TbG.Debe-#TbG.Haber) 
		from
			#TbG 	INNER JOIN conCuentas ON conCuentas.conCuentas = #TbG.conCuentas
			INNER JOIN conInfDefCuentas ON
				conInfDefCuentas.Informe_Id = conInfDefFilas.Informe_Id and 
				conInfDefCuentas.Fila = conInfDefFilas.Fila and 
				conCuentas.Cuenta_Id Between conInfDefCuentas.CuentaDesde and conInfDefCuentas.CuentaHasta and 
				#TbG.Centro1_Id Between conInfDefFilas.Centro1Desde and conInfDefFilas.Centro1Hasta and 
				#TbG.Centro2_Id Between conInfDefFilas.Centro2Desde and conInfDefFilas.Centro2Hasta 
			WHERE
				#TbG.Ejercicio = @Ejercicio and 
				#TbG.Periodo = 2 ),0) as Per02,
ISNULL((SELECT SUM(#TbG.Debe-#TbG.Haber) 
		from
			#TbG 	INNER JOIN conCuentas ON conCuentas.conCuentas = #TbG.conCuentas
			INNER JOIN conInfDefCuentas ON
				conInfDefCuentas.Informe_Id = conInfDefFilas.Informe_Id and 
				conInfDefCuentas.Fila = conInfDefFilas.Fila and 
				conCuentas.Cuenta_Id Between conInfDefCuentas.CuentaDesde and conInfDefCuentas.CuentaHasta and 
				#TbG.Centro1_Id Between conInfDefFilas.Centro1Desde and conInfDefFilas.Centro1Hasta and 
				#TbG.Centro2_Id Between conInfDefFilas.Centro2Desde and conInfDefFilas.Centro2Hasta 
			WHERE
				#TbG.Ejercicio = @Ejercicio and 
				#TbG.Periodo = 3 ),0) as Per03,
	ISNULL((SELECT SUM(#TbG.Debe-#TbG.Haber) 
		from
			#TbG 	INNER JOIN conCuentas ON conCuentas.conCuentas = #TbG.conCuentas
			INNER JOIN conInfDefCuentas ON
				conInfDefCuentas.Informe_Id = conInfDefFilas.Informe_Id and 
				conInfDefCuentas.Fila = conInfDefFilas.Fila and 
				conCuentas.Cuenta_Id Between conInfDefCuentas.CuentaDesde and conInfDefCuentas.CuentaHasta and 
				#TbG.Centro1_Id Between conInfDefFilas.Centro1Desde and conInfDefFilas.Centro1Hasta and 
				#TbG.Centro2_Id Between conInfDefFilas.Centro2Desde and conInfDefFilas.Centro2Hasta 
			WHERE
				#TbG.Ejercicio = @Ejercicio and 
				#TbG.Periodo = 3 ),0) as Per04,

	ISNULL((SELECT SUM(#TbG.Debe-#TbG.Haber) 
		from
			#TbG 	INNER JOIN conCuentas ON conCuentas.conCuentas = #TbG.conCuentas
			INNER JOIN conInfDefCuentas ON
				conInfDefCuentas.Informe_Id = conInfDefFilas.Informe_Id and 
				conInfDefCuentas.Fila = conInfDefFilas.Fila and 
				conCuentas.Cuenta_Id Between conInfDefCuentas.CuentaDesde and conInfDefCuentas.CuentaHasta and 
				#TbG.Centro1_Id Between conInfDefFilas.Centro1Desde and conInfDefFilas.Centro1Hasta and 
				#TbG.Centro2_Id Between conInfDefFilas.Centro2Desde and conInfDefFilas.Centro2Hasta 
			WHERE
				#TbG.Ejercicio = @Ejercicio and 
				#TbG.Periodo = 3 ),0) as Per05,
				ISNULL((SELECT SUM(#TbG.Debe-#TbG.Haber) 
		from
			#TbG 	INNER JOIN conCuentas ON conCuentas.conCuentas = #TbG.conCuentas
			INNER JOIN conInfDefCuentas ON
				conInfDefCuentas.Informe_Id = conInfDefFilas.Informe_Id and 
				conInfDefCuentas.Fila = conInfDefFilas.Fila and 
				conCuentas.Cuenta_Id Between conInfDefCuentas.CuentaDesde and conInfDefCuentas.CuentaHasta and 
				#TbG.Centro1_Id Between conInfDefFilas.Centro1Desde and conInfDefFilas.Centro1Hasta and 
				#TbG.Centro2_Id Between conInfDefFilas.Centro2Desde and conInfDefFilas.Centro2Hasta 
			WHERE
				#TbG.Ejercicio = @Ejercicio and 
				#TbG.Periodo = 6 ),0)  as Per06,
				ISNULL((SELECT SUM(#TbG.Debe-#TbG.Haber) 
		from
			#TbG 	INNER JOIN conCuentas ON conCuentas.conCuentas = #TbG.conCuentas
			INNER JOIN conInfDefCuentas ON
				conInfDefCuentas.Informe_Id = conInfDefFilas.Informe_Id and 
				conInfDefCuentas.Fila = conInfDefFilas.Fila and 
				conCuentas.Cuenta_Id Between conInfDefCuentas.CuentaDesde and conInfDefCuentas.CuentaHasta and 
				#TbG.Centro1_Id Between conInfDefFilas.Centro1Desde and conInfDefFilas.Centro1Hasta and 
				#TbG.Centro2_Id Between conInfDefFilas.Centro2Desde and conInfDefFilas.Centro2Hasta 
			WHERE
				#TbG.Ejercicio = @Ejercicio and 
				#TbG.Periodo = 7 ),0) as Per07,
				ISNULL((SELECT SUM(#TbG.Debe-#TbG.Haber) 
		from
			#TbG 	INNER JOIN conCuentas ON conCuentas.conCuentas = #TbG.conCuentas
			INNER JOIN conInfDefCuentas ON
				conInfDefCuentas.Informe_Id = conInfDefFilas.Informe_Id and 
				conInfDefCuentas.Fila = conInfDefFilas.Fila and 
				conCuentas.Cuenta_Id Between conInfDefCuentas.CuentaDesde and conInfDefCuentas.CuentaHasta and 
				#TbG.Centro1_Id Between conInfDefFilas.Centro1Desde and conInfDefFilas.Centro1Hasta and 
				#TbG.Centro2_Id Between conInfDefFilas.Centro2Desde and conInfDefFilas.Centro2Hasta 
			WHERE
				#TbG.Ejercicio = @Ejercicio and 
				#TbG.Periodo = 8 ),0)  as Per08,
ISNULL((SELECT SUM(#TbG.Debe-#TbG.Haber) 
		from
			#TbG 	INNER JOIN conCuentas ON conCuentas.conCuentas = #TbG.conCuentas
			INNER JOIN conInfDefCuentas ON
				conInfDefCuentas.Informe_Id = conInfDefFilas.Informe_Id and 
				conInfDefCuentas.Fila = conInfDefFilas.Fila and 
				conCuentas.Cuenta_Id Between conInfDefCuentas.CuentaDesde and conInfDefCuentas.CuentaHasta and 
				#TbG.Centro1_Id Between conInfDefFilas.Centro1Desde and conInfDefFilas.Centro1Hasta and 
				#TbG.Centro2_Id Between conInfDefFilas.Centro2Desde and conInfDefFilas.Centro2Hasta 
			WHERE
				#TbG.Ejercicio = @Ejercicio and 
				#TbG.Periodo = 9 ),0)  as Per09,
				ISNULL((SELECT SUM(#TbG.Debe-#TbG.Haber) 
		from
			#TbG 	INNER JOIN conCuentas ON conCuentas.conCuentas = #TbG.conCuentas
			INNER JOIN conInfDefCuentas ON
				conInfDefCuentas.Informe_Id = conInfDefFilas.Informe_Id and 
				conInfDefCuentas.Fila = conInfDefFilas.Fila and 
				conCuentas.Cuenta_Id Between conInfDefCuentas.CuentaDesde and conInfDefCuentas.CuentaHasta and 
				#TbG.Centro1_Id Between conInfDefFilas.Centro1Desde and conInfDefFilas.Centro1Hasta and 
				#TbG.Centro2_Id Between conInfDefFilas.Centro2Desde and conInfDefFilas.Centro2Hasta 
			WHERE
				#TbG.Ejercicio = @Ejercicio and 
				#TbG.Periodo = 10 ),0) as Per10,
				ISNULL((SELECT SUM(#TbG.Debe-#TbG.Haber) 
		from
			#TbG 	INNER JOIN conCuentas ON conCuentas.conCuentas = #TbG.conCuentas
			INNER JOIN conInfDefCuentas ON
				conInfDefCuentas.Informe_Id = conInfDefFilas.Informe_Id and 
				conInfDefCuentas.Fila = conInfDefFilas.Fila and 
				conCuentas.Cuenta_Id Between conInfDefCuentas.CuentaDesde and conInfDefCuentas.CuentaHasta and 
				#TbG.Centro1_Id Between conInfDefFilas.Centro1Desde and conInfDefFilas.Centro1Hasta and 
				#TbG.Centro2_Id Between conInfDefFilas.Centro2Desde and conInfDefFilas.Centro2Hasta 
			WHERE
				#TbG.Ejercicio = @Ejercicio and 
				#TbG.Periodo = 11 ),0) as Per11,
				ISNULL((SELECT SUM(#TbG.Debe-#TbG.Haber) 
		from
			#TbG 	INNER JOIN conCuentas ON conCuentas.conCuentas = #TbG.conCuentas
			INNER JOIN conInfDefCuentas ON
				conInfDefCuentas.Informe_Id = conInfDefFilas.Informe_Id and 
				conInfDefCuentas.Fila = conInfDefFilas.Fila and 
				conCuentas.Cuenta_Id Between conInfDefCuentas.CuentaDesde and conInfDefCuentas.CuentaHasta and 
				#TbG.Centro1_Id Between conInfDefFilas.Centro1Desde and conInfDefFilas.Centro1Hasta and 
				#TbG.Centro2_Id Between conInfDefFilas.Centro2Desde and conInfDefFilas.Centro2Hasta 
			WHERE
				#TbG.Ejercicio = @Ejercicio and 
				#TbG.Periodo = 12 ),0) as Per12,

				ISNULL((SELECT SUM(#TbG.Debe-#TbG.Haber) 
		from
			#TbG 	INNER JOIN conCuentas ON conCuentas.conCuentas = #TbG.conCuentas
			INNER JOIN conInfDefCuentas ON
				conInfDefCuentas.Informe_Id = conInfDefFilas.Informe_Id and 
				conInfDefCuentas.Fila = conInfDefFilas.Fila and 
				conCuentas.Cuenta_Id Between conInfDefCuentas.CuentaDesde and conInfDefCuentas.CuentaHasta and 
				#TbG.Centro1_Id Between conInfDefFilas.Centro1Desde and conInfDefFilas.Centro1Hasta and 
				#TbG.Centro2_Id Between conInfDefFilas.Centro2Desde and conInfDefFilas.Centro2Hasta 
			WHERE
				#TbG.Ejercicio = @Ejercicio and 
				#TbG.Periodo = 13 ),0)  as Per13

from conInfDefinibles 
	INNER JOIN conInfDefFilas ON conInfDefFilas.Informe_Id = conInfDefinibles.conInfDefinibles
WHERE
	conInfDefinibles.Informe_Id = @Informe_Id 
	order by 1

exec conInfDefiniblesCabecera @Informe_Id, @Ejercicio, @PeriodoHAsta, @Centro1Desde, @Centro1Hasta, @Centro2Desde, @Centro2Hasta, @Empresa_Id
Exec Inf_DATOSEMPRESA @Empresa_Id
GO



DROP PROCEDURE conInfDefiniblesAcuGenerar
GO
CREATE PROCEDURE conInfDefiniblesAcuGenerar
(
	@Informe_Id VarChar(15),
	@Ejercicio Int,
	@PeriodoHasta Int,
	@Centro1Desde VarChar(8),
	@Centro1Hasta VarChar(8),
	@Centro2Desde VarChar(8),
	@Centro2Hasta VarChar(8),
	@Empresa_Id Int
)
AS
	


	
select conPeriodos.Ejercicio, conPeriodos.Periodo, vconMovcontRes.* into #TbG 
from vconMovcontRes 
	INNER JOIN conPeriodos ON vconMovcontRes.Fecha between  conPeriodos.Fecha_Desde AND conPeriodos.Fecha_Hasta and 
	conPeriodos.Empresa_Id = vconMovcontRes.Empresa_Id
	
	where 
		vconMovContRes.Especial NOT IN ('CIR','CCP') AND 
		conPeriodos.Ejercicio = @Ejercicio and 
		conPeriodos.Periodo <= @PeriodoHasta and 
		conPeriodos.Empresa_id = @Empresa_Id and 
		Centro1_Id between @Centro1Desde and @Centro1Hasta and 
		Centro2_Id between @Centro2Desde and @Centro2Hasta 



select conPeriodos.Ejercicio, conPeriodos.Periodo, vconMovcontRes.* into #TbGA 
from vconMovcontRes 
	INNER JOIN conPeriodos ON vconMovcontRes.Fecha between  conPeriodos.Fecha_Desde AND conPeriodos.Fecha_Hasta and 
	conPeriodos.Empresa_Id = vconMovcontRes.Empresa_Id
	where 
		vconMovContRes.Especial NOT IN ('CIR','CCP') AND 
		conPeriodos.Ejercicio = @Ejercicio-1 and 
		conPeriodos.Periodo <= @PeriodoHasta and 
		conPeriodos.Empresa_id = @Empresa_Id and 
		Centro1_Id between @Centro1Desde and @Centro1Hasta and 
		Centro2_Id between @Centro2Desde and @Centro2Hasta 


SELECT conInfDefFilas.Fila, conInfDefFilas.Tipo, conInfDefFilas.Nivel, 
	conInfDefFilas.Titulo, conInfDefFilas.InvierteSigno, 
	conInfDefFilas.Fuente, 
	ISNULL((SELECT SUM(DEBE-HABER) 
		from  #TbG
			INNER JOIN conInfDefCuentas ON
				conInfDefCuentas.Informe_Id = conInfDefFilas.Informe_Id and 
				conInfDefCuentas.Fila = conInfDefFilas.Fila and 
				#TbG.Cuenta_Id Between conInfDefCuentas.CuentaDesde and conInfDefCuentas.CuentaHasta and 
				#TbG.Centro1_Id  Between conInfDefFilas.Centro1Desde and conInfDefFilas.Centro1Hasta and 
				#TbG.Centro2_Id  Between conInfDefFilas.Centro2Desde and conInfDefFilas.Centro2Hasta 
				WHERE
				#TbG.Ejercicio = @Ejercicio and 
				#TbG.Periodo = @PeriodoHasta) ,0) as MesAct,
	
		ISNULL((SELECT SUM(DEBE-HABER) 
		from  #TbGA
			INNER JOIN conInfDefCuentas ON
				conInfDefCuentas.Informe_Id = conInfDefFilas.Informe_Id and 
				conInfDefCuentas.Fila = conInfDefFilas.Fila and 
				#TbGA.Cuenta_Id Between conInfDefCuentas.CuentaDesde and conInfDefCuentas.CuentaHasta and 
				#TbGA.Centro1_Id  Between conInfDefFilas.Centro1Desde and conInfDefFilas.Centro1Hasta and 
				#TbGA.Centro2_Id  Between conInfDefFilas.Centro2Desde and conInfDefFilas.Centro2Hasta 
				WHERE
				#TbGA.Ejercicio = @Ejercicio-1 and 
				#TbGA.Periodo = @PeriodoHasta) ,0) as MesAnt,
				ISNULL((SELECT SUM(DEBE-HABER) 
		from  #TbG
			INNER JOIN conInfDefCuentas ON
				conInfDefCuentas.Informe_Id = conInfDefFilas.Informe_Id and 
				conInfDefCuentas.Fila = conInfDefFilas.Fila and 
				#TbG.Cuenta_Id Between conInfDefCuentas.CuentaDesde and conInfDefCuentas.CuentaHasta and 
				#TbG.Centro1_Id  Between conInfDefFilas.Centro1Desde and conInfDefFilas.Centro1Hasta and 
				#TbG.Centro2_Id  Between conInfDefFilas.Centro2Desde and conInfDefFilas.Centro2Hasta 
				WHERE
				#TbG.Ejercicio = @Ejercicio and 
				#TbG.Periodo <= @PeriodoHasta) ,0)  as AcuAct,
	ISNULL((SELECT SUM(DEBE-HABER) 
		from  #TbGA
			INNER JOIN conInfDefCuentas ON
				conInfDefCuentas.Informe_Id = conInfDefFilas.Informe_Id and 
				conInfDefCuentas.Fila = conInfDefFilas.Fila and 
				#TbGA.Cuenta_Id Between conInfDefCuentas.CuentaDesde and conInfDefCuentas.CuentaHasta and 
				#TbGA.Centro1_Id  Between conInfDefFilas.Centro1Desde and conInfDefFilas.Centro1Hasta and 
				#TbGA.Centro2_Id  Between conInfDefFilas.Centro2Desde and conInfDefFilas.Centro2Hasta 
				WHERE
				#TbGA.Ejercicio = @Ejercicio-1 and 
				#TbGA.Periodo = @PeriodoHasta) ,0) as MesAnt,
				ISNULL((SELECT SUM(DEBE-HABER) 
		from  #TbGA
			INNER JOIN conInfDefCuentas ON
				conInfDefCuentas.Informe_Id = conInfDefFilas.Informe_Id and 
				conInfDefCuentas.Fila = conInfDefFilas.Fila and 
				#TbGA.Cuenta_Id Between conInfDefCuentas.CuentaDesde and conInfDefCuentas.CuentaHasta and 
				#TbGA.Centro1_Id  Between conInfDefFilas.Centro1Desde and conInfDefFilas.Centro1Hasta and 
				#TbGA.Centro2_Id  Between conInfDefFilas.Centro2Desde and conInfDefFilas.Centro2Hasta 
				WHERE
				#TbGA.Ejercicio = @Ejercicio-1 and 
				#TbGA.Periodo <= @PeriodoHasta) ,0)  as AcuAnt
from conInfDefinibles 
	INNER JOIN conInfDefFilas ON conInfDefFilas.Informe_Id = conInfDefinibles.conInfDefinibles
WHERE
	conInfDefinibles.Informe_Id = @Informe_Id 
	order by 1

SELECT conInfDefinibles.Descripcion, 
case when @PeriodoHasta = 13 then 'Audit '+str(@Ejercicio,4) else
	(SELECT LEFT(DateName(MONTH,Fecha_Desde),3)+' '+
		Substring(DateName(Year, Fecha_Desde),3,2) 
		FROM conPeriodos where
		conPeriodos.Ejercicio = @Ejercicio and 
		conPeriodos.Empresa_Id = @Empresa_Id and
		conPeriodos.Periodo = @PeriodoHasta)  end as Periodo,
		case when @PeriodoHasta= 13 then 'Audit '+str(@Ejercicio-1,4) else
	(SELECT LEFT(DateName(MONTH,Fecha_Desde),3)+' '+
		Substring(DateName(Year, Fecha_Desde),3,2) 
		FROM conPeriodos where
		conPeriodos.Ejercicio = @Ejercicio-1 and 
		conPeriodos.Empresa_Id = @Empresa_Id and
		conPeriodos.Periodo = @PeriodoHasta)  end as PeriodoAnt,
		(SELECT Fecha_Hasta FROM conPeriodos where
		conPeriodos.Ejercicio = @Ejercicio and 
		conPeriodos.Empresa_Id = @Empresa_Id and
		conPeriodos.Periodo = @PeriodoHasta) FechaHasta, 
		conInfDefinibles.Informe_Id, @Ejercicio as Ejercicio, @PeriodoHasta as PeriodoHasta, 
		@Centro1Desde as Centro1Desde, @Centro1Hasta as Centro1Hasta, 
		@Centro2Desde as Centro2Desde, @Centro2Hasta as Centro2Hasta
	from conInfDefinibles 
where Informe_Id= @Informe_Id

	
GO


DROP PROCEDURE conInfDefiniblesAcu1Generar
GO
CREATE PROCEDURE conInfDefiniblesAcu1Generar
(
	@Informe_Id VarChar(15),
	@Ejercicio Int,
	@PeriodoHasta Int,
	@Centro1Desde VarChar(8),
	@Centro1Hasta VarChar(8),
	@Centro2Desde VarChar(8),
	@Centro2Hasta VarChar(8),
	@Empresa_Id Int
)
AS
Declare @MesAnt  int	
Declare @EjeAnt  int	
set @MesAnt = @PeriodoHasta-1
set @EjeAnt = @Ejercicio

if @MesAnt = 0
Begin
	set @MesAnt = 12
	set @EjeAnt = @EjeAnt-1
end


select conPeriodos.Ejercicio, conPeriodos.Periodo, vconMovcontRes.* into #TbG 
from vconMovcontRes 
	INNER JOIN conPeriodos ON vconMovcontRes.Fecha between  conPeriodos.Fecha_Desde AND conPeriodos.Fecha_Hasta and 
	conPeriodos.Empresa_Id = vconMovcontRes.Empresa_Id
	where 
		vconMovContRes.Especial NOT IN ('CIR','CCP') AND 
		conPeriodos.Ejercicio = @Ejercicio and 
		conPeriodos.Periodo <= @PeriodoHasta and 
		conPeriodos.Empresa_id = @Empresa_Id and 
		Centro1_Id between @Centro1Desde and @Centro1Hasta and 
		Centro2_Id between @Centro2Desde and @Centro2Hasta 



select conPeriodos.Ejercicio, conPeriodos.Periodo, vconMovcontRes.* into #TbGA 
from vconMovcontRes 
	INNER JOIN conPeriodos ON vconMovcontRes.Fecha between  conPeriodos.Fecha_Desde AND conPeriodos.Fecha_Hasta and 
	conPeriodos.Empresa_Id = vconMovcontRes.Empresa_Id
	where 
		vconMovContRes.Especial NOT IN ('CIR','CCP') AND 
		conPeriodos.Ejercicio = @EjeAnt and 
		conPeriodos.Periodo <= @MesAnt and 
		conPeriodos.Empresa_id = @Empresa_Id and 
		Centro1_Id between @Centro1Desde and @Centro1Hasta and 
		Centro2_Id between @Centro2Desde and @Centro2Hasta 




SELECT conInfDefFilas.Fila, conInfDefFilas.Tipo, conInfDefFilas.Nivel, 
	conInfDefFilas.Titulo, conInfDefFilas.InvierteSigno, 
	conInfDefFilas.Fuente, 
	ISNULL((SELECT SUM(DEBE-HABER) 
		from #TbG 
			INNER JOIN conInfDefCuentas ON
				conInfDefCuentas.Informe_Id = conInfDefFilas.Informe_Id and 
				conInfDefCuentas.Fila = conInfDefFilas.Fila and 
				#TbG.Cuenta_Id Between conInfDefCuentas.CuentaDesde and conInfDefCuentas.CuentaHasta and 
				#TbG.Centro1_Id  Between conInfDefFilas.Centro1Desde and conInfDefFilas.Centro1Hasta and 
				#TbG.Centro2_Id  Between conInfDefFilas.Centro2Desde and conInfDefFilas.Centro2Hasta 
			WHERE
				#TbG.Ejercicio = @Ejercicio and 
				#TbG.Periodo = @PeriodoHasta ),0) as MesAct,

	ISNULL((SELECT SUM(DEBE-HABER) 
		from #TbGa 
			INNER JOIN conInfDefCuentas ON
				conInfDefCuentas.Informe_Id = conInfDefFilas.Informe_Id and 
				conInfDefCuentas.Fila = conInfDefFilas.Fila and 
				#TbGa.Cuenta_Id Between conInfDefCuentas.CuentaDesde and conInfDefCuentas.CuentaHasta and 
				#TbGa.Centro1_Id  Between conInfDefFilas.Centro1Desde and conInfDefFilas.Centro1Hasta and 
				#TbGa.Centro2_Id  Between conInfDefFilas.Centro2Desde and conInfDefFilas.Centro2Hasta 
			WHERE
				#TbGa.Ejercicio = @EjeAnt and 
				#TbGa.Periodo = @MesAnt ),0) as MesAnt,

	ISNULL((SELECT SUM(DEBE-HABER) 
		from #TbG 
			INNER JOIN conInfDefCuentas ON
				conInfDefCuentas.Informe_Id = conInfDefFilas.Informe_Id and 
				conInfDefCuentas.Fila = conInfDefFilas.Fila and 
				#TbG.Cuenta_Id Between conInfDefCuentas.CuentaDesde and conInfDefCuentas.CuentaHasta and 
				#TbG.Centro1_Id  Between conInfDefFilas.Centro1Desde and conInfDefFilas.Centro1Hasta and 
				#TbG.Centro2_Id  Between conInfDefFilas.Centro2Desde and conInfDefFilas.Centro2Hasta 
			WHERE
				#TbG.Ejercicio = @Ejercicio and 
				#TbG.Periodo <= @PeriodoHasta ),0)  as AcuAct,
	ISNULL((SELECT SUM(DEBE-HABER) 
		from #TbGa 
			INNER JOIN conInfDefCuentas ON
				conInfDefCuentas.Informe_Id = conInfDefFilas.Informe_Id and 
				conInfDefCuentas.Fila = conInfDefFilas.Fila and 
				#TbGa.Cuenta_Id Between conInfDefCuentas.CuentaDesde and conInfDefCuentas.CuentaHasta and 
				#TbGa.Centro1_Id  Between conInfDefFilas.Centro1Desde and conInfDefFilas.Centro1Hasta and 
				#TbGa.Centro2_Id  Between conInfDefFilas.Centro2Desde and conInfDefFilas.Centro2Hasta 
			WHERE
				#TbGa.Ejercicio = @EjeAnt and 
				#TbGa.Periodo <= @MesAnt ),0) as AcuAnt
from conInfDefinibles 
	INNER JOIN conInfDefFilas ON conInfDefFilas.Informe_Id = conInfDefinibles.conInfDefinibles
WHERE
	conInfDefinibles.Informe_Id = @Informe_Id 
	order by 1


SELECT conInfDefinibles.Descripcion, 
case when @PeriodoHasta = 13 then 'Audit '+str(@Ejercicio,4) else
	(SELECT LEFT(DateName(MONTH,Fecha_Desde),3)+' '+
		Substring(DateName(Year, Fecha_Desde),3,2) 
		FROM conPeriodos where
		conPeriodos.Ejercicio = @Ejercicio and 
		conPeriodos.Empresa_Id = @Empresa_Id and
		conPeriodos.Periodo = @PeriodoHasta)  end as Periodo,
		case when @MesAnt= 13 then 'Audit '+str(@EjeAnt,4) else
	(SELECT LEFT(DateName(MONTH,Fecha_Desde),3)+' '+
		Substring(DateName(Year, Fecha_Desde),3,2) 
		FROM conPeriodos where
		conPeriodos.Ejercicio = @EjeAnt and 
		conPeriodos.Empresa_Id = @Empresa_Id and
		conPeriodos.Periodo = @MesAnt)  end as PeriodoAnt,
		(SELECT Fecha_Hasta FROM conPeriodos where
		conPeriodos.Ejercicio = @Ejercicio and 
		conPeriodos.Empresa_Id = @Empresa_Id and
		conPeriodos.Periodo = @PeriodoHasta) FechaHasta, 
		conInfDefinibles.Informe_Id, @Ejercicio as Ejercicio, @PeriodoHasta as PeriodoHasta, 
		
		@Centro1Desde as Centro1Desde, @Centro1Hasta as Centro1Hasta, 
		@Centro2Desde as Centro2Desde, @Centro2Hasta as Centro2Hasta
	from conInfDefinibles 
where Informe_Id= @Informe_Id
GO
	
GO




Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conMovCont.sql*/
DROP PROCEDURE conMovContGuardar
GO
CREATE PROCEDURE conMovContGuardar
(
@pconAsientos bigint,
@pRenglon int,
@pCuenta_Id varchar(25) = NULL,
@pLeyendaLibroMayor varchar(100),
@pImporte qMonedaD2,
@pImporteMonedaOriginal qMonedaD2,
@pTipoMov numeric(5),
@pCentro1_Id varchar(8) = NULL,
@pCentro2_Id varchar(8) = NULL,
@pClase varchar(5)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM conMovCont WHERE (conAsientos = @pconAsientos) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE conMovCont
	SET		Cuenta_Id = dbo.FuncFKconCuentas(@pCuenta_Id),
		LeyendaLibroMayor = @pLeyendaLibroMayor,
		Importe = @pImporte,
		ImporteMonedaOriginal = @pImporteMonedaOriginal,
		TipoMov = @pTipoMov,
		Centro1_Id = dbo.FuncFKconCentro1(@pCentro1_Id),
		Centro2_Id = dbo.FuncFKconCentro2(@pCentro2_Id),
		Clase = @pClase
	WHERE (conAsientos = @pconAsientos) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO conMovCont
	(
		conAsientos,
		Renglon,
		Cuenta_Id,
		LeyendaLibroMayor,
		Importe,
		ImporteMonedaOriginal,
		TipoMov,
		Centro1_Id,
		Centro2_Id,
		Clase
	)
	VALUES 
	(
		@pconAsientos,
		@pRenglon,
		dbo.FuncFKconCuentas(@pCuenta_Id),
		@pLeyendaLibroMayor,
		@pImporte,
		@pImporteMonedaOriginal,
		@pTipoMov,
		dbo.FuncFKconCentro1(@pCentro1_Id),
		dbo.FuncFKconCentro2(@pCentro2_Id),
		@pClase
	)
END 

GO

DROP PROCEDURE conMovContDatos
GO
CREATE PROCEDURE conMovContDatos
(
@pconAsientos bigint,
@pRenglon int= null
)
AS
SET NOCOUNT ON 

SELECT conAsientos.conAsientos, conMovCont.Renglon,
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuentas,
	conMovCont.LeyendaLibroMayor, conMovCont.Importe, conMovCont.ImporteMonedaOriginal, 
	conMovCont.TipoMov, conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, 
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, conMovCont.Clase
FROM conMovCont 
INNER JOIN conAsientos  ON (conAsientos.conAsientos = conMovCont.conAsientos)
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = conMovCont.Cuenta_Id)
LEFT JOIN conCentro1  ON (conCentro1.conCentro1 = conMovCont.Centro1_Id)
LEFT JOIN conCentro2  ON (conCentro2.conCentro2 = conMovCont.Centro2_Id)
WHERE (conMovCont.conAsientos = @pconAsientos)
AND (conMovCont.Renglon = ISNULL(@pRenglon,Renglon))
ORDER BY 2

RETURN @@Error 

GO

DROP PROCEDURE conMovContEliminar
GO
CREATE PROCEDURE conMovContEliminar
(
@pconAsientos bigint,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM conMovCont 
WHERE (conAsientos = @pconAsientos)
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conMovContCon.sql*/
DROP PROCEDURE conMovContConGuardar
GO
CREATE PROCEDURE conMovContConGuardar
(
@pconAsientos bigint,
@pRenglon int,
@pCuenta_Id varchar(25) = NULL,
@pLeyendaLibroMayor varchar(100),
@pImporte qMonedaD2,
@pTipoMov numeric(5),
@pCentro1_Id varchar(8) = NULL,
@pCentro2_Id varchar(8) = NULL,
@pReferenciaT QMemo = NULL,
@pReferencia1 varchar(100) = NULL,
@pReferencia2 varchar(100) = NULL,
@pReferencia3 varchar(100) = NULL,
@pReferencia4 varchar(100) = NULL,
@pReferencia5 varchar(100) = NULL,
@pBase_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM conMovContCon WHERE (conAsientos = @pconAsientos) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE conMovContCon
	SET		Cuenta_Id = dbo.FuncFKconCuentas(@pCuenta_Id),
		LeyendaLibroMayor = @pLeyendaLibroMayor,
		Importe = @pImporte,
		TipoMov = @pTipoMov,
		Centro1_Id = dbo.FuncFKconCentro1(@pCentro1_Id),
		Centro2_Id = dbo.FuncFKconCentro2(@pCentro2_Id),
		ReferenciaT = @pReferenciaT,
		Referencia1 = @pReferencia1,
		Referencia2 = @pReferencia2,
		Referencia3 = @pReferencia3,
		Referencia4 = @pReferencia4,
		Referencia5 = @pReferencia5,
		Base_Id = dbo.FuncFKconBaseDistri(@pBase_Id)
	WHERE (conAsientos = @pconAsientos) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO conMovContCon
	(
		conAsientos,
		Renglon,
		Cuenta_Id,
		LeyendaLibroMayor,
		Importe,
		TipoMov,
		Centro1_Id,
		Centro2_Id,
		ReferenciaT,
		Referencia1,
		Referencia2,
		Referencia3,
		Referencia4,
		Referencia5,
		Base_Id
	)
	VALUES 
	(
		@pconAsientos,
		@pRenglon,
		dbo.FuncFKconCuentas(@pCuenta_Id),
		@pLeyendaLibroMayor,
		@pImporte,
		@pTipoMov,
		dbo.FuncFKconCentro1(@pCentro1_Id),
		dbo.FuncFKconCentro2(@pCentro2_Id),
		@pReferenciaT,
		@pReferencia1,
		@pReferencia2,
		@pReferencia3,
		@pReferencia4,
		@pReferencia5,
		dbo.FuncFKconBaseDistri(@pBase_Id)
	)
END 

GO

DROP PROCEDURE conMovContConDatos
GO
CREATE PROCEDURE conMovContConDatos
(
@pconAsientos bigint,
@pRenglon int
)
AS
SET NOCOUNT ON 

SELECT conMovContCon.conAsientos as Asiento_id, conMovContCon.Renglon, 
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuentas,
	conMovContCon.LeyendaLibroMayor, 
	CASE WHEN conMovContCon.TipoMov=1 THEN  conMovContCon.Importe ELSE 0 END AS Debe,
	CASE WHEN conMovContCon.TipoMov!=1 THEN  conMovContCon.Importe ELSE 0 END AS Haber,
	conCentro1.Centro1_Id,	conCentro1.Descripcion as DescripcionCentro1, 
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, 
	conMovContCon.ReferenciaT, conMovContCon.Referencia1, conMovContCon.Referencia2, 
	conMovContCon.Referencia3, conMovContCon.Referencia4, conMovContCon.Referencia5, 
	conBaseDistri.Base_Id, conBaseDistri.Descripcion as DescripcionBaseDistri
FROM conMovContCon 
INNER JOIN conAsientos  ON (conAsientos.conAsientos = conMovContCon.conAsientos)
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = conMovContCon.Cuenta_Id)
LEFT JOIN conCentro1  ON (conCentro1.conCentro1 = conMovContCon.Centro1_Id)
LEFT JOIN conCentro2  ON (conCentro2.conCentro2 = conMovContCon.Centro2_Id)
LEFT JOIN conBaseDistri  ON (conBaseDistri.conBaseDistri = conMovContCon.Base_Id)
WHERE (conMovContCon.conAsientos = @pconAsientos)
AND (conMovContCon.Renglon = isnull(@pRenglon,conMovContCon.Renglon))
 
RETURN @@Error 

GO

DROP PROCEDURE conMovContConEliminar
GO
CREATE PROCEDURE conMovContConEliminar
(
@pconAsientos bigint,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM conMovContCon 
WHERE (conAsientos = @pconAsientos)
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conOrigAplicCtas.sql*/
drop procedure conOrigAplicCtasInsertar
go
create procedure conOrigAplicCtasInsertar
(
@pGrupoOAF_Id varchar(5),
@pCuenta_Id varchar(25),
@pNetoDebeHaber varchar(1)
)
as
set nocount on
insert into conOrigAplicCtas (GrupoOAF_Id, Cuenta_Id, NetoDebeHaber)
values(@pGrupoOAF_Id,dbo.FuncFKconCuentas(@pCuenta_Id),@pNetoDebeHaber)
go

drop procedure conOrigAplicCtasEliminar
go
create procedure conOrigAplicCtasEliminar
(
@pGrupoOAF_Id varchar(5)
)
as
set nocount on
delete from conOrigAplicCtas where GrupoOAF_Id=@pGrupoOAF_Id
go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conOrigAplicReng.sql*/
drop procedure conOrigAplicRengDatos
go
create procedure conOrigAplicRengDatos
(
@pGrupoOAF_Id varchar(5)
)
as
set nocount on

select GrupoOAF_Id,Empresa_Id,Destino,Origen,Descripcion, Cast( Case When Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) 
as PTodasEmpresas 
From conOrigAplicReng
where conOrigAplicReng.GrupoOAF_Id=@pGrupoOAF_Id

select GrupoOAF_Id,conCuentas.Cuenta_Id, conCuentas.Descripcion,NetoDebeHaber from conOrigAplicCtas 
inner join conCuentas on conCuentas.conCuentas=conOrigAplicCtas.Cuenta_Id
go


drop Procedure conOrigAplicRengGuardar
go
create Procedure conOrigAplicRengGuardar
(
@pGrupoOAF_Id varchar(5),
@pEmpresa_Id int,
@pDestino int,
@pOrigen int=null,
@pDescripcion varchar(100)
)
as
set nocount on
if(exists(select 1 from conOrigAplicReng where conOrigAplicReng.GrupoOAF_Id =@pGrupoOAF_Id))
begin
update conOrigAplicReng set Empresa_Id=@pEmpresa_Id, Destino=@pDestino,Origen=@pOrigen,Descripcion=@pDescripcion
end
else
begin
insert into conOrigAplicReng (GrupoOAF_Id,Empresa_Id,Destino,Origen,Descripcion)
values (@pGrupoOAF_Id,@pEmpresa_Id,@pDestino, 0,@pDescripcion)
end
go


drop procedure conOrigAplicRengEliminar
go
create procedure conOrigAplicRengEliminar
(
@pGrupoOaf_Id varchar(5)
)
as
delete from conOrigAplicReng where GrupoOAF_Id=@pGrupoOAF_Id
go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conPeriodos.sql*/
DROP PROCEDURE conPeriodosGuardar
GO
CREATE PROCEDURE conPeriodosGuardar
(
@pEmpresa_Id int,
@pEjercicio smallint,
@pPeriodo smallint,
@pFecha_Desde datetime,
@pFecha_Hasta datetime,
@pEstado char(1)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM conPeriodos WHERE (Ejercicio = @pEjercicio) AND (Periodo = @pPeriodo) AND (Empresa_Id = @pEmpresa_Id)))
BEGIN 
	UPDATE conPeriodos
	SET		Fecha_Desde = @pFecha_Desde,
		Fecha_Hasta = @pFecha_Hasta,
		Estado = @pEstado
	WHERE (Ejercicio = @pEjercicio) AND (Periodo = @pPeriodo) and 
		Empresa_Id = @pEmpresa_Id
END 
ELSE 
BEGIN 
	INSERT INTO conPeriodos
	(
		Empresa_Id,
		Ejercicio,
		Periodo,
		Fecha_Desde,
		Fecha_Hasta,
		Estado
	)
	VALUES 
	(
		@pEmpresa_Id,
		@pEjercicio,
		@pPeriodo,
		@pFecha_Desde,
		@pFecha_Hasta,
		@pEstado
	)
END 

GO

DROP PROCEDURE conPeriodosDatos
GO
CREATE PROCEDURE conPeriodosDatos
(
@pEmpresa_Id int,
@pEjercicio smallint,
@pPeriodo smallint
)
AS
SET NOCOUNT ON 

SELECT conPeriodos.Ejercicio, conPeriodos.Periodo, conPeriodos.Fecha_Desde as Fecha, conPeriodos.Fecha_Desde,
	conPeriodos.Fecha_Hasta, conPeriodos.Estado
FROM conPeriodos 
WHERE conPeriodos.Ejercicio = @pEjercicio
AND conPeriodos.Periodo = @pPeriodo and 
Empresa_Id = @pEmpresa_Id
 
 RETURN @@Error 

GO

DROP PROCEDURE conPeriodosEliminar
GO
CREATE PROCEDURE conPeriodosEliminar
(
@pEmpresa_Id Int,
@pEjercicio smallint,
@pPeriodo smallint = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM conPeriodos 
WHERE 
Empresa_Id = @pEmpresa_id and 
(Ejercicio = @pEjercicio)
AND (Periodo = ISNULL(@pPeriodo, Periodo))
 
 RETURN @@Error 

GO
DROP PROCEDURE conPeriodosDatosFecha
GO
CREATE PROCEDURE conPeriodosDatosFecha
(
@pEmpresa_Id Int,
@pFecha DateTime
)
AS
SET NOCOUNT ON 

SELECT conPeriodos.Ejercicio, conPeriodos.Periodo, @pFecha as Fecha,  conPeriodos.Fecha_Desde,
	conPeriodos.Fecha_Hasta, conPeriodos.Estado
FROM conPeriodos 
WHERE @pFecha Between Fecha_Desde And Fecha_Hasta and 
	Empresa_Id = @pEmpresa_Id
 
RETURN @@Error 

GO


DROP PROCEDURE conPeriodosCambiarEstado
GO
CREATE PROCEDURE conPeriodosCambiarEstado
(
@pEmpresa_Id int,
@pEjercicio smallint,
@pPeriodo smallint,
@pEstado char(1)
)
AS
	UPDATE conPeriodos
	SET	Estado = @pEstado
	WHERE (Ejercicio = @pEjercicio) AND (Periodo = @pPeriodo) and 
		Empresa_Id = @pEmpresa_Id
GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conPolizasElectroMx.sql*/
-- EXEC conPolizasElectroMxDatos 1, '20190101','20191130'
drop procedure conPolizasElectroMxDatos
GO

CREATE procedure conPolizasElectroMxDatos
(
	@Empresa_Id Int, 
	@FechaDesde DateTime, 
	@FechaHasta DateTime, 
	@TipoSolicitud  VarChar(2),
	@NumOrden  VarChar(13), 
	@NumTramite VarChar(10), 
	@Sello VarChar(max) =NULL, 
	@noCertificado varchar(20) = NULL, 
	@Certificado VarChar(max) = NULL
)
as

Select YEAR(@FechaHasta) Anio, MONTH(@FechaHasta) Mes,  @TipoSolicitud TipoSolicitud, @NumOrden NumOrden , 
	@NumTramite NumTramite, @Sello Sello, @noCertificado noCertificado, @Certificado Certificado

SELECT conAsientos.conAsientos,
	genSegmentos.Segmento_Id + '-'+ 
	dbo.Segmento(genAsiSegmentos.Segmento_Id, 
		genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,genAsiSegmentos.Segmento4C,
		genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N) AS NumUnidenPol,
		conASientos.Fecha, 
			rtrim(genSegmentos.Descripcion) + '-' +
			ISNULL(conAsientosCon.LeyendaLibroDiario, disFormularios.Descripcion) as Concepto
	
from genAsiSegmentos INNER JOIN genSegmentos ON 
	genAsiSegmentos.Segmento_Id = genSegmentos.genSegmentos
	INNER JOIN conAsientos ON 
	conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
	INNER JOIN disFormularios ON 
		disFormularios.disFormularios = conAsientos.Formulario_Id
	LEFT JOIN conAsientosCon ON 
		conAsientosCon.conAsientos = conAsientos.conAsientos
WHERE
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha between @FechaDesde and @FechaHasta
ORDER BY 3,2	

-- Transaccion

SELECT conAsientos.conAsientos,	conMovCont.Renglon, 
	conCuentas.Cuenta_Id, conCuentas.Descripcion, 
	case when ISNULL(conMovCont.LeyendaLibroMayor,' ') = ' ' Then 
		rtrim(genSegmentos.Descripcion) + '-' + disFormularios.Descripcion 
		else conMovCont.LeyendaLibroMayor end  as Concepto, 
	case when conMovCont.Tipomov = 1 then conMovCont.importe else 0 end as Debe,	
	case when conMovCont.Tipomov = 2 then conMovCont.importe else 0 end as Haber
from conAsientos inner join conMovCont ON
	conAsientos.conAsientos = conMovCont.conAsientos
	inner join conCuentas ON 
		conCuentas.conCuentas = conMovCont.Cuenta_Id
	INNER JOIN genAsiSegmentos ON
	conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
	INNER JOIN genSegmentos ON 
	genAsiSegmentos.Segmento_Id = genSegmentos.genSegmentos
	INNER JOIN disFormularios ON 
		disFormularios.disFormularios = conAsientos.Formulario_Id
WHERE
	conMovCont.importe <> 0 and
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha between @FechaDesde and @FechaHasta
ORDER BY 1,2


-- ComNal
SELECT conAsientos.conAsientos,	venMovimientosFiscal.ClaveFiscal as UUID_CFDI,
	genEntidades.Cuit AS RFC, venMovimientos.Importe as MontoTotal, 
	genMonedas.CodigoFiscal as Moneda, conAsientos.Cambio as TipCamb
from conAsientos inner join venMovimientosFiscal ON
	conAsientos.conAsientos = venMovimientosFiscal.venMovimientos
	INNER JOIN venMovimientos ON
	venMovimientos.venMovimientos = venMovimientosFiscal.venMovimientos
	INNER JOIN genEntidades ON
	genEntidades.genEntidades =venMovimientos.Cliente_Id
	INNER JOIN genMonedas ON
	genMonedas.genMonedas = conAsientos.Moneda_Id

WHERE
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha between @FechaDesde and @FechaHasta
UNION ALL -- Cobranzas 
SELECT conAsientos.conAsientos,	venMovimientosFiscal.ClaveFiscal as UUID_CFDI,
	genEntidades.Cuit AS RFC, genCancMov.Importe as MontoTotal, 
	genMonedas.CodigoFiscal as Moneda, conAsientos.Cambio as TipCamb
from conAsientos inner join genCancMov ON 
	genCancMov.Asiento_Id_Ap = conAsientos.conAsientos
	INNER JOIN venMovimientosFiscal ON
	genCancMov.Asiento_Id = venMovimientosFiscal.venMovimientos
	INNER JOIN venMovimientos ON
	venMovimientos.venMovimientos = venMovimientosFiscal.venMovimientos
	INNER JOIN genEntidades ON
	genEntidades.genEntidades =venMovimientos.Cliente_Id
	INNER JOIN genMonedas ON
	genMonedas.genMonedas = conAsientos.Moneda_Id

WHERE
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha between @FechaDesde and @FechaHasta
-- Aplicacion en Ventas
UNION ALL
SELECT conAsientos.conAsientos,	venMovimientosFiscal.ClaveFiscal as UUID_CFDI,
	genEntidades.Cuit AS RFC, genCancMov.Importe as MontoTotal, 
	genMonedas.CodigoFiscal as Moneda, conAsientos.Cambio as TipCamb
from conAsientos inner join genCancMov ON 
	genCancMov.AsientoApli_Id = conAsientos.conAsientos
	INNER JOIN venMovimientosFiscal ON
	genCancMov.Asiento_Id = venMovimientosFiscal.venMovimientos
	INNER JOIN venMovimientos ON
	venMovimientos.venMovimientos = venMovimientosFiscal.venMovimientos
	INNER JOIN genEntidades ON
	genEntidades.genEntidades =venMovimientos.Cliente_Id
	INNER JOIN genMonedas ON
	genMonedas.genMonedas = conAsientos.Moneda_Id

WHERE
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha between @FechaDesde and @FechaHasta
UNION ALL
SELECT conAsientos.conAsientos,	venMovimientosFiscal.ClaveFiscal as UUID_CFDI,
	genEntidades.Cuit AS RFC, genCancMov.Importe as MontoTotal, 
	genMonedas.CodigoFiscal as Moneda, conAsientos.Cambio as TipCamb
from conAsientos inner join genCancMov ON 
	genCancMov.AsientoApli_Id = conAsientos.conAsientos
	INNER JOIN venMovimientosFiscal ON
	genCancMov.Asiento_Id_Ap = venMovimientosFiscal.venMovimientos
	INNER JOIN venMovimientos ON
	venMovimientos.venMovimientos = venMovimientosFiscal.venMovimientos
	INNER JOIN genEntidades ON
	genEntidades.genEntidades =venMovimientos.Cliente_Id
	INNER JOIN genMonedas ON
	genMonedas.genMonedas = conAsientos.Moneda_Id
WHERE
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha between @FechaDesde and @FechaHasta
-- Diferencias en Cambios
UNION ALL
SELECT conAsientos.conAsientos,	venMovimientosFiscal.ClaveFiscal as UUID_CFDI,
	genEntidades.Cuit AS RFC, genCancMov.Importe as MontoTotal, 
	genMonedas.CodigoFiscal as Moneda, conAsientos.Cambio as TipCamb
from conAsientos inner join genCancMov ON 
	genCancMov.AsieDifCambio_Id = conAsientos.conAsientos
	INNER JOIN venMovimientosFiscal ON
	genCancMov.Asiento_Id_Ap = venMovimientosFiscal.venMovimientos
	INNER JOIN venMovimientos ON
	venMovimientos.venMovimientos = venMovimientosFiscal.venMovimientos
	INNER JOIN genEntidades ON
	genEntidades.genEntidades =venMovimientos.Cliente_Id
	INNER JOIN genMonedas ON
	genMonedas.genMonedas = conAsientos.Moneda_Id

WHERE
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha between @FechaDesde and @FechaHasta
UNION ALL
SELECT conAsientos.conAsientos,	venMovimientosFiscal.ClaveFiscal as UUID_CFDI,
	genEntidades.Cuit AS RFC, genCancMov.Importe as MontoTotal, 
	genMonedas.CodigoFiscal as Moneda, conAsientos.Cambio as TipCamb
from conAsientos inner join genCancMov ON 
	genCancMov.AsieDifCambio_Id = conAsientos.conAsientos
	INNER JOIN venMovimientosFiscal ON
	genCancMov.Asiento_Id = venMovimientosFiscal.venMovimientos
	INNER JOIN venMovimientos ON
	venMovimientos.venMovimientos = venMovimientosFiscal.venMovimientos
	INNER JOIN genEntidades ON
	genEntidades.genEntidades =venMovimientos.Cliente_Id
	INNER JOIN genMonedas ON
	genMonedas.genMonedas = conAsientos.Moneda_Id
WHERE
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha between @FechaDesde and @FechaHasta
-- Movimientos de Proveedores Nacionales
UNION ALL
SELECT conAsientos.conAsientos,	comMovProv.ClaveFiscal as UUID_CFDI,
	genEntidades.Cuit AS RFC, comMovProv.Importe as MontoTotal, 
	genMonedas.CodigoFiscal as Moneda, conAsientos.Cambio as TipCamb
from conAsientos inner join comMovProv ON
	conAsientos.conAsientos = comMovProv.comMovProv
	INNER JOIN genEntidades ON
	genEntidades.genEntidades =comMovProv.Proveed_Id
	INNER JOIN genMonedas ON
	genMonedas.genMonedas = conAsientos.Moneda_Id
	INNER JOIN comProveedores ON comMovProv.Proveed_Id = comProveedores.genEntidades
	INNER JOIN genEmpresas ON  genEmpresas.genEmpresas = conAsientos.Empresa_Id

WHERE
	genEmpresas.Pais_Id = comProveedores.Pais and 
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha between @FechaDesde and @FechaHasta
UNION ALL -- Pagos 
SELECT conAsientos.conAsientos,	comMovProv.ClaveFiscal as UUID_CFDI,
	genEntidades.Cuit AS RFC, genCancMov.Importe as MontoTotal, 
	genMonedas.CodigoFiscal as Moneda, conAsientos.Cambio as TipCamb
from conAsientos inner join genCancMov ON 
	genCancMov.Asiento_Id = conAsientos.conAsientos
	INNER JOIN comMovProv ON
	genCancMov.Asiento_Id_Ap = comMovProv.comMovProv
	INNER JOIN genEntidades ON
	genEntidades.genEntidades =comMovProv.Proveed_Id
	INNER JOIN genMonedas ON
	genMonedas.genMonedas = conAsientos.Moneda_Id
	INNER JOIN comProveedores ON comMovProv.Proveed_Id = comProveedores.genEntidades
	INNER JOIN genEmpresas ON  genEmpresas.genEmpresas = conAsientos.Empresa_Id
WHERE
	comMovprov.ClaveFiscal IS NOT NULL AND 
	genEmpresas.Pais_Id = comProveedores.Pais and 
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha between @FechaDesde and @FechaHasta

-- Aplicacion en Compras
UNION ALL
SELECT conAsientos.conAsientos,	comMovProv.ClaveFiscal as UUID_CFDI,
	genEntidades.Cuit AS RFC, genCancMov.Importe as MontoTotal, 
	genMonedas.CodigoFiscal as Moneda, conAsientos.Cambio as TipCamb
from conAsientos inner join genCancMov ON 
	genCancMov.AsientoApli_Id = conAsientos.conAsientos
	INNER JOIN comMovProv ON
	genCancMov.Asiento_Id_ap = comMovProv.comMovProv
	INNER JOIN genEntidades ON
	genEntidades.genEntidades =comMovProv.Proveed_Id
	INNER JOIN genMonedas ON
	genMonedas.genMonedas = conAsientos.Moneda_Id
	INNER JOIN comProveedores ON comMovProv.Proveed_Id = comProveedores.genEntidades
	INNER JOIN genEmpresas ON  genEmpresas.genEmpresas = conAsientos.Empresa_Id
WHERE
	genEmpresas.Pais_Id = comProveedores.Pais and 
	comMovprov.ClaveFiscal IS NOT NULL AND 
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha between @FechaDesde and @FechaHasta
UNION ALL
SELECT conAsientos.conAsientos,	comMovProv.ClaveFiscal as UUID_CFDI,
	genEntidades.Cuit AS RFC, genCancMov.Importe as MontoTotal, 
	genMonedas.CodigoFiscal as Moneda, conAsientos.Cambio as TipCamb
from conAsientos inner join genCancMov ON 
	genCancMov.AsientoApli_Id = conAsientos.conAsientos
	INNER JOIN comMovProv ON
	genCancMov.Asiento_Id = comMovProv.comMovProv
	INNER JOIN genEntidades ON
	genEntidades.genEntidades =comMovProv.Proveed_Id
	INNER JOIN genMonedas ON
	genMonedas.genMonedas = conAsientos.Moneda_Id
	INNER JOIN comProveedores ON comMovProv.Proveed_Id = comProveedores.genEntidades
	INNER JOIN genEmpresas ON  genEmpresas.genEmpresas = conAsientos.Empresa_Id
WHERE
	genEmpresas.Pais_Id = comProveedores.Pais and 
	comMovprov.ClaveFiscal IS NOT NULL AND 
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha between @FechaDesde and @FechaHasta
-- Diferencias en Cambios
UNION ALL
SELECT conAsientos.conAsientos,	comMovProv.ClaveFiscal as UUID_CFDI,
	genEntidades.Cuit AS RFC, genCancMov.Importe as MontoTotal, 
	genMonedas.CodigoFiscal as Moneda, conAsientos.Cambio as TipCamb
from conAsientos inner join genCancMov ON 
	genCancMov.AsieDifCambio_Id = conAsientos.conAsientos
	INNER JOIN comMovProv ON
	genCancMov.Asiento_Id_ap = comMovProv.comMovProv
	INNER JOIN genEntidades ON
	genEntidades.genEntidades =comMovProv.Proveed_Id
	INNER JOIN genMonedas ON
	genMonedas.genMonedas = conAsientos.Moneda_Id
	INNER JOIN comProveedores ON comMovProv.Proveed_Id = comProveedores.genEntidades
	INNER JOIN genEmpresas ON  genEmpresas.genEmpresas = conAsientos.Empresa_Id
WHERE
	genEmpresas.Pais_Id = comProveedores.Pais and 
	comMovprov.ClaveFiscal IS NOT NULL AND 
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha between @FechaDesde and @FechaHasta
UNION ALL
SELECT conAsientos.conAsientos,	comMovProv.ClaveFiscal as UUID_CFDI,
	genEntidades.Cuit AS RFC, genCancMov.Importe as MontoTotal, 
	genMonedas.CodigoFiscal as Moneda, conAsientos.Cambio as TipCamb
from conAsientos inner join genCancMov ON 
	genCancMov.AsieDifCambio_Id = conAsientos.conAsientos
	INNER JOIN comMovProv ON
	genCancMov.Asiento_Id = comMovProv.comMovProv
	INNER JOIN genEntidades ON
	genEntidades.genEntidades =comMovProv.Proveed_Id
	INNER JOIN genMonedas ON
	genMonedas.genMonedas = conAsientos.Moneda_Id
	INNER JOIN comProveedores ON comMovProv.Proveed_Id = comProveedores.genEntidades
	INNER JOIN genEmpresas ON  genEmpresas.genEmpresas = conAsientos.Empresa_Id
WHERE
	genEmpresas.Pais_Id = comProveedores.Pais and 
	comMovprov.ClaveFiscal IS NOT NULL AND 
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha between @FechaDesde and @FechaHasta
-- FIN PROVEDORES
-- Complementos de Pago
UNION ALL
SELECT conAsientos.conAsientos,	tesCFDICobranza.UUID as UUID_CFDI,
	genEntidades.Cuit AS RFC, venMovimientos.Importe as MontoTotal, 
	genMonedas.CodigoFiscal as Moneda, conAsientos.Cambio as TipCamb
from conAsientos inner join venMovimientos ON 
	venMovimientos.venMovimientos =conAsientos.conAsientos
	INNER JOIN genEntidades ON
	genEntidades.genEntidades =venMovimientos.Cliente_Id
	INNER JOIN genMonedas ON
	genMonedas.genMonedas = conAsientos.Moneda_Id
	INNER JOIN tesCFDICobranzaCuerpo ON	tesCFDICobranzaCuerpo.tesMovimientos = conAsientos.conAsientos
	INNER JOIN tesCFDICobranza ON tesCFDICobranza.tesCFDICobranza = tesCFDICobranzaCuerpo.tesCFDICobranza
WHERE
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha between @FechaDesde and @FechaHasta
-- Aplicacion en Ventas
UNION ALL
SELECT conAsientos.conAsientos,	tesCFDICobranza.UUID as UUID_CFDI,
	genEntidades.Cuit AS RFC, genCancMov.Importe as MontoTotal, 
	genMonedas.CodigoFiscal as Moneda, conAsientos.Cambio as TipCamb
from conAsientos inner join genCancMov ON 
	genCancMov.AsientoApli_Id = conAsientos.conAsientos
	INNER JOIN tesCFDICobranzaCuerpo ON
	genCancMov.Asiento_Id_ap = tesCFDICobranzaCuerpo.tesMovimientos
	INNER JOIN tesCFDICobranza ON
	tesCFDICobranza.tesCFDICobranza = tesCFDICobranzaCuerpo.tesCFDICobranza
	INNER JOIN genEntidades ON
	genEntidades.genEntidades =tesCFDICobranza.Cliente_Id
	INNER JOIN genMonedas ON
	genMonedas.genMonedas = conAsientos.Moneda_Id
WHERE
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha between @FechaDesde and @FechaHasta
-- Diferencias en Cambios
UNION ALL
SELECT conAsientos.conAsientos,	tesCFDICobranza.UUID as UUID_CFDI,
	genEntidades.Cuit AS RFC, genCancMov.Importe as MontoTotal, 
	genMonedas.CodigoFiscal as Moneda, conAsientos.Cambio as TipCamb
from conAsientos inner join genCancMov ON 
	genCancMov.AsieDifCambio_Id = conAsientos.conAsientos
	INNER JOIN tesCFDICobranzaCuerpo ON
	genCancMov.Asiento_Id_Ap = tesCFDICobranzaCuerpo.tesMovimientos
	INNER JOIN tesCFDICobranza ON 
	tesCFDICobranza.tesCFDICobranza =  tesCFDICobranzaCuerpo.tesCFDICobranza
	INNER JOIN genEntidades ON
	genEntidades.genEntidades =tesCFDICobranza.Cliente_Id
	INNER JOIN genMonedas ON
	genMonedas.genMonedas = conAsientos.Moneda_Id
WHERE
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha between @FechaDesde and @FechaHasta
--- FIN COMPLEMENTO DE PAGO
-- NOMINAS
UNION ALL
SELECT conAsientos.conAsientos,	sueNominaCfdi.UUID as UUID_CFDI,
	genEntidades.Cuit AS RFC, 
	SUM(sueTerminada.Importe * sueTerminada.Signo)	 as MontoTotal, 
	genMonedas.CodigoFiscal as Moneda, conAsientos.Cambio as TipCamb
from conAsientos inner join sueNominaCfdi ON 
	sueNominaCfdi.sueLiquidacion = conAsientos.conAsientos
	INNER JOIN genEntidades ON
	genEntidades.genEntidades = sueNominaCfdi.Legajo
	INNER JOIN genMonedas ON
	genMonedas.genMonedas = conAsientos.Moneda_Id
	INNER JOIN sueTerminada ON 
	sueTerminada.sueLiquidacion =  sueNominaCfdi.sueLiquidacion 
WHERE
	sueTerminada.Signo <> 0 and 
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha between @FechaDesde and @FechaHasta
group by conAsientos.conAsientos,	sueNominaCfdi.UUID ,
	genEntidades.Cuit , genMonedas.CodigoFiscal , conAsientos.Cambio 


ORDER BY 1,2

-- CFD Ya no tengo

SELECT conAsientos.conAsientos,  ' ' AS CFD_CBB_Serie, 0 AS CFD_CBB_NumFol, ' ' as RFC, 0.00 AS MontoTotal, 
	' ' as Moneda, 0.00 as TipCamb
from conAsientos
where 1= 2
	

-- Extranjero

SELECT conAsientos.conAsientos,
	dbo.Segmento(genAsiSegmentos.Segmento_Id, 
		genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,genAsiSegmentos.Segmento4C,
		genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N) AS NumFactExt,
	genEntidades.IdFiscal as TxtId, comMovProv.Importe as MontoTotal,
	genMonedas.CodigoFiscal as Moneda, conAsientos.Cambio as TipCamb	
from genAsiSegmentos INNER JOIN genSegmentos ON 
	genAsiSegmentos.Segmento_Id = genSegmentos.genSegmentos
	INNER JOIN conAsientos ON 
	conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
	INNER JOIN comMovProv ON comMovProv.comMovProv = conAsientos.conAsientos 
	INNER JOIN genEntidades ON genEntidades.genEntidades = comMovProv.Proveed_Id
	INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
	INNER JOIN comProveedores ON  comProveedores.genEntidades = comMovProv.Proveed_Id
	inner join genEmpresas ON  genEmpresas.genEmpresas = conAsientos.Empresa_Id
WHERE
	genEmpresas.Pais_Id <> comProveedores.Pais and
	comMovprov.Tipomov NOT IN ('P','C') AND 
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha between @FechaDesde and @FechaHasta	
Order By 1,2

-- Cheques

SELECT conAsientos.conAsientos,  tesBPlink.conRenglon, 
	LTRIM(STR(tesChequeras.Chequera_Id,8))+'-' +  LTRIM(STR(tesCheqProp.numCheque,9)) as Num, 
			tesBancos.Banco_Id as BanEmisNal, 
			tesIdBancoPropio.Referencia BanEmisExt, tesIdBancoPropio.numCuenta CtaOri, 
			tesCheqProp.FechaVencimiento Fecha, tesCheqProp.aLaOrden Benef, tesCheqProp.Cuit as Rfc, 
			conMovCont.ImporteMonedaOriginal as Importe, genMonedas.Moneda_Id , 
				case when genMonedas.genMonedas = genEmpresas.Medida_Id then 1 else 
					conAsientos.Cambio END TipCamb
from conAsientos INNER JOIN tesMovimientos ON
	conAsientos.conAsientos = tesMovimientos.tesMovimientos 
	INNER JOIN tesRengMovi ON tesRengMovi.tesMovimientos = tesMovimientos.tesMovimientos 
	INNER JOIN conMovCont ON  conMovCont.conAsientos = tesRengMovi.tesMovimientos and 
							  conMovCont.Renglon = tesRengMovi.conRenglon
	INNER JOIN  tesIdBancoPropio ON tesIdBancoPropio.Cartera_Id = tesRengMovi.Cartera_Id
	INNER JOIN tesIdentifica ON tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id
	LEFT JOIN tesBancos ON tesBancos.tesBancos = tesIdBancoPropio.Banco_Id
	INNER JOIN tesBPlink ON tesBPlink.tesmovimientos = tesRengMovi.tesMovimientos AND 
							tesBPlink.conRenglon = tesRengMovi.conRenglon 
	INNER JOIN  tesCheqProp ON tesCheqProp.tesCheqProp = tesBPlink.tesCheqProp
	INNER JOIN tesChequeras ON tesChequeras.Chequera_Id = tesCheqProp.Chequera_Id and 
								tesChequeras.Cartera_Id = tesCheqProp.Cartera_Id
	INNER JOIN genMonedas ON  genMonedas.genMonedas = tesIdentifica.Moneda_Id
	inner join genEmpresas ON  genEmpresas.genEmpresas = conAsientos.Empresa_Id
where
	tesChequeras.TipoChequera = 'M' AND 
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha between @FechaDesde and @FechaHasta	
Order By 1,2
				

-- Transferencia

SELECT conAsientos.conAsientos,  tesBPlink.conRenglon, 
		tesIdBancoPropio.numCuenta CtaOri,	tesBancos.Banco_Id as BanEmisNal, 
			tesIdBancoPropio.Referencia BanEmisExt, 
			tesCheqProp.CuentaDestino as CtaDest, 
			tesBancosDes.Banco_Id as BancoDestNal, tesCheqProp.BancoDestinoExt BancoDestExt,
			tesCheqProp.FechaVencimiento Fecha, tesCheqProp.aLaOrden Benef, tesCheqProp.Cuit as Rfc, 
			conMovCont.ImporteMonedaOriginal as Importe, genMonedas.Moneda_Id , 
				case when genMonedas.genMonedas = genEmpresas.Medida_Id then 1 else 
					conAsientos.Cambio END TipCamb
from conAsientos INNER JOIN tesMovimientos ON
	conAsientos.conAsientos = tesMovimientos.tesMovimientos 
	INNER JOIN tesRengMovi ON tesRengMovi.tesMovimientos = tesMovimientos.tesMovimientos 
	INNER JOIN conMovCont ON  conMovCont.conAsientos = tesRengMovi.tesMovimientos and 
							  conMovCont.Renglon = tesRengMovi.conRenglon
	INNER JOIN  tesIdBancoPropio ON tesIdBancoPropio.Cartera_Id = tesRengMovi.Cartera_Id
	INNER JOIN tesIdentifica ON tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id
	LEFT JOIN tesBancos ON tesBancos.tesBancos = tesIdBancoPropio.Banco_Id
	INNER JOIN tesBPlink ON tesBPlink.tesmovimientos = tesRengMovi.tesMovimientos AND 
							tesBPlink.conRenglon = tesRengMovi.conRenglon 
	INNER JOIN  tesCheqProp ON tesCheqProp.tesCheqProp = tesBPlink.tesCheqProp
	INNER JOIN tesChequeras ON tesChequeras.Chequera_Id = tesCheqProp.Chequera_Id and 
								tesChequeras.Cartera_Id = tesCheqProp.Cartera_Id
	INNER JOIN genMonedas ON  genMonedas.genMonedas = tesIdentifica.Moneda_Id
	inner join genEmpresas ON  genEmpresas.genEmpresas = conAsientos.Empresa_Id
	LEFT JOIN tesBancos tesBancosDes on tesBancosDes.tesBancos = tesCheqProp.BancoDestino
where
	tesChequeras.TipoChequera = 'B' AND 
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha between @FechaDesde and @FechaHasta	
Order By 1,2

-- Metodos de Pago otros distintos a Cheque o Transferencia


SELECT conAsientos.conAsientos,  tesRengMovi.conRenglon, 
		tesIdentifica.FormaDePagoP MetPagoPol,
			conAsientos.Fecha,  comProveedores.RazonSocial as Benef, 
			genEntidades.Cuit as Rfc, conMovCont.ImporteMonedaOriginal as Importe, 
			genMonedas.Moneda_Id , 
				case when genMonedas.genMonedas = genEmpresas.Medida_Id then 1 else 
					conAsientos.Cambio END TipCamb
from conAsientos INNER JOIN tesMovimientos ON
	conAsientos.conAsientos = tesMovimientos.tesMovimientos 
	INNER JOIN tesRengMovi ON tesRengMovi.tesMovimientos = tesMovimientos.tesMovimientos 
	INNER JOIN conMovCont ON  conMovCont.conAsientos = tesRengMovi.tesMovimientos and 
							  conMovCont.Renglon = tesRengMovi.conRenglon
	INNER JOIN tesIdentifica ON tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id
	
	INNER JOIN genMonedas ON  genMonedas.genMonedas = tesIdentifica.Moneda_Id
	inner join genEmpresas ON  genEmpresas.genEmpresas = conAsientos.Empresa_Id
	Inner join comMovProv ON  comMovProv.comMovProv = conAsientos.conAsientos 
	INNER JOIN genEntidades ON  genEntidades.genEntidades = comMovProv.Proveed_Id
	INNER JOIN comProveedores ON comProveedores.genEntidades = genEntidades.genEntidades
where
	not exists(SELECT 1 FROM tesBPlink WHERE 
			tesBPlink.tesmovimientos = tesRengMovi.tesMovimientos AND 
			tesBPlink.conRenglon = tesRengMovi.conRenglon ) AND 
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha between @FechaDesde and @FechaHasta	
Order By 1,2




Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conRubroPrevi.sql*/
drop Procedure conRubroPreviDatos
go
create Procedure conRubroPreviDatos
(
@pRubroPrevi_Id varchar(5)
)
as
set nocount on
select RubroPrevi_Id, Descripcion, ActivoPasivo,Corriente,Orden,Empresa_Id from conRubrosPrevi
where RubroPrevi_Id=@pRubroPrevi_Id

select conCuentas.Cuenta_Id,conCuentas.Descripcion as DescripcionCuenta from conRubrosPreviCtas
inner join conCuentas on conCuentas.conCuentas=conRubrosPreviCtas.Cuenta_Id
where RubroPrevi_Id=@pRubroPrevi_Id
go
drop Procedure conRubroPreviGuardar
go
create Procedure conRubroPreviGuardar
(
@pRubroPrevi_Id varchar(5),
@pDescripcion varchar(100),
@pEmpresa_Id int,
@pActivoPasivo char(1),
@pCorriente sino,
@pOrden int
)
as
set nocount on
if( exists(select 1 from conRubrosPrevi where RubroPrevi_Id=@pRubroPrevi_Id))
begin
update conRubrosPrevi set Descripcion=@pDescripcion, Empresa_Id=@pEmpresa_Id, ActivoPasivo=@pActivoPasivo,
Corriente=@pCorriente,Orden=@pOrden
end
else
begin
insert into conRubrosPrevi (RubroPrevi_Id,Descripcion,Empresa_Id,ActivoPasivo,Corriente,Orden)
values(@pRubroPrevi_Id,@pDescripcion,@pEmpresa_Id,@pActivoPasivo,@pCorriente,@pOrden)
end
go
drop procedure conRubroPreviEliminar
go
create procedure conRubroPreviEliminar
(
@pRubroPrevi_Id varchar(5)
)
as
delete from conRubrosPrevi where RubroPrevi_Id=@pRubroPrevi_Id
go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conRubroPreviCtas.sql*/
drop Procedure conRubroPreviCtasInsertar
go
create Procedure conRubroPreviCtasInsertar
(
@pRubroPrevi_Id varchar(5),
@pCuenta_Id varchar(25)
)
as
set nocount on
insert into conRubrosPreviCtas(RubroPrevi_Id,Cuenta_Id)
values(@pRubroPrevi_Id,dbo.FuncFKconCuentas(@pCuenta_Id))
go

drop procedure conRubroPreviCtasEliminar
go
create procedure conRubroPreviCtasEliminar
(
@pRubroPrevi_Id varchar(5)
)
as
set nocount on
delete from conRubrosPreviCtas where conRubrosPreviCtas.RubroPrevi_Id=@pRubroPrevi_Id
GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conRubros.sql*/
DROP PROCEDURE conRubrosGuardar
GO
CREATE PROCEDURE conRubrosGuardar
(
@pRubro_Id char(1),
@pDescripcion varchar(35),
@pTipo char(3)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM conRubros WHERE (Rubro_Id = @pRubro_Id)))
BEGIN 
	UPDATE conRubros
	SET		Descripcion = @pDescripcion,
		Tipo = @pTipo
	WHERE (Rubro_Id = @pRubro_Id)
END 
ELSE 
BEGIN 
	INSERT INTO conRubros
	(
		Rubro_Id,
		Descripcion,
		Tipo
	)
	VALUES 
	(
		@pRubro_Id,
		@pDescripcion,
		@pTipo
	)
END 

GO

DROP PROCEDURE conRubrosDatos
GO
CREATE PROCEDURE conRubrosDatos
(
@pRubro_Id char(1)
)
AS
SET NOCOUNT ON 

SELECT conRubros.Rubro_Id, conRubros.Descripcion, conRubros.Tipo
FROM conRubros 
WHERE (Rubro_Id = @pRubro_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE conRubrosEliminar
GO
CREATE PROCEDURE conRubrosEliminar
(
@pRubro_Id char(1) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM conRubros 
WHERE (Rubro_Id = ISNULL(@pRubro_Id, Rubro_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conRubrosAxi.sql*/
DROP PROCEDURE conRubrosAxiGuardar
GO
CREATE PROCEDURE conRubrosAxiGuardar
(
@pRubroAxi_Id int,
@pRubroAxi_Id_Nueva int,
@pDescripcion varchar(120),
@pRubro_Id char(1),
@pEmpresa_Id int = NULL,
@pPosteado bit,
@pInactivo bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM conRubrosAxi WHERE RubroAxi_Id = @pRubroAxi_Id))
BEGIN 
	UPDATE conRubrosAxi
	SET		@lIdentidad = conRubrosAxi,
		RubroAxi_Id = @pRubroAxi_Id_Nueva,
		Descripcion = @pDescripcion,
		Rubro_Id = @pRubro_Id,
		Empresa_Id = @pEmpresa_Id,
		Posteado = @pPosteado,
		Inactivo = @pInactivo
	WHERE 
		RubroAxi_Id = @pRubroAxi_Id
END 
ELSE 
BEGIN 
	INSERT INTO conRubrosAxi
	(
		RubroAxi_Id,
		Descripcion,
		Rubro_Id,
		Empresa_Id,
		Posteado,
		Inactivo
	)
	VALUES 
	(
		@pRubroAxi_Id,
		@pDescripcion,
		@pRubro_Id,
		@pEmpresa_Id,
		@pPosteado,
		@pInactivo
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE conRubrosAxiDatos
GO
CREATE PROCEDURE conRubrosAxiDatos
(
	@pRubroAxi_Id int
)
AS
SET NOCOUNT ON 

SELECT conRubrosAxi.conRubrosAxi, conRubrosAxi.RubroAxi_Id, conRubrosAxi.Descripcion, conRubrosAxi.Rubro_Id,
	conRubros.Descripcion as DescripcionRubros, conRubrosAxi.RubroAxi_Id RubroAxi_Id_Nueva, conRubrosAxi.Empresa_Id, Cast( Case When conRubrosAxi.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	conRubrosAxi.Posteado, conRubrosAxi.Inactivo
FROM conRubrosAxi 
INNER JOIN conRubros  ON (conRubros.Rubro_Id = conRubrosAxi.Rubro_Id)
WHERE  
	RubroAxi_Id = @pRubroAxi_Id 

 Declare @pidentity bigint= dbo.FuncFKconRubrosAxi(@pRubroAxi_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'conRubrosAxi'
 RETURN @@Error 

GO

DROP PROCEDURE conRubrosAxiEliminar
GO
CREATE PROCEDURE conRubrosAxiEliminar
(
	@pRubroAxi_Id int
)
AS
SET NOCOUNT ON 

DELETE FROM conRubrosAxi WHERE RubroAxi_Id = @pRubroAxi_Id 
RETURN @@Error 

GO

DROP FUNCTION FuncFKconRubrosAxi
GO

CREATE FUNCTION FuncFKconRubrosAxi
(
@pRubroAxi_Id int
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = conRubrosAxi FROM conRubrosAxi WHERE 
	RubroAxi_Id = @pRubroAxi_Id
  RETURN @pIdentity
END

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conSituPatri.sql*/
DROP PROCEDURE conSituPatriGuardar
GO
CREATE PROCEDURE conSituPatriGuardar
(
@pRubro_Balance varchar(15),
@pRubro_Id char(1),
@pDescripcion char(35),
@pOrden int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM conSituPatri WHERE (Rubro_Balance = @pRubro_Balance)))
BEGIN 
	UPDATE conSituPatri
	SET		Rubro_Id = @pRubro_Id,
		Descripcion = @pDescripcion,
		Orden = @pOrden
	WHERE (Rubro_Balance = @pRubro_Balance)
END 
ELSE 
BEGIN 
	INSERT INTO conSituPatri
	(
		Rubro_Balance,
		Rubro_Id,
		Descripcion,
		Orden
	)
	VALUES 
	(
		@pRubro_Balance,
		@pRubro_Id,
		@pDescripcion,
		@pOrden
	)
END 

GO

DROP PROCEDURE conSituPatriDatos
GO
CREATE PROCEDURE conSituPatriDatos
(
@pRubro_Balance varchar(15)
)
AS
SET NOCOUNT ON 

SELECT conSituPatri.Rubro_Balance, conSituPatri.Rubro_Id, conRubros.Descripcion as DescripcionRubros, conSituPatri.Descripcion,
	conSituPatri.Orden
FROM conSituPatri 
INNER JOIN conRubros  ON (conRubros.Rubro_Id = conSituPatri.Rubro_Id)
WHERE (Rubro_Balance = @pRubro_Balance)
 
 RETURN @@Error 

GO

DROP PROCEDURE conSituPatriEliminar
GO
CREATE PROCEDURE conSituPatriEliminar
(
@pRubro_Balance varchar(15) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM conSituPatri 
WHERE (Rubro_Balance = ISNULL(@pRubro_Balance, Rubro_Balance))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conSubCuentas.sql*/
-- AJ FEB 2020 Cambie para que el modificar cambie las cuentas tambien

DROP PROCEDURE conSubCuentasGuardar
GO
CREATE PROCEDURE conSubCuentasGuardar
(
@pSubCuenta_Id varchar(14),
@pSubCuenta_Id_Nuevo varchar(14),
@pEmpresa_Id int,
@pDescripcion varchar(50),
@pCuadro1Fila_Id int,
@pBase_Id varchar(5) = NULL,
@pAjustable Sino,
@pInactivo Sino,
@pUsuario_Id int,
@pPosteado Sino, 
@pDescription VarChar(50)
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
DECLARE @Digitos int 

IF (EXISTS (SELECT 1 FROM conSubCuentas WHERE (SubCuenta_Id = @pSubCuenta_Id)))
BEGIN 
	UPDATE conSubCuentas
	SET		@lIdentidad = conSubCuentas,
		SubCuenta_Id = @pSubCuenta_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Base_Id = dbo.FuncFKconBaseDistri(@pBase_Id),
		Cuadro1Fila_Id = dbo.FuncFKconCuadro1Filas(@pCuadro1Fila_Id),
		Ajustable = @pAjustable,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado, 
		Description = @pDescription
	WHERE (SubCuenta_Id = @pSubCuenta_Id)
	SET @Digitos = isnull((SELECT conDigiCta FROM genInstalacion),5)
	Update conCuentas SET Descripcion = RTRIM(isnull((select conCuentasSinSc.Descripcion
		from conCuentas conCuentas1, conCuentasSinSc
		where
			conCuentasSinSc.Cuenta_Id = conCuentas1.conCuentas and 
			  conCuentas.Cuenta_Id LIKE LEFT(conCuentas1.Cuenta_id,@Digitos)+'%'),''))+@pDescripcion
	where	conCuentas.SubCuenta_Id = @lIdentidad
	if @pSubCuenta_Id != @pSubCuenta_Id_Nuevo
	begin
		Update conCuentas SET Cuenta_Id = LEFT(conCuentas.Cuenta_id,@Digitos)+@pSubCuenta_Id_Nuevo
			where	conCuentas.SubCuenta_Id = @lIdentidad
	end

	
END 
ELSE 
BEGIN 
	INSERT INTO conSubCuentas
	(
		SubCuenta_Id,
		Empresa_Id,
		Descripcion,
		Base_Id,
		Cuadro1Fila_Id,
		Ajustable,
		Inactivo,
		Usuario_Id,
		Posteado, 
		Description
	)
	VALUES 
	(
		@pSubCuenta_Id,
		@pEmpresa_Id,
		@pDescripcion,
		dbo.FuncFKconBaseDistri(@pBase_Id),
		dbo.FuncFKconCuadro1Filas(@pCuadro1Fila_Id),
		@pAjustable,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado, 
		@pDescription
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO





DROP PROCEDURE conSubCuentasDatos
GO
CREATE PROCEDURE conSubCuentasDatos
(
@pSubCuenta_Id varchar(14)
)
AS
SET NOCOUNT ON 

SELECT conSubCuentas.conSubCuentas, conSubCuentas.SubCuenta_Id, 
Cast(case when conSubCuentas.Empresa_Id is null then 1 else 0 end  as bit) PTodasEmpresas,
conSubCuentas.Empresa_Id, conSubCuentas.Descripcion,
	conBaseDistri.Base_Id, conBaseDistri.Descripcion as DescripcionBaseDistri, conCuadro1Filas.Cuadro1Fila_Id, 
	conCuadro1Filas.Descripcion as DescripcionCuadro1Filas,
	conSubCuentas.Ajustable, conSubCuentas.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
	conSubCuentas.Posteado, conSubCuentas.Description
FROM conSubCuentas 
LEFT JOIN conBaseDistri  ON (conBaseDistri.conBaseDistri = conSubCuentas.Base_Id)
LEFT  JOIN conCuadro1Filas  ON (conCuadro1Filas.conCuadro1Filas = conSubCuentas.Cuadro1Fila_Id)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = conSubCuentas.Usuario_Id)
WHERE (SubCuenta_Id = @pSubCuenta_Id)
 


  Declare @pidentity bigint= dbo.FuncFKconSubCuentas(@pSubCuenta_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'conSubCuentas'
 RETURN @@Error 

GO

DROP PROCEDURE conSubCuentasEliminar
GO
CREATE PROCEDURE conSubCuentasEliminar
(
@pSubCuenta_Id varchar(14) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM conSubCuentas 
WHERE (SubCuenta_Id = @pSubCuenta_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKconSubCuentas
GO

CREATE FUNCTION FuncFKconSubCuentas
(
@pSubCuenta_Id varchar (14)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = conSubCuentas FROM conSubCuentas WHERE 
	SubCuenta_Id = @pSubCuenta_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conTipoEspeciales.sql*/
DROP PROCEDURE conTipoEspecialesGuardar
GO
CREATE PROCEDURE conTipoEspecialesGuardar
(
@pTipoEspe_Id varchar(5),
@pDescripcion varchar(35)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM conTipoEspeciales WHERE (TipoEspe_Id = @pTipoEspe_Id)))
BEGIN 
	UPDATE conTipoEspeciales
	SET		Descripcion = @pDescripcion
	WHERE (TipoEspe_Id = @pTipoEspe_Id)
END 
ELSE 
BEGIN 
	INSERT INTO conTipoEspeciales
	(
		TipoEspe_Id,
		Descripcion
	)
	VALUES 
	(
		@pTipoEspe_Id,
		@pDescripcion
	)
END 

GO

DROP PROCEDURE conTipoEspecialesDatos
GO
CREATE PROCEDURE conTipoEspecialesDatos
(
@pTipoEspe_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT conTipoEspeciales.TipoEspe_Id, conTipoEspeciales.Descripcion
FROM conTipoEspeciales 
WHERE (TipoEspe_Id = @pTipoEspe_Id)

SELECT conTipoEspecialesCuerpo.TipoEspe_Id, conTipoEspeciales.Descripcion as DescripcionTipoEspeciales, 
	conTipoEspecialesCuerpo.Tipo_Id, conTiposContables.Descripcion as DescripcionTiposContables
FROM conTipoEspecialesCuerpo 
INNER JOIN conTipoEspeciales ON (conTipoEspeciales.TipoEspe_Id = conTipoEspecialesCuerpo.TipoEspe_Id)
INNER JOIN conTiposContables ON (conTiposContables.Tipo_Id = conTipoEspecialesCuerpo.Tipo_Id)
WHERE conTipoEspecialesCuerpo.TipoEspe_Id = @pTipoEspe_Id

 
 RETURN @@Error 

GO

DROP PROCEDURE conTipoEspecialesEliminar
GO
CREATE PROCEDURE conTipoEspecialesEliminar
(
@pTipoEspe_Id varchar(5)
)
AS
SET NOCOUNT ON 

DELETE FROM conTipoEspeciales 
WHERE TipoEspe_Id = @pTipoEspe_Id
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conTipoEspecialesCuerpo.sql*/
DROP PROCEDURE conTipoEspecialesCuerpoGuardar
GO
CREATE PROCEDURE conTipoEspecialesCuerpoGuardar
(
@pTipoEspe_Id varchar(5),
@pTipo_Id varchar(5)
)
AS
SET NOCOUNT ON 
	INSERT INTO conTipoEspecialesCuerpo
	(
		TipoEspe_Id,
		Tipo_Id
	)
	VALUES 
	(
		@pTipoEspe_Id,
		@pTipo_Id
	)
GO

DROP PROCEDURE conTipoEspecialesCuerpoEliminar
GO
CREATE PROCEDURE conTipoEspecialesCuerpoEliminar
(
@pTipoEspe_Id varchar(5),
@pTipo_Id varchar(5) = Null
)
AS
SET NOCOUNT ON 

DELETE FROM conTipoEspecialesCuerpo 
WHERE TipoEspe_Id = @pTipoEspe_Id
AND Tipo_Id = IsNull(@pTipo_Id, Tipo_Id)
 
 RETURN @@Error 

GO

GO
DROP PROCEDURE conTipoEspecialesCuerpoDatos
GO
CREATE PROCEDURE conTipoEspecialesCuerpoDatos
(
@pTipoEspe_Id varchar(5),
@pTipo_Id varchar(5) = Null
)
AS
SET NOCOUNT ON 

SELECT Tipo_Id, TipoEspe_Id FROM conTipoEspecialesCuerpo 
WHERE TipoEspe_Id = @pTipoEspe_Id
	AND Tipo_Id = IsNull(@pTipo_Id, Tipo_Id)
 
 RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\contiposcontables.sql*/
DROP PROCEDURE conTiposContablesGuardar
GO
CREATE PROCEDURE conTiposContablesGuardar
(
@pTipo_Id varchar(5),
@pDescripcion varchar(45),
@pRubro_Balance varchar(15),
@pDestino char(10),
@pCorriente char(1),
@pReservado Sino,
@pRubro_Id char(1),
@pDescripcionUsu varchar(45)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM conTiposContables WHERE (Tipo_Id = @pTipo_Id)))
BEGIN 
	UPDATE conTiposContables
	SET		Descripcion = @pDescripcion,
		Rubro_Balance = @pRubro_Balance,
		Destino = @pDestino,
		Corriente = @pCorriente,
		Reservado = @pReservado,
		Rubro_Id = @pRubro_Id,
		DescripcionUsu = @pDescripcionUsu
	WHERE (Tipo_Id = @pTipo_Id)
END 
ELSE 
BEGIN 
	INSERT INTO conTiposContables
	(
		Tipo_Id,
		Descripcion,
		Rubro_Balance,
		Destino,
		Corriente,
		Reservado,
		Rubro_Id,
		DescripcionUsu
	)
	VALUES 
	(
		@pTipo_Id,
		@pDescripcion,
		@pRubro_Balance,
		@pDestino,
		@pCorriente,
		@pReservado,
		@pRubro_Id,
		@pDescripcionUsu
	)
END 

GO

DROP PROCEDURE conTiposContablesDatos
GO
CREATE PROCEDURE conTiposContablesDatos
(
@pTipo_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT conTiposContables.Tipo_Id, conTiposContables.Descripcion, conTiposContables.Rubro_Balance, conSituPatri.Descripcion as DescripcionSituPatri,
	conTiposContables.Destino, conTiposContables.Corriente, conTiposContables.Reservado, conTiposContables.Rubro_Id,
	conRubros.Descripcion as DescripcionRubros, conTiposContables.DescripcionUsu
FROM conTiposContables 
INNER JOIN conSituPatri  ON (conSituPatri.Rubro_Balance = conTiposContables.Rubro_Balance)
INNER JOIN conRubros  ON (conRubros.Rubro_Id = conTiposContables.Rubro_Id)
WHERE (Tipo_Id = @pTipo_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE conTiposContablesEliminar
GO
CREATE PROCEDURE conTiposContablesEliminar
(
@pTipo_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM conTiposContables 
WHERE (Tipo_Id = ISNULL(@pTipo_Id, Tipo_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conTiposSAT.sql*/
DROP PROCEDURE conTiposSATGuardar
GO
CREATE PROCEDURE conTiposSATGuardar
(
@pTipoSAT_Id varchar(25),
@pDescripcion varchar(200),
@pRubro char(3),
@pCirculante Sino,
@pImputable Sino
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM conTiposSAT WHERE (TipoSAT_Id = @pTipoSAT_Id)))
BEGIN 
	UPDATE conTiposSAT
	SET		Descripcion = @pDescripcion,
		Rubro = @pRubro,
		Circulante = @pCirculante,
		Imputable = @pImputable
	WHERE (TipoSAT_Id = @pTipoSAT_Id)
END 
ELSE 
BEGIN 
	INSERT INTO conTiposSAT
	(
		TipoSAT_Id,
		Descripcion,
		Rubro,
		Circulante,
		Imputable
	)
	VALUES 
	(
		@pTipoSAT_Id,
		@pDescripcion,
		@pRubro,
		@pCirculante,
		@pImputable
	)
END 

GO

DROP PROCEDURE conTiposSATDatos
GO
CREATE PROCEDURE conTiposSATDatos
(
@pTipoSAT_Id varchar(25)
)
AS
SET NOCOUNT ON 

SELECT conTiposSAT.TipoSAT_Id, conTiposSAT.Descripcion, conTiposSAT.Rubro, conTiposSAT.Circulante,
	conTiposSAT.Imputable
FROM conTiposSAT 
WHERE (TipoSAT_Id = @pTipoSAT_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE conTiposSATEliminar
GO
CREATE PROCEDURE conTiposSATEliminar
(
@pTipoSAT_Id varchar(25) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM conTiposSAT 
WHERE (TipoSAT_Id = ISNULL(@pTipoSAT_Id, TipoSAT_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\conVeriCentro12.sql*/
--  conVeriCentro12Datos '7300-102', '10000000',' '

DROP PROCEDURE conVeriCentro12Datos
GO
CREATE PROCEDURE conVeriCentro12Datos
(
	@pCuenta_Id VarChar(25),
	@pCentro1_Id VarChar(8),
	@pCentro2_Id VarChar(8)
)
as
Select  conCuentas.Cuenta_Id, conCuentas.Descripcion, conCentro1.Centro1_Id, conCentro2.Centro2_Id 
From conGrupoCentro 
Inner join conCuentas ON conGrupoCentro.Grupo_Id = conCuentas.Grupo_Id 
INNER JOIN conCentro1 ON conCentro1.conCentro1 = conGrupoCentro.Centro1_Id 
INNER JOIN conCentro2 ON conCentro2.conCentro2 = conGrupoCentro.Centro2_Id
Where
conCuentas.Cuenta_Id = @pCuenta_Id AND 
(conCentro2.Centro2_Id = @pCentro2_ID OR conCentro2.Centro2_Id='*' OR 
	(conCentro2.Centro2_Id='%' AND @pCentro2_Id != ' ')) and 
(conCentro1.Centro1_Id = @pCentro1_ID OR conCentro1.Centro1_Id='*' OR 
	(conCentro1.Centro1_Id='%' AND @pCentro1_Id != ' ')) 
GO

	


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\CuentasTesoreria.sql*/
Drop Procedure FuncTesotRet
Go

Create Procedure FuncTesotRet
(
@pEmpresa_Id int,
@pFechaDesde Datetime,
@pFechaHasta Datetime,
@pProveed_Id varChar(15),
@pCartera_Id varChar(5)
)
As
Select IsNull(sum((-2*conMovCont.TipoMov+3)*-conMovCont.Importe), 0) As ValorN
From tesMovimientos 
Inner Join tesRengMovi On tesMovimientos.tesMovimientos = tesRengMovi.tesMovimientos
Inner Join comMovProv On comMovProv.comMovProv = tesMovimientos.tesMovimientos
Inner Join conAsientos On conAsientos.conAsientos = tesMovimientos.tesMovimientos
Inner Join conMovCont On conMovCont.conAsientos = tesMovimientos.tesMovimientos And
						conMovCont.Renglon = tesRengMovi.conRenglon
Where conAsientos.Empresa_Id = @pEmpresa_Id And conAsientos.Anulado = 0 And
			conAsientos.Fecha Between @pFechaDesde and @pFechaHasta And
			tesRengMovi.Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id) And
			comMovProv.Proveed_Id = dbo.FuncFKcomProveedores(@pProveed_Id)
GO


Drop Procedure FuncTesoAcum
GO

Create Procedure FuncTesoAcum
(
@pEmpresa_Id int,
@pFechaDesde Datetime,
@pFechaHasta Datetime,
@pProveed_Id varChar(15),
@pTipoPasivo int = Null
)
As
Select IsNull(Sum(tesMoviGravado.Importe), 0) As Total
From tesMoviGravado
Inner Join tesMovimientos On tesMovimientos.tesMovimientos = tesMoviGravado.tesMovimientos
Inner Join comMovProv On comMovProv.comMovProv = tesMovimientos.tesMovimientos
Inner Join conAsientos On conAsientos.conAsientos = tesMovimientos.tesMovimientos
 
Where conAsientos.Empresa_Id = @pEmpresa_Id And conAsientos.Anulado = 0 And
conAsientos.Fecha Between @pFechaDesde and @pFechaHasta And
comMovProv.Proveed_Id = dbo.FuncFKcomProveedores(@pProveed_Id) And
tesMoviGravado.TipoCtaProv = IsNull(@pTipoPasivo, tesMoviGravado.TipoCtaProv)

/* TODO Ver
			tesMoviProv.Tipomov_ccp > 50)  AND	
			not exists (select * from tesMoviReversa, tesmovimientos tesmovi WHERE
			tesMoviReversa.SucursalRev =tesMovimientos.Sucursal and
			tesMoviReversa.ComprobanteRev =tesMovimientos.Comprobante and
			tesMoviReversa.TipomovRev =tesMovimientos.Tipomov and
			tesMoviReversa.Comprobante = tesmovi.Comprobante and
			tesMoviReversa.Tipomov = tesmovi.Tipomov and
			tesMoviReversa.Sucursal = tesmovi.Sucursal and
			tesmovi.subTipo_id <>  'CVE'
*/
Go


Drop Procedure FuncTesoTabla
Go

Create Procedure FuncTesoTabla
(
@pEmpresa_Id int,
@pTabla_Id int,
@pValor decimal
)
As
Declare @lPorcentaje decimal
Declare @lMinimo decimal
Declare @lHasta decimal
Declare @pHasta decimal

Set @pHasta = @pValor

Declare @lRet decimal

Select @lPorcentaje = Porcentaje, @lMinimo = Minimo, @lHasta = Hasta 
FROM tesGanCuerpo
Inner Join tesGanancias On tesGanancias.tesGanancias = tesGanCuerpo.Tabla_Id
WHERE IsNull(tesGanancias.Empresa_Id, @pEmpresa_Id) = @pEmpresa_Id And
tesGanancias.Tabla_Id = @pTabla_Id
And Hasta In (Select Min(Hasta) From tesGanCuerpo Where Tabla_Id = @pTabla_Id And Hasta >= @pHasta)

If @lPorcentaje Is Null
	Set @lRet = 0
Else
Begin

	If @pHasta = @lHasta
	Begin
		-- No tiene diferencia con el hasta anterior para calcular --
		-- Debo buscar el m?nimo de siguiente --
		Set @pHasta = @lHasta + 1
		Select @lMinimo = Minimo
		FROM tesGanCuerpo 
		Inner Join tesGanancias On tesGanancias.tesGanancias = tesGanCuerpo.Tabla_Id
		WHERE IsNull(tesGanancias.Empresa_Id, @pEmpresa_Id) = @pEmpresa_Id And
		tesGanCuerpo.Tabla_Id = @pTabla_Id
		And Hasta In (Select Min(Hasta) From tesGanCuerpo Where Tabla_Id = @pTabla_Id And Hasta >= @pHasta)

		Set @lRet = @lMinimo
	End
	Else
	Begin

		-- Busco el Hasta anterior para calcular la diferencia --
		Set @pHasta = @lHasta
		Select @lHasta = Hasta 
		From tesGanCuerpo 
		Inner Join tesGanancias On tesGanancias.tesGanancias = tesGanCuerpo.Tabla_Id
		WHERE IsNull(tesGanancias.Empresa_Id, @pEmpresa_Id) = @pEmpresa_Id And
		tesGanCuerpo.Tabla_Id = @pTabla_Id
		And Hasta In (Select Max(Hasta) From tesGanCuerpo Where Tabla_Id = @pTabla_Id And Hasta < @pHasta)

		Set @lRet = @lMinimo + @lPorcentaje * (@pValor - @lHasta) / 100
	End
End

Select @lret
Go


Drop Procedure FuncTesoAcumUsu
GO

Create Procedure FuncTesoAcumUsu
(
@pEmpresa_Id int,
@pFechaDesde Datetime,
@pFechaHasta Datetime,
@pProveed_Id varChar(15),
@pTipoPasivo int = Null,
@pCartera_Id varChar(5)
)
As

Declare @lAcum decimal
Declare @lconAsientos bigint
Declare @lAcumSinRet decimal
Set @lconAsientos = 0

Select @lconAsientos = Max(conAsientos.conAsientos)
From tesRengMovi
Inner Join tesIdentifica On tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id
Inner Join comMovProv On comMovProv.comMovProv = tesRengMovi.tesMovimientos
Inner Join comProveedores On comProveedores.genEntidades = comMovProv.Proveed_Id
Inner Join conAsientos On conAsientos.conAsientos = tesRengMovi.tesMovimientos
Where conAsientos.Empresa_Id = @pEmpresa_Id And conAsientos.Fecha Between @pFechaDesde And @pFechaHasta And
comProveedores.Proveed_Id = @pProveed_Id And tesIdentifica.Cartera_Id = @pCartera_Id And conAsientos.Anulado = 0

If @lconAsientos Is Null
	Set @lconAsientos = 0

Set @lAcum = 0

Select @lAcum = Acum 
From tesRengMoviRetProv
Where tesRengMoviRetProv.tesMovimientos = @lconAsientos

-- Puede ser que no haya encontrado ning?n pago con retenci?n o que no sea el ?ltimo pago --
-- as? que tengo que buscar los pagos desde este n?mero interno hasta hoy --
Set @lAcumSinRet = 0

Select @lAcumSinRet = IsNull(Sum(tesMoviGravado.Importe), 0)
From tesMoviGravado
Inner Join tesMovimientos On tesMovimientos.tesMovimientos = tesMoviGravado.tesMovimientos
Inner Join comMovProv On comMovProv.comMovProv = tesMovimientos.tesMovimientos
Inner Join conAsientos On conAsientos.conAsientos = tesMovimientos.tesMovimientos
 
Where conAsientos.Empresa_Id = @pEmpresa_Id And conAsientos.Anulado = 0 And
conAsientos.Fecha Between @pFechaDesde and @pFechaHasta And
comMovProv.Proveed_Id = dbo.FuncFKcomProveedores(@pProveed_Id) And
tesMoviGravado.TipoCtaProv = IsNull(@pTipoPasivo, tesMoviGravado.TipoCtaProv) And
conAsientos.conAsientos > @lconAsientos

Select @lAcum + @lAcumSinRet Acum

Go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\CuentasVentas.sql*/
Drop procedure dTodo
Go

Create procedure dTodo
(
@pEmpresa_Id int,
@pvenMovimientos bigInt,
@pImpuesto_Id varChar(5)
)
As

Declare @lRet qMonedaD2

Select @lRet = venMovImpuestos.BaseImponibleMonedaNac
From venMovImpuestos
Inner Join conAsientos On conAsientos.conAsientos = venMovImpuestos.venMovimientos
Where conAsientos.Empresa_Id = @pEmpresa_Id And
venMovImpuestos.venMovimientos = @pvenMovimientos And
venMovImpuestos.Impuesto_Id = dbo.FuncFKvenImpuestos(@pImpuesto_Id)

Select isNull(@lRet, 0)
Go


Drop procedure PorceAsoc
GO

Create procedure PorceAsoc
(
@pvenMovimientos bigint,
@pImpuesto_Id varChar(5)
)
As

Declare @lRet qPorcentaje

Select @lRet = Porcentaje From venMovImpuestos
Where venMovimientos = @pvenMovimientos And
Impuesto_Id = dbo.FuncFKvenImpuestos(@pImpuesto_Id) And Importe > 0

Select IsNull(@lRet, 0)
Go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disAcciones.sql*/
DROP PROCEDURE disAccionesGuardar
GO
CREATE PROCEDURE disAccionesGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pTipoEvento varchar(30),
@pOrdenAccion smallint,
@pAccion varchar(30),
@pControlDestino_Id varChar(200) = NULL,
@pTexto varchar(256) = NULL,
@pControlTexto_Id varChar(200) = NULL,
@pValorCondicion varchar(30) = NULL,
@pAccionPadre_Id varchar(100) = NULL,
@pHeredado bit,
@pAccion_Id varchar(100),
@pHabilitado bit,
@pEsEspecializacion bit,
@pAdicionalInfo varchar(80)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disAcciones WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id) AND (TipoEvento = @pTipoEvento) AND (OrdenAccion = @pOrdenAccion)))
BEGIN 
	UPDATE disAcciones
	SET		Accion = @pAccion,
		ControlDestino_Id = @pControlDestino_Id,
		Texto = @pTexto,
		ControlTexto_Id = @pControlTexto_Id,
		ValorCondicion = @pValorCondicion,
		AccionPadre_Id = @pAccionPadre_Id,
		Heredado = @pHeredado,
		Accion_Id = @pAccion_Id,
		Habilitado = @pHabilitado,
		EsEspecializacion = @pEsEspecializacion,
		AdicionalInfo = @pAdicionalInfo
	WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id) AND (TipoEvento = @pTipoEvento) AND (OrdenAccion = @pOrdenAccion)
END 
ELSE 
BEGIN 
	INSERT INTO disAcciones
	(
		Formulario_Id,
		Control_Id,
		TipoEvento,
		OrdenAccion,
		Accion,
		ControlDestino_Id,
		Texto,
		ControlTexto_Id,
		ValorCondicion,
		AccionPadre_Id,
		Heredado,
		Accion_Id,
		Habilitado,
		EsEspecializacion,
		AdicionalInfo
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pTipoEvento,
		@pOrdenAccion,
		@pAccion,
		@pControlDestino_Id,
		@pTexto,
		@pControlTexto_Id,
		@pValorCondicion,
		@pAccionPadre_Id,
		@pHeredado,
		@pAccion_Id,
		@pHabilitado,
		@pEsEspecializacion,
		@pAdicionalInfo
	)
END 

GO

DROP PROCEDURE disAccionesEliminar
GO
CREATE PROCEDURE disAccionesEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL,
@pTipoEvento varchar(30) = NULL,
@pOrdenAccion smallint = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disAcciones 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
AND (TipoEvento = ISNULL(@pTipoEvento, TipoEvento))
AND (OrdenAccion = ISNULL(@pOrdenAccion, OrdenAccion))
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disAccionesColumnas.sql*/
DROP PROCEDURE disAccionesColumnasGuardar
GO
CREATE PROCEDURE disAccionesColumnasGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pColumna varchar(40),
@pTipoEvento varchar(30),
@pOrdenAccion smallint,
@pAccion varchar(30),
@pControlDestino_Id varChar(200) = NULL,
@pColumnaDestino varchar(40) = NULL,
@pTexto varchar(256) = NULL,
@pControlTexto_Id varChar(200) = NULL,
@pValorCondicion varchar(30) = NULL,
@pAccionPadre_Id varchar(100) = NULL,
@pHeredado bit,
@pAccion_Id varchar(100)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disAccionesColumnas WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id) AND (Columna = @pColumna) AND (TipoEvento = @pTipoEvento) AND (OrdenAccion = @pOrdenAccion)))
BEGIN 
	UPDATE disAccionesColumnas
	SET		Accion = @pAccion,
		ControlDestino_Id = @pControlDestino_Id,
		ColumnaDestino = @pColumnaDestino,
		Texto = @pTexto,
		ControlTexto_Id = @pControlTexto_Id,
		ValorCondicion = @pValorCondicion,
		AccionPadre_Id = @pAccionPadre_Id,
		Heredado = @pHeredado,
		Accion_Id = @pAccion_Id
	WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id) AND (Columna = @pColumna) AND (TipoEvento = @pTipoEvento) AND (OrdenAccion = @pOrdenAccion)
END 
ELSE 
BEGIN 
	INSERT INTO disAccionesColumnas
	(
		Formulario_Id,
		Control_Id,
		Columna,
		TipoEvento,
		OrdenAccion,
		Accion,
		ControlDestino_Id,
		ColumnaDestino,
		Texto,
		ControlTexto_Id,
		ValorCondicion,
		AccionPadre_Id,
		Heredado,
		Accion_Id
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pColumna,
		@pTipoEvento,
		@pOrdenAccion,
		@pAccion,
		@pControlDestino_Id,
		@pColumnaDestino,
		@pTexto,
		@pControlTexto_Id,
		@pValorCondicion,
		@pAccionPadre_Id,
		@pHeredado,
		@pAccion_Id
	)
END 

GO


DROP PROCEDURE disAccionesColumnasEliminar
GO
CREATE PROCEDURE disAccionesColumnasEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL ,
@pColumna varchar(40) = NULL,
@pTipoEvento varchar(30) = NULL,
@pOrdenAccion smallint = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disAccionesColumnas 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
AND (Columna = ISNULL(@pColumna, Columna))
AND (TipoEvento = ISNULL(@pTipoEvento, TipoEvento))
AND (OrdenAccion = ISNULL(@pOrdenAccion, OrdenAccion))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disAccionesTablasaActualizar.sql*/
DROP PROCEDURE disAccionesTablasaActualizarGuardar
GO
CREATE PROCEDURE disAccionesTablasaActualizarGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pTipoEvento varchar(30),
@pOrdenAccion smallint,
@pTabla_Id varchar(40)
)
AS
SET NOCOUNT ON 
IF (NOT EXISTS (SELECT 1 FROM disAccionesTablasaActualizar WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id) AND (TipoEvento = @pTipoEvento) AND (OrdenAccion = @pOrdenAccion) AND (Tabla_Id = @pTabla_Id)))
BEGIN 
	INSERT INTO disAccionesTablasaActualizar
	(
		Formulario_Id,
		Control_Id,
		TipoEvento,
		OrdenAccion,
		Tabla_Id
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pTipoEvento,
		@pOrdenAccion,
		@pTabla_Id
	)
END 

GO

DROP PROCEDURE disAccionesTablasaActualizarEliminar
GO
CREATE PROCEDURE disAccionesTablasaActualizarEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL,
@pTipoEvento varchar(30) = NULL,
@pOrdenAccion smallint = NULL,
@pTabla_Id varchar(40) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disAccionesTablasaActualizar 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
AND (TipoEvento = ISNULL(@pTipoEvento, TipoEvento))
AND (OrdenAccion = ISNULL(@pOrdenAccion, OrdenAccion))
AND (Tabla_Id = ISNULL(@pTabla_Id, Tabla_Id))
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disAccionesTablasaEnviar.sql*/
DROP PROCEDURE disAccionesTablasaEnviarGuardar
GO
CREATE PROCEDURE disAccionesTablasaEnviarGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pTipoEvento varchar(30),
@pOrdenAccion smallint,
@pTabla_Id varchar(40)
)
AS
SET NOCOUNT ON 
IF (NOT EXISTS (SELECT 1 FROM disAccionesTablasaEnviar WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id) AND (TipoEvento = @pTipoEvento) AND (OrdenAccion = @pOrdenAccion) AND (Tabla_Id = @pTabla_Id)))
BEGIN 
	INSERT INTO disAccionesTablasaEnviar
	(
		Formulario_Id,
		Control_Id,
		TipoEvento,
		OrdenAccion,
		Tabla_Id
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pTipoEvento,
		@pOrdenAccion,
		@pTabla_Id
	)
END 

GO

DROP PROCEDURE disAccionesTablasaEnviarEliminar
GO
CREATE PROCEDURE disAccionesTablasaEnviarEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL,
@pTipoEvento varchar(30) = NULL,
@pOrdenAccion smallint = NULL,
@pTabla_Id varchar(40) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disAccionesTablasaEnviar 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
AND (TipoEvento = ISNULL(@pTipoEvento, TipoEvento))
AND (OrdenAccion = ISNULL(@pOrdenAccion, OrdenAccion))
AND (Tabla_Id = ISNULL(@pTabla_Id, Tabla_Id))
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControles.sql*/
DROP PROCEDURE disControlesGuardar
GO
CREATE PROCEDURE disControlesGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pNroControl int,
@pControlParent_Id varChar(200) = NULL,
@pTipoControl varchar(50),
@pAlto int,
@pAncho int,
@pArriba smallint,
@pIzquierda smallint,
@pTexto varchar(80) = NULL,
@pVisible Sino,
@pHabilitado Sino,
@pAlineacion varchar(7),
@pTabStop Sino,
@pTabOrden smallint,
@pRequerido bit,
@pEmbebido bit,
@pAncla varchar(8),
@pEsCodigoNuevo Sino,
@pPaises varchar(20) = NULL,
@pFila int,
@pColumna int,
@pFilasExtension int,
@pColumnasExtension int,
@pMaximaLongitud int = NULL, 
@pClickNuevoBlanquea bit,
@pControlaCambios bit, 
@pSoloLectura bit, 
@pTextoFijo bit,
@pTextoControlVacio varchar(40) = NULL,
@pEstilo varchar(200) = NULL,
@pTituloLabel varchar(50) = NULL,
@pAlineacionLabel varchar(10),
@pIgualaAnchoColumna bit,
@pSegmentoOrigen smallint = NULL,
@pControlsegmento varchar(200) = NULL,
@pHeredado bit
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControles WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)))
BEGIN 
	UPDATE disControles
	SET		NroControl = @pNroControl,
		ControlParent_Id = @pControlParent_Id,
		TipoControl = @pTipoControl,
		Alto = @pAlto,
		Ancho = @pAncho,
		Arriba = @pArriba,
		Izquierda = @pIzquierda,
		Texto = @pTexto,
		Visible = @pVisible,
		Habilitado = @pHabilitado,
		Alineacion = @pAlineacion,
		TabStop = @pTabStop,
		TabOrden = @pTabOrden,
		Requerido = @pRequerido,
		Embebido = @pEmbebido,
		Ancla = @pAncla,
		EsCodigoNuevo = @pEsCodigoNuevo,
		Paises = @pPaises,
		Fila = @pFila,
		Columna = @pColumna,
		FilasExtension = @pFilasExtension,
		ColumnasExtension = @pColumnasExtension,
		MaximaLongitud = @pMaximaLongitud, 
		ClickNuevoBlanquea = @pClickNuevoBlanquea,
		ControlaCambios = @pControlaCambios, 
		SoloLectura = @pSoloLectura, 
		TextoFijo = @pTextoFijo,
		TextoControlVacio = @pTextoControlVacio,
		Estilo = @pEstilo,
		TituloLabel = @pTituloLabel,
		AlineacionLabel = @pAlineacionLabel,
		IgualaAnchoColumna = @pIgualaAnchoColumna,
		SegmentoOrigen = @pSegmentoOrigen,
		ControlSegmento = @pControlsegmento,
		Heredado = @pHeredado
	WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)
END 
ELSE 
BEGIN 
	INSERT INTO disControles
	(
		Formulario_Id,
		Control_Id,
		NroControl,
		ControlParent_Id,
		TipoControl,
		Alto,
		Ancho,
		Arriba,
		Izquierda,
		Texto,
		Visible,
		Habilitado,
		Alineacion,
		TabStop,
		TabOrden,
		Requerido,
		Embebido,
		Ancla,
		EsCodigoNuevo,
		Paises,
		Fila,
		Columna,
		FilasExtension,
		ColumnasExtension,
		MaximaLongitud, 
		ClickNuevoBlanquea,
		ControlaCambios, 
		SoloLectura, 
		TextoFijo,
		TextoControlVacio,
		Estilo,
		TituloLabel,
		AlineacionLabel,
		IgualaAnchoColumna,
		SegmentoOrigen,
		ControlSegmento,
		Heredado
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pNroControl,
		@pControlParent_Id,
		@pTipoControl,
		@pAlto,
		@pAncho,
		@pArriba,
		@pIzquierda,
		@pTexto,
		@pVisible,
		@pHabilitado,
		@pAlineacion,
		@pTabStop,
		@pTabOrden,
		@pRequerido,
		@pEmbebido,
		@pAncla,
		@pEsCodigoNuevo,
		@pPaises,
		@pFila,
		@pColumna,
		@pFilasExtension,
		@pColumnasExtension,
		@pMaximaLongitud, 
		@pClickNuevoBlanquea,
		@pControlaCambios, 
		@pSoloLectura, 
		@pTextoFijo,
		@pTextoControlVacio,
		@pEstilo,
		@pTituloLabel,
		@pAlineacionLabel,
		@pIgualaAnchoColumna,
		@pSegmentoOrigen,
		@pControlsegmento,
		@pHeredado
	)
END 

GO


DROP PROCEDURE disControlesEliminar
GO
CREATE PROCEDURE disControlesEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControles 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
AND (TipoControl <> 'frm')
AND (TipoControl <> 'rpt')
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesBoton.sql*/
DROP PROCEDURE disControlesBotonGuardar
GO
CREATE PROCEDURE disControlesBotonGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pControlAsociado_Id varchar(200) = NULL,
@pAsociadoAFilaGrilla bit = NULL,
@pIcono varchar(40) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesBoton WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)))
BEGIN 
	UPDATE disControlesBoton
	SET	ControlAsociado_Id = @pControlAsociado_Id, 
		AsociadoAFilaGrilla = @pAsociadoAFilaGrilla,
		Icono = @pIcono	
	WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesBoton
	(
		Formulario_Id,
		Control_Id,
		ControlAsociado_Id,
		AsociadoAFilaGrilla, 
		Icono
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pControlAsociado_Id,
		@pAsociadoAFilaGrilla,
		@pIcono
	)
END 

GO


DROP PROCEDURE disControlesBotonEliminar
GO
CREATE PROCEDURE disControlesBotonEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesBoton 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesBotonLupa.sql*/
DROP PROCEDURE disControlesBotonLupaGuardar
GO
CREATE PROCEDURE disControlesBotonLupaGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pControlAsociado_Id varchar(200) = NULL,
@pIcono varchar(40) = NULL,
@pCamposClave smallint,
@pCantMaxRegAMostrar int,
@pIdentidad_Id varchar(30),
@pOrderBy varchar(40) = NULL,
@pUsaAccion Sino,
@pFiltros varchar(250) = NULL,
@pAdicionalesCampos varchar(250) = NULL,
@pAdicionalesControles varchar(250) = NULL, 
@pAdicionalesParametros VarChar(250)=NULL,
@pReemplazaEnDestino Sino
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesBotonLupa WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)))
BEGIN 
	UPDATE disControlesBotonLupa
	SET	ControlAsociado_Id = @pControlAsociado_Id, 
		Icono = @pIcono,
		CamposClave = @pCamposClave,
		CantMaxRegAMostrar = @pCantMaxRegAMostrar,
		Identidad_Id = dbo.FuncFKlupIdentidades(@pIdentidad_Id),
		OrderBy = @pOrderBy,
		UsaAccion = @pUsaAccion,
		Filtros = @pFiltros,
		AdicionalesCampos = @pAdicionalesCampos,
		AdicionalesControles = @pAdicionalesControles, 
		AdicionalesParametros = @pAdicionalesParametros,
		ReemplazaEnDestino = @pReemplazaEnDestino
	WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesBotonLupa
	(
		Formulario_Id,
		Control_Id,
		ControlAsociado_Id,
		Icono,
		CamposClave,
		CantMaxRegAMostrar,
		Identidad_Id,
		OrderBy,
		UsaAccion,
		Filtros,
		AdicionalesCampos,
		AdicionalesControles, 
		AdicionalesParametros,
		ReemplazaEnDestino

	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pControlAsociado_Id,
		@pIcono,
		@pCamposClave,
		@pCantMaxRegAMostrar,
		dbo.FuncFKlupIdentidades(@pIdentidad_Id),
		@pOrderBy,
		@pUsaAccion,
		@pFiltros,
		@pAdicionalesCampos,
		@pAdicionalesControles, 
		@pAdicionalesParametros,
		@pReemplazaEnDestino
	)
END 

GO


DROP PROCEDURE disControlesBotonLupaEliminar
GO
CREATE PROCEDURE disControlesBotonLupaEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesBotonLupa 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesBotonSegmento.sql*/
DROP PROCEDURE disControlesBotonSegmentoGuardar
GO
CREATE PROCEDURE disControlesBotonSegmentoGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pControlAsociado_Id varchar(200) = NULL,
@pIcono varchar(40) = NULL,
@pIdentidad_Id varchar(30),
@pFiltros varchar(250) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesBotonSegmento WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)))
BEGIN 
	UPDATE disControlesBotonSegmento
	SET	ControlAsociado_Id = @pControlAsociado_Id, 
		Icono = @pIcono,
		Identidad_Id = dbo.FuncFKlupIdentidades(@pIdentidad_Id),
		Filtros = @pFiltros
	WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesBotonSegmento
	(
		Formulario_Id,
		Control_Id,
		ControlAsociado_Id,
		Icono,
		Identidad_Id,
		Filtros
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pControlAsociado_Id,
		@pIcono,
		dbo.FuncFKlupIdentidades(@pIdentidad_Id),
		@pFiltros
	)
END 

GO


DROP PROCEDURE disControlesBotonSegmentoEliminar
GO
CREATE PROCEDURE disControlesBotonSegmentoEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesBotonSegmento 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesCheckBox.sql*/
DROP PROCEDURE disControlesCheckBoxGuardar
GO
CREATE PROCEDURE disControlesCheckBoxGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pChecked Sino
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesCheckBox WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)))
BEGIN 
	UPDATE disControlesCheckBox
	SET		Checked = @pChecked
	WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesCheckBox
	(
		Formulario_Id,
		Control_Id,
		Checked
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pChecked
	)
END 

GO


DROP PROCEDURE disControlesCheckBoxEliminar
GO
CREATE PROCEDURE disControlesCheckBoxEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesCheckBox 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesColumnaSolapa.sql*/
DROP PROCEDURE disControlesColumnaSolapaGuardar
GO
CREATE PROCEDURE disControlesColumnaSolapaGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pColumna int,
@pAncho int,
@pTipoValor char(1)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesColumnaSolapa WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id) AND (Columna = @pColumna)))
BEGIN 
	UPDATE disControlesColumnaSolapa
	SET		Ancho = @pAncho,
		TipoValor = @pTipoValor
	WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id) AND (Columna = @pColumna)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesColumnaSolapa
	(
		Formulario_Id,
		Control_Id,
		Columna,
		Ancho,
		TipoValor
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pColumna,
		@pAncho,
		@pTipoValor
	)
END 

GO


DROP PROCEDURE disControlesColumnaSolapaEliminar
GO
CREATE PROCEDURE disControlesColumnaSolapaEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL,
@pColumna int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesColumnaSolapa 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
AND (Columna = ISNULL(@pColumna, Columna))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesCombo.sql*/
DROP PROCEDURE disControlesComboGuardar
GO
CREATE PROCEDURE disControlesComboGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pMultiSeleccion Sino,
@pCheckBoxes Sino,
@pIdentidad_Id varchar(30) = NULL,
@pEsOptionGroup bit, 
@pOptionGroupHorizontal bit
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesCombo WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)))
BEGIN 
	UPDATE disControlesCombo
	SET	MultiSeleccion = @pMultiSeleccion,
		CheckBoxes = @pCheckBoxes,
		Identidad_Id = dbo.FuncFKlupIdentidades(@pIdentidad_Id),
		EsOptionGroup = @pEsOptionGroup, 
		OptionGroupHorizontal = @pOptionGroupHorizontal
	WHERE (Formulario_Id = @pFormulario_Id) 
	AND (Control_Id = @pControl_Id)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesCombo
	(
		Formulario_Id,
		Control_Id,
		MultiSeleccion,
		CheckBoxes,
		Identidad_Id,
		EsOptionGroup, 
		OptionGroupHorizontal
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pMultiSeleccion,
		@pCheckBoxes,
		dbo.FuncFKlupIdentidades(@pIdentidad_Id),
		@pEsOptionGroup, 
		@pOptionGroupHorizontal
	)
END 

GO

DROP PROCEDURE disControlesComboEliminar
GO
CREATE PROCEDURE disControlesComboEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesCombo 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesComboItems.sql*/
DROP PROCEDURE disControlesComboItemsGuardar
GO
CREATE PROCEDURE disControlesComboItemsGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pValor varchar(30),
@pDescripcion varchar(60),
@pTipo varchar(20),
@pOrden int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesComboItems WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id) AND (Valor = @pValor)))
BEGIN 
	UPDATE disControlesComboItems
	SET	Descripcion = @pDescripcion,
		Tipo = @pTipo,
		Orden = @pOrden
	WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id) AND (Valor = @pValor)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesComboItems
	(
		Formulario_Id,
		Control_Id,
		Valor,
		Descripcion,
		Tipo,
		Orden
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pValor,
		@pDescripcion,
		@pTipo,
		@pOrden
	)
END 

GO

DROP PROCEDURE disControlesComboItemsEliminar
GO
CREATE PROCEDURE disControlesComboItemsEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL,
@pValor varchar(30) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesComboItems 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
AND (Valor = ISNULL(@pValor, Valor))

 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesFecha.sql*/
DROP PROCEDURE disControlesFechaGuardar
GO
CREATE PROCEDURE disControlesFechaGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pValorMinimo varchar(30) = NULL,
@pValorMaximo varchar(30) = NULL,
@pDiasDiferenciaFecha int = NULL,
@pDiasDiferenciaFechaMaxima int = NULL,
@pDiasDiferenciaFechaMinima int = NULL,
@pEsFechaHora bit,
@pValorHora varchar(5) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesFecha WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)))
BEGIN 
	UPDATE disControlesFecha
	SET		ValorMinimo = @pValorMinimo,
		ValorMaximo = @pValorMaximo,
		DiasDiferenciaFecha = @pDiasDiferenciaFecha,
		DiasDiferenciaFechaMaxima = @pDiasDiferenciaFechaMaxima,
		DiasDiferenciaFechaMinima =@pDiasDiferenciaFechaMinima,
		EsFechaHora = @pEsFechaHora,
		ValorHora = @pValorHora
	WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesFecha
	(
		Formulario_Id,
		Control_Id,
		ValorMinimo,
		ValorMaximo,
		DiasDiferenciaFecha,
		DiasDiferenciaFechaMaxima,
		DiasDiferenciaFechaMinima,
		EsFechaHora,
		ValorHora
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pValorMinimo,
		@pValorMaximo,
		@pDiasDiferenciaFecha,
		@pDiasDiferenciaFechaMaxima,
		@pDiasDiferenciaFechaMinima,
		@pEsFechaHora,
		@pValorHora
	)
END 

GO


DROP PROCEDURE disControlesFechaEliminar
GO
CREATE PROCEDURE disControlesFechaEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesFecha 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesFilaSolapa.sql*/
DROP PROCEDURE disControlesFilaSolapaGuardar
GO
CREATE PROCEDURE disControlesFilaSolapaGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pFila int,
@pAlto int,
@pTipoValor char(1)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesFilaSolapa WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id) AND (Fila = @pFila)))
BEGIN 
	UPDATE disControlesFilaSolapa
	SET		Alto = @pAlto,
		TipoValor = @pTipoValor
	WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id) AND (Fila = @pFila)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesFilaSolapa
	(
		Formulario_Id,
		Control_Id,
		Fila,
		Alto,
		TipoValor
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pFila,
		@pAlto,
		@pTipoValor
	)
END 

GO


DROP PROCEDURE disControlesFilaSolapaEliminar
GO
CREATE PROCEDURE disControlesFilaSolapaEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL,
@pFila int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesFilaSolapa 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
AND (Fila = ISNULL(@pFila, Fila))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesGrafico.sql*/
DROP PROCEDURE disControlesGraficoGuardar
GO
CREATE PROCEDURE disControlesGraficoGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pSubTitulo varchar(50) = NULL,
@pLeyenda varchar(10) = NULL,
@pTipo varchar(30),
@pSubTipo varchar(30),
@pPermiteCambiarSubTipo bit,
@pTituloEjevalores varchar(80) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesGrafico WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)))
BEGIN 
	UPDATE disControlesGrafico
	SET	SubTitulo = @pSubTitulo,
		Leyenda = @pLeyenda,
		Tipo = @pTipo,
		SubTipo = @pSubTipo,
		PermiteCambiarSubTipo = @pPermiteCambiarSubTipo,
		TituloEjevalores = @pTituloEjevalores
	WHERE (Formulario_Id = @pFormulario_Id) 
	AND (Control_Id = @pControl_Id)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesGrafico
	(
		Formulario_Id,
		Control_Id,
		SubTitulo,
		Leyenda,
		Tipo,
		SubTipo,
		PermiteCambiarSubTipo,
		TituloEjevalores
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pSubTitulo,
		@pLeyenda,
		@pTipo,
		@pSubTipo,
		@pPermiteCambiarSubTipo,
		@pTituloEjevalores
	)
END 

GO

DROP PROCEDURE disControlesGraficoEliminar
GO
CREATE PROCEDURE disControlesGraficoEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesGrafico 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
 
 RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesGraficoTorta.sql*/
DROP PROCEDURE disControlesGraficoTortaGuardar
GO
CREATE PROCEDURE disControlesGraficoTortaGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pValoresASeparar smallint,
@pUbicacionTituloPorcion varchar(40),
@pFormatoTituloPorcion varchar(10)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesGraficoTorta WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)))
BEGIN 
	UPDATE disControlesGraficoTorta
	SET	ValoresASeparar = @pValoresASeparar,
		UbicacionTituloPorcion = @pUbicacionTituloPorcion,
		FormatoTituloPorcion = @pFormatoTituloPorcion
	WHERE (Formulario_Id = @pFormulario_Id) 
	AND (Control_Id = @pControl_Id)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesGraficoTorta
	(
		Formulario_Id,
		Control_Id,
		ValoresASeparar,
		UbicacionTituloPorcion,
		FormatoTituloPorcion
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pValoresASeparar,
		@pUbicacionTituloPorcion,
		@pFormatoTituloPorcion
	)
END 

GO

DROP PROCEDURE disControlesGraficoTortaEliminar
GO
CREATE PROCEDURE disControlesGraficoTortaEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesGraficoTorta 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
 
 RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesGrilla.sql*/
DROP PROCEDURE disControlesGrillaGuardar
GO

CREATE PROCEDURE disControlesGrillaGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pPermiteAgregarFilas bit,
@pPermiteBorrarFilas bit,
@pPermiteEditarCeldas bit,
@pEditaEnGrilla bit,
@pRegistrosxPagina int,
@pAutoFormateable bit,
@pEsGrillaAdjuntos bit,
@pEsArbol bit,
@pAccionNuevoValorNodo varchar(30),
@pTotalizaColumnas bit,
@pFilasAMostrar int,
@pAnchoMinimo int,
@pAnchoColumnasFijas varchar(20) = NULL,
@pNombreColCalculoTotal varchar(30) = NULL,
@pColFormatoNumericoFila varchar(30) = NULL,
@pColumnasFijas varchar(256) = NULL,
@pColumnasSoloLectura varchar(256)= NULL,
@pColumnasOcultas varchar(256)= NULL,
@pColumnasTotalizarCantidad varchar(256)= NULL,
@pColumnasTotalizarMinimo varchar(256)= NULL,
@pColumnasTotalizarMaximo varchar(256)= NULL,
@pColumnasTotalizarPromedio varchar(256)= NULL,
@pColumnasTotalizarSuma varchar(256)= NULL,
@pAnchoColPorContenido bit,
@pColumnaColorFondoFila varchar(35)= NULL,
@pColumnaColorTextoFila varchar(35)= NULL,
@pPermiteCambiarOrden bit,
@pPermiteOrdenMultiCols bit
)
AS
SET NOCOUNT ON 
IF (NOT EXISTS (SELECT 1 FROM disControlesGrilla WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)))
BEGIN 
	INSERT INTO disControlesGrilla
	(
		Formulario_Id,
		Control_Id,
		PermiteAgregarFilas,
		PermiteBorrarFilas,
		PermiteEditarCeldas,
		EditaEnGrilla,
		RegistrosxPagina,
		AutoFormateable,
		EsGrillaAdjuntos,
		EsArbol,
		AccionNuevoValorNodo,
		TotalizaColumnas,
		FilasAMostrar,
		AnchoMinimo,
		AnchoColumnasFijas,
		NombreColCalculoTotal,
		ColFormatoNumericoFila,
		ColumnasFijas,
		ColumnasSoloLectura,
		ColumnasOcultas,
		ColumnasTotalizarCantidad,
		ColumnasTotalizarMinimo,
		ColumnasTotalizarMaximo,
		ColumnasTotalizarPromedio,
		ColumnasTotalizarSuma,
		AnchoColPorContenido,
		ColumnaColorFondoFila,
		ColumnaColorTextoFila,
		PermiteCambiarOrden,
		PermiteOrdenMultiCols
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pPermiteAgregarFilas,
		@pPermiteBorrarFilas,
		@pPermiteEditarCeldas,
		@pEditaEnGrilla,
		@pRegistrosxPagina,
		@pAutoFormateable,
		@pEsGrillaAdjuntos,
		@pEsArbol,
		@pAccionNuevoValorNodo,
		@pTotalizaColumnas,
		@pFilasAMostrar,
		@pAnchoMinimo,
		@pAnchoColumnasFijas,
		@pNombreColCalculoTotal,
		@pColFormatoNumericoFila,
		@pColumnasFijas,
		@pColumnasSoloLectura,
		@pColumnasOcultas,
		@pColumnasTotalizarCantidad,
		@pColumnasTotalizarMinimo,
		@pColumnasTotalizarMaximo,
		@pColumnasTotalizarPromedio,
		@pColumnasTotalizarSuma,
		@pAnchoColPorContenido,
	    @pColumnaColorFondoFila,
		@pColumnaColorTextoFila,
		@pPermiteCambiarOrden,
		@pPermiteOrdenMultiCols
	)
END 

GO


DROP PROCEDURE disControlesGrillaEliminar
GO
CREATE PROCEDURE disControlesGrillaEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesGrilla 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesGrillaColumnas.sql*/
DROP PROCEDURE disControlesGrillaColumnasGuardar
GO
CREATE PROCEDURE disControlesGrillaColumnasGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pPosicion int,
@pNombreCampo varchar(40),
@pTitulo varchar(40),
@pTipoDato char(20),
@pFormato varchar(30) = NULL,
@pVisible Sino,
@pControlColumna_Id varChar(200) = NULL,
@pAncho int,
@pAnchoVariable Sino,
@pAlineacion varchar(20),
@pSoloLectura Sino,
@pModoTamanioVariable varchar(25),
@pCongelarTamanio Sino,
@pAnchoMinimo int,
@pModoOrdenamiento varchar(25) = NULL,
@pTextoColumnaVacia varchar(40) = NULL,
@pTexto varchar(80) = NULL, 
@pEsParamAccionBoton Sino,
@pHeredado bit,
@pRequerido bit,
@pAutoNumerico bit,
@pEsPrimaryKey bit,
@pItemsCombo varchar(256) = NULL,
@pIdentidad_Id varchar(30) = NULL,
@pTotalizarCantidad bit, 
@pTotalizarMinimo bit,
@pTotalizarMaximo bit,
@pTotalizarSuma bit,
@pTotalizarPromedio bit,
@pColumnaColorFondoCelda varchar(35) = NULL,
@pColumnaColorTextoCelda varchar(35) = NULL
)
AS

SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesGrillaColumnas WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id) AND (NombreCampo = @pNombreCampo)))
BEGIN 
	UPDATE disControlesGrillaColumnas
	SET		Posicion = @pPosicion,
		Titulo = @pTitulo,
		TipoDato = @pTipoDato,
		Formato = @pFormato,
		Visible = @pVisible,
		ControlColumna_Id = @pControlColumna_Id,
		Ancho = @pAncho,
		AnchoVariable = @pAnchoVariable,
		Alineacion = @pAlineacion,
		SoloLectura = @pSoloLectura,
		ModoTamanioVariable = @pModoTamanioVariable,
		CongelarTamanio = @pCongelarTamanio,
		AnchoMinimo = @pAnchoMinimo,
		ModoOrdenamiento = @pModoOrdenamiento,
		TextoColumnaVacia = @pTextoColumnaVacia,
		Texto = @pTexto,
		EsParamAccionBoton = @pEsParamAccionBoton,
		Heredado = @pHeredado,
		Requerido = @pRequerido,
		AutoNumerico = @pAutoNumerico,
		EsPrimaryKey = @pEsPrimaryKey,
		ItemsCombo = @pItemsCombo,
		Identidad_Id = dbo.FuncFKlupIdentidades(@pIdentidad_Id),
		TotalizarCantidad = @pTotalizarCantidad, 
		TotalizarMinimo = @pTotalizarMinimo,
		TotalizarMaximo = @pTotalizarMaximo,
		TotalizarSuma = @pTotalizarSuma,
		TotalizarPromedio = @pTotalizarPromedio,
		ColumnaColorFondoCelda = @pColumnaColorFondoCelda,
		ColumnaColorTextoCelda = @pColumnaColorTextoCelda

	WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id) AND (NombreCampo = @pNombreCampo)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesGrillaColumnas
	(
		Formulario_Id,
		Control_Id,
		Posicion,
		NombreCampo,
		Titulo,
		TipoDato,
		Formato,
		Visible,
		ControlColumna_Id,
		Ancho,
		AnchoVariable,
		Alineacion,
		SoloLectura,
		ModoTamanioVariable,
		CongelarTamanio,
		AnchoMinimo,
		ModoOrdenamiento,
		TextoColumnaVacia,
		Texto,
		EsParamAccionBoton,
		Heredado,
		Requerido,
		AutoNumerico,
		EsPrimaryKey,
		ItemsCombo,
		Identidad_Id,
		TotalizarCantidad, 
		TotalizarMinimo,
		TotalizarMaximo,
		TotalizarSuma,
		TotalizarPromedio,
		ColumnaColorFondoCelda,
		ColumnaColorTextoCelda
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pPosicion,
		@pNombreCampo,
		@pTitulo,
		@pTipoDato,
		@pFormato,
		@pVisible,
		@pControlColumna_Id,
		@pAncho,
		@pAnchoVariable,
		@pAlineacion,
		@pSoloLectura,
		@pModoTamanioVariable,
		@pCongelarTamanio,
		@pAnchoMinimo,
		@pModoOrdenamiento,
		@pTextoColumnaVacia,
		@pTexto,
		@pEsParamAccionBoton,
		@pHeredado,
		@pRequerido,
		@pAutoNumerico,
		@pEsPrimaryKey,
		@pItemsCombo,
		dbo.FuncFKlupIdentidades(@pIdentidad_Id),
		@pTotalizarCantidad, 
		@pTotalizarMinimo,
		@pTotalizarMaximo,
		@pTotalizarSuma,
		@pTotalizarPromedio,
		@pColumnaColorFondoCelda,
		@pColumnaColorTextoCelda
	)
END 

GO

GO

DROP PROCEDURE disControlesGrillaColumnasEliminar
GO
CREATE PROCEDURE disControlesGrillaColumnasEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL,
@pNombreCampo varchar(40) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesGrillaColumnas 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
AND (NombreCampo = ISNULL(@pNombreCampo, NombreCampo))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesGrillaPivot.sql*/
DROP PROCEDURE disControlesGrillaPivotGuardar
GO
CREATE PROCEDURE disControlesGrillaPivotGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pURLServidor varchar(200),
@pCatalogo varchar(100),
@pCubo varchar(100),
@pMeasures varchar(200),
@pFilas varchar(200),
@pColumnas varchar(200)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesGrillaPivot WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)))
BEGIN 
	UPDATE disControlesGrillaPivot
	SET	URLServidor = @pURLServidor, 
		Catalogo = @pCatalogo,
		Cubo = @pCubo,
		Measures = @pMeasures,
		Filas = @pFilas,
		Columnas = @pColumnas
	WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesGrillaPivot
	(
		Formulario_Id,
		Control_Id,
		URLServidor,
		Catalogo,
		Cubo,
		Measures,
		Filas,
		Columnas
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pURLServidor,
		@pCatalogo,
		@pCubo,
		@pMeasures,
		@pFilas,
		@pColumnas
	)
END 

GO


DROP PROCEDURE disControlesGrillaPivotEliminar
GO
CREATE PROCEDURE disControlesGrillaPivotEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesGrillaPivot 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesGrupoSolapa.sql*/
DROP PROCEDURE disControlesGrupoSolapaGuardar
GO
CREATE PROCEDURE disControlesGrupoSolapaGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pCantSolapas int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesGrupoSolapa WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)))
BEGIN 
	UPDATE disControlesGrupoSolapa
	SET		CantSolapas = @pCantSolapas
	WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesGrupoSolapa
	(
		Formulario_Id,
		Control_Id,
		CantSolapas
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pCantSolapas
	)
END 

GO

DROP PROCEDURE disControlesGrupoSolapaEliminar
GO
CREATE PROCEDURE disControlesGrupoSolapaEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesGrupoSolapa 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesIndicador.sql*/
DROP PROCEDURE disControlesIndicadorGuardar
GO
CREATE PROCEDURE disControlesIndicadorGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pTipo varchar(30)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesIndicador WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)))
BEGIN 
	UPDATE disControlesIndicador
	SET	Tipo = @pTipo 
	WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesIndicador
	(
		Formulario_Id,
		Control_Id,
		Tipo
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pTipo
	)
END 

GO


DROP PROCEDURE disControlesIndicadorEliminar
GO
CREATE PROCEDURE disControlesIndicadorEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesIndicador 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesLink.sql*/
DROP PROCEDURE disControlesLinkGuardar
GO
CREATE PROCEDURE disControlesLinkGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pLink varchar(25)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesLink WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)))
BEGIN 
	UPDATE disControlesLink
	SET	Link = @pLink 
	WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesLink
	(
		Formulario_Id,
		Control_Id,
		Link
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pLink
	)
END 

GO


DROP PROCEDURE disControlesLinkEliminar
GO
CREATE PROCEDURE disControlesLinkEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesLink 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesListaAdjuntos.sql*/
DROP PROCEDURE disControlesListaAdjuntosGuardar
GO

CREATE PROCEDURE disControlesListaAdjuntosGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pPermiteAgregarArchivo Sino,
@pPermiteBorrarArchivo Sino,
@pMuestraDescripciones Sino,
@pPermiteDescargar Sino,
@pCantidadMaxima int,
@pExtensionesPermitidas varchar(40) = NULL, 
@pTamanioMaximo int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesListaAdjuntos WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)))
BEGIN 
	UPDATE disControlesListaAdjuntos
	SET	PermiteAgregarArchivo = @pPermiteAgregarArchivo,
		PermiteBorrarArchivo = @pPermiteBorrarArchivo,
		MuestraDescripciones = @pMuestraDescripciones,
		PermiteDescargar = @pPermiteDescargar,
		CantidadMaxima = @pCantidadMaxima,
		ExtensionesPermitidas = @pExtensionesPermitidas,
		TamanioMaximo = @pTamanioMaximo
	WHERE (Formulario_Id = @pFormulario_Id) 
	AND (Control_Id = @pControl_Id)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesListaAdjuntos
	(
		Formulario_Id,
		Control_Id,
		PermiteAgregarArchivo,
		PermiteBorrarArchivo,
		MuestraDescripciones,
		PermiteDescargar,
		CantidadMaxima,
		ExtensionesPermitidas,
		TamanioMaximo
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pPermiteAgregarArchivo,
		@pPermiteBorrarArchivo,
		@pMuestraDescripciones,
		@pPermiteDescargar,
		@pCantidadMaxima,
		@pExtensionesPermitidas,
		@pTamanioMaximo
	)
END 

GO

DROP PROCEDURE disControlesListaAdjuntosEliminar
GO
CREATE PROCEDURE disControlesListaAdjuntosEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesListaAdjuntos 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
 
 RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesLupa.sql*/
-- AJ JUN 2016 AdicionalesParametros

DROP PROCEDURE disControlesLupaGuardar
GO
CREATE PROCEDURE disControlesLupaGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pCamposClave smallint,
@pCantMaxRegAMostrar int,
@pEsLaEntidadDelForm Sino,
@pIdentidad_Id varchar(30),
@pOrderBy varchar(40) = NULL,
@pTraePrimerRegistro bit,
@pUsaAccion Sino,
@pDescripcionCharCasing varchar(6),
@pDescripcionMaxLength smallint,
@pDescripcionTexto varchar(256) = NULL,
@pDescripcionOculta Sino,
@pColumnaGrillaDescripcion varchar(80) = NULL,
@pFiltros varchar(250) = NULL,
@pCodigoTipo varchar(20),
@pCodigoCharCasing varchar(6),
@pCodigoMask varchar(40) = NULL,
@pCodigoRegExpression varchar(50) = NULL,
@pCodigoMaxLength smallint,
@pCodigoTexto varchar(256) = NULL,
@pCodigoWidth int,
@pCodigoNombreColumna varchar(40),
@pAdicionalesCampos varchar(250) = NULL,
@pAdicionalesControles varchar(250) = NULL, 
@pAdicionalesParametros VarChar(250)=NULL,
@pPermiteNoExistentes bit,
@pMascara varchar(40) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesLupa WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)))
BEGIN 
	UPDATE disControlesLupa
	SET		CamposClave = @pCamposClave,
		CantMaxRegAMostrar = @pCantMaxRegAMostrar,
		EsLaEntidadDelForm = @pEsLaEntidadDelForm,
		Identidad_Id = dbo.FuncFKlupIdentidades(@pIdentidad_Id),
		OrderBy = @pOrderBy,
		TraePrimerRegistro = @pTraePrimerRegistro,
		UsaAccion = @pUsaAccion,
		DescripcionCharCasing = @pDescripcionCharCasing,
		DescripcionMaxLength = @pDescripcionMaxLength,
		DescripcionTexto = @pDescripcionTexto,
		DescripcionOculta = @pDescripcionOculta,
		ColumnaGrillaDescripcion = @pColumnaGrillaDescripcion,
		Filtros = @pFiltros,
		CodigoTipo = @pCodigoTipo,
		CodigoCharCasing = @pCodigoCharCasing,
		CodigoMask = @pCodigoMask,
		CodigoRegExpression = @pCodigoRegExpression,
		CodigoMaxLength = @pCodigoMaxLength,
		CodigoTexto = @pCodigoTexto,
		CodigoWidth = @pCodigoWidth,
		CodigoNombreColumna = @pCodigoNombreColumna,
		AdicionalesCampos = @pAdicionalesCampos,
		AdicionalesControles = @pAdicionalesControles, 
		AdicionalesParametros = @pAdicionalesParametros,
		PermiteNoExistentes = @pPermiteNoExistentes,
		Mascara = @pMascara
	WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesLupa
	(
		Formulario_Id,
		Control_Id,
		CamposClave,
		CantMaxRegAMostrar,
		EsLaEntidadDelForm,
		Identidad_Id,
		OrderBy,
		TraePrimerRegistro,
		UsaAccion,
		DescripcionCharCasing,
		DescripcionMaxLength,
		DescripcionTexto,
		DescripcionOculta,
		ColumnaGrillaDescripcion,
		Filtros,
		CodigoTipo,
		CodigoCharCasing,
		CodigoMask,
		CodigoRegExpression,
		CodigoMaxLength,
		CodigoTexto,
		CodigoWidth,
		CodigoNombreColumna,
		AdicionalesCampos,
		AdicionalesControles, 
		AdicionalesParametros,
		PermiteNoExistentes,
		Mascara
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pCamposClave,
		@pCantMaxRegAMostrar,
		@pEsLaEntidadDelForm,
		dbo.FuncFKlupIdentidades(@pIdentidad_Id),
		@pOrderBy,
		@pTraePrimerRegistro,
		@pUsaAccion,
		@pDescripcionCharCasing,
		@pDescripcionMaxLength,
		@pDescripcionTexto,
		@pDescripcionOculta,
		@pColumnaGrillaDescripcion,
		@pFiltros,
		@pCodigoTipo,
		@pCodigoCharCasing,
		@pCodigoMask,
		@pCodigoRegExpression,
		@pCodigoMaxLength,
		@pCodigoTexto,
		@pCodigoWidth,
		@pCodigoNombreColumna,
		@pAdicionalesCampos,
		@pAdicionalesControles, 
		@pAdicionalesParametros,
		@pPermiteNoExistentes,
		@pMascara
	)
END 

GO

GO

DROP PROCEDURE disControlesLupaEliminar
GO
CREATE PROCEDURE disControlesLupaEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesLupa 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesLupaCodigos.sql*/
DROP PROCEDURE disControlesLupaCodigosGuardar
GO
CREATE PROCEDURE disControlesLupaCodigosGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pCodigo smallint,
@pTipo varchar(20),
@pCharCasing varchar(6),
@pMask varchar(40) = NULL,
@pRegExpression varchar(50) = NULL,
@pMaxLength smallint,
@pTexto varchar(256) = NULL,
@pWidth int,
@pNombreColumna varchar(40)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesLupaCodigos WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id) AND (Codigo = @pCodigo)))
BEGIN 
	UPDATE disControlesLupaCodigos
	SET		Tipo = @pTipo,
		CharCasing = @pCharCasing,
		Mask = @pMask,
		RegExpression = @pRegExpression,
		MaxLength = @pMaxLength,
		Texto = @pTexto,
		Width = @pWidth,
		NombreColumna = @pNombreColumna
	WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id) AND (Codigo = @pCodigo)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesLupaCodigos
	(
		Formulario_Id,
		Control_Id,
		Codigo,
		Tipo,
		CharCasing,
		Mask,
		RegExpression,
		MaxLength,
		Texto,
		Width,
		NombreColumna
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pCodigo,
		@pTipo,
		@pCharCasing,
		@pMask,
		@pRegExpression,
		@pMaxLength,
		@pTexto,
		@pWidth,
		@pNombreColumna
	)
END 

GO

DROP PROCEDURE disControlesLupaCodigosEliminar
GO
CREATE PROCEDURE disControlesLupaCodigosEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL,
@pCodigo smallint = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesLupaCodigos 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
AND (Codigo = ISNULL(@pCodigo, Codigo))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesNumerico.sql*/

DROP PROCEDURE disControlesNumericoGuardar
GO
CREATE PROCEDURE disControlesNumericoGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pDecimales smallint,
@pBotonSpin Sino,
@pSpinIncremento smallint,
@pValorMinimo numeric(18,6) = NULL,
@pValorMaximo numeric(18,6) = NULL,
@pEsPorcentaje Sino, 
@pLLevaSeparadorGrupo Sino 
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesNumerico WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)))
BEGIN 
	UPDATE disControlesNumerico
	SET		Decimales = @pDecimales,
		BotonSpin = @pBotonSpin,
		SpinIncremento = @pSpinIncremento,
		ValorMinimo = @pValorMinimo,
		ValorMaximo = @pValorMaximo,
		EsPorcentaje = @pEsPorcentaje,
		LLevaSeparadorGrupo = @pLLevaSeparadorGrupo
	WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesNumerico
	(
		Formulario_Id,
		Control_Id,
		Decimales,
		BotonSpin,
		SpinIncremento,
		ValorMinimo,
		ValorMaximo,
		EsPorcentaje,
		LLevaSeparadorGrupo
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pDecimales,
		@pBotonSpin,
		@pSpinIncremento,
		@pValorMinimo,
		@pValorMaximo,
		@pEsPorcentaje,
		@pLLevaSeparadorGrupo
	)
END 

GO


DROP PROCEDURE disControlesNumericoEliminar
GO
CREATE PROCEDURE disControlesNumericoEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesNumerico 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesParametros.sql*/
DROP PROCEDURE disControlesParametrosGuardar
GO
CREATE PROCEDURE disControlesParametrosGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pTipoDato varchar(25)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesParametros WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)))
BEGIN 
	UPDATE disControlesParametros
	SET	TipoDato = @pTipoDato		
	WHERE (Formulario_Id = @pFormulario_Id) 
	AND (Control_Id = @pControl_Id)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesParametros
	(
		Formulario_Id,
		Control_Id,
		TipoDato
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pTipoDato
	)
END 

GO

DROP PROCEDURE disControlesParametrosEliminar
GO
CREATE PROCEDURE disControlesParametrosEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesParametros 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesReferencia.sql*/
DROP PROCEDURE disControlesReferenciaGuardar
GO
CREATE PROCEDURE disControlesReferenciaGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pFormularioPopup_Id varChar(30) = NULL,
@pTieneBtnCerrar bit,
@pTieneBtnGuardar bit,
@pTablaPrimaria varchar(40) = NULL,
@pParametros varchar(512) = NULL,
@pTamanioPopup varchar(20)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesReferencia WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)))
BEGIN 
	UPDATE disControlesReferencia
	SET	FormularioPopup_Id = dbo.FuncFKdisFormularios(@pFormularioPopup_Id),
		TieneBtnCerrar = @pTieneBtnCerrar,
		TieneBtnGuardar = @pTieneBtnGuardar,
		TablaPrimaria = @pTablaPrimaria,
		Parametros = @pParametros,
		TamanioPopup = @pTamanioPopup
	WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesReferencia
	(
		Formulario_Id,
		Control_Id,
		FormularioPopup_Id,
		TieneBtnCerrar,
		TieneBtnGuardar,
		TablaPrimaria,
		Parametros,
		TamanioPopup
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		dbo.FuncFKdisFormularios(@pFormularioPopup_Id),
		@pTieneBtnCerrar,
		@pTieneBtnGuardar,
		@pTablaPrimaria,
		@pParametros,
		@pTamanioPopup
	)
END 

GO


DROP PROCEDURE disControlesReferenciaEliminar
GO
CREATE PROCEDURE disControlesReferenciaEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesReferencia 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesRefSolapa.sql*/
DROP PROCEDURE disControlesRefSolapaGuardar
GO
CREATE PROCEDURE disControlesRefSolapaGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pControlSolapaRef_Id varChar(200)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesRefSolapa WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)))
BEGIN 
	UPDATE disControlesRefSolapa
	SET	ControlSolapaRef_Id = @pControlSolapaRef_Id
	WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesRefSolapa
	(
		Formulario_Id,
		Control_Id,
		ControlSolapaRef_Id
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pControlSolapaRef_Id	
	)
END 

GO


DROP PROCEDURE disControlesRefSolapaEliminar
GO
CREATE PROCEDURE disControlesRefSolapaEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesRefSolapa 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesSegmento.sql*/
DROP PROCEDURE disControlesSegmentoGuardar
GO
CREATE PROCEDURE disControlesSegmentoGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pSegmento_Id varchar(10),
@pIdentidad_Id varchar(30),
@pEsLaEntidadDelForm Sino,
@pFiltros varchar(250) = NULL

)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesSegmento WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)))
BEGIN 
	UPDATE disControlesSegmento
	SET Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id),		
		Identidad_Id = dbo.FuncFKlupIdentidades(@pIdentidad_Id),
		EsLaEntidadDelForm = @pEsLaEntidadDelForm,
		Filtros = @pFiltros
	WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesSegmento
	(
		Formulario_Id,
		Control_Id,
		Segmento_Id,
		Identidad_Id,
		EsLaEntidadDelForm,
		Filtros
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		dbo.FuncFKgenSegmentos(@pSegmento_Id),
		dbo.FuncFKlupIdentidades(@pIdentidad_Id),
		@pEsLaEntidadDelForm,
		@pFiltros
	)
END 

GO

GO

DROP PROCEDURE disControlesSegmentoEliminar
GO
CREATE PROCEDURE disControlesSegmentoEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesSegmento 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesSolapa.sql*/
DROP PROCEDURE disControlesSolapaGuardar
GO
CREATE PROCEDURE disControlesSolapaGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pPosicion int,
@pCantFilas int,
@pCantColumnas int,
@pTipoPopup varchar(20),
@pFormularioPopup_Id varChar(30) = NULL,
@pTieneBtnCerrar bit,
@pTieneBtnGuardar bit,
@pTablaPrimaria varchar(40) = NULL,
@pParametros varchar(512) = NULL,
@pTamanioPopup varchar(20)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesSolapa WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)))
BEGIN 
	UPDATE disControlesSolapa
	SET		Posicion = @pPosicion,
		CantFilas = @pCantFilas,
		CantColumnas = @pCantColumnas,
		TipoPopup = @pTipoPopup,
		FormularioPopup_Id = dbo.FuncFKdisFormularios(@pFormularioPopup_Id),
		TieneBtnCerrar = @pTieneBtnCerrar,
		TieneBtnGuardar = @pTieneBtnGuardar,
		TablaPrimaria = @pTablaPrimaria,
		Parametros = @pParametros,
		TamanioPopup = @pTamanioPopup
	WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesSolapa
	(
		Formulario_Id,
		Control_Id,
		Posicion,
		CantFilas,
		CantColumnas,
		TipoPopup,
		FormularioPopup_Id,
		TieneBtnCerrar,
		TieneBtnGuardar,
		TablaPrimaria,
		Parametros,
		TamanioPopup
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pPosicion,
		@pCantFilas,
		@pCantColumnas,
		@pTipoPopup,
		dbo.FuncFKdisFormularios(@pFormularioPopup_Id),
		@pTieneBtnCerrar,
		@pTieneBtnGuardar,
		@pTablaPrimaria,
		@pParametros,
		@pTamanioPopup
	)
END 

GO


DROP PROCEDURE disControlesSolapaEliminar
GO
CREATE PROCEDURE disControlesSolapaEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesSolapa 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesTexto.sql*/
DROP PROCEDURE disControlesTextoGuardar
GO
CREATE PROCEDURE disControlesTextoGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pMultiplesLineas Sino,
@pCharCasing varchar(6),
@pMascara varchar(40) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesTexto WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)))
BEGIN 
	UPDATE disControlesTexto
	SET	MultiplesLineas = @pMultiplesLineas,
		CharCasing = @pCharCasing,
		Mascara = @pMascara
	WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesTexto
	(
		Formulario_Id,
		Control_Id,
		MultiplesLineas,
		CharCasing,
		Mascara
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pMultiplesLineas,
		@pCharCasing,
		@pMascara
	)
END 

GO


DROP PROCEDURE disControlesTextoEliminar
GO
CREATE PROCEDURE disControlesTextoEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesTexto 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disControlesUpLoad.sql*/
DROP PROCEDURE disControlesUpLoadGuardar
GO
CREATE PROCEDURE disControlesUpLoadGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pGuardaCaminoCompleto bit,
@pColumnaNombreInterno varchar(40) = NULL,
@pExtensionesPermitidas varchar(40) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disControlesUpLoad WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)))
BEGIN 
	UPDATE disControlesUpLoad
	SET		GuardaCaminoCompleto = @pGuardaCaminoCompleto,
		ColumnaNombreInterno = @pColumnaNombreInterno,
		ExtensionesPermitidas = @pExtensionesPermitidas
	WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id)
END 
ELSE 
BEGIN 
	INSERT INTO disControlesUpLoad
	(
		Formulario_Id,
		Control_Id,
		GuardaCaminoCompleto,
		ColumnaNombreInterno,
		ExtensionesPermitidas
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pGuardaCaminoCompleto,
		@pColumnaNombreInterno,
		@pExtensionesPermitidas
	)
END 

GO


DROP PROCEDURE disControlesUpLoadEliminar
GO
CREATE PROCEDURE disControlesUpLoadEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disControlesUpLoad 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
 
 RETURN @@Error 
GO

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disEventos.sql*/
DROP PROCEDURE disEventosGuardar
GO
CREATE PROCEDURE disEventosGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pTipoEvento varchar(30),
@pEsMetodo bit,
@pHeredado bit,
@pHabilitado bit
)
AS
SET NOCOUNT ON 
IF (NOT EXISTS (SELECT 1 FROM disEventos WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id) AND (TipoEvento = @pTipoEvento)))
BEGIN 
	INSERT INTO disEventos
	(
		Formulario_Id,
		Control_Id,
		TipoEvento,
		esMetodo,
		Heredado,
		Habilitado
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pTipoEvento,
		@pEsMetodo,
		@pHeredado,
		@pHabilitado
	)
END 

GO


DROP PROCEDURE disEventosEliminar
GO
CREATE PROCEDURE disEventosEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL,
@pTipoEvento varchar(30) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disEventos 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
AND (TipoEvento = ISNULL(@pTipoEvento, TipoEvento))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disEventosColumnas.sql*/
DROP PROCEDURE disEventosColumnasGuardar
GO
CREATE PROCEDURE disEventosColumnasGuardar
(
@pFormulario_Id int,
@pControl_Id varChar(200),
@pColumna varchar(40),
@pTipoEvento varchar(30),
@pHeredado bit
)
AS
SET NOCOUNT ON 
IF (NOT EXISTS (SELECT 1 FROM disEventosColumnas WHERE (Formulario_Id = @pFormulario_Id) AND (Control_Id = @pControl_Id) AND (Columna = @pColumna) AND (TipoEvento = @pTipoEvento)))
BEGIN 
	INSERT INTO disEventosColumnas
	(
		Formulario_Id,
		Control_Id,
		Columna,
		TipoEvento,
		Heredado
	)
	VALUES 
	(
		@pFormulario_Id,
		@pControl_Id,
		@pColumna,
		@pTipoEvento,
		@pHeredado
	)
END 

GO


DROP PROCEDURE disEventosColumnasEliminar
GO
CREATE PROCEDURE disEventosColumnasEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varChar(200) = NULL,
@pColumna varchar(40) = NULL,
@pTipoEvento varchar(30) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disEventosColumnas
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
AND (Columna = ISNULL(@pColumna, Columna))
AND (TipoEvento = ISNULL(@pTipoEvento, TipoEvento))
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disFormularios.sql*/
-- AJ JUN 2016 AdicionalesParametros
-- AJ SET 2018 Especializacion


DROP PROCEDURE disFormulariosGuardar
GO
CREATE PROCEDURE disFormulariosGuardar
(
@pFormulario_Id varchar(30),
@pFormulario_Id_Nuevo varchar(30),
@pDescripcion varchar(80),
@pAlto int,
@pAncho int,
@pArriba smallint,
@pIzquierda smallint,
@pTitulo varchar(80),
@pPosicionInicial char(1),
@pBotonNuevo Sino,
@pBotonGuardar Sino,
@pBotonPostear Sino,
@pBotonEliminar Sino,
@pBotonImprimir Sino,
@pGuardaeImprime Sino,
@pTabla_Id varchar(60),
@pDllCommon varchar(80),
@pClaseCommon varchar(80), 
@pDllExchange varchar(80), 
@pClaseExchange varchar(80), 
@pClaseEnum varchar(80), 
@pDllEventos varchar(80),
@pClaseEventos varchar(80), 
@pFormularioPadre_Id varchar(30) = NULL,
@pPosteado Sino,
@pInactivo Sino,
@pUsuario_Id int,
@pTipoFormulario varchar(3),
@pBotonRptVer Sino,
@pBotonRptImprimir Sino,
@pBotonRptPdf Sino,
@pBotonRptXls Sino, 
@pEspecializacion VarChar(80) = NULL,
@pDllCommonEsp varchar(80) = NULL,
@pClaseCommonEsp varchar(80) = NULL, 
@pDllExchangeEsp varchar(80) = NULL, 
@pClaseExchangeEsp varchar(80) = NULL, 
@pClaseEnumEsp varchar(80) = NULL, 
@pDllEventosEsp varchar(80) = NULL,
@pClaseEventosEsp varchar(80) = NULL,
@pVersion varchar(10) = NULL,
@pTipoEspecial char(1) = NULL,
@pBotonCopiar SiNo,
@pCodigoLnk varchar(25) = NULL,
@pAnulaAccionesEliminarDefault Sino
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM disFormularios WHERE (Formulario_Id = @pFormulario_Id)))
BEGIN 
	UPDATE disFormularios
	SET		@lIdentidad = disFormularios,
		Formulario_Id = @pFormulario_Id_Nuevo,
		Descripcion = @pDescripcion,
		Alto = @pAlto,
		Ancho = @pAncho,
		Arriba = @pArriba,
		Izquierda = @pIzquierda,
		Titulo = @pTitulo,
		PosicionInicial = @pPosicionInicial,
		BotonNuevo = @pBotonNuevo,
		BotonGuardar = @pBotonGuardar,
		BotonPostear = @pBotonPostear,
		BotonEliminar = @pBotonEliminar,
		BotonImprimir = @pBotonImprimir,
		GuardaeImprime = @pGuardaeImprime,
		Tabla_Id = @pTabla_Id,
		DllCommon = @pDllCommon,
		ClaseCommon = @pClaseCommon,
		DllExchange = @pDllExchange,
		ClaseExchange = @pClaseExchange,
		ClaseEnum = @pClaseEnum,
		DllEventos = @pDllEventos,
		ClaseEventos = @pClaseEventos,
		DllCommonEsp = @pDllCommonEsp,
		ClaseCommonEsp = @pClaseCommonEsp,
		DllExchangeEsp = @pDllExchangeEsp,
		ClaseExchangeEsp = @pClaseExchangeEsp,
		ClaseEnumEsp = @pClaseEnumEsp,
		DllEventosEsp = @pDllEventosEsp,
		ClaseEventosEsp = @pClaseEventosEsp,
		FormularioPadre_Id = dbo.FuncFKdisFormularios(@pFormularioPadre_Id),
		Posteado = @pPosteado,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		UltimaModif = dbo.FechaActual(),
		BotonRptVer = @pBotonRptVer,
		BotonRptImprimir = @pBotonRptImprimir,
		BotonRptPdf = @pBotonRptPdf,
		BotonRptXls = @pBotonRptXls, 
		Especializacion = @pEspecializacion,
		Version = @pVersion,
		TipoEspecial = @pTipoEspecial,
		BotonCopiar = @pBotonCopiar,
		CodigoLnk = @pCodigoLnk,
		AnulaAccionesEliminarDefault = @pAnulaAccionesEliminarDefault
	WHERE (Formulario_Id = @pFormulario_Id)

	UPDATE disControles
	SET Control_Id = @pFormulario_Id_nuevo, 
		TipoControl = @pTipoFormulario,
		Alto = @pAlto, 
		Ancho = @pAncho, 
		Arriba = @pArriba, 
		Izquierda = @pIzquierda, 
		Texto = @pTitulo, 
		Heredado = case when (@pFormularioPadre_Id IS NULL) then 0 else 1 end 
	WHERE Formulario_Id = @lIdentidad
	AND Control_Id = @pFormulario_Id 
END 
ELSE 
BEGIN 
	INSERT INTO disFormularios
	(
		Formulario_Id,
		Descripcion,
		Alto,
		Ancho,
		Arriba,
		Izquierda,
		Titulo,
		PosicionInicial,
		BotonNuevo,
		BotonGuardar,
		BotonPostear,
		BotonEliminar,
		BotonImprimir,
		GuardaeImprime,
		Tabla_Id,
		DllCommon,
		ClaseCommon,
		DllExchange,
		ClaseExchange,
		ClaseEnum,
		DllEventos,
		ClaseEventos,
		DllCommonEsp,
		ClaseCommonEsp,
		DllExchangeEsp,
		ClaseExchangeEsp,
		ClaseEnumEsp,
		DllEventosEsp,
		ClaseEventosEsp,
		FormularioPadre_Id,
		Posteado,
		Inactivo,
		Usuario_Id,
		UltimaModif,
		BotonRptVer,
		BotonRptImprimir,
		BotonRptPdf,
		BotonRptXls,
		Especializacion,
		Version,
		TipoEspecial,
		BotonCopiar,
		CodigoLnk,
		AnulaAccionesEliminarDefault
	)
	VALUES 
	(
		@pFormulario_Id,
		@pDescripcion,
		@pAlto,
		@pAncho,
		@pArriba,
		@pIzquierda,
		@pTitulo,
		@pPosicionInicial,
		@pBotonNuevo,
		@pBotonGuardar,
		@pBotonPostear,
		@pBotonEliminar,
		@pBotonImprimir,
		@pGuardaeImprime,
		@pTabla_Id,
		@pDllCommon,
		@pClaseCommon, 
		@pDllExchange, 
		@pClaseExchange, 
		@pClaseEnum, 
		@pDllEventos,
		@pClaseEventos, 
		@pDllCommonEsp,
		@pClaseCommonEsp, 
		@pDllExchangeEsp, 
		@pClaseExchangeEsp, 
		@pClaseEnumEsp, 
		@pDllEventosEsp,
		@pClaseEventosEsp, 
		dbo.FuncFKdisFormularios(@pFormularioPadre_Id),
		@pPosteado,
		@pInactivo,
		@pUsuario_Id,
		dbo.FechaActual(),
		@pBotonRptVer,
		@pBotonRptImprimir,
		@pBotonRptPdf,
		@pBotonRptXls, 
		@pEspecializacion,
		@pVersion,
		@pTipoEspecial,
		@pBotonCopiar,
		@pCodigoLnk,
		@pAnulaAccionesEliminarDefault
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
	-- Inserto un control para el formulario, para poder manejar los eventos del formulario
	INSERT INTO disControles(Formulario_Id, Control_Id, NroControl, ControlParent_Id, TipoControl,
						Alto, Ancho, Arriba, Izquierda, Fila, Columna, FilasExtension, ColumnasExtension,
						Texto, Visible, Habilitado, Alineacion, TabStop, TabOrden, Requerido, Embebido,
						Ancla, EsCodigoNuevo, Paises, MaximaLongitud, ClickNuevoBlanquea, ControlaCambios,
						SoloLectura, TextoFijo, TextoControlVacio, Estilo, TituloLabel, AlineacionLabel, IgualaAnchoColumna, 
						Heredado)
     VALUES (@lIdentidad,  @pFormulario_Id_nuevo, 0, NULL, @pTipoFormulario, 
			 @pAlto, @pAncho, @pArriba, @pIzquierda, 0, 0, 0, 0,
			 @pTitulo, 1, 1, ' ', 1, 0, 0, 0,
			 'T,L', 0, NULL, 0, 1, 1, 
			 0, 0, NULL, NULL, NULL, NULL, 0, case when (@pFormularioPadre_Id IS NULL) then 0 else 1 end   )
END 
Select @lIdentidad as RetVal 

GO


DROP PROCEDURE disFormulariosDatos
GO
CREATE PROCEDURE [dbo].[disFormulariosDatos]
(
@pFormulario_Id varchar(30),
@pParaWeb bit
)
AS

DECLARE @liFormulario int
DECLARE @lSegmento_Id int
DECLARE @lLongTotalSegmento int
DECLARE @ListaDeFormularios Table (Id int, SolapaInvocante varchar(200))
DECLARE @ListaDeFormInscrustados Table (Id int, ControlReferencia varchar(200), Parametros varchar(512), Formulario_Id varchar(30))
DECLARE @CantSolapasOrig int
DECLARE @lTabla_Id varchar(60)
DECLARE @lEspecializacion varchar(80)

SET NOCOUNT ON   


SET @liFormulario = dbo.FuncFKdisFormularios(@pFormulario_Id)
-- Primero obtengo la lista de formularios popup que sean referenciados desde alguna de las solapas
INSERT INTO @ListaDeFormularios (Id, SolapaInvocante)
SELECT FormularioPopup_Id, Control_Id
FROM disControlesSolapa 
WHERE disControlesSolapa.Formulario_Id = @liFormulario
AND FormularioPopup_Id IS NOT NULL
AND (@pParaWeb = 1) --Solo se necesita retornar los componentes del invocado, cuando es para web

-- obtengo la lista de formularios incrusatdos que sean referenciados desde algun control referencia
INSERT INTO @ListaDeFormInscrustados (Id, ControlReferencia, Parametros, Formulario_Id)
SELECT FormularioPopup_Id, Control_Id, Parametros, disFormularios.Formulario_Id
FROM disControlesReferencia 
inner join disFormularios on disFormularios.disFormularios = FormularioPopup_Id
WHERE disControlesReferencia.Formulario_Id = @liFormulario
AND FormularioPopup_Id IS NOT NULL
AND (@pParaWeb = 1) --Solo se necesita retornar los componentes del invocado, cuando es para web

--SELECT @lTabla_Id = Tabla_Id FROM disFormularios WHERE (disFormularios.disFormularios = @liFormulario))
SELECT @lTabla_Id = Tabla_Id, @lEspecializacion= Especializacion FROM disFormularios WHERE (disFormularios.disFormularios = @liFormulario)

SELECT disFormularios.disFormularios, disFormularios.Formulario_Id, disFormularios.Descripcion, disFormularios.Alto,
	disFormularios.Ancho, disFormularios.Arriba, disFormularios.Izquierda, disFormularios.Titulo, disFormularios.PosicionInicial,
	disFormularios.BotonNuevo, disFormularios.BotonGuardar, disFormularios.BotonPostear,
	disFormularios.BotonEliminar, disFormularios.BotonImprimir, disFormularios.GuardaeImprime,
	disFormularios.Tabla_Id, disFormularios.DllCommon, disFormularios.ClaseCommon,
	disFormularios.DllExchange, disFormularios.ClaseExchange, disFormularios.ClaseEnum,
	disFormularios.DllEventos, disFormularios.ClaseEventos, CAST(ISNULL(@pParaWeb,0) AS BIT) as ParaWeb,
	disFormularios.Posteado, disFormularios.Inactivo, disFormularios.Usuario_Id,
	FormPadre.Formulario_Id as FormularioPadre_Id, ISNULL(disControles.TipoControl, 'frm') as TipoFormulario,
	disFormularios.BotonRptVer, disFormularios.BotonRptImprimir, disFormularios.BotonRptPdf, disFormularios.BotonRptXls, 
	disFormularios.Especializacion, disFormularios.DllCommonEsp, disFormularios.ClaseCommonEsp,
	disFormularios.DllExchangeEsp, disFormularios.ClaseExchangeEsp, disFormularios.ClaseEnumEsp,
	disFormularios.DllEventosEsp, disFormularios.ClaseEventosEsp, disFormularios.Version, Cast(0 as Bit) as Temporal,
	disFormularios.TipoEspecial, disFormularios.BotonCopiar, disFormularios.CodigoLnk, disFormularios.AnulaAccionesEliminarDefault
FROM disFormularios 
LEFT JOIN disFormularios FormPadre ON FormPadre.disFormularios = disFormularios.FormularioPadre_Id
LEFT JOIN disControles ON disControles.Formulario_Id = disFormularios.disFormularios AND disControles.Control_Id = disFormularios.Formulario_Id
WHERE (disFormularios.disFormularios = @liFormulario)

-- Grupos Solapas
SELECT disControlesGrupoSolapa.Control_Id, disControlesGrupoSolapa.CantSolapas
FROM disControlesGrupoSolapa 
WHERE (Formulario_Id = @liFormulario)

SET @CantSolapasOrig = (SELECT count(*) FROM disControlesSolapa WHERE (disControlesSolapa.Formulario_Id = @liFormulario))

-- Solapas
SELECT disControlesSolapa.Control_Id, disControlesSolapa.Posicion,	disControlesSolapa.CantFilas, disControlesSolapa.CantColumnas,
disControlesSolapa.TipoPopup, disFormularios.Formulario_Id as FormularioPopup_Id, disControlesSolapa.TieneBtnCerrar, disControlesSolapa.TieneBtnGuardar,
disControlesSolapa.TablaPrimaria, 
disControlesSolapa.Parametros, disControlesSolapa.TamanioPopup, cast(null as varchar(200)) as ControlReferencia
FROM disControlesSolapa 
LEFT JOIN disFormularios ON disFormularios.disFormularios = disControlesSolapa.FormularioPopup_Id
WHERE (disControlesSolapa.Formulario_Id = @liFormulario)
UNION
SELECT disControlesSolapa.Control_Id + '_' + lstfrm.ControlReferencia, 
cast (ROW_NUMBER() OVER(ORDER BY disControlesSolapa.Formulario_Id, disControlesSolapa.Posicion) + @CantSolapasOrig - 1 as int) as Posicion,	
disControlesSolapa.CantFilas, disControlesSolapa.CantColumnas,
disControlesSolapa.TipoPopup, disFormularios.Formulario_Id as FormularioPopup_Id, disControlesSolapa.TieneBtnCerrar, disControlesSolapa.TieneBtnGuardar,
disControlesSolapa.TablaPrimaria, 
CASE WHEN disControlesSolapa.Posicion = 0 THEN disControlesSolapa.Parametros ELSE isnull(disControlesSolapa.Parametros, '') + isnull(lstfrm.Parametros, '') END,
disControlesSolapa.TamanioPopup, CASE WHEN disControlesSolapa.Posicion = 0 THEN lstfrm.ControlReferencia ELSE null END
FROM disControlesSolapa 
INNER JOIN @ListaDeFormInscrustados as lstfrm ON lstfrm.Id = disControlesSolapa.Formulario_Id
LEFT JOIN disFormularios ON disFormularios.disFormularios = disControlesSolapa.Formulario_Id
ORDER BY disControlesSolapa.Posicion



-- Columnas Solapas
SELECT disControlesColumnaSolapa.Control_Id, disControlesColumnaSolapa.Columna,	disControlesColumnaSolapa.Ancho, 
	disControlesColumnaSolapa.TipoValor
FROM disControlesColumnaSolapa 
INNER JOIN disControlesSolapa ON disControlesSolapa.Formulario_Id = disControlesColumnaSolapa.Formulario_Id 
							AND disControlesSolapa.Control_Id = disControlesColumnaSolapa.Control_Id
WHERE (disControlesColumnaSolapa.Formulario_Id = @liFormulario)
AND ((disControlesSolapa.FormularioPopup_Id IS NULL) OR (@pParaWeb = 0))
UNION --Busco las columnas de las solapas del popup referenciado
SELECT lstfrm.SolapaInvocante, disControlesColumnaSolapa.Columna,	disControlesColumnaSolapa.Ancho, 
	disControlesColumnaSolapa.TipoValor
FROM disControlesColumnaSolapa 
INNER JOIN @ListaDeFormularios as lstfrm ON lstfrm.Id = disControlesColumnaSolapa.Formulario_Id
UNION --Busco las columnas de las solapas del form referenciado en un control
SELECT disControlesColumnaSolapa.Control_Id + '_' + lstfrm.ControlReferencia, disControlesColumnaSolapa.Columna,	disControlesColumnaSolapa.Ancho, 
	disControlesColumnaSolapa.TipoValor
FROM disControlesColumnaSolapa 
INNER JOIN @ListaDeFormInscrustados as lstfrm ON lstfrm.Id = disControlesColumnaSolapa.Formulario_Id
ORDER BY 1,2



-- Filas Solapas
SELECT disControlesFilaSolapa.Control_Id, disControlesFilaSolapa.Fila, disControlesFilaSolapa.Alto, 
disControlesFilaSolapa.TipoValor
FROM disControlesFilaSolapa 
INNER JOIN disControlesSolapa ON disControlesSolapa.Formulario_Id = disControlesFilaSolapa.Formulario_Id 
							AND disControlesSolapa.Control_Id = disControlesFilaSolapa.Control_Id
WHERE (disControlesFilaSolapa.Formulario_Id = @liFormulario)
AND ((disControlesSolapa.FormularioPopup_Id IS NULL) OR (@pParaWeb = 0))
UNION
SELECT lstfrm.SolapaInvocante, disControlesFilaSolapa.Fila, disControlesFilaSolapa.Alto, 
disControlesFilaSolapa.TipoValor
FROM disControlesFilaSolapa 
INNER JOIN @ListaDeFormularios as lstfrm ON lstfrm.Id = disControlesFilaSolapa.Formulario_Id
UNION --Busco las columnas de las solapas del form referenciado en un control
SELECT disControlesFilaSolapa.Control_Id + '_' + lstfrm.ControlReferencia, disControlesFilaSolapa.Fila,	disControlesFilaSolapa.Alto, 
	disControlesFilaSolapa.TipoValor
FROM disControlesFilaSolapa 
INNER JOIN @ListaDeFormInscrustados as lstfrm ON lstfrm.Id = disControlesFilaSolapa.Formulario_Id
ORDER BY 1,2

-- Celdas
/**
SELECT disControlesCelda.Control_Id, disControlesCelda.NombrePanel,	disControlesCelda.Fila, 
	disControlesCelda.Columna, disControlesCelda.FilasExtension, disControlesCelda.ColumnasExtension, disControles.ControlParent_Id
FROM disControlesCelda 
INNER JOIN disControles ON disControles.Control_Id = disControlesCelda.Control_Id AND disControlesCelda.Formulario_Id = disControles.Formulario_Id
WHERE (disControlesCelda.Formulario_Id = @liFormulario)
ORDER BY disControles.ControlParent_Id, disControlesCelda.Fila, disControlesCelda.Columna
**/

--Controles
SELECT disControles.Control_Id, disControles.NroControl, disControles.ControlParent_Id, 
		disControles.TipoControl, disControles.Alto, disControles.Ancho, 
		disControles.Arriba, disControles.Izquierda, disControles.Texto, 
		disControles.Visible, disControles.Habilitado, disControles.Alineacion,
		disControles.TabStop, disControles.TabOrden, disControles.Requerido, 
		TablasColumnas1.Tabla_Id NombreTabla, TablasColumnas1.Columna_Id NombreColumna, 
		disControles.Embebido, 
		disControles.Ancla, disControles.EsCodigoNuevo, disControles.Paises, disControles.Fila, 
		disControles.Columna, disControles.FilasExtension, disControles.ColumnasExtension,
		disControles.MaximaLongitud, disControles.ClickNuevoBlanquea, disControles.ControlaCambios, 
		disControles.SoloLectura, disControles.TextoFijo, disControles.TextoControlVacio,
		disControles.Estilo, disControles.TituloLabel, disControles.AlineacionLabel, disControles.IgualaAnchoColumna,
		disControles.SegmentoOrigen, disControles.ControlSegmento, disControles.Heredado
FROM disControles 
LEFT JOIN disTablasColumnas as TablasColumnas1 ON (TablasColumnas1.Control_Id = disControles.Control_Id) 
		  AND (TablasColumnas1.Formulario_Id = disControles.Formulario_Id)
		  AND ((TablasColumnas1.AdicionalControl is null) 
		  -- Es el codigo de la Lupa
		  OR (TablasColumnas1.AdicionalControl = '1') 
		  -- Es el campo cliente del upoload
		  OR (TablasColumnas1.AdicionalControl = 'C')) 
WHERE (disControles.Formulario_Id = @liFormulario)
UNION--Los controles de los popups asociados
SELECT disControles.Control_Id, disControles.NroControl, 
		case when disControles.ControlParent_Id = 'Solapa_Datos' then lstFrm.SolapaInvocante else disControles.ControlParent_Id end as ControlParent_Id, 
		disControles.TipoControl, disControles.Alto, disControles.Ancho, 
		disControles.Arriba, disControles.Izquierda, disControles.Texto, 
		disControles.Visible, disControles.Habilitado, disControles.Alineacion,
		disControles.TabStop, disControles.TabOrden, disControles.Requerido, 
		TablasColumnas1.Tabla_Id NombreTabla, TablasColumnas1.Columna_Id NombreColumna, 
		disControles.Embebido, 
		disControles.Ancla, disControles.EsCodigoNuevo, disControles.Paises, disControles.Fila, 
		disControles.Columna, disControles.FilasExtension, disControles.ColumnasExtension,
		disControles.MaximaLongitud, disControles.ClickNuevoBlanquea, disControles.ControlaCambios, 
		disControles.SoloLectura, disControles.TextoFijo, disControles.TextoControlVacio,
		disControles.Estilo, disControles.TituloLabel, disControles.AlineacionLabel, disControles.IgualaAnchoColumna,
		disControles.SegmentoOrigen, disControles.ControlSegmento, disControles.Heredado
FROM disControles 
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControles.Formulario_Id
LEFT JOIN disTablasColumnas as TablasColumnas1 ON (TablasColumnas1.Control_Id = disControles.Control_Id) 
		  AND (TablasColumnas1.Formulario_Id = disControles.Formulario_Id)
		  AND ((TablasColumnas1.AdicionalControl is null) 
		  -- Es el codigo de la Lupa
		  OR (TablasColumnas1.AdicionalControl = '1') 
		  -- Es el campo cliente del upoload
		  OR (TablasColumnas1.AdicionalControl = 'C')) 
WHERE (disControles.NroControl > 2) -- el 0 es el formulario, el 1 es el control solapas, y el 2 la solapa_datos
UNION--Los controles de los forms refenciados por controles
SELECT case when disControles.TipoControl = 'System.Windows.Forms.TabPage' then disControles.Control_Id + '_' + lstfrm.ControlReferencia else disControles.Control_Id end as Control_Id, 
		disControles.NroControl, 
		case when disControles.ControlParent_Id like 'Solapa__%' then disControles.ControlParent_Id + '_' + lstfrm.ControlReferencia else disControles.ControlParent_Id end as ControlParent_Id, 
		disControles.TipoControl, disControles.Alto, disControles.Ancho, 
		disControles.Arriba, disControles.Izquierda, disControles.Texto, 
		disControles.Visible, disControles.Habilitado, disControles.Alineacion,
		disControles.TabStop, disControles.TabOrden, disControles.Requerido, 
		TablasColumnas1.Tabla_Id NombreTabla, TablasColumnas1.Columna_Id NombreColumna, 
		disControles.Embebido, 
		disControles.Ancla, disControles.EsCodigoNuevo, disControles.Paises, disControles.Fila, 
		disControles.Columna, disControles.FilasExtension, disControles.ColumnasExtension,
		disControles.MaximaLongitud, disControles.ClickNuevoBlanquea, disControles.ControlaCambios, 
		disControles.SoloLectura, disControles.TextoFijo, disControles.TextoControlVacio,
		disControles.Estilo, disControles.TituloLabel, disControles.AlineacionLabel, disControles.IgualaAnchoColumna,
		disControles.SegmentoOrigen, disControles.ControlSegmento, disControles.Heredado
FROM disControles 
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControles.Formulario_Id
LEFT JOIN disTablasColumnas as TablasColumnas1 ON (TablasColumnas1.Control_Id = disControles.Control_Id) 
		  AND (TablasColumnas1.Formulario_Id = disControles.Formulario_Id)
		  AND ((TablasColumnas1.AdicionalControl is null) 
		  -- Es el codigo de la Lupa
		  OR (TablasColumnas1.AdicionalControl = '1') 
		  -- Es el campo cliente del upoload
		  OR (TablasColumnas1.AdicionalControl = 'C')) 
WHERE (disControles.NroControl > 1) -- el 0 es el formulario, el 1 es el control solapas, y el 2 la solapa_datos
ORDER BY disControles.Fila, disControles.Columna, disControles.NroControl

--Check Box
SELECT disControlesCheckBox.Control_Id, disControlesCheckBox.Checked
FROM disControlesCheckBox 
WHERE (Formulario_Id = @liFormulario)
UNION
SELECT disControlesCheckBox.Control_Id, disControlesCheckBox.Checked
FROM disControlesCheckBox 
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesCheckBox.Formulario_Id
UNION
SELECT disControlesCheckBox.Control_Id, disControlesCheckBox.Checked
FROM disControlesCheckBox 
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControlesCheckBox.Formulario_Id

-- Grillas
SELECT disControlesGrilla.Control_Id, PermiteAgregarFilas, PermiteBorrarFilas, PermiteEditarCeldas, EditaEnGrilla, RegistrosxPagina, 
	AutoFormateable, EsGrillaAdjuntos, EsArbol, AccionNuevoValorNodo, TotalizaColumnas, FilasAMostrar, AnchoMinimo, AnchoColumnasFijas,
	NombreColCalculoTotal,ColFormatoNumericoFila, ColumnasFijas, ColumnasSoloLectura, ColumnasOcultas, ColumnasTotalizarCantidad, 
	ColumnasTotalizarMinimo, ColumnasTotalizarMaximo,ColumnasTotalizarPromedio, ColumnasTotalizarSuma, AnchoColPorContenido,
	ColumnaColorFondoFila, ColumnaColorTextoFila, PermiteCambiarOrden, PermiteOrdenMultiCols
FROM disControlesGrilla 
WHERE (Formulario_Id = @liFormulario)
UNION
SELECT disControlesGrilla.Control_Id, PermiteAgregarFilas, PermiteBorrarFilas, PermiteEditarCeldas, EditaEnGrilla, RegistrosxPagina, 
	AutoFormateable, EsGrillaAdjuntos, EsArbol, AccionNuevoValorNodo, TotalizaColumnas,FilasAMostrar, AnchoMinimo, AnchoColumnasFijas,
	NombreColCalculoTotal, ColFormatoNumericoFila, ColumnasFijas, ColumnasSoloLectura, ColumnasOcultas, ColumnasTotalizarCantidad, 
	ColumnasTotalizarMinimo, ColumnasTotalizarMaximo,ColumnasTotalizarPromedio, ColumnasTotalizarSuma, AnchoColPorContenido,
	ColumnaColorFondoFila, ColumnaColorTextoFila, PermiteCambiarOrden, PermiteOrdenMultiCols
FROM disControlesGrilla 
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesGrilla.Formulario_Id 
UNION
SELECT disControlesGrilla.Control_Id, PermiteAgregarFilas, PermiteBorrarFilas, PermiteEditarCeldas, EditaEnGrilla, RegistrosxPagina, 
	AutoFormateable, EsGrillaAdjuntos, EsArbol, AccionNuevoValorNodo, TotalizaColumnas,FilasAMostrar, AnchoMinimo, AnchoColumnasFijas,
	NombreColCalculoTotal, ColFormatoNumericoFila, ColumnasFijas, ColumnasSoloLectura, ColumnasOcultas, ColumnasTotalizarCantidad, 
	ColumnasTotalizarMinimo, ColumnasTotalizarMaximo, ColumnasTotalizarPromedio, ColumnasTotalizarSuma, AnchoColPorContenido,
	ColumnaColorFondoFila, ColumnaColorTextoFila, PermiteCambiarOrden, PermiteOrdenMultiCols
FROM disControlesGrilla 
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControlesGrilla.Formulario_Id 

-- Columnas Grillas
SELECT disControlesGrillaColumnas.Control_Id, disControlesGrillaColumnas.Posicion,	disControlesGrillaColumnas.NombreCampo, 
	disControlesGrillaColumnas.Titulo, disControlesGrillaColumnas.TipoDato, disControlesGrillaColumnas.Formato,
	disControlesGrillaColumnas.Visible, disControlesGrillaColumnas.ControlColumna_Id, disControlesGrillaColumnas.Ancho, 
	disControlesGrillaColumnas.AnchoVariable, disControlesGrillaColumnas.Alineacion, disControlesGrillaColumnas.SoloLectura,
	disControlesGrillaColumnas.ModoTamanioVariable, disControlesGrillaColumnas.CongelarTamanio, disControlesGrillaColumnas.AnchoMinimo, 
	disControlesGrillaColumnas.ModoOrdenamiento, disControlesGrillaColumnas.TextoColumnaVacia, 
	disControlesGrillaColumnas.Texto, disControlesGrillaColumnas.EsParamAccionBoton, disControlesGrillaColumnas.Heredado,
	disControlesGrillaColumnas.Requerido, disControlesGrillaColumnas.AutoNumerico, disControlesGrillaColumnas.EsPrimaryKey,
	disControlesGrillaColumnas.ItemsCombo, lupIdentidades.Identidad_Id, disControlesGrillaColumnas.TotalizarCantidad, 
	disControlesGrillaColumnas.TotalizarMinimo, disControlesGrillaColumnas.TotalizarMaximo,
	disControlesGrillaColumnas.TotalizarSuma, disControlesGrillaColumnas.TotalizarPromedio,
	disControlesGrillaColumnas.ColumnaColorFondoCelda, disControlesGrillaColumnas.ColumnaColorTextoCelda
FROM disControlesGrillaColumnas 
LEFT JOIN lupIdentidades ON lupIdentidades.lupIdentidades = disControlesGrillaColumnas.Identidad_Id
WHERE (Formulario_Id = @liFormulario)
UNION
SELECT disControlesGrillaColumnas.Control_Id, disControlesGrillaColumnas.Posicion,	disControlesGrillaColumnas.NombreCampo, 
	disControlesGrillaColumnas.Titulo, disControlesGrillaColumnas.TipoDato, disControlesGrillaColumnas.Formato,
	disControlesGrillaColumnas.Visible, disControlesGrillaColumnas.ControlColumna_Id, disControlesGrillaColumnas.Ancho, 
	disControlesGrillaColumnas.AnchoVariable, disControlesGrillaColumnas.Alineacion, disControlesGrillaColumnas.SoloLectura,
	disControlesGrillaColumnas.ModoTamanioVariable, disControlesGrillaColumnas.CongelarTamanio, disControlesGrillaColumnas.AnchoMinimo, 
	disControlesGrillaColumnas.ModoOrdenamiento, disControlesGrillaColumnas.TextoColumnaVacia, 
	disControlesGrillaColumnas.Texto, disControlesGrillaColumnas.EsParamAccionBoton, disControlesGrillaColumnas.Heredado,
	disControlesGrillaColumnas.Requerido, disControlesGrillaColumnas.AutoNumerico, disControlesGrillaColumnas.EsPrimaryKey,
	disControlesGrillaColumnas.ItemsCombo, lupIdentidades.Identidad_Id, disControlesGrillaColumnas.TotalizarCantidad, 
	disControlesGrillaColumnas.TotalizarMinimo, disControlesGrillaColumnas.TotalizarMaximo,
	disControlesGrillaColumnas.TotalizarSuma, disControlesGrillaColumnas.TotalizarPromedio,
	disControlesGrillaColumnas.ColumnaColorFondoCelda, disControlesGrillaColumnas.ColumnaColorTextoCelda
FROM disControlesGrillaColumnas 
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesGrillaColumnas.Formulario_Id 
LEFT JOIN lupIdentidades ON lupIdentidades.lupIdentidades = disControlesGrillaColumnas.Identidad_Id
UNION
SELECT disControlesGrillaColumnas.Control_Id, disControlesGrillaColumnas.Posicion,	disControlesGrillaColumnas.NombreCampo, 
	disControlesGrillaColumnas.Titulo, disControlesGrillaColumnas.TipoDato, disControlesGrillaColumnas.Formato,
	disControlesGrillaColumnas.Visible, disControlesGrillaColumnas.ControlColumna_Id, disControlesGrillaColumnas.Ancho, 
	disControlesGrillaColumnas.AnchoVariable, disControlesGrillaColumnas.Alineacion, disControlesGrillaColumnas.SoloLectura,
	disControlesGrillaColumnas.ModoTamanioVariable, disControlesGrillaColumnas.CongelarTamanio, disControlesGrillaColumnas.AnchoMinimo, 
	disControlesGrillaColumnas.ModoOrdenamiento, disControlesGrillaColumnas.TextoColumnaVacia, 
	disControlesGrillaColumnas.Texto, disControlesGrillaColumnas.EsParamAccionBoton, disControlesGrillaColumnas.Heredado,
	disControlesGrillaColumnas.Requerido, disControlesGrillaColumnas.AutoNumerico, disControlesGrillaColumnas.EsPrimaryKey,
	disControlesGrillaColumnas.ItemsCombo, lupIdentidades.Identidad_Id, disControlesGrillaColumnas.TotalizarCantidad, 
	disControlesGrillaColumnas.TotalizarMinimo, disControlesGrillaColumnas.TotalizarMaximo,
	disControlesGrillaColumnas.TotalizarSuma, disControlesGrillaColumnas.TotalizarPromedio,
	disControlesGrillaColumnas.ColumnaColorFondoCelda, disControlesGrillaColumnas.ColumnaColorTextoCelda
FROM disControlesGrillaColumnas 
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControlesGrillaColumnas.Formulario_Id 
LEFT JOIN lupIdentidades ON lupIdentidades.lupIdentidades = disControlesGrillaColumnas.Identidad_Id

ORDER BY disControlesGrillaColumnas.Control_Id, disControlesGrillaColumnas.Posicion

---- Columnas Texto Grillas 
--SELECT Control_Id, NombreCampo, MaximaLongitud
--FROM disControlesGrillaColTexto
--WHERE (Formulario_Id = @liFormulario)
--UNION
--SELECT Control_Id, NombreCampo, MaximaLongitud
--FROM disControlesGrillaColTexto
--INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesGrillaColTexto.Formulario_Id 

---- Columnas Numericas Grillas 
--SELECT Control_Id, NombreCampo, ParteEntera, Decimales, BotonSpin, SpinIncremento, ValorMinimo, ValorMaximo, EsPorcentaje, Autonumerico
--FROM disControlesGrillaColNumerico 
--WHERE (Formulario_Id = @liFormulario)
--UNION
--SELECT Control_Id, NombreCampo, ParteEntera, Decimales, BotonSpin, SpinIncremento, ValorMinimo, ValorMaximo, EsPorcentaje, Autonumerico
--FROM disControlesGrillaColNumerico 
--INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesGrillaColNumerico.Formulario_Id 


---- Columnas Fecha Grillas 
--SELECT Control_Id, NombreCampo, UsaDatePicker, ValorMinimo, ValorMaximo, DiasDiferenciaFecha,
--		DiasDiferenciaFechaMaxima, DiasDiferenciaFechaMinima	
--FROM disControlesGrillaColFecha 
--WHERE (Formulario_Id = @liFormulario)
--UNION
--SELECT Control_Id, NombreCampo, UsaDatePicker, ValorMinimo, ValorMaximo, DiasDiferenciaFecha,
--		DiasDiferenciaFechaMaxima, DiasDiferenciaFechaMinima	
--FROM disControlesGrillaColFecha 
--INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesGrillaColFecha.Formulario_Id 

---- Columnas Boton Grillas 
--SELECT Control_Id, NombreCampo, EsLink 
--FROM disControlesGrillaColBoton  
--WHERE (Formulario_Id = @liFormulario)
--UNION
--SELECT Control_Id, NombreCampo, EsLink 
--FROM disControlesGrillaColBoton  
--INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesGrillaColBoton.Formulario_Id 

---- Columnas Combo Grillas 
--SELECT disControlesGrillaColCombo.Control_Id, disControlesGrillaColCombo.NombreCampo, 
--	disControlesGrillaColCombo.MultiSeleccion, disControlesGrillaColCombo.CheckBoxes, lupIdentidades.Identidad_Id
--FROM disControlesGrillaColCombo
--LEFT JOIN lupIdentidades ON lupIdentidades.lupIdentidades = disControlesGrillaColCombo.Identidad_Id 
--WHERE (Formulario_Id = @liFormulario) 
--UNION
--SELECT disControlesGrillaColCombo.Control_Id, disControlesGrillaColCombo.NombreCampo, 
--	disControlesGrillaColCombo.MultiSeleccion, disControlesGrillaColCombo.CheckBoxes, lupIdentidades.Identidad_Id
--FROM disControlesGrillaColCombo
--LEFT JOIN lupIdentidades ON lupIdentidades.lupIdentidades = disControlesGrillaColCombo.Identidad_Id 
--INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesGrillaColCombo.Formulario_Id 


----  Items de Columnas Combo Grillas
--SELECT disControlesGrillaColComboItems.Control_Id, disControlesGrillaColComboItems.NombreCampo, 
--	disControlesGrillaColComboItems.Valor, disControlesGrillaColComboItems.Descripcion, disControlesGrillaColComboItems.Tipo
--FROM disControlesGrillaColComboItems
--WHERE (Formulario_Id = @liFormulario) 
--UNION
--SELECT disControlesGrillaColComboItems.Control_Id, disControlesGrillaColComboItems.NombreCampo, 
--	disControlesGrillaColComboItems.Valor, disControlesGrillaColComboItems.Descripcion, disControlesGrillaColComboItems.Tipo
--FROM disControlesGrillaColComboItems
--INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesGrillaColComboItems.Formulario_Id 

-- Lupas
SELECT disControlesLupa.Control_Id, disControlesLupa.CamposClave, disControlesLupa.CantMaxRegAMostrar, 
	disControlesLupa.EsLaEntidadDelForm, lupIdentidades.Identidad_Id,
	disControlesLupa.OrderBy, disControlesLupa.TraePrimerRegistro, disControlesLupa.UsaAccion, 
	disControlesLupa.DescripcionCharCasing,	disControlesLupa.DescripcionMaxLength, disControlesLupa.DescripcionTexto, 
	disControlesLupa.DescripcionOculta, disControlesLupa.ColumnaGrillaDescripcion,
	TablasColumnasD.Columna_Id NombreColumnaDescripcion, 
	disControlesLupa.Filtros, disControlesLupa.CodigoTipo, 
	disControlesLupa.CodigoCharCasing, disControlesLupa.CodigoMask, disControlesLupa.CodigoRegExpression,
	disControlesLupa.CodigoMaxLength, disControlesLupa.CodigoTexto, disControlesLupa.CodigoWidth, 
	disControlesLupa.CodigoNombreColumna, disControlesLupa.AdicionalesCampos, disControlesLupa.AdicionalesControles, 
	disControlesLupa.AdicionalesParametros, disControlesLupa.PermiteNoExistentes, lupIdentidades.OrdenMenuFormulario,
	disFormularios.Formulario_Id, disFormularios.Titulo as TituloFormPopup, 
	lupIdentidades.CharCasing, ISNULL(disControlesLupa.Mascara, lupIdentidades.Mascara) as Mascara, lupIdentidades.MaximaLongitud 
FROM disControlesLupa 
INNER JOIN lupIdentidades ON lupIdentidades.lupIdentidades = disControlesLupa.Identidad_Id 
LEFT JOIN genMenus ON genMenus.Orden = lupIdentidades.OrdenMenuFormulario
LEFT JOIN disFormularios ON disFormularios.disFormularios = genMenus.Formulario_Id
LEFT JOIN disTablasColumnas as TablasColumnasD ON (TablasColumnasD.Control_Id = disControlesLupa.Control_Id) 
		  AND (TablasColumnasD.Formulario_Id = disControlesLupa.Formulario_Id)
		  AND (TablasColumnasD.AdicionalControl = 'D') 
WHERE (disControlesLupa.Formulario_Id = @liFormulario)
UNION
SELECT disControlesLupa.Control_Id, disControlesLupa.CamposClave, disControlesLupa.CantMaxRegAMostrar, 
	disControlesLupa.EsLaEntidadDelForm, lupIdentidades.Identidad_Id,
	disControlesLupa.OrderBy, disControlesLupa.TraePrimerRegistro, disControlesLupa.UsaAccion, 
	disControlesLupa.DescripcionCharCasing,	disControlesLupa.DescripcionMaxLength, disControlesLupa.DescripcionTexto, 
	disControlesLupa.DescripcionOculta, disControlesLupa.ColumnaGrillaDescripcion,
	TablasColumnasD.Columna_Id NombreColumnaDescripcion, 
	disControlesLupa.Filtros, disControlesLupa.CodigoTipo, 
	disControlesLupa.CodigoCharCasing, disControlesLupa.CodigoMask, disControlesLupa.CodigoRegExpression,
	disControlesLupa.CodigoMaxLength, disControlesLupa.CodigoTexto, disControlesLupa.CodigoWidth, 
	disControlesLupa.CodigoNombreColumna, disControlesLupa.AdicionalesCampos, disControlesLupa.AdicionalesControles, 
	disControlesLupa.AdicionalesParametros, disControlesLupa.PermiteNoExistentes, lupIdentidades.OrdenMenuFormulario,
	disFormularios.Formulario_Id, disFormularios.Titulo as TituloFormPopup,
	lupIdentidades.CharCasing, ISNULL(disControlesLupa.Mascara, lupIdentidades.Mascara) as Mascara, lupIdentidades.MaximaLongitud
FROM disControlesLupa 
INNER JOIN lupIdentidades ON lupIdentidades.lupIdentidades = disControlesLupa.Identidad_Id 
LEFT JOIN genMenus ON genMenus.Orden = lupIdentidades.OrdenMenuFormulario
LEFT JOIN disFormularios ON disFormularios.disFormularios = genMenus.Formulario_Id
LEFT JOIN disTablasColumnas as TablasColumnasD ON (TablasColumnasD.Control_Id = disControlesLupa.Control_Id) 
		  AND (TablasColumnasD.Formulario_Id = disControlesLupa.Formulario_Id)
		  AND (TablasColumnasD.AdicionalControl = 'D') 
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesLupa.Formulario_Id 
UNION
SELECT disControlesLupa.Control_Id, disControlesLupa.CamposClave, disControlesLupa.CantMaxRegAMostrar, 
	disControlesLupa.EsLaEntidadDelForm, lupIdentidades.Identidad_Id,
	disControlesLupa.OrderBy, disControlesLupa.TraePrimerRegistro, disControlesLupa.UsaAccion, 
	disControlesLupa.DescripcionCharCasing,	disControlesLupa.DescripcionMaxLength, disControlesLupa.DescripcionTexto, 
	disControlesLupa.DescripcionOculta, disControlesLupa.ColumnaGrillaDescripcion,
	TablasColumnasD.Columna_Id NombreColumnaDescripcion, 
	disControlesLupa.Filtros, disControlesLupa.CodigoTipo, 
	disControlesLupa.CodigoCharCasing, disControlesLupa.CodigoMask, disControlesLupa.CodigoRegExpression,
	disControlesLupa.CodigoMaxLength, disControlesLupa.CodigoTexto, disControlesLupa.CodigoWidth, 
	disControlesLupa.CodigoNombreColumna, disControlesLupa.AdicionalesCampos, disControlesLupa.AdicionalesControles, 
	disControlesLupa.AdicionalesParametros, disControlesLupa.PermiteNoExistentes, lupIdentidades.OrdenMenuFormulario,
	disFormularios.Formulario_Id, disFormularios.Titulo as TituloFormPopup,
	lupIdentidades.CharCasing, ISNULL(disControlesLupa.Mascara, lupIdentidades.Mascara) as Mascara, lupIdentidades.MaximaLongitud
FROM disControlesLupa 
INNER JOIN lupIdentidades ON lupIdentidades.lupIdentidades = disControlesLupa.Identidad_Id 
LEFT JOIN genMenus ON genMenus.Orden = lupIdentidades.OrdenMenuFormulario
LEFT JOIN disFormularios ON disFormularios.disFormularios = genMenus.Formulario_Id
LEFT JOIN disTablasColumnas as TablasColumnasD ON (TablasColumnasD.Control_Id = disControlesLupa.Control_Id) 
		  AND (TablasColumnasD.Formulario_Id = disControlesLupa.Formulario_Id)
		  AND (TablasColumnasD.AdicionalControl = 'D') 
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControlesLupa.Formulario_Id 

-- Combos
SELECT disControlesCombo.Control_Id, disControlesCombo.MultiSeleccion, disControlesCombo.CheckBoxes, lupIdentidades.Identidad_Id,
	disControlesCombo.EsOptionGroup, disControlesCombo.OptionGroupHorizontal	
FROM disControlesCombo
LEFT JOIN lupIdentidades ON lupIdentidades.lupIdentidades = disControlesCombo.Identidad_Id 
WHERE (Formulario_Id = @liFormulario) 
UNION
SELECT disControlesCombo.Control_Id, disControlesCombo.MultiSeleccion, disControlesCombo.CheckBoxes, lupIdentidades.Identidad_Id,
	disControlesCombo.EsOptionGroup, disControlesCombo.OptionGroupHorizontal
FROM disControlesCombo
LEFT JOIN lupIdentidades ON lupIdentidades.lupIdentidades = disControlesCombo.Identidad_Id 
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesCombo.Formulario_Id 
UNION
SELECT disControlesCombo.Control_Id, disControlesCombo.MultiSeleccion, disControlesCombo.CheckBoxes, lupIdentidades.Identidad_Id,
	disControlesCombo.EsOptionGroup, disControlesCombo.OptionGroupHorizontal
FROM disControlesCombo
LEFT JOIN lupIdentidades ON lupIdentidades.lupIdentidades = disControlesCombo.Identidad_Id 
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControlesCombo.Formulario_Id 



-- Items del Combo
SELECT disControlesComboItems.Control_Id, disControlesComboItems.Valor, disControlesComboItems.Descripcion, disControlesComboItems.Tipo, disControlesComboItems.Orden
FROM disControlesComboItems
WHERE (Formulario_Id = @liFormulario) 
UNION
SELECT disControlesComboItems.Control_Id, disControlesComboItems.Valor, disControlesComboItems.Descripcion, disControlesComboItems.Tipo, disControlesComboItems.Orden
FROM disControlesComboItems
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesComboItems.Formulario_Id 
UNION
SELECT disControlesComboItems.Control_Id, disControlesComboItems.Valor, disControlesComboItems.Descripcion, disControlesComboItems.Tipo, disControlesComboItems.Orden
FROM disControlesComboItems
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControlesComboItems.Formulario_Id 
ORDER BY 1, 5, 2

-- Numericos
SELECT Control_Id, Decimales, BotonSpin, SpinIncremento, ValorMinimo, ValorMaximo, EsPorcentaje, LLevaSeparadorGrupo
FROM disControlesNumerico
WHERE (Formulario_Id = @liFormulario) 
UNION
SELECT Control_Id, Decimales, BotonSpin, SpinIncremento, ValorMinimo, ValorMaximo, EsPorcentaje, LLevaSeparadorGrupo
FROM disControlesNumerico
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesNumerico.Formulario_Id 
UNION
SELECT Control_Id, Decimales, BotonSpin, SpinIncremento, ValorMinimo, ValorMaximo, EsPorcentaje, LLevaSeparadorGrupo
FROM disControlesNumerico
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControlesNumerico.Formulario_Id 

-- Fechas
SELECT Control_Id, ValorMinimo, ValorMaximo, DiasDiferenciaFecha, DiasDiferenciaFechaMaxima, DiasDiferenciaFechaMinima, EsFechaHora, ValorHora
FROM disControlesFecha
WHERE (Formulario_Id = @liFormulario) 
UNION
SELECT Control_Id, ValorMinimo, ValorMaximo, DiasDiferenciaFecha, DiasDiferenciaFechaMaxima, DiasDiferenciaFechaMinima, EsFechaHora, ValorHora 
FROM disControlesFecha
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesFecha.Formulario_Id 
UNION
SELECT Control_Id, ValorMinimo, ValorMaximo, DiasDiferenciaFecha, DiasDiferenciaFechaMaxima, DiasDiferenciaFechaMinima, EsFechaHora, ValorHora 
FROM disControlesFecha
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControlesFecha.Formulario_Id 

-- Textos
SELECT Control_Id, MultiplesLineas, CharCasing, Mascara
FROM disControlesTexto
WHERE (Formulario_Id = @liFormulario) 
UNION
SELECT Control_Id, MultiplesLineas, CharCasing, Mascara
FROM disControlesTexto
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesTexto.Formulario_Id 
UNION
SELECT Control_Id, MultiplesLineas, CharCasing, Mascara
FROM disControlesTexto
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControlesTexto.Formulario_Id 

-- Segmentos
SELECT Control_Id, genSegmentos.Segmento_Id, lupIdentidades.Identidad_Id, EsLaEntidadDelForm, Filtros, 
lupIdentidades.OrdenMenuFormulario,	disFormularios.Formulario_Id, disFormularios.Titulo as TituloFormPopup
FROM disControlesSegmento
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = disControlesSegmento.Segmento_Id
INNER JOIN lupIdentidades ON lupIdentidades.lupIdentidades = disControlesSegmento.Identidad_Id 
LEFT JOIN genMenus ON genMenus.Orden = lupIdentidades.OrdenMenuFormulario
LEFT JOIN disFormularios ON disFormularios.disFormularios = genMenus.Formulario_Id
WHERE (disControlesSegmento.Formulario_Id = @liFormulario) 
UNION
SELECT Control_Id, genSegmentos.Segmento_Id, lupIdentidades.Identidad_Id, EsLaEntidadDelForm, Filtros, 
lupIdentidades.OrdenMenuFormulario,	disFormularios.Formulario_Id, disFormularios.Titulo as TituloFormPopup
FROM disControlesSegmento
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = disControlesSegmento.Segmento_Id
INNER JOIN lupIdentidades ON lupIdentidades.lupIdentidades = disControlesSegmento.Identidad_Id 
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesSegmento.Formulario_Id 
LEFT JOIN genMenus ON genMenus.Orden = lupIdentidades.OrdenMenuFormulario
LEFT JOIN disFormularios ON disFormularios.disFormularios = genMenus.Formulario_Id
UNION
SELECT Control_Id, genSegmentos.Segmento_Id, lupIdentidades.Identidad_Id, EsLaEntidadDelForm, Filtros, 
lupIdentidades.OrdenMenuFormulario,	disFormularios.Formulario_Id, disFormularios.Titulo as TituloFormPopup
FROM disControlesSegmento
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = disControlesSegmento.Segmento_Id
INNER JOIN lupIdentidades ON lupIdentidades.lupIdentidades = disControlesSegmento.Identidad_Id 
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControlesSegmento.Formulario_Id 
LEFT JOIN genMenus ON genMenus.Orden = lupIdentidades.OrdenMenuFormulario
LEFT JOIN disFormularios ON disFormularios.disFormularios = genMenus.Formulario_Id

-- UpLoad
SELECT Control_Id, GuardaCaminoCompleto, ColumnaNombreInterno, ExtensionesPermitidas
FROM disControlesUpLoad
WHERE (Formulario_Id = @liFormulario) 
UNION
SELECT Control_Id, GuardaCaminoCompleto, ColumnaNombreInterno, ExtensionesPermitidas
FROM disControlesUpLoad
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesUpLoad.Formulario_Id 
UNION
SELECT Control_Id, GuardaCaminoCompleto, ColumnaNombreInterno, ExtensionesPermitidas
FROM disControlesUpLoad
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControlesUpLoad.Formulario_Id 

-- grafico
SELECT Control_Id, SubTitulo, Leyenda, Tipo, SubTipo, PermiteCambiarSubTipo, TituloEjevalores
FROM disControlesGrafico
WHERE (Formulario_Id = @liFormulario) 
UNION
SELECT Control_Id, SubTitulo, Leyenda, Tipo, SubTipo, PermiteCambiarSubTipo, TituloEjevalores
FROM disControlesGrafico
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesGrafico.Formulario_Id 
UNION
SELECT Control_Id, SubTitulo, Leyenda, Tipo, SubTipo, PermiteCambiarSubTipo, TituloEjevalores
FROM disControlesGrafico
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControlesGrafico.Formulario_Id 

-- grafico torta
SELECT Control_Id, ValoresASeparar, UbicacionTituloPorcion, FormatoTituloPorcion
FROM disControlesGraficoTorta
WHERE (Formulario_Id = @liFormulario) 
UNION
SELECT Control_Id, ValoresASeparar, UbicacionTituloPorcion, FormatoTituloPorcion
FROM disControlesGraficoTorta
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesGraficoTorta.Formulario_Id 
UNION
SELECT Control_Id, ValoresASeparar, UbicacionTituloPorcion, FormatoTituloPorcion
FROM disControlesGraficoTorta
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControlesGraficoTorta.Formulario_Id 

-- Lista Adjuntos
SELECT Control_Id, PermiteAgregarArchivo, PermiteBorrarArchivo, MuestraDescripciones, PermiteDescargar, CantidadMaxima, ExtensionesPermitidas,
TamanioMaximo
FROM disControlesListaAdjuntos
WHERE (Formulario_Id = @liFormulario) 
UNION
SELECT Control_Id, PermiteAgregarArchivo, PermiteBorrarArchivo, MuestraDescripciones, PermiteDescargar, CantidadMaxima, ExtensionesPermitidas,
TamanioMaximo
FROM disControlesListaAdjuntos
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesListaAdjuntos.Formulario_Id 
UNION
SELECT Control_Id, PermiteAgregarArchivo, PermiteBorrarArchivo, MuestraDescripciones, PermiteDescargar, CantidadMaxima, ExtensionesPermitidas,
TamanioMaximo
FROM disControlesListaAdjuntos
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControlesListaAdjuntos.Formulario_Id 



---- DownLoad
--SELECT Control_Id, CarpetaServidor, ArchivoADescargar, ArchivoDescargado, ExtensionArchivo, EsUrl
--FROM disControlesDownLoad
--WHERE (Formulario_Id = @liFormulario) 
--UNION
--SELECT Control_Id, CarpetaServidor, ArchivoADescargar, ArchivoDescargado, ExtensionArchivo, EsUrl
--FROM disControlesDownLoad
--INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesDownLoad.Formulario_Id 
--UNION
--SELECT Control_Id, CarpetaServidor, ArchivoADescargar, ArchivoDescargado, ExtensionArchivo, EsUrl
--FROM disControlesDownLoad
--INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControlesDownLoad.Formulario_Id 

-- Controles Boton
SELECT disControlesBoton.Control_Id, ControlAsociado_Id, AsociadoAFilaGrilla, Icono, disControles.Fila, disControles.Columna
FROM disControlesBoton 
INNER JOIN disControles ON disControles.Formulario_Id = disControlesBoton.Formulario_Id 
						AND disControles.Control_Id = disControlesBoton.Control_Id
WHERE (disControlesBoton.Formulario_Id = @liFormulario) 
UNION
SELECT disControlesBoton.Control_Id, ControlAsociado_Id, AsociadoAFilaGrilla, Icono, disControles.Fila, disControles.Columna
FROM disControlesBoton
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesBoton.Formulario_Id 
INNER JOIN disControles ON disControles.Formulario_Id = disControlesBoton.Formulario_Id 
						AND disControles.Control_Id = disControlesBoton.Control_Id
UNION
SELECT disControlesBoton.Control_Id, ControlAsociado_Id, AsociadoAFilaGrilla, Icono, disControles.Fila, disControles.Columna
FROM disControlesBoton
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControlesBoton.Formulario_Id 
INNER JOIN disControles ON disControles.Formulario_Id = disControlesBoton.Formulario_Id 
						AND disControles.Control_Id = disControlesBoton.Control_Id
order by disControles.Fila, disControles.Columna

-- Controles Link
SELECT disControlesLink.Control_Id, disControlesLink.Link
FROM disControlesLink 
WHERE (disControlesLink.Formulario_Id = @liFormulario) 
UNION
SELECT disControlesLink.Control_Id, disControlesLink.Link
FROM disControlesLink 
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesLink.Formulario_Id 
UNION
SELECT disControlesLink.Control_Id, disControlesLink.Link
FROM disControlesLink 
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControlesLink.Formulario_Id 

-- Controles Grilla Pivot
SELECT disControlesGrillaPivot.Control_Id, UrlServidor, Catalogo, Cubo, Measures, Filas, Columnas, disControles.Fila, disControles.Columna
FROM disControlesGrillaPivot 
INNER JOIN disControles ON disControles.Formulario_Id = disControlesGrillaPivot.Formulario_Id 
						AND disControles.Control_Id = disControlesGrillaPivot.Control_Id
WHERE (disControlesGrillaPivot.Formulario_Id = @liFormulario) 
UNION
SELECT disControlesGrillaPivot.Control_Id, UrlServidor, Catalogo, Cubo, Measures, Filas, Columnas, disControles.Fila, disControles.Columna
FROM disControlesGrillaPivot
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesGrillaPivot.Formulario_Id 
INNER JOIN disControles ON disControles.Formulario_Id = disControlesGrillaPivot.Formulario_Id 
						AND disControles.Control_Id = disControlesGrillaPivot.Control_Id
UNION
SELECT disControlesGrillaPivot.Control_Id, UrlServidor, Catalogo, Cubo, Measures, Filas, Columnas, disControles.Fila, disControles.Columna
FROM disControlesGrillaPivot
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControlesGrillaPivot.Formulario_Id 
INNER JOIN disControles ON disControles.Formulario_Id = disControlesGrillaPivot.Formulario_Id 
						AND disControles.Control_Id = disControlesGrillaPivot.Control_Id
order by disControles.Fila, disControles.Columna


-- Controles Indicador
SELECT disControlesIndicador.Control_Id, disControlesIndicador.Tipo
FROM disControlesIndicador 
WHERE (disControlesIndicador.Formulario_Id = @liFormulario) 
UNION
SELECT disControlesIndicador.Control_Id, disControlesIndicador.Tipo
FROM disControlesIndicador 
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesIndicador.Formulario_Id 
UNION
SELECT disControlesIndicador.Control_Id, disControlesIndicador.Tipo
FROM disControlesIndicador 
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControlesIndicador.Formulario_Id 


-- Controles Boton Lupa
SELECT disControlesBotonLupa.Control_Id, disControlesBotonLupa.ControlAsociado_Id, disControlesBotonLupa.Icono, 
	disControles.Fila, disControles.Columna,
	disControlesBotonLupa.CamposClave, disControlesBotonLupa.CantMaxRegAMostrar, 
	lupIdentidades.Identidad_Id, disControlesBotonLupa.OrderBy, disControlesBotonLupa.UsaAccion, 
	disControlesBotonLupa.Filtros, disControlesBotonLupa.AdicionalesCampos, disControlesBotonLupa.AdicionalesControles, 
	disControlesBotonLupa.AdicionalesParametros, lupIdentidades.OrdenMenuFormulario,
	disFormularios.Formulario_Id, disFormularios.Titulo as TituloFormPopup, disControlesBotonLupa.ReemplazaEnDestino
FROM disControlesBotonLupa 
INNER JOIN disControles ON disControles.Formulario_Id = disControlesBotonLupa.Formulario_Id 
						AND disControles.Control_Id = disControlesBotonLupa.Control_Id
INNER JOIN lupIdentidades ON lupIdentidades.lupIdentidades = disControlesBotonLupa.Identidad_Id 
LEFT JOIN genMenus ON genMenus.Orden = lupIdentidades.OrdenMenuFormulario
LEFT JOIN disFormularios ON disFormularios.disFormularios = genMenus.Formulario_Id
WHERE (disControlesBotonLupa.Formulario_Id = @liFormulario)
UNION
SELECT disControlesBotonLupa.Control_Id, disControlesBotonLupa.ControlAsociado_Id, disControlesBotonLupa.Icono, 
	disControles.Fila, disControles.Columna,
	disControlesBotonLupa.CamposClave, disControlesBotonLupa.CantMaxRegAMostrar, 
	lupIdentidades.Identidad_Id, disControlesBotonLupa.OrderBy, disControlesBotonLupa.UsaAccion, 
	disControlesBotonLupa.Filtros, disControlesBotonLupa.AdicionalesCampos, disControlesBotonLupa.AdicionalesControles, 
	disControlesBotonLupa.AdicionalesParametros, lupIdentidades.OrdenMenuFormulario,
	disFormularios.Formulario_Id, disFormularios.Titulo as TituloFormPopup, disControlesBotonLupa.ReemplazaEnDestino
FROM disControlesBotonLupa 
INNER JOIN disControles ON disControles.Formulario_Id = disControlesBotonLupa.Formulario_Id 
						AND disControles.Control_Id = disControlesBotonLupa.Control_Id
INNER JOIN lupIdentidades ON lupIdentidades.lupIdentidades = disControlesBotonLupa.Identidad_Id 
LEFT JOIN genMenus ON genMenus.Orden = lupIdentidades.OrdenMenuFormulario
LEFT JOIN disFormularios ON disFormularios.disFormularios = genMenus.Formulario_Id
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesBotonLupa.Formulario_Id 
UNION
SELECT disControlesBotonLupa.Control_Id, disControlesBotonLupa.ControlAsociado_Id, disControlesBotonLupa.Icono, 
	disControles.Fila, disControles.Columna,
	disControlesBotonLupa.CamposClave, disControlesBotonLupa.CantMaxRegAMostrar, 
	lupIdentidades.Identidad_Id, disControlesBotonLupa.OrderBy, disControlesBotonLupa.UsaAccion, 
	disControlesBotonLupa.Filtros, disControlesBotonLupa.AdicionalesCampos, disControlesBotonLupa.AdicionalesControles, 
	disControlesBotonLupa.AdicionalesParametros, lupIdentidades.OrdenMenuFormulario,
	disFormularios.Formulario_Id, disFormularios.Titulo as TituloFormPopup, disControlesBotonLupa.ReemplazaEnDestino
FROM disControlesBotonLupa 
INNER JOIN disControles ON disControles.Formulario_Id = disControlesBotonLupa.Formulario_Id 
						AND disControles.Control_Id = disControlesBotonLupa.Control_Id
INNER JOIN lupIdentidades ON lupIdentidades.lupIdentidades = disControlesBotonLupa.Identidad_Id 
LEFT JOIN genMenus ON genMenus.Orden = lupIdentidades.OrdenMenuFormulario
LEFT JOIN disFormularios ON disFormularios.disFormularios = genMenus.Formulario_Id
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControlesBotonLupa.Formulario_Id 


-- Controles Boton Segmento
SELECT disControlesBotonSegmento.Control_Id, disControlesBotonSegmento.ControlAsociado_Id, disControlesBotonSegmento.Icono, 
	disControles.Fila, disControles.Columna,
	lupIdentidades.Identidad_Id, disControlesBotonSegmento.Filtros,
	lupIdentidades.OrdenMenuFormulario,	disFormularios.Formulario_Id, disFormularios.Titulo as TituloFormPopup
FROM disControlesBotonSegmento 
INNER JOIN disControles ON disControles.Formulario_Id = disControlesBotonSegmento.Formulario_Id 
						AND disControles.Control_Id = disControlesBotonSegmento.Control_Id
INNER JOIN lupIdentidades ON lupIdentidades.lupIdentidades = disControlesBotonSegmento.Identidad_Id
LEFT JOIN genMenus ON genMenus.Orden = lupIdentidades.OrdenMenuFormulario
LEFT JOIN disFormularios ON disFormularios.disFormularios = genMenus.Formulario_Id
WHERE (disControlesBotonSegmento.Formulario_Id = @liFormulario)
UNION
SELECT disControlesBotonSegmento.Control_Id, disControlesBotonSegmento.ControlAsociado_Id, disControlesBotonSegmento.Icono, 
	disControles.Fila, disControles.Columna,
	lupIdentidades.Identidad_Id, disControlesBotonSegmento.Filtros, 
	lupIdentidades.OrdenMenuFormulario,	disFormularios.Formulario_Id, disFormularios.Titulo as TituloFormPopup
FROM disControlesBotonSegmento 
INNER JOIN disControles ON disControles.Formulario_Id = disControlesBotonSegmento.Formulario_Id 
						AND disControles.Control_Id = disControlesBotonSegmento.Control_Id
INNER JOIN lupIdentidades ON lupIdentidades.lupIdentidades = disControlesBotonSegmento.Identidad_Id
LEFT JOIN genMenus ON genMenus.Orden = lupIdentidades.OrdenMenuFormulario
LEFT JOIN disFormularios ON disFormularios.disFormularios = genMenus.Formulario_Id
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesBotonSegmento.Formulario_Id 
UNION
SELECT disControlesBotonSegmento.Control_Id, disControlesBotonSegmento.ControlAsociado_Id, disControlesBotonSegmento.Icono, 
	disControles.Fila, disControles.Columna,
	lupIdentidades.Identidad_Id, 
	disControlesBotonSegmento.Filtros, 
	lupIdentidades.OrdenMenuFormulario,
	disFormularios.Formulario_Id, disFormularios.Titulo as TituloFormPopup
FROM disControlesBotonSegmento 
INNER JOIN disControles ON disControles.Formulario_Id = disControlesBotonSegmento.Formulario_Id 
						AND disControles.Control_Id = disControlesBotonSegmento.Control_Id
INNER JOIN lupIdentidades ON lupIdentidades.lupIdentidades = disControlesBotonSegmento.Identidad_Id
LEFT JOIN genMenus ON genMenus.Orden = lupIdentidades.OrdenMenuFormulario
LEFT JOIN disFormularios ON disFormularios.disFormularios = genMenus.Formulario_Id
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControlesBotonSegmento.Formulario_Id 



-- Parametros
SELECT Control_Id, TipoDato
FROM disControlesParametros
WHERE (Formulario_Id = @liFormulario) 
UNION
SELECT Control_Id, TipoDato
FROM disControlesParametros
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesParametros.Formulario_Id 
UNION
SELECT Control_Id, TipoDato
FROM disControlesParametros
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControlesParametros.Formulario_Id 

-- Controles referencia
SELECT disControlesReferencia.Control_Id, disFormularios.Formulario_Id as FormularioPopup_Id, disControlesReferencia.TieneBtnCerrar, 
disControlesReferencia.TieneBtnGuardar,disControlesReferencia.TablaPrimaria, 
disControlesReferencia.Parametros, disControlesReferencia.TamanioPopup
FROM disControlesReferencia 
LEFT JOIN disFormularios ON disFormularios.disFormularios = disControlesReferencia.FormularioPopup_Id
WHERE (disControlesReferencia.Formulario_Id = @liFormulario) 

-- Controles referencia solapa
SELECT disControlesRefSolapa.Control_Id, disControlesRefSolapa.ControlSolapaRef_Id
FROM disControlesRefSolapa 
WHERE (disControlesRefSolapa.Formulario_Id = @liFormulario) 
UNION
SELECT disControlesRefSolapa.Control_Id, disControlesRefSolapa.ControlSolapaRef_Id
FROM disControlesRefSolapa 
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesRefSolapa.Formulario_Id 
UNION
SELECT disControlesRefSolapa.Control_Id, disControlesRefSolapa.ControlSolapaRef_Id + '_' + lstfrm.ControlReferencia as ControlSolapaRef_Id
FROM disControlesRefSolapa 
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControlesRefSolapa.Formulario_Id 

-- Eventos
-- Si es para dise?o, debo mostrar todo tal cual est? en la BD
IF (@pParaWeb = 0)
BEGIN
	SELECT disEventos.Control_Id, disEventos.TipoEvento, disEventos.EsMetodo, disEventos.Habilitado, disEventos.Heredado
	FROM disEventos 
	WHERE (Formulario_Id = @liFormulario) 
END
ELSE  -- No debo pasar lo metodos, ya que las acciones de los mismos van incluidos en quienes los invocan
BEGIN
	SELECT disEventos.Control_Id, disEventos.TipoEvento, disEventos.EsMetodo, disEventos.Habilitado, disEventos.Heredado
	FROM disEventos 
	WHERE (Formulario_Id = @liFormulario) and (EsMetodo = 0) AND (Habilitado = 1)
	UNION
	SELECT disEventos.Control_Id, disEventos.TipoEvento, disEventos.EsMetodo, disEventos.Habilitado, disEventos.Heredado
	FROM disEventos
	INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disEventos.Formulario_Id 
	WHERE (EsMetodo = 0) AND (Habilitado = 1)
	UNION
	--SELECT disEventos.Control_Id, disEventos.TipoEvento, disEventos.EsMetodo, disEventos.Habilitado, disEventos.Heredado
	SELECT case when disEventos.TipoEvento in ('Mostrando', 'Ocultando') then lstFrm.ControlReferencia else disEventos.Control_Id end, disEventos.TipoEvento, disEventos.EsMetodo, disEventos.Habilitado, disEventos.Heredado
	FROM disEventos
	INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disEventos.Formulario_Id 
	WHERE (EsMetodo = 0) AND (Habilitado = 1)

END

--Acciones
-- Si es para dise?o, debo mostrar todo tal cual est? en la BD
IF (@pParaWeb = 0)
BEGIN
	SELECT disAcciones.Control_Id, disAcciones.TipoEvento, cast(disAcciones.OrdenAccion as int) as OrdenAccion, 
		disAcciones.Accion, disAcciones.ControlDestino_Id, disAcciones.Texto,
		disAcciones.ControlTexto_Id, disAcciones.ValorCondicion, disAcciones.AccionPadre_Id, disAcciones.Heredado,
		disAcciones.Accion_Id, disAcciones.Habilitado, disAcciones.EsEspecializacion, disAcciones.AdicionalInfo
	FROM disAcciones 
	WHERE (Formulario_Id = @liFormulario)
	ORDER BY 1, 2, 3
END
ELSE --si es para generar la aplciacion web, debo reemplazar la invocacion al metodo por las acciones del metodo
BEGIN
SELECT disAcciones.Control_Id, disAcciones.TipoEvento, cast(disAcciones.OrdenAccion * 10000 as int) as OrdenAccion, 
	disAcciones.Accion, disAcciones.ControlDestino_Id, disAcciones.Texto,
	disAcciones.ControlTexto_Id, disAcciones.ValorCondicion, disAcciones.AccionPadre_Id, disAcciones.Heredado,
	disAcciones.Accion_Id, disAcciones.Habilitado, disAcciones.EsEspecializacion, disAcciones.AdicionalInfo
FROM disAcciones 
WHERE (Formulario_Id = @liFormulario) and (disAcciones.Accion <> 'InvocarMetodo') and (disAcciones.Accion <> 'DoDefault')
AND (disAcciones.Habilitado = 1)
UNION
SELECT disAcciones1.Control_Id, disAcciones1.TipoEvento, cast(disAcciones1.OrdenAccion * 10000 + disAcciones2.OrdenAccion as int) as OrdenAccion, 
	disAcciones2.Accion, disAcciones2.ControlDestino_Id, disAcciones2.Texto,
	disAcciones2.ControlTexto_Id, isnull(disAcciones2.ValorCondicion, disAcciones1.ValorCondicion), isnull(disAcciones2.AccionPadre_Id, disAcciones1.AccionPadre_Id), disAcciones1.Heredado,
	disAcciones2.Accion_Id, disAcciones2.Habilitado, disAcciones2.EsEspecializacion, disAcciones2.AdicionalInfo
FROM disAcciones disAcciones1
INNER JOIN disAcciones disAcciones2 ON (disAcciones2.TipoEvento = disAcciones1.Texto
                                        and disAcciones2.Formulario_Id = disAcciones1.Formulario_Id)
WHERE (disAcciones1.Formulario_Id = @liFormulario) and (disAcciones1.Accion = 'InvocarMetodo') 
		and (disAcciones1.Accion <> 'DoDefault') and (disAcciones2.Accion <> 'DoDefault')
		AND (disAcciones1.Habilitado = 1)
		AND (disAcciones2.Habilitado = 1)
UNION
SELECT disAcciones.Control_Id, disAcciones.TipoEvento, cast(disAcciones.OrdenAccion * 10000 as int) as OrdenAccion, 
	disAcciones.Accion, disAcciones.ControlDestino_Id, disAcciones.Texto,
	disAcciones.ControlTexto_Id, disAcciones.ValorCondicion, disAcciones.AccionPadre_Id, disAcciones.Heredado,
	disAcciones.Accion_Id, disAcciones.Habilitado, disAcciones.EsEspecializacion, disAcciones.AdicionalInfo
FROM disAcciones
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disAcciones.Formulario_Id
WHERE (disAcciones.Accion <> 'InvocarMetodo') and (disAcciones.Accion <> 'DoDefault')
AND (disAcciones.Habilitado = 1)
UNION
SELECT disAcciones1.Control_Id, disAcciones1.TipoEvento, cast(disAcciones1.OrdenAccion * 10000 + disAcciones2.OrdenAccion as int) as OrdenAccion, 
	disAcciones2.Accion, disAcciones2.ControlDestino_Id, disAcciones2.Texto,
	disAcciones2.ControlTexto_Id, isnull(disAcciones2.ValorCondicion, disAcciones1.ValorCondicion), isnull(disAcciones2.AccionPadre_Id, disAcciones1.AccionPadre_Id), disAcciones1.Heredado,
	disAcciones2.Accion_Id, disAcciones2.Habilitado, disAcciones2.EsEspecializacion, disAcciones2.AdicionalInfo
FROM disAcciones disAcciones1
INNER JOIN disAcciones disAcciones2 ON (disAcciones2.TipoEvento = disAcciones1.Texto
                                        and disAcciones2.Formulario_Id = disAcciones1.Formulario_Id)
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disAcciones1.Formulario_Id 
WHERE (disAcciones1.Accion = 'InvocarMetodo') 
		and (disAcciones1.Accion <> 'DoDefault') and (disAcciones2.Accion <> 'DoDefault')
		AND (disAcciones1.Habilitado = 1)
		AND (disAcciones2.Habilitado = 1)
UNION
--SELECT disAcciones.Control_Id, 
SELECT case when disAcciones.TipoEvento in ('Mostrando', 'Ocultando') then lstFrm.ControlReferencia else disAcciones.Control_Id end, 
		disAcciones.TipoEvento, cast(disAcciones.OrdenAccion * 10000 as int) as OrdenAccion,  disAcciones.Accion, 
-- si la accion es mostrar popup, debo agregar al nombre del control destino el nombre de del control referencia
-- Se debe hacer este cambio, porque mostrar popup, tiene como destino una solapa, y las solapas del elemento referenciado
--cambian su nombre original
	case when (disAcciones.Accion <> 'MostrarPopup') and (disAcciones.Accion <> 'CerrarPopup') then disAcciones.ControlDestino_Id else disAcciones.ControlDestino_Id + '_' + lstfrm.ControlReferencia end,
	disAcciones.Texto,
	disAcciones.ControlTexto_Id, disAcciones.ValorCondicion, disAcciones.AccionPadre_Id, disAcciones.Heredado,
	disAcciones.Accion_Id, disAcciones.Habilitado, disAcciones.EsEspecializacion, disAcciones.AdicionalInfo
FROM disAcciones
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disAcciones.Formulario_Id
WHERE (disAcciones.Accion <> 'InvocarMetodo') and (disAcciones.Accion <> 'DoDefault')
AND (disAcciones.Habilitado = 1)
UNION
--SELECT disAcciones1.Control_Id, 
	SELECT case when disAcciones1.TipoEvento in ('Mostrando', 'Ocultando') then lstFrm.ControlReferencia else disAcciones1.Control_Id end, 
	disAcciones1.TipoEvento, cast(disAcciones1.OrdenAccion * 10000 + disAcciones2.OrdenAccion as int) as OrdenAccion, disAcciones2.Accion, 
-- si la accion es mostrar popup, debo agregar al nombre del control destino el nombre de del control referencia
-- Se debe hacer este cambio, porque mostrar popup, tiene como destino una solapa, y las solapas del elemento referenciado
--cambian su nombre original
	case when (disAcciones2.Accion <> 'MostrarPopup') and (disAcciones2.Accion <> 'CerrarPopup')  then disAcciones2.ControlDestino_Id else disAcciones2.ControlDestino_Id + '_' + lstfrm.ControlReferencia end,
	disAcciones2.Texto,
	disAcciones2.ControlTexto_Id, isnull(disAcciones2.ValorCondicion, disAcciones1.ValorCondicion), isnull(disAcciones2.AccionPadre_Id, disAcciones1.AccionPadre_Id), disAcciones1.Heredado,
	disAcciones2.Accion_Id, disAcciones2.Habilitado, disAcciones2.EsEspecializacion, disAcciones2.AdicionalInfo
FROM disAcciones disAcciones1
INNER JOIN disAcciones disAcciones2 ON (disAcciones2.TipoEvento = disAcciones1.Texto
                                        and disAcciones2.Formulario_Id = disAcciones1.Formulario_Id)
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disAcciones1.Formulario_Id 
WHERE (disAcciones1.Accion = 'InvocarMetodo') 
		and (disAcciones1.Accion <> 'DoDefault') and (disAcciones2.Accion <> 'DoDefault')
		AND (disAcciones1.Habilitado = 1)
		AND (disAcciones2.Habilitado = 1)
ORDER BY 1, 2, 3
END


---- Eventos Columnas
--SELECT Control_Id, Columna, TipoEvento, Heredado
--FROM disEventosColumnas 
--WHERE (Formulario_Id = @liFormulario) 
--UNION
--SELECT Control_Id, Columna, TipoEvento, Heredado
--FROM disEventosColumnas 
--INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disEventosColumnas.Formulario_Id
--UNION
--SELECT Control_Id, Columna, TipoEvento, Heredado
--FROM disEventosColumnas 
--INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disEventosColumnas.Formulario_Id

----Acciones Columnas
--SELECT Control_Id, Columna, TipoEvento, OrdenAccion, 
--	Accion, ControlDestino_Id, ColumnaDestino, Texto,
--	ControlTexto_Id, ValorCondicion, AccionPadre_Id, Heredado, Accion_Id
--FROM disAccionesColumnas 
--WHERE (Formulario_Id = @liFormulario) and (Accion <> 'DoDefault')
--UNION
--SELECT Control_Id, Columna, TipoEvento, OrdenAccion, 
--	Accion, ControlDestino_Id, ColumnaDestino, Texto,
--	ControlTexto_Id, ValorCondicion, AccionPadre_Id, Heredado, Accion_Id
--FROM disAccionesColumnas 
--INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disAccionesColumnas.Formulario_Id
--WHERE (Accion <> 'DoDefault')
--UNION
--SELECT Control_Id, Columna, TipoEvento, OrdenAccion, 
--	Accion, ControlDestino_Id, ColumnaDestino, Texto,
--	ControlTexto_Id, ValorCondicion, AccionPadre_Id, Heredado, Accion_Id
--FROM disAccionesColumnas 
--INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disAccionesColumnas.Formulario_Id
--WHERE (Accion <> 'DoDefault')



-- Tablas del Common
SELECT Tabla_Id, TipoControl, Control_Id, EsEspecializacion
FROM disTablas
WHERE (Formulario_Id = @liFormulario)
AND ( (Tabla_Id = 'Principal') 
    OR ( (Tabla_Id NOT IN (Select Tabla_Id 
						FROM disTablas
						INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disTablas.Formulario_Id))
         AND (Tabla_Id NOT IN (Select Tabla_Id 
						FROM disTablas
						INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disTablas.Formulario_Id))
	   )
	)
UNION
SELECT Tabla_Id, TipoControl, Control_Id, EsEspecializacion
FROM disTablas
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disTablas.Formulario_Id
AND (Tabla_Id <> 'Principal') 
UNION
SELECT Tabla_Id, TipoControl, Control_Id, EsEspecializacion
FROM disTablas
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disTablas.Formulario_Id
AND (Tabla_Id <> 'Principal') 



-- Columnas de Common
SELECT Tabla_Id, Columna_Id, TipoControl, Control_Id, AdicionalControl, EsEspecializacion
FROM disTablasColumnas
WHERE (Formulario_Id = @liFormulario)
AND ((Tabla_Id = 'Principal') 
    OR ( (Tabla_Id NOT IN (Select Tabla_Id 
						FROM disTablas
						INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disTablas.Formulario_Id))
         AND (Tabla_Id NOT IN (Select Tabla_Id 
						FROM disTablas
						INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disTablas.Formulario_Id))
	   )
	)
UNION
SELECT Tabla_Id, Columna_Id, TipoControl, Control_Id, AdicionalControl, EsEspecializacion
FROM disTablasColumnas
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disTablasColumnas.Formulario_Id
AND (Tabla_Id <> 'Principal') 
UNION
SELECT Tabla_Id, Columna_Id, TipoControl, Control_Id, AdicionalControl, EsEspecializacion
FROM disTablasColumnas
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disTablasColumnas.Formulario_Id
AND (Tabla_Id <> 'Principal') 

--Relaciones entre Tablas
SELECT TablaMaster_Id, TablaDetalle_Id, ColumnaMaster_Id, ColumnaMaster2_Id, ColumnaMaster3_Id,
		ColumnaDetalle_Id, ColumnaDetalle2_Id, ColumnaDetalle3_Id
FROM disRelacionesTablas
WHERE (Formulario_Id = @liFormulario)
UNION
SELECT TablaMaster_Id, TablaDetalle_Id, ColumnaMaster_Id, ColumnaMaster2_Id, ColumnaMaster3_Id,
		ColumnaDetalle_Id, ColumnaDetalle2_Id, ColumnaDetalle3_Id
FROM disRelacionesTablas
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disRelacionesTablas.Formulario_Id
UNION
SELECT TablaMaster_Id, TablaDetalle_Id, ColumnaMaster_Id, ColumnaMaster2_Id, ColumnaMaster3_Id,
		ColumnaDetalle_Id, ColumnaDetalle2_Id, ColumnaDetalle3_Id
FROM disRelacionesTablas
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disRelacionesTablas.Formulario_Id

--Condiciones Acciones
IF (@pParaWeb = 0)
BEGIN
SELECT distinct disAcciones.Control_Id, disAcciones.TipoEvento, disAcciones.AccionPadre_Id as Accion, disAcciones.ValorCondicion 
FROM disAcciones 
WHERE (Formulario_Id = @liFormulario)
AND disAcciones.AccionPadre_Id is not null 
END
ELSE --si es para generar la aplciacion web, debo reemplazar la invocacion al metodo por las acciones del metodo y buscar aho los valores
BEGIN
SELECT distinct ldisAcciones.Control_Id, ldisAcciones.TipoEvento, ldisAcciones.AccionPadre as Accion, ldisAcciones.ValorCondicion 
FROM 
	(SELECT disAcciones.Control_Id, disAcciones.TipoEvento, cast(disAcciones.OrdenAccion * 10000 as int) as OrdenAccion, 
		disAcciones.Accion, disAcciones.ControlDestino_Id, disAcciones.Texto,
		disAcciones.ControlTexto_Id, disAcciones.ValorCondicion, disAcciones.AccionPadre_Id as AccionPadre
	FROM disAcciones 
	WHERE (Formulario_Id = @liFormulario) and disAcciones.Accion <> 'InvocarMetodo' 
	AND disAcciones.AccionPadre_Id is not null 
	UNION
	SELECT disAcciones1.Control_Id, disAcciones1.TipoEvento, cast(disAcciones1.OrdenAccion * 10000 + disAcciones2.OrdenAccion as int) as OrdenAccion, 
		disAcciones2.Accion, disAcciones2.ControlDestino_Id, disAcciones2.Texto,
		disAcciones2.ControlTexto_Id, disAcciones2.ValorCondicion, disAcciones2.AccionPadre_Id as AccionPadre
	FROM disAcciones disAcciones1
	INNER JOIN disAcciones disAcciones2 ON (disAcciones2.TipoEvento = disAcciones1.Texto
											and disAcciones2.Formulario_Id = disAcciones1.Formulario_Id)
	WHERE (disAcciones1.Formulario_Id = @liFormulario) 
	and disAcciones1.Accion = 'InvocarMetodo'
	AND disAcciones2.AccionPadre_Id is not null
	UNION
	SELECT disAcciones.Control_Id, disAcciones.TipoEvento, cast(disAcciones.OrdenAccion * 10000 as int) as OrdenAccion, 
		disAcciones.Accion, disAcciones.ControlDestino_Id, disAcciones.Texto,
		disAcciones.ControlTexto_Id, disAcciones.ValorCondicion, disAcciones.AccionPadre_Id as AccionPadre
	FROM disAcciones 
	WHERE (Formulario_Id = @liFormulario) 
	AND disAcciones.Accion = 'InvocarMetodo' 
	AND disAcciones.AccionPadre_Id is not null 
	AND disAcciones.ValorCondicion is not null	
	) as ldisAcciones
	UNION
    SELECT distinct ldisAcciones.Control_Id, ldisAcciones.TipoEvento, ldisAcciones.AccionPadre as Accion, ldisAcciones.ValorCondicion 
	FROM 
	(SELECT disAcciones.Control_Id, disAcciones.TipoEvento, cast(disAcciones.OrdenAccion * 10000 as int) as OrdenAccion, 
		disAcciones.Accion, disAcciones.ControlDestino_Id, disAcciones.Texto,
		disAcciones.ControlTexto_Id, disAcciones.ValorCondicion, disAcciones.AccionPadre_Id as AccionPadre
	FROM disAcciones 
	INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disAcciones.Formulario_Id
	WHERE disAcciones.Accion <> 'InvocarMetodo' 
	AND disAcciones.AccionPadre_Id is not null 
	UNION
	SELECT disAcciones1.Control_Id, disAcciones1.TipoEvento, cast(disAcciones1.OrdenAccion * 10000 + disAcciones2.OrdenAccion as int) as OrdenAccion, 
		disAcciones2.Accion, disAcciones2.ControlDestino_Id, disAcciones2.Texto,
		disAcciones2.ControlTexto_Id, disAcciones2.ValorCondicion, disAcciones2.AccionPadre_Id as AccionPadre
	FROM disAcciones disAcciones1
	INNER JOIN disAcciones disAcciones2 ON (disAcciones2.TipoEvento = disAcciones1.Texto
											and disAcciones2.Formulario_Id = disAcciones1.Formulario_Id)
	INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disAcciones1.Formulario_Id
	WHERE disAcciones1.Accion = 'InvocarMetodo'
	AND disAcciones2.AccionPadre_Id is not null) as ldisAcciones
    UNION
    SELECT distinct ldisAcciones.Control_Id, ldisAcciones.TipoEvento, ldisAcciones.AccionPadre as Accion, ldisAcciones.ValorCondicion 
	FROM 
	(--SELECT disAcciones.Control_Id, 
		SELECT case when disAcciones.TipoEvento in ('Mostrando', 'Ocultando') then lstFrm.ControlReferencia else disAcciones.Control_Id end as Control_Id, 
		disAcciones.TipoEvento, cast(disAcciones.OrdenAccion * 10000 as int) as OrdenAccion, 
		disAcciones.Accion, disAcciones.ControlDestino_Id, disAcciones.Texto,
		disAcciones.ControlTexto_Id, disAcciones.ValorCondicion, disAcciones.AccionPadre_Id as AccionPadre
	FROM disAcciones 
	INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disAcciones.Formulario_Id
	WHERE disAcciones.Accion <> 'InvocarMetodo' 
	AND disAcciones.AccionPadre_Id is not null 
	UNION
	--SELECT disAcciones1.Control_Id, 
		SELECT case when disAcciones1.TipoEvento in ('Mostrando', 'Ocultando') then lstFrm.ControlReferencia else disAcciones1.Control_Id end, 
		disAcciones1.TipoEvento, cast(disAcciones1.OrdenAccion * 10000 + disAcciones2.OrdenAccion as int) as OrdenAccion, 
		disAcciones2.Accion, disAcciones2.ControlDestino_Id, disAcciones2.Texto,
		disAcciones2.ControlTexto_Id, disAcciones2.ValorCondicion, disAcciones2.AccionPadre_Id as AccionPadre
	FROM disAcciones disAcciones1
	INNER JOIN disAcciones disAcciones2 ON (disAcciones2.TipoEvento = disAcciones1.Texto
											and disAcciones2.Formulario_Id = disAcciones1.Formulario_Id)
	INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disAcciones1.Formulario_Id
	WHERE disAcciones1.Accion = 'InvocarMetodo'
	AND disAcciones2.AccionPadre_Id is not null) as ldisAcciones

END

--tablas a refrescar luego de invocaer a una Accion
IF (@pParaWeb = 0)
BEGIN
	SELECT act.Control_Id, act.TipoEvento, cast(act.OrdenAccion as int) as OrdenAccion, act.Tabla_Id, a.Accion_Id
	FROM disAccionesTablasaActualizar act
	INNER JOIN disAcciones a ON a.Formulario_Id = act.Formulario_Id 
						AND a.Control_Id = act.Control_Id 
						AND a.TipoEvento = act.TipoEvento
						AND a.OrdenAccion = act.OrdenAccion 

	WHERE (act.Formulario_Id = @liFormulario)
	ORDER BY 1, 2, 3, 4
END
ELSE --si es para generar la aplciacion web, debo reemplazar la invocacion al metodo por las acciones del metodo
BEGIN
SELECT act.Control_Id, act.TipoEvento, cast(act.OrdenAccion * 10000 as int) as OrdenAccion, act.Tabla_id, a.Accion_Id
FROM disAccionesTablasaActualizar act
INNER JOIN disAcciones a ON a.Formulario_Id = act.Formulario_Id 
						AND a.Control_Id = act.Control_Id 
						AND a.TipoEvento = act.TipoEvento
						AND a.OrdenAccion = act.OrdenAccion 
WHERE (act.Formulario_Id = @liFormulario) and (a.Accion <> 'InvocarMetodo') and (a.Accion <> 'DoDefault')
AND (a.Habilitado = 1)
UNION
SELECT disAcciones1.Control_Id, disAcciones1.TipoEvento, cast(disAcciones1.OrdenAccion * 10000 + disAcciones2.OrdenAccion as int) as OrdenAccion, 
	act.Tabla_id, disAcciones2.Accion_Id
FROM disAcciones disAcciones1
INNER JOIN disAcciones disAcciones2 ON (disAcciones2.TipoEvento = disAcciones1.Texto
                                        and disAcciones2.Formulario_Id = disAcciones1.Formulario_Id)
INNER JOIN disAccionesTablasaActualizar act ON disAcciones2.Formulario_Id = act.Formulario_Id 
											AND disAcciones2.Control_Id = act.Control_Id 
											AND disAcciones2.TipoEvento = act.TipoEvento
											AND disAcciones2.OrdenAccion = act.OrdenAccion 
WHERE (disAcciones1.Formulario_Id = @liFormulario) and (disAcciones1.Accion = 'InvocarMetodo') 
		and (disAcciones1.Accion <> 'DoDefault') and (disAcciones2.Accion <> 'DoDefault')
		AND (disAcciones1.Habilitado = 1)
		AND (disAcciones2.Habilitado = 1)
UNION
SELECT disAcciones.Control_Id, disAcciones.TipoEvento, cast(disAcciones.OrdenAccion * 10000 as int) as OrdenAccion, 
	act.Tabla_Id, disAcciones.Accion_Id
FROM disAcciones
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disAcciones.Formulario_Id
INNER JOIN disAccionesTablasaActualizar act ON disAcciones.Formulario_Id = act.Formulario_Id 
											AND disAcciones.Control_Id = act.Control_Id 
											AND disAcciones.TipoEvento = act.TipoEvento
											AND disAcciones.OrdenAccion = act.OrdenAccion 
WHERE (disAcciones.Accion <> 'InvocarMetodo') and (disAcciones.Accion <> 'DoDefault')
AND (disAcciones.Habilitado = 1)
UNION
SELECT disAcciones1.Control_Id, disAcciones1.TipoEvento, cast(disAcciones1.OrdenAccion * 10000 + disAcciones2.OrdenAccion as int) as OrdenAccion, 
	act.Tabla_id, disAcciones2.Accion_Id
FROM disAcciones disAcciones1
INNER JOIN disAcciones disAcciones2 ON (disAcciones2.TipoEvento = disAcciones1.Texto
                                        and disAcciones2.Formulario_Id = disAcciones1.Formulario_Id)
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disAcciones1.Formulario_Id 
INNER JOIN disAccionesTablasaActualizar act ON disAcciones2.Formulario_Id = act.Formulario_Id 
											AND disAcciones2.Control_Id = act.Control_Id 
											AND disAcciones2.TipoEvento = act.TipoEvento
											AND disAcciones2.OrdenAccion = act.OrdenAccion 
WHERE (disAcciones1.Accion = 'InvocarMetodo') 
		and (disAcciones1.Accion <> 'DoDefault') and (disAcciones2.Accion <> 'DoDefault')
		AND (disAcciones1.Habilitado = 1)
		AND (disAcciones2.Habilitado = 1)
ORDER BY 1, 2, 3
END


--tablas a enviar al invocar a una accion
IF (@pParaWeb = 0)
BEGIN
	SELECT act.Control_Id, act.TipoEvento, cast(act.OrdenAccion as int) as OrdenAccion, act.Tabla_Id, a.Accion_Id
	FROM disAccionesTablasaEnviar act
	INNER JOIN disAcciones a ON a.Formulario_Id = act.Formulario_Id 
						AND a.Control_Id = act.Control_Id 
						AND a.TipoEvento = act.TipoEvento
						AND a.OrdenAccion = act.OrdenAccion 

	WHERE (act.Formulario_Id = @liFormulario)
	ORDER BY 1, 2, 3, 4
END
ELSE --si es para generar la aplciacion web, debo reemplazar la invocacion al metodo por las acciones del metodo
BEGIN
SELECT act.Control_Id, act.TipoEvento, cast(act.OrdenAccion * 10000 as int) as OrdenAccion, act.Tabla_id, a.Accion_Id
FROM disAccionesTablasaEnviar act
INNER JOIN disAcciones a ON a.Formulario_Id = act.Formulario_Id 
						AND a.Control_Id = act.Control_Id 
						AND a.TipoEvento = act.TipoEvento
						AND a.OrdenAccion = act.OrdenAccion 
WHERE (act.Formulario_Id = @liFormulario) and (a.Accion <> 'InvocarMetodo') and (a.Accion <> 'DoDefault')
AND (a.Habilitado = 1)
UNION
SELECT disAcciones1.Control_Id, disAcciones1.TipoEvento, cast(disAcciones1.OrdenAccion * 10000 + disAcciones2.OrdenAccion as int) as OrdenAccion, 
	act.Tabla_id, disAcciones2.Accion_Id
FROM disAcciones disAcciones1
INNER JOIN disAcciones disAcciones2 ON (disAcciones2.TipoEvento = disAcciones1.Texto
                                        and disAcciones2.Formulario_Id = disAcciones1.Formulario_Id)
INNER JOIN disAccionesTablasaEnviar act ON disAcciones2.Formulario_Id = act.Formulario_Id 
											AND disAcciones2.Control_Id = act.Control_Id 
											AND disAcciones2.TipoEvento = act.TipoEvento
											AND disAcciones2.OrdenAccion = act.OrdenAccion 
WHERE (disAcciones1.Formulario_Id = @liFormulario) and (disAcciones1.Accion = 'InvocarMetodo') 
		and (disAcciones1.Accion <> 'DoDefault') and (disAcciones2.Accion <> 'DoDefault')
		AND (disAcciones1.Habilitado = 1)
		AND (disAcciones2.Habilitado = 1)
UNION
SELECT disAcciones.Control_Id, disAcciones.TipoEvento, cast(disAcciones.OrdenAccion * 10000 as int) as OrdenAccion, 
	act.Tabla_Id, disAcciones.Accion_Id
FROM disAcciones
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disAcciones.Formulario_Id
INNER JOIN disAccionesTablasaEnviar act ON disAcciones.Formulario_Id = act.Formulario_Id 
											AND disAcciones.Control_Id = act.Control_Id 
											AND disAcciones.TipoEvento = act.TipoEvento
											AND disAcciones.OrdenAccion = act.OrdenAccion 
WHERE (disAcciones.Accion <> 'InvocarMetodo') and (disAcciones.Accion <> 'DoDefault')
AND (disAcciones.Habilitado = 1)
UNION
SELECT disAcciones1.Control_Id, disAcciones1.TipoEvento, cast(disAcciones1.OrdenAccion * 10000 + disAcciones2.OrdenAccion as int) as OrdenAccion, 
	act.Tabla_id, disAcciones2.Accion_Id
FROM disAcciones disAcciones1
INNER JOIN disAcciones disAcciones2 ON (disAcciones2.TipoEvento = disAcciones1.Texto
                                        and disAcciones2.Formulario_Id = disAcciones1.Formulario_Id)
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disAcciones1.Formulario_Id 
INNER JOIN disAccionesTablasaEnviar act ON disAcciones2.Formulario_Id = act.Formulario_Id 
											AND disAcciones2.Control_Id = act.Control_Id 
											AND disAcciones2.TipoEvento = act.TipoEvento
											AND disAcciones2.OrdenAccion = act.OrdenAccion 
WHERE (disAcciones1.Accion = 'InvocarMetodo') 
		and (disAcciones1.Accion <> 'DoDefault') and (disAcciones2.Accion <> 'DoDefault')
		AND (disAcciones1.Habilitado = 1)
		AND (disAcciones2.Habilitado = 1)
ORDER BY 1, 2, 3
END

-- Extras, para evitar llamar a mas acciones
SELECT genSegmentoOrigenes.OriSeg_Id, genSegmentoOrigenes.Descripcion
FROM genSegmentoOrigenes  

--obtener todos los posibles segmentos
SELECT Segmento_Id
FROM genSegmentos


-- Obtener configuracion de segmento
SELECT distinct vseg.Segmento_id, vseg.Orden, vseg.Campo, vseg.Tipo, vseg.Digitos, 
	   cast(case when seg.TamanioVariable = cast(vseg.Campo as char(1)) + vseg.Tipo then 1 else 0 end as bit) as EsTamaniovariable,
	   vseg.TieneColumnaAutomatica , vseg.Origen,vseg.Nombre, vseg.HabilitaEdicion 
FROM disControlesSegmento
INNER JOIN vGenSegmentosConfiguracion vseg ON vseg.genSegmentos = disControlesSegmento.Segmento_Id
INNER JOIN genSegmentos seg ON seg.genSegmentos = disControlesSegmento.Segmento_Id
WHERE (disControlesSegmento.Formulario_Id = @liFormulario) 
OR (disControlesSegmento.Formulario_Id in (select Id from @ListaDeFormInscrustados))
ORDER BY 1, 2

--Obtener Atributos generales
SELECT AtributoNro, Descripcion, Tipo
FROM genAtributosGenerales
WHERE Tabla_Id = @lTabla_Id
AND EnGrilla = 1

--Obtener Atributos generales especializacion 
-- solo debo agregar los especializados si el formulario es una especializacion
SELECT AtributoNro, Descripcion, Tipo
FROM genAtributosGenerales
WHERE Tabla_Id = @lTabla_Id
AND @lEspecializacion IS NOT NULL
AND EnGrilla = 0

--Obtener Comentarios, ordenados por fecha de registro
if (@pParaWeb = 0)
begin
SELECT FechaRegistro, FechaRegistroOrig, FechaUltModif, Comentario, /*disformularios.formulario_id as*/ FormularioRegOrig_Id, Comentario_Id, TipoComentario
FROM disFormulariosComentarios
--LEFT JOIN disformularios on disformularios.disformularios = disFormulariosComentarios.FormularioRegOrig_Id
WHERE (disFormulariosComentarios.Formulario_Id = @liFormulario) 
end
else
begin
SELECT FechaRegistro, FechaRegistroOrig, FechaUltModif, Comentario, /*disformularios.formulario_id as*/ FormularioRegOrig_Id, Comentario_Id, TipoComentario
FROM disFormulariosComentarios
--LEFT JOIN disformularios on disformularios.disformularios = disFormulariosComentarios.FormularioRegOrig_Id
WHERE (disFormulariosComentarios.Formulario_Id = -1) 
end


IF (@pParaWeb = 0)
BEGIN
	SELECT disAccionesDescargaEsp.Control_Id, disAccionesDescargaEsp.TipoEvento, disAccionesDescargaEsp.Accion, disAccionesDescargaEsp.ControlDestino_Id, disAccionesDescargaEsp.Texto
	FROM disAccionesDescargaEsp 
	WHERE (Formulario_Id = @liFormulario)
	AND (1 = 0)

	SELECT 	genControlesSeteos.Control_Id, genControlesSeteos.Orden, genControlesSeteos.Valor,  genControlesSeteos.ModificoValor, genControlesSeteos.Deshabilitar, 
		genControlesSeteos.Ocultar, genControlesSeteos.SeteadoPorSistema, genControlesSeteos.Usuario_Id,  disControles.TipoControl, TablasColumnas1.Tabla_Id, TablasColumnas1.Columna_Id
	FROM genControlesSeteos 
	INNER JOIN disControles ON disControles.Formulario_Id = genControlesSeteos.Formulario_Id AND disControles.Control_Id = genControlesSeteos.Control_Id
	LEFT JOIN disTablasColumnas as TablasColumnas1 ON (TablasColumnas1.Control_Id = disControles.Control_Id) 
		  AND (TablasColumnas1.Formulario_Id = disControles.Formulario_Id)
		  AND ((TablasColumnas1.AdicionalControl is null) 
		  -- Es el codigo de la Lupa
		  OR (TablasColumnas1.AdicionalControl = '1') 
		  -- Es el campo cliente del upoload
		  OR (TablasColumnas1.AdicionalControl = 'C')) 
	WHERE (genControlesSeteos.Formulario_Id = @liFormulario)
	AND (1 = 0)

END
ELSE 
BEGIN
	SELECT disAccionesDescargaEsp.Control_Id, disAccionesDescargaEsp.TipoEvento, disAccionesDescargaEsp.Accion, disAccionesDescargaEsp.ControlDestino_Id, disAccionesDescargaEsp.Texto
	FROM disAccionesDescargaEsp 
	WHERE (Formulario_Id = @liFormulario)
	ORDER BY 1, 2, 3

	SELECT 	genControlesSeteos.Control_Id, genControlesSeteos.Orden, genControlesSeteos.Valor,  genControlesSeteos.ModificoValor, genControlesSeteos.Deshabilitar, 
		genControlesSeteos.Ocultar, genControlesSeteos.SeteadoPorSistema, genControlesSeteos.Usuario_Id,  disControles.TipoControl, TablasColumnas1.Tabla_Id, TablasColumnas1.Columna_Id
	FROM genControlesSeteos 
	INNER JOIN disControles ON disControles.Formulario_Id = genControlesSeteos.Formulario_Id AND disControles.Control_Id = genControlesSeteos.Control_Id
	LEFT JOIN disTablasColumnas as TablasColumnas1 ON (TablasColumnas1.Control_Id = disControles.Control_Id) 
		  AND (TablasColumnas1.Formulario_Id = disControles.Formulario_Id)
		  AND ((TablasColumnas1.AdicionalControl is null) 
		  -- Es el codigo de la Lupa
		  OR (TablasColumnas1.AdicionalControl = '1') 
		  -- Es el campo cliente del upoload
		  OR (TablasColumnas1.AdicionalControl = 'C')) 
	WHERE (genControlesSeteos.Formulario_Id = @liFormulario)
	UNION
	SELECT genControlesSeteos.Control_Id, genControlesSeteos.Orden, genControlesSeteos.Valor,  genControlesSeteos.ModificoValor, genControlesSeteos.Deshabilitar, 
		genControlesSeteos.Ocultar, genControlesSeteos.SeteadoPorSistema, genControlesSeteos.Usuario_Id, 'Columna', '', ''
	FROM genControlesSeteos 
	INNER JOIN disControlesGrillaColumnas c1 ON genControlesSeteos.Formulario_Id = c1.Formulario_Id AND
										(c1.Control_Id + '.' + c1.NombreCampo = genControlesSeteos.Control_Id)
	WHERE (genControlesSeteos.Formulario_Id = @liFormulario)
	order by genControlesSeteos.Orden

END



RETURN @@Error 

GO




DROP PROCEDURE disFormulariosEliminar
GO
CREATE PROCEDURE disFormulariosEliminar
(
@pFormulario_Id varchar(30) = NULL
)
AS
SET NOCOUNT ON 

--Borro antes el control que est? asociado al formulario

DELETE FROM disControles 
WHERE Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id)

DELETE FROM disFormularios 
WHERE (Formulario_Id = @pFormulario_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE disFormulariosHijosDatos
GO
CREATE PROCEDURE disFormulariosHijosDatos
(
@pFormulario_Id varchar(30) = NULL
)
AS
SET NOCOUNT ON 

SELECT Formulario_Id
FROM disFormularios 
WHERE (FormularioPadre_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
-- Solo considero los hijos que ya hn pasado algunas vez por el dise?ador
AND exists (select 1 from disTablas where Formulario_Id = disFormularios.disFormularios)
 
RETURN @@Error 

GO

DROP PROCEDURE disFormulariosFamiliaDatos
GO
CREATE PROCEDURE disFormulariosFamiliaDatos
(
@pFormulario_Id varchar(30) = NULL
)
AS
SET NOCOUNT ON 
DECLARE @lPadreNivel0 int;

	WITH FormulariosPadre (FormularioPadre_Id, disformulario, formulario_Id, nivel)
    AS
    (
        SELECT e.FormularioPadre_Id, e.disFormularios, e.Formulario_Id, 0 AS nivel
        FROM disFormularios AS e
        WHERE Formulario_Id = @pFormulario_Id
        UNION ALL
        SELECT e.FormularioPadre_Id, e.disFormularios, e.Formulario_Id, nivel + 1
        FROM disFormularios AS e
        INNER JOIN FormulariosPadre AS d
            ON e.disFormularios = d.FormularioPadre_Id
    )


    -- Statement that executes the CTE
    SELECT  @lPadreNivel0 = disFormulario
    FROM FormulariosPadre
    --WHERE title = N'Sales and Marketing' OR Level = 0;
	WHERE FormularioPadre_Id IS NULL;


	WITH FormulariosFamiliares (FormularioPadre_Id, disFormularios, Formulario_Id, Nivel)
    AS
    (
    -- Anchor member definition
        SELECT e.FormularioPadre_Id, e.disFormularios, e.Formulario_Id, 0 AS Nivel
        FROM disFormularios AS e
        WHERE disFormularios = @lPadreNivel0
        UNION ALL
    -- Recursive member definition
        SELECT e.FormularioPadre_Id, e.disFormularios, e.Formulario_Id, Nivel + 1
        FROM disFormularios AS e
        INNER JOIN FormulariosFamiliares AS d
            ON e.FormularioPadre_Id = d.disFormularios
    )
    -- Statement that executes the CTE
    SELECT distinct FormularioPadre_Id, disFormularios, Formulario_Id, Nivel
    FROM FormulariosFamiliares
	order by nivel
 
RETURN @@Error 

GO


DROP PROCEDURE disFormulariosFamiliaTodaActualizar
GO
CREATE PROCEDURE disFormulariosFamiliaTodaActualizar
(
@pFormulario_Id varchar(30) = NULL
)
AS
SET NOCOUNT ON 
--DECLARE @lPadreNivel0 int;
DECLARE @lFormIdentity int;
DECLARE @lVersion varchar(10);
DECLARE @lFormsDescendientes Table (Id int)

	select @lFormIdentity = disFormularios.disFormularios, @lVersion = isnull(disFormularios.Version,'') from disFormularios where Formulario_Id = @pFormulario_Id;
	
	---- Busco el padre del formulario, nivel 0
	--WITH FormulariosPadre (FormularioPadre_Id, disformulario, formulario_Id, nivel)
 --   AS
 --   (
 --       SELECT e.FormularioPadre_Id, e.disFormularios, e.Formulario_Id, 0 AS nivel
 --       FROM disFormularios AS e
 --       WHERE Formulario_Id = @pFormulario_Id
 --       UNION ALL
 --       SELECT e.FormularioPadre_Id, e.disFormularios, e.Formulario_Id, nivel + 1
 --       FROM disFormularios AS e
 --       INNER JOIN FormulariosPadre AS d
 --           ON e.disFormularios = d.FormularioPadre_Id
 --   )

	-- -- Statement that executes the CTE
 --   SELECT  @lPadreNivel0 = disFormulario
 --   FROM FormulariosPadre
 --   --WHERE title = N'Sales and Marketing' OR Level = 0;
	--WHERE FormularioPadre_Id IS NULL;

	---- Marco como modificado todos los descendientes del padre nivel 0, o sea, todos los familiares del formulario modificado
	--WITH FormulariosFamiliares (FormularioPadre_Id, disFormularios, Formulario_Id, Nivel)
 --   AS
 --   (
 --   -- Anchor member definition
 --       SELECT e.FormularioPadre_Id, e.disFormularios, e.Formulario_Id, 0 AS Nivel
 --       FROM disFormularios AS e
 --       WHERE disFormularios = @lPadreNivel0
 --       UNION ALL
 --   -- Recursive member definition
 --       SELECT e.FormularioPadre_Id, e.disFormularios, e.Formulario_Id, Nivel + 1
 --       FROM disFormularios AS e
 --       INNER JOIN FormulariosFamiliares AS d
 --           ON e.FormularioPadre_Id = d.disFormularios
 --   )
 --   -- Statement that executes the CTE
	--update disFormularios
	--set UltimaModif = getDate()
	--where exists (select 1 from FormulariosFamiliares where  FormulariosFamiliares.disFormularios = disFormularios.disFormularios);

	--Busco todos los descendientes del formulario modificado y cambio version
	WITH FormulariosDescendientes1 (disformulario)
    AS
    (
        SELECT e.disFormularios
        FROM disFormularios AS e
        WHERE FormularioPadre_Id = @lFormIdentity
        UNION ALL
        SELECT e.disFormularios
        FROM disFormularios AS e
        INNER JOIN FormulariosDescendientes1 AS d
            ON e.FormularioPadre_Id = d.disformulario
    )

	 -- Statement that executes the CTE
	update disFormularios
	set Version = @lVersion, UltimaModif = getDate()
	where exists (select 1 from FormulariosDescendientes1 where  FormulariosDescendientes1.disFormulario = disFormularios.disFormularios)
	and isnull(version, '') < @lVersion;

	----Busco todos los descendientes del formulario modificado
	--WITH FormulariosDescendientes (disformulario)
 --   AS
 --   (
 --       SELECT e.disFormularios
 --       FROM disFormularios AS e
 --       WHERE FormularioPadre_Id = @lFormIdentity
 --       UNION ALL
 --       SELECT e.disFormularios
 --       FROM disFormularios AS e
 --       INNER JOIN FormulariosDescendientes AS d
 --           ON e.FormularioPadre_Id = d.disformulario
 --   )

	-- -- Statement that executes the CTE
	--insert @lFormsDescendientes (Id)
 --   SELECT  disFormulario
 --   FROM FormulariosDescendientes;


	----Agrego comentario a todos los familiares, excepto al formulario modificado y a sus descendientes
	--WITH FormulariosFamiliares2 (FormularioPadre_Id, disFormularios, Formulario_Id, Nivel)
 --   AS
 --   (
 --   -- Anchor member definition
 --       SELECT e.FormularioPadre_Id, e.disFormularios, e.Formulario_Id, 0 AS Nivel
 --       FROM disFormularios AS e
 --       WHERE disFormularios = @lPadreNivel0
 --       UNION ALL
 --   -- Recursive member definition
 --       SELECT e.FormularioPadre_Id, e.disFormularios, e.Formulario_Id, Nivel + 1
 --       FROM disFormularios AS e
 --       INNER JOIN FormulariosFamiliares2 AS d
 --           ON e.FormularioPadre_Id = d.disFormularios
 --   )
 --   -- Statement that executes the CTE
	--insert into disFormulariosComentarios (Formulario_Id, FechaRegistro, FechaRegistroOrig, FechaUltModif, Comentario, FormularioRegOrig_Id)
	--select FormulariosFamiliares2.disFormularios, GETDATE(), GETDATE(), GETDATE(), 'Actualizado por Cambio en Familiar', /*@lFormIdentity*/ @pFormulario_Id
	--from FormulariosFamiliares2
	--where (FormulariosFamiliares2.disFormularios <> @lFormIdentity)
	--and not exists (select 1 from @lFormsDescendientes fd where fd.Id = FormulariosFamiliares2.disFormularios)
	--and not exists (select 1 from disFormulariosComentarios 
	--						where Formulario_Id = FormulariosFamiliares2.disFormularios AND 
	--						cast(FechaUltModif as date) = cast(GETDATE() as date) AND  
	--						Comentario = 'Actualizado por Cambio en Familiar')

RETURN @@Error 
GO




DROP FUNCTION FuncFKdisFormularios
GO

CREATE FUNCTION FuncFKdisFormularios
(
@pFormulario_Id varchar (30)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = disFormularios 
  FROM disFormularios 
  WHERE Formulario_Id = @pFormulario_Id
  RETURN @pIdentity
END


GO

DROP TRIGGER truUltimaModif_disFormularios
GO
CREATE TRIGGER truUltimaModif_disFormularios
ON disFormularios
AFTER UPDATE 
AS
BEGIN
    IF NOT UPDATE(UltimaModif)
    BEGIN
        UPDATE t
            SET t.UltimaModif = dbo.FechaActual()
            FROM disFormularios AS t 
            INNER JOIN inserted AS i 
            ON t.disFormularios = i.disFormularios;
    END
END
GO


DROP PROCEDURE disFormulariosExiste
GO
CREATE PROCEDURE [dbo].[disFormulariosExiste]
(
@pFormulario_Id varchar(30)
)
AS

SELECT disFormularios.disFormularios, disFormularios.Formulario_Id, disFormularios.Descripcion, disFormularios.Alto,
	disFormularios.Ancho, disFormularios.Arriba, disFormularios.Izquierda, disFormularios.Titulo, disFormularios.PosicionInicial,
	disFormularios.BotonNuevo, disFormularios.BotonGuardar, disFormularios.BotonPostear,
	disFormularios.BotonEliminar, disFormularios.BotonImprimir, disFormularios.GuardaeImprime,
	disFormularios.Tabla_Id, disFormularios.DllCommon, disFormularios.ClaseCommon,
	disFormularios.DllExchange, disFormularios.ClaseExchange, disFormularios.ClaseEnum,
	disFormularios.DllEventos, disFormularios.ClaseEventos, CAST(0 AS BIT) as ParaWeb,
	disFormularios.Posteado, disFormularios.Inactivo, disFormularios.Usuario_Id,
	FormPadre.Formulario_Id as FormularioPadre_Id, ISNULL(disControles.TipoControl, 'frm') as TipoFormulario, 
	disFormularios.BotonRptVer, disFormularios.BotonRptImprimir, disFormularios.BotonRptPdf, disFormularios.BotonRptXls
FROM disFormularios 
LEFT JOIN disFormularios FormPadre ON FormPadre.disFormularios = disFormularios.FormularioPadre_Id
LEFT JOIN disControles ON disControles.Formulario_Id = disFormularios.disFormularios AND disControles.Control_Id = disFormularios.Formulario_Id
WHERE disFormularios.disFormularios = dbo.FuncFKdisFormularios(@pFormulario_Id)
Go

DROP PROCEDURE disFormulariosPadresTodos 
GO
CREATE PROCEDURE disFormulariosPadresTodos 
AS

select Formulario_id, Descripcion 
from disFormularios
Where (inactivo = 0) and (FormularioPadre_Id is null)
ORDER BY 1

GO


DROP PROCEDURE tempdisDisenioBorrar
GO
CREATE PROCEDURE tempdisDisenioBorrar
AS

SET NOCOUNT ON 
IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesBotonLupa'))
BEGIN
DROP TABLE TempdisControlesBotonLupa
END

SET NOCOUNT ON 
IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesBotonSegmento'))
BEGIN
DROP TABLE TempdisControlesBotonSegmento
END


SET NOCOUNT ON 
IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesBoton'))
BEGIN
DROP TABLE TempdisControlesBoton
END

SET NOCOUNT ON 
IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesGrillaPivot'))
BEGIN
DROP TABLE TempdisControlesGrillaPivot
END

SET NOCOUNT ON 
IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesIndicador'))
BEGIN
DROP TABLE TempdisControlesIndicador
END



SET NOCOUNT ON 
IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesLink'))
BEGIN
DROP TABLE TempdisControlesLink
END

SET NOCOUNT ON 
IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesIndicador'))
BEGIN
DROP TABLE TempdisControlesIndicador
END


SET NOCOUNT ON 
IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesListaAdjuntos'))
BEGIN
DROP TABLE TempdisControlesListaAdjuntos
END

SET NOCOUNT ON 
IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesGraficoTorta'))
BEGIN
DROP TABLE TempdisControlesGraficoTorta
END

SET NOCOUNT ON 
IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesGrafico'))
BEGIN
DROP TABLE TempdisControlesGrafico
END


SET NOCOUNT ON 
IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisAcciones'))
BEGIN
DROP TABLE TempdisAcciones 
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisAccionesTablasaActualizar'))
BEGIN
DROP TABLE TempdisAccionesTablasaActualizar
END
IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisAccionesTablasaEnviar'))
BEGIN
DROP TABLE TempdisAccionesTablasaEnviar
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControles'))
BEGIN
DROP TABLE TempdisControles 
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesCheckBox'))
BEGIN
DROP TABLE TempdisControlesCheckBox
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesColumnaSolapa'))
BEGIN
DROP TABLE TempdisControlesColumnaSolapa
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesCombo'))
BEGIN
DROP TABLE TempdisControlesCombo 
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesComboItems'))
BEGIN
DROP TABLE TempdisControlesComboItems
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesFecha'))
BEGIN
DROP TABLE TempdisControlesFecha 
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesFilaSolapa'))
BEGIN
DROP TABLE TempdisControlesFilaSolapa
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesGrilla'))
BEGIN
DROP TABLE TempdisControlesGrilla 
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesGrillaColumnas'))
BEGIN
DROP TABLE TempdisControlesGrillaColumnas
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesGrupoSolapa'))
BEGIN
DROP TABLE TempdisControlesGrupoSolapa
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesLupa'))
BEGIN
DROP TABLE TempdisControlesLupa
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesNumerico'))
BEGIN
DROP TABLE TempdisControlesNumerico
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesParametros'))
BEGIN
DROP TABLE TempdisControlesParametros
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesReferencia'))
BEGIN
DROP TABLE TempdisControlesReferencia
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesRefSolapa'))
BEGIN
DROP TABLE TempdisControlesRefSolapa 
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesSegmento'))
BEGIN
DROP TABLE TempdisControlesSegmento 
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesSolapa'))
BEGIN
DROP TABLE TempdisControlesSolapa 
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesTexto'))
BEGIN
DROP TABLE TempdisControlesTexto 
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisControlesUpLoad'))
BEGIN
DROP TABLE TempdisControlesUpLoad 
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisEventos'))
BEGIN
DROP TABLE TempdisEventos 
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisFormularios'))
BEGIN
DROP TABLE TempdisFormularios 
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisFormulariosParametros'))
BEGIN
DROP TABLE TempdisFormulariosParametros 
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisRelacionesTablas'))
BEGIN
DROP TABLE TempdisRelacionesTablas 
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisTablas'))
BEGIN
DROP TABLE TempdisTablas 
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisTablasColumnas'))
BEGIN
DROP TABLE TempdisTablasColumnas 
END

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisFormulariosComentarios'))
BEGIN
DROP TABLE TempdisFormulariosComentarios 
END

SET NOCOUNT ON 
IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TempdisAccionesDescargaEsp'))
BEGIN
DROP TABLE TempdisAccionesDescargaEsp
END


GO


DROP PROCEDURE TempdisDisenioCopiarActual
GO
CREATE PROCEDURE TempdisDisenioCopiarActual
AS
SET NOCOUNT ON 

--Primero elimino todo lo que pudiera existir en temporal
exec tempdisDisenioBorrar

--INSERT INTO TempdisAcciones (Formulario_Id, Control_Id, TipoEvento, OrdenAccion, Accion, ControlDestino_Id,
--			Texto, ControlTexto_Id, ValorCondicion, Accion_Id, AccionPadre_Id, Heredado,
--			Habilitado, EsEspecializacion, AdicionalInfo)
--SELECT Formulario_Id, Control_Id, TipoEvento, OrdenAccion, Accion, ControlDestino_Id,
--		Texto, ControlTexto_Id, ValorCondicion, Accion_Id, AccionPadre_Id, Heredado,
--		Habilitado, EsEspecializacion, AdicionalInfo
SELECT *
INTO dbo.TempdisAcciones
FROM disAcciones


--INSERT INTO TempdisAccionesTablasaActualizar (Formulario_Id, Control_Id, TipoEvento , OrdenAccion, Tabla_Id )
--SELECT Formulario_Id, Control_Id, TipoEvento , OrdenAccion, Tabla_Id  
SELECT *
INTO dbo.TempdisAccionesTablasaActualizar
FROM disAccionesTablasaActualizar


--INSERT INTO TempdisAccionesTablasaEnviar (Formulario_Id, Control_Id, TipoEvento, OrdenAccion, Tabla_Id)
--SELECT Formulario_Id, Control_Id, TipoEvento, OrdenAccion, Tabla_Id  
SELECT *
INTO dbo.TempdisAccionesTablasaEnviar
FROM disAccionesTablasaEnviar


--INSERT INTO TempdisControles (Formulario_Id, Control_Id, NroControl, ControlParent_Id, TipoControl, Alto, Ancho, Arriba, Izquierda, Texto, Visible,
--	  Habilitado, Alineacion, TabStop, TabOrden, Requerido, Embebido, Ancla, EsCodigoNuevo, Paises, Fila, Columna, FilasExtension,
--	  ColumnasExtension, MaximaLongitud, ClickNuevoBlanquea, ControlaCambios, SoloLectura, TextoFijo, TextoControlVacio,
--	  Estilo, TituloLabel, AlineacionLabel, IgualaAnchoColumna, ControlSegmento, Heredado, SegmentoOrigen)
--SELECT Formulario_Id, Control_Id, NroControl, ControlParent_Id, TipoControl, Alto, Ancho, Arriba, Izquierda, Texto, Visible,
--	  Habilitado, Alineacion, TabStop, TabOrden, Requerido, Embebido, Ancla, EsCodigoNuevo, Paises, Fila, Columna, FilasExtension,
--	  ColumnasExtension, MaximaLongitud, ClickNuevoBlanquea, ControlaCambios, SoloLectura, TextoFijo, TextoControlVacio,
--	  Estilo, TituloLabel, AlineacionLabel, IgualaAnchoColumna, ControlSegmento, Heredado, SegmentoOrigen
SELECT *
INTO dbo.TempdisControles
FROM disControles


--INSERT INTO TempdisControlesCheckBox (Formulario_Id, Control_Id, Checked)
--SELECT Formulario_Id, Control_Id, Checked  
SELECT *
INTO dbo.TempdisControlesCheckBox
FROM disControlesCheckBox


--INSERT INTO TempdisControlesColumnaSolapa (Formulario_Id, Control_Id, Columna, Ancho, TipoValor)
--SELECT Formulario_Id, Control_Id, Columna, Ancho, TipoValor
SELECT *
INTO dbo.TempdisControlesColumnaSolapa
FROM disControlesColumnaSolapa


--INSERT INTO TempdisControlesCombo (Formulario_Id, Control_Id, MultiSeleccion, CheckBoxes, Identidad, Identidad_Id, EsOptionGroup, OptionGroupHorizontal)
--SELECT Formulario_Id, Control_Id, MultiSeleccion, CheckBoxes, Identidad, Identidad_Id, EsOptionGroup, OptionGroupHorizontal
SELECT *
INTO dbo.TempdisControlesCombo
FROM disControlesCombo


--INSERT INTO TempdisControlesComboItems (Formulario_Id, Control_Id, Valor, Descripcion, Tipo)
--SELECT Formulario_Id, Control_Id, Valor, Descripcion, Tipo
SELECT *
INTO dbo.TempdisControlesComboItems 
FROM disControlesComboItems


--INSERT INTO TempdisControlesFecha (Formulario_Id, Control_Id, ValorMinimo, ValorMaximo, DiasDiferenciaFecha, DiasDiferenciaFechaMaxima, DiasDiferenciaFechaMinima)
--SELECT Formulario_Id, Control_Id, ValorMinimo, ValorMaximo, DiasDiferenciaFecha, DiasDiferenciaFechaMaxima, DiasDiferenciaFechaMinima
SELECT *
INTO dbo.TempdisControlesFecha
FROM disControlesFecha


--INSERT INTO TempdisControlesFilaSolapa (Formulario_Id, Control_Id, Fila, Alto, TipoValor)
--SELECT Formulario_Id, Control_Id, Fila, Alto, TipoValor  
SELECT *
INTO dbo.TempdisControlesFilaSolapa
FROM disControlesFilaSolapa


--INSERT INTO TempdisControlesGrilla (Formulario_Id, Control_Id, PermiteAgregarFilas, PermiteBorrarFilas, PermiteEditarCeldas, EditaEnGrilla, RegistrosxPagina, 
--		AutoFormateable, EsGrillaAdjuntos, EsArbol, AccionNuevoValorNodo)
--SELECT Formulario_Id, Control_Id, PermiteAgregarFilas, PermiteBorrarFilas, PermiteEditarCeldas, EditaEnGrilla, RegistrosxPagina, 
--		AutoFormateable, EsGrillaAdjuntos, EsArbol, AccionNuevoValorNodo
SELECT *
INTO dbo.TempdisControlesGrilla
FROM disControlesGrilla


--INSERT INTO TempdisControlesGrillaColumnas (Formulario_Id, Control_Id, NombreCampo, Posicion, Titulo, TipoDato, Formato, Visible, ControlColumna_Id, Ancho, AnchoVariable,
--		Alineacion, SoloLectura, ModoTamanioVariable, CongelarTamanio, AnchoMinimo, ModoOrdenamiento, TextoColumnaVacia, Texto, 
--		EsParamAccionBoton, Heredado, Requerido, AutoNumerico, EsPrimaryKey, ItemsCombo, Identidad_Id)
--SELECT Formulario_Id, Control_Id, NombreCampo, Posicion, Titulo, TipoDato, Formato, Visible, ControlColumna_Id, Ancho, AnchoVariable,
--		Alineacion, SoloLectura, ModoTamanioVariable, CongelarTamanio, AnchoMinimo, ModoOrdenamiento, TextoColumnaVacia, Texto, 
--		EsParamAccionBoton, Heredado, Requerido, AutoNumerico, EsPrimaryKey, ItemsCombo, Identidad_Id
SELECT *
INTO dbo.TempdisControlesGrillaColumnas
FROM disControlesGrillaColumnas


--INSERT INTO TempdisControlesGrupoSolapa (Formulario_Id, Control_Id, CantSolapas )
--SELECT Formulario_Id, Control_Id, CantSolapas 
SELECT *
INTO dbo.TempdisControlesGrupoSolapa 
FROM disControlesGrupoSolapa


--INSERT INTO TempdisControlesLupa (Formulario_Id, Control_Id, CamposClave, CantMaxRegAMostrar, EsLaEntidadDelForm, OrderBy, TraePrimerRegistro, UsaAccion, DescripcionCharCasing,
--	DescripcionMaxLength, DescripcionTexto, DescripcionOculta, ColumnaGrillaDescripcion, Identidad_Id, Filtros, CodigoTipo, CodigoCharCasing, CodigoMask,
--	CodigoRegExpression, CodigoMaxLength, CodigoTexto, CodigoWidth, CodigoNombreColumna, AdicionalesCampos, AdicionalesControles,
--	AdicionalesParametros, PermiteNoExistentes)
--SELECT Formulario_Id, Control_Id, CamposClave, CantMaxRegAMostrar, EsLaEntidadDelForm, OrderBy, TraePrimerRegistro, UsaAccion, DescripcionCharCasing,
--	DescripcionMaxLength, DescripcionTexto, DescripcionOculta, ColumnaGrillaDescripcion, Identidad_Id, Filtros, CodigoTipo, CodigoCharCasing, CodigoMask,
--	CodigoRegExpression, CodigoMaxLength, CodigoTexto, CodigoWidth, CodigoNombreColumna, AdicionalesCampos, AdicionalesControles,
--	AdicionalesParametros, PermiteNoExistentes
SELECT *
INTO dbo.TempdisControlesLupa
  FROM disControlesLupa


--INSERT INTO TempdisControlesNumerico (Formulario_Id, Control_Id, Decimales, BotonSpin, SpinIncremento, ValorMinimo, ValorMaximo, EsPorcentaje)
--SELECT Formulario_Id, Control_Id, Decimales, BotonSpin, SpinIncremento, ValorMinimo, ValorMaximo, EsPorcentaje
SELECT *
INTO dbo.TempdisControlesNumerico
  FROM disControlesNumerico


--INSERT INTO TempdisControlesParametros (Formulario_Id, Control_Id, TipoDato)
--SELECT Formulario_Id, Control_Id, TipoDato
SELECT *
INTO dbo.TempdisControlesParametros
  FROM disControlesParametros


--INSERT INTO TempdisControlesReferencia (Formulario_Id, Control_Id, FormularioPopup_Id, TieneBtnCerrar, TieneBtnGuardar, TablaPrimaria, Parametros, TamanioPopup)
--SELECT Formulario_Id, Control_Id, FormularioPopup_Id, TieneBtnCerrar, TieneBtnGuardar, TablaPrimaria, Parametros, TamanioPopup
SELECT *
INTO dbo.TempdisControlesReferencia
  FROM disControlesReferencia


--INSERT INTO TempdisControlesRefSolapa (Formulario_Id, Control_Id, ControlSolapaRef_Id)
--SELECT Formulario_Id, Control_Id, ControlSolapaRef_Id
SELECT *
INTO dbo.TempdisControlesRefSolapa
  FROM disControlesRefSolapa


--INSERT INTO TempdisControlesSegmento (Formulario_Id, Control_Id, Segmento_Id, Identidad_Id, EsLaEntidadDelForm, Filtros)
--SELECT Formulario_Id, Control_Id, Segmento_Id, Identidad_Id, EsLaEntidadDelForm, Filtros
SELECT *
INTO dbo.TempdisControlesSegmento
  FROM disControlesSegmento


--INSERT INTO TempdisControlesSolapa (Formulario_Id, Control_Id, Posicion, CantFilas, CantColumnas, FormularioPopup_Id, TieneBtnCerrar, TieneBtnGuardar, TablaPrimaria,
--		Parametros, TipoPopup, TamanioPopup)
--SELECT Formulario_Id, Control_Id, Posicion, CantFilas, CantColumnas, FormularioPopup_Id, TieneBtnCerrar, TieneBtnGuardar, TablaPrimaria,
--		Parametros, TipoPopup, TamanioPopup  
SELECT *
INTO dbo.TempdisControlesSolapa
FROM disControlesSolapa


--INSERT INTO TempdisControlesTexto (Formulario_Id, Control_Id, MultiplesLineas, CharCasing)
--SELECT Formulario_Id, Control_Id, MultiplesLineas, CharCasing  
SELECT * 
INTO dbo.TempdisControlesTexto
FROM disControlesTexto


--INSERT INTO TempdisControlesUpLoad (Formulario_Id, Control_Id, GuardaCaminoCompleto, ColumnaNombreInterno, ExtensionesPermitidas)
--SELECT Formulario_Id, Control_Id, GuardaCaminoCompleto, ColumnaNombreInterno, ExtensionesPermitidas  
SELECT *
INTO dbo.TempdisControlesUpLoad
FROM disControlesUpLoad

--INSERT INTO TempdisEventos (Formulario_Id, Control_Id, TipoEvento, EsMetodo, Heredado, Habilitado)
--SELECT Formulario_Id, Control_Id, TipoEvento, EsMetodo, Heredado, Habilitado
SELECT *
INTO dbo.TempdisEventos
  FROM disEventos


--INSERT INTO TempdisFormularios (disFormularios, Formulario_Id, Descripcion, Alto, Ancho, Arriba, Izquierda, Titulo, PosicionInicial, BotonNuevo,
--		BotonGuardar, BotonPostear, BotonEliminar, BotonImprimir, GuardaeImprime, Tabla_Id, DllCommon, ClaseCommon, DllExchange,
--		ClaseExchange, ClaseEnum, DllEventos, ClaseEventos, UltimaModif, FormularioPadre_Id, Inactivo, Usuario_Id, Posteado, 
--		BotonRptVer, BotonRptImprimir, BotonRptPdf, BotonRptXls, Especializacion, DllCommonEsp, ClaseCommonEsp, DllExchangeEsp,
--		ClaseExchangeEsp, ClaseEnumEsp, DllEventosEsp, ClaseEventosEsp, Version  )
--SELECT disFormularios, Formulario_Id, Descripcion, Alto, Ancho, Arriba, Izquierda, Titulo, PosicionInicial, BotonNuevo,
--		BotonGuardar, BotonPostear, BotonEliminar, BotonImprimir, GuardaeImprime, Tabla_Id, DllCommon, ClaseCommon, DllExchange,
--		ClaseExchange, ClaseEnum, DllEventos, ClaseEventos, UltimaModif, FormularioPadre_Id, Inactivo, Usuario_Id, Posteado, 
--		BotonRptVer, BotonRptImprimir, BotonRptPdf, BotonRptXls, Especializacion, DllCommonEsp, ClaseCommonEsp, DllExchangeEsp,
--		ClaseExchangeEsp, ClaseEnumEsp, DllEventosEsp, ClaseEventosEsp, Version  
SELECT *
INTO dbo.TempdisFormularios
FROM disFormularios


--INSERT INTO TempdisFormulariosParametros (Formulario_Id, Control_Id, TipoDato)
--SELECT Formulario_Id, Control_Id, TipoDato
SELECT *
INTO dbo.TempdisFormulariosParametros
  FROM disFormulariosParametros


--INSERT INTO TempdisRelacionesTablas (Formulario_Id, TablaMaster_Id, TablaDetalle_Id, ColumnaMaster_Id, ColumnaMaster2_Id, ColumnaMaster3_Id, ColumnaDetalle_Id, 
--	ColumnaDetalle2_Id, ColumnaDetalle3_Id)
--SELECT Formulario_Id, TablaMaster_Id, TablaDetalle_Id, ColumnaMaster_Id, ColumnaMaster2_Id, ColumnaMaster3_Id, ColumnaDetalle_Id, 
--	ColumnaDetalle2_Id, ColumnaDetalle3_Id  
SELECT *
INTO dbo.TempdisRelacionesTablas
FROM disRelacionesTablas


--INSERT INTO TempdisTablas (Formulario_Id, Tabla_Id, TipoControl, Control_Id, EsEspecializacion)
--SELECT Formulario_Id, Tabla_Id, TipoControl, Control_Id, EsEspecializacion
SELECT *
INTO dbo.TempdisTablas
  FROM disTablas


--INSERT INTO TempdisTablasColumnas (Formulario_Id, Tabla_Id, Columna_Id, TipoControl, Control_Id, AdicionalControl, EsEspecializacion)
--SELECT Formulario_Id, Tabla_Id, Columna_Id, TipoControl, Control_Id, AdicionalControl, EsEspecializacion  
SELECT *
INTO dbo.TempdisTablasColumnas
FROM disTablasColumnas


SELECT *
INTO dbo.TempdisFormulariosComentarios
FROM disFormulariosComentarios

SELECT *
INTO dbo.TempdisControlesGrafico
FROM disControlesGrafico

SELECT *
INTO dbo.TempdisControlesGraficoTorta
FROM disControlesGraficoTorta

SELECT *
INTO dbo.TempdisControlesListaAdjuntos
FROM disControlesListaAdjuntos

SELECT *
INTO dbo.TempdisControlesBoton
FROM disControlesBoton

SELECT *
INTO dbo.TempdisControlesBotonLupa
FROM disControlesBotonLupa

SELECT *
INTO dbo.TempdisControlesBotonSegmento
FROM disControlesBotonSegmento


SELECT *
INTO dbo.TempdisControlesLink
FROM disControlesLink

SELECT *
INTO dbo.TempdisControlesGrillaPivot
FROM disControlesGrillaPivot

SELECT *
INTO dbo.TempdisControlesIndicador
FROM disControlesIndicador

SELECT *
INTO dbo.TempdisAccionesDescargaEsp
FROM disAccionesDescargaEsp


GO


DROP PROCEDURE TempdisFormulariosDatos
GO
CREATE PROCEDURE tempdisFormulariosDatos
(
@pFormulario_Id varchar(30)
)
AS

DECLARE @liFormulario int
DECLARE @lSegmento_Id int
DECLARE @lLongTotalSegmento int
--DECLARE @ListaDeFormularios Table (Id int, SolapaInvocante varchar(200))
--DECLARE @ListaDeFormInscrustados Table (Id int, ControlReferencia varchar(200), Parametros varchar(512))
DECLARE @CantSolapasOrig int
DECLARE @lTabla_Id varchar(60)
DECLARE @lEspecializacion varchar(80)

SET NOCOUNT ON   


SET @liFormulario = dbo.FuncFKdisFormularios(@pFormulario_Id)

--SET @lTabla_Id = (SELECT Tabla_Id FROM tempdisFormularios WHERE (tempdisFormularios.disFormularios = @liFormulario))
SELECT @lTabla_Id = Tabla_Id, @lEspecializacion= Especializacion FROM tempdisFormularios WHERE (tempdisFormularios.disFormularios = @liFormulario)

SELECT tempdisFormularios.disFormularios, tempdisFormularios.Formulario_Id, tempdisFormularios.Descripcion, tempdisFormularios.Alto,
	tempdisFormularios.Ancho, tempdisFormularios.Arriba, tempdisFormularios.Izquierda, tempdisFormularios.Titulo, tempdisFormularios.PosicionInicial,
	tempdisFormularios.BotonNuevo, tempdisFormularios.BotonGuardar, tempdisFormularios.BotonPostear,
	tempdisFormularios.BotonEliminar, tempdisFormularios.BotonImprimir, tempdisFormularios.GuardaeImprime,
	tempdisFormularios.Tabla_Id, tempdisFormularios.DllCommon, tempdisFormularios.ClaseCommon,
	tempdisFormularios.DllExchange, tempdisFormularios.ClaseExchange, tempdisFormularios.ClaseEnum,
	tempdisFormularios.DllEventos, tempdisFormularios.ClaseEventos, CAST(0 AS BIT) as ParaWeb,
	tempdisFormularios.Posteado, tempdisFormularios.Inactivo, tempdisFormularios.Usuario_Id,
	FormPadre.Formulario_Id as FormularioPadre_Id, ISNULL(tempdisControles.TipoControl, 'frm') as TipoFormulario,
	tempdisFormularios.BotonRptVer, tempdisFormularios.BotonRptImprimir, tempdisFormularios.BotonRptPdf, tempdisFormularios.BotonRptXls, 
	tempdisFormularios.Especializacion, tempdisFormularios.DllCommonEsp, tempdisFormularios.ClaseCommonEsp,
	tempdisFormularios.DllExchangeEsp, tempdisFormularios.ClaseExchangeEsp, tempdisFormularios.ClaseEnumEsp,
	tempdisFormularios.DllEventosEsp, tempdisFormularios.ClaseEventosEsp, tempdisFormularios.Version, Cast(1 as Bit) as Temporal,
	tempdisFormularios.TipoEspecial, TempdisFormularios.BotonCopiar,TempdisFormularios.CodigoLnk, TempdisFormularios.AnulaAccionesEliminarDefault
FROM tempdisFormularios 
LEFT JOIN tempdisFormularios FormPadre ON FormPadre.disFormularios = tempdisFormularios.FormularioPadre_Id
LEFT JOIN tempdisControles ON tempdisControles.Formulario_Id = tempdisFormularios.disFormularios AND tempdisControles.Control_Id = tempdisFormularios.Formulario_Id
WHERE (tempdisFormularios.disFormularios = @liFormulario)

-- Grupos Solapas
SELECT tempdisControlesGrupoSolapa.Control_Id, tempdisControlesGrupoSolapa.CantSolapas
FROM tempdisControlesGrupoSolapa 
WHERE (Formulario_Id = @liFormulario)

SET @CantSolapasOrig = (SELECT count(*) FROM tempdisControlesSolapa WHERE (tempdisControlesSolapa.Formulario_Id = @liFormulario))

-- Solapas
SELECT tempdisControlesSolapa.Control_Id, tempdisControlesSolapa.Posicion,	tempdisControlesSolapa.CantFilas, tempdisControlesSolapa.CantColumnas,
tempdisControlesSolapa.TipoPopup, tempdisFormularios.Formulario_Id as FormularioPopup_Id, tempdisControlesSolapa.TieneBtnCerrar, tempdisControlesSolapa.TieneBtnGuardar,
tempdisControlesSolapa.TablaPrimaria, 
tempdisControlesSolapa.Parametros, tempdisControlesSolapa.TamanioPopup, cast(null as varchar(200)) as ControlReferencia
FROM tempdisControlesSolapa 
LEFT JOIN tempdisFormularios ON tempdisFormularios.disFormularios = tempdisControlesSolapa.FormularioPopup_Id
WHERE (tempdisControlesSolapa.Formulario_Id = @liFormulario)
ORDER BY tempdisControlesSolapa.Posicion



-- Columnas Solapas
SELECT tempdisControlesColumnaSolapa.Control_Id, tempdisControlesColumnaSolapa.Columna,	tempdisControlesColumnaSolapa.Ancho, 
	tempdisControlesColumnaSolapa.TipoValor
FROM tempdisControlesColumnaSolapa 
INNER JOIN tempdisControlesSolapa ON tempdisControlesSolapa.Formulario_Id = tempdisControlesColumnaSolapa.Formulario_Id 
							AND tempdisControlesSolapa.Control_Id = tempdisControlesColumnaSolapa.Control_Id
WHERE (tempdisControlesColumnaSolapa.Formulario_Id = @liFormulario)
--AND ((tempdisControlesSolapa.FormularioPopup_Id IS NULL) OR (@pParaWeb = 0))
ORDER BY 1,2


-- Filas Solapas
SELECT tempdisControlesFilaSolapa.Control_Id, tempdisControlesFilaSolapa.Fila, tempdisControlesFilaSolapa.Alto, 
tempdisControlesFilaSolapa.TipoValor
FROM tempdisControlesFilaSolapa 
INNER JOIN tempdisControlesSolapa ON tempdisControlesSolapa.Formulario_Id = tempdisControlesFilaSolapa.Formulario_Id 
							AND tempdisControlesSolapa.Control_Id = tempdisControlesFilaSolapa.Control_Id
WHERE (tempdisControlesFilaSolapa.Formulario_Id = @liFormulario)
--AND ((disControlesSolapa.FormularioPopup_Id IS NULL) OR (@pParaWeb = 0))
ORDER BY 1,2

-- Celdas
/**
SELECT disControlesCelda.Control_Id, disControlesCelda.NombrePanel,	disControlesCelda.Fila, 
	disControlesCelda.Columna, disControlesCelda.FilasExtension, disControlesCelda.ColumnasExtension, disControles.ControlParent_Id
FROM disControlesCelda 
INNER JOIN disControles ON disControles.Control_Id = disControlesCelda.Control_Id AND disControlesCelda.Formulario_Id = disControles.Formulario_Id
WHERE (disControlesCelda.Formulario_Id = @liFormulario)
ORDER BY disControles.ControlParent_Id, disControlesCelda.Fila, disControlesCelda.Columna
**/

--Controles
SELECT tempdisControles.Control_Id, tempdisControles.NroControl, tempdisControles.ControlParent_Id, 
		tempdisControles.TipoControl, tempdisControles.Alto, tempdisControles.Ancho, 
		tempdisControles.Arriba, tempdisControles.Izquierda, tempdisControles.Texto, 
		tempdisControles.Visible, tempdisControles.Habilitado, tempdisControles.Alineacion,
		tempdisControles.TabStop, tempdisControles.TabOrden, tempdisControles.Requerido, 
		TablasColumnas1.Tabla_Id NombreTabla, TablasColumnas1.Columna_Id NombreColumna, 
		tempdisControles.Embebido, 
		tempdisControles.Ancla, tempdisControles.EsCodigoNuevo, tempdisControles.Paises, tempdisControles.Fila, 
		tempdisControles.Columna, tempdisControles.FilasExtension, tempdisControles.ColumnasExtension,
		tempdisControles.MaximaLongitud, tempdisControles.ClickNuevoBlanquea, tempdisControles.ControlaCambios, 
		tempdisControles.SoloLectura, tempdisControles.TextoFijo, tempdisControles.TextoControlVacio,
		tempdisControles.Estilo, tempdisControles.TituloLabel, tempdisControles.AlineacionLabel, tempdisControles.IgualaAnchoColumna,
		tempdisControles.SegmentoOrigen, tempdisControles.ControlSegmento, tempdisControles.Heredado
FROM tempdisControles 
LEFT JOIN tempdisTablasColumnas as TablasColumnas1 ON (TablasColumnas1.Control_Id = tempdisControles.Control_Id) 
		  AND (TablasColumnas1.Formulario_Id = tempdisControles.Formulario_Id)
		  AND ((TablasColumnas1.AdicionalControl is null) 
		  -- Es el codigo de la Lupa
		  OR (TablasColumnas1.AdicionalControl = '1') 
		  -- Es el campo cliente del upoload
		  OR (TablasColumnas1.AdicionalControl = 'C')) 
WHERE (tempdisControles.Formulario_Id = @liFormulario)
ORDER BY tempdisControles.Fila, tempdisControles.Columna, tempdisControles.NroControl

--Check Box
SELECT tempdisControlesCheckBox.Control_Id, tempdisControlesCheckBox.Checked
FROM tempdisControlesCheckBox 
WHERE (Formulario_Id = @liFormulario)

-- Grillas
SELECT tempdisControlesGrilla.Control_Id, PermiteAgregarFilas, PermiteBorrarFilas, PermiteEditarCeldas, EditaEnGrilla, RegistrosxPagina, 
	AutoFormateable, EsGrillaAdjuntos, EsArbol, AccionNuevoValorNodo, TotalizaColumnas, FilasAMostrar, AnchoMinimo, AnchoColumnasFijas,
	NombreColCalculoTotal,ColFormatoNumericoFila, ColumnasFijas, ColumnasSoloLectura, ColumnasOcultas, ColumnasTotalizarCantidad, 
	ColumnasTotalizarMinimo, ColumnasTotalizarMaximo,ColumnasTotalizarPromedio, ColumnasTotalizarSuma, AnchoColPorContenido, 
	ColumnaColorFondoFila, ColumnaColorTextoFila, PermiteCambiarOrden, PermiteOrdenMultiCols
FROM tempdisControlesGrilla 
WHERE (Formulario_Id = @liFormulario)

-- Columnas Grillas
SELECT tempdisControlesGrillaColumnas.Control_Id, tempdisControlesGrillaColumnas.Posicion,	tempdisControlesGrillaColumnas.NombreCampo, 
	tempdisControlesGrillaColumnas.Titulo, tempdisControlesGrillaColumnas.TipoDato, tempdisControlesGrillaColumnas.Formato,
	tempdisControlesGrillaColumnas.Visible, tempdisControlesGrillaColumnas.ControlColumna_Id, tempdisControlesGrillaColumnas.Ancho, 
	tempdisControlesGrillaColumnas.AnchoVariable, tempdisControlesGrillaColumnas.Alineacion, tempdisControlesGrillaColumnas.SoloLectura,
	tempdisControlesGrillaColumnas.ModoTamanioVariable, tempdisControlesGrillaColumnas.CongelarTamanio, tempdisControlesGrillaColumnas.AnchoMinimo, 
	tempdisControlesGrillaColumnas.ModoOrdenamiento, tempdisControlesGrillaColumnas.TextoColumnaVacia, 
	tempdisControlesGrillaColumnas.Texto, tempdisControlesGrillaColumnas.EsParamAccionBoton, tempdisControlesGrillaColumnas.Heredado,
	tempdisControlesGrillaColumnas.Requerido, tempdisControlesGrillaColumnas.AutoNumerico, tempdisControlesGrillaColumnas.EsPrimaryKey,
	tempdisControlesGrillaColumnas.ItemsCombo, lupIdentidades.Identidad_Id, tempdisControlesGrillaColumnas.TotalizarCantidad, 
	tempdisControlesGrillaColumnas.TotalizarMinimo, tempdisControlesGrillaColumnas.TotalizarMaximo,
	tempdisControlesGrillaColumnas.TotalizarSuma, tempdisControlesGrillaColumnas.TotalizarPromedio,
	tempdisControlesGrillaColumnas.ColumnaColorFondoCelda, tempdisControlesGrillaColumnas.ColumnaColorTextoCelda
FROM tempdisControlesGrillaColumnas 
LEFT JOIN lupIdentidades ON lupIdentidades.lupIdentidades = tempdisControlesGrillaColumnas.Identidad_Id
WHERE (Formulario_Id = @liFormulario)
ORDER BY tempdisControlesGrillaColumnas.Control_Id, tempdisControlesGrillaColumnas.Posicion

---- Columnas Texto Grillas 
--SELECT Control_Id, NombreCampo, MaximaLongitud
--FROM disControlesGrillaColTexto
--WHERE (Formulario_Id = @liFormulario)
--UNION
--SELECT Control_Id, NombreCampo, MaximaLongitud
--FROM disControlesGrillaColTexto
--INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesGrillaColTexto.Formulario_Id 

---- Columnas Numericas Grillas 
--SELECT Control_Id, NombreCampo, ParteEntera, Decimales, BotonSpin, SpinIncremento, ValorMinimo, ValorMaximo, EsPorcentaje, Autonumerico
--FROM disControlesGrillaColNumerico 
--WHERE (Formulario_Id = @liFormulario)
--UNION
--SELECT Control_Id, NombreCampo, ParteEntera, Decimales, BotonSpin, SpinIncremento, ValorMinimo, ValorMaximo, EsPorcentaje, Autonumerico
--FROM disControlesGrillaColNumerico 
--INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesGrillaColNumerico.Formulario_Id 


---- Columnas Fecha Grillas 
--SELECT Control_Id, NombreCampo, UsaDatePicker, ValorMinimo, ValorMaximo, DiasDiferenciaFecha,
--		DiasDiferenciaFechaMaxima, DiasDiferenciaFechaMinima	
--FROM disControlesGrillaColFecha 
--WHERE (Formulario_Id = @liFormulario)
--UNION
--SELECT Control_Id, NombreCampo, UsaDatePicker, ValorMinimo, ValorMaximo, DiasDiferenciaFecha,
--		DiasDiferenciaFechaMaxima, DiasDiferenciaFechaMinima	
--FROM disControlesGrillaColFecha 
--INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesGrillaColFecha.Formulario_Id 

---- Columnas Boton Grillas 
--SELECT Control_Id, NombreCampo, EsLink 
--FROM disControlesGrillaColBoton  
--WHERE (Formulario_Id = @liFormulario)
--UNION
--SELECT Control_Id, NombreCampo, EsLink 
--FROM disControlesGrillaColBoton  
--INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesGrillaColBoton.Formulario_Id 

---- Columnas Combo Grillas 
--SELECT disControlesGrillaColCombo.Control_Id, disControlesGrillaColCombo.NombreCampo, 
--	disControlesGrillaColCombo.MultiSeleccion, disControlesGrillaColCombo.CheckBoxes, lupIdentidades.Identidad_Id
--FROM disControlesGrillaColCombo
--LEFT JOIN lupIdentidades ON lupIdentidades.lupIdentidades = disControlesGrillaColCombo.Identidad_Id 
--WHERE (Formulario_Id = @liFormulario) 
--UNION
--SELECT disControlesGrillaColCombo.Control_Id, disControlesGrillaColCombo.NombreCampo, 
--	disControlesGrillaColCombo.MultiSeleccion, disControlesGrillaColCombo.CheckBoxes, lupIdentidades.Identidad_Id
--FROM disControlesGrillaColCombo
--LEFT JOIN lupIdentidades ON lupIdentidades.lupIdentidades = disControlesGrillaColCombo.Identidad_Id 
--INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesGrillaColCombo.Formulario_Id 


----  Items de Columnas Combo Grillas
--SELECT disControlesGrillaColComboItems.Control_Id, disControlesGrillaColComboItems.NombreCampo, 
--	disControlesGrillaColComboItems.Valor, disControlesGrillaColComboItems.Descripcion, disControlesGrillaColComboItems.Tipo
--FROM disControlesGrillaColComboItems
--WHERE (Formulario_Id = @liFormulario) 
--UNION
--SELECT disControlesGrillaColComboItems.Control_Id, disControlesGrillaColComboItems.NombreCampo, 
--	disControlesGrillaColComboItems.Valor, disControlesGrillaColComboItems.Descripcion, disControlesGrillaColComboItems.Tipo
--FROM disControlesGrillaColComboItems
--INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesGrillaColComboItems.Formulario_Id 

-- Lupas
SELECT tempdisControlesLupa.Control_Id, tempdisControlesLupa.CamposClave, tempdisControlesLupa.CantMaxRegAMostrar, 
	tempdisControlesLupa.EsLaEntidadDelForm, lupIdentidades.Identidad_Id,
	tempdisControlesLupa.OrderBy, tempdisControlesLupa.TraePrimerRegistro, tempdisControlesLupa.UsaAccion, 
	tempdisControlesLupa.DescripcionCharCasing,	tempdisControlesLupa.DescripcionMaxLength, tempdisControlesLupa.DescripcionTexto, 
	tempdisControlesLupa.DescripcionOculta, tempdisControlesLupa.ColumnaGrillaDescripcion,
	TablasColumnasD.Columna_Id NombreColumnaDescripcion, 
	tempdisControlesLupa.Filtros, tempdisControlesLupa.CodigoTipo, 
	tempdisControlesLupa.CodigoCharCasing, tempdisControlesLupa.CodigoMask, tempdisControlesLupa.CodigoRegExpression,
	tempdisControlesLupa.CodigoMaxLength, tempdisControlesLupa.CodigoTexto, tempdisControlesLupa.CodigoWidth, 
	tempdisControlesLupa.CodigoNombreColumna, tempdisControlesLupa.AdicionalesCampos, tempdisControlesLupa.AdicionalesControles, 
	tempdisControlesLupa.AdicionalesParametros, tempdisControlesLupa.PermiteNoExistentes, lupIdentidades.OrdenMenuFormulario,
	tempdisFormularios.Formulario_Id, tempdisFormularios.Titulo as TituloFormPopup,
	lupIdentidades.CharCasing, ISNULL(tempdisControlesLupa.Mascara, lupIdentidades.Mascara) as Mascara, lupIdentidades.MaximaLongitud
FROM tempdisControlesLupa 
INNER JOIN lupIdentidades ON lupIdentidades.lupIdentidades = tempdisControlesLupa.Identidad_Id 
LEFT JOIN genMenus ON genMenus.Orden = lupIdentidades.OrdenMenuFormulario
LEFT JOIN tempdisFormularios ON tempdisFormularios.disFormularios = genMenus.Formulario_Id
LEFT JOIN tempdisTablasColumnas as TablasColumnasD ON (TablasColumnasD.Control_Id = tempdisControlesLupa.Control_Id) 
		  AND (TablasColumnasD.Formulario_Id = tempdisControlesLupa.Formulario_Id)
		  AND (TablasColumnasD.AdicionalControl = 'D') 
WHERE (tempdisControlesLupa.Formulario_Id = @liFormulario)

-- Combos
SELECT tempdisControlesCombo.Control_Id, tempdisControlesCombo.MultiSeleccion, tempdisControlesCombo.CheckBoxes, lupIdentidades.Identidad_Id,
	tempdisControlesCombo.EsOptionGroup, tempdisControlesCombo.OptionGroupHorizontal	
FROM tempdisControlesCombo
LEFT JOIN lupIdentidades ON lupIdentidades.lupIdentidades = tempdisControlesCombo.Identidad_Id 
WHERE (Formulario_Id = @liFormulario) 


-- Items del Combo
SELECT tempdisControlesComboItems.Control_Id, tempdisControlesComboItems.Valor, tempdisControlesComboItems.Descripcion, tempdisControlesComboItems.Tipo, tempdisControlesComboItems.Orden
FROM tempdisControlesComboItems
WHERE (Formulario_Id = @liFormulario) 
ORDER BY 1,5, 2

-- Numericos
SELECT Control_Id, Decimales, BotonSpin, SpinIncremento, ValorMinimo, ValorMaximo, EsPorcentaje,LLevaSeparadorGrupo
FROM tempdisControlesNumerico
WHERE (Formulario_Id = @liFormulario) 

-- Fechas
SELECT Control_Id, ValorMinimo, ValorMaximo, DiasDiferenciaFecha, DiasDiferenciaFechaMaxima, DiasDiferenciaFechaMinima, EsFechaHora, ValorHora 
FROM tempdisControlesFecha
WHERE (Formulario_Id = @liFormulario) 

-- Textos
SELECT Control_Id, MultiplesLineas, CharCasing, Mascara
FROM tempdisControlesTexto
WHERE (Formulario_Id = @liFormulario) 

-- Segmentos
SELECT Control_Id, genSegmentos.Segmento_Id, lupIdentidades.Identidad_Id, EsLaEntidadDelForm, Filtros, 
lupIdentidades.OrdenMenuFormulario,	tempdisFormularios.Formulario_Id, tempdisFormularios.Titulo as TituloFormPopup
FROM tempdisControlesSegmento
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = tempdisControlesSegmento.Segmento_Id
INNER JOIN lupIdentidades ON lupIdentidades.lupIdentidades = tempdisControlesSegmento.Identidad_Id 
LEFT JOIN genMenus ON genMenus.Orden = lupIdentidades.OrdenMenuFormulario
LEFT JOIN tempdisFormularios ON tempdisFormularios.disFormularios = genMenus.Formulario_Id
WHERE (tempdisControlesSegmento.Formulario_Id = @liFormulario) 

-- UpLoad
SELECT Control_Id, GuardaCaminoCompleto, ColumnaNombreInterno, ExtensionesPermitidas
FROM tempdisControlesUpLoad
WHERE (Formulario_Id = @liFormulario) 

---- DownLoad
--SELECT Control_Id, CarpetaServidor, ArchivoADescargar, ArchivoDescargado, ExtensionArchivo, EsUrl
--FROM disControlesDownLoad
--WHERE (Formulario_Id = @liFormulario) 
--UNION
--SELECT Control_Id, CarpetaServidor, ArchivoADescargar, ArchivoDescargado, ExtensionArchivo, EsUrl
--FROM disControlesDownLoad
--INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesDownLoad.Formulario_Id 
--UNION
--SELECT Control_Id, CarpetaServidor, ArchivoADescargar, ArchivoDescargado, ExtensionArchivo, EsUrl
--FROM disControlesDownLoad
--INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControlesDownLoad.Formulario_Id 


-- grafico
SELECT Control_Id, SubTitulo, Leyenda, Tipo, SubTipo, PermiteCambiarSubTipo, TituloEjevalores
FROM tempdisControlesGrafico
WHERE (Formulario_Id = @liFormulario) 

-- grafico torta
SELECT Control_Id, ValoresASeparar, UbicacionTituloPorcion, FormatoTituloPorcion
FROM tempdisControlesGraficoTorta
WHERE (Formulario_Id = @liFormulario) 

-- Lista Adjuntos
SELECT Control_Id, PermiteAgregarArchivo, PermiteBorrarArchivo, MuestraDescripciones, PermiteDescargar, CantidadMaxima, ExtensionesPermitidas,
TamanioMaximo
FROM tempdisControlesListaAdjuntos
WHERE (Formulario_Id = @liFormulario) 


-- Controles Boton
SELECT tempdisControlesBoton.Control_Id, ControlAsociado_Id, AsociadoAFilaGrilla, Icono, TempdisControles.Fila, TempdisControles.Columna
FROM tempdisControlesBoton
INNER JOIN TempdisControles ON TempdisControles.Formulario_Id = tempdisControlesBoton.Formulario_Id 
						AND TempdisControles.Control_Id = tempdisControlesBoton.Control_Id

WHERE (tempdisControlesBoton.Formulario_Id = @liFormulario) 

-- Controles Link
SELECT Control_Id, Link
FROM tempdisControlesLink
WHERE (Formulario_Id = @liFormulario) 

-- Controles Grilla Pivot
SELECT tempdisControlesGrillaPivot.Control_Id, URLServidor, Catalogo, Cubo, Measures, Filas, Columnas, TempdisControles.Fila, TempdisControles.Columna
FROM tempdisControlesGrillaPivot
INNER JOIN TempdisControles ON TempdisControles.Formulario_Id = tempdisControlesGrillaPivot.Formulario_Id 
						AND TempdisControles.Control_Id = tempdisControlesGrillaPivot.Control_Id

WHERE (tempdisControlesGrillaPivot.Formulario_Id = @liFormulario) 

-- Controles Indicador
SELECT Control_Id, Tipo
FROM tempdisControlesIndicador
WHERE (Formulario_Id = @liFormulario) 


SELECT tempdisControlesBotonLupa.Control_Id, tempdisControlesBotonLupa.ControlAsociado_Id, tempdisControlesBotonLupa.Icono, tempdisControlesBotonLupa.CamposClave,
	TempdisControles.Fila, TempdisControles.Columna,
	tempdisControlesBotonLupa.CamposClave, tempdisControlesBotonLupa.CantMaxRegAMostrar, lupIdentidades.Identidad_Id,
	tempdisControlesBotonLupa.OrderBy, tempdisControlesBotonLupa.UsaAccion, tempdisControlesBotonLupa.Filtros, 
	tempdisControlesBotonLupa.AdicionalesCampos, tempdisControlesBotonLupa.AdicionalesControles, 
	tempdisControlesBotonLupa.AdicionalesParametros, lupIdentidades.OrdenMenuFormulario,
	tempdisFormularios.Formulario_Id, tempdisFormularios.Titulo as TituloFormPopup, TempdisControlesBotonLupa.ReemplazaEnDestino
FROM tempdisControlesBotonLupa 
INNER JOIN TempdisControles ON TempdisControles.Formulario_Id = tempdisControlesBotonLupa.Formulario_Id 
						AND TempdisControles.Control_Id = tempdisControlesBotonLupa.Control_Id

INNER JOIN lupIdentidades ON lupIdentidades.lupIdentidades = tempdisControlesBotonLupa.Identidad_Id 
LEFT JOIN genMenus ON genMenus.Orden = lupIdentidades.OrdenMenuFormulario
LEFT JOIN tempdisFormularios ON tempdisFormularios.disFormularios = genMenus.Formulario_Id
WHERE (tempdisControlesBotonLupa.Formulario_Id = @liFormulario)


SELECT tempdisControlesBotonSegmento.Control_Id, tempdisControlesBotonSegmento.ControlAsociado_Id, 
	tempdisControlesBotonSegmento.Icono, TempdisControles.Fila, TempdisControles.Columna,
	lupIdentidades.Identidad_Id, tempdisControlesBotonSegmento.Filtros, 
	lupIdentidades.OrdenMenuFormulario,
	tempdisFormularios.Formulario_Id, tempdisFormularios.Titulo as TituloFormPopup
FROM tempdisControlesBotonSegmento 
INNER JOIN TempdisControles ON TempdisControles.Formulario_Id = tempdisControlesBotonSegmento.Formulario_Id 
						AND TempdisControles.Control_Id = tempdisControlesBotonSegmento.Control_Id

INNER JOIN lupIdentidades ON lupIdentidades.lupIdentidades = tempdisControlesBotonSegmento.Identidad_Id 
LEFT JOIN genMenus ON genMenus.Orden = lupIdentidades.OrdenMenuFormulario
LEFT JOIN tempdisFormularios ON tempdisFormularios.disFormularios = genMenus.Formulario_Id
WHERE (tempdisControlesBotonSegmento.Formulario_Id = @liFormulario)

-- Parametros
SELECT Control_Id, TipoDato
FROM tempdisControlesParametros
WHERE (Formulario_Id = @liFormulario) 

-- Controles referencia
SELECT tempdisControlesReferencia.Control_Id, tempdisFormularios.Formulario_Id as FormularioPopup_Id, tempdisControlesReferencia.TieneBtnCerrar, 
tempdisControlesReferencia.TieneBtnGuardar,tempdisControlesReferencia.TablaPrimaria, 
tempdisControlesReferencia.Parametros, tempdisControlesReferencia.TamanioPopup
FROM tempdisControlesReferencia 
LEFT JOIN tempdisFormularios ON tempdisFormularios.disFormularios = tempdisControlesReferencia.FormularioPopup_Id
WHERE (tempdisControlesReferencia.Formulario_Id = @liFormulario) 

-- Controles referencia solapa
SELECT tempdisControlesRefSolapa.Control_Id, tempdisControlesRefSolapa.ControlSolapaRef_Id
FROM tempdisControlesRefSolapa 
WHERE (tempdisControlesRefSolapa.Formulario_Id = @liFormulario) 

-- Eventos
-- Si es para dise?o, debo mostrar todo tal cual est? en la BD
	SELECT tempdisEventos.Control_Id, tempdisEventos.TipoEvento, tempdisEventos.EsMetodo, tempdisEventos.Habilitado, tempdisEventos.Heredado
	FROM tempdisEventos 
	WHERE (Formulario_Id = @liFormulario) 

--Acciones
-- Si es para dise?o, debo mostrar todo tal cual est? en la BD
	SELECT tempdisAcciones.Control_Id, tempdisAcciones.TipoEvento, cast(tempdisAcciones.OrdenAccion as int) as OrdenAccion, 
		tempdisAcciones.Accion, tempdisAcciones.ControlDestino_Id, tempdisAcciones.Texto,
		tempdisAcciones.ControlTexto_Id, tempdisAcciones.ValorCondicion, tempdisAcciones.AccionPadre_Id, tempdisAcciones.Heredado,
		tempdisAcciones.Accion_Id, tempdisAcciones.Habilitado, tempdisAcciones.EsEspecializacion, tempdisAcciones.AdicionalInfo
	FROM tempdisAcciones 
	WHERE (Formulario_Id = @liFormulario)
	ORDER BY 1, 2, 3



---- Eventos Columnas
--SELECT Control_Id, Columna, TipoEvento, Heredado
--FROM disEventosColumnas 
--WHERE (Formulario_Id = @liFormulario) 
--UNION
--SELECT Control_Id, Columna, TipoEvento, Heredado
--FROM disEventosColumnas 
--INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disEventosColumnas.Formulario_Id
--UNION
--SELECT Control_Id, Columna, TipoEvento, Heredado
--FROM disEventosColumnas 
--INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disEventosColumnas.Formulario_Id

----Acciones Columnas
--SELECT Control_Id, Columna, TipoEvento, OrdenAccion, 
--	Accion, ControlDestino_Id, ColumnaDestino, Texto,
--	ControlTexto_Id, ValorCondicion, AccionPadre_Id, Heredado, Accion_Id
--FROM disAccionesColumnas 
--WHERE (Formulario_Id = @liFormulario) and (Accion <> 'DoDefault')
--UNION
--SELECT Control_Id, Columna, TipoEvento, OrdenAccion, 
--	Accion, ControlDestino_Id, ColumnaDestino, Texto,
--	ControlTexto_Id, ValorCondicion, AccionPadre_Id, Heredado, Accion_Id
--FROM disAccionesColumnas 
--INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disAccionesColumnas.Formulario_Id
--WHERE (Accion <> 'DoDefault')
--UNION
--SELECT Control_Id, Columna, TipoEvento, OrdenAccion, 
--	Accion, ControlDestino_Id, ColumnaDestino, Texto,
--	ControlTexto_Id, ValorCondicion, AccionPadre_Id, Heredado, Accion_Id
--FROM disAccionesColumnas 
--INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disAccionesColumnas.Formulario_Id
--WHERE (Accion <> 'DoDefault')



-- Tablas del Common
SELECT Tabla_Id, TipoControl, Control_Id, EsEspecializacion
FROM tempdisTablas
WHERE (Formulario_Id = @liFormulario)


-- Columnas de Common
SELECT Tabla_Id, Columna_Id, TipoControl, Control_Id, AdicionalControl, EsEspecializacion
FROM tempdisTablasColumnas
WHERE (Formulario_Id = @liFormulario)


--Relaciones entre Tablas
SELECT TablaMaster_Id, TablaDetalle_Id, ColumnaMaster_Id, ColumnaMaster2_Id, ColumnaMaster3_Id,
		ColumnaDetalle_Id, ColumnaDetalle2_Id, ColumnaDetalle3_Id
FROM tempdisRelacionesTablas
WHERE (Formulario_Id = @liFormulario)

--Condiciones Acciones
SELECT distinct tempdisAcciones.Control_Id, tempdisAcciones.TipoEvento, tempdisAcciones.AccionPadre_Id as Accion, tempdisAcciones.ValorCondicion 
FROM tempdisAcciones 
WHERE (Formulario_Id = @liFormulario)
AND tempdisAcciones.AccionPadre_Id is not null 

--tablas a refrescar luego de invocaer a una Accion
	SELECT act.Control_Id, act.TipoEvento, cast(act.OrdenAccion as int) as OrdenAccion, act.Tabla_Id, a.Accion_Id
	FROM tempdisAccionesTablasaActualizar act
	INNER JOIN tempdisAcciones a ON a.Formulario_Id = act.Formulario_Id 
						AND a.Control_Id = act.Control_Id 
						AND a.TipoEvento = act.TipoEvento
						AND a.OrdenAccion = act.OrdenAccion 
	WHERE (act.Formulario_Id = @liFormulario)
	ORDER BY 1, 2, 3, 4


--tablas a enviar al invocar a una accion
	SELECT act.Control_Id, act.TipoEvento, cast(act.OrdenAccion as int) as OrdenAccion, act.Tabla_Id, a.Accion_Id
	FROM tempdisAccionesTablasaEnviar act
	INNER JOIN tempdisAcciones a ON a.Formulario_Id = act.Formulario_Id 
						AND a.Control_Id = act.Control_Id 
						AND a.TipoEvento = act.TipoEvento
						AND a.OrdenAccion = act.OrdenAccion 
	WHERE (act.Formulario_Id = @liFormulario)
	ORDER BY 1, 2, 3, 4

-- Extras, para evitar llamar a mas acciones
SELECT genSegmentoOrigenes.OriSeg_Id, genSegmentoOrigenes.Descripcion
FROM genSegmentoOrigenes  

--obtener todos los posibles segmentos
SELECT Segmento_Id
FROM genSegmentos


-- Obtener configuracion de segmento
SELECT distinct vseg.Segmento_id, vseg.Orden, vseg.Campo, vseg.Tipo, vseg.Digitos, 
	   cast(case when seg.TamanioVariable = cast(vseg.Campo as char(1)) + vseg.Tipo then 1 else 0 end as bit) as EsTamaniovariable,
	   vseg.TieneColumnaAutomatica , vseg.Origen,vseg.Nombre, vseg.HabilitaEdicion 
FROM tempdisControlesSegmento
INNER JOIN vGenSegmentosConfiguracion vseg ON vseg.genSegmentos = tempdisControlesSegmento.Segmento_Id
INNER JOIN genSegmentos seg ON seg.genSegmentos = tempdisControlesSegmento.Segmento_Id
WHERE (tempdisControlesSegmento.Formulario_Id = @liFormulario) 
ORDER BY 1, 2

--Obtener Atributos generales
SELECT AtributoNro, Descripcion, Tipo
FROM genAtributosGenerales
WHERE Tabla_Id = @lTabla_Id
AND EnGrilla = 1

--Obtener Atributos generales especializacion
SELECT AtributoNro, Descripcion, Tipo
FROM genAtributosGenerales
WHERE Tabla_Id = @lTabla_Id
AND @lEspecializacion IS NOT NULL
AND EnGrilla = 0


--Obtener Comentarios, ordenados por fecha de registro
SELECT FechaRegistro, FechaRegistroOrig, FechaUltModif, Comentario, /*tempdisformularios.formulario_id as*/ FormularioRegOrig_Id, Comentario_Id, TipoComentario
FROM tempdisFormulariosComentarios
--LEFT JOIN tempdisformularios on tempdisformularios.disformularios = tempdisFormulariosComentarios.FormularioRegOrig_Id
WHERE (tempdisFormulariosComentarios.Formulario_Id = @liFormulario) 

SELECT tempdisAccionesDescargaEsp.Control_Id, tempdisAccionesDescargaEsp.TipoEvento, 
		tempdisAccionesDescargaEsp.Accion, tempdisAccionesDescargaEsp.ControlDestino_Id, tempdisAccionesDescargaEsp.Texto
FROM tempdisAccionesDescargaEsp
WHERE (Formulario_Id = @liFormulario)
ORDER BY 1, 2, 3

SELECT 	genControlesSeteos.Control_Id, genControlesSeteos.Orden, genControlesSeteos.Valor,  genControlesSeteos.ModificoValor, genControlesSeteos.Deshabilitar, 
		genControlesSeteos.Ocultar, genControlesSeteos.SeteadoPorSistema, genControlesSeteos.Usuario_Id,  disControles.TipoControl, Tabla_Id, Columna_Id
FROM genControlesSeteos 
INNER JOIN disControles ON disControles.Formulario_Id = genControlesSeteos.Formulario_Id AND disControles.Control_Id = genControlesSeteos.Control_Id
	LEFT JOIN disTablasColumnas as TablasColumnas1 ON (TablasColumnas1.Control_Id = disControles.Control_Id) 
		  AND (TablasColumnas1.Formulario_Id = disControles.Formulario_Id)
		  AND ((TablasColumnas1.AdicionalControl is null) 
		  -- Es el codigo de la Lupa
		  OR (TablasColumnas1.AdicionalControl = '1') 
		  -- Es el campo cliente del upoload
		  OR (TablasColumnas1.AdicionalControl = 'C')) 

WHERE (genControlesSeteos.Formulario_Id = @liFormulario)
AND (1 = 0)


RETURN @@Error 

GO



DROP PROCEDURE disFormulariosCambioSegDatos
GO
CREATE PROCEDURE disFormulariosCambioSegDatos
(
@pFormulario_Id varchar(30),
@pControl_Id varchar(30),
@pSegmento_Id varchar(10)
)
AS

DECLARE @liFormulario int
DECLARE @lSegmento_Id int
DECLARE @lLongTotalSegmento int
DECLARE @ListaDeFormularios Table (Id int, SolapaInvocante varchar(200))
DECLARE @ListaDeFormInscrustados Table (Id int, ControlReferencia varchar(200), Parametros varchar(512))
DECLARE @ListaControlesAfectados Table (Control_Id varchar(200))

SET NOCOUNT ON   


SET @liFormulario = dbo.FuncFKdisFormularios(@pFormulario_Id)
-- Primero obtengo la lista de formularios popup que sean referenciados desde alguna de las solapas
INSERT INTO @ListaDeFormularios (Id, SolapaInvocante)
SELECT FormularioPopup_Id, Control_Id
FROM disControlesSolapa 
WHERE disControlesSolapa.Formulario_Id = @liFormulario
AND FormularioPopup_Id IS NOT NULL

-- obtengo la lista de formularios incrusatdos que sean referenciados desde algun control referencia
INSERT INTO @ListaDeFormInscrustados (Id, ControlReferencia, Parametros)
SELECT FormularioPopup_Id, Control_Id, Parametros
FROM disControlesReferencia 
WHERE disControlesReferencia.Formulario_Id = @liFormulario
AND FormularioPopup_Id IS NOT NULL

--Obtengo la lista de controles que se ven afectados por el cambio del id de segmento. Ellos son el mismo segmento, y los controles asociados
INSERT INTO @ListaControlesAfectados (Control_Id)
SELECT disControles.Control_Id 
FROM disControles 
WHERE (disControles.Formulario_Id = @liFormulario)
AND ((disControles.Control_Id = @pControl_Id)
	OR (disControles.ControlSegmento = @pControl_Id)
	AND (disControles.TipoControl <> 'OrigenSegmento')
	)
UNION--Los controles de los popups asociados
SELECT disControles.Control_Id
FROM disControles 
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControles.Formulario_Id
WHERE (disControles.NroControl > 2) -- el 0 es el formulario, el 1 es el control solapas, y el 2 la solapa_datos
AND ((disControles.Control_Id = @pControl_Id)
	OR (disControles.ControlSegmento = @pControl_Id)
	AND (disControles.TipoControl <> 'OrigenSegmento')
	)
UNION--Los controles de los forms refenciados por controles
SELECT case when disControles.TipoControl = 'System.Windows.Forms.TabPage' then disControles.Control_Id + '_' + lstfrm.ControlReferencia else disControles.Control_Id end as Control_Id 
FROM disControles 
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControles.Formulario_Id
WHERE (disControles.NroControl > 1) -- el 0 es el formulario, el 1 es el control solapas, y el 2 la solapa_datos
AND ((disControles.Control_Id = @pControl_Id)
	OR (disControles.ControlSegmento = @pControl_Id)
	AND (disControles.TipoControl <> 'OrigenSegmento')
	)

--Controles
SELECT disControles.Control_Id, disControles.NroControl, disControles.ControlParent_Id, 
		disControles.TipoControl, disControles.Alto, disControles.Ancho, 
		disControles.Arriba, disControles.Izquierda, disControles.Texto, 
		disControles.Visible, disControles.Habilitado, disControles.Alineacion,
		disControles.TabStop, disControles.TabOrden, disControles.Requerido, 
		TablasColumnas1.Tabla_Id NombreTabla, TablasColumnas1.Columna_Id NombreColumna, 
		disControles.Embebido, 
		disControles.Ancla, disControles.EsCodigoNuevo, disControles.Paises, disControles.Fila, 
		disControles.Columna, disControles.FilasExtension, disControles.ColumnasExtension,
		disControles.MaximaLongitud, disControles.ClickNuevoBlanquea, disControles.ControlaCambios, 
		disControles.SoloLectura, disControles.TextoFijo, disControles.TextoControlVacio,
		disControles.Estilo, disControles.TituloLabel, disControles.AlineacionLabel, disControles.IgualaAnchoColumna,
		disControles.SegmentoOrigen, disControles.ControlSegmento, disControles.Heredado
FROM disControles 
INNER JOIN @ListaControlesAfectados as ctrl ON ctrl.Control_Id = disControles.Control_Id
LEFT JOIN disTablasColumnas as TablasColumnas1 ON (TablasColumnas1.Control_Id = disControles.Control_Id) 
		  AND (TablasColumnas1.Formulario_Id = disControles.Formulario_Id)
		  AND ((TablasColumnas1.AdicionalControl is null) 
		  -- Es el codigo de la Lupa
		  OR (TablasColumnas1.AdicionalControl = '1') 
		  -- Es el campo cliente del upoload
		  OR (TablasColumnas1.AdicionalControl = 'C')) 
WHERE (disControles.Formulario_Id = @liFormulario)
UNION--Los controles de los popups asociados
SELECT disControles.Control_Id, disControles.NroControl, 
		case when disControles.ControlParent_Id = 'Solapa_Datos' then lstFrm.SolapaInvocante else disControles.ControlParent_Id end as ControlParent_Id, 
		disControles.TipoControl, disControles.Alto, disControles.Ancho, 
		disControles.Arriba, disControles.Izquierda, disControles.Texto, 
		disControles.Visible, disControles.Habilitado, disControles.Alineacion,
		disControles.TabStop, disControles.TabOrden, disControles.Requerido, 
		TablasColumnas1.Tabla_Id NombreTabla, TablasColumnas1.Columna_Id NombreColumna, 
		disControles.Embebido, 
		disControles.Ancla, disControles.EsCodigoNuevo, disControles.Paises, disControles.Fila, 
		disControles.Columna, disControles.FilasExtension, disControles.ColumnasExtension,
		disControles.MaximaLongitud, disControles.ClickNuevoBlanquea, disControles.ControlaCambios, 
		disControles.SoloLectura, disControles.TextoFijo, disControles.TextoControlVacio,
		disControles.Estilo, disControles.TituloLabel, disControles.AlineacionLabel, disControles.IgualaAnchoColumna,
		disControles.SegmentoOrigen, disControles.ControlSegmento, disControles.Heredado
FROM disControles 
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControles.Formulario_Id
INNER JOIN @ListaControlesAfectados as ctrl ON ctrl.Control_Id = disControles.Control_Id
LEFT JOIN disTablasColumnas as TablasColumnas1 ON (TablasColumnas1.Control_Id = disControles.Control_Id) 
		  AND (TablasColumnas1.Formulario_Id = disControles.Formulario_Id)
		  AND ((TablasColumnas1.AdicionalControl is null) 
		  -- Es el codigo de la Lupa
		  OR (TablasColumnas1.AdicionalControl = '1') 
		  -- Es el campo cliente del upoload
		  OR (TablasColumnas1.AdicionalControl = 'C')) 
WHERE (disControles.NroControl > 2) -- el 0 es el formulario, el 1 es el control solapas, y el 2 la solapa_datos
UNION--Los controles de los forms refenciados por controles
SELECT case when disControles.TipoControl = 'System.Windows.Forms.TabPage' then disControles.Control_Id + '_' + lstfrm.ControlReferencia else disControles.Control_Id end as Control_Id, 
		disControles.NroControl, 
		case when disControles.ControlParent_Id like 'Solapa__%' then disControles.ControlParent_Id + '_' + lstfrm.ControlReferencia else disControles.ControlParent_Id end as ControlParent_Id, 
		disControles.TipoControl, disControles.Alto, disControles.Ancho, 
		disControles.Arriba, disControles.Izquierda, disControles.Texto, 
		disControles.Visible, disControles.Habilitado, disControles.Alineacion,
		disControles.TabStop, disControles.TabOrden, disControles.Requerido, 
		TablasColumnas1.Tabla_Id NombreTabla, TablasColumnas1.Columna_Id NombreColumna, 
		disControles.Embebido, 
		disControles.Ancla, disControles.EsCodigoNuevo, disControles.Paises, disControles.Fila, 
		disControles.Columna, disControles.FilasExtension, disControles.ColumnasExtension,
		disControles.MaximaLongitud, disControles.ClickNuevoBlanquea, disControles.ControlaCambios, 
		disControles.SoloLectura, disControles.TextoFijo, disControles.TextoControlVacio,
		disControles.Estilo, disControles.TituloLabel, disControles.AlineacionLabel, disControles.IgualaAnchoColumna,
		disControles.SegmentoOrigen, disControles.ControlSegmento, disControles.Heredado
FROM disControles 
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControles.Formulario_Id
INNER JOIN @ListaControlesAfectados as ctrl ON ctrl.Control_Id = disControles.Control_Id
LEFT JOIN disTablasColumnas as TablasColumnas1 ON (TablasColumnas1.Control_Id = disControles.Control_Id) 
		  AND (TablasColumnas1.Formulario_Id = disControles.Formulario_Id)
		  AND ((TablasColumnas1.AdicionalControl is null) 
		  -- Es el codigo de la Lupa
		  OR (TablasColumnas1.AdicionalControl = '1') 
		  -- Es el campo cliente del upoload
		  OR (TablasColumnas1.AdicionalControl = 'C')) 
WHERE (disControles.NroControl > 1) -- el 0 es el formulario, el 1 es el control solapas, y el 2 la solapa_datos
ORDER BY disControles.Fila, disControles.Columna, disControles.NroControl

-- Numericos
SELECT disControlesNumerico.Control_Id, Decimales, BotonSpin, SpinIncremento, ValorMinimo, ValorMaximo, EsPorcentaje
FROM disControlesNumerico
INNER JOIN @ListaControlesAfectados as ctrl ON ctrl.Control_Id = disControlesNumerico.Control_Id
WHERE (Formulario_Id = @liFormulario) 
UNION
SELECT disControlesNumerico.Control_Id, Decimales, BotonSpin, SpinIncremento, ValorMinimo, ValorMaximo, EsPorcentaje
FROM disControlesNumerico
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesNumerico.Formulario_Id
INNER JOIN @ListaControlesAfectados as ctrl ON ctrl.Control_Id = disControlesNumerico.Control_Id 
UNION
SELECT disControlesNumerico.Control_Id, Decimales, BotonSpin, SpinIncremento, ValorMinimo, ValorMaximo, EsPorcentaje
FROM disControlesNumerico
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControlesNumerico.Formulario_Id 
INNER JOIN @ListaControlesAfectados as ctrl ON ctrl.Control_Id = disControlesNumerico.Control_Id


-- Segmentos
SELECT Control_Id, genSegmentos.Segmento_Id, lupIdentidades.Identidad_Id, EsLaEntidadDelForm, Filtros, 
lupIdentidades.OrdenMenuFormulario,	disFormularios.Formulario_Id, disFormularios.Titulo as TituloFormPopup
FROM disControlesSegmento
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = dbo.FuncFKgenSegmentos(@pSegmento_Id)
INNER JOIN lupIdentidades ON lupIdentidades.lupIdentidades = disControlesSegmento.Identidad_Id 
LEFT JOIN genMenus ON genMenus.Orden = lupIdentidades.OrdenMenuFormulario
LEFT JOIN disFormularios ON disFormularios.disFormularios = genMenus.Formulario_Id
WHERE (disControlesSegmento.Formulario_Id = @liFormulario) 
AND (disControlesSegmento.Control_Id = @pControl_Id)
UNION
SELECT Control_Id, genSegmentos.Segmento_Id, lupIdentidades.Identidad_Id, EsLaEntidadDelForm, Filtros, 
lupIdentidades.OrdenMenuFormulario,	disFormularios.Formulario_Id, disFormularios.Titulo as TituloFormPopup
FROM disControlesSegmento
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = dbo.FuncFKgenSegmentos(@pSegmento_Id)
INNER JOIN lupIdentidades ON lupIdentidades.lupIdentidades = disControlesSegmento.Identidad_Id 
INNER JOIN @ListaDeFormularios as lstFrm ON lstFrm.id = disControlesSegmento.Formulario_Id 
LEFT JOIN genMenus ON genMenus.Orden = lupIdentidades.OrdenMenuFormulario
LEFT JOIN disFormularios ON disFormularios.disFormularios = genMenus.Formulario_Id
WHERE (disControlesSegmento.Control_Id = @pControl_Id)
UNION
SELECT Control_Id, genSegmentos.Segmento_Id, lupIdentidades.Identidad_Id, EsLaEntidadDelForm, Filtros, 
lupIdentidades.OrdenMenuFormulario,	disFormularios.Formulario_Id, disFormularios.Titulo as TituloFormPopup
FROM disControlesSegmento
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = dbo.FuncFKgenSegmentos(@pSegmento_Id)
INNER JOIN lupIdentidades ON lupIdentidades.lupIdentidades = disControlesSegmento.Identidad_Id 
INNER JOIN @ListaDeFormInscrustados as lstFrm ON lstFrm.id = disControlesSegmento.Formulario_Id 
LEFT JOIN genMenus ON genMenus.Orden = lupIdentidades.OrdenMenuFormulario
LEFT JOIN disFormularios ON disFormularios.disFormularios = genMenus.Formulario_Id
WHERE (disControlesSegmento.Control_Id = @pControl_Id)

-- Extras, para evitar llamar a mas acciones
SELECT genSegmentoOrigenes.OriSeg_Id, genSegmentoOrigenes.Descripcion
FROM genSegmentoOrigenes  

--obtener todos los posibles segmentos
SELECT Segmento_Id
FROM genSegmentos


-- Obtener configuracion de segmento
SELECT distinct vseg.Segmento_id, vseg.Orden, vseg.Campo, vseg.Tipo, vseg.Digitos, 
	   cast(case when seg.TamanioVariable = cast(vseg.Campo as char(1)) + vseg.Tipo then 1 else 0 end as bit) as EsTamaniovariable,
	   vseg.TieneColumnaAutomatica , vseg.Origen,vseg.Nombre, vseg.HabilitaEdicion 
FROM disControlesSegmento
INNER JOIN vGenSegmentosConfiguracion vseg ON vseg.genSegmentos = dbo.FuncFKgenSegmentos(@pSegmento_Id)
INNER JOIN genSegmentos seg ON seg.genSegmentos = dbo.FuncFKgenSegmentos(@pSegmento_Id)
WHERE ((disControlesSegmento.Formulario_Id = @liFormulario) 
OR (disControlesSegmento.Formulario_Id in (select Id from @ListaDeFormInscrustados)))
AND disControlesSegmento.Control_Id = @pControl_Id
ORDER BY 1, 2


RETURN @@Error 

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disFormulariosComentarios.sql*/
DROP PROCEDURE disFormulariosComentariosGuardar
GO

CREATE PROCEDURE disFormulariosComentariosGuardar
(
@pFormulario_Id int,
@pFechaRegistro Datetime,
@pFechaRegistroOrig Datetime,
@pFechaUltModif Datetime,
@pComentario QMemo, 
@pFormularioRegOrig_Id varchar(30) = NULL,
@pComentario_Id int = NULL,
@pTipoComentario char(1) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disFormulariosComentarios WHERE (Formulario_Id = @pFormulario_Id) AND (FechaRegistro = @pFechaRegistro)))
BEGIN 
	UPDATE disFormulariosComentarios
	SET	FechaRegistroOrig = @pFechaRegistroOrig,
		FechaUltModif = FechaUltModif,
		Comentario = @pComentario, 
		--FormularioRegOrig_Id = dbo.FuncFKdisFormularios(@pFormularioRegOrig_Id)
		FormularioRegOrig_Id = @pFormularioRegOrig_Id,
		Comentario_Id = @pComentario_Id,
		TipoComentario = @pTipoComentario
	WHERE (Formulario_Id = @pFormulario_Id) AND (FechaRegistro = @pFechaRegistro)
END 
ELSE 
BEGIN 
	INSERT INTO disFormulariosComentarios
	(
		Formulario_Id,
		FechaRegistro,
		FechaRegistroOrig,
		FechaUltModif,
		Comentario, 
		FormularioRegOrig_Id,
		Comentario_Id,
		TipoComentario
	)
	VALUES 
	(
		@pFormulario_Id,
		@pFechaRegistro,
		@pFechaRegistroOrig,
		@pFechaUltModif,
		@pComentario, 
		--dbo.FuncFKdisFormularios(@pFormularioRegOrig_Id)
		@pFormularioRegOrig_Id,
		@pComentario_Id,
		@pTipoComentario
	)
END 

GO


DROP PROCEDURE disFormulariosComentariosEliminar
GO
CREATE PROCEDURE disFormulariosComentariosEliminar
(
@pFormulario_Id varchar(30)
)
AS
SET NOCOUNT ON 

DELETE FROM disFormulariosComentarios 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
 
RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disFormulariosDatosTodos.sql*/
DROP PROCEDURE disFormulariosDatosTodos 
GO
CREATE PROCEDURE disFormulariosDatosTodos 
AS
select '' as Vacio
select Formulario_id, Descripcion, disFormularios.Especializacion  from disFormularios
Where inactivo = 0
ORDER BY 1

GO

DROP PROCEDURE disFormulariosMenuDatosTodos 
GO
CREATE PROCEDURE disFormulariosMenuDatosTodos 
AS

select orden, disFormularios.Formulario_id, Descripcion, Titulo  
from genMenus 
inner join disFormularios on disFormularios.disFormularios = genMenus.Formulario_Id
Where inactivo = 0
ORDER BY 2

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disRelacionesTablas.sql*/
DROP PROCEDURE disRelacionesTablasGuardar
GO

CREATE PROCEDURE disRelacionesTablasGuardar
(
@pFormulario_Id int,
@pTablaMaster_Id varchar(40),
@pTablaDetalle_Id varchar(40),
@pColumnaMaster_Id varchar(100),
@pColumnaMaster2_Id varchar(100) = NULL,
@pColumnaMaster3_Id varchar(100) = NULL,
@pColumnaDetalle_Id varchar(100),
@pColumnaDetalle2_Id varchar(100) = NULL,
@pColumnaDetalle3_Id varchar(100) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disRelacionesTablas WHERE (Formulario_Id = @pFormulario_Id) AND (TablaMaster_Id = @pTablaMaster_Id) AND (TablaDetalle_Id = @pTablaDetalle_Id)))
BEGIN 
	UPDATE disRelacionesTablas
	SET	ColumnaMaster_Id = @pColumnaMaster_Id,
		ColumnaMaster2_Id = @pColumnaMaster2_Id,
		ColumnaMaster3_Id = @pColumnaMaster3_Id,
		ColumnaDetalle_Id = @pColumnaDetalle_Id,
		ColumnaDetalle2_Id = @pColumnaDetalle2_Id,
		ColumnaDetalle3_Id = ColumnaDetalle3_Id
	WHERE (Formulario_Id = @pFormulario_Id) AND (TablaMaster_Id = @pTablaMaster_Id) AND (TablaDetalle_Id = @pTablaDetalle_Id)
END 
ELSE 
BEGIN 
	INSERT INTO disRelacionesTablas
	(
		Formulario_Id,
		TablaMaster_Id,
		TablaDetalle_Id,
		ColumnaMaster_Id,
		ColumnaMaster2_Id,
		ColumnaMaster3_Id,
		ColumnaDetalle_Id,
		ColumnaDetalle2_Id,
		ColumnaDetalle3_Id
	)
	VALUES 
	(
		@pFormulario_Id,
		@pTablaMaster_Id,
		@pTablaDetalle_Id,
		@pColumnaMaster_Id,
		@pColumnaMaster2_Id,
		@pColumnaMaster3_Id,
		@pColumnaDetalle_Id,
		@pColumnaDetalle2_Id,
		@pColumnaDetalle3_Id
	)
END 

GO


DROP PROCEDURE disRelacionesTablasEliminar
GO
CREATE PROCEDURE disRelacionesTablasEliminar
(
@pFormulario_Id varchar(30),
@pTablaMaster_Id varchar(40) = NULL,
@pTablaDetalle_Id varchar(40) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disRelacionesTablas 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (TablaMaster_Id = ISNULL(@pTablaMaster_Id, TablaMaster_Id))
AND (TablaDetalle_Id = ISNULL(@pTablaDetalle_Id, TablaDetalle_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disTablas.sql*/
DROP PROCEDURE disTablasGuardar
GO

CREATE PROCEDURE disTablasGuardar
(
@pFormulario_Id int,
@pTabla_Id varchar(40),
@pTipoControl varchar(50) = Null,
@pControl_Id varChar(200) = NULL,
@pEsEspecializacion bit
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disTablas WHERE (Formulario_Id = @pFormulario_Id) AND (Tabla_Id = @pTabla_Id)))
BEGIN 
	UPDATE disTablas
	SET	Control_Id = @pControl_Id,
		TipoControl = @pTipoControl, 
		EsEspecializacion = @pEsEspecializacion
	WHERE (Formulario_Id = @pFormulario_Id) AND (Tabla_Id = @pTabla_Id)
END 
ELSE 
BEGIN 
	INSERT INTO disTablas
	(
		Formulario_Id,
		Tabla_Id,
		Control_Id,
		TipoControl,
		EsEspecializacion
	)
	VALUES 
	(
		@pFormulario_Id,
		@pTabla_Id,
		@pControl_Id,
		@pTipoControl,
		@pEsEspecializacion
	)
END 

GO


DROP PROCEDURE disTablasEliminar
GO
CREATE PROCEDURE disTablasEliminar
(
@pFormulario_Id varchar(30),
@pTabla_Id varchar(40) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disTablas 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Tabla_Id = ISNULL(@pTabla_Id, Tabla_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\disTablasColumnas.sql*/
DROP PROCEDURE disTablasColumnasGuardar
GO

CREATE PROCEDURE disTablasColumnasGuardar
(
@pFormulario_Id int,
@pTabla_Id varchar(40),
@pColumna_Id varchar(100),
@pTipoControl varchar(50) = Null,
@pControl_Id varChar(200) = NULL,
@pAdicionalControl varchar(10),
@pEsEspecializacion bit
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM disTablasColumnas WHERE (Formulario_Id = @pFormulario_Id) AND (Tabla_Id = @pTabla_Id) AND (Columna_Id = @pColumna_Id)))
BEGIN 
	UPDATE disTablasColumnas
	SET	Control_Id = @pControl_Id,
		TipoControl = @pTipoControl,
		AdicionalControl = @pAdicionalControl,
		EsEspecializacion = @pEsEspecializacion
	WHERE (Formulario_Id = @pFormulario_Id) AND (Tabla_Id = @pTabla_Id) AND (Columna_Id = @pColumna_Id)
END 
ELSE 
BEGIN 
	INSERT INTO disTablasColumnas
	(
		Formulario_Id,
		Tabla_Id,
		Columna_Id,
		Control_Id,
		TipoControl,
		AdicionalControl,
		EsEspecializacion
	)
	VALUES 
	(
		@pFormulario_Id,
		@pTabla_Id,
		@pColumna_Id,
		@pControl_Id,
		@pTipoControl,
		@pAdicionalControl,
		@pEsEspecializacion
	)
END 

GO


DROP PROCEDURE disTablasColumnasEliminar
GO
CREATE PROCEDURE disTablasColumnasEliminar
(
@pFormulario_Id varchar(30),
@pTabla_Id varchar(40) = NULL,
@pColumna_Id varchar(40) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM disTablasColumnas 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Tabla_Id = ISNULL(@pTabla_Id, Tabla_Id))
AND (Columna_Id = ISNULL(@pColumna_Id, Columna_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\EnOtroLenguaje.sql*/
DROP Function EnOtroLenguaje
GO
CREATE Function EnOtroLenguaje(
	@Cultura VarChar(5) = NULL
	)
	RETURNS BIT

BEGIN
	Declare @Dominio VarChar(2)
	if @Cultura is not null
		begin
			select @Dominio = Dominio_Id from genInstalacion
			if @Dominio IN ('AR','MX') 
				if LEFT(@Cultura,2) != 'es'
					return cast(1 as bit)
				else
					return cast(0 as bit)
			else
				if LEFT(@Cultura,2) = 'es'
					return cast(1 as bit)
			end
	
	return cast(0 as bit)

end	

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\EspCreaTablaLog.sql*/
--EspCreaTablaLog 'conasientos'
DROP PROCEDURE EspCreaTablaLog 
GO
CREATE PROCEDURE EspCreaTablaLog (@Tabla VarChar(100))
as

Declare @Id as Int
Declare @Name as VarChar(100)
Declare @Sql VarChar(max)
Declare @ColOrden int
Declare @Texto VarChar(max)

SELECT @Id = id ,@Name = Name FROM sysobjects 
	where type = 'U' AND name = @Tabla

SET @Sql = 'Create Table '+@Name+'_Log ('+char(13)



DECLARE CUR_CUERPO CURSOR FOR
select c.colorder, 
c.name +' '+ t.name + 
CASE WHEN t.name='char' THEN 
 '('+ ltrim(STR(c.length,4)) +')' 
 WHEN t.name='numeric' THEN 
 '('+ ltrim(STR(c.prec,4)) +',' + ltrim(STR(c.scale,4)) +')' 
 ELSE '' END  +
 CASE WHEN c.isnullable = 0 then ' NOT NULL ' ELSE '' END AS Texto
 -- c.prec, c.scale, t.uid
 from syscolumns c  inner join systypes t on 
	t.xusertype = c.xusertype
where  c.id = @Id
order by 1

OPEN CUR_CUERPO

FETCH NEXT FROM CUR_CUERPO INTO @ColOrden, @Texto
WHILE @@FETCH_STATUS= 0
BEGIN
	SET @SQL = @SQL + @Texto+',' +CHAR(13)
	FETCH NEXT FROM CUR_CUERPO INTO @ColOrden, @Texto
END
CLOSE CUR_CUERPO;
DEALLOCATE CUR_CUERPO;  
SET @SQL = @SQL + ' Operacion Char(1) NOT NULL, '+CHAR(13)+
				  ' FechaLog Datetime default dbo.FechaActual() NOT NULL)'+CHAR(13)+'GO'+CHAR(13)
SELECT @SQL
GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\EspCreaTriggerLog.sql*/
-- EspCreaTablaLog 'conAsientoscon'
-- EspCreaTriggerLog 'conAsientosCon'

DROP PROCEDURE EspCreaTriggerLog
GO
CREATE PROCEDURE EspCreaTriggerLog(@Tabla VarChar(100))
as

Declare @Id as Int
Declare @Name as VarChar(100)
Declare @Campos VarChar(max)
Declare @Sqli VarChar(max)
Declare @Sqlu VarChar(max)
Declare @Sqld VarChar(max)
Declare @ColOrden int
Declare @Texto VarChar(max)
Declare @I int
SELECT @Id = id ,@Name = Name FROM sysobjects 
	where type = 'U' AND name = @Tabla

SET @Sqli = 'Create trigger til_'+@Name+' on '+@Name+' for Insert '+char(13)+'as '+char(13)+'begin'+char(13)
SET @Sqli = @Sqli + 'Insert into '+@Name+'_log ('

SET @Sqlu = 'Create trigger tul_'+@Name+' on '+@Name+' for Update '+char(13)+'as '+char(13)+'begin'+char(13)
SET @Sqlu = @Sqlu + 'Insert into '+@Name+'_log ('

SET @Sqld = 'Create trigger tdl_'+@Name+' on '+@Name+' for Delete '+char(13)+'as '+char(13)+'begin'+char(13)
SET @Sqld = @Sqld + 'Insert into '+@Name+'_log ('



DECLARE CUR_CUERPO CURSOR FOR
select c.colorder, c.name 
 -- c.prec, c.scale, t.uid
 from syscolumns c  inner join systypes t on 
	t.xusertype = c.xusertype
where  c.id = @Id
order by 1

OPEN CUR_CUERPO
SET @Campos= ''
SET @I = 1
FETCH NEXT FROM CUR_CUERPO INTO @ColOrden, @Texto
WHILE @@FETCH_STATUS= 0
BEGIN
	
	SET @Campos = @Campos + @Texto+',' 
	IF @I=5
	BEGIN
		SET @I=0
		SET @Campos = @Campos + CHAR(13)

	END
	SET @I=@I+1
	FETCH NEXT FROM CUR_CUERPO INTO @ColOrden, @Texto
END
CLOSE CUR_CUERPO;
DEALLOCATE CUR_CUERPO;  
SET @SQLi = @SQLi + @Campos +'Operacion )'+char(13)+
		' SELECT '+@Campos+'''I'' FROM Inserted '+char(13)+'End'+char(13)+'GO'

SET @SQLu = @SQLu + @Campos +'Operacion )'+char(13)+
		' SELECT '+@Campos+'''U'' FROM Inserted '+char(13)+'End'+char(13)+'GO'

SET @SQLd = @SQLd + @Campos +'Operacion )'+char(13)+
		' SELECT '+@Campos+'''D'' FROM deleted '+char(13)+'End'+char(13)+'GO'

SELECT @SQLi+char(13)+@SQLu+char(13)+@SQLd+char(13)
GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\FechaBaseDatos.sql*/
DROP PROCEDURE FechaBaseDatos
GO
CREATE PROCEDURE FechaBaseDatos
as
select dbo.FechaActual() as Fecha
GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\FechaSinHora.sql*/
DROP FUNCTION  FechaSinHora
go
CREATE FUNCTION  FechaSinHora
(@Fecha datetime)
RETURNS datetime 
begin
	declare @Fecha_Rep DateTime
	
	SELECT @Fecha_rep = DATEADD(hh,-DatePart(hh,@Fecha),@Fecha)
	SELECT @Fecha_rep = DATEADD(mi,-DatePart(mi,@Fecha_rep),@Fecha_rep)
	SELECT @Fecha_rep = DATEADD(ss,-DatePart(ss,@Fecha_rep),@Fecha_rep)
	SELECT @Fecha_rep = DATEADD(ms,-DatePart(ms,@Fecha_rep),@Fecha_rep)


	return @Fecha_Rep	
end  


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\funciones.sql*/
Drop Function func_TipoCambio
Go

Create Function func_TipoCambio
(
@pMoneda_Id int,
@pFecha DateTime, 
@pEmpresa_Id int
)
Returns qMonedaD4
As
Begin
Declare @pCambio qMonedaD4

Declare @Dias Int
Set @Dias= ISNULL((select nValor from genGlobales where
		Nombre_Var = 'GENDIASCAMBIO' and 
		Empresa_Id = @pEmpresa_Id),0)
SET @pFecha  = DATEADD(DD, @Dias, @pFecha)


Select @pCambio = CambioVenta From genTipoCambio 
Where Moneda_Id = @pMoneda_Id And 
ISNULL(@pEmpresa_Id, Empresa_Id) =  @pEmpresa_Id and 
Fecha = 
isnull((Select Min(Fecha) Fecha From genTipoCambio 
	Where Moneda_Id = @pMoneda_Id And Fecha >= @pFecha and 
	ISNULL(@pEmpresa_Id, Empresa_Id) =  @pEmpresa_Id),
	(Select max(Fecha) Fecha From genTipoCambio 
	Where Moneda_Id = @pMoneda_Id And Fecha <= @pFecha and 
	ISNULL(@pEmpresa_Id, Empresa_Id) =  @pEmpresa_Id))

Return ISNULL(@pCambio,1)
End

GO


Drop Function func_TipoCambioCompra
Go

Create Function func_TipoCambioCompra
(
@pMoneda_Id int,
@pFecha DateTime, 
@pEmpresa_Id int
)
Returns qMonedaD4
As
Begin



Declare @pCambio qMonedaD4

Declare @Dias Int
Set @Dias= ISNULL((select nValor from genGlobales where
		Nombre_Var = 'GENDIASCAMBIO' and 
		Empresa_Id = @pEmpresa_Id),0)
SET @pFecha  = DATEADD(DD, @Dias, @pFecha)


Select @pCambio = CambioCompra From genTipoCambio 
Where Moneda_Id = @pMoneda_Id And 
ISNULL(@pEmpresa_Id, Empresa_Id) =  @pEmpresa_Id and 
Fecha = 
isnull((Select Min(Fecha) Fecha From genTipoCambio 
	Where Moneda_Id = @pMoneda_Id And Fecha >= @pFecha and 
	ISNULL(@pEmpresa_Id, Empresa_Id) =  @pEmpresa_Id),
	(Select max(Fecha) Fecha From genTipoCambio 
	Where Moneda_Id = @pMoneda_Id And Fecha <= @pFecha and 
	ISNULL(@pEmpresa_Id, Empresa_Id) =  @pEmpresa_Id))

Return ISNULL(@pCambio,1)
End

GO

Drop Function  NVLE
GO
Create Function  NVLE(
	@Campo1 VarChar(255),
	@Campo2 VarChar(255)
)
Returns VarChar(255)
as
begin
	if (@Campo1 is null or rtrim(@Campo1) = '')
		return @Campo2
return @Campo1
end
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\Function_Segmento.sql*/
-- Paso a ser Segmento SP
DROP FUNCTION dbo.Segmento
GO
CREATE FUNCTION dbo.Segmento(@Segmento_id int, 
	@Segmento1C VarChar(20),@Segmento2C VarChar(20),
	@Segmento3C VarChar(20), @Segmento4C VarChar(20),
	@Segmento1N int,@Segmento2N int,
	@Segmento3N int, @Segmento4N int)

	RETURNS VarChar(120)
as
BEGIN

DECLARE @Orden1C INT
DECLARE @Orden2C INT
DECLARE @Orden3C INT
DECLARE @Orden4C INT
DECLARE @Orden1N INT
DECLARE @Orden2N INT
DECLARE @Orden3N INT
DECLARE @Orden4N INT
DECLARE @Ret VarChar(120)		
DECLARE @I INT
DECLARE @Sepa Char(1) 


DECLARE @Orden1CEP BIT
DECLARE @Orden2CEP BIT
DECLARE @Orden3CEP BIT
DECLARE @Orden4CEP BIT
DECLARE @Digitos1N AS int
SET @Ret=''

SELECT @Orden1C = Orden1C , @Orden2C = Orden2C , @Orden3C = Orden3C , @Orden4C = Orden4C ,
	@Orden1N = Orden1N , @Orden2N = Orden2N , @Orden3N = Orden3N , @Orden4N = Orden4N,
	@Digitos1N = Digitos1N,
	@Orden1CEP = case when Origen1C = 9 then 1 else 0 end, 
	@Orden2CEP = case when Origen2C = 9 then 1 else 0 end, 
	@Orden3CEP = case when Origen3C = 9 then 1 else 0 end, 
	@Orden4CEP = case when Origen4C = 9 then 1 else 0 end
	from genSegmentos 
	where
	genSegmentos.genSegmentos = @Segmento_Id

SET @I= 1
SET @Sepa=''
WHILE @I <= 8
BEGIN 
	IF @Orden1C = @I
	BEGIN
		IF @Segmento1C <> '' and @Orden1CEP = 0
		BEGIN
			SET @Ret = @Ret + @Sepa + rtrim(@Segmento1C)
			SET @Sepa = '-'
		END
	END	
	
	IF @Orden2C = @I
	BEGIN
		IF @Segmento2C <> '' and @Orden2CEP = 0
		BEGIN
		SET @Ret = @Ret + @Sepa + rtrim(@Segmento2C)
		SET @Sepa = '-'
		END
	END	
	
	IF @Orden3C = @I 
	BEGIN
		IF @Segmento3C <> '' and @Orden3CEP = 0
		BEGIN
		SET @Ret = @Ret + @Sepa + rtrim(@Segmento3C)
		SET @Sepa = '-'
		END
	END	
	
	IF @Orden4C = @I
	BEGIN
		IF @Segmento4C <> '' and @Orden4CEP = 0
		BEGIN
		SET @Ret = @Ret + @Sepa + rtrim(@Segmento4C)
		SET @Sepa = '-'
		END
	END	
	
	IF @Orden1N = @I
	BEGIN
		SET @Ret = @Ret + @Sepa + case when @Segmento1N<0 then '*' else '' end + 
			case when len(ltrim(STR(abs(@Segmento1N),@Digitos1N))) < @Digitos1N
			THEN
			Left('0000000000',@Digitos1N-len(ltrim(STR(abs(@Segmento1N),@Digitos1N)))) ELSE '' END+ltrim(STR(abs(@Segmento1N),@Digitos1N))
		SET @Sepa = '-'
	END	
	
	IF @Orden2N = @I
	BEGIN
		SET @Ret = @Ret + @Sepa + case when @Segmento2N<0 then '*' else '' end +ltrim(STR(abs(@Segmento2N),10))
		SET @Sepa = '-'
	END	
	
	IF @Orden3N = @I
	BEGIN
		SET @Ret = @Ret + @Sepa +case when @Segmento3N<0 then '*' else '' end + ltrim(STR(Abs(@Segmento3N),10))
		SET @Sepa = '-'
	END	
	
	IF @Orden4N = @I
	BEGIN
		SET @Ret = @Ret + @Sepa +case when @Segmento4N<0 then '*' else '' end + ltrim(STR(Abs(@Segmento4N),10))
		SET @Sepa = '-'
	END	
	
	SET @I = @I+1
	
END
RETURN @Ret	


END	

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genAdjuntos.sql*/
DROP PROCEDURE genAdjuntosGuardar
GO


CREATE PROCEDURE genAdjuntosGuardar
(
@pTabla_Id varchar(60),
@pIdentity_Id bigint,
@pRenglon int,
@pGuid varchar(36),
@pNombreArchivo varchar(200),
@pExtension varchar(10)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genAdjuntos WHERE (Identity_Id = @pIdentity_Id) AND (Tabla_Id = @pTabla_Id) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE genAdjuntos
	SET	Guid = @pGuid,
		NombreArchivo = @pNombreArchivo,
		Extension = @pExtension
	WHERE (Identity_Id = @pIdentity_Id) AND (Tabla_Id = @pTabla_Id) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO genAdjuntos
	(
		Tabla_Id,
		Identity_Id,
		Renglon,
		Guid,
		NombreArchivo,
		Extension
	)
	VALUES 
	(
		@pTabla_Id,
		@pIdentity_Id,
		@pRenglon,
		@pGuid,
		@pNombreArchivo,
		@pExtension
	)
END 

GO

DROP PROCEDURE genAdjuntosDatos
GO
CREATE PROCEDURE genAdjuntosDatos
(
@pTabla_Id varchar(60),
@pIdentity_Id bigint,
@pRenglon int
)
AS
SET NOCOUNT ON 

SELECT 	genAdjuntos.Tabla_Id, genAdjuntos.Identity_Id, genAdjuntos.Renglon, genAdjuntos.Guid,
		genAdjuntos.NombreArchivo, genAdjuntos.Extension, '' as ArchivoBase64, '' as Estado
FROM genAdjuntos 
WHERE (genAdjuntos.Tabla_Id = @pTabla_Id)
AND (Identity_Id = @pIdentity_Id)
AND (Renglon = @pRenglon) 
 RETURN @@Error 

GO

DROP PROCEDURE genAdjuntosEliminar
GO
CREATE PROCEDURE genAdjuntosEliminar
(
@pTabla_Id varchar(60),
@pIdentity_Id bigint,
@pRenglon int=null
)
AS
SET NOCOUNT ON 

DELETE FROM genAdjuntos 
WHERE Tabla_Id = @pTabla_Id
AND Identity_Id = @pIdentity_Id
AND Renglon = ISNULL(@pRenglon,Renglon)

 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genAdjuntosIdentityDatos.sql*/
DROP procedure genAdjuntosIdentityDatos
GO

Create procedure genAdjuntosIdentityDatos
(
@pTabla_Id varchar(60),
@pIdentity_Id bigint 
)
As

SELECT genAdjuntos.Renglon, genAdjuntos.Guid, genAdjuntos.NombreArchivo, genAdjuntos.Extension, '' as ArchivoBase64, '' as Estado
FROM genAdjuntos 
WHERE (genAdjuntos.Tabla_Id = @pTabla_Id)
AND (Identity_Id = @pIdentity_Id)
Order by 1
RETURN @@Error 

GO

DROP procedure genAdjuntosIdentityDevolverDatos
GO

Create procedure genAdjuntosIdentityDevolverDatos
(
@pTabla_Id varchar(60),
@pIdentity_Id bigint 
)
As

SELECT @pTabla_Id as Tabla_Id, @pIdentity_Id as Identity_Id


SELECT genAdjuntos.Renglon, genAdjuntos.Guid, genAdjuntos.NombreArchivo, genAdjuntos.Extension, '' as ArchivoBase64, '' as Estado
FROM genAdjuntos 
WHERE (genAdjuntos.Tabla_Id = @pTabla_Id)
AND (Identity_Id = @pIdentity_Id)
Order by 1
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genAlertas.sql*/

	

DROP PROCEDURE genAlertasGuardar
GO
CREATE PROCEDURE genAlertasGuardar
(
@pAlertaId int, 
@pUsuario_id int,
@pFechaEmision datetime,
@pFechaLeido datetime = NULL,
@pMensaje varchar(max),
@pLiga varchar(254)
)
AS
SET NOCOUNT ON 
IF (@pAlertaId<>0)
BEGIN 
	UPDATE genAlertas
	SET		
		Usuario_id = @pUsuario_id,
		FechaEmision = @pFechaEmision,
		FechaLeido = @pFechaLeido,
		Mensaje = @pMensaje,
		Liga = @pLiga
	WHERE 
	AlertaId = @pAlertaId
END 
ELSE 
BEGIN 
	INSERT INTO genAlertas
	(
		Usuario_id,
		FechaEmision,
		FechaLeido,
		Mensaje,
		Liga
	)
	VALUES 
	(
		@pUsuario_id,
		@pFechaEmision,
		@pFechaLeido,
		@pMensaje,
		@pLiga
	)
	SET @pAlertaId =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @pAlertaId as RetVal 

GO

DROP PROCEDURE genAlertasDatos
GO
CREATE PROCEDURE genAlertasDatos
(
	@pAlertaId int
)
AS
SET NOCOUNT ON 

SELECT genAlertas.AlertaId, genUsuarios.Usuario_id, genUsuarios.Apellido_y_nombres as DescripcionUsuario,
	genAlertas.FechaEmision, genAlertas.FechaLeido,
	genAlertas.Mensaje, genAlertas.Liga
FROM genAlertas inner join genUsuarios on 
genAlertas.Usuario_id = genUsuarios.genUsuarios
WHERE  
AlertaId = @pAlertaId
  
RETURN @@Error 

GO

DROP PROCEDURE genAlertasEliminar
GO
CREATE PROCEDURE genAlertasEliminar
(
	@pAlertaId int
)
AS
SET NOCOUNT ON 

DELETE FROM genAlertas 
WHERE  
AlertaId = @pAlertaId

RETURN @@Error 

GO

DROP PROCEDURE genAlertasUsuario
GO
CREATE PROCEDURE genAlertasUsuario
(
	@pUsuario_Id int
)
AS
SET NOCOUNT ON 
SELECT @pUsuario_id as Usuario_id

SELECT genAlertas.AlertaId, genAlertas.FechaEmision, 
	genAlertas.Mensaje, genAlertas.Liga
FROM genAlertas 
WHERE  
genAlertas.FechaLeido is null and 
genAlertas.Usuario_Id = @pUsuario_Id
 
RETURN @@Error 

GO




DROP PROCEDURE genAlertasEliminarUsuario
GO
CREATE PROCEDURE genAlertasEliminarUsuario
( 
	@pUsuario_Id int
)
AS

DELETE FROM genAlertas Where Usuario_id = @pUsuario_id

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genAplicacionesDatos.sql*/
Drop Procedure genAplicacionesDatos
Go

Create Procedure genAplicacionesDatos
(
@pAsiento_Id_Ap bigint,
@pCuotaNro_Ap smallint = Null
)
As

Select @pAsiento_Id_Ap Asiento_Id_Ap, IsNull(@pCuotaNro_Ap, 0) CuotaNro_Ap

Select genCancMov.Asiento_Id, genCancMov.CuotaNro, genCancMov.NroAplicacion, genCancMov.FechaAplicacion,
genCancMov.Importe, genCancMov.Importe_Ap , genCancMov.EsAplicOriginal, genCancMov.EsVentaContado
From genCancMov 
inner join conAsientos ON conAsientos.conAsientos =genCancMov.Asiento_Id
Where 
conAsientos.Anulado = 0 AND 
genCancMov.Asiento_Id_Ap = @pAsiento_Id_Ap And
genCancMov.CuotaNro_Ap = IsNull(@pCuotaNro_Ap, genCancMov.CuotaNro_Ap)
union all
Select genCancMov.Asiento_Id_ap, genCancMov.CuotaNro_ap, genCancMov.NroAplicacion, genCancMov.FechaAplicacion,
genCancMov.Importe, genCancMov.Importe_Ap , genCancMov.EsAplicOriginal, genCancMov.EsVentaContado
From genCancMov 
inner join conAsientos ON conAsientos.conAsientos =genCancMov.Asiento_Id_ap
Where 
conAsientos.Anulado = 0 AND 
genCancMov.Asiento_Id = @pAsiento_Id_Ap And
genCancMov.CuotaNro = IsNull(@pCuotaNro_Ap, genCancMov.CuotaNro)

Go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genAsiSegmentos.sql*/
--- Cambio Para tomar el maximo con el proximo Numero
-- genAsiSegmentosGuardar  1,'FPRO',1003,0,0,0,'E','F',' ',' ',1,1
DROP PROCEDURE genAsiSegmentosGuardar
GO
CREATE PROCEDURE genAsiSegmentosGuardar
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pAsiento_Id bigint, 
@pTieneAutomatico bit,
@pPosteado bit
)
AS
SET NOCOUNT ON 



IF (EXISTS (SELECT 1 FROM genAsiSegmentos WHERE 
	(Empresa_Id = @pEmpresa_Id) AND 
	(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
	(Segmento1N = @pSegmento1N) AND 
	(Segmento2N = @pSegmento2N) AND 
	(Segmento3N = @pSegmento3N) AND 
	(Segmento4N = @pSegmento4N) AND 
	(Segmento1C = @pSegmento1C) AND 
	(Segmento2C = @pSegmento2C) AND 
	(Segmento3C = @pSegmento3C) AND 
	(Segmento4C = @pSegmento4C)))

		

		if @pPosteado=1 and @pSegmento1N < 0
		begin 
			-- Esta posteando uno pendiente
			SELECT @pSegmento1N = 
			(SELECT MAX(PrimerNumero)
			FROM (SELECT 
				MAX(genAsiSegmentos.Segmento1N)+1 AS PrimerNumero
					FROM genAsiSegmentos 
					Where
						genAsiSegmentos.Segmento1N > 0 and 
						genAsiSegmentos.Empresa_id = @pEmpresa_Id and 
						genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) And
						genAsiSegmentos.Segmento2N = @pSegmento2N And
						genAsiSegmentos.Segmento3N = @pSegmento3N And
						genAsiSegmentos.Segmento4N = @pSegmento4N And
						genAsiSegmentos.Segmento1C = @pSegmento1C And
						genAsiSegmentos.Segmento2C = @pSegmento2C And
						genAsiSegmentos.Segmento3C = @pSegmento3C And
						genAsiSegmentos.Segmento4C = @pSegmento4C
				UNION ALL
					SELECT PrimerNumero
					FROM genContadorSegmento Where
						(genContadorSegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
						(genContadorSegmento.Segmento2N = @pSegmento2N) AND 
						(genContadorSegmento.Segmento3N = @pSegmento3N) AND 
						(genContadorSegmento.Segmento4N = @pSegmento4N) AND 
						(genContadorSegmento.Segmento1C = @pSegmento1C) AND 
						(genContadorSegmento.Segmento2C = @pSegmento2C) AND 
						(genContadorSegmento.Segmento3C = @pSegmento3C) AND 
						(genContadorSegmento.Segmento4C = @pSegmento4C) and 
						genContadorSegmento.Empresa_id = @pEmpresa_id and 
						genContadorSegmento.Segmento_Id =dbo.FuncFKgenSegmentos(@pSegmento_Id)) AS XXX) 
						
			-- esto solo pasa si empieza en 1 esta prendido
			if @pSegmento1N is null or @pSegmento1N < 0
			begin
				set @pSegmento1N = 1
			end	

			UPDATE genAsiSegmentos	SET	Empresa_Id = @pEmpresa_Id,
					Segmento1N = @pSegmento1N 
					WHERE Asiento_id = @pAsiento_Id

		end

	else
		BEGIN 
			UPDATE genAsiSegmentos
			SET	Empresa_Id = @pEmpresa_Id,
				Asiento_Id = @pAsiento_Id
			WHERE (Empresa_Id = @pEmpresa_Id) AND 
				(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
				(Segmento1N = @pSegmento1N) AND 
				(Segmento2N = @pSegmento2N) AND 
				(Segmento3N = @pSegmento3N) AND 
				(Segmento4N = @pSegmento4N) AND 
				(Segmento1C = @pSegmento1C) AND 
				(Segmento2C = @pSegmento2C) AND 
				(Segmento3C = @pSegmento3C) AND 
				(Segmento4C = @pSegmento4C)
		END 
	
ELSE 
BEGIN 
	
	-- Averiguo el que sigue
	
	if (@pTieneAutomatico=1)
	BEGIN
		
		if @pPosteado=1
		BEGIN
			SET @pSegmento1N =(SELECT MAX(PrimerNumero)
			FROM (SELECT 
				MAX(genAsiSegmentos.Segmento1N)+1 AS PrimerNumero
					FROM genAsiSegmentos 
					Where
						genAsiSegmentos.Segmento1N > 0 and 
						genAsiSegmentos.Empresa_id = @pEmpresa_Id and 
						genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) And
						genAsiSegmentos.Segmento2N = @pSegmento2N And
						genAsiSegmentos.Segmento3N = @pSegmento3N And
						genAsiSegmentos.Segmento4N = @pSegmento4N And
						genAsiSegmentos.Segmento1C = @pSegmento1C And
						genAsiSegmentos.Segmento2C = @pSegmento2C And
						genAsiSegmentos.Segmento3C = @pSegmento3C And
						genAsiSegmentos.Segmento4C = @pSegmento4C
				UNION ALL
					SELECT PrimerNumero
					FROM genContadorSegmento Where
						(genContadorSegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
						(genContadorSegmento.Segmento2N = @pSegmento2N) AND 
						(genContadorSegmento.Segmento3N = @pSegmento3N) AND 
						(genContadorSegmento.Segmento4N = @pSegmento4N) AND 
						(genContadorSegmento.Segmento1C = @pSegmento1C) AND 
						(genContadorSegmento.Segmento2C = @pSegmento2C) AND 
						(genContadorSegmento.Segmento3C = @pSegmento3C) AND 
						(genContadorSegmento.Segmento4C = @pSegmento4C) and 
						genContadorSegmento.Empresa_id = @pEmpresa_id and 
						genContadorSegmento.Segmento_Id =dbo.FuncFKgenSegmentos(@pSegmento_Id)) AS XXX) 
						
						
			-- esto solo pasa si empieza en 1 esta prendido
			if @pSegmento1N is null or @pSegmento1N < 0
			begin
				set @pSegmento1N = 1
			end	


		END
		ELSE
			BEGIN

			SET @pSegmento1N = isnull((SELECT MIN(genAsiSegmentos.Segmento1N) AS Segmento1N 
					FROM genAsiSegmentos 
					Where
						genAsiSegmentos.Segmento1N  < 0 and 
						genAsiSegmentos.Empresa_id = @pEmpresa_Id and 
						genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) And
						genAsiSegmentos.Segmento2N = @pSegmento2N And
						genAsiSegmentos.Segmento3N = @pSegmento3N And
						genAsiSegmentos.Segmento4N = @pSegmento4N And
						genAsiSegmentos.Segmento1C = @pSegmento1C And
						genAsiSegmentos.Segmento2C = @pSegmento2C And
						genAsiSegmentos.Segmento3C = @pSegmento3C And
						genAsiSegmentos.Segmento4C = @pSegmento4C),0)-1
						
		
		END
			
	END
	
	INSERT INTO genAsiSegmentos
	(
		Empresa_Id,
		Segmento_Id,
		Segmento1N,
		Segmento2N,
		Segmento3N,
		Segmento4N,
		Segmento1C,
		Segmento2C,
		Segmento3C,
		Segmento4C,
		Asiento_Id
	)
	VALUES 
	(
		@pEmpresa_Id,
		dbo.FuncFKgenSegmentos(@pSegmento_Id),
		@pSegmento1N,
		@pSegmento2N,
		@pSegmento3N,
		@pSegmento4N,
		@pSegmento1C,
		@pSegmento2C,
		@pSegmento3C,
		@pSegmento4C,
		@pAsiento_Id
	)
	
END 
SELECT @pSegmento1N as RetVal

GO

DROP PROCEDURE genAsiSegmentosDatos
GO
CREATE PROCEDURE genAsiSegmentosDatos
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20)
)
AS
SET NOCOUNT ON 

SELECT genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
	genSegmentos.Descripcion as DescripcionSegmentos, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, genAsiSegmentos.Segmento1C,
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, 
	genAsiSegmentos.Asiento_Id, genSegmentos.TieneColumnaAutomatica TieneAutomatico, 
	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N ) as Segmento_Str ,
	conAsientos.Posteado
FROM genAsiSegmentos 
INNER JOIN genSegmentos  ON (genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id)
INNER JOIN conAsientos ON conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
WHERE (genAsiSegmentos.Empresa_Id = @pEmpresa_Id)
AND (genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id))
AND (Segmento1N = @pSegmento1N)
AND (Segmento2N = @pSegmento2N)
AND (Segmento3N = @pSegmento3N)
AND (Segmento4N = @pSegmento4N)
AND (Segmento1C = @pSegmento1C)
AND (Segmento2C = @pSegmento2C)
AND (Segmento3C = @pSegmento3C)
AND (Segmento4C = @pSegmento4C)
 
 RETURN @@Error 

GO

DROP PROCEDURE genAsiSegmentosEliminar
GO
CREATE PROCEDURE genAsiSegmentosEliminar
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int ,
@pSegmento2N int ,
@pSegmento3N int ,
@pSegmento4N int ,
@pSegmento1C varchar(20) ,
@pSegmento2C varchar(20) ,
@pSegmento3C varchar(20) ,
@pSegmento4C varchar(20) 
)
AS
SET NOCOUNT ON 

DELETE FROM genAsiSegmentos 
WHERE Empresa_Id = @pEmpresa_Id
AND  Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)
AND  Segmento1N = @pSegmento1N
AND  Segmento2N = @pSegmento2N
AND  Segmento3N = @pSegmento3N
AND  Segmento4N = @pSegmento4N
AND  Segmento1C = @pSegmento1C
AND  Segmento2C = @pSegmento2C
AND  Segmento3C = @pSegmento3C
AND  Segmento4C = @pSegmento4C
 
 RETURN @@Error 

GO


DROP PROCEDURE genAsiSegmentosDatosInt
GO
CREATE PROCEDURE genAsiSegmentosDatosInt
(
@pAsiento_Id bigint
)
AS
SET NOCOUNT ON 

SELECT genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
	genSegmentos.Descripcion as DescripcionSegmentos, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, genAsiSegmentos.Segmento1C,
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, 
	genAsiSegmentos.Asiento_Id,  genSegmentos.TieneColumnaAutomatica TieneAutomatico,
	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N ) as Segmento_Str,
	conAsientos.Posteado
FROM genAsiSegmentos 
INNER JOIN genSegmentos  ON (genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id)
inner join conAsientos ON conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
WHERE 
genAsiSegmentos.Asiento_Id = @pAsiento_Id

 RETURN @@Error 

GO

DROP PROCEDURE genAsiSegmentosModificar1N
GO
CREATE PROCEDURE genAsiSegmentosModificar1N
(
@pAsiento_Id bigint,
@pSegmento1N int
)
As

Update genAsiSegmentos Set Segmento1N = @pSegmento1N Where Asiento_Id = @pAsiento_Id
Go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genAtributosGenerales.sql*/
DROP PROCEDURE genAtributosGeneralesGuardar
GO
CREATE PROCEDURE genAtributosGeneralesGuardar
(
@pAtributoNro int,
@pTabla_Id varchar(60),
@pDescripcion varchar(80),
@pTipo char(1),
@pEnGrilla Sino
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genAtributosGenerales WHERE (AtributoNro = @pAtributoNro) AND (Tabla_Id = @pTabla_Id)))
BEGIN 
	UPDATE genAtributosGenerales
	SET Descripcion = @pDescripcion,
		Tipo = @pTipo, EnGrilla = @pEnGrilla
	WHERE (AtributoNro = @pAtributoNro) AND (Tabla_Id = @pTabla_Id)
END 
ELSE 
BEGIN 
	INSERT INTO genAtributosGenerales
	(
		AtributoNro,
		Tabla_Id,
		Descripcion,
		Tipo,
		EnGrilla
	)
	VALUES 
	(
		@pAtributoNro,
		@pTabla_Id,
		@pDescripcion,
		@pTipo,
		@pEnGrilla
	)
END 

GO

DROP PROCEDURE genAtributosGeneralesDatos
GO
CREATE PROCEDURE genAtributosGeneralesDatos
(
@pAtributoNro int,
@pTabla_Id varchar(60)
)
AS
SET NOCOUNT ON 

SELECT genAtributosGenerales.AtributoNro, genAtributosGenerales.Tabla_Id, genAtributosGenerales.Descripcion, genAtributosGenerales.Tipo,
genAtributosGenerales.EnGrilla
FROM genAtributosGenerales 
WHERE AtributoNro = @pAtributoNro
AND Tabla_Id = @pTabla_Id 
 
RETURN @@Error 

GO

DROP PROCEDURE genAtributosGeneralesEliminar
GO
CREATE PROCEDURE genAtributosGeneralesEliminar
(
@pAtributoNro int = NULL,
@pTabla_Id varchar(60) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM genAtributosGenerales 
WHERE (AtributoNro = ISNULL(@pAtributoNro, AtributoNro))
AND (Tabla_Id = ISNULL(@pTabla_Id, Tabla_Id))
 
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genAtributosGeneralesIdentityDatos.sql*/
DROP procedure genAtributosGeneralesIdentityDatos
GO
Create procedure genAtributosGeneralesIdentityDatos
(
@pIdentity bigint, 
@pTabla varchar(60)
)
As
Select genAtributosGenerales.AtributoNro, genAtributosGenerales.Descripcion,
   genAtributosValores.ValorN, genAtributosValores.ValorC, genAtributosValores.ValorF, genAtributosGenerales.Tipo
FROM genAtributosGenerales 
LEFT OUTER JOIN genAtributosValores ON 
   genAtributosGenerales.Tabla_Id = genAtributosValores.Tabla_Id and 
   genAtributosGenerales.AtributoNro = genAtributosValores.AtributoNro and 
    genAtributosValores.Identity_id = @pIdentity 
WHERE
   genAtributosGenerales.Tabla_Id = @pTabla --And genAtributosGenerales.EnGrilla = 1
Order by 1
RETURN @@Error 

GO


DROP procedure genAtributosGeneralesIdentityEspDatos
GO
Create procedure genAtributosGeneralesIdentityEspDatos
(
@pIdentity bigint, 
@pTabla varchar(60)
)
As
Select genAtributosGenerales.AtributoNro, genAtributosGenerales.Descripcion,
   genAtributosValores.ValorN, genAtributosValores.ValorC, genAtributosValores.ValorF, genAtributosGenerales.Tipo
FROM genAtributosGenerales 
LEFT OUTER JOIN genAtributosValores ON 
   genAtributosGenerales.Tabla_Id = genAtributosValores.Tabla_Id and 
   genAtributosGenerales.AtributoNro = genAtributosValores.AtributoNro and 
    genAtributosValores.Identity_id = @pIdentity 
WHERE
   genAtributosGenerales.Tabla_Id = @pTabla And genAtributosGenerales.EnGrilla = 0
Order by 1
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genAtributosGeneralesXLS.sql*/
drop procedure genAtributosValoresXLSGuardar
go
create procedure genAtributosValoresXLSGuardar
(
    @pClave_Id varchar(100),
    @pAtributoNro int,
    @pTabla_Id varchar(100),
    @pValorC varchar(255)=null,
    @pValorF varchar(10)=null,
    @pValorN int=null
)
as

declare @sp NVARCHAR(max)= 'if exists(select 1 from genAtributosValores 
where Tabla_Id='''+@pTabla_Id+''' and  Identity_Id = dbo.FuncFK'+@pTabla_Id+'('''+@pClave_Id+''') and AtributoNro='+
str(@pAtributoNro)+') 
begin 
update genAtributosValores set ValorC='''+isnull(@pValorC,'')+''', ValorF='+case when @pValorF is null then 'null'
 else +''''+ @pValorF+''' ' end+ ', ValorN='+isnull(str(@pValorN),'null')+' 
where Tabla_Id='''+@pTabla_Id+''' and Identity_Id= dbo.FuncFK'+@pTabla_Id+'('''+@pClave_Id+''') and AtributoNro='+
str(@pAtributoNro)+'
END 
ELSE 
begin 
insert into genAtributosValores (Identity_Id, AtributoNro, Tabla_Id, ValorC, ValorF, ValorN) values (
    dbo.FuncFK'+@pTabla_Id+'('''+
@pClave_Id+'''), '+str(@pAtributoNro)+', '''+@pTabla_Id+''', '''+isnull(@pValorC,'null')+''','+
case when @pValorF is null then 'null' else +''''+ @pValorF+''' 'end +','+isnull(str(@pValorN),'null')
+') 
end'

--print @sp
exec sp_executesql @sp
go

drop procedure genAtributosValoresXLSValidaClave
go
create procedure genAtributosValoresXLSValidaClave
(
    @pClave_Id varchar(100),
    @pAtributoNro int,
    @pTabla_Id varchar(100)
)
as

declare @sp NVARCHAR(max)= 'select 1 as Verificado from '+ @pTabla_Id+ ' where '+ @pTabla_Id+'.'+@pTabla_Id+ '=dbo.FuncFK'+@pTabla_Id+'('''+ @pClave_Id+''')'

exec sp_executesql @sp
select * from genAtributosGenerales where Tabla_Id=@pTabla_Id and AtributoNro=@pAtributoNro
go



drop  procedure genAtributosValoresXLS
go
create procedure genAtributosValoresXLS
(
    @pTabla_Id varchar(100)
)
as
select '' as Upload
select name as Funcion, type from sys.all_objects where name = 'FuncFK'+@pTabla_Id and type='FN'
select name as Tabla, type from sys.all_objects where name=@pTabla_Id and type='U'
go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genAtributosProvincia.sql*/
Drop procedure genAtributosProvinciaDatos
Go
Create procedure genAtributosProvinciaDatos
(
@pProvinciaC varChar(35),
@pProvinciaN int = Null,
@pAtributoNro Int = Null
)
As
Select '' ProvinciaC, 0 ProvinciaN, 0 AtributoNro, genProvincias.Provincia_Id, genProvincias.Descripcion DescripcionProvincia
From genAtributosValores
Inner Join genProvincias On genProvincias.genProvincias = genAtributosValores.Identity_Id
Where Tabla_Id = 'genProvincias' And  genAtributosValores.AtributoNro = @pAtributoNro And 
	(@pProvinciaC Is Null Or ValorC = @pProvinciaC) And (@pProvinciaN Is Null Or ValorN = ValorN)
Go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genAtributosValores.sql*/
DROP PROCEDURE genAtributosValoresGuardar
GO
CREATE PROCEDURE genAtributosValoresGuardar
(
@pIdentity_Id bigint,
@pAtributoNro int,
@pTabla_Id varchar(60),
@pValorN numeric(28,8) = NULL,
@pValorC varchar(255) = NULL,
@pValorF datetime = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genAtributosValores WHERE (Identity_Id = @pIdentity_Id) AND (AtributoNro = @pAtributoNro) AND (Tabla_Id = @pTabla_Id)))
BEGIN 
	UPDATE genAtributosValores
	SET		ValorN = @pValorN,
		ValorC = @pValorC,
		ValorF = @pValorF
	WHERE (Identity_Id = @pIdentity_Id) AND (AtributoNro = @pAtributoNro) AND (Tabla_Id = @pTabla_Id)
END 
ELSE 
BEGIN 
	INSERT INTO genAtributosValores
	(
		Identity_Id,
		AtributoNro,
		Tabla_Id,
		ValorN,
		ValorC,
		ValorF
	)
	VALUES 
	(
		@pIdentity_Id,
		@pAtributoNro,
		@pTabla_Id,
		@pValorN,
		@pValorC,
		@pValorF
	)
END 

GO

DROP PROCEDURE genAtributosValoresDatos
GO
CREATE PROCEDURE genAtributosValoresDatos
(
@pIdentity_Id bigint,
@pAtributoNro int,
@pTabla_Id varchar(60)
)
AS
SET NOCOUNT ON 

SELECT genAtributosValores.Identity_Id, genAtributosValores.AtributoNro, genAtributosValores.Tabla_Id, 
	genAtributosGenerales.Descripcion as DescripcionAtributosGenerales,
	genAtributosGenerales.Tipo,
	genAtributosValores.ValorN, genAtributosValores.ValorC, genAtributosValores.ValorF
FROM genAtributosValores 
INNER JOIN genAtributosGenerales  ON (genAtributosGenerales.AtributoNro = genAtributosValores.AtributoNro) AND (genAtributosGenerales.Tabla_Id = genAtributosValores.Tabla_Id)
WHERE (Identity_Id = @pIdentity_Id)
AND (genAtributosValores.AtributoNro = @pAtributoNro)
AND (genAtributosValores.Tabla_Id = @pTabla_Id)
 
 RETURN @@Error 
GO

DROP PROCEDURE genAtributosValoresEliminar
GO
CREATE PROCEDURE genAtributosValoresEliminar
(
@pIdentity_Id bigint,
@pAtributoNro int=null,
@pTabla_Id varchar(60)
)
AS
SET NOCOUNT ON 

DELETE FROM genAtributosValores 
WHERE Identity_Id = @pIdentity_Id
AND AtributoNro = ISNULL(@pAtributoNro,AtributoNro)
AND Tabla_Id = @pTabla_Id
 
 RETURN @@Error 

GO

DROP PROCEDURE genAtributosValoresValores
GO
CREATE PROCEDURE genAtributosValoresValores
(
@pAtributoNro int,
@pTabla_Id varchar(60)
)
AS
SET NOCOUNT ON 

SELECT genAtributosValores.Identity_Id, genAtributosValores.AtributoNro, genAtributosValores.Tabla_Id, 
	genAtributosGenerales.Descripcion as DescripcionAtributosGenerales,
	genAtributosGenerales.Tipo,
	genAtributosValores.ValorN, genAtributosValores.ValorC, genAtributosValores.ValorF
FROM genAtributosValores 
INNER JOIN genAtributosGenerales  ON (genAtributosGenerales.AtributoNro = genAtributosValores.AtributoNro) AND (genAtributosGenerales.Tabla_Id = genAtributosValores.Tabla_Id)
WHERE (genAtributosValores.AtributoNro = @pAtributoNro)
AND (genAtributosValores.Tabla_Id = @pTabla_Id)
 
RETURN @@Error 
GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genAtributosValoresAudit.sql*/
DROP PROCEDURE genAtributosValoresAuditFechaDatos
GO
CREATE PROCEDURE genAtributosValoresAuditFechaDatos
(
@pIdentity_Id bigint,
@pAtributoNro int,
@pTabla_Id varchar(60),
@pFecha datetime
)
AS
SET NOCOUNT ON 

SELECT genAtributosValoresAudit.Identity_Id, genAtributosValoresAudit.AtributoNro, genAtributosValoresAudit.Tabla_Id, genAtributosValoresAudit.FechaDesde Fecha,
	genAtributosValoresAudit.FechaDesde, genAtributosValoresAudit.FechaHasta, genAtributosValoresAudit.ValorN, genAtributosValoresAudit.ValorC, genAtributosValoresAudit.ValorF
FROM genAtributosValoresAudit 
WHERE (Identity_Id = @pIdentity_Id)
AND (AtributoNro = @pAtributoNro)
AND (Tabla_Id = @pTabla_Id)
AND (@pFecha Between FechaDesde And FechaHasta)
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genAtriGralesClases.sql*/
DROP PROCEDURE genAtriGralesClasesDatos
GO
CREATE PROCEDURE genAtriGralesClasesDatos
(
@pTabla_Id varchar(60)
)
AS
SET NOCOUNT ON 

SELECT genAtriGralesClases.Tabla_Id, genAtriGralesClases.Descripcion
FROM genAtriGralesClases 
WHERE genAtriGralesClases.Tabla_Id = @pTabla_Id

SELECT genAtributosGenerales.AtributoNro, genAtributosGenerales.Tabla_Id, 
genAtributosGenerales.Descripcion, genAtributosGenerales.Tipo, genAtributosGenerales.EnGrilla
FROM genAtriGralesClases 
INNER JOIN genAtributosGenerales ON genAtributosGenerales.Tabla_Id = genAtriGralesClases.Tabla_Id
WHERE genAtributosGenerales.Tabla_Id = @pTabla_Id
ORDER BY 1 
RETURN @@Error 
GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genCancMov.sql*/
DROP PROCEDURE genCancMovGuardar
GO
CREATE PROCEDURE genCancMovGuardar
(
@pAsiento_Id bigint,
@pCuotaNro smallint,
@pAsiento_Id_Ap bigint,
@pCuotaNro_Ap smallint,
@pUsuario_Id int,
@pFechaAplicacion qFecha,
@pImporte qMonedaD2, 
@pImporte_Ap qMonedaD2, 
@pAsientoApli_Id bigint = NULL, 
@pImportacion bit, 
@pAsieDifCambio_Id bigint = NULL, 
@pEsVentaContado Bit, 
@pEsAplicOriginal Bit

)
AS
SET NOCOUNT ON 
DECLARE @pNroAplicacion int = ISNULL((SELECT Max(NroAplicacion) FROM genCancMov 
		WHERE (Asiento_Id = @pAsiento_Id) AND 
			(CuotaNro = @pCuotaNro) AND 
			(Asiento_Id_Ap = @pAsiento_Id_Ap) AND 
			(CuotaNro_Ap = @pCuotaNro_Ap)),0)+1

BEGIN 
	INSERT INTO genCancMov
	(
		Asiento_Id,
		CuotaNro,
		Asiento_Id_Ap,
		CuotaNro_Ap,
		NroAplicacion, 
		Usuario_Id,
		FechaAplicacion,
		Importe, 
		Importe_Ap, 
		AsientoApli_Id, 
		Importacion,
		AsieDifCambio_Id, 
		EsVentaContado, 
		EsAplicOriginal
	)
	VALUES 
	(
		@pAsiento_Id,
		@pCuotaNro,
		@pAsiento_Id_Ap,
		@pCuotaNro_Ap,
		@pNroAplicacion, 
		@pUsuario_Id,
		@pFechaAplicacion,
		@pImporte, 
		@pImporte_Ap,
		@pAsientoApli_Id, 
		@pImportacion, 
		@pAsieDifCambio_Id, 
		@pEsVentaContado, 
		@pEsAplicOriginal
	)
END 

GO

DROP PROCEDURE genCancMovDatos
GO
CREATE PROCEDURE genCancMovDatos
(
@pAsiento_Id bigint=null,
@pCuotaNro smallint=null,
@pAsiento_Id_Ap bigint=null,
@pCuotaNro_Ap smallint=null, 
@pCambio	QMonedaD8,
@pCambio_ap QMonedaD8,
@pImportacion bit
)
AS
SET NOCOUNT ON 

SELECT @pAsiento_Id as Asiento_Id, @pCuotaNro as CuotaNro , @pAsiento_Id_Ap as Asiento_Id_Ap,
		@pCuotaNro_Ap  as CuotaNro_Ap, @pCambio as Cambio, @pCambio_Ap as Cambio_Ap, 
		@pImportacion as Importacion, Cast(0 As Bit) EsVentaContado, Cast(0 As Bit) EsAplicOriginal, Cast(0 As Bit) LlamarAlWS


SELECT Mov.Empresa_Id, Mov.Segmento1N, Mov.Segmento2N,Mov.Segmento3N,Mov.Segmento4N,
	Mov.Segmento1C, Mov.Segmento2C,Mov.Segmento3C,Mov.Segmento4C,genCancMov.CuotaNro,
	Mov.Asiento_Id, 
	Mov_ap.Segmento1N Segmento1N_ap, Mov_ap.Segmento2N Segmento2N_ap,
	Mov_ap.Segmento3N Segmento3N_ap, Mov_ap.Segmento4N Segmento4N_ap,
	Mov_ap.Segmento1C Segmento1C_ap, Mov_ap.Segmento2C Segmento2C_ap,
	Mov_ap.Segmento3C Segmento3C_ap, Mov_ap.Segmento4C Segmento4C_ap, 
	Mov_Ap.Asiento_Id as Asiento_Id_Ap, genCancMov.CuotaNro_Ap, genCancMov.FechaAplicacion, genCancMov.Importe, genCancMov.Importe_ap,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, 
	dbo.Segmento(Mov.Segmento_Id, Mov.Segmento1C, Mov.Segmento2C, Mov.Segmento3C, Mov.Segmento4C,
		Mov.Segmento1N, Mov.Segmento2N, Mov.Segmento3N, Mov.Segmento4N) AS Segmento,
	dbo.Segmento(Mov_ap.Segmento_Id, Mov_ap.Segmento1C, Mov_ap.Segmento2C, Mov_ap.Segmento3C, Mov_ap.Segmento4C,
		Mov_ap.Segmento1N, Mov_ap.Segmento2N, Mov_ap.Segmento3N, Mov_ap.Segmento4N) AS Segmento_ap, 
	genCancMov.AsientoApli_Id, genCancMov.NroAplicacion as NroAplicacion, genCancMov.Importacion, 
	genCancMov.AsieDifCambio_Id
	--, genCancMov.EsVentaContado, genCancMov.EsAplicOriginal, SegMov.Segmento_Id, SegMov_Ap.Segmento_Id Segmento_Id_Ap
FROM genCancMov 
INNER JOIN genAsiSegmentos as Mov ON (Mov.Asiento_Id = genCancMov.Asiento_Id) 
INNER JOIN genAsiSegmentos as Mov_ap ON (Mov_ap.Asiento_Id = genCancMov.Asiento_Id_Ap) 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = genCancMov.Usuario_Id)
INNER JOIN conAsientos ON conAsientos.conAsientos = genCancMov.Asiento_Id
INNER JOIN conAsientos conAsientosAp on conAsientosAp.conAsientos = genCancMov.Asiento_Id_Ap
Inner Join genSegmentos SegMov On SegMov.genSegmentos = Mov.Segmento_Id
Inner Join genSegmentos SegMov_Ap On SegMov_Ap.genSegmentos = Mov_ap.Segmento_Id
WHERE 
conAsientos.Anulado = 0 and conAsientosAp.Anulado =0 and 
(genCancMov.Asiento_Id = ISNULL( @pAsiento_Id,genCancMov.Asiento_Id))
AND (genCancMov.CuotaNro = ISNULL(@pCuotaNro,genCancMov.CuotaNro))
AND (genCancMov.Asiento_Id_Ap = ISNULL(@pAsiento_Id_Ap,genCancMov.Asiento_Id_Ap))
AND (genCancMov.CuotaNro_Ap = ISNULL(@pCuotaNro_Ap,genCancMov.CuotaNro_Ap))
union ALL
SELECT Mov.Empresa_Id, Mov.Segmento1N, Mov.Segmento2N,Mov.Segmento3N,Mov.Segmento4N,
	Mov.Segmento1C, Mov.Segmento2C,Mov.Segmento3C,Mov.Segmento4C,genCancMov.CuotaNro,
	Mov.Asiento_Id,
	Mov_ap.Segmento1N Segmento1N_ap, Mov_ap.Segmento2N Segmento2N_ap,
	Mov_ap.Segmento3N Segmento3N_ap, Mov_ap.Segmento4N Segmento4N_ap,
	Mov_ap.Segmento1C Segmento1C_ap, Mov_ap.Segmento2C Segmento2C_ap,
	Mov_ap.Segmento3C Segmento3C_ap, Mov_ap.Segmento4C Segmento4C_ap,
	Mov_Ap.Asiento_Id as Asiento_Id_Ap, genCancMov.CuotaNro_Ap, 
	genCancMov.FechaAplicacion, genCancMov.Importe,genCancMov.Importe_ap,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, 
	dbo.Segmento(Mov.Segmento_Id, Mov.Segmento1C, Mov.Segmento2C, Mov.Segmento3C, Mov.Segmento4C,
		Mov.Segmento1N, Mov.Segmento2N, Mov.Segmento3N, Mov.Segmento4N) AS Segmento,
	dbo.Segmento(Mov_ap.Segmento_Id, Mov_ap.Segmento1C, Mov_ap.Segmento2C, Mov_ap.Segmento3C, Mov_ap.Segmento4C,
		Mov_ap.Segmento1N, Mov_ap.Segmento2N, Mov_ap.Segmento3N, Mov_ap.Segmento4N) AS Segmento_ap, 
		genCancMov.AsientoApli_Id,
		genCancMov.NroAplicacion as NroAplicacion, genCancMov.Importacion, 
		genCancMov.AsieDifCambio_Id
		-- , genCancMov.EsVentaContado, genCancMov.EsAplicOriginal, SegMov.Segmento_Id,  SegMov_Ap.Segmento_Id Segmento_Id_Ap,
FROM genCancMov 
INNER JOIN genAsiSegmentos as Mov ON (Mov.Asiento_Id = genCancMov.Asiento_Id) 
INNER JOIN genAsiSegmentos as Mov_ap ON (Mov_ap.Asiento_Id = genCancMov.Asiento_Id_Ap) 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = genCancMov.Usuario_Id)
INNER JOIN conAsientos ON conAsientos.conAsientos = genCancMov.Asiento_Id
INNER JOIN conAsientos conAsientosAp on conAsientosAp.conAsientos = genCancMov.Asiento_Id_Ap
Inner Join genSegmentos SegMov On SegMov.genSegmentos = Mov.Segmento_Id
Inner Join genSegmentos SegMov_Ap On SegMov_Ap.genSegmentos = Mov_ap.Segmento_Id
WHERE 
conAsientos.Anulado = 0 and conAsientosAp.Anulado =0 and 
(genCancMov.Asiento_Id = ISNULL( @pAsiento_Id_Ap,genCancMov.Asiento_Id))
AND (genCancMov.CuotaNro = ISNULL(@pCuotaNro_Ap,genCancMov.CuotaNro))
AND (genCancMov.Asiento_Id_Ap = ISNULL(@pAsiento_Id,genCancMov.Asiento_Id_Ap))
AND (genCancMov.CuotaNro_Ap = ISNULL(@pCuotaNro,genCancMov.CuotaNro_Ap))
-- and genCancMov.Importacion = @pImportacion
 
RETURN @@Error

GO

DROP PROCEDURE genCancMovEliminar
GO
CREATE PROCEDURE genCancMovEliminar
(
@pAsiento_Id bigint,
@pCuotaNro smallint,
@pAsiento_Id_Ap bigint,
@pCuotaNro_Ap smallint,
@pNroAplicacion int = NULL, 
@pImportacion bit
)
AS
SET NOCOUNT ON 

DELETE FROM genCancMov WHERE 
(Asiento_Id = @pAsiento_Id)
AND (CuotaNro = @pCuotaNro)
AND (Asiento_Id_Ap = @pAsiento_Id_Ap)
AND (CuotaNro_Ap = @pCuotaNro_Ap) 
AND (NroAplicacion= ISNULL(@pNroAplicacion,NroAplicacion))
and Importacion = @pImportacion
 
RETURN @@Error 


GO


DROP PROCEDURE genCancMovDatosRenglon
GO
CREATE PROCEDURE genCancMovDatosRenglon
(
@pAsiento_Id bigint,
@pCuotaNro smallint,
@pAsiento_Id_Ap bigint,
@pCuotaNro_Ap smallint,
@pNroAplicacion int
)
AS
SET NOCOUNT ON 

SELECT genCancMov.CuotaNro, genCancMov.Asiento_Id_Ap, genCancMov.CuotaNro_Ap, genCancMov.NroAplicacion,
	genCancMov.Usuario_Id, genCancMov.FechaAplicacion, genCancMov.Importe, genCancMov.Importe_Ap,
	genCancMov.AsientoApli_Id, genCancMov.Importacion, genCancMov.AsieDifCambio_Id, genCancMov.EsVentaContado,
	genCancMov.EsAplicOriginal
FROM genCancMov 
WHERE (Asiento_Id = @pAsiento_Id)
AND (CuotaNro = @pCuotaNro)
AND (Asiento_Id_Ap = @pAsiento_Id_Ap)
AND (CuotaNro_Ap = @pCuotaNro_Ap)
AND (NroAplicacion = @pNroAplicacion)
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genCancMovApliImpor.sql*/
DROP PROCEDURE genCancMovApliImporGuardar
GO
CREATE PROCEDURE genCancMovApliImporGuardar
(
@pconAsientos bigint,
@pRenglon int,
@pEsDelAp bit
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genCancMovApliImpor WHERE (conAsientos = @pconAsientos) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE genCancMovApliImpor
	SET		EsDelAp = @pEsDelAp
	WHERE (conAsientos = @pconAsientos) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO genCancMovApliImpor
	(
		conAsientos,
		Renglon,
		EsDelAp
	)
	VALUES 
	(
		@pconAsientos,
		@pRenglon,
		@pEsDelAp
	)
END 

GO

DROP PROCEDURE genCancMovApliImporDatos
GO
CREATE PROCEDURE genCancMovApliImporDatos
(
@pconAsientos bigint,
@pRenglon int=Null
)
AS
SET NOCOUNT ON 

SELECT genCancMovApliImpor.conAsientos, genCancMovApliImpor.Renglon, genCancMovApliImpor.EsDelAp
FROM genCancMovApliImpor 
WHERE (conAsientos = @pconAsientos)
AND (Renglon = ISNULL(@pRenglon,Renglon))
 
 RETURN @@Error 

GO

DROP PROCEDURE genCancMovApliImporEliminar
GO
CREATE PROCEDURE genCancMovApliImporEliminar
(
@pconAsientos bigint,
@pRenglon int=NULL
)
AS
SET NOCOUNT ON 

DELETE FROM genCancMovApliImpor 
WHERE (conAsientos = @pconAsientos)
AND (Renglon = ISNULL(@pRenglon,Renglon))
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genCancMovCont.sql*/
DROP PROCEDURE genCancMovContGuardar
GO
CREATE PROCEDURE genCancMovContGuardar
(
@pAsiento_Id bigint,
@pCuotaNro smallint,
@pAsiento_Id_Ap bigint,
@pCuotaNro_Ap smallint,
@pAsiento_Aplicacion bigint
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genCancMovCont WHERE (Asiento_Id = @pAsiento_Id) AND (CuotaNro = @pCuotaNro) AND (Asiento_Id_Ap = @pAsiento_Id_Ap) AND (CuotaNro_Ap = @pCuotaNro_Ap)))
BEGIN 
	UPDATE genCancMovCont
	SET		Asiento_Aplicacion = @pAsiento_Aplicacion
	WHERE (Asiento_Id = @pAsiento_Id) AND (CuotaNro = @pCuotaNro) AND (Asiento_Id_Ap = @pAsiento_Id_Ap) AND (CuotaNro_Ap = @pCuotaNro_Ap)
END 
ELSE 
BEGIN 
	INSERT INTO genCancMovCont
	(
		Asiento_Id,
		CuotaNro,
		Asiento_Id_Ap,
		CuotaNro_Ap,
		Asiento_Aplicacion
	)
	VALUES 
	(
		@pAsiento_Id,
		@pCuotaNro,
		@pAsiento_Id_Ap,
		@pCuotaNro_Ap,
		@pAsiento_Aplicacion
	)
END 

GO

DROP PROCEDURE genCancMovContDatos
GO
CREATE PROCEDURE genCancMovContDatos
(
@pAsiento_Id bigint,
@pCuotaNro smallint,
@pAsiento_Id_Ap bigint,
@pCuotaNro_Ap smallint
)
AS
SET NOCOUNT ON 

DECLARE @pAsiento_Aplicacion bigint

SET @pAsiento_Aplicacion = (SELECT  Asiento_Aplicacion FROM genCancMovCont where
	(genCancMovCont.Asiento_Id = @pAsiento_Id) and 
	(genCancMovCont.CuotaNro = @pCuotaNro) and 
	(genCancMovCont.Asiento_Id_Ap = @pAsiento_Id_Ap) and 
	(genCancMovCont.CuotaNro_Ap = @pCuotaNro_Ap))

Exec conAsientosDatos_Private @pAsiento_Aplicacion

RETURN @@Error 

GO

DROP PROCEDURE genCancMovContEliminar
GO
CREATE PROCEDURE genCancMovContEliminar
(
@pAsiento_Id bigint,
@pCuotaNro smallint,
@pAsiento_Id_Ap bigint,
@pCuotaNro_Ap smallint
)
AS
SET NOCOUNT ON 

DELETE FROM genCancMovCont 
WHERE (Asiento_Id = @pAsiento_Id)
AND (CuotaNro = @pCuotaNro)
AND (Asiento_Id_Ap = @pAsiento_Id_Ap)
AND (CuotaNro_Ap = @pCuotaNro_Ap)
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genCancMovCuentaDatos.sql*/

DROP PROCEDURE genCancMovCuentaDatos
GO
CREATE PROCEDURE genCancMovCuentaDatos (
	@pconAsientos bigint
)

AS

SELECT conAsientos.conAsientos, conCuentas.Cuenta_Id, 
	conCuentas.Descripcion, conMovCont.Clase, 
		conMovCont.TipoMov, genMonedas.Moneda_Id, 
		conAsientos.Cambio,conMovCont.Importe, conMovCont.ImporteMonedaOriginal
From conAsientos INNER JOIN conMovCont ON
	conAsientos.conAsientos = conMovCont.conAsientos
	INNER JOIN conCuentas ON
	conCuentas.conCuentas = conMovCont.Cuenta_Id
	INNER JOIN genMonedas ON
	genMonedas.genMonedas = conCuentas.Moneda_Id
	Where
		conAsientos.conAsientos = @pconAsientos and
		conMovCont.Clase in ('PRO','CLI','ANTPR','ANTCL')
GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genCancSaldosCuenta.sql*/
--genCancSaldosCuenta 27872, 30122
DROP Procedure genCancSaldosCuenta
GO
Create Procedure genCancSaldosCuenta(
	@pAsiento_Id BigInt, 
	@pAsiento_Id_ap BigInt
)
as

SELECT conAsientos.conAsientos as Asiento_Id,  conAsientos.Cambio, conAsientos.Fecha,
	genMonedas.Moneda_Id,
	conAsientosAp.conAsientos as Asiento_Id_Ap, conAsientosAp.Cambio as CambioAp, 
		conAsientosAp.Fecha as FechaAp, genMonedasAP.Moneda_Id AS Moneda_IdAP
From conAsientos INNER JOIN genMonedas ON conAsientos.Moneda_Id = genMonedas.genMonedas
	cross join (
	conAsientos conAsientosAP INNER JOIN genMonedas  genMonedasAP ON
		conAsientosAP.Moneda_Id = genMonedasAP.genMonedas) 
WHERE
	conAsientos.conAsientos = @pAsiento_Id and
	conAsientosAp.conAsientos = @pAsiento_Id_ap

-- Cuentas del pago actual si es proveedores o la factura actual si es cliente --
SELECT Cuenta_Id, Clase, SUM(Monto) as Monto, 
	SUM(MontoOriginal) as MontoOriginal
FROM(
SELECT conCuentas.Cuenta_Id, conMovCont.Clase, 
	(conMovCont.Importe*(-2*conmovCont.TipoMov+3)) as Monto,
	(conMovCont.ImporteMonedaOriginal*(-2*conmovCont.TipoMov+3)) as MontoOriginal
FROM conAsientos 
	INNER JOIN conMovCont ON conAsientos.conAsientos = conMovCont.conAsientos
	INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
	Where
		conAsientos.conAsientos = @pAsiento_Id and
		conAsientos.Anulado = 0 AND 
		conMovCont.Clase in ('ANTPR','ANTCL', 'CLI','PRO')
UNION ALL
-- Factura actual si es proveedores o cobranza actual si es cliente --
SELECT conCuentas.Cuenta_Id, conMovCont.Clase, 
	(conMovCont.Importe*(-2*conmovCont.TipoMov+3)) as Monto,
	(conMovCont.ImporteMonedaOriginal*(-2*conmovCont.TipoMov+3)) as MontoOriginal
FROM conAsientos 
	INNER JOIN conMovCont ON conAsientos.conAsientos = conMovCont.conAsientos
	INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
	Where
		conAsientos.conAsientos = @pAsiento_Id_AP and
		conAsientos.Anulado = 0 AND 
		conMovCont.Clase in ('ANTPR','ANTCL', 'CLI','PRO')

-- APLICACIONES ANTERIORES DE AP
UNION ALL
SELECT conCuentas.Cuenta_Id, conMovCont.Clase, 
	(conMovCont.Importe*(-2*conmovCont.TipoMov+3)) as Monto,
	(conMovCont.ImporteMonedaOriginal*(-2*conmovCont.TipoMov+3)) as MontoOriginal
FROM genCancMov 
	INNER JOIN conAsientos ON genCancMov.AsientoApli_Id =  conAsientos.conAsientos 
	INNER JOIN conMovCont  ON conAsientos.conAsientos = conMovCont.conAsientos
	INNER JOIN conCuentas  ON conCuentas.conCuentas = conMovCont.Cuenta_Id
	Where
		genCancMov.Asiento_Id = @pAsiento_Id and
		conAsientos.Anulado = 0 AND 
		conMovCont.Clase in ('ANTPR','ANTCL', 'CLI','PRO')
UNION ALL
SELECT conCuentas.Cuenta_Id, conMovCont.Clase, 
	(conMovCont.Importe*(-2*conmovCont.TipoMov+3)) as Monto,
	(conMovCont.ImporteMonedaOriginal*(-2*conmovCont.TipoMov+3)) as MontoOriginal
FROM genCancMov 
	INNER JOIN conAsientos ON genCancMov.AsientoApli_Id =  conAsientos.conAsientos 
	INNER JOIN conMovCont  ON conAsientos.conAsientos = conMovCont.conAsientos
	INNER JOIN conCuentas  ON conCuentas.conCuentas = conMovCont.Cuenta_Id
	Where
		genCancMov.Asiento_Id_Ap = @pAsiento_Id_AP and
		conAsientos.Anulado = 0 AND 
		conMovCont.Clase in ('ANTPR','ANTCL', 'CLI','PRO')

-- APLICACIONES ANTERIORES ASIENTO_ID
-- aca agregue que busque en aplicaciones anteriores lo que ya se fue a cada cuenta
UNION ALL
SELECT conCuentas.Cuenta_Id, conMovCont.Clase, 
(genCancMov.Importe*(-2*conmovCont.TipoMov+3)*conAsientos.Cambio) as Monto,
	(genCancMov.Importe*(-2*conmovCont.TipoMov+3)) as MontoOriginal
FROM genCancMov 
	INNER JOIN conAsientos ON genCancMov.Asiento_Id =  conAsientos.conAsientos 
	INNER JOIN conMovCont  ON conAsientos.conAsientos = conMovCont.conAsientos
	INNER JOIN conCuentas  ON conCuentas.conCuentas = conMovCont.Cuenta_Id
	Where
		genCancMov.Asiento_Id_Ap = @pAsiento_Id and
		conAsientos.Anulado = 0 AND 
		conMovCont.Clase in ('ANTPR','ANTCL', 'CLI','PRO')
UNION ALL
SELECT conCuentas.Cuenta_Id, conMovCont.Clase, 
	(genCancMov.Importe*(-2*conmovCont.TipoMov+3)*conAsientos.Cambio) as Monto,
	(genCancMov.Importe*(-2*conmovCont.TipoMov+3)) as MontoOriginal
FROM genCancMov 
	INNER JOIN conAsientos ON genCancMov.Asiento_Id_AP =  conAsientos.conAsientos 
	INNER JOIN conMovCont  ON conAsientos.conAsientos = conMovCont.conAsientos
	INNER JOIN conCuentas  ON conCuentas.conCuentas = conMovCont.Cuenta_Id
	Where
		genCancMov.Asiento_Id = @pAsiento_Id and
		conAsientos.Anulado = 0 AND 
		conMovCont.Clase in ('ANTPR','ANTCL', 'CLI','PRO')
-- fin aca agregue que busque en aplicaciones anteriores lo que ya se fue a cada cuenta

UNION ALL 
-- OTRAS APLICACIONES
-- tomo la parte proprocional por si aplico otros comprobantes
SELECT conCuentas.Cuenta_Id, conMovCont.Clase, 
	(conMovCont.Importe*(-2*conmovCont.TipoMov+3)) * genCancMov.Importe  / (SELECT SUM(genMovCuotas.Importe) 
		FROM genMovCuotas 
		WHERE
			genMovCuotas.Asiento_Id = genCancMov.Asiento_Id_ap ) 	as Monto,
	(conMovCont.ImporteMonedaOriginal*(-2*conmovCont.TipoMov+3)) * genCancMov.Importe / (SELECT SUM(genMovCuotas.Importe) 
		FROM genMovCuotas
		WHERE
			genMovCuotas.Asiento_Id = genCancMov.Asiento_Id_ap )  	as MontoOriginal
FROM conAsientos 
	INNER JOIN conMovCont ON conAsientos.conAsientos = conMovCont.conAsientos
	INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
	INNER JOIN genCancMov ON genCancMov.Asiento_Id = conAsientos.conAsientos
	INNER JOIN conasientos conAsientos2 ON genCancMov.Asiento_Id_AP = conAsientos2.conAsientos
	Where
		genCancMov.Asiento_Id = @pAsiento_Id  AND
		conAsientos.Anulado = 0 AND 
		conAsientos2.Anulado = 0 AND 
		conAsientos.Posteado = 1 AND 
		conAsientos2.Posteado = 1 AND 
		conMovCont.Clase in ('ANTPR','ANTCL', 'CLI','PRO')
union all
SELECT conCuentas.Cuenta_Id, conMovCont.Clase, 
	(conMovCont.Importe*(-2*conmovCont.TipoMov+3)) * genCancMov.Importe  / (SELECT SUM(genMovCuotas.Importe) 
		FROM genMovCuotas
		WHERE
			genMovCuotas.Asiento_Id = genCancMov.Asiento_Id ) 	as Monto,
	(conMovCont.ImporteMonedaOriginal*(-2*conmovCont.TipoMov+3)) * genCancMov.Importe / (SELECT SUM(genMovCuotas.Importe) 
		FROM genMovCuotas
		WHERE
			genMovCuotas.Asiento_Id = genCancMov.Asiento_Id )  	as MontoOriginal
FROM conAsientos 
	INNER JOIN conMovCont ON conAsientos.conAsientos = conMovCont.conAsientos
	INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
	INNER JOIN genCancMov ON genCancMov.Asiento_Id = conAsientos.conAsientos
	INNER JOIN conasientos conAsientos2 ON genCancMov.Asiento_Id_AP = conAsientos2.conAsientos
	Where
		genCancMov.Asiento_Id_ap = @pAsiento_Id_ap  AND
		conAsientos.Anulado = 0 AND 
		conAsientos2.Anulado = 0 AND 
		conAsientos.Posteado = 1 AND 
		conAsientos2.Posteado = 1 AND 
		conMovCont.Clase in ('ANTPR','ANTCL', 'CLI','PRO')

		
UNION ALL
-- Diferencias en Cambio
SELECT conCuentas.Cuenta_Id, conMovCont.Clase, 
	(conMovCont.Importe*(-2*conmovCont.TipoMov+3)) as Monto,
	(conMovCont.ImporteMonedaOriginal*(-2*conmovCont.TipoMov+3)) as MontoOrignal
FROM conAsientos 
	INNER JOIN conMovCont ON conAsientos.conAsientos = conMovCont.conAsientos
	INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
	INNER JOIN genCancMov ON genCancMov.AsieDifCambio_Id = conAsientos.conAsientos
	Where
		(genCancMov.Asiento_Id In( @pAsiento_Id, @pAsiento_Id_AP)  or
		genCancMov.Asiento_Id_Ap In( @pAsiento_Id, @pAsiento_Id_AP) ) and
		conAsientos.Anulado = 0 AND 
		conMovCont.Clase in ('ANTPR','ANTCL', 'CLI','PRO')
) AS XXX
GROUP BY Cuenta_Id, Clase
HAVING SUM(MontoOriginal) <> 0 or SUM(Monto) <> 0
ORDER BY 1

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genCertificados.sql*/
--genCertificadosDatos 1
DROP PROCEDURE genCertificadosDatos
GO
CREATE PROCEDURE genCertificadosDatos
(
	@Empresa_Id int
)
AS
	
SELECT (SELECT cValor  FROM genGlobales where
	Nombre_Var = 'VENNOCERTIFICADO' AND Empresa_Id = genEmpresas.genEmpresas ) AS NoCertificado,
(SELECT mValor  FROM genGlobales where
	Nombre_Var = 'GENWSAAPRIVATEKEY' AND Empresa_Id = genEmpresas.genEmpresas ) AS GENWSAAPRIVATEKEY,
(SELECT mValor  FROM genGlobales where
	Nombre_Var = 'GENWSAAPUBLICKEY' AND Empresa_Id = genEmpresas.genEmpresas ) AS GENWSAAPUBLICKEY, 
' ' ClavePubKey  , 
' ' as ArchivoKey, ' ' as ArchivoCer,
(SELECT cValor  FROM genGlobales where
	Nombre_Var = 'VENPAC' AND Empresa_Id = genEmpresas.genEmpresas ) AS VENPAC, 
(SELECT cValor  FROM genGlobales where
	Nombre_Var = 'VENCLAVEPAC' AND Empresa_Id = genEmpresas.genEmpresas ) AS VENCLAVEPAC,
(SELECT cValor  FROM genGlobales where
	Nombre_Var = 'VENUSUARIOPAC' AND Empresa_Id = genEmpresas.genEmpresas ) AS VENUSUARIOPAC,
(SELECT cValor  FROM genGlobales where
	Nombre_Var = 'VENCLAVEPACCANC' AND Empresa_Id = genEmpresas.genEmpresas ) AS VENCLAVEPACCANC,
(SELECT cValor  FROM genGlobales where
	Nombre_Var = 'VENUSUARIOPACANC' AND Empresa_Id = genEmpresas.genEmpresas ) AS VENUSUARIOPACANC,
(SELECT cValor  FROM genGlobales where
	Nombre_Var = 'EMPDIRPDFFACT' AND Empresa_Id = genEmpresas.genEmpresas ) AS EMPDIRPDFFACT,
cast((SELECT nValor  FROM genGlobales where
	Nombre_Var = 'VENLLAMAPAC' AND Empresa_Id = genEmpresas.genEmpresas ) as Bit) AS VENLLAMAPAC,
(SELECT cValor  FROM genGlobales where
	Nombre_Var = 'CLAVEPRIVATEKEY' AND Empresa_Id = genEmpresas.genEmpresas ) AS CLAVEPRIVATEKEY,
(SELECT cValor  FROM genGlobales where
	Nombre_Var = 'VENCLAPFXCANC' AND Empresa_Id = genEmpresas.genEmpresas ) AS VENCLAPFXCANC,
CAST((SELECT nValor  FROM genGlobales where
	Nombre_Var = 'VENCANCCONTRA' AND Empresa_Id = genEmpresas.genEmpresas ) AS Bit) AS VENCANCCONTRA
	
FROM genEmpresas 
where 
genEmpresas.genEmpresas = @Empresa_Id

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genCertificadosFeAr.sql*/
DROP PROCEDURE genCertificadosFeArDatos
GO
CREATE PROCEDURE genCertificadosFeArDatos
(
	@Empresa_Id int
) AS
SELECT (SELECT mValor  FROM genGlobales where
	Nombre_Var = 'GENWSAAPRIVATEKEY' AND Empresa_Id = genEmpresas.genEmpresas ) AS GENWSAAPRIVATEKEY,
(SELECT mValor  FROM genGlobales where
	Nombre_Var = 'GENWSAAPUBLICKEY' AND Empresa_Id = genEmpresas.genEmpresas ) AS GENWSAAPUBLICKEY, 
(SELECT cValor  FROM genGlobales where
	Nombre_Var = 'EMPDIRPDFFACT' AND Empresa_Id = genEmpresas.genEmpresas ) AS EMPDIRPDFFACT,
(SELECT fValor  FROM genGlobales where
	Nombre_Var = 'GENWSFECHAVENC' AND Empresa_Id = genEmpresas.genEmpresas ) AS GENWSFECHAVENC

FROM genEmpresas 
WHERE
genEmpresas.genEmpresas = @Empresa_Id
GO







Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genClavesComunes.sql*/
DROP PROCEDURE genClavesComunesDatos
GO

CREATE PROCEDURE genClavesComunesDatos
(
	@Clave VarChar(50)
)
AS

SELECT Clave from genClavesComunes WHERE Clave = @Clave

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genContadorSegmento.sql*/

DROP PROCEDURE genContadorSegmentoGuardar
GO
CREATE PROCEDURE genContadorSegmentoGuardar
(
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pSegmento_Id VarChar(10),
@pEmpresa_Id int,
@pPrimerNumero int ,
@pCai varChar(20),
@pFechaCai qFecha=Null,
@pNumeroDesde int,
@pNumeroHasta int,
@pFechaAutoSRI qFecha=Null,
@pFechaDesde qFecha=Null,
@pUsuario_Id int, 
@pTieneColumnaAutomatica bit
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genContadorSegmento WHERE
	Empresa_Id = @pEmpresa_Id and 
  (Segmento2N = @pSegmento2N) AND
 (Segmento3N = @pSegmento3N) AND (Segmento4N = @pSegmento4N) AND (Segmento1C = @pSegmento1C) AND 
 (Segmento2C = @pSegmento2C) AND (Segmento3C = @pSegmento3C) AND (Segmento4C = @pSegmento4C) AND 
 (Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)))) 
BEGIN 
	UPDATE genContadorSegmento
	SET		PrimerNumero = @pPrimerNumero ,
			Cai = @pCai ,
			FechaCai = @pFechaCai ,
			NumeroDesde = @pNumeroDesde ,
			NumeroHasta = @pNumeroHasta ,
			FechaAutoSRI = @pFechaAutoSRI ,
			FechaDesde = @pFechaDesde ,
		    Usuario_Id = @pUsuario_Id,
			TieneColumnaAutomatica = @pTieneColumnaAutomatica

	WHERE 
	Empresa_Id = @pEmpresa_Id and 
	(Segmento2N = @pSegmento2N) AND (Segmento3N = @pSegmento3N) AND (Segmento4N = @pSegmento4N) AND 
	(Segmento1C = @pSegmento1C) AND (Segmento2C = @pSegmento2C) AND (Segmento3C = @pSegmento3C) AND 
	(Segmento4C = @pSegmento4C) AND (Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id))
END 
ELSE 
BEGIN 
	INSERT INTO genContadorSegmento
	(
		Segmento2N,
		Segmento3N,
		Segmento4N,
		Segmento1C,
		Segmento2C,
		Segmento3C,
		Segmento4C,
		Segmento_Id,
		PrimerNumero  ,
		Cai ,
		FechaCai ,
		NumeroDesde ,
		NumeroHasta ,
		FechaAutoSRI ,
		FechaDesde ,
		Usuario_Id,
		Empresa_Id, 
		TieneColumnaAutomatica
	)
	VALUES 
	(
		@pSegmento2N,
		@pSegmento3N,
		@pSegmento4N,
		@pSegmento1C,
		@pSegmento2C,
		@pSegmento3C,
		@pSegmento4C,
		dbo.FuncFKgenSegmentos(@pSegmento_Id),
		@pPrimerNumero  ,
		@pCai ,
		@pFechaCai ,
		@pNumeroDesde ,
		@pNumeroHasta ,
		@pFechaAutoSRI ,
		@pFechaDesde ,
		@pUsuario_Id,
		@pEmpresa_Id,
		@pTieneColumnaAutomatica
	)
END 

GO

DROP PROCEDURE genContadorSegmentoDatos
GO
CREATE PROCEDURE genContadorSegmentoDatos
(
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pSegmento_Id VarChar(10), 
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 

SELECT genContadorSegmento.Segmento2N, genContadorSegmento.Segmento3N, genContadorSegmento.Segmento4N, genContadorSegmento.Segmento1C,
	genContadorSegmento.Segmento2C, genContadorSegmento.Segmento3C, genContadorSegmento.Segmento4C, genSegmentos.Segmento_Id,
	genSegmentos.Descripcion as DescripcionSegmentos, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, genContadorSegmento.Empresa_Id,
	genContadorSegmento.PrimerNumero  , genContadorSegmento.Cai , genContadorSegmento.FechaCai ,
	genContadorSegmento.NumeroDesde , genContadorSegmento.NumeroHasta ,
	genContadorSegmento.FechaAutoSRI , genContadorSegmento.FechaDesde , genContadorSegmento.TieneColumnaAutomatica
FROM genContadorSegmento 
INNER JOIN genSegmentos  ON (genSegmentos.genSegmentos = genContadorSegmento.Segmento_Id)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = genContadorSegmento.Usuario_Id)
WHERE 
genContadorSegmento.Empresa_Id = @pEmpresa_Id
AND (genContadorSegmento.Segmento2N = @pSegmento2N)
AND (genContadorSegmento.Segmento3N = @pSegmento3N)
AND (genContadorSegmento.Segmento4N = @pSegmento4N)
AND (genContadorSegmento.Segmento1C = @pSegmento1C)
AND (genContadorSegmento.Segmento2C = @pSegmento2C)
AND (genContadorSegmento.Segmento3C = @pSegmento3C)
AND (genContadorSegmento.Segmento4C = @pSegmento4C)
AND (genContadorSegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id))

 
 RETURN @@Error 

GO

DROP PROCEDURE genContadorSegmentoEliminar
GO
CREATE PROCEDURE genContadorSegmentoEliminar
(
@pSegmento2N int = NULL,
@pSegmento3N int = NULL,
@pSegmento4N int = NULL,
@pSegmento1C varchar(20) = NULL,
@pSegmento2C varchar(20) = NULL,
@pSegmento3C varchar(20) = NULL,
@pSegmento4C varchar(20) = NULL,
@pSegmento_Id varchar(10)
)
AS
SET NOCOUNT ON 

DELETE FROM genContadorSegmento 
WHERE (Segmento2N = ISNULL(@pSegmento2N, Segmento2N))
AND (Segmento3N = ISNULL(@pSegmento3N, Segmento3N))
AND (Segmento4N = ISNULL(@pSegmento4N, Segmento4N))
AND (Segmento1C = ISNULL(@pSegmento1C, Segmento1C))
AND (Segmento2C = ISNULL(@pSegmento2C, Segmento2C))
AND (Segmento3C = ISNULL(@pSegmento3C, Segmento3C))
AND (Segmento4C = ISNULL(@pSegmento4C, Segmento4C))
AND (Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id))
 
RETURN @@Error 

GO

DROP PROCEDURE genContadorSegmentoDatosTodos
GO
CREATE PROCEDURE genContadorSegmentoDatosTodos
(
@pSegmento_id VarChar(10),
@pEmpresa_id Int
)
AS
SET NOCOUNT ON 
SELECT genSegmentos.Segmento_Id, genSegmentos.Descripcion , @pEmpresa_id as Empresa_Id
From genSegmentos 
WHERE
	genSegmentos.Segmento_Id = @pSegmento_Id

SELECT genContadorSegmento.Segmento2N, genContadorSegmento.Segmento3N, genContadorSegmento.Segmento4N, genContadorSegmento.Segmento1C,
	genContadorSegmento.Segmento2C, genContadorSegmento.Segmento3C, genContadorSegmento.Segmento4C, genSegmentos.Segmento_Id,
	genSegmentos.Descripcion as DescripcionSegmentos, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, genContadorSegmento.Empresa_Id,
	genContadorSegmento.PrimerNumero  , genContadorSegmento.Cai , genContadorSegmento.FechaCai ,
	genContadorSegmento.NumeroDesde , genContadorSegmento.NumeroHasta ,
	genContadorSegmento.FechaAutoSRI , genContadorSegmento.FechaDesde , 
	genContadorSegmento.TieneColumnaAutomatica
FROM genContadorSegmento 
INNER JOIN genSegmentos  ON (genSegmentos.genSegmentos = genContadorSegmento.Segmento_Id)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = genContadorSegmento.Usuario_Id)
WHERE 
	 genContadorSegmento.Empresa_id = @pEmpresa_Id and 
	 genContadorSegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)
	 
 
 RETURN @@Error 

GO


DROP PROCEDURE genContadorSegmentoEliminarTodos
GO
CREATE PROCEDURE genContadorSegmentoEliminarTodos
(
	@pSegmento_id VarChar(10),
	@pEmpresa_Id Int
)
AS
SET NOCOUNT ON 

DELETE FROM genContadorSegmento 
WHERE Empresa_Id = @pEmpresa_Id and 
	Segmento_Id = dbo.FuncFkgenSegmentos(@pSegmento_id)
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genControlesSeteos.sql*/
DROP PROCEDURE genControlesSeteosGuardar


GO
CREATE PROCEDURE genControlesSeteosGuardar
(
@pFormulario_Id varchar(30),
@pControl_Id varchar(200),
@pOrden int,
@pValor varchar(80) = NULL,
@pModificoValor Sino,
@pDeshabilitar SiNo,
@pOcultar SiNo,
@pSeteadoPorSistema Sino,
@pUsuario_Id int
)
AS
DECLARE @liFormulario int
SET NOCOUNT ON 
SET @liFormulario = dbo.FuncFKdisFormularios(@pFormulario_Id)

IF (EXISTS (SELECT 1 FROM genControlesSeteos WHERE (Formulario_Id = @liFormulario) AND (Control_Id = @pControl_Id)))
BEGIN 
	UPDATE genControlesSeteos
	SET	Orden = @pOrden,	
		Valor = @pValor,
		ModificoValor = @pModificoValor,
		Deshabilitar = @pDeshabilitar,
		Ocultar = @pOcultar,
		SeteadoPorSistema = @pSeteadoPorSistema,
		Usuario_Id = @pUsuario_Id,
		FechaUltModif =  dbo.FechaActual()
	WHERE (Formulario_Id = @liFormulario) AND (Control_Id = @pControl_Id)
END 
ELSE 
BEGIN 
	INSERT INTO genControlesSeteos
	(
		Formulario_Id,
		Control_Id,
		Orden,
		Valor,
		ModificoValor,
		Deshabilitar,
		Ocultar,
		SeteadoPorSistema,
		Usuario_Id,
		FechaUltModif
	)
	VALUES 
	(
		@liFormulario,
		@pControl_Id,
		@pOrden,
		@pValor,
		@pModificoValor,
		@pDeshabilitar,
		@pOcultar,
		@pSeteadoPorSistema,
		@pUsuario_Id,
		dbo.FechaActual()
	)
END 

GO

DROP PROCEDURE genControlesSeteosDatos
GO
CREATE PROCEDURE genControlesSeteosDatos
(
@pFormulario_Id varchar(30)
)
AS
SET NOCOUNT ON 

SELECT disFormularios.Formulario_Id, vv.Opcion as DescripcionFormularios 
FROM disFormularios 
INNER JOIN vgenMenusFormularios vv ON vv.disFormularios = disFormularios.disFormularios
WHERE (disFormularios.disFormularios = dbo.FuncFKdisFormularios(@pFormulario_Id))


SELECT 	genControlesSeteos.Control_Id, disControles.TituloLabel as Titulo,  genControlesSeteos.Orden, genControlesSeteos.Valor, genControlesSeteos.ModificoValor, genControlesSeteos.Deshabilitar, 
		genControlesSeteos.Ocultar, genControlesSeteos.SeteadoPorSistema, genControlesSeteos.Usuario_Id, disControles.TipoControl
FROM genControlesSeteos 
INNER JOIN disControles ON disControles.Formulario_Id = genControlesSeteos.Formulario_Id AND genControlesSeteos.Control_Id = disControles.Control_Id
WHERE (genControlesSeteos.Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id)) AND
	  ((disControles.TipoControl = 'SummaAdvDisenio.Controles.DisenioLupaAdv') OR 
	   (disControles.TipoControl = 'SummaAdvDisenio.Controles.DisenioTxtEditor') OR 
	   (disControles.TipoControl = 'SummaAdvDisenio.Controles.DisenioTxtNumericEditor') OR 
	   (disControles.TipoControl = 'SummaAdvDisenio.Controles.DisenioDatePicker') OR 
	   (disControles.TipoControl = 'SummaAdvDisenio.Controles.DisenioGridView'))
UNION
SELECT 	genControlesSeteos.Control_Id, disControles.Texto as Titulo,  genControlesSeteos.Orden, genControlesSeteos.Valor, genControlesSeteos.ModificoValor, genControlesSeteos.Deshabilitar, 
		genControlesSeteos.Ocultar, genControlesSeteos.SeteadoPorSistema, genControlesSeteos.Usuario_Id , disControles.TipoControl
FROM genControlesSeteos 
INNER JOIN disControles ON disControles.Formulario_Id = genControlesSeteos.Formulario_Id AND genControlesSeteos.Control_Id = disControles.Control_Id
WHERE (genControlesSeteos.Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id)) AND
	  ((disControles.TipoControl = 'SummaAdvDisenio.Controles.DisenioCheck')  OR 
	   (disControles.TipoControl = 'SummaAdvDisenio.Controles.DisenioBoton'))
UNION
SELECT 	genControlesSeteos.Control_Id, disControles.Texto as Titulo,  genControlesSeteos.Orden, genControlesSeteos.Valor, genControlesSeteos.ModificoValor, genControlesSeteos.Deshabilitar, 
		genControlesSeteos.Ocultar, genControlesSeteos.SeteadoPorSistema, genControlesSeteos.Usuario_Id, disControles.TipoControl 
FROM genControlesSeteos 
INNER JOIN disControles ON disControles.Formulario_Id = genControlesSeteos.Formulario_Id AND genControlesSeteos.Control_Id = disControles.Control_Id
WHERE (genControlesSeteos.Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id)) AND
	  (disControles.TipoControl = 'System.Windows.Forms.TabPage')
UNION
SELECT 	genControlesSeteos.Control_Id, ISNULL(disControles.TituloLabel,'') + '.' + c1.Titulo as Titulo,  genControlesSeteos.Orden, genControlesSeteos.Valor, genControlesSeteos.ModificoValor, genControlesSeteos.Deshabilitar, 
		genControlesSeteos.Ocultar, genControlesSeteos.SeteadoPorSistema, genControlesSeteos.Usuario_Id, 'Columna' 
FROM genControlesSeteos 
INNER JOIN disControlesGrillaColumnas c1 ON genControlesSeteos.Formulario_Id = c1.Formulario_Id AND
										(c1.Control_Id + '.' + c1.NombreCampo = genControlesSeteos.Control_Id)
INNER JOIN disControles ON disControles.Formulario_Id = c1.Formulario_Id AND disControles.Control_Id = c1.Control_Id
WHERE (genControlesSeteos.Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id)) 
ORDER BY Orden
 
RETURN @@Error 

GO

DROP PROCEDURE genControlesSeteosEliminar
GO
CREATE PROCEDURE genControlesSeteosEliminar
(
@pFormulario_Id varchar(30),
@pControl_Id varchar(200) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM genControlesSeteos 
WHERE (Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_Id))
AND (Control_Id = ISNULL(@pControl_Id, Control_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genCopiaSegmentos.sql*/
-- genCopiaSegmentos 'BME',' ','ZZZZ', 2, 1
drop PROCEDURE genCopiaSegmentos 
go
CREATE PROCEDURE genCopiaSegmentos 
(@SucursalOrigen VarChar(4), 
@SucursalDestinoDesde VarChar(4),
@SucursalDestinoHasta VarChar(4),
@Empresa_Id INT, 
@Usuarios_Id INT
)

as

INSERT INTO genContadorSegmento (Empresa_Id, Segmento_Id, 
	Segmento2N, Segmento3N, Segmento4N, PrimerNumero,
	Segmento1C, Segmento2C, Segmento3C, Segmento4C, 
	Cai, FechaAutoSRI, FechaCai, FechaDesde, NumeroDesde, NumeroHasta, TieneColumnaAutomatica,
	Usuario_Id) 
select genContadorSegmento.Empresa_Id, genContadorSegmento.Segmento_Id, Segmento2N, Segmento3N, Segmento4N, 1,
	genSucursalesEmpr.Sucursal Segmento1C, Segmento2C, Segmento3C, Segmento4C , 
		Cai, FechaAutoSRI, FechaCai, FechaDesde, NumeroDesde, NumeroHasta, 
		genContadorSegmento.TieneColumnaAutomatica,	@Usuarios_Id Usuario_Id
		from genContadorSegmento inner join genSegmentos ON
		genSegmentos.genSegmentos = genContadorSegmento.Segmento_Id and 
		genSegmentos.Origen1C = 11
		inner join genSucursalesEmpr ON 
		genSucursalesEmpr.Sucursal Between @SucursalDestinoDesde and @SucursalDestinoHasta and 
		@Empresa_Id = ISNULL(genSucursalesEmpr.Empresa_Id ,@Empresa_id)
		where
			genContadorSegmento.Segmento1C = @SucursalOrigen and 
			Not exists(select 1 from genContadorSegmento s1 where
				s1.Segmento_Id = genContadorSegmento.Segmento_Id and 
				s1.Segmento1C = genSucursalesEmpr.Sucursal and
				s1.Segmento2C = genContadorSegmento.Segmento2C and
				s1.Segmento3C = genContadorSegmento.Segmento3C and
				s1.Segmento4C = genContadorSegmento.Segmento4C and
				s1.Segmento2N = genContadorSegmento.Segmento2N and
				s1.Segmento3N = genContadorSegmento.Segmento3N and
				s1.Segmento4N = genContadorSegmento.Segmento4N AND 
				s1.Empresa_Id = @Empresa_Id) AND 
				genContadorSegmento.Empresa_Id = @Empresa_Id
UNION ALL
select genContadorSegmento.Empresa_Id, genContadorSegmento.Segmento_Id, Segmento2N, Segmento3N, Segmento4N, 1,
	Segmento1C, genSucursalesEmpr.Sucursal Segmento2C, Segmento3C, Segmento4C , 
		Cai, FechaAutoSRI, FechaCai, FechaDesde, NumeroDesde, NumeroHasta, 
		genContadorSegmento.TieneColumnaAutomatica,	@Usuarios_Id Usuario_Id
		from genContadorSegmento inner join genSegmentos ON
		genSegmentos.genSegmentos = genContadorSegmento.Segmento_Id and 
		genSegmentos.Origen2C = 11
		inner join genSucursalesEmpr ON 
		genSucursalesEmpr.Sucursal Between @SucursalDestinoDesde and @SucursalDestinoHasta and 
		@Empresa_Id = ISNULL(genSucursalesEmpr.Empresa_Id ,@Empresa_id)
		where
			genContadorSegmento.Segmento2C = @SucursalOrigen and 
			Not exists(select 1 from genContadorSegmento s1 where
				s1.Segmento_Id = genContadorSegmento.Segmento_Id and 
				s1.Segmento2C = genSucursalesEmpr.Sucursal and
				s1.Segmento1C = genContadorSegmento.Segmento1C and
				s1.Segmento3C = genContadorSegmento.Segmento3C and
				s1.Segmento4C = genContadorSegmento.Segmento4C and
				s1.Segmento2N = genContadorSegmento.Segmento2N and
				s1.Segmento3N = genContadorSegmento.Segmento3N and
				s1.Segmento4N = genContadorSegmento.Segmento4N and 
				s1.Empresa_Id = @Empresa_Id) AND 
				genContadorSegmento.Empresa_Id = @Empresa_Id
UNION ALL
select genContadorSegmento.Empresa_Id, genContadorSegmento.Segmento_Id, Segmento2N, Segmento3N, Segmento4N, 1,
	Segmento1C, Segmento2C, genSucursalesEmpr.Sucursal Segmento3C, Segmento4C , 
		Cai, FechaAutoSRI, FechaCai, FechaDesde, NumeroDesde, NumeroHasta, 
		genContadorSegmento.TieneColumnaAutomatica,	@Usuarios_Id Usuario_Id
		from genContadorSegmento inner join genSegmentos ON
		genSegmentos.genSegmentos = genContadorSegmento.Segmento_Id and 
		genSegmentos.Origen3C = 11
		inner join genSucursalesEmpr ON 
		genSucursalesEmpr.Sucursal Between @SucursalDestinoDesde and @SucursalDestinoHasta and 
		@Empresa_Id = ISNULL(genSucursalesEmpr.Empresa_Id ,@Empresa_id)
		where
			genContadorSegmento.Segmento3C = @SucursalOrigen and 
			Not exists(select 1 from genContadorSegmento s1 where
				s1.Segmento_Id = genContadorSegmento.Segmento_Id and 
				s1.Segmento3C = genSucursalesEmpr.Sucursal and
				s1.Segmento1C = genContadorSegmento.Segmento1C and
				s1.Segmento2C = genContadorSegmento.Segmento2C and
				s1.Segmento4C = genContadorSegmento.Segmento4C and
				s1.Segmento2N = genContadorSegmento.Segmento2N and
				s1.Segmento3N = genContadorSegmento.Segmento3N and
				s1.Segmento4N = genContadorSegmento.Segmento4N) AND 
				genContadorSegmento.Empresa_Id = @Empresa_Id

UNION ALL
select genContadorSegmento.Empresa_Id, genContadorSegmento.Segmento_Id, Segmento2N, Segmento3N, Segmento4N, 1,
	Segmento1C, Segmento2C,  Segmento3C, genSucursalesEmpr.Sucursal  Segmento4C , 
		Cai, FechaAutoSRI, FechaCai, FechaDesde, NumeroDesde, NumeroHasta, 
		genContadorSegmento.TieneColumnaAutomatica,	@Usuarios_Id Usuario_Id
		from genContadorSegmento inner join genSegmentos ON
		genSegmentos.genSegmentos = genContadorSegmento.Segmento_Id and 
		genSegmentos.Origen4C = 11
		inner join genSucursalesEmpr ON 
		genSucursalesEmpr.Sucursal Between @SucursalDestinoDesde and @SucursalDestinoHasta and 
		@Empresa_Id = ISNULL(genSucursalesEmpr.Empresa_Id ,@Empresa_id)
		where
			genContadorSegmento.Segmento4C = @SucursalOrigen and 
			Not exists(select 1 from genContadorSegmento s1 where
				s1.Segmento_Id = genContadorSegmento.Segmento_Id and 
				s1.Segmento4C = genSucursalesEmpr.Sucursal and
				s1.Segmento1C = genContadorSegmento.Segmento1C and
				s1.Segmento2C = genContadorSegmento.Segmento2C and
				s1.Segmento3C = genContadorSegmento.Segmento3C and
				s1.Segmento2N = genContadorSegmento.Segmento2N and
				s1.Segmento3N = genContadorSegmento.Segmento3N and
				s1.Segmento4N = genContadorSegmento.Segmento4N) AND 
				genContadorSegmento.Empresa_Id = @Empresa_Id

			
			
go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genCulturas.sql*/
DROP PROCEDURE genCulturasDatos
GO
CREATE PROCEDURE genCulturasDatos
(
@pCultura varchar(5)
)
AS
SET NOCOUNT ON 

SELECT genCulturas.Cultura, genCulturas.Descripcion
FROM genCulturas 
WHERE (Cultura = @pCultura)
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genDiasFestivos.sql*/
drop procedure genDiasFestivosDatos
go
create procedure genDiasFestivosDatos
as
select 1 as NoUsado
select Fecha,Descripcion from genDiasFestivos
go

drop procedure  genDiasFestivosEliminar
go
create procedure genDiasFestivosEliminar
as
delete genDiasFestivos
go

drop procedure  genDiasFestivosGuardar
go
create procedure genDiasFestivosGuardar
(
    @pFecha datetime,
    @pDescripcion varchar(30)
)
as
insert into genDiasFestivos(Fecha, Descripcion) VALUEs (@pFecha, @pDescripcion)
go


drop procedure genDiasFestivosFechaDatos
go
create procedure genDiasFestivosFechaDatos
(
	@Fecha DateTime
)
as

select Fecha,Descripcion from genDiasFestivos
Where 
	genDiasFestivos.Fecha = @Fecha
go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genDominios.sql*/
Drop Procedure genDominiosGuardar
GO
CREATE PROCEDURE genDominiosGuardar
(
@pDominio_Id char(2),
@pDescripcion char(100)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genDominios WHERE (Dominio_Id = @pDominio_Id)))
BEGIN 
	UPDATE genDominios
	SET		Dominio_Id = @pDominio_Id,
		Descripcion = @pDescripcion
	WHERE (Dominio_Id = @pDominio_Id)
END 
ELSE 
BEGIN 
	INSERT INTO genDominios
	(
		Dominio_Id,
		Descripcion
	)
	VALUES 
	(
		@pDominio_Id,
		@pDescripcion
	)
END 

GO
Drop Procedure genDominiosDatos
GO
CREATE PROCEDURE genDominiosDatos(
@pDominio_Id char (2)
)
AS
SELECT genDominios.Dominio_Id, genDominios.Descripcion
 FROM genDominios 
 Where 
	genDominios.Dominio_Id = @pDominio_Id

GO
Drop Procedure genDominiosEliminar
GO
Create Procedure genDominiosEliminar(
@pDominio_Id char (2)
 
) 
AS 
SET NOCOUNT ON  
DELETE FROM genDominios 
	 Where 
	genDominios.Dominio_Id = @pDominio_Id
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genEmpresas.sql*/
-- V2
-- genEmpresasdATOSINT 1
DROP PROCEDURE genEmpresasGuardar
GO
CREATE PROCEDURE genEmpresasGuardar
(
@pEmpresa_Id varchar(15),
@pEmpresa_Id_Nueva varchar(15),
@pDetalle varchar(100),
@pLogo VarChar(max) = NULL,
@pExtensionArchivo varchar(20),
@pMoneda_Id varchar(3) = NULL,
@pPais_Id smallint = NULL,
@pCuit qCuit,
@pCalle varchar(120),
@pNoExterior varchar(20),
@pNoInterior varchar(20),
@pColonia varchar(80),
@pLocalidad varchar(80),
@pMunicipio varchar(80),
@pReferencia varchar(20),
@pProvincia_Id varchar(5) = NULL,
@pCodigoPostal CodigoPostal,
@pFechaInicioSumma qFecha,
@pFechaInicioSociedad qFecha,
@pNumeroIIBB varchar(30),
@pIGJ varchar(20),
@pActividad varchar(80),
@pRegimen varchar(60), 
@pTelefono varchar(120) = Null,
@pInactivo bit, 
@pUsuario_id int, 
@pCarpetaEspecial varchar(200) = NULL, 
@pUsaCantidadAlterna bit,
@pUsaDespachoImportacion bit,
@pUsaSerie bit,
@pFechaCierreVentas qFecha,
@pFechaCierreCompras qFecha,
@pFechaCierreTesoreria qFecha,
@pFechaCierreStock qFecha,
@pFechaCalculoStock qFecha, 
@pRazonSocial VarChar(120),
@pTipoCosto char(1),
@pTipoCosto2 char(1),
@pTipoCosto3 char(1), 
@pCodLocalidad VarChar(10),
@pCodColonia VarChar(10),
@pCodMunicipio VarChar(10),
@pCondFiscal VarChar(60),
@pPaginaWeb VarChar(120), 
@pCtaMercaEnTransitoImpor VarChar(25)=null, 
@pSucursalCentral VarChar(4)=null, 
@pCtaMercTransito VarChar(25)=null, 
@pCtaApliImportacion VarChar(25)=null, 
@pCentro1De VarChar(3),
@pCentro2De VarChar(3), 
@pCtaUtiCambioRealizada VarChar(25)=null,
@pCtaPerCambioRealizada VarChar(25)=null,
@pCtaUtiCambioProv VarChar(25)=null,
@pCtaPerCambioProv VarChar(25)=null,
@pCtaAjuStockPos varchar(25)=null,
@pCtaAjuStockNeg varchar(25)=null,
@pServidor varchar(100)=null,
@pPuerto int =null,
@pCorreo varchar(200)=null,
@pUsuarioCorreo varchar(100)=null,
@pClave varchar(100)=null,
@pSeguridad varchar(3)=null,
@pCFVenta_Id varchar(5)=null,
@pMedida_Id varchar(5) =null,
@pEnviaFacturas bit,
@pEnviaRecibo bit,
@pEnviaOC bit,
@pEnviaPedido bit,
@pMailClientesSinMail varchar(200)=null, 
@pFechaCierreImpuestos qFecha,
@pCFAjusCtaCte varChar(5), 
@pFechaCierreActivoFijo DateTime, 
@pFechaCalculoActivoFijo DateTime,
@pFechaCalculoActivoDiferido DateTime,
@pTipoDtoFin Char(1),
@pMontoDtoFinanciero numeric(18,2),
@pCtaDtoFinPos VarChar(25)=null,
@pCtaDtoFinNeg VarChar(25)=null,
@pFechaCierreSueldos qFecha,
@pConfirmarEnviarPedidos SiNo,
@pConfirmarEnviarOC SiNo,
@pConfirmarEnviarRecibo SiNo,
@pConfirmarEnviarFacturas SiNo,
@pFirma varchar(max) = NULL,
@pImagenFirmaB64 varchar(max) = NULL, 
@pCuentasDeposito varchar(max) = NULL, 
@pRemisionesAlCosto Bit,
@pCtaRemisiones VarChar(25)= NULL,
@pUsaServerRH Bit,
@pServidorRH varchar(100)=null,
@pPuertoRH int =null,
@pCorreoRH varchar(200)=null,
@pUsuarioCorreoRH varchar(100)=null,
@pClaveRH varchar(100)=null,
@pSeguridadRH varchar(3)=null, 
@pTipoPermisoSCT VarChar(6)= NULL,
@pNroPermisoSCT VarChar(50) = NULL, 
@pTrabajaSabado Bit =0,
@pTrabajaDomingo Bit =0
)

AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM genEmpresas WHERE (Empresa_Id = @pEmpresa_Id)))
BEGIN 
	UPDATE genEmpresas
	SET		@lIdentidad = genEmpresas,
		Empresa_Id = @pEmpresa_Id_Nueva,
		Detalle = @pDetalle,
		Logo = @pLogo,
		ExtensionArchivo = @pExtensionArchivo,
		Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id),
		Pais_Id = dbo.FuncFKgenPaises(@pPais_Id),
		Cuit = @pCuit,
		Calle = @pCalle,
		NoExterior = @pNoExterior,
		NoInterior = @pNoInterior,
		Colonia = @pColonia,
		Localidad = @pLocalidad,
		Municipio = @pMunicipio,
		Referencia = @pReferencia,
		Provincia_Id = dbo.FuncFKgenProvincias(@pProvincia_Id),
		CodigoPostal = @pCodigoPostal,
		FechaInicioSumma = @pFechaInicioSumma,
		FechaInicioSociedad = @pFechaInicioSociedad,
		NumeroIIBB = @pNumeroIIBB,
		IGJ = @pIGJ,
		Actividad = @pActividad,
		Regimen = @pRegimen, 
		Inactivo = @pInactivo, 
		Telefono = @pTelefono,
		Usuario_id = @pUsuario_id, 
		CarpetaEspecial = @pCarpetaEspecial, 
		UsaCantidadAlterna =@pUsaCantidadAlterna,
		UsaDespachoImportacion = @pUsaDespachoImportacion,
		UsaSerie = @pUsaSerie,
		FechaCierreVentas = @pFechaCierreVentas,
		FechaCierreCompras= @pFechaCierreCompras,
		FechaCierreTesoreria = @pFechaCierreTesoreria,
		FechaCierreStock = @pFechaCierreStock,
		FechaCalculoStock = @pFechaCalculoStock, 
		RazonSocial = @pRazonSocial,
		TipoCosto = @pTipoCosto,
		TipoCosto2 = @pTipoCosto2,
		TipoCosto3 = @pTipoCosto3,
		CodLocalidad = @pCodLocalidad,
		CodColonia = @pCodColonia ,
		CodMunicipio = @pCodMunicipio,
		CondFiscal=	@pCondFiscal ,
		PaginaWeb = @pPaginaWeb , 
		CtaMercaEnTransitoImpor = dbo.FuncFKconCuentas(@pCtaMercaEnTransitoImpor), 
		SucursalCentral = dbo.FuncFKgenSucursalesEmpr(@pSucursalCentral), 
		CtaMercTransito =dbo.FuncFKconCuentas(@pCtaMercTransito), 
		CtaApliImportacion = dbo.FuncFKconCuentas(@pCtaApliImportacion), 
		Centro1De = @pCentro1De, 
		Centro2De = @pCentro2De, 
		CtaUtiCambioRealizada = dbo.FuncFKconCuentas(@pCtaUtiCambioRealizada),
		CtaPerCambioRealizada = dbo.FuncFKconCuentas(@pCtaPerCambioRealizada),
		CtaUtiCambioProv = dbo.FuncFKconCuentas(@pCtaUtiCambioProv),
		CtaPerCambioProv = dbo.FuncFKconCuentas(@pCtaPerCambioProv),
		CtaAjuStockPos = dbo.FuncFKconCuentas(@pCtaAjuStockPos),
		CtaAjuStockNeg = dbo.FuncFKconCuentas(@pCtaAjuStockNeg),
		Servidor=@pServidor,
		Puerto=@pPuerto,
		Correo=@pCorreo,
		UsuarioCorreo=@pUsuarioCorreo,
		Clave=@pClave,
		Seguridad=@pSeguridad,
		CFVenta_Id=dbo.FuncFKstkCondFisVenta(@pCFVenta_Id),
		Medida_Id=dbo.FuncFKstkUniMed(@pMedida_Id),
		EnviaFacturas=@pEnviaFacturas,
		EnviaRecibo=@pEnviaRecibo,
		EnviaOC=@pEnviaOC,
		EnviaPedido = @pEnviaPedido,
		MailClientesSinMail=@pMailClientesSinMail, 
		FechaCierreImpuestos = @pFechaCierreImpuestos,
		CFAjusCtaCte = dbo.FuncFKstkCondFisVenta(@pCFAjusCtaCte), 
		FechaCierreActivoFijo = @pFechaCierreActivoFijo, 
		FechaCalculoActivoFijo = @pFechaCalculoActivoFijo, 
		FechaCalculoActivoDiferido = @pFechaCalculoActivoDiferido,
		TipoDtoFin = @pTipoDtoFin, 
		MontoDtoFinanciero = @pMontoDtoFinanciero,
		CtaDtoFinPos = dbo.FuncFKconCuentas(@pCtaDtoFinPos),
		CtaDtoFinNeg = dbo.FuncFKconCuentas(@pCtaDtoFinNeg),
		FechaCierreSueldos=@pFechaCierreSueldos,
		ConfirmarEnviarPedidos=@pConfirmarEnviarPedidos,
		ConfirmarEnviarFacturas=@pConfirmarEnviarFacturas,
		ConfirmarEnviarOC=@pConfirmarEnviarOC,
		ConfirmarEnviarRecibo=@pConfirmarEnviarRecibo,
		Firma=@pFirma,
		ImagenFirmaB64=@pImagenFirmaB64, 
		CuentasDeposito = @pCuentasDeposito, 
		RemisionesAlCosto = @pRemisionesAlCosto, 
		CtaRemisiones = dbo.FuncFKconCuentas(@pCtaRemisiones),
		UsaServerRH = @pUsaServerRH,
		ServidorRH=@pServidorRH,
		PuertoRH=@pPuertoRH,
		CorreoRH=@pCorreoRH,
		UsuarioCorreoRH=@pUsuarioCorreoRH,
		ClaveRH=@pClaveRH,
		SeguridadRH=@pSeguridadRH,
		TipoPermisoSCT = @pTipoPermisoSCT ,
		NroPermisoSCT = @pNroPermisoSCT, 
		TrabajaSabado= @pTrabajaSabado, 
		TrabajaDomingo = @pTrabajaDomingo
	WHERE (Empresa_Id = @pEmpresa_Id)
END 
ELSE 
BEGIN 
	INSERT INTO genEmpresas
	(
		Empresa_Id,
		Detalle,
		Logo,
		ExtensionArchivo,
		Moneda_Id,
		Pais_Id,
		Cuit,
		Calle,
		NoExterior,
		NoInterior,
		Colonia,
		Localidad,
		Municipio,
		Referencia,
		Provincia_Id,
		CodigoPostal,
		FechaInicioSumma,
		FechaInicioSociedad,
		NumeroIIBB,
		IGJ,
		Actividad,
		Regimen, 
		Telefono,
		Inactivo, 
		Usuario_id, 
		CarpetaEspecial, 
		UsaCantidadAlterna,
		UsaDespachoImportacion,
		UsaSerie,
		FechaCierreVentas,
		FechaCierreCompras,
		FechaCierreTesoreria,
		FechaCierreStock,
		FechaCalculoStock, 
		RazonSocial,
		TipoCosto,
		TipoCosto2,
		TipoCosto3,
		CodLocalidad ,
		CodColonia,
		CodMunicipio,
		CondFiscal,
		PaginaWeb, 
		CtaMercaEnTransitoImpor ,
		SucursalCentral, 
		CtaMercTransito,
		CtaApliImportacion, 
		Centro1De, 
		Centro2De,
		CtaUtiCambioRealizada,
		CtaPerCambioRealizada,
		CtaUtiCambioProv,
		CtaPerCambioProv,
		CtaAjuStockPos,
		CtaAjuStockNeg,
		Servidor,
		Puerto,
		Correo,
		UsuarioCorreo,
		Clave,
		Seguridad,
		CFVenta_Id,
		Medida_Id,
		EnviaFacturas,
		EnviaRecibo,
		EnviaOC,
		EnviaPedido,
		MailClientesSinMail, 
		FechaCierreImpuestos,
		CFAjusCtaCte, 
		FechaCierreActivoFijo,
		FechaCalculoActivoFijo, 
		FechaCalculoActivoDiferido,
		TipoDtoFin , 
		MontoDtoFinanciero,
		CtaDtoFinPos,
		CtaDtoFinNeg,
		FechaCierreSueldos,
		ConfirmarEnviarFacturas,
		ConfirmarEnviarOC,
		ConfirmarEnviarPedidos,
		ConfirmarEnviarRecibo,
		Firma,
		ImagenFirmaB64, 
		CuentasDeposito, 
		RemisionesAlCosto, 
		CtaRemisiones, 
		UsaServerRH, 
		ServidorRH,
		PuertoRH,
		CorreoRH,
		UsuarioCorreoRH,
		ClaveRH,
		SeguridadRH,
		TipoPermisoSCT,
		NroPermisoSCT, 
		TrabajaSabado, 
		TrabajaDomingo
		)
	VALUES 
	(
		@pEmpresa_Id_Nueva,
		@pDetalle,
		@pLogo,
		@pExtensionArchivo,
		dbo.FuncFKgenMonedas(@pMoneda_Id),
		dbo.FuncFKgenPaises(@pPais_Id),
		@pCuit,
		@pCalle,
		@pNoExterior,
		@pNoInterior,
		@pColonia,
		@pLocalidad,
		@pMunicipio,
		@pReferencia,
		dbo.FuncFKgenProvincias(@pProvincia_Id),
		@pCodigoPostal,
		@pFechaInicioSumma,
		@pFechaInicioSociedad,
		@pNumeroIIBB,
		@pIGJ,
		@pActividad,
		@pRegimen, 
		@pTelefono,
		@pInactivo, 
		@pUsuario_id, 
		@pCarpetaEspecial, 
		@pUsaCantidadAlterna,
		@pUsaDespachoImportacion,
		@pUsaSerie,
		@pFechaCierreVentas,
		@pFechaCierreCompras,
		@pFechaCierreTesoreria,
		@pFechaCierreStock,
		@pFechaCalculoStock, 
		@pRazonSocial,
		@pTipoCosto,
		@pTipoCosto2,
		@pTipoCosto3,
		@pCodLocalidad ,
		@pCodColonia,
		@pCodMunicipio,
		@pCondFiscal,
		@pPaginaWeb,
		dbo.FuncFKconCuentas(@pCtaMercaEnTransitoImpor),
		dbo.FuncFKgenSucursalesEmpr(@pSucursalCentral), 
		dbo.FuncFKconCuentas(@pCtaMercTransito),
		dbo.FuncFKconCuentas(@pCtaApliImportacion), 
		@pCentro1De, 
		@pCentro2De, 
		dbo.FuncFKconCuentas(@pCtaUtiCambioRealizada),
		dbo.FuncFKconCuentas(@pCtaPerCambioRealizada),
		dbo.FuncFKconCuentas(@pCtaUtiCambioProv),
		dbo.FuncFKconCuentas(@pCtaPerCambioProv),
		dbo.FuncFKconCuentas(@pCtaAjuStockPos),
		dbo.FuncFKconCuentas(@pCtaAjuStockNeg),
		@pServidor,
		@pPuerto,
		@pCorreo,
		@pUsuarioCorreo,
		@pClave,
		@pSeguridad,
		dbo.FuncFKstkCondFisVenta(@pCFVenta_Id),
		dbo.FuncFKstkUniMed(@pMedida_Id),
		@pEnviaFacturas,
		@pEnviaRecibo,
		@pEnviaOC,
		@pEnviaPedido,
		@pMailClientesSinMail,
		@pFechaCierreImpuestos,
		dbo.FuncFKstkCondFisVenta(@pCFAjusCtaCte), 
		@pFechaCierreActivoFijo,
		@pFechaCalculoActivoFijo, 
		@pFechaCalculoActivoDiferido,
		@pTipoDtoFin,
		@pMontoDtoFinanciero,
		dbo.FuncFKconCuentas(@pCtaDtoFinPos),
		dbo.FuncFKconCuentas(@pCtaDtoFinNeg),
		@pFechaCierreSueldos,
		@pConfirmarEnviarFacturas,
		@pConfirmarEnviarOC,
		@pConfirmarEnviarPedidos,
		@pConfirmarEnviarRecibo,
		@pFirma,
		@pImagenFirmaB64, 
		@pCuentasDeposito, 
		@pRemisionesAlCosto, 
		dbo.FuncFKconCuentas(@pCtaRemisiones), 
		@pUsaServerRH, 
		@pServidorRH,
		@pPuertoRH,
		@pCorreoRH,
		@pUsuarioCorreoRH,
		@pClaveRH,
		@pSeguridadRH,
		@pTipoPermisoSCT,
		@pNroPermisoSCT, 
		@pTrabajaSabado, 
		@pTrabajaDomingo
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 

	DECLARE @Empresa1 Int
	SET @Empresa1 = (select MIN(genEmpresas) from genEmpresas)

	INSERT INTO genGlobales(Empresa_Id,Nombre_Var,Descripcion,Tipo,Longitud,Decimales,
	nValor,cValor,fValor,mValor,SubSistema,SoloLectura,lupIdentidad,WhereF10)
	select @lIdentidad Empresa_Id,Nombre_Var,Descripcion,Tipo,Longitud,Decimales,
	0 nValor,' ' cValor,NULL  fValor,NULL  mValor,SubSistema,SoloLectura,lupIdentidad,
	WhereF10 from genGlobales where Empresa_Id = @Empresa1
	
	
END 

Select @lIdentidad as RetVal 

GO


DROP PROCEDURE genEmpresasDatos
GO
CREATE PROCEDURE genEmpresasDatos
(
@pEmpresa_Id varchar(15)
)
AS
SET NOCOUNT ON 

Declare @pIdentity bigint= dbo.FuncFKgenEmpresas(@pEmpresa_Id)

Exec genEmpresasDatosInt @pIdentity

GO

DROP PROCEDURE genEmpresasDatosInt
GO
CREATE PROCEDURE genEmpresasDatosInt
(
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 

SELECT genEmpresas.genEmpresas, genEmpresas.Empresa_Id, genEmpresas.Detalle, genEmpresas.Logo, '' LogoOriginal,
	genEmpresas.ExtensionArchivo, genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas, genPaises.Pais_Id,
	genPaises.Descripcion as DescripcionPaises, genEmpresas.Cuit, genEmpresas.Calle, genEmpresas.NoExterior,
	genEmpresas.NoInterior, genEmpresas.Colonia, genEmpresas.Localidad, genEmpresas.Municipio,
	genEmpresas.Referencia, genProvincias.Provincia_Id, genProvincias.Descripcion as DescripcionProvincias, genEmpresas.CodigoPostal,
	genEmpresas.FechaInicioSumma, genEmpresas.FechaInicioSociedad, genEmpresas.FechaCierreVentas, genEmpresas.FechaCierreCompras,
	genEmpresas.FechaCierreTesoreria, genEmpresas.FechaCierreStock, genEmpresas.FechaCalculoStock, genEmpresas.FechaCierreSueldos,
	genEmpresas.NumeroIIBB, genEmpresas.IGJ,
	genEmpresas.Actividad, genEmpresas.Regimen, genEmpresas.Telefono, genEmpresas.Inactivo, 
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, 
	genInstalacion.Dominio_Id, genEmpresas.CarpetaEspecial, genEmpresas.UsaCantidadAlterna,
	genEmpresas.UsaDespachoImportacion,genEmpresas.UsaSerie, genEmpresas.RazonSocial,
	genEmpresas.TipoCosto, genEmpresas.TipoCosto2, genEmpresas.TipoCosto3, 
	genEmpresas.CodLocalidad , genEmpresas.CodColonia, genEmpresas.CodMunicipio,
	genEmpresas.CondFiscal, genEmpresas.PaginaWeb, 
	conCuentas.Cuenta_Id as CtaMercaEnTransitoImpor, conCuentas.Descripcion as DescripcionCtaMercaEnTransitoImpor,
	conCuentasTran.Cuenta_Id as CtaMercTransito, conCuentasTran.Descripcion as DescripcionCtaMercTransito, 
	conCuentasApimp.Cuenta_Id as CtaApliImportacion, conCuentasApimp.Descripcion as DescripcionCtaApliImportacion, 
	genSucursalesEmpr.Sucursal as SucursalCentral, genSucursalesEmpr.Descripcion as DescripcionSucursalCentral, 
	Centro1De, Centro2De, 
		CtaUtiCambioRealizada.Cuenta_Id CtaUtiCambioRealizada, CtaUtiCambioRealizada.Descripcion as DescripcionCtaUtiCambioRealizada,
		CtaPerCambioRealizada.Cuenta_Id CtaPerCambioRealizada, CtaPerCambioRealizada.Descripcion as DescripcionCtaPerCambioRealizada,
		CtaUtiCambioProv.Cuenta_Id CtaUtiCambioProv, CtaUtiCambioProv.Descripcion as DescripcionCtaUtiCambioProv,
		CtaPerCambioProv.Cuenta_Id CtaPerCambioProv, CtaPerCambioProv.Descripcion as DescripcionCtaPerCambioProv,
		CtaAjuStockPos.Cuenta_Id as CtaAjuStockPos, CtaAjuStockPos.Descripcion as CtaAjuStockPosDescripcion,
		CtaAjuStockNeg.Cuenta_Id as CtaAjuStockNeg, CtaAjuStockNeg.Descripcion as CtaAjuStockNegDescripcion,
		genEmpresas.Servidor,genEmpresas.Puerto,genEmpresas.Correo,genEmpresas.UsuarioCorreo,genEmpresas.Clave,
		genEmpresas.Seguridad,CFVenta_Id.CFVenta_Id, CFVenta_Id.Descripcion as DescripcionCFVenta_Id,Medida_Id.Medida_Id,Medida_Id.Descripcion as DescripcionMedida_Id,genEmpresas.EnviaFacturas,genEmpresas.EnviaRecibo,
		genEmpresas.EnviaOC,genEmpresas.EnviaPedido, genEmpresas.MailClientesSinMail, genEmpresas.FechaCierreImpuestos,
		CFAjusCtaCte.CFVenta_Id CFAjusCtaCte, CFAjusCtaCte.Descripcion DescripcionCFAjusCtaCte, 
		genEmpresas.FechaCierreActivoFijo, genEmpresas.FechaCalculoActivoFijo, 
		genEmpresas.FechaCalculoActivoDiferido, 
		genEmpresas.TipoDtoFin, genEmpresas.MontoDtoFinanciero, 
	CtaDtoFinPos.Cuenta_Id as CtaDtoFinPos, CtaDtoFinPos.Descripcion  DescripcionCtaDtoFinPos,
	CtaDtoFinNeg.Cuenta_Id as CtaDtoFinNeg, CtaDtoFinNeg.Descripcion  DescripcionCtaDtoFinNeg,
	genEmpresas.ConfirmarEnviarFacturas, genEmpresas.ConfirmarEnviarOC, genEmpresas.ConfirmarEnviarPedidos, genEmpresas.ConfirmarEnviarRecibo,
	genEmpresas.Firma, genEmpresas.ImagenFirmaB64, genEmpresas.CuentasDeposito, 
	genEmpresas.RemisionesAlCosto, CtaRemisiones.Cuenta_Id as CtaRemisiones ,
		CtaRemisiones.Descripcion as DescripcionCtaRemisiones, 
		genEmpresas.UsaServerRH, genEmpresas.ServidorRH,genEmpresas.PuertoRH,genEmpresas.CorreoRH,genEmpresas.UsuarioCorreoRH,
		genEmpresas.ClaveRH,genEmpresas.SeguridadRH, genEmpresas.TipoPermisoSCT, genEmpresas.NroPermisoSCT, 
		genEmpresas.TrabajaSabado, genEmpresas.TrabajaDomingo
FROM genEmpresas 
LEFT JOIN genMonedas  ON (genMonedas.genMonedas = genEmpresas.Moneda_Id)
LEFT JOIN genPaises  ON (genPaises.genPaises = genEmpresas.Pais_Id)
Cross join genInstalacion
LEFT JOIN genProvincias  ON (genProvincias.genProvincias = genEmpresas.Provincia_Id)
LEFT JOIN genUsuarios ON genUsuarios.genUsuarios = genEmpresas.Usuario_id
LEFT JOIN conCuentas ON genEmpresas.CtaMercaEnTransitoImpor = conCuentas.conCuentas
LEFT JOIN conCuentas AS conCuentasTran ON genEmpresas.CtaMercTransito = conCuentasTran.conCuentas
LEFT JOIN conCuentas as conCuentasApimp ON genEmpresas.CtaApliImportacion = conCuentasApimp.conCuentas
LEFT JOIN genSucursalesEmpr ON  genSucursalesEmpr.genSucursalesEmpr = genEmpresas.SucursalCentral
LEFT JOIN conCuentas as CtaUtiCambioRealizada ON CtaUtiCambioRealizada.conCuentas = genEmpresas.CtaUtiCambioRealizada
LEFT JOIN conCuentas as CtaPerCambioRealizada ON CtaPerCambioRealizada.conCuentas = genEmpresas.CtaPerCambioRealizada
LEFT JOIN conCuentas as CtaUtiCambioProv ON CtaUtiCambioProv.conCuentas = genEmpresas.CtaUtiCambioProv
LEFT JOIN conCuentas as CtaPerCambioProv ON CtaPerCambioProv.conCuentas = genEmpresas.CtaPerCambioProv
left join conCuentas as CtaAjuStockPos on CtaAjuStockPos.conCuentas=genEmpresas.CtaAjuStockPos
left join conCuentas as CtaAjuStockNeg on CtaAjuStockNeg.conCuentas=genEmpresas.CtaAjuStockNeg
left join stkCondFisVenta CFVenta_Id on CFVenta_Id.stkCondFisVenta=genEmpresas.CFVenta_Id
left join stkUniMed Medida_Id on Medida_Id.stkUniMed=genEmpresas.Medida_Id
Left Join stkCondFisVenta as CFAjusCtaCte On CFAjusCtaCte.stkCondFisVenta = genEmpresas.CFAjusCtaCte
left join conCuentas as CtaDtoFinPos on CtaDtoFinPos.conCuentas=genEmpresas.CtaDtoFinPos
left join conCuentas as CtaDtoFinNeg on CtaDtoFinNeg.conCuentas=genEmpresas.CtaDtoFinNeg
left join conCuentas as CtaRemisiones on CtaRemisiones.conCuentas=genEmpresas.CtaRemisiones
WHERE (genEmpresas.genEmpresas= @pEmpresa_Id)

Exec genAtributosGeneralesIdentityDatos @pEmpresa_Id, 'genEmpresas'
RETURN @@Error 

GO


Drop procedure genEmpresasSetFechaActivoFijo
Go
Create procedure genEmpresasSetFechaActivoFijo
(
@pEmpresa_Id int,
@pFechaCierre qFecha
)
As
Update genEmpresas Set FechaCierreActivoFijo = @pFechaCierre Where genEmpresas = @pEmpresa_Id
Go

Drop procedure genEmpresasSetFechaSueldos
Go
Create procedure genEmpresasSetFechaSueldos
(
@pEmpresa_Id int,
@pFechaCierre qFecha
)
As
Update genEmpresas Set FechaCierreSueldos = @pFechaCierre Where genEmpresas = @pEmpresa_Id
Go


Drop procedure genEmpresasSetFechaCalcActivoFijo
Go
Create procedure genEmpresasSetFechaCalcActivoFijo
(
@pEmpresa_Id int,
@pFechaCierre qFecha
)
As
Update genEmpresas Set FechaCalculoActivoFijo = @pFechaCierre Where genEmpresas = @pEmpresa_Id
Go


Drop procedure genEmpresasSetFechaCalcActivoDiferido
Go
Create procedure genEmpresasSetFechaCalcActivoDiferido
(
@pEmpresa_Id int,
@pFechaCierre qFecha
)
As
Update genEmpresas Set FechaCalculoActivoDiferido = @pFechaCierre Where genEmpresas = @pEmpresa_Id
Go


DROP PROCEDURE genEmpresasGuardarConMovimientos
GO
CREATE PROCEDURE genEmpresasGuardarConMovimientos
(
@pEmpresa_Id varchar(15),
@pEmpresa_Id_Nueva varchar(15),
@pDetalle varchar(100),
@pLogo VarChar(max) = NULL,
@pExtensionArchivo varchar(20),
--@pMoneda_Id varchar(3) = NULL,
@pPais_Id smallint = NULL,
@pCuit qCuit,
@pCalle varchar(120),
@pNoExterior varchar(20),
@pNoInterior varchar(20),
@pColonia varchar(80),
@pLocalidad varchar(80),
@pMunicipio varchar(80),
@pReferencia varchar(20),
@pProvincia_Id varchar(5) = NULL,
@pCodigoPostal CodigoPostal,
@pFechaInicioSumma qFecha,
@pFechaInicioSociedad qFecha,
@pNumeroIIBB varchar(30),
@pIGJ varchar(20),
@pActividad varchar(80),
@pRegimen varchar(60), 
@pTelefono varchar(120) = Null,
@pInactivo bit, 
@pUsuario_id int, 
@pCarpetaEspecial varchar(200) = NULL, 
@pUsaCantidadAlterna bit,
@pUsaDespachoImportacion bit,
@pUsaSerie bit,
@pFechaCierreVentas qFecha,
@pFechaCierreCompras qFecha,
@pFechaCierreTesoreria qFecha,
@pFechaCierreStock qFecha,
@pFechaCalculoStock qFecha, 
@pRazonSocial VarChar(120),
@pTipoCosto char(1),
@pTipoCosto2 char(1),
@pTipoCosto3 char(1),
@pCodLocalidad VarChar(10),
@pCodColonia VarChar(10),
@pCodMunicipio VarChar(10),
@pCondFiscal VarChar(60),
@pPaginaWeb VarChar(120),
@pCtaMercaEnTransitoImpor VarChar(25)=null,
@pSucursalCentral VarChar(4)=null, 
@pCtaMercTransito VarChar(25)=null, 
@pCtaApliImportacion VarChar(25)=null, 
@pCentro1De VarChar(3), 
@pCentro2De VarChar(3),
@pCtaUtiCambioRealizada VarChar(25)=null,
@pCtaPerCambioRealizada VarChar(25)=null,
@pCtaUtiCambioProv VarChar(25)=null,
@pCtaPerCambioProv VarChar(25)=null,
@pCtaAjuStockPos varchar(25)=null,
@pCtaAjuStockNeg varchar(25)=null,
@pServidor varchar(100)=null,
@pPuerto int =null,
@pCorreo varchar(200)=null,
@pUsuarioCorreo varchar(100)=null,
@pClave varchar(100)=null,
@pSeguridad varchar(3)=null,
@pCFVenta_Id varchar(5)=null,
@pMedida_Id varchar(5) =null,
@pEnviaFacturas bit,
@pEnviaRecibo bit,
@pEnviaOC bit,
@pEnviaPedido bit,
@pMailClientesSinMail varchar(200)=null, 
@pFechaCierreImpuestos qFecha,
@pCFAjusCtaCte varChar(5),
@pTipoDtoFin Char(1),
@pMontoDtoFinanciero numeric(18,2),
@pCtaDtoFinPos VarChar(25)=null,
@pCtaDtoFinNeg VarChar(25)=null,
@pFechaCalculoActivoDiferido qFecha,
@pFechaCalculoActivoFijo qFecha,
@pFechaCierreActivoFijo qFecha,
@pFechaCierreSueldos qFecha,
@pConfirmarEnviarPedidos SiNo,
@pConfirmarEnviarOC SiNo,
@pConfirmarEnviarRecibo SiNo,
@pConfirmarEnviarFacturas SiNo,
@pFirma varchar(max) = NULL,
@pImagenFirmaB64 varchar(max) = NULL, 
@pCuentasDeposito VarChar(Max) = NULL, 
@pRemisionesAlCosto Bit,
@pCtaRemisiones VarChar(25)= NULL,
@pUsaServerRH Bit,
@pServidorRH varchar(100)=null,
@pPuertoRH int =null,
@pCorreoRH varchar(200)=null,
@pUsuarioCorreoRH varchar(100)=null,
@pClaveRH varchar(100)=null,
@pSeguridadRH varchar(3)=null, 
@pTipoPermisoSCT VarChar(6)= NULL,
@pNroPermisoSCT VarChar(50) = NULL, 
@pTrabajaSabado Bit =0,
@pTrabajaDomingo Bit =0
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
SET @lIdentidad = (SELECT genEmpresas FROM genEmpresas WHERE (Empresa_Id = @pEmpresa_Id))

IF (EXISTS (SELECT 1 FROM genEmpresas WHERE (Empresa_Id = @pEmpresa_Id)))
BEGIN 
	UPDATE genEmpresas
	SET	Empresa_Id = @pEmpresa_Id_Nueva,
		Detalle = @pDetalle,
		Logo = @pLogo,
		ExtensionArchivo = @pExtensionArchivo,
		--Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id),
		Pais_Id = dbo.FuncFKgenPaises(@pPais_Id),
		Cuit = @pCuit,
		Calle = @pCalle,
		NoExterior = @pNoExterior,
		NoInterior = @pNoInterior,
		Colonia = @pColonia,
		Localidad = @pLocalidad,
		Municipio = @pMunicipio,
		Referencia = @pReferencia,
		Provincia_Id = dbo.FuncFKgenProvincias(@pProvincia_Id),
		CodigoPostal = @pCodigoPostal,
		FechaInicioSumma = @pFechaInicioSumma,
		FechaInicioSociedad = @pFechaInicioSociedad,
		NumeroIIBB = @pNumeroIIBB,
		IGJ = @pIGJ,
		Actividad = @pActividad,
		Regimen = @pRegimen, 
		Inactivo = @pInactivo, 
		Telefono = @pTelefono,
		Usuario_id = @pUsuario_id, 
		CarpetaEspecial = @pCarpetaEspecial, 
		UsaCantidadAlterna =@pUsaCantidadAlterna,
		UsaDespachoImportacion = @pUsaDespachoImportacion,
		UsaSerie = @pUsaSerie,
		FechaCierreVentas = @pFechaCierreVentas,
		FechaCierreCompras= @pFechaCierreCompras,
		FechaCierreTesoreria = @pFechaCierreTesoreria,
		FechaCierreStock = @pFechaCierreStock,
		FechaCalculoStock = @pFechaCalculoStock, 
		RazonSocial = @pRazonSocial,
		TipoCosto = @pTipoCosto,
		TipoCosto2 = @pTipoCosto2,
		TipoCosto3 = @pTipoCosto3,
		CodLocalidad = @pCodLocalidad,
		CodColonia = @pCodColonia ,
		CodMunicipio = @pCodMunicipio,
		CondFiscal=	@pCondFiscal ,
		PaginaWeb = @pPaginaWeb , 
		CtaMercaEnTransitoImpor = dbo.FuncFKconCuentas(@pCtaMercaEnTransitoImpor),
		SucursalCentral = dbo.FuncFKgenSucursalesEmpr(@pSucursalCentral), 
		CtaMercTransito =dbo.FuncFKconCuentas(@pCtaMercTransito), 
		CtaApliImportacion = dbo.FuncFKconCuentas(@pCtaApliImportacion), 
		Centro1De = @pCentro1De, Centro2De = @pCentro2De,
		CtaUtiCambioRealizada = dbo.FuncFKconCuentas(@pCtaUtiCambioRealizada),
		CtaPerCambioRealizada = dbo.FuncFKconCuentas(@pCtaPerCambioRealizada),
		CtaUtiCambioProv = dbo.FuncFKconCuentas(@pCtaUtiCambioProv),
		CtaPerCambioProv = dbo.FuncFKconCuentas(@pCtaPerCambioProv),
		CtaAjuStockPos = dbo.FuncFKconCuentas(@pCtaAjuStockPos),
		CtaAjuStockNeg = dbo.FuncFKconCuentas(@pCtaAjuStockNeg),
		Servidor=@pServidor,
		Puerto=@pPuerto,
		Correo=@pCorreo,
		UsuarioCorreo=@pUsuarioCorreo,
		Clave=@pClave,
		Seguridad=@pSeguridad,
		CFVenta_Id=dbo.FuncFKstkCondFisVenta(@pCFVenta_Id),
		Medida_Id=dbo.FuncFKstkUniMed(@pMedida_Id),
		EnviaFacturas=@pEnviaFacturas,
		EnviaRecibo=@pEnviaRecibo,
		EnviaOC=@pEnviaOC,
		EnviaPedido = @pEnviaPedido,
		MailClientesSinMail=@pMailClientesSinMail, 
		FechaCierreImpuestos = @pFechaCierreImpuestos,
		CFAjusCtaCte = dbo.FuncFKstkCondFisVenta(@pCFAjusCtaCte),
		TipoDtoFin = @pTipoDtoFin, 
		MontoDtoFinanciero = @pMontoDtoFinanciero,
		CtaDtoFinPos = dbo.FuncFKconCuentas(@pCtaDtoFinPos),
		CtaDtoFinNeg = dbo.FuncFKconCuentas(@pCtaDtoFinNeg),
		FechaCalculoActivoDiferido=@pFechaCalculoActivoDiferido,
		FechaCalculoActivoFijo=@pFechaCalculoActivoFijo,
		FechaCierreActivoFijo=@pFechaCalculoStock,
		FechaCierreSueldos=@pFechaCierreSueldos,
		ConfirmarEnviarPedidos=@pConfirmarEnviarPedidos,
		ConfirmarEnviarFacturas=@pConfirmarEnviarFacturas,
		ConfirmarEnviarOC=@pConfirmarEnviarOC,
		ConfirmarEnviarRecibo=@pConfirmarEnviarRecibo,
		Firma=@pFirma,
		ImagenFirmaB64=@pImagenFirmaB64, 
		CuentasDeposito = @pCuentasDeposito, 
		RemisionesAlCosto = @pRemisionesAlCosto, 
		CtaRemisiones = dbo.FuncFKconCuentas(@pCtaRemisiones),
		UsaServerRH = @pUsaServerRH,
		ServidorRH=@pServidorRH,
		PuertoRH=@pPuertoRH,
		CorreoRH=@pCorreoRH,
		UsuarioCorreoRH=@pUsuarioCorreoRH,
		ClaveRH=@pClaveRH,
		SeguridadRH=@pSeguridadRH, 
		TipoPermisoSCT = @pTipoPermisoSCT ,
		NroPermisoSCT = @pNroPermisoSCT , 
		TrabajaSabado =@pTrabajaSabado ,
		TrabajaDomingo = @pTrabajaDomingo
	WHERE (Empresa_Id = @pEmpresa_Id)
END 
Select @lIdentidad as RetVal 

GO



DROP PROCEDURE genEmpresasEliminar
GO
CREATE PROCEDURE genEmpresasEliminar
(
@pEmpresa_Id varchar(15) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM genEmpresas 
WHERE (Empresa_Id = @pEmpresa_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKgenEmpresas
GO

CREATE FUNCTION FuncFKgenEmpresas
(
@pEmpresa_Id varchar (15)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = genEmpresas FROM genEmpresas WHERE 
	Empresa_Id = @pEmpresa_Id
  RETURN @pIdentity
END


GO

DROP Procedure genEmpresasTodas
GO
CREATE Procedure genEmpresasTodas
AS
SELECT Empresa_Id, Detalle, genEmpresas  
FROM genEmpresas 
WHERE Inactivo = 0
ORDER BY 3
GO

Drop procedure genEmpresasSetFechaCalculoStock
Go
Create procedure genEmpresasSetFechaCalculoStock
(
@pEmpresa_Id int,
@pFechaCierre qFecha
)
As
Update genEmpresas Set FechaCalculoStock = @pFechaCierre Where genEmpresas = @pEmpresa_Id
Go


Drop procedure genEmpresasSetFechaCompras
Go
Create procedure genEmpresasSetFechaCompras
(
@pEmpresa_Id int,
@pFechaCierre qFecha
)
As
Update genEmpresas Set FechaCierreCompras = @pFechaCierre Where genEmpresas = @pEmpresa_Id
Go


Drop procedure genEmpresasSetFechaVentas
Go
Create procedure genEmpresasSetFechaVentas
(
@pEmpresa_Id int,
@pFechaCierre qFecha
)
As
Update genEmpresas Set FechaCierreVentas = @pFechaCierre Where genEmpresas = @pEmpresa_Id
Go


Drop procedure genEmpresasSetFechaStock
Go
Create procedure genEmpresasSetFechaStock
(
@pEmpresa_Id int,
@pFechaCierre qFecha
)
As
Update genEmpresas Set FechaCierreStock = @pFechaCierre Where genEmpresas = @pEmpresa_Id
Go


Drop procedure genEmpresasSetFechaTesoreria
Go
Create procedure genEmpresasSetFechaTesoreria
(
@pEmpresa_Id int,
@pFechaCierre qFecha
)
As
Update genEmpresas Set FechaCierreTesoreria = @pFechaCierre Where genEmpresas = @pEmpresa_Id
Go


Drop procedure genEmpresasSetFechaImpuestos
Go
Create procedure genEmpresasSetFechaImpuestos
(
@pEmpresa_Id int,
@pFechaCierre qFecha
)
As
Update genEmpresas Set FechaCierreImpuestos = @pFechaCierre Where genEmpresas = @pEmpresa_Id
Go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genEntidades.sql*/
Drop Procedure genEntidadesGuardar
GO
Create Procedure genEntidadesGuardar
(
@pgenEntidades bigint,
@pFechaAlta qFechaHora, 
@pUsuario_Id int, 
@pCuit varchar(25) , 
@pTipoDoc char(1),
@pidFiscal varchar(25)
) 
AS 
if (@pgenEntidades > 0)

BEGIN 
	UPDATE genEntidades SET 
	FechaAlta = @pFechaAlta, 
	Usuario_Id = @pUsuario_Id, 
	Cuit = @pCuit , 
	TipoDoc = @pTipoDoc,
	idFiscal = @pidFiscal
	WHERE 
	genEntidades.genEntidades = @pGenEntidades
END 
ELSE
BEGIN
	INSERT INTO  genEntidades
	(FechaAlta , 
	Usuario_Id , 
	Cuit,
	TipoDoc,
	idFiscal ) 
	Values 
	(@pFechaAlta , 
	@pUsuario_Id , 
	@pCuit, 
	@pTipoDoc,
	@pidFiscal ) 
	SET @pgenEntidades =  Cast(SCOPE_IDENTITY() as bigint) 
END

SELECT @pgenEntidades AS RetVal



GO
Drop Procedure genEntidadesDatos
GO
CREATE PROCEDURE genEntidadesDatos(
@pgenEntidades bigint
)
AS
SELECT genEntidades.genEntidades, genEntidades.FechaAlta, genEntidades.Usuario_Id, 
genEntidades.Cuit, genEntidades.TipoDoc, genEntidades.idFiscal, genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
IsNull(venClientes.Cliente_Id, '') Cliente_Id, IsNull(venClientes.RazonSocial, '') ClieRazonSocial,
IsNull(comProveedores.Proveed_Id, '') Proveed_Id, IsNull(comProveedores.RazonSocial, '') ProvRazonSocial,
IsNull(venVendedores.Vendedor_Id, '') Vendedor_Id, IsNull(venVendedores.Nombre, '') VenNombre,
IsNull(venCobradores.Cobrador_Id, '') Cobrador_Id, IsNull( venCobradores.Nombre, '') CobNombre,
IsNull(SuePersonal.Legajo, 0) Legajo, IsNull(suePersonal.ApellidoPaterno, '') SueNombre
 FROM genEntidades
 INNER JOIN genUsuarios	ON genUsuarios.genUsuarios=genEntidades.Usuario_Id
 Left Outer Join venClientes On venClientes.genEntidades = genEntidades.genEntidades
 Left Outer Join comProveedores On comProveedores.genEntidades = genEntidades.genEntidades
 Left Outer Join venVendedores On venVendedores.venVendedores = genEntidades.genEntidades
 Left Outer Join venCobradores On venCobradores.venCobradores = genEntidades.genEntidades
 Left Outer Join suePersonal On suePersonal.genEntidades = genEntidades.genEntidades
 Where 
 genEntidades.genEntidades = @pgenEntidades
GO

Drop Procedure genEntidadesDatosCuit
Go
Create Procedure genEntidadesDatosCuit(
@pCuit varChar(25),
@pTipoDoc char(1),
@pidFiscal varChar(20)
)
As
SELECT genEntidades.genEntidades, genEntidades.FechaAlta, genEntidades.Usuario_Id, 
genEntidades.Cuit, genEntidades.TipoDoc, genEntidades.idFiscal, genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
IsNull(venClientes.Cliente_Id, '') Cliente_Id, IsNull(venClientes.RazonSocial, '') ClieRazonSocial,
IsNull(comProveedores.Proveed_Id, '') Proveed_Id, IsNull(comProveedores.RazonSocial, '') ProvRazonSocial,
IsNull(venVendedores.Vendedor_Id, '') Vendedor_Id, IsNull(venVendedores.Nombre, '') VenNombre,
IsNull(venCobradores.Cobrador_Id, '') Cobrador_Id, IsNull( venCobradores.Nombre, '') CobNombre,
IsNull(SuePersonal.Legajo, 0) Legajo, IsNull(suePersonal.ApellidoPaterno, '') SueNombre
 FROM genEntidades
 INNER JOIN genUsuarios	ON genUsuarios.genUsuarios=genEntidades.Usuario_Id
 Left Outer Join venClientes On venClientes.genEntidades = genEntidades.genEntidades
 Left Outer Join comProveedores On comProveedores.genEntidades = genEntidades.genEntidades
 Left Outer Join venVendedores On venVendedores.venVendedores = genEntidades.genEntidades
 Left Outer Join venCobradores On venCobradores.venCobradores = genEntidades.genEntidades
 Left Outer Join suePersonal On suePersonal.genEntidades = genEntidades.genEntidades
 Where genEntidades.Cuit = @pCuit And genEntidades.TipoDoc = @pTipoDoc And genEntidades.IdFiscal = @pidFiscal
 Go

Drop Procedure genEntidadesEliminar
GO
Create Procedure genEntidadesEliminar(
@pgenEntidades bigint 
) 
AS 
SET NOCOUNT ON  
DELETE FROM genEntidades 
	 Where 
 genEntidades.genEntidades = @pgenEntidades
 RETURN @@Error 

GO

GO
	
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genEntidadesBasicas.sql*/
DROP PROCEDURE genEntidadesBasicasGuardar
GO
CREATE PROCEDURE genEntidadesBasicasGuardar
(
@pEntidad_Id int,
@pDescripcion varchar(150)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genEntidadesBasicas WHERE (Entidad_Id = @pEntidad_Id)))
BEGIN 
	UPDATE genEntidadesBasicas
	SET		Descripcion = @pDescripcion
	WHERE (Entidad_Id = @pEntidad_Id)
END 
ELSE 
BEGIN 
	INSERT INTO genEntidadesBasicas
	(
		Entidad_Id,
		Descripcion
	)
	VALUES 
	(
		@pEntidad_Id,
		@pDescripcion
	)
END 

GO

DROP PROCEDURE genEntidadesBasicasDatos
GO
CREATE PROCEDURE genEntidadesBasicasDatos
(
@pEntidad_Id int
)
AS
SET NOCOUNT ON 

SELECT genEntidadesBasicas.Entidad_Id, genEntidadesBasicas.Descripcion
FROM genEntidadesBasicas 
WHERE (Entidad_Id = @pEntidad_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE genEntidadesBasicasEliminar
GO
CREATE PROCEDURE genEntidadesBasicasEliminar
(
@pEntidad_Id int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM genEntidadesBasicas 
WHERE (Entidad_Id = ISNULL(@pEntidad_Id, Entidad_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genEntidadesBasicasValor.sql*/
DROP PROCEDURE genEntidadesBasicasValorGuardar
GO
CREATE PROCEDURE genEntidadesBasicasValorGuardar
(
@pEntidad_Id int,
@pDominio_Id char(2),
@pClave varchar(20),
@pDescripcion varchar(200)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genEntidadesBasicasValor WHERE (Entidad_Id = @pEntidad_Id) AND (Dominio_Id = @pDominio_Id) AND (Clave = @pClave)))
BEGIN 
	UPDATE genEntidadesBasicasValor
	SET		Descripcion = @pDescripcion
	WHERE (Entidad_Id = @pEntidad_Id) AND (Dominio_Id = @pDominio_Id) AND (Clave = @pClave)
END 
ELSE 
BEGIN 
	INSERT INTO genEntidadesBasicasValor
	(
		Entidad_Id,
		Dominio_Id,
		Clave,
		Descripcion
	)
	VALUES 
	(
		@pEntidad_Id,
		@pDominio_Id,
		@pClave,
		@pDescripcion
	)
END 

GO

DROP PROCEDURE genEntidadesBasicasValorDatos
GO
CREATE PROCEDURE genEntidadesBasicasValorDatos
(
@pEntidad_Id int,
@pDominio_Id char(2),
@pClave varchar(20)
)
AS
SET NOCOUNT ON 

SELECT genEntidadesBasicasValor.Entidad_Id, genEntidadesBasicas.Descripcion as DescripcionEntidadesBasicas, genEntidadesBasicasValor.Dominio_Id, genDominios.Descripcion as DescripcionDominios,
	genEntidadesBasicasValor.Clave, genEntidadesBasicasValor.Descripcion
FROM genEntidadesBasicasValor 
INNER JOIN genEntidadesBasicas  ON (genEntidadesBasicas.Entidad_Id = genEntidadesBasicasValor.Entidad_Id)
INNER JOIN genDominios  ON (genDominios.Dominio_Id = genEntidadesBasicasValor.Dominio_Id)
WHERE (genEntidadesBasicasValor.Entidad_Id = @pEntidad_Id)
AND (genEntidadesBasicasValor.Dominio_Id = @pDominio_Id)
AND (Clave = @pClave)
 
 RETURN @@Error 

GO

DROP PROCEDURE genEntidadesBasicasValorEliminar
GO
CREATE PROCEDURE genEntidadesBasicasValorEliminar
(
@pEntidad_Id int,
@pDominio_Id char(2),
@pClave varchar(20) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM genEntidadesBasicasValor 
WHERE (genEntidadesBasicasValor.Entidad_Id = @pEntidad_Id)
AND (Dominio_Id = @pDominio_Id)
AND (Clave = ISNULL(@pClave, Clave))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genFavoritosUsuarios.sql*/
DROP PROCEDURE genFavoritosUsuariosGuardar
GO
CREATE PROCEDURE genFavoritosUsuariosGuardar
(
@pUsuario_Id int,
@pFormulario_id varchar(30)
)
AS
SET NOCOUNT ON 

IF (NOT EXISTS (SELECT 1 FROM genFavoritosUsuarios WHERE (Usuario_Id = @pUsuario_Id) AND (OrdenFormularioMenu = dbo.FuncFKgenMenusFormulario(@pFormulario_id))))
BEGIN 
	---Esta tabla no puede tener mas de 12 registros
	DELETE FROM genFavoritosUsuarios 
	WHERE 
	(Usuario_Id = @pUsuario_Id) AND
	OrdenFormularioMenu NOT IN (SELECT TOP 11 OrdenFormularioMenu FROM genFavoritosUsuarios 
		where 
			genFavoritosUsuarios.Usuario_Id = @pUsuario_Id 
	ORDER BY FechaRegistro DESC)

	
	INSERT INTO genFavoritosUsuarios
	(
		Usuario_Id,
		OrdenFormularioMenu,
		FechaRegistro
	)
	VALUES 
	(
		@pUsuario_Id,
		dbo.FuncFKgenMenusFormulario(@pFormulario_id),
		GETDATE()
	)
END 

GO

DROP PROCEDURE genFavoritosUsuariosDatos
GO
CREATE PROCEDURE genFavoritosUsuariosDatos
(
@pUsuario_Id int
)
AS
SET NOCOUNT ON 
Select '' as Formulario_Id

SELECT 	disFormularios.Formulario_Id, disFormularios.Titulo, mn2.Opcion as Modulo, mn1.Orden
FROM genFavoritosUsuarios 
INNER JOIN genMenus mn1 ON (mn1.Orden = genFavoritosUsuarios.OrdenFormularioMenu)
INNER JOIN disFormularios  ON (mn1.Formulario_Id = disFormularios.disFormularios)
INNER JOIN genMenus mn2 on SUBSTRING(mn2.Orden, 1, 1) = SUBSTRING(mn1.Orden, 1, 1) And mn2.Nivel = 1
WHERE (genFavoritosUsuarios.Usuario_Id = @pUsuario_Id)
--ORDER BY genFavoritosUsuarios.FechaRegistro DESC 
ORDER BY mn1.orden 
 RETURN @@Error 

GO

DROP PROCEDURE genFavoritosUsuariosEliminar
GO
CREATE PROCEDURE genFavoritosUsuariosEliminar
(
@pUsuario_Id int,
@pFormulario_id varchar(30)
)
AS
SET NOCOUNT ON 

DELETE FROM genFavoritosUsuarios 
WHERE (Usuario_Id = @pUsuario_Id)
AND (OrdenFormularioMenu = dbo.FuncFKgenMenusFormulario(@pFormulario_id))
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genFechasAplicacion.sql*/
DROP PROCEDURE genFechasAplicacion
GO
CREATE PROCEDURE genFechasAplicacion(@Asiento_id bigint, @Asiento_Id_Ap bigint)

as

Select conAsientos.Fecha, conAsientosAp.Fecha as Fecha_Ap, 
	genEmpresas.FechaCierreCompras, genEmpresas.FechaCierreVentas, 
	case when comMovProv.comMovProv IS NULL Or conAsientos.Formulario_Id = dbo.FuncFKdisFormularios('frmcomProvSaldoIni') THEN 'N' ELSE 'S' END AS EsCompras,
	case when venMovimientos.venMovimientos IS NULL Or conAsientos.Formulario_Id = dbo.FuncFKdisFormularios('frmvenClientesSaldoIni') THEN 'N' ELSE 'S' END AS EsVentas,
	case when comMovProvAP.comMovProv IS NULL Or conAsientos.Formulario_Id = dbo.FuncFKdisFormularios('frmcomProvSaldoIni') THEN 'N' ELSE 'S' END AS EsCompras_Ap,
	case when venMovimientosAP.venMovimientos IS NULL Or conAsientos.Formulario_Id = dbo.FuncFKdisFormularios('frmvenClientesSaldoIni') THEN 'N' ELSE 'S' END AS EsVentas_AP,
	conAsientos.conAsientos as Asiento_Id,
	conAsientosAp.conAsientos as Asiento_Id_Ap,
	conAsientos.Cambio, conAsientosAp.Cambio Cambio_Ap
From conAsientos
Cross Join conAsientos as conAsientosAp
Inner Join genEmpresas ON genEmpresas.genEmpresas = conAsientosAp.Empresa_Id
Left Join comMovProv on comMovProv.comMovProv = conAsientos.conAsientos
Left Join venMovimientos on venMovimientos.venMovimientos = conAsientos.conAsientos
Left Join comMovProv comMovProvAP on comMovProvAP.comMovProv = conAsientosAp.conAsientos
Left Join venMovimientos as venMovimientosAP on venMovimientosAP.venMovimientos = conAsientosAp.conAsientos

Where
conAsientos.conAsientos = @Asiento_id and 
conAsientosAp.conAsientos = @Asiento_Id_Ap

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genGlobales.sql*/

Drop Procedure genGlobalesGuardar
GO
Create Procedure genGlobalesGuardar
(
@pEmpresa_Id int, 
@pNombre_Var char(25), 
@pDescripcion varchar(100), 
@pTipo char(1), 
@pLongitud smallint, 
@pDecimales numeric(5), 
@pnValor numeric(18,4) = null,
@pcValor varchar(200) = null, 
@pfValor DateTime=NULL ,
@pmValor varChar(max) = null,
@pSubSistema char(3), 
@pSoloLectura numeric(5), 
@plupIdentidad varchar(30), 
@pWhereF10 VarChar(max)=NULL
) 
AS 
SET NOCOUNT ON  
IF (EXISTS (SELECT 1 FROM genGlobales WHERE 
	Empresa_Id = @pEmpresa_Id and 
	Nombre_Var = @pNombre_Var
))
BEGIN 
	UPDATE genGlobales SET 
	Descripcion = @pDescripcion, 
	Tipo = @pTipo, 
	Longitud = @pLongitud, 
	Decimales = @pDecimales, 
	nValor = @pnValor, 
	cValor = @pcValor, 
	fValor = @pfValor,
	mValor = @pmValor, 
	SubSistema = @pSubSistema, 
	SoloLectura = @pSoloLectura, 
	lupIdentidad = @plupIdentidad, 
	WhereF10 = @pWhereF10
	WHERE 
	Empresa_Id = @pEmpresa_Id and 
	Nombre_Var = @pNombre_Var
 
END 
ELSE
BEGIN
	INSERT INTO  genGlobales
	(Empresa_Id , 
	Nombre_Var , 
	Descripcion , 
	Tipo , 
	Longitud , 
	Decimales , 
	nValor , 
	cValor ,
	fValor,
	mValor, 
	SubSistema , 
	SoloLectura , 
	lupIdentidad , 
	WhereF10) 
	Values 
	(@pEmpresa_Id , 
	@pNombre_Var , 
	@pDescripcion , 
	@pTipo , 
	@pLongitud , 
	@pDecimales , 
	@pnValor , 
	@pcValor , 
	@pfValor,
	@pmValor,
	@pSubSistema , 
	@pSoloLectura , 
	@plupIdentidad , 
	@pWhereF10) 
END
RETURN @@Error 

GO
Drop Procedure genGlobalesDatos
GO
CREATE PROCEDURE genGlobalesDatos(
@pEmpresa_Id int,
@pNombre_Var char (25)
)
AS
SELECT genGlobales.Empresa_Id, genGlobales.Nombre_Var, genGlobales.Descripcion, 
genGlobales.Tipo, genGlobales.Longitud, genGlobales.Decimales, 
genGlobales.nValor, genGlobales.cValor, genGlobales.fValor, genGlobales.mValor,
genGlobales.SubSistema, genGlobales.SoloLectura, genGlobales.lupIdentidad, 
genGlobales.WhereF10, genEmpresas.Detalle as DescripcionEmpresa
 FROM genGlobales  INNER JOIN genEmpresas
	ON genEmpresas.genEmpresas=genGlobales.Empresa_Id
 Where 
	genGlobales.Empresa_Id = @pEmpresa_Id and 
	genGlobales.Nombre_Var = @pNombre_Var

GO
Drop Procedure genGlobalesEliminar
GO
Create Procedure genGlobalesEliminar(
@pEmpresa_Id int, 
@pNombre_Var char (25)
 
) 
AS 
SET NOCOUNT ON  
DELETE FROM genGlobales 
	 Where 
	genGlobales.Empresa_Id = @pEmpresa_Id and 
	genGlobales.Nombre_Var = @pNombre_Var
 
 RETURN @@Error 

GO

Drop Procedure genGlobalesSet
Go
Create Procedure genGlobalesSet(
@pEmpresa_Id int,
@pNombre_Var char(25),
@pnValor Numeric(18,4) = Null,
@pcValor varChar(200) = Null,
@pfValor Datetime = Null,
@pmValor varChar(max) = Null
)
As
Update genGlobales Set nValor = @pnValor, cValor = @pcValor, fValor = @pfValor, mValor = @pmValor Where Nombre_Var = @pNombre_Var and 
	Empresa_Id = @pEmpresa_Id  
Go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genGrupos.sql*/
--genGruposPertence 'ADMINSUMMA',1

DROP PROCEDURE genGruposPertence
GO
CREATE PROCEDURE genGruposPertence
(
	@Grupo_id VarChar(25),
	@Usuario_id int
)
as

DECLARE @Pertenese as Bit = 0
DECLARE @Usu1 as int

set @Usu1 = (SELECT genUsuarios from genUsuarios where 
			genUsuarios.Usuario_id = @Grupo_id)
if (@Usu1 = @Usuario_id )
	BEGIN
		SET @Pertenese = 1
	END
ELSE
	BEGIN
		set @Usu1 = (SELECT COUNT(1) 
			FROM 
				genGrupos INNER JOIN genUsuarios ON 
				genGrupos.Grupo_id = genUsuarios.genUsuarios
				Where
				genUsuarios.Usuario_id = @Grupo_id and 
				genGrupos.Usuario_id =@Usuario_id)
				
		if (@Usu1>0)
		BEGIN
			SET @Pertenese = 1		
		END	
	END
	SELECT @Grupo_id as Grupo_id, @Pertenese AS Pertenese
GO	 		


DROP PROCEDURE genGruposDatos
GO
CREATE PROCEDURE genGruposDatos
(
	@Usuario_Id varchar(25)
)
as
declare @Grupo_Id as int
set @Grupo_Id=(select genUsuarios from genUsuarios where genUsuarios.Usuario_Id=@Usuario_Id)

select genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres,' ' as GrupoNuevo, cast(0 as bit) as Posteado, 
	cast(case when Empresa_Id IS NULL then 1 else 0 end as bit) as PTEmpresas, genUsuarios.genUsuarios
from genUsuarios
WHERE genUsuarios.Usuario_Id=@Usuario_Id


select genGrupos.Usuario_Id, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres
from genUsuarios
inner join genGrupos on genUsuarios.genUsuarios=genGrupos.Usuario_Id

where genGrupos.Grupo_Id=@Grupo_Id

GO	 



DROP PROCEDURE genGruposGuardar
GO
CREATE PROCEDURE genGruposGuardar
(
@Usuario_Id int, 
@Grupo_Id int
)
AS
SET NOCOUNT ON  
	if(EXISTS(select 1 from genGrupos where Usuario_Id=@Usuario_Id and Grupo_Id=@Grupo_Id))
BEGIN
	UPDATE genGrupos
	SET		
		Usuario_id = @Usuario_id,
		Grupo_Id = @Grupo_Id
END
ELSE
BEGIN		
	INSERT INTO genGrupos
	(
		Usuario_id,
		Grupo_Id
	)
	VALUES 
	(
		@Usuario_id,
		@Grupo_Id
	)
END 
GO

DROP PROCEDURE genGruposEliminar
GO
CREATE PROCEDURE genGruposEliminar
(
@Grupo_Id int,
@Usuario_Id int=NULL
)
AS
SET NOCOUNT ON 

DELETE FROM genGrupos
WHERE  Usuario_Id= ISNULL(@Usuario_Id,Usuario_Id) And Grupo_Id = @Grupo_Id
 
RETURN @@Error 

GO

exec genGruposEliminar 5,null
--exec genGruposGuardar 3, 5
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genHorariosIngreso.sql*/
drop Procedure genHorariosIngreso
go
create Procedure genHorariosIngreso
(
    @pUsuario_Id int,
    @pHora datetime=null
    
)
AS

select Lunes, Martes, Miercoles, Jueves, Viernes, Sabado, Domingo, Festivos, HoraDesde, HoraHasta
from genDiasLogin
left join genDiasFestivos on genDiasFestivos.Fecha=dbo.FechaSinHora(@pHora)
 where @pUsuario_Id=Usuario_Id and
dbo.HoraActual(@pHora) between HoraDesde and HoraHasta AND
(genDiasFestivos.Fecha is null or genDiasLogin.Festivos=1)
go

drop Procedure genHorariosIngresoGuardar
go
create Procedure genHorariosIngresoGuardar
(
    @pUsuario_Id varchar(25),
    @pLunes SiNo,
    @pMartes SiNo,
    @pMiercoles SiNo,
    @pJueves SiNo,
    @pViernes SiNo,
    @pSabado SiNo,
    @pDomingo SiNo,
    @pFestivo SiNo,
    @pHoraDesde char(5),
    @pHoraHasta char(5)
)
as
insert into genDiasLogin (Lunes, Martes, Miercoles, Jueves, Viernes, Sabado, Domingo,
Festivos,HoraDesde, HoraHasta, Usuario_Id) VALUES 
(@pLunes, @pMartes, @pMiercoles, @pJueves, @pViernes, @pSabado, @pDomingo, @pFestivo,
@pHoraDesde, @pHoraHasta, dbo.FuncFKgenUsuarios(@pUsuario_Id))

go

drop  PROCEDURE genHorariosIngresoEliminar
go
create PROCEDURE genHorariosIngresoEliminar
(
    @pUsuario_Id varchar(25)
    
)
as
delete genDiasLogin where Usuario_Id=dbo.FuncFKgenUsuarios(@pUsuario_Id)
go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genInstalacion.sql*/
DROP PROCEDURE genInstalacionGuardar
GO
CREATE PROCEDURE genInstalacionGuardar
(
@pDominio_Id char(2) = NULL,
@pLIcencias int,
@pRptServidor varchar(200) = NULL,
@pRptCarpeta varchar(200) = NULL,
@pRptUsuario varchar(200) = NULL,
@pRptClave varchar(200) = NULL,
@pRptDominio varchar(200) = NULL, 
@pUsoHorario int,
@pLicencia VarChar(36)= NULL, 
@pClave VarChar(max) = NULL, 
@pFechaVencimiento DateTime=NULL, 
@pPorEmpresa Bit, 
@pTamanioHoja VarChar(15)=NULL, 
@pLongitudClave Int,
@pDiasDuracionClave Int,
@pLoginGracia Int,
@pCantIntentosFallidos Int,
@pClaveSimbolos Bit,
@pClaveNumero Bit,
@pClaveMayuscula Bit,
@pClaveMinuscula Bit,
@pClaveComunes Bit,
@pconDigiCta smallint,
@pconDigiSubCta smallint,
@pcontMascaraCuenta VarChar(25)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genInstalacion))
BEGIN 
	UPDATE genInstalacion
	SET		Dominio_Id = @pDominio_Id,
		LIcencias = @pLIcencias,
		RptServidor = @pRptServidor,
		RptCarpeta = @pRptCarpeta,
		RptUsuario = @pRptUsuario,
		RptClave = @pRptClave,
		RptDominio = @pRptDominio, 
		Licencia = @pLicencia, 
		Clave = @pClave, 
		FechaVencimiento = @pFechaVencimiento, 
		UsoHorario = @pUsoHorario, 
		PorEmpresa =@pPorEmpresa, 
		TamanioHoja =@pTamanioHoja, 
		LongitudClave = @pLongitudClave,
		DiasDuracionClave = @pDiasDuracionClave,
		LoginGracia = @pLoginGracia,
		CantIntentosFallidos = @pCantIntentosFallidos ,
		ClaveSimbolos = @pClaveSimbolos ,
		ClaveNumero = @pClaveNumero ,
		ClaveMayuscula = @pClaveMayuscula,
		ClaveMinuscula = @pClaveMinuscula,
		ClaveComunes  = @pClaveComunes,
		conDigiCta = @pconDigiCta, 
		conDigiSubCta = @pconDigiSubCta, 
		contMascaraCuenta = @pcontMascaraCuenta
END 
ELSE 
BEGIN 
	INSERT INTO genInstalacion
	(
		Dominio_Id,
		LIcencias,
		RptServidor,
		RptCarpeta,
		RptUsuario,
		RptClave,
		RptDominio, 
		UsoHorario,
		Licencia, 
		Clave, 
		FechaVencimiento, 
		PorEmpresa, 
		TamanioHoja,
		LongitudClave ,
		DiasDuracionClave ,
		LoginGracia ,
		CantIntentosFallidos ,
		ClaveSimbolos ,
		ClaveNumero ,
		ClaveMayuscula ,
		ClaveMinuscula,
		ClaveComunes,
		conDigiCta, 
		conDigiSubCta,
		contMascaraCuenta
		 	)
	VALUES 
	(
		@pDominio_Id,
		@pLIcencias,
		@pRptServidor,
		@pRptCarpeta,
		@pRptUsuario,
		@pRptClave,
		@pRptDominio, 
		@pLicencia, 
		@pClave, 
		@pFechaVencimiento, 
		@pUsoHorario, 
		@pPorEmpresa, 
		@pTamanioHoja, 
		@pLongitudClave ,
		@pDiasDuracionClave ,
		@pLoginGracia ,
		@pCantIntentosFallidos ,
		@pClaveSimbolos ,
		@pClaveNumero ,
		@pClaveMayuscula ,
		@pClaveMinuscula ,
		@pClaveComunes,
		@pconDigiCta, 
		@pconDigiSubCta,
		@pcontMascaraCuenta
	)
END 

GO

DROP PROCEDURE genInstalacionDatos
GO
CREATE PROCEDURE genInstalacionDatos
AS
SET NOCOUNT ON 

SELECT genInstalacion.Dominio_Id, genDominios.Descripcion as DescripcionDominios, genInstalacion.Licencias, genInstalacion.RptServidor,
	genInstalacion.RptCarpeta, genInstalacion.RptUsuario, genInstalacion.RptClave, 
		genInstalacion.RptDominio, genInstalacion.Licencia, genInstalacion.Clave, 
		genInstalacion.FechaVencimiento, genInstalacion.UsoHorario, genInstalacion.PorEmpresa, 
			genInstalacion.TamanioHoja, genInstalacion.LongitudClave ,
		genInstalacion.DiasDuracionClave ,genInstalacion.LoginGracia ,
		genInstalacion.CantIntentosFallidos ,genInstalacion.ClaveSimbolos ,
		genInstalacion.ClaveNumero ,genInstalacion.ClaveMayuscula ,
		genInstalacion.ClaveMinuscula,genInstalacion.ClaveComunes ,
		genInstalacion.conDigiCta, genInstalacion.conDigiSubCta, genInstalacion.contMascaraCuenta,
		genInstalacion.TwoFactor, EntrarSiFallaCorreo, DuracionCookie
FROM genInstalacion 
LEFT JOIN genDominios  ON (genDominios.Dominio_Id = genInstalacion.Dominio_Id)

RETURN @@Error 

GO



DROP PROCEDURE genInstalacionSeguridadGuardar
GO
CREATE PROCEDURE genInstalacionSeguridadGuardar
(
@pDominio_Id char(2) = NULL,
@pUsoHorario int,
@pTamanioHoja VarChar(15)=NULL, 
@pLongitudClave Int,
@pDiasDuracionClave Int,
@pLoginGracia Int,
@pCantIntentosFallidos Int,
@pClaveSimbolos Bit,
@pClaveNumero Bit,
@pClaveMayuscula Bit,
@pClaveMinuscula Bit,
@pClaveComunes Bit, 
@pconDigiCta smallint,
@pconDigiSubCta smallint,
@pcontMascaraCuenta VarChar(25),
@pTwoFactor SiNo,
@pEntrarSiFallaCorreo bit,
@pDuracionCookie int
)
AS
SET NOCOUNT ON 

	UPDATE genInstalacion
	SET		Dominio_Id = @pDominio_Id,
		UsoHorario = @pUsoHorario, 
		TamanioHoja =@pTamanioHoja, 
		LongitudClave = @pLongitudClave,
		DiasDuracionClave = @pDiasDuracionClave,
		LoginGracia = @pLoginGracia,
		CantIntentosFallidos = @pCantIntentosFallidos ,
		ClaveSimbolos = @pClaveSimbolos ,
		ClaveNumero = @pClaveNumero ,
		ClaveMayuscula = @pClaveMayuscula,
		ClaveMinuscula = @pClaveMinuscula,
		ClaveComunes  = @pClaveComunes,
		conDigiCta = @pconDigiCta, 
		conDigiSubCta = @pconDigiSubCta, 
		contMascaraCuenta = @pcontMascaraCuenta,
		TwoFactor=@pTwoFactor,
		EntrarSiFallaCorreo=@pEntrarSiFallaCorreo,
		DuracionCookie=@pDuracionCookie

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genJurisCoeficientes.sql*/
DROP PROCEDURE genJurisCoeficientesGuardar
GO
CREATE PROCEDURE genJurisCoeficientesGuardar
(
@pgenEntidades bigint,
@pJuris_Id varChar(3),
@pSituacion char(1),
@pCoeficiente qMonedaD4,
@pExencion qPorcentaje,
@pFechaHasta qFecha = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genJurisCoeficientes WHERE (genEntidades = @pgenEntidades) AND Juris_Id = dbo.FuncFKimpJurisdicciones(@pJuris_Id)))
BEGIN 
	UPDATE genJurisCoeficientes
	SET Situacion = @pSituacion,
		Coeficiente = @pCoeficiente,
		Exencion = @pExencion,
		FechaHasta = @pFechaHasta
	WHERE (genEntidades = @pgenEntidades) AND (Juris_Id = dbo.FuncFKimpJurisdicciones(@pJuris_Id))
END 
ELSE 
BEGIN 
	INSERT INTO genJurisCoeficientes
	(
		genEntidades,
		Juris_Id,
		Situacion,
		Coeficiente,
		Exencion,
		FechaHasta
	)
	VALUES 
	(
		@pgenEntidades,
		dbo.FuncFKimpJurisdicciones(@pJuris_Id),
		@pSituacion,
		@pCoeficiente,
		@pExencion,
		@pFechaHasta
	)
END 

GO

DROP PROCEDURE genJurisCoeficientesDatos
GO
CREATE PROCEDURE genJurisCoeficientesDatos
(
@pgenEntidades bigint,
@pJuris_Id varChar(3) = Null
)
AS
SET NOCOUNT ON 

SELECT genEntidades.genEntidades, 
	impJurisdicciones.Juris_Id, impJurisdicciones.Descripcion as DescripcionJurisdicciones, genJurisCoeficientes.Situacion,
	genJurisCoeficientes.Coeficiente, genJurisCoeficientes.Exencion, genJurisCoeficientes.FechaHasta
FROM genJurisCoeficientes 
INNER JOIN genEntidades  ON (genEntidades.genEntidades = genJurisCoeficientes.genEntidades)
INNER JOIN impJurisdicciones  ON (impJurisdicciones.impJurisdicciones = genJurisCoeficientes.Juris_Id)
WHERE (genJurisCoeficientes.genEntidades = @pgenEntidades)
AND genJurisCoeficientes.Juris_Id = IsNull(dbo.FuncFKimpJurisdicciones(@pJuris_Id), genJurisCoeficientes.Juris_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE genJurisCoeficientesEliminar
GO
CREATE PROCEDURE genJurisCoeficientesEliminar
(
@pgenEntidades bigint,
@pJuris_Id varchar(3) = Null
)
AS
SET NOCOUNT ON 

DELETE FROM genJurisCoeficientes 
WHERE genEntidades = @pgenEntidades 
AND Juris_Id = IsNull(dbo.FuncFKimpJurisdicciones(@pJuris_Id), Juris_Id)
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genLexico.sql*/
DROP PROCEDURE genLexicoDatos
GO
CREATE PROCEDURE genLexicoDatos
(
@pSetFunciones varchar(20)
)
AS
SET NOCOUNT ON 

SELECT genLexico.SetFunciones, genLexico.Funcion, genLexico.Descripcion, genLexico.Token,
	genLexico.TipoDato
FROM genLexico 
WHERE SetFunciones = @pSetFunciones Or SetFunciones = ''
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genLicencia.sql*/
drop procedure genLicenciaGuardar
go
create procedure genLicenciaGuardar
(
    @pFecha datetime,
    @pUsuarios int,
    @pClave varchar(max),
    @pPorEmpresa bit,
    @pLicencia varchar(36)
)
as
update genInstalacion set Licencias=@pUsuarios, Clave=@pClave, FechaVencimiento=@pFecha, PorEmpresa=@pPorEmpresa 
WHERE Licencia=@pLicencia
go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genLinksAyuda.sql*/
DROP PROCEDURE genLinksAyudaGuardar
GO
CREATE PROCEDURE genLinksAyudaGuardar
(
@pCodigoLnk varchar(25),
@pDominio_Id varchar(2),
@pDescripcion varchar(150),
@pLink varchar(max)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genLinksAyuda WHERE (CodigoLnk = @pCodigoLnk) AND (Dominio_Id = @pDominio_Id)))
BEGIN 
	UPDATE genLinksAyuda
	SET		Descripcion = @pDescripcion,
		Link = @pLink
	WHERE (CodigoLnk = @pCodigoLnk) AND (Dominio_Id = @pDominio_Id)
END 
ELSE 
BEGIN 
	INSERT INTO genLinksAyuda
	(
		CodigoLnk,
		Dominio_Id,
		Descripcion,
		Link
	)
	VALUES 
	(
		@pCodigoLnk,
		@pDominio_Id,
		@pDescripcion,
		@pLink
	)
END 

GO

DROP PROCEDURE genLinksAyudaDatos
GO
CREATE PROCEDURE genLinksAyudaDatos
(
@pCodigoLnk varchar(25),
@pDominio_Id varchar(2)
)
AS
SET NOCOUNT ON 

IF (EXISTS (SELECT 1 FROM genLinksAyuda WHERE (CodigoLnk = @pCodigoLnk) AND (Dominio_Id = @pDominio_Id)))
BEGIN
	SELECT genLinksAyuda.CodigoLnk, genLinksAyuda.Dominio_Id, genLinksAyuda.Descripcion, genLinksAyuda.Link
	FROM genLinksAyuda 
	WHERE (CodigoLnk = @pCodigoLnk)
	AND (Dominio_Id = @pDominio_Id)
END
ELSE
BEGIN
	SELECT genLinksAyuda.CodigoLnk, genLinksAyuda.Dominio_Id, genLinksAyuda.Descripcion, genLinksAyuda.Link
	FROM genLinksAyuda 
	WHERE (CodigoLnk = @pCodigoLnk)
	AND (Dominio_Id = '')
END
 
 RETURN @@Error 

GO

DROP PROCEDURE genLinksAyudaEliminar
GO
CREATE PROCEDURE genLinksAyudaEliminar
(
@pCodigoLnk varchar(25) = NULL,
@pDominio_Id varchar(2) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM genLinksAyuda 
WHERE (CodigoLnk = ISNULL(@pCodigoLnk, CodigoLnk))
AND (Dominio_Id = ISNULL(@pDominio_Id, Dominio_Id))
 
 RETURN @@Error 

GO


DROP PROCEDURE genLinksAyudaDatosTodos
GO
CREATE PROCEDURE genLinksAyudaDatosTodos
AS
SET NOCOUNT ON 

SELECT distinct genLinksAyuda.CodigoLnk
FROM genLinksAyuda 
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genLogRequest.sql*/
DROP PROCEDURE genLogRequestGuardar
GO
CREATE PROCEDURE genLogRequestGuardar
(
@pNombreClase varchar(254),
@pEmpresa_Id int,
@pTipo varchar(100),
@pRequest varchar(max),
@pRequestEsp varchar(max)=NULL,
@pAccion varchar(254)=NULL,
@pFormulario_Id varchar(100),
@pUsuario_Id int,
@pSegmento_Id varChar(10) = Null,
@pSegmento1C varchar(20) = Null,
@pSegmento2C varchar(20) = Null,
@pSegmento3C varchar(20) = Null,
@pSegmento4C varchar(20) = Null,
@pSegmento1N int = Null,
@pSegmento2N int = Null,
@pSegmento3N int = Null,
@pSegmento4N int = Null
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
	INSERT INTO genLogRequest
	(
		Empresa_Id,
		NombreClase,
		Tipo,
		Request,
		RequestEsp,
		Accion,
		FechaRegistro,
		Formulario_Id,
		Usuario_Id,
		Segmento_Id,
		Segmento1C,
		Segmento2C,
		Segmento3C,
		Segmento4C,
		Segmento1N,
		Segmento2N,
		Segmento3N,
		Segmento4N
	)
	VALUES 
	(
		@pEmpresa_Id,
		@pNombreClase,
		@pTipo,
		@pRequest,
		@pRequestEsp,
		@pAccion,
		getDate(),
		@pFormulario_Id,
		@pUsuario_Id,
		dbo.funcFKgenSegmentos(@pSegmento_Id),
		@pSegmento1C,
		@pSegmento2C,
		@pSegmento3C,
		@pSegmento4C,
		@pSegmento1N,
		@pSegmento2N,
		@pSegmento3N,
		@pSegmento4N
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
	Select @lIdentidad as RetVal 

GO

DROP PROCEDURE genLogRequestDatos
GO
CREATE PROCEDURE genLogRequestDatos
(
@pgenLogRequest int

)
AS
SET NOCOUNT ON 

SELECT genLogRequest, genLogRequest.Empresa_Id, NombreClase, Tipo, Request, RequestEsp, Accion, FechaRegistro, Formulario_Id, genLogRequest.Usuario_Id, 
genSegmentos.Segmento_Id, Segmento1C, Segmento2C, Segmento3C, Segmento4C, Segmento1N, Segmento2N, Segmento3N, Segmento4N
FROM genLogRequest
Left Join genSegmentos On genSegmentos.genSegmentos = genLogRequest.Segmento_Id
WHERE genLogRequest= @pgenLogRequest 

RETURN @@Error 

GO

DROP PROCEDURE genLogRequestEliminar
GO
CREATE PROCEDURE genLogRequestEliminar
(
@pgenLogRequest int
)
AS
SET NOCOUNT ON 

DELETE FROM genLogRequest 
WHERE genLogRequest= @pgenLogRequest 

RETURN @@Error 

GO
DROP PROCEDURE genLogRequestDatosTodos
GO
CREATE PROCEDURE genLogRequestDatosTodos
(
@pEmpresa_Id Int,
@pTipo varchar(100) = NULL
)
AS

Select @pTipo Tipo, '' Usuario_Id, '' DescripcionUsuario

SELECT genLogRequest, NombreClase, Tipo, Request, RequestEsp, Accion, FechaRegistro,genLogRequest.Formulario_Id, disFormularios.Titulo DescripcionFormulario, 
genLogRequest.Usuario_Id, genSegmentos.Segmento_Id, Segmento1C, Segmento2C, Segmento3C, Segmento4C, Segmento1N, Segmento2N, Segmento3N, Segmento4N,
dbo.Segmento(genLogRequest.Segmento_Id, Segmento1C, Segmento2C, Segmento2C, Segmento4C, Segmento1N, Segmento2N, Segmento3N, Segmento4N) Comprobante
FROM genLogRequest
Left Join genSegmentos On genSegmentos.genSegmentos = genLogRequest.Segmento_Id
Inner Join disFormularios On disFormularios.Formulario_Id = genLogRequest.Formulario_Id
WHERE Empresa_Id = @pEmpresa_Id And Tipo = ISNULL(@pTipo, Tipo)

RETURN @@Error 

GO

DROP PROCEDURE genLogRequestEliminarXSeg
GO
CREATE PROCEDURE genLogRequestEliminarXSeg
(
@pEmpresa_Id int,
@pSegmento_Id varChar(10),
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int
)
AS
SET NOCOUNT ON 

DELETE FROM genLogRequest 
WHERE 
Empresa_Id = @pEmpresa_Id And
Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) And
isNull(Segmento1C, '') = @pSegmento1C And
isNull(Segmento2C, '') = @pSegmento2C And
isNull(Segmento3C, '') = @pSegmento3C And
isNull(Segmento4C, '') = @pSegmento4C And
isNull(Segmento1N, 0) = @pSegmento1N And
isNull(Segmento2N, 0) = @pSegmento2N And
isNull(Segmento3N, 0) = @pSegmento3N And
isNull(Segmento4N, 0) = @pSegmento4N

RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genMensajes.sql*/
drop procedure genMensajesPantallaGuardar
go
create procedure genMensajesPantallaGuardar
(
@pgenMensaje int=null,
@pMensaje varchar(max),
@pUsuarioDestino varchar(25),
@pUsuarioRemi int,
@pFechaEmision datetime,
@pFechaDesde qFechaHora=null,
@pFechaHasta qFechaHora=null
)
as
if exists(select 1 from genMensajes where @pgenMensaje=Mensaje_Id) 
begin
update genMensajes set Mensaje=@pMensaje, FechaEmision=@pFechaEmision, FechaDesde=@pFechaDesde, FechaHasta=@pFechaHasta,
	Leido=null 
	Where
		Mensaje_Id = @pgenMensaje
end
else
begin
insert into genMensajes(Mensaje, Leido, Usuario_Id, UsuarioDestino, FechaEmision, FechaDesde, FechaHasta)
values (@pMensaje, null, @pUsuarioRemi, dbo.FuncFKgenUsuarios(@pUsuarioDestino),@pFechaEmision, @pFechaDesde, @pFechaHasta)
end
go

DROP PROCEDURE genMensajesGuardar
GO
CREATE PROCEDURE genMensajesGuardar
(
@pMensaje_Id int,
@pMensaje varchar(max),
@pLeido qFechaHora = NULL,
@pUsuario_Id int ,
@pUsuarioDestino VarChar(25),
@pFechaEmision qFechaHora,
@pFechaDesde qFechaHora=null,
@pFechaHasta qFechaHora=null,
@pFormulario varchar(30)=NULL,
@pParametros varchar(max)=NULL,
@pTipo varchar(20)=NULL,
@pSubTipo varchar(20)=NULL
)
AS
IF (@pMensaje_Id<>0) and exists(select 1 from genMensajes where Mensaje=@pMensaje)
BEGIN 
	UPDATE genMensajes
	SET		
		Mensaje = @pMensaje,
		Leido = @pLeido,
		Usuario_Id = @pUsuario_Id,
		UsuarioDestino = dbo.FuncFKgenUsuarios(@pUsuarioDestino),
		FechaEmision = @pFechaEmision,
		FechaDesde=@pFechaDesde,
		FechaHasta=@pFechaHasta,
		Formulario_Id= dbo.FuncFKdisFormularios(@pFormulario),
		Parametros=@pParametros,
		Tipo = @pTipo, 
		SubTipo = @pSubTipo
	WHERE 
		Mensaje_Id = @pMensaje_Id 
END 
ELSE 
BEGIN 
	INSERT INTO genMensajes
	(
		Mensaje,
		Leido,
		Usuario_Id,
		UsuarioDestino,
		FechaEmision,
		FechaDesde,
		FechaHasta,
		Formulario_Id,
		Parametros,
		Tipo, 
		SubTipo
	)
	VALUES 
	(
		@pMensaje,
		@pLeido,
		@pUsuario_Id,
		dbo.FuncFKgenUsuarios(@pUsuarioDestino),
		@pFechaEmision,
		@pFechaDesde,
		@pFechaHasta,
		dbo.FuncFKdisFormularios(@pFormulario),
		@pParametros,
		@pTipo, 
		@pSubTipo
	)
	SET @pMensaje_Id =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @pMensaje_Id as RetVal 

GO

DROP PROCEDURE genMensajesUsuario
GO
CREATE PROCEDURE genMensajesUsuario
(
	@pUsuario_id int, 
	@pPendientes bit,
	@pEmpresa int
)
AS
SET NOCOUNT ON 

select genUsuarios.genUsuarios, 
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario, 
	genUsuarios.Usuario_id, @pPendientes Pendientes
from genUsuarios
Where 
	genUsuarios.genUsuarios = @pUsuario_id



SELECT genMensajes.Mensaje_Id MensajeId, 
	genMensajes.FechaEmision, genMensajes.Leido as FechaLeido,
	genMensajes.Mensaje, genUsuarios.Usuario_id, 
		genUsuarios.Apellido_y_Nombres as DescripcionUsuario, 
		Cast(case when genMensajes.Leido is null then 0 else 1 end as bit) as Leido,
		disFormularios.disFormularios,disFormularios.Formulario_Id, genMensajes.FechaDesde, 
-- devuelvo tambien el titulo del formulario en Parametros (van concatenados con |) 
-- Esta soluci?n es temporal hasta que se modifique genMensajes y se alamcene el orden en el men? del formulario en lugar del formulario
		genMensajes.FechaHasta, isnull (genMensajes.Parametros, '') + isnull ('|' + disFormularios.Titulo, '') as Parametros,
		genMensajes.Tipo,	genMensajes.SubTipo
FROM genMensajes inner join genUsuarios on 
genMensajes.Usuario_id =genUsuarios.genUsuarios
LEFT join disFormularios on disFormularios.disFormularios=genMensajes.Formulario_Id
WHERE 
genMensajes.UsuarioDestino = @pUsuario_Id and 
(@pPendientes=0 or genMensajes.Leido is null) and
(dbo.FechaActual() between isnull(genMensajes.FechaDesde, dbo.FechaActual()) and isnull(genMensajes.FechaHasta,dbo.FechaActual())
/*or @pPendientes=0*/)
union all
select 0 as MensajeId, 
	getdate() as FechaEmision, cast(null as datetime) as FechaLeido,
	'Tiene_Ordenes_de_Compra_Por_Autorizar' as Mensaje, '' as Usuario_id, 
		'' as DescripcionUsuario, 
		cast(0 as bit) as Leido,
		0 as disFormularios,'frmcomOrdenCompPendAuto' as Formulario_Id, null, 
		null,'|Ordenes_de_Compra', NULL, NULL 
		Where exists(
Select distinct genUsuarios.Usuario_Id
from genUsuarios 
	left join genPermisos ON
		genPermisos.Formulario_Id = dbo.FuncFKdisFormularios('frmcomOrdenCompPendAuto') and
		genPermisos.Usuario_Id = genUsuarios.genUsuarios and 
		ISNULL(genPermisos.Empresa_Id,@pEmpresa)=@pEmpresa
		
	WHERE
		genUsuarios.genUsuarios = @pUsuario_id and 
		(genPermisos.Postear = 1  or genUsuarios.EsSupervisor = 1) and 
		exists(select 1 from comOrdenComp inner join comOCSegmentos on
			comOrdenComp.comOrdenComp = comOCSegmentos.comOrdenComp and 
			comOCSegmentos.Empresa_Id = @pEmpresa
			inner join comOCAutorizando on comOCAutorizando.Usuario_Id is null and comOCAutorizando.comOrdenComp=comOrdenComp.comOrdenComp
            inner join comNivelesAutoUsu on comNivelesAutoUsu.Usuario_Id=@pUsuario_Id and comNivelesAutoUsu.NivelAuto_Id=comOCAutorizando.NivelAuto_Id
		 where
			comOrdenComp.Estado_Id = 'P'))
			
Union all
-- Validacion Comercial
select 0 as MensajeId, 
	getdate() as FechaEmision, cast(null as datetime) as FechaLeido,
	'Tiene_Pedidos_Pendientes_de_Validar' as Mensaje, '' as Usuario_id, 
		'' as DescripcionUsuario, 
		cast(0 as bit) as Leido,
		0 as disFormularios,'frmvenPedidosVCAutoriza' as Formulario_Id, null, 
		null,'|Pedidos', NULL, NULL 
	
		Where exists(
Select distinct genUsuarios.Usuario_Id
from genUsuarios 
	left join genPermisos ON
		genPermisos.Formulario_Id = dbo.FuncFKdisFormularios('frmvenPedidosVCAutoriza') and
		genPermisos.Usuario_Id = genUsuarios.genUsuarios and 
		ISNULL(genPermisos.Empresa_Id,@pEmpresa)=@pEmpresa
		
	WHERE
		genUsuarios.genUsuarios = @pUsuario_id and 
		(genPermisos.Postear = 1  or genUsuarios.EsSupervisor = 1) and 
		exists(select 1 from venPedidos inner join venPediSegmentos on
			venPedidos.venPedidos = venPediSegmentos.venPedidos and 
			venPediSegmentos.Empresa_Id = @pEmpresa
		 where
			venPedidos.Estado = 'C'))
Union all
-- Validacion Credito y Cobranza
select 0 as MensajeId, 
	getdate() as FechaEmision, cast(null as datetime) as FechaLeido,
	'Tiene_Pedidos_Pendientes_de_Autorizar' as Mensaje, '' as Usuario_id, 
		'' as DescripcionUsuario, 
		cast(0 as bit) as Leido,
		0 as disFormularios,'frmvenPediAutoriza' as Formulario_Id, null, 
		null,'|Pedidos', NULL, NULL 
		Where exists(
Select distinct genUsuarios.Usuario_Id
from genUsuarios 
	left join genPermisos ON
		genPermisos.Formulario_Id = dbo.FuncFKdisFormularios('frmvenPediAutoriza') and
		genPermisos.Usuario_Id = genUsuarios.genUsuarios and 
		ISNULL(genPermisos.Empresa_Id,@pEmpresa)=@pEmpresa
		
	WHERE
		genUsuarios.genUsuarios = @pUsuario_id and 
		(genPermisos.Postear = 1  or genUsuarios.EsSupervisor = 1) and 
		exists(select 1 from venPedidos inner join venPediSegmentos on
			venPedidos.venPedidos = venPediSegmentos.venPedidos and 
			venPediSegmentos.Empresa_Id = @pEmpresa
		 where
			venPedidos.Estado = 'P' AND 
			venPedidos.UsuarioAutoriz_Id IS NULL AND 
			venPedidos.Motivo_Id IS NOT NULL))
ORDER BY 2 Desc, 1 Desc 


RETURN @@Error 


GO

DROP PROCEDURE genMensajesEliminar
GO
CREATE PROCEDURE genMensajesEliminar
(
	@pMensaje_Id int
)
AS
SET NOCOUNT ON 

DELETE FROM genMensajes 
	WHERE  genMensajes.Mensaje_Id =  @pMensaje_Id
	
RETURN @@Error 

GO



DROP PROCEDURE genMensajesDatos
GO
CREATE PROCEDURE genMensajesDatos
(
@pMensajeId int
)
AS
SET NOCOUNT ON 

SELECT genMensajes.Mensaje_Id AS MensajeId, 
	genMensajes.FechaEmision, genMensajes.Leido as FechaLeido,
	genUsuarios.genUsuarios,
	genMensajes.Mensaje, genUsuarios.Usuario_id, 
		genUsuarios.Apellido_y_Nombres as DescripcionUsuario, 
		Destino.Usuario_id as UsuarioDestino, 
		Destino.Apellido_y_Nombres as DescripcionUsuarioDestino,
		genMensajes.FechaDesde, genMensajes.FechaHasta,
		genMensajes.Parametros, disFormularios.disFormularios, disFormularios.Formulario_Id,
		genMensajes.Tipo, genMensajes.SubTipo
FROM genMensajes INNER JOIN genUsuarios on 
genMensajes.Usuario_id =genUsuarios.genUsuarios
INNER JOIN genUsuarios AS Destino ON
Destino.genUsuarios = genMensajes.UsuarioDestino
LEFT join disFormularios on disFormularios.disFormularios=genMensajes.Formulario_Id
WHERE (genMensajes.Mensaje_Id = @pMensajeId)
 
RETURN @@Error 

GO

DROP PROCEDURE genMensajesLeido
GO
CREATE PROCEDURE genMensajesLeido
(
@pMensaje_Id int,
@pFechaLeido DateTime = NULL
)
AS

UPDATE genMensajes SET Leido = @pFechaLeido Where
	Mensaje_Id = @pMensaje_Id
	
GO
	
drop procedure genMensajesPantallaDatos
go
create procedure genMensajesPantallaDatos
(
@pgenMensajes int=null,
@pUsuarioDestino varchar(25)=null,
@pUsuarioRemi int
)
as
set nocount on
select Mensaje_Id as genMensajes, Mensaje, Leido, Remitente.Usuario_Id as Remitente,
Remitente.Apellido_y_Nombres as DescripcionRemitente, Destino.Usuario_Id as Destino,
Destino.Apellido_y_Nombres as DescripcionDestino, FechaDesde, FechaHasta 
from genMensajes
left join genUsuarios Destino on Destino.Usuario_Id=@pUsuarioDestino
inner join genUsuarios Remitente on Remitente.genUsuarios=@pUsuarioRemi 
where Remitente.genUsuarios=@pUsuarioRemi and Destino.Usuario_Id=isnull(@pUsuarioDestino,Destino.Usuario_Id) and
Mensaje_Id=isnull(@pgenMensajes,0)
select Mensaje_Id as genMensajes, Mensaje, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres, FechaEmision from genMensajes 
inner join genUsuarios on UsuarioDestino=genUsuarios where genMensajes.Usuario_Id=@pUsuarioRemi
go

drop procedure genMensajesPantallaAdminGuardar
go
create procedure genMensajesPantallaAdminGuardar
(
@pMensaje varchar(max),
@pUsuarioRemitente int,
@pFechaEmision datetime,
@pFechaDesde qFechaHora=null,
@pFechaHasta qFechaHora=null
)
as
begin
insert into genMensajes(Mensaje, Leido, Usuario_Id, UsuarioDestino, FechaEmision, FechaDesde, FechaHasta)
select @pMensaje, null, @pUsuarioRemitente, genUsuarios.genUsuarios, @pFechaEmision, @pFechaDesde, @pFechaHasta 
from genUsuarios 
where Inactivo = 0 and TipoUsuario = 'U'
end
go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\GenMenus.sql*/
DROP PROCEDURE genMenusDatos 
GO
CREATE PROCEDURE genMenusDatos @Usuario_id int, @Dominio_id VarChar(2), @Empresa_id int 
AS

DECLARE @ListaDeFormularios Table (Usuario_Id int, 
									Formulario_id varchar(30), 
									Descripcion varchar(80), 
									PTodasEmpresas bit, 
									Consultar bit, 
									Actualizar bit, 
									Borrar bit, 
									Postear bit, 
									ModificaCodigos bit)

INSERT INTO @ListaDeFormularios
EXEC genPermisosDatos @Usuario_Id, @Empresa_id, null

SELECT genMenus.Orden, genMenus.Nivel, genMenus.Tipo, 
		ISNULL(genReportes.Titulo, isnull(disFormularios.Titulo, genMenus.Opcion)) as Opcion,
		disFormularios.Formulario_id, genMenus.FrmEspecial, 
		genReportes.Reporte_Id, genMenus.Orientacion, genMenus.Pais
FROM genMenus 
LEFT JOIN disFormularios ON disFormularios.disFormularios = genMenus.Formulario_id
LEFT JOIN genReportes ON genReportes.genReportes =  genMenus.Reporte_Id
LEFT JOIN @ListaDeFormularios as lstfrm ON lstfrm.Formulario_id =  disFormularios.Formulario_Id
Inner Join genMenusOrden On genMenusOrden.Opcion = Substring(genMenus.Orden, 1, 1)
WHERE (Pais IS NULL OR Pais Like '%'+ @Dominio_id +'%')		
AND ((genMenus.Formulario_id IS NULL) OR (isnull(lstfrm.Consultar, 0) = 1))

ORDER BY genMenusOrden.Orden, genMenus.Orden
	
GO

DROP FUNCTION FuncFKgenMenusFormulario
GO

CREATE FUNCTION FuncFKgenMenusFormulario
(
@pFormulario_id varchar (30)
)
RETURNS varchar(10)

AS
BEGIN
  DECLARE @pOrdenMenu varchar(10)
  SELECT @pOrdenMenu = Orden FROM genMenus WHERE 
	Formulario_Id = dbo.FuncFKdisFormularios(@pFormulario_id)
  RETURN @pOrdenMenu
END
GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genModuloOrigen.sql*/
Drop Procedure genModuloOrigenGuardar
GO
Create Procedure genModuloOrigenGuardar
(
@pModuloOrigen_Id int, 
@pModuloOrigen_Id_Nuevo int, 
@pDescripcion varchar(30) 
) 
AS 
SET NOCOUNT ON  
IF (EXISTS (SELECT 1 FROM genModuloOrigen WHERE 
	ModuloOrigen_Id = @pModuloOrigen_Id
))
BEGIN 
	UPDATE genModuloOrigen SET 
	Descripcion = @pDescripcion 
	WHERE 
	ModuloOrigen_Id = @pModuloOrigen_Id
 
END 
ELSE
BEGIN
	INSERT INTO  genModuloOrigen
	(ModuloOrigen_Id , 
	Descripcion ) 
	Values 
	(@pModuloOrigen_Id , 
	@pDescripcion ) 
END
RETURN @@Error 

GO
Drop Procedure genModuloOrigenDatos
GO
CREATE PROCEDURE genModuloOrigenDatos(
@pModuloOrigen_Id int
)
AS
SELECT genModuloOrigen.ModuloOrigen_Id, genModuloOrigen.Descripcion
 FROM genModuloOrigen 
 Where 
	genModuloOrigen.ModuloOrigen_Id = @pModuloOrigen_Id

GO
Drop Procedure genModuloOrigenEliminar
GO
Create Procedure genModuloOrigenEliminar(
@pModuloOrigen_Id int
 
) 
AS 
SET NOCOUNT ON  
DELETE FROM genModuloOrigen 
	 Where 
	genModuloOrigen.ModuloOrigen_Id = @pModuloOrigen_Id
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genMonedas.sql*/

-- exec genMonedasDatos 'PES'
DROP PROCEDURE genMonedasGuardar
GO
CREATE PROCEDURE genMonedasGuardar
(
@pMoneda_Id varchar(3),
@pMoneda_Id_Nuevo varchar(3),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(30),
@pSimbolo varchar(5),
@pCodigoFiscal varChar(25),
@pCtaFactaRecibir varChar(25),
@pCtaFactaRecibirImp varChar(25),
@pCantidadDigitos int,
@pInactivo bit,
@pUsuario_Id int,
@pPosteado bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM genMonedas WHERE (Moneda_Id = @pMoneda_Id)))
BEGIN 
	UPDATE genMonedas
	SET @lIdentidad = genMonedas,
		Moneda_Id = @pMoneda_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Simbolo = @pSimbolo,
		CodigoFiscal = @pCodigoFiscal,
		CtaFactaRecibir = dbo.FuncFKconCuentas(@pCtaFactaRecibir),
		CtaFactaRecibirImp = dbo.FuncFKconCuentas(@pCtaFactaRecibirImp),
		CantidadDigitos = @pCantidadDigitos,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (Moneda_Id = @pMoneda_Id)
END 
ELSE 
BEGIN 
	INSERT INTO genMonedas
	(
		Moneda_Id,
		Empresa_Id,
		Descripcion,
		Simbolo,
		CodigoFiscal,
		CtaFactaRecibir,
		CtaFactaRecibirImp,
		CantidadDigitos,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pMoneda_Id,
		@pEmpresa_Id,
		@pDescripcion,
		@pSimbolo,
		@pCodigoFiscal,
		dbo.FuncFKconCuentas(@pCtaFactaRecibir),
		dbo.FuncFKconCuentas(@pCtaFactaRecibirImp),
		@pCantidadDigitos,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE genMonedasDatos
GO
CREATE PROCEDURE genMonedasDatos
(
@pMoneda_Id varchar(3)
)
AS
SET NOCOUNT ON 

SELECT genMonedas.genMonedas, genMonedas.Moneda_Id, genMonedas.Empresa_Id, 
	Cast( Case When genMonedas.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	genMonedas.Descripcion, genMonedas.Simbolo, genMonedas.CodigoFiscal,
	conCuentasFAR.Cuenta_Id CtaFactaRecibir, conCuentasFAR.Descripcion DescripcionCtaFactaRecibir,
	conCuentasFARI.Cuenta_Id CtaFactaRecibirImp, conCuentasFARI.Descripcion DescripcionCtaFactaRecibirImp,
	genMonedas.CantidadDigitos, genMonedas.Inactivo, genUsuarios.Usuario_Id,
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario, genMonedas.Posteado
FROM genMonedas 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = genMonedas.Usuario_Id)
Left Join conCuentas conCuentasFAR On conCuentasFAR.conCuentas = genMonedas.CtaFactaRecibir
Left Join conCuentas conCuentasFARI On conCuentasFARI.conCuentas = genMonedas.CtaFactaRecibirImp
WHERE (genMonedas.Moneda_Id = @pMoneda_Id)
 


Declare @pidentity bigint= dbo.FuncFKgenMonedas(@pMoneda_Id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'genMonedas'
RETURN @@Error 

GO

DROP PROCEDURE genMonedasEliminar
GO
CREATE PROCEDURE genMonedasEliminar
(
@pMoneda_Id varchar(3) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM genMonedas 
WHERE (Moneda_Id = @pMoneda_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKgenMonedas
GO

CREATE FUNCTION FuncFKgenMonedas
(
@pMoneda_Id varchar (3)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = genMonedas FROM genMonedas WHERE 
	Moneda_Id = @pMoneda_Id
  RETURN @pIdentity
END


GO

DROP Procedure genMonedasDatosCierre
GO
CREATE Procedure genMonedasDatosCierre (
	@Fecha DateTime
)
as
SELECT @Fecha as Fecha

SELECT genMonedas.Moneda_id, genMonedas.Descripcion, 
genTipoCambio.CambioCompra,
genTipoCambio.CambioVenta
FROM genMonedas inner join genTipoCambio on
genTipoCambio.Moneda_id = genMonedas.genMonedas and 
genTipoCambio.Fecha = (SELECT MAX(Fecha) from genTipoCambio genTipoCambio1 where
		genTipoCambio1.Moneda_id =   genMonedas.genMonedas and 
		genTipoCambio1.Fecha <= @Fecha)
GO

	
DROP PROCEDURE genMonedasDatosFiscal
GO
CREATE PROCEDURE genMonedasDatosFiscal
(
@pIdFiscal varchar(25)
)
AS
SET NOCOUNT ON 


SELECT genMonedas.genMonedas, genMonedas.Moneda_Id, genMonedas.Empresa_Id, 
	Cast( Case When genMonedas.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	genMonedas.Descripcion, genMonedas.Simbolo, genMonedas.CodigoFiscal,
	conCuentasFAR.Cuenta_Id CtaFactaRecibir, conCuentasFAR.Descripcion DescripcionCtaFactaRecibir,
	conCuentasFARI.Cuenta_Id CtaFactaRecibirImp, conCuentasFARI.Descripcion DescripcionCtaFactaRecibirImp,
	genMonedas.Inactivo, genUsuarios.Usuario_Id,
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario, genMonedas.Posteado
FROM genMonedas 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = genMonedas.Usuario_Id)
Left Join conCuentas conCuentasFAR On conCuentasFAR.conCuentas = genMonedas.CtaFactaRecibir
Left Join conCuentas conCuentasFARI On conCuentasFARI.conCuentas = genMonedas.CtaFactaRecibirImp
WHERE (genMonedas.CodigoFiscal = @pIdFiscal)
 
 Declare @pidentity bigint= (select genMonedas from genMonedas where 
	CodigoFiscal = @pIdFiscal)
	
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'genMonedas'
 RETURN @@Error 

GO

	
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genMovCuotas.sql*/
DROP PROCEDURE genMovCuotasGuardar
GO
CREATE PROCEDURE genMovCuotasGuardar
(
@pAsiento_Id bigint,
@pCuotaNro smallint,
@pFechaVencimiento qFecha,
@pImporte qMonedaD2,
@pSaldo qMonedaD2
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genMovCuotas WHERE (Asiento_Id = @pAsiento_Id) AND (CuotaNro = @pCuotaNro)))
BEGIN 
	UPDATE genMovCuotas
	SET		FechaVencimiento = @pFechaVencimiento,
		Importe = @pImporte,
		Saldo = @pSaldo
	WHERE (Asiento_Id = @pAsiento_Id) AND (CuotaNro = @pCuotaNro)
END 
ELSE 
BEGIN 
	INSERT INTO genMovCuotas
	(
		Asiento_Id,
		CuotaNro,
		FechaVencimiento,
		Importe,
		Saldo
	)
	VALUES 
	(
		@pAsiento_Id,
		@pCuotaNro,
		@pFechaVencimiento,
		@pImporte,
		@pSaldo
	)
END 

GO

DROP PROCEDURE genMovCuotasDatos
GO
CREATE PROCEDURE genMovCuotasDatos
(
@pAsiento_Id bigint,
@pCuotaNro smallint = NULL
)
AS
SET NOCOUNT ON 



SELECT genMovCuotas.Asiento_Id, genMovCuotas.CuotaNro, genMovCuotas.FechaVencimiento,
	genMovCuotas.Importe, genMovCuotas.Saldo
FROM genMovCuotas 
WHERE (Asiento_Id = @pAsiento_Id)
	AND (CuotaNro = ISNULL(@pCuotaNro, CuotaNro))
order by 2 
 RETURN @@Error 

GO

DROP PROCEDURE genMovCuotasEliminar
GO
CREATE PROCEDURE genMovCuotasEliminar
(
@pAsiento_Id bigint,
@pCuotaNro smallint = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM genMovCuotas 
WHERE (Asiento_Id = @pAsiento_Id)
AND (CuotaNro = ISNULL(@pCuotaNro, CuotaNro))
 
 RETURN @@Error 

GO


DROP PROCEDURE genMovCuotasAplicar
GO
CREATE PROCEDURE genMovCuotasAplicar
(
@pAsiento_Id bigint,
@pCuotaNro smallint,
@pMonto qMonedaD2
)
AS
UPDATE genMovCuotas
	SET	Saldo = Saldo - @pMonto
		WHERE (Asiento_Id = @pAsiento_Id) AND (CuotaNro = @pCuotaNro)

-- LLAMO AQUI TAMBIEN A LOS PADRES

UPDATE venMovimientos SET Saldo = Saldo - @pMonto where
	venMovimientos = @pAsiento_Id

UPDATE comMovprov SET Saldo = Saldo - @pMonto where
	comMovprov = @pAsiento_Id


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genMovimientos.sql*/
DROP PROCEDURE genMovimientosGuardar
GO
CREATE PROCEDURE genMovimientosGuardar
(
@pAsiento_Id bigint,
@pgenEntidades bigint = Null,
@pCantCuotas smallint
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genMovimientos WHERE (Asiento_Id = @pAsiento_Id)))
BEGIN 
	UPDATE genMovimientos
	SET		genEntidades = @pgenEntidades,
		CantCuotas = @pCantCuotas
	WHERE (Asiento_Id = @pAsiento_Id)
END 
ELSE 
BEGIN 
	INSERT INTO genMovimientos
	(
		Asiento_Id,
		genEntidades,
		CantCuotas
	)
	VALUES 
	(
		@pAsiento_Id,
		@pgenEntidades,
		@pCantCuotas
	)
END 

GO

DROP PROCEDURE genMovimientosDatos
GO
CREATE PROCEDURE genMovimientosDatos
(
@pAsiento_Id bigint
)
AS
SET NOCOUNT ON 

Select genMovimientos.Asiento_Id, genMovimientos.genEntidades, genMovimientos.CantCuotas, 'P' ClieProv, comMovTipos.Signo,
comProveedores.Proveed_Id ClieProv_Id, genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N
From genMovimientos
Inner Join comMovprov ON genMovimientos.Asiento_Id = comMovprov.comMovProv
Inner Join comMovTipos ON comMovTipos.TipoMov = comMovprov.TipoMov
Inner Join comProveedores On comProveedores.genEntidades = comMovProv.Proveed_Id
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = comMovProv.comMovProv
Where (genMovimientos.Asiento_Id = @pAsiento_Id)
Union All
Select genMovimientos.Asiento_Id, genMovimientos.genEntidades, genMovimientos.CantCuotas, 'C' ClieProv, venTipoMov.Signo,
venClientes.Cliente_Id ClieProv_Id, genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N
From genMovimientos
Inner Join venMovimientos ON genMovimientos.Asiento_Id = venMovimientos.venMovimientos
Inner Join venSubTipoMov ON venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
Inner Join venTipoMov ON venTipoMov.venTipoMov = venMovimientos.venTipoMov
left Join venClientes On venClientes.genEntidades = venMovimientos.Cliente_Id
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = venMovimientos.venMovimientos
Where (genMovimientos.Asiento_Id = @pAsiento_Id)
 
RETURN @@Error 

GO

DROP PROCEDURE genMovimientosEliminar
GO
CREATE PROCEDURE genMovimientosEliminar
(
@pAsiento_Id bigint
)
AS
SET NOCOUNT ON 

DELETE FROM genMovimientos WHERE (Asiento_Id = @pAsiento_Id)
 
 RETURN @@Error 

GO

DROP Procedure genMovimientosIntDatos
GO
Create Procedure genMovimientosIntDatos
(
	 @Asiento_id bigInt
)
AS

SELECT comMovTipos.Signo, genMovimientos.Asiento_Id
	FROM genMovimientos 
	INNER JOIn comMovprov ON genMovimientos.Asiento_Id = comMovprov.comMovProv
	INNER JOIN comMovTipos ON comMovTipos.TipoMov = comMovprov.TipoMov
	Where
	comMovprov.comMovProv = @Asiento_id
UNION ALL
SELECT venTipoMov.Signo, genMovimientos.Asiento_Id
	FROM genMovimientos 
	INNER JOIn venMovimientos ON genMovimientos.Asiento_Id = venMovimientos.venMovimientos
	INNER JOIN venSubTipoMov ON venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
	INNER JOIN venTipoMov ON venTipoMov.venTipoMov = venMovimientos.venTipoMov
	Where
		genMovimientos.Asiento_Id = @Asiento_id
GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genPaises.sql*/
DROP PROCEDURE genPaisesGuardar
GO
CREATE PROCEDURE genPaisesGuardar
(
@pPais_Id smallint,
@pPais_Id_Nuevo smallint,
@pEmpresa_Id int = NULL,
@pDescripcion varchar(50),
@pCodFiscal varchar(3) = NULL,
@pDominio_Id char(2) = NULL,
@pInactivo bit,
@pUsuario_Id int,
@pPosteado bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM genPaises WHERE (Pais_Id = @pPais_Id)))
BEGIN 
	UPDATE genPaises
	SET		@lIdentidad = genPaises,
		Pais_Id = @pPais_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		CodFiscal = @pCodFiscal,
		Dominio_Id = @pDominio_Id,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (Pais_Id = @pPais_Id)
END 
ELSE 
BEGIN 
	INSERT INTO genPaises
	(
		Pais_Id,
		Empresa_Id,
		Descripcion,
		CodFiscal,
		Dominio_Id,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pPais_Id,
		@pEmpresa_Id,
		@pDescripcion,
		@pCodFiscal,
		@pDominio_Id,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE genPaisesDatos
GO
CREATE PROCEDURE genPaisesDatos
(
@pPais_Id smallint
)
AS
SET NOCOUNT ON 

SELECT genPaises.genPaises, genPaises.Pais_Id, genPaises.Empresa_Id, Cast( Case When genPaises.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	genPaises.Descripcion, genPaises.CodFiscal, genPaises.Dominio_Id, genDominios.Descripcion as DescripcionDominios,
	genPaises.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, genPaises.Posteado
FROM genPaises 
LEFT JOIN genDominios  ON (genDominios.Dominio_Id = genPaises.Dominio_Id)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = genPaises.Usuario_Id)
WHERE (Pais_Id = @pPais_Id)
 


 Declare @pidentity bigint= dbo.FuncFKgenPaises(@pPais_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'genPaises'
 RETURN @@Error 

GO

DROP PROCEDURE genPaisesEliminar
GO
CREATE PROCEDURE genPaisesEliminar
(
@pPais_Id smallint = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM genPaises 
WHERE (Pais_Id = @pPais_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKgenPaises
GO

CREATE FUNCTION FuncFKgenPaises
(
@pPais_Id smallint
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = genPaises FROM genPaises WHERE 
	Pais_Id = @pPais_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genPermisos.sql*/
Drop Procedure genPermisosGuardar
GO
Create Procedure genPermisosGuardar
(
@pUsuario_Id VarChar(25), 
@pFormulario_Id VarChar(45), 
@pEmpresa_id int=null,
@pConsultar Sino, 
@pActualizar Sino, 
@pBorrar Sino, 
@pPostear Sino, 
@pModificaCodigos SiNO 
) 
AS 



SET NOCOUNT ON  
IF (EXISTS (SELECT 1 FROM genPermisos WHERE 
	Usuario_Id = dbo.FuncFkgenUsuarios(@pUsuario_Id) and 
	Formulario_Id = dbo.FuncFKdisformularios(@pFormulario_Id)
))
BEGIN 
	UPDATE genPermisos SET 
	Empresa_id = @pEmpresa_id,
	Consultar = @pConsultar, 
	Actualizar = @pActualizar, 
	Borrar = @pBorrar, 
	Postear = @pPostear , 
	ModificaCodigos = @pModificaCodigos
	WHERE 
	Usuario_Id = dbo.FuncFkgenUsuarios(@pUsuario_Id) and 
	Formulario_Id = dbo.FuncFKdisformularios(@pFormulario_Id)
 
END 
ELSE
BEGIN
	INSERT INTO  genPermisos
	(Usuario_Id , 
	Formulario_Id , 
	Empresa_id,
	Consultar , 
	Actualizar , 
	Borrar , 
	Postear,
	ModificaCodigos ) 
	Values 
	(dbo.FuncFkgenUsuarios(@pUsuario_Id) , 
	dbo.FuncFKdisformularios(@pFormulario_Id), 
	@pEmpresa_id,
	@pConsultar , 
	@pActualizar , 
	@pBorrar , 
	@pPostear,
	@pModificaCodigos ) 
END
RETURN @@Error 

GO
Drop Procedure genPermisosDatos
GO
CREATE PROCEDURE genPermisosDatos(
@pUsuario_Id int,
@pEmpresa_id int,
@pFormulario_Id VarChar(45)=null 
)
AS

SELECT  Usuario_id, Formulario_Id,   Descripcion,
	CAST(max(PTodasEmpresas) as bit) PTodasEmpresas, 
	CAST(max(Consultar) as bit) Consultar, 
	CAST(max(Actualizar) as bit) Actualizar, 
	CAST(max(Borrar) as bit) Borrar, 
	CAST(max(Postear) as bit) Postear, 
	CAST(max(ModificaCodigos) as bit) ModificaCodigos
FROM 
(
SELECT genUsuarios.genUsuarios as Usuario_id, 
	disFormularios.Formulario_Id,  disFormularios.Descripcion, 
	CASE WHEN genPermisos.Empresa_id is null then 0 else 1 end as PTodasEmpresas,
	cast(genPermisos.Consultar as bit) as Consultar, 	
	cast(genPermisos.Actualizar as bit) as Actualizar, 
	cast(genPermisos.Borrar as bit) as Borrar, 
	cast(genPermisos.Postear as bit) as Postear, 
	cast(genPermisos.ModificaCodigos as bit) as ModificaCodigos
 FROM genPermisos  INNER JOIN disFormularios
	ON disFormularios.disFormularios=genPermisos.Formulario_Id
 INNER JOIN genUsuarios
	ON genUsuarios.genUsuarios=genPermisos.Usuario_Id
 Where 
	genPermisos.Usuario_Id = @pUsuario_Id and 
	isnull(genPermisos.Empresa_id,@pEmpresa_id) = @pEmpresa_id and 
	disFormularios.Formulario_Id = ISNULL(@pFormulario_Id, disFormularios.Formulario_Id)  
	
UNION ALL
SELECT genUsuarios.genUsuarios as Usuario_id, 
	disFormularios.Formulario_Id,  disFormularios.Descripcion, 
	CASE WHEN genUsuarios.Empresa_Id is null then 0 else 1 end as PTodasEmpresas,
	1 AS Consultar,  1 AS Actualizar, 
	1 as Borrar, 1 as Postear, 1 as ModificaCodigos
 FROM disFormularios CROSS JOIN  genUsuarios
 WHERE
	genUsuarios.EsSupervisor=1  And
	 genUsuarios.genUsuarios=@pUsuario_Id  and 
	 disFormularios.Formulario_Id = ISNULL(@pFormulario_Id, disFormularios.Formulario_Id)  and 
	 isnull(genUsuarios.Empresa_id,@pEmpresa_id) = @pEmpresa_id
	
UNION ALL
SELECT genUsuarios.genUsuarios as Usuario_id, 
	disFormularios.Formulario_Id, disFormularios.Descripcion, 
	CASE WHEN genPermisos.Empresa_id is null then 0 else 1 end as PTodasEmpresas,
	genPermisos.Consultar, 	genPermisos.Actualizar, 
	genPermisos.Borrar, genPermisos.Postear, genPermisos.ModificaCodigos
 FROM genPermisos  INNER JOIN disFormularios
	ON disFormularios.disFormularios=genPermisos.Formulario_Id
 INNER JOIN genGrupos
	ON genGrupos.Grupo_id =genPermisos.Usuario_Id
INNER JOIN genUsuarios ON
		genUsuarios.genUsuarios = genGrupos.Usuario_id
 Where 
	genUsuarios.genUsuarios = @pUsuario_Id and 
	disFormularios.Formulario_Id = ISNULL(@pFormulario_Id, disFormularios.Formulario_Id)  and 
	isnull(genPermisos.Empresa_id,@pEmpresa_id) = @pEmpresa_id ) AS XXX
group by Usuario_id, Formulario_Id, Descripcion


GO
Drop Procedure genPermisosEliminar
GO
Create Procedure genPermisosEliminar(
@pUsuario_Id int, 
@pFormulario_Id VarChar(45) 
 
) 
AS 
SET NOCOUNT ON  


DELETE FROM genPermisos 
	 Where 
	genPermisos.Usuario_Id = @pUsuario_Id and 
	genPermisos.Formulario_Id = isnull(dbo.FuncFKgenOrigenes(@pFormulario_Id),genPermisos.Formulario_Id)
 
RETURN @@Error 

GO

Drop Procedure genPermisosDatosTodos
GO
CREATE PROCEDURE genPermisosDatosTodos(
@pUsuario_Id VarChar(25)
)
AS



SELECT genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres 
from genUsuarios where 
genUsuarios.Usuario_Id = @pUsuario_Id

SELECT disFormularios.Formulario_Id ,  disFormularios.Descripcion as DescripcionFormulario,  
	disFormularios.disFormularios, genPermisos.Empresa_id, 
	Cast(ISNULL(genPermisos.Consultar,0) as Bit) AS Consultar  , 
	Cast(isnull(genPermisos.Actualizar,0) as Bit) as Actualizar, 
	Cast(IsNull(genPermisos.Borrar,0) as Bit) as Borrar , 
	Cast(IsNull(genPermisos.Postear ,0) as Bit) as Postear, 
	Cast(IsNull(genPermisos.ModificaCodigos,0) as Bit) ModificaCodigos
 FROM disFormularios LEFT OUTER JOIN 
	(genPermisos INNER JOIN genUsuarios  ON 
		genPermisos.Usuario_Id = genUsuarios.genUsuarios ) on
		disFormularios.disFormularios=genPermisos.Formulario_Id and 
		genUsuarios.Usuario_Id = @pUsuario_Id

GO




--genPermisosDatosTodos 'ADMINSUMMA'


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genPermisosCopia.sql*/
--genPermisosCopiar 1, 3

DROP PROCEDURE genPermisosCopiar
GO
CREATE PROCEDURE genPermisosCopiar
(
	@pUsuario_id VarChar(25) , 
	@pUsuarioN_Id VarChar(25)
)
AS
SET NOCOUNT ON
/*
DELETE FROM genPermisos 
	Where genPermisos.Usuario_Id = dbo.FuncFKgenUsuarios(@pUsuarioN_Id)
*/

INSERT INTO  genPermisos
	(Usuario_Id , 
	Formulario_Id , 
	Empresa_id,
	Consultar , 
	Actualizar , 
	Borrar , 
	Postear,
	ModificaCodigos
	) 
	SELECT dbo.FuncFKgenUsuarios(@pUsuarioN_id) as Usuario_Id,
		genPermisos.Formulario_Id, 
		genPermisos.Empresa_Id,
		genPermisos.Consultar, 
		genPermisos.Actualizar,
		genPermisos.Borrar,
		genPermisos.Postear,
		genPermisos.ModificaCodigos
FROM genPermisos
Left Join genPermisos YaExistentes On YaExistentes.Usuario_Id = dbo.FuncFKgenUsuarios(@pUsuarioN_Id) And
	YaExistentes.Formulario_Id = genPermisos.Formulario_Id
Where genPermisos.Usuario_id = dbo.FuncFKgenUsuarios(@pUsuario_Id) And YaExistentes.Postear Is Null

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genPermisosEsp.sql*/
DROP PROCEDURE genPermisosEspGuardar
GO
CREATE PROCEDURE genPermisosEspGuardar
(
@pPermiso_Id int,
@pDescripcion varchar(100)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genPermisosEsp WHERE (Permiso_Id = @pPermiso_Id)))
BEGIN 
	UPDATE genPermisosEsp
	SET		Descripcion = @pDescripcion
	WHERE (Permiso_Id = @pPermiso_Id)
END 
ELSE 
BEGIN 
	INSERT INTO genPermisosEsp
	(
		Permiso_Id,
		Descripcion
	)
	VALUES 
	(
		@pPermiso_Id,
		@pDescripcion
	)
END 

GO

DROP PROCEDURE genPermisosEspDatos
GO
CREATE PROCEDURE genPermisosEspDatos
(
@pPermiso_Id int
)
AS
SET NOCOUNT ON 

SELECT genPermisosEsp.Permiso_Id, genPermisosEsp.Descripcion
FROM genPermisosEsp 
WHERE (Permiso_Id = @pPermiso_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE genPermisosEspEliminar
GO
CREATE PROCEDURE genPermisosEspEliminar
(
@pPermiso_Id int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM genPermisosEsp 
WHERE (Permiso_Id = ISNULL(@pPermiso_Id, Permiso_Id))
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genPermisosUsuario.sql*/
-- genPermisosUsuarioDatos 'ADMINSUMMA', 'MX', 1
DROP PROCEDURE genPermisosUsuarioDatos
GO
CREATE PROCEDURE genPermisosUsuarioDatos
(
	@pUsuario_id VarChar(25) , 
	@pDominio_Id VarChar(2), 
	@pEmpresa_Id  int
)
AS
DECLARE @pUsuarioint Int 
select Usuario_Id, Apellido_y_Nombres, EsSupervisor 
from genUsuarios
Where
genUsuarios.Usuario_Id= @pUsuario_id

SELECT @pUsuarioint = genUsuarios.genUsuarios
from genUsuarios
Where
genUsuarios.Usuario_Id = @pUsuario_id



SELECT gm.genMenus, gm.Orden, 
	gm.genMenus OrdenId,
	--cast (isnull((select max(m.orden) from genMenus m where m.orden < gm.orden and m.Nivel =  gm.Nivel - 1), -1) as int) as OrdenPadre,
	--cast (isnull((select max(m.genMenus) from genMenus m where m.genMenus < gm.genMenus and m.Nivel =  gm.Nivel - 1), -1) as int) as OrdenPadre,
	cast (isnull((select max(mmax.genMenus) from genMenus mmax where mmax.orden = (select max(m.orden) from genMenus m where m.orden < gm.orden and m.Nivel =  gm.Nivel - 1)), -1) as int) as OrdenPadre,
	gm.Nivel, 
	gm.Tipo, 
	disFormularios.Formulario_Id, 
	isnull(disFormularios.Titulo, gm.Opcion) as Opcion, 
		Convert(bit, ISNULL(Consultar,0)) Consultar , 
		Convert(bit,ISNULL(Actualizar,0)) Actualizar, 
		Convert(bit,ISNULL(Borrar,0)) Borrar, 
		Convert(bit,ISNULL(Postear,0)) Postear, 
		Convert(bit,ISNULL(ModificaCodigos,0)) ModificaCodigos , 
		Convert(bit,case when genPermisos.Empresa_Id is null then 1 else 0 end) as ParaTodasLasEmpresas,
		Convert(bit, ISNULL(Consultar,0)) ConsultarA , 
		Convert(bit,ISNULL(Actualizar,0)) ActualizarA, 
		Convert(bit,ISNULL(Borrar,0)) BorrarA, 
		Convert(bit,ISNULL(Postear,0)) PostearA, 
		Convert(bit,ISNULL(ModificaCodigos,0)) ModificaCodigosA , 
		Convert(bit,case when genPermisos.Empresa_Id is null then 1 else 0 end) as ParaTodasLasEmpresasA
FROM genMenus gm
LEFT OUTER JOIN disFormularios ON gm.Formulario_Id = disFormularios.disFormularios
LEFT OUTER JOIN genPermisos ON genPermisos.Usuario_id = @pUsuarioInt 
							and @pEmpresa_Id  = ISNULL(genPermisos.Empresa_Id, @pEmpresa_Id ) 
							and genPermisos.Formulario_Id = disFormularios.disFormularios
Where(disFormularios.Formulario_Id  IS NOT NULL  OR gm.Tipo = 'S') 
AND Pais is null or Pais like '%'+@pDominio_Id+'%'
ORDER BY 1

select genPermisosEsp.Permiso_Id, genPermisosEsp.Descripcion as DescripcionPermiosEsp, 
	Cast(Case when genUsuarioPermisosEsp.Usuario_Id  IS null then 0 else 1 end as bit) as Marcado
FROM genUsuarios Cross join genPermisosEsp
left join genUsuarioPermisosEsp ON 
	genUsuarios.genUsuarios = genUsuarioPermisosEsp.Usuario_Id AND 
	genPermisosEsp.Permiso_Id = genUsuarioPermisosEsp.Permiso_Id
WHERE 
genUsuarios.Usuario_Id = @pUsuario_Id 
order by 1


GO

DROP PROCEDURE genPermisosUsuarioEliminar
GO
CREATE PROCEDURE genPermisosUsuarioEliminar
(
	@pUsuario_id VarChar(25) , 
	@pEmpresa_Id  int
)
AS
DECLARE @pUsuarioint Int 

SELECT @pUsuarioint = genUsuarios.genUsuarios
from genUsuarios
Where
genUsuarios.Usuario_Id = @pUsuario_id

DELETE FROM GenPermisos where
	genPermisos.Usuario_id = @pUsuarioInt and 
	@pEmpresa_Id  = ISNULL(genPermisos.Empresa_Id, @pEmpresa_Id) 
GO

-- exec genPermisosUsuarioDatos 'ADMINISTRA', 'MX', 1
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genProvincias.sql*/
DROP PROCEDURE genProvinciasGuardar
GO
CREATE PROCEDURE genProvinciasGuardar
(
@pProvincia_Id varchar(5),
@pProvincia_Id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(35),
@pCodFiscal varchar(3),
@pInactivo bit,
@pUsuario_Id int,
@pPosteado bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM genProvincias WHERE (Provincia_Id = @pProvincia_Id)))
BEGIN 
	UPDATE genProvincias
	SET		@lIdentidad = genProvincias,
		Provincia_Id = @pProvincia_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		CodFiscal = @pCodFiscal,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (Provincia_Id = @pProvincia_Id)
END 
ELSE 
BEGIN 
	INSERT INTO genProvincias
	(
		Provincia_Id,
		Empresa_Id,
		Descripcion,
		CodFiscal,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pProvincia_Id,
		@pEmpresa_Id,
		@pDescripcion,
		@pCodFiscal,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE genProvinciasDatos
GO
CREATE PROCEDURE genProvinciasDatos
(
@pProvincia_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT genProvincias.genProvincias, genProvincias.Provincia_Id, genProvincias.Empresa_Id, Cast( Case When genProvincias.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	genProvincias.Descripcion, genProvincias.CodFiscal, genProvincias.Inactivo, genUsuarios.Usuario_Id,
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario, genProvincias.Posteado
FROM genProvincias 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = genProvincias.Usuario_Id)
WHERE (Provincia_Id = @pProvincia_Id)
 


 Declare @pidentity bigint= dbo.FuncFKgenProvincias(@pProvincia_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'genProvincias'
 RETURN @@Error 

GO

DROP PROCEDURE genProvinciasEliminar
GO
CREATE PROCEDURE genProvinciasEliminar
(
@pProvincia_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM genProvincias 
WHERE (Provincia_Id = @pProvincia_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKgenProvincias
GO

CREATE FUNCTION FuncFKgenProvincias
(
@pProvincia_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = genProvincias FROM genProvincias WHERE 
	Provincia_Id = @pProvincia_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genReportes.sql*/
DROP PROCEDURE genReportesGuardar
GO
CREATE PROCEDURE genReportesGuardar
(
@pReporte_Id varchar(50),
@pReporte_Id_Nueva varchar(50),
@pTitulo varchar(80),
@pCarpeta VARCHAR(200) = NULL,
@pRpt varchar(200),
@pEstandar bit = NULL, 
@pLocal bit = NULL, 
@pStoreProcedure VarChar(200),
@pTipoReporte varChar(10) = Null, 
@pTamanioHoja Varchar(15) = Null, 
@pAnchoHoja Int = Null,
@pAltoHoja Int = Null 
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM genReportes WHERE Reporte_Id = @pReporte_Id))
BEGIN 
	UPDATE genReportes
	SET @lIdentidad = genReportes,
		Reporte_Id = @pReporte_Id_Nueva ,
		Titulo = @pTitulo,
		Carpeta = @pCarpeta,
		Rpt = @pRpt,
		Estandar = @pEstandar,
		Local = @pLocal, 
		StoreProcedure = @pStoreProcedure,
		TipoReporte = @pTipoReporte, 
		TamanioHoja = @pTamanioHoja, 
		AnchoHoja = @pAnchoHoja, 
		AltoHoja = @pAltoHoja
	WHERE 
		Reporte_Id = @pReporte_Id 
END 
ELSE 
BEGIN 
	INSERT INTO genReportes
	(
		Reporte_Id,
		Titulo,
		Carpeta,
		Rpt,
		Estandar,
		Local, 
		StoreProcedure,
		TipoReporte,
		TamanioHoja,
		AnchoHoja, 
		AltoHoja
	)
	VALUES 
	(
		@pReporte_Id_Nueva,
		@pTitulo,
		@pCarpeta,
		@pRpt,
		@pEstandar,
		@pLocal, 
		@pStoreProcedure,
		@pTipoReporte, 
		@pTamanioHoja, 
		@pAnchoHoja, 
		@pAltoHoja
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE genReportesDatos
GO
CREATE PROCEDURE genReportesDatos
(
	@pReporte_Id varchar(50)
)
AS

SET NOCOUNT ON 

SELECT genReportes.genReportes, genReportes.Reporte_Id,genReportes.Reporte_Id as Reporte_Id_Nueva,
 genReportes.Titulo, genReportes.Carpeta, genReportes.Rpt, 
		genReportes.Estandar, genReportes.Local, genReportes.StoreProcedure, genReportes.TipoReporte, 
			genReportes.TamanioHoja, genReportes.AnchoHoja, genReportes.AltoHoja
FROM genReportes 
WHERE  
	Reporte_Id = @pReporte_Id 

Exec genReportesSPDatos @pReporte_id

RETURN @@Error 

GO

DROP PROCEDURE genReportesEliminar
GO
CREATE PROCEDURE genReportesEliminar
(
	@pReporte_Id varchar(50)
)
AS
SET NOCOUNT ON 

DELETE FROM genReportes WHERE Reporte_Id = @pReporte_Id 
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKgenReportes
GO

CREATE FUNCTION FuncFKgenReportes
(
	@pReporte_Id varchar(50)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = genReportes FROM genReportes WHERE 
	Reporte_Id = @pReporte_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genReportesSP.sql*/
DROP PROCEDURE genReportesSPGuardar
GO
CREATE PROCEDURE genReportesSPGuardar
(
@pReporte_ID VarChar(50),
@pRenglon int,
@pStoreProcedure varchar(150),
@pDataTable varchar(100)
)
AS
SET NOCOUNT ON 


IF (EXISTS (SELECT 1 FROM genReportesSP WHERE (genReportes = dbo.FuncFKgenReportes(@pReporte_ID)) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE genReportesSP
	SET		StoreProcedure = @pStoreProcedure,
		DataTable = @pDataTable
	WHERE (genReportes = dbo.FuncFKgenReportes(@pReporte_ID)) AND (Renglon = @pRenglon)
END 

ELSE 
BEGIN 
	INSERT INTO genReportesSP
	(
		genReportes,
		Renglon,
		StoreProcedure,
		DataTable
	)
	VALUES 
	(
		dbo.FuncFKgenReportes(@pReporte_ID),
		@pRenglon,
		@pStoreProcedure,
		@pDataTable
	)
END 

GO

DROP PROCEDURE genReportesSPDatos
GO
CREATE PROCEDURE genReportesSPDatos
(
@pReporte_ID VarChar(50),
@pRenglon int=NULL
)
AS
SET NOCOUNT ON 

SELECT genReportesSP.genReportes,  genReportes.Reporte_Id, genReportesSP.Renglon, genReportesSP.StoreProcedure, genReportesSP.DataTable
FROM genReportesSP INNER JOIN genReportes ON
genReportesSP.genReportes = genReportes.genReportes
WHERE (genReportes.Reporte_id = @pReporte_ID)
AND (Renglon = ISNULL(@pRenglon,Renglon))
 
 RETURN @@Error 

GO

DROP PROCEDURE genReportesSPEliminar
GO
CREATE PROCEDURE genReportesSPEliminar
(
@pgenReportes int,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM genReportesSP 
WHERE (genReportes = @pgenReportes)
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
 RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genReportesTodos.sql*/
DROP PROCEDURE genReportesDatosTodos
GO

CREATE PROCEDURE genReportesDatosTodos
AS

SET NOCOUNT ON 

SELECT genReportes.genReportes, genReportes.Reporte_Id,genReportes.Reporte_Id as Reporte_Id_Nueva,
		genReportes.Titulo, genReportes.Carpeta, genReportes.Rpt, 
		genReportes.Estandar, genReportes.Local, genReportes.StoreProcedure, genReportes.TipoReporte, 
			genReportes.TamanioHoja, genReportes.AnchoHoja, genReportes.AltoHoja
FROM genReportes 
order by 2
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genRespaldarDB.sql*/
--declare @pBase varchar(30)='Grupo2BYB'
--declare @pRuta nvarchar(max)=N'F:\SQL\Backup\Grupo2BYB-2021520-14-25-33.bak'
--declare @pNombre nvarchar(max)=N'Grupo2BYB--2021-05-20T21:25:33'
drop Procedure genRespaldarDB
go
create Procedure genRespaldarDB
(
    @pBase varchar(100),
    @pRuta nvarchar(max),
    @pNombre nvarchar(max)
)
as
BACKUP DATABASE @pBase TO  DISK = @pRuta WITH NOFORMAT, NOINIT,  NAME = @pNombre, NOSKIP, REWIND, NOUNLOAD,  STATS = 10
go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genSaldoAnticipo.sql*/
drop procedure genSaldoAnticipo
go
create procedure genSaldoAnticipo
(
@pAsiento_Id bigint
)
as
select @pAsiento_Id as Asiento_Id,Cuenta_Id,Sum(importe) AS Importe
FROM (
select conCuentas.Cuenta_Id,conMovCont.Importe  * (-2*conMovCont.TipoMov+3) AS Importe from genCancMov inner JOIN conAsientos ON
genCancMov.Asiento_Id_Ap = conAsientos.conAsientos and 
conAsientos.Anulado = 0 
inner join conMovCont on
conMovCont.conAsientos = conAsientos.conAsientos and 
(conMovCont.Clase in( 'ANTCL' , 'ANTPR'))
inner join conCuentas on conCuentas.conCuentas=conMovCont.Cuenta_Id
where Asiento_Id_ap = @pAsiento_Id
union all

select conCuentas.Cuenta_Id,conMovCont.Importe  * (-2*conMovCont.TipoMov+3) AS Importe from genCancMov inner JOIN conAsientos ON
genCancMov.Asiento_Id_Ap = conAsientos.conAsientos and 
conAsientos.Anulado = 0 
inner join conMovCont on
conMovCont.conAsientos = conAsientos.conAsientos and 
(conMovCont.Clase in( 'ANTCL' , 'ANTPR'))
inner join conCuentas on conCuentas.conCuentas=conMovCont.Cuenta_Id
where Asiento_Id = @pAsiento_Id

UNION ALL 

select conCuentas.Cuenta_Id,conMovCont.Importe  * (-2*conMovCont.TipoMov+3) from genCancMov inner JOIN conAsientos ON
genCancMov.AsientoApli_Id = conAsientos.conAsientos and 
conAsientos.Anulado = 0 
inner join conMovCont on
conMovCont.conAsientos = conAsientos.conAsientos and 
(conMovCont.Clase in( 'ANTCL' , 'ANTPR'))
inner join conCuentas on conCuentas.conCuentas=conMovCont.Cuenta_Id
where Asiento_Id_Ap = @pAsiento_Id
union all

select conCuentas.Cuenta_Id,conMovCont.Importe  * (-2*conMovCont.TipoMov+3) from genCancMov inner JOIN conAsientos ON
genCancMov.AsientoApli_Id = conAsientos.conAsientos and 
conAsientos.Anulado = 0 
inner join conMovCont on
conMovCont.conAsientos = conAsientos.conAsientos and 
(conMovCont.Clase in( 'ANTCL' , 'ANTPR'))
inner join conCuentas on conCuentas.conCuentas=conMovCont.Cuenta_Id
where Asiento_Id = @pAsiento_Id

)
 AS xxx
group by Cuenta_Id
having sum(importe)!=0
go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genSegmentoOrigenes.sql*/
-- genSegmentoOrigenesDatos 1
DROP PROCEDURE genSegmentoOrigenesGuardar
GO
CREATE PROCEDURE genSegmentoOrigenesGuardar
(
@pOriSeg_id smallint,
@pDescripcion varchar(80)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genSegmentoOrigenes WHERE (OriSeg_id = @pOriSeg_id)))
BEGIN 
	UPDATE genSegmentoOrigenes
	SET		Descripcion = @pDescripcion
	WHERE (OriSeg_id = @pOriSeg_id)
END 
ELSE 
BEGIN 
	INSERT INTO genSegmentoOrigenes
	(
		OriSeg_id,
		Descripcion
	)
	VALUES 
	(
		@pOriSeg_id,
		@pDescripcion
	)
END 

GO

DROP PROCEDURE genSegmentoOrigenesDatos
GO
CREATE PROCEDURE genSegmentoOrigenesDatos
(
@pOriSeg_id smallint
)
AS
SET NOCOUNT ON 

SELECT genSegmentoOrigenes.OriSeg_id, genSegmentoOrigenes.Descripcion
FROM genSegmentoOrigenes 
WHERE (OriSeg_id = @pOriSeg_id)
 
 RETURN @@Error 

GO

DROP PROCEDURE genSegmentoOrigenesEliminar
GO
CREATE PROCEDURE genSegmentoOrigenesEliminar
(
@pOriSeg_id smallint = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM genSegmentoOrigenes 
WHERE (OriSeg_id = ISNULL(@pOriSeg_id, OriSeg_id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genSegmentos.sql*/
DROP PROCEDURE genSegmentosGuardar
GO
CREATE PROCEDURE genSegmentosGuardar
(
@pSegmento_Id VarChar(10),
@pSegmento_Id_Nuevo VarChar(10),
@pDescripcion varchar(60),
@pDigitos1N int,
@pDigitos2N int,
@pDigitos3N int,
@pDigitos4N int,
@pTieneColumnaAutomatica Sino,
@pDigitos1C int,
@pDigitos2C int,
@pDigitos3C int,
@pDigitos4C int,
@pOrigen1N smallint ,
@pOrigen2N smallint ,
@pOrigen3N smallint ,
@pOrigen4N smallint ,
@pOrigen1C smallint ,
@pOrigen2C smallint ,
@pOrigen3C smallint ,
@pOrigen4C smallint ,
@pOrden1N smallint,
@pOrden2N smallint,
@pOrden3N smallint,
@pOrden4N smallint,
@pOrden1C smallint,
@pOrden2C smallint,
@pOrden3C smallint,
@pOrden4C smallint,
@pHabilitaEdicion Sino,
@pTamanioVariable char(2),
@pInactivo Sino,
@pUsuario_Id int,
@pPosteado Sino, 
@pEsSueldos Bit,
@pEmpiezaEnUno Bit

)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM genSegmentos WHERE (Segmento_Id = @pSegmento_Id)))
BEGIN 
	UPDATE genSegmentos
	SET		@lIdentidad = genSegmentos,
		Segmento_Id = @pSegmento_Id_Nuevo,
		Descripcion = @pDescripcion,
		Digitos1N = @pDigitos1N,
		Digitos2N = @pDigitos2N,
		Digitos3N = @pDigitos3N,
		Digitos4N = @pDigitos4N,
		TieneColumnaAutomatica = @pTieneColumnaAutomatica,
		Digitos1C = @pDigitos1C,
		Digitos2C = @pDigitos2C,
		Digitos3C = @pDigitos3C,
		Digitos4C = @pDigitos4C,
		Origen1N = @pOrigen1N,
		Origen2N = @pOrigen2N,
		Origen3N = @pOrigen3N,
		Origen4N = @pOrigen4N,
		Origen1C = @pOrigen1C,
		Origen2C = @pOrigen2C,
		Origen3C = @pOrigen3C,
		Origen4C = @pOrigen4C,
		Orden1N = @pOrden1N,
		Orden2N = @pOrden2N,
		Orden3N = @pOrden3N,
		Orden4N = @pOrden4N,
		Orden1C = @pOrden1C,
		Orden2C = @pOrden2C,
		Orden3C = @pOrden3C,
		Orden4C = @pOrden4C,
		HabilitaEdicion = @pHabilitaEdicion,
		TamanioVariable = @pTamanioVariable,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado, 
		EsSueldos = @pEsSueldos,
		EmpiezaEnUno=@pEmpiezaEnUno
	WHERE (Segmento_Id = @pSegmento_Id)
END 
ELSE 
BEGIN 
	INSERT INTO genSegmentos
	(
		Segmento_Id,
		Descripcion,
		Digitos1N,
		Digitos2N,
		Digitos3N,
		Digitos4N,
		TieneColumnaAutomatica,
		Digitos1C,
		Digitos2C,
		Digitos3C,
		Digitos4C,
		Origen1N,
		Origen2N,
		Origen3N,
		Origen4N,
		Origen1C,
		Origen2C,
		Origen3C,
		Origen4C,
		Orden1N,
		Orden2N,
		Orden3N,
		Orden4N,
		Orden1C,
		Orden2C,
		Orden3C,
		Orden4C,
		HabilitaEdicion,
		TamanioVariable,
		Inactivo,
		Usuario_Id,
		Posteado, 
		EsSueldos,
		EmpiezaEnUno
	)
	VALUES 
	(
		@pSegmento_Id_Nuevo,
		@pDescripcion,
		@pDigitos1N,
		@pDigitos2N,
		@pDigitos3N,
		@pDigitos4N,
		@pTieneColumnaAutomatica,
		@pDigitos1C,
		@pDigitos2C,
		@pDigitos3C,
		@pDigitos4C,
		@pOrigen1N,
		@pOrigen2N,
		@pOrigen3N,
		@pOrigen4N,
		@pOrigen1C,
		@pOrigen2C,
		@pOrigen3C,
		@pOrigen4C,
		@pOrden1N,
		@pOrden2N,
		@pOrden3N,
		@pOrden4N,
		@pOrden1C,
		@pOrden2C,
		@pOrden3C,
		@pOrden4C,
		@pHabilitaEdicion,
		@pTamanioVariable,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado, 
		@pEsSueldos,
		@pEmpiezaEnUno
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE genSegmentosDatos
GO
CREATE PROCEDURE genSegmentosDatos
(
@pSegmento_Id VarChar(10)
)
AS
SET NOCOUNT ON 

SELECT genSegmentos.genSegmentos, genSegmentos.Segmento_Id, 
	genSegmentos.Descripcion,
	genSegmentos.Digitos1N, genSegmentos.Digitos2N, genSegmentos.Digitos3N, genSegmentos.Digitos4N,
	genSegmentos.TieneColumnaAutomatica, genSegmentos.Digitos1C, genSegmentos.Digitos2C, genSegmentos.Digitos3C,
	genSegmentos.Digitos4C, 
	genSegmentos.Origen1N, genSegmentoOrigenes.Descripcion as DescripcionSegmentosOrigenes1N, 
	genSegmentos.Origen2N, genSegmentoOrigenes2.Descripcion as DescripcionSegmentosOrigenes2N, 
	genSegmentos.Origen3N, genSegmentoOrigenes3.Descripcion as DescripcionSegmentosOrigenes3N, 
	genSegmentos.Origen4N, genSegmentoOrigenes4.Descripcion as DescripcionSegmentosOrigenes4N, 
	genSegmentos.Origen1C, genSegmentoOrigenes5.Descripcion as DescripcionSegmentosOrigenes1C, 
	genSegmentos.Origen2C, 	genSegmentoOrigenes6.Descripcion as DescripcionSegmentosOrigenes2C, 
	genSegmentos.Origen3C, genSegmentoOrigenes7.Descripcion as DescripcionSegmentosOrigenes3C, 
	genSegmentos.Origen4C, genSegmentoOrigenes8.Descripcion as DescripcionSegmentosOrigenes4C, 
	genSegmentos.Orden1N, genSegmentos.Orden2N, genSegmentos.Orden3N,
	genSegmentos.Orden4N, genSegmentos.Orden1C, genSegmentos.Orden2C, genSegmentos.Orden3C,
	genSegmentos.Orden4C, genSegmentos.HabilitaEdicion, genSegmentos.TamanioVariable,
	genSegmentos.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
	genSegmentos.Posteado, genSegmentosNombres.Nombre1N, genSegmentosNombres.Nombre2N, genSegmentosNombres.Nombre3N,
		genSegmentosNombres.Nombre4N, genSegmentosNombres.Nombre1C, genSegmentosNombres.Nombre2C, genSegmentosNombres.Nombre3C,
			genSegmentosNombres.Nombre4C, genSegmentos.EsSueldos,genSegmentos.EmpiezaEnUno
FROM genSegmentos 
LEFT JOIN genSegmentoOrigenes  ON (genSegmentoOrigenes.OriSeg_id = genSegmentos.Origen1N)
LEFT JOIN genSegmentoOrigenes genSegmentoOrigenes2 ON (genSegmentoOrigenes2.OriSeg_id = genSegmentos.Origen2N)
LEFT JOIN genSegmentoOrigenes genSegmentoOrigenes3 ON (genSegmentoOrigenes3.OriSeg_id = genSegmentos.Origen3N)
LEFT JOIN genSegmentoOrigenes genSegmentoOrigenes4 ON (genSegmentoOrigenes4.OriSeg_id = genSegmentos.Origen4N)
LEFT JOIN genSegmentoOrigenes genSegmentoOrigenes5 ON (genSegmentoOrigenes5.OriSeg_id = genSegmentos.Origen1C)
LEFT JOIN genSegmentoOrigenes genSegmentoOrigenes6 ON (genSegmentoOrigenes6.OriSeg_id = genSegmentos.Origen2C)
LEFT JOIN genSegmentoOrigenes genSegmentoOrigenes7 ON (genSegmentoOrigenes7.OriSeg_id = genSegmentos.Origen3C)
LEFT JOIN genSegmentoOrigenes genSegmentoOrigenes8 ON (genSegmentoOrigenes8.OriSeg_id = genSegmentos.Origen4C)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = genSegmentos.Usuario_Id)
LEFT OUTER JOIN genSegmentosNombres on genSegmentosNombres.Segmento_Id = genSegmentos.genSegmentos
WHERE (genSegmentos.Segmento_Id = @pSegmento_Id)

 RETURN @@Error 

GO

DROP PROCEDURE genSegmentosEliminar
GO
CREATE PROCEDURE genSegmentosEliminar
(
@pSegmento_Id VarChar(10)
)
AS
SET NOCOUNT ON 

DELETE FROM genSegmentos 
WHERE (Segmento_Id = @pSegmento_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKgenSegmentos
GO

CREATE FUNCTION FuncFKgenSegmentos
(
@pSegmento_Id VarChar(10)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = genSegmentos FROM genSegmentos WHERE 
	Segmento_Id = @pSegmento_Id
  RETURN @pIdentity
END


GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genSegmentosConfiguracion.sql*/
DROP PROCEDURE genSegmentosConfiguracion 
GO


CREATE PROCEDURE genSegmentosConfiguracion (
@pSegmento_id VarChar(10), 
@pEmpresa_Id Int)

AS

SELECT Orden1N as Orden, 1 as Campo, 'N' AS Tipo,  Digitos1N as Digitos, 
TieneColumnaAutomatica , genSegmentos.Origen1N AS Origen,
genSegmentosNombres.Nombre1N as Nombre
FROM genSegmentos
	LEFT OUTER JOIN genSegmentosNombres ON
	genSegmentosNombres.Segmento_id = genSegmentos.genSegmentos
	left outer join genSegmentoOrigenes ON
	genSegmentoOrigenes.OriSeg_id = genSegmentos.Origen1N
WHERE 
	genSegmentos.Digitos1N > 0 and 
	genSegmentos.Segmento_id = @pSegmento_id 
UNION ALL	
SELECT Orden2N as Orden, 2 as Campo, 'N' AS Tipo, Digitos2N as Digitos, 
Cast(0 as bit) TieneColumnaAutomatica , genSegmentos.Origen2N AS Origen,
genSegmentosNombres.Nombre2N as Nombre
FROM genSegmentos
	LEFT OUTER JOIN genSegmentosNombres ON
	genSegmentosNombres.Segmento_id = genSegmentos.genSegmentos
	left outer join genSegmentoOrigenes ON
	genSegmentoOrigenes.OriSeg_id = genSegmentos.Origen2N
WHERE 
	genSegmentos.Digitos2N > 0 and 
	genSegmentos.Segmento_id = @pSegmento_id
UNION ALL	
SELECT Orden3N as Orden, 3 as Campo, 'N' AS Tipo, Digitos3N as Digitos, 
Cast(0 as bit) TieneColumnaAutomatica , genSegmentos.Origen3N AS Origen,
genSegmentosNombres.Nombre3N as Nombre
FROM genSegmentos
	LEFT OUTER JOIN genSegmentosNombres ON
	genSegmentosNombres.Segmento_id = genSegmentos.genSegmentos
	left outer join genSegmentoOrigenes ON
	genSegmentoOrigenes.OriSeg_id = genSegmentos.Origen3N
WHERE 
	genSegmentos.Digitos3N > 0 and 
	genSegmentos.Segmento_id = @pSegmento_id
UNION ALL	
SELECT Orden4N as Orden, 4 as Campo, 'N' AS Tipo, Digitos4N as Digitos, 
Cast(0 as bit) TieneColumnaAutomatica , genSegmentos.Origen4N AS Origen,
genSegmentosNombres.Nombre4N as Nombre
FROM genSegmentos
	LEFT OUTER JOIN genSegmentosNombres ON
	genSegmentosNombres.Segmento_id = genSegmentos.genSegmentos
	left outer join genSegmentoOrigenes ON
	genSegmentoOrigenes.OriSeg_id = genSegmentos.Origen4N
WHERE 
	genSegmentos.Digitos4N > 0 and 
	genSegmentos.Segmento_id = @pSegmento_id
UNION ALL
SELECT Orden1C as Orden, 1 as Campo, 'C' AS Tipo,  Digitos1C as Digitos, 
Cast(0 as bit) TieneColumnaAutomatica , genSegmentos.Origen1C AS Origen,
genSegmentosNombres.Nombre1C as Nombre
FROM genSegmentos
	LEFT OUTER JOIN genSegmentosNombres ON
	genSegmentosNombres.Segmento_id = genSegmentos.genSegmentos
	left outer join genSegmentoOrigenes ON
	genSegmentoOrigenes.OriSeg_id = genSegmentos.Origen1C
WHERE 
	genSegmentos.Digitos1C > 0 and 
	genSegmentos.Segmento_id = @pSegmento_id
UNION ALL	
SELECT Orden2C as Orden, 2 as Campo, 'C' AS Tipo, Digitos2C as Digitos, 
Cast(0 as bit) TieneColumnaAutomatica , genSegmentos.Origen2C AS Origen,
genSegmentosNombres.Nombre2C as Nombre
FROM genSegmentos
	LEFT OUTER JOIN genSegmentosNombres ON
	genSegmentosNombres.Segmento_id = genSegmentos.genSegmentos
	left outer join genSegmentoOrigenes ON
	genSegmentoOrigenes.OriSeg_id = genSegmentos.Origen2C
WHERE 
	genSegmentos.Digitos2C > 0 and 
	genSegmentos.Segmento_id = @pSegmento_id
UNION ALL	
SELECT Orden3C as Orden, 3 as Campo, 'C' AS Tipo, Digitos3C as Digitos, 
Cast(0 as bit) TieneColumnaAutomatica , genSegmentos.Origen3C AS Origen,
genSegmentosNombres.Nombre3C as Nombre
FROM genSegmentos
	LEFT OUTER JOIN genSegmentosNombres ON
	genSegmentosNombres.Segmento_id = genSegmentos.genSegmentos
	left outer join genSegmentoOrigenes ON
	genSegmentoOrigenes.OriSeg_id = genSegmentos.Origen3C
WHERE 
	genSegmentos.Digitos3C > 0 and 
	genSegmentos.Segmento_id = @pSegmento_id
UNION ALL	
SELECT Orden4C as Orden, 4 as Campo, 'C' AS Tipo, Digitos4C as Digitos, 
Cast(0 as bit) TieneColumnaAutomatica , genSegmentos.Origen4C AS Origen,
genSegmentosNombres.Nombre4C as Nombre
FROM genSegmentos
	LEFT OUTER JOIN genSegmentosNombres ON
	genSegmentosNombres.Segmento_id = genSegmentos.genSegmentos
	left outer join genSegmentoOrigenes ON
	genSegmentoOrigenes.OriSeg_id = genSegmentos.Origen4C
WHERE 
	genSegmentos.Digitos4C > 0 and 
	genSegmentos.Segmento_id = @pSegmento_id
ORDER BY 1,2	
	
	
GO
	
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genSegmentosNombres.sql*/
Drop Procedure genSegmentosNombresGuardar
GO

Create Procedure genSegmentosNombresGuardar
(
@pSegmento_Id int, 
@pNombre1N varchar(35), 
@pNombre2N varchar(35), 
@pNombre3N varchar(35), 
@pNombre4N varchar(35), 
@pNombre1C varchar(35), 
@pNombre2C varchar(35), 
@pNombre3C varchar(35), 
@pNombre4C varchar(35), 
@pUsuario_Id int 
) 
AS 
SET NOCOUNT ON  
IF (EXISTS (SELECT 1 FROM genSegmentosNombres WHERE 
	Segmento_Id = @pSegmento_Id
))
BEGIN 
	UPDATE genSegmentosNombres SET 
	Nombre1N = @pNombre1N, 
	Nombre2N = @pNombre2N, 
	Nombre3N = @pNombre3N, 
	Nombre4N = @pNombre4N, 
	Nombre1C = @pNombre1C, 
	Nombre2C = @pNombre2C, 
	Nombre3C = @pNombre3C, 
	Nombre4C = @pNombre4C, 
	Usuario_Id = @pUsuario_Id 
	WHERE 
	Segmento_Id =  @pSegmento_id
 
END 
ELSE
BEGIN
	INSERT INTO  genSegmentosNombres
	(Segmento_Id , 
	Nombre1N , 
	Nombre2N , 
	Nombre3N , 
	Nombre4N , 
	Nombre1C , 
	Nombre2C , 
	Nombre3C , 
	Nombre4C , 
	Usuario_Id ) 
	Values 
	(@pSegmento_Id , 
	@pNombre1N , 
	@pNombre2N , 
	@pNombre3N , 
	@pNombre4N , 
	@pNombre1C , 
	@pNombre2C , 
	@pNombre3C , 
	@pNombre4C , 
	@pUsuario_Id ) 
END
RETURN @@Error 

GO
Drop Procedure genSegmentosNombresDatos
GO
CREATE PROCEDURE genSegmentosNombresDatos(
@pSegmento_id int
)
AS
SELECT genSegmentos.Segmento_id, genSegmentos.Descripcion, 
genSegmentosNombres.Nombre1N, genSegmentosNombres.Nombre2N, 
genSegmentosNombres.Nombre3N, genSegmentosNombres.Nombre4N, genSegmentosNombres.Nombre1C, genSegmentosNombres.Nombre2C, 
genSegmentosNombres.Nombre3C, genSegmentosNombres.Nombre4C, genSegmentosNombres.Usuario_Id 
 ,genUsuarios.Apellido_y_Nombres as DescripcionUsuario, genSegmentos.genSegmentos
 FROM genSegmentosNombres  INNER JOIN genSegmentos
	ON genSegmentos.genSegmentos=genSegmentosNombres.Segmento_Id
 INNER JOIN genUsuarios
	ON genUsuarios.genUsuarios=genSegmentosNombres.Usuario_Id
 Where 
	genSegmentos.Segmento_id = @pSegmento_id

GO
Drop Procedure genSegmentosNombresEliminar
GO
Create Procedure genSegmentosNombresEliminar(
@pSegmento_id int
) 
AS 
SET NOCOUNT ON  
DELETE FROM genSegmentosNombres 
	 Where 
	genSegmentosNombres.Segmento_Id = @pSegmento_id
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genSegmentoStr.sql*/
-- genSegmentoStr 'TES','E','0001',' ',' ',10,0,0,0

DROP Procedure genSegmentoStr
GO
CREATE Procedure genSegmentoStr(
	@Segmento_Id VarChar(10), 
	@Segmento1C VarChar(25), 
	@Segmento2C VarChar(25), 
	@Segmento3C VarChar(25), 
	@Segmento4C VarChar(25), 
	@Segmento1N Int,
	@Segmento2N Int,
	@Segmento3N Int,
	@Segmento4N Int
)

AS
SELECT dbo.Segmento(genSegmentos.genSegmentos, 
		@Segmento1C, @Segmento2C, @Segmento3C, @Segmento4C,
		@Segmento1N, @Segmento2N, @Segmento3N, @Segmento4N) AS SegmentoSTR, 
		genSegmentos.Segmento_Id, 
		@Segmento1C as Segmento1C, @Segmento2C as Segmento2C, 
		@Segmento3C as Segmento3C, @Segmento4C as Segmento4C, 
		@Segmento1N as Segmento1N, @Segmento2N as Segmento2N, 
		@Segmento3N as Segmento3N, @Segmento4N as Segmento4N
FROM genSegmentos 
WHERE
	genSegmentos.Segmento_Id = @Segmento_Id
	
GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genSemaforo.sql*/
DROP PROCEDURE genSemaforoGuardar
GO
CREATE PROCEDURE genSemaforoGuardar
(
@pSemaforo varchar(50),
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genSemaforo WHERE (Semaforo = @pSemaforo) AND (Empresa_Id = @pEmpresa_Id)))
BEGIN 
	UPDATE genSemaforo
	SET	 Semaforo = @pSemaforo
	WHERE (Semaforo = @pSemaforo) AND (Empresa_Id = @pEmpresa_Id)
END 
ELSE 
BEGIN 
	INSERT INTO genSemaforo
	(
		Semaforo,
		Empresa_Id
	)
	VALUES 
	(
		@pSemaforo,
		@pEmpresa_Id
	)
END 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genSucursalesEmpr.sql*/
DROP PROCEDURE genSucursalesEmprGuardar
GO
CREATE PROCEDURE genSucursalesEmprGuardar
(
@pSucursal char(4),
@pSucursal_Nuevo char(4),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(50),
@pProvincia_Id varchar(5) = NULL,
@pPais_Id smallint = NULL,
@pDepositoVentas varchar(15) = NULL,
@pDepositoPedidos varchar(15) = NULL,
@pDepositoOC varchar(15) = NULL,
@pFechaCaja datetime,
@pVaConCentral bit,
@pFacturaElectronica bit,
@pUsaWS bit,
@pTipoFE varChar(5) = null,
@pDireccion varchar(120) = NULL,
@pLocalidad varchar(60) = NULL,
@pTelefono varchar(60) = NULL,
@pSucursalRemito char(4) = Null,
@pSucursalTesoreria char(4) = Null,
@pInactivo bit,
@pUsuario_Id int,
@pPosteado bit, 
@pCodigoPostal VarChar(10),
@pSerie varchar(25)=null, 
@pRegPatronal VarChar(20)= NULL,
@pcodColonia VarChar(4)= NULL,
@pcodLocalidad VarChar(4)= NULL,
@pcodMunicipio VarChar(3)= NULL
)
AS
SET NOCOUNT ON 

DECLARE @lIdentidad int

IF (EXISTS (SELECT 1 FROM genSucursalesEmpr WHERE (Sucursal = @pSucursal)))
BEGIN 
	UPDATE genSucursalesEmpr
	SET		@lIdentidad = genSucursalesEmpr,
		Sucursal = @pSucursal_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Provincia_Id = dbo.FuncFKgenProvincias(@pProvincia_Id),
		Pais_Id = dbo.FuncFKgenPaises(@pPais_Id),
		DepositoVentas = dbo.FuncFKstkDepositos(@pDepositoVentas),
		DepositoPedidos = dbo.FuncFKstkDepositos(@pDepositoPedidos),
		DepositoOC = dbo.FuncFKstkDepositos(@pDepositoOC),
		FechaCaja = @pFechaCaja,
		VaConCentral = @pVaConCentral,
		FacturaElectronica = @pFacturaElectronica,
		UsaWS = @pUsaWS,
		TipoFE = @pTipoFE,
		Direccion = @pDireccion,
		Localidad = @pLocalidad,
		Telefono = @pTelefono,
		SucursalRemito = dbo.FuncFKgenSucursalesEmpr(@pSucursalRemito),
		SucursalTesoreria = dbo.FuncFKgenSucursalesEmpr(@pSucursalTesoreria),
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado, 
		CodigoPostal = @pCodigoPostal,
		Serie=@pSerie, 
		RegPatronal = @pRegPatronal, 
		codColonia = @pcodColonia,
		codLocalidad = @pcodLocalidad,
		codMunicipio = @pcodMunicipio
	WHERE (Sucursal = @pSucursal)
END 
ELSE 
BEGIN 
	INSERT INTO genSucursalesEmpr
	(
		Sucursal,
		Empresa_Id,
		Descripcion,
		Provincia_Id,
		Pais_Id,
		DepositoVentas,
		DepositoPedidos,
		DepositoOC,
		FechaCaja,
		VaConCentral,
		FacturaElectronica,
		UsaWS,
		TipoFE,
		Direccion,
		Localidad,
		Telefono,
		SucursalRemito,
		SucursalTesoreria,
		Inactivo,
		Usuario_Id,
		Posteado, 
		CodigoPostal,
		Serie,
		RegPatronal,
		codColonia ,
		codLocalidad ,
		codMunicipio 
	)
	VALUES 
	(
		@pSucursal,
		@pEmpresa_Id,
		@pDescripcion,
		dbo.FuncFKgenProvincias(@pProvincia_Id),
		dbo.FuncFKgenPaises(@pPais_Id),
		dbo.FuncFKstkDepositos(@pDepositoVentas),
		dbo.FuncFKstkDepositos(@pDepositoPedidos),
		dbo.FuncFKstkDepositos(@pDepositoOC),
		@pFechaCaja,
		@pVaConCentral,
		@pFacturaElectronica,
		@pUsaWS,
		@pTipoFE,
		@pDireccion,
		@pLocalidad,
		@pTelefono,
		dbo.FuncFKgenSucursalesEmpr(@pSucursalRemito),
		dbo.FuncFKgenSucursalesEmpr(@pSucursalTesoreria),
		@pInactivo,
		@pUsuario_Id,
		@pPosteado, 
		@pCodigoPostal,
		@pSerie, 
		@pRegPatronal, 
		@pcodColonia ,
		@pcodLocalidad ,
		@pcodMunicipio 
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO


DROP PROCEDURE genSucursalesEmprDatos
GO
CREATE PROCEDURE genSucursalesEmprDatos
(
@pSucursal char(4)
)
AS
SET NOCOUNT ON 

SELECT genSucursalesEmpr.genSucursalesEmpr, genSucursalesEmpr.Sucursal,  
	genSucursalesEmpr.Empresa_Id, 
	Cast( Case When genSucursalesEmpr.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	genSucursalesEmpr.Descripcion, 
	genProvincias.Provincia_Id, genProvincias.Descripcion as DescripcionProvincias, genPaises.Pais_Id,
	genPaises.Descripcion as DescripcionPaises, 
	stkDepositos.Deposito_Id as DepositoVentas, stkDepositos.Descripcion as DescripcionDepositoVentas, 
	stkDepositos2.Deposito_Id as DepositoPedidos, stkDepositos2.Descripcion as DescripcionDepositoPedidos, 
	stkDepositos3.Deposito_Id as DepositoOC, stkDepositos3.Descripcion as DescripcionDepositoOC, 
	genSucursalesEmpr.FechaCaja, genSucursalesEmpr.VaConCentral, genSucursalesEmpr.FacturaElectronica, 
	genSucursalesEmpr.UsaWS, genSucursalesEmpr.TipoFE, genWSFactElec.Descripcion DescripcionTipoFE,
	genSucursalesEmpr.Direccion,
	genSucursalesEmpr.Localidad, genSucursalesEmpr.Telefono, genSucRemito.Sucursal SucursalRemito,
	genSucTesoreria.Sucursal SucursalTesoreria, genSucursalesEmpr.Inactivo, 
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, 
	genSucursalesEmpr.Posteado, genSucursalesEmpr.CodigoPostal,genSucursalesEmpr.Serie, 
	genSucursalesEmpr.RegPatronal, 
	genSucursalesEmpr.codColonia, genColonias.NombreAsentamiento as DescripcioncodColonia,
	genSucursalesEmpr.codLocalidad, genlocalidades.Descripcion as DescripcioncodLocalidad,
	genSucursalesEmpr.codMunicipio, genMunicipios.Descripcion as DescripcioncodMunicipio
FROM genSucursalesEmpr 
LEFT JOIN genProvincias  ON (genProvincias.genProvincias = genSucursalesEmpr.Provincia_Id)
LEFT JOIN genPaises  ON (genPaises.genPaises = genSucursalesEmpr.Pais_Id)
LEFT JOIN stkDepositos  ON (stkDepositos.stkDepositos = genSucursalesEmpr.DepositoVentas)
LEFT JOIN stkDepositos stkDepositos2 ON (stkDepositos2.stkDepositos = genSucursalesEmpr.DepositoPedidos)
LEFT JOIN stkDepositos stkDepositos3 ON (stkDepositos3.stkDepositos = genSucursalesEmpr.DepositoOC)
Left Join genWSFactElec On genWSFactElec.TipoFE = genSucursalesEmpr.TipoFE
Left Join genSucursalesEmpr genSucRemito On genSucRemito.genSucursalesEmpr = genSucursalesEmpr.SucursalRemito
Left Join genSucursalesEmpr genSucTesoreria On genSucTesoreria.genSucursalesEmpr = genSucursalesEmpr.SucursalTesoreria
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = genSucursalesEmpr.Usuario_Id)
LEFT JOIN genColonias ON  genColonias.c_Colonia = genSucursalesEmpr.codColonia and 
						 genColonias.c_CodigoPostal = 	genSucursalesEmpr.CodigoPostal
LEFT JOIN genlocalidades ON  genlocalidades.c_Localidad = genSucursalesEmpr.codLocalidad and 
						 genlocalidades.c_Estado = 	genProvincias.CodFiscal
LEFT JOIN genMunicipios ON  genMunicipios.c_Municipio = genSucursalesEmpr.codMunicipio and 
						 genMunicipios.c_Estado = 	genProvincias.CodFiscal

WHERE (genSucursalesEmpr.Sucursal = @pSucursal)
 


 Declare @pidentity bigint= dbo.FuncFKgenSucursalesEmpr(@pSucursal)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'genSucursalesEmpr'
 RETURN @@Error 

GO


Drop FUNCTION FuncFKgenSucursalesEmpr 
Go
CREATE FUNCTION FuncFKgenSucursalesEmpr  
(  
@pSucursal char (4)  
)  
RETURNS int  
  
AS  
BEGIN  
  DECLARE @pIdentity int  
  SELECT @pIdentity = genSucursalesEmpr FROM genSucursalesEmpr WHERE   
 Sucursal = @pSucursal  
  RETURN @pIdentity  
END  
Go



DROP procedure genSucursalesSetFechaCaja
Go
CREATE procedure genSucursalesSetFechaCaja
(
@pEmpresa_Id int,
@pSucursal char(4),
@pFechaCaja DateTime,
@pEsSucuCentral Sino
)
As
If @pEsSucuCentral = 1
	UPDATE genSucursalesEmpr Set FechaCaja = @pFechaCaja Where Sucursal = @pSucursal Or vaConCentral = 1
Else
	UPDATE genSucursalesEmpr Set FechaCaja = @pFechaCaja Where Sucursal = @pSucursal
GO

DROP PROCEDURE genSucursalesEmprEliminar
GO
CREATE PROCEDURE genSucursalesEmprEliminar
(
@pSucursal char(4)
)
AS
delete from genSucursalesEmpr where Sucursal = @pSucursal
GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genTamanioHoja.sql*/
DROP PROCEDURE genTamanioHojaGuardar
GO
CREATE PROCEDURE genTamanioHojaGuardar
(
@pTamanioHoja varchar(2),
@pDescripcion varchar(50),
@pAltoIn QCantidad,
@pAnchoIn QCantidad,
@pAltocm QCantidad,
@pAnchicm QCantidad,
@pAltoPx int,
@pAnchoPx int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genTamanioHoja WHERE (TamanioHoja = @pTamanioHoja)))
BEGIN 
	UPDATE genTamanioHoja
	SET		Descripcion = @pDescripcion,
		AltoIn = @pAltoIn,
		AnchoIn = @pAnchoIn,
		Altocm = @pAltocm,
		Anchicm = @pAnchicm,
		AltoPx = @pAltoPx,
		AnchoPx = @pAnchoPx
	WHERE (TamanioHoja = @pTamanioHoja)
END 
ELSE 
BEGIN 
	INSERT INTO genTamanioHoja
	(
		TamanioHoja,
		Descripcion,
		AltoIn,
		AnchoIn,
		Altocm,
		Anchicm,
		AltoPx,
		AnchoPx
	)
	VALUES 
	(
		@pTamanioHoja,
		@pDescripcion,
		@pAltoIn,
		@pAnchoIn,
		@pAltocm,
		@pAnchicm,
		@pAltoPx,
		@pAnchoPx
	)
END 

GO

DROP PROCEDURE genTamanioHojaDatos
GO
CREATE PROCEDURE genTamanioHojaDatos
(
@pTamanioHoja varchar(2)
)
AS
SET NOCOUNT ON 

SELECT genTamanioHoja.TamanioHoja, genTamanioHoja.Descripcion, genTamanioHoja.AltoIn, genTamanioHoja.AnchoIn,
	genTamanioHoja.Altocm, genTamanioHoja.Anchicm, genTamanioHoja.AltoPx, genTamanioHoja.AnchoPx
FROM genTamanioHoja 
WHERE (TamanioHoja = @pTamanioHoja)
 
 RETURN @@Error 

GO

DROP PROCEDURE genTamanioHojaEliminar
GO
CREATE PROCEDURE genTamanioHojaEliminar
(
@pTamanioHoja varchar(2) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM genTamanioHoja 
WHERE (TamanioHoja = ISNULL(@pTamanioHoja, TamanioHoja))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genTareas.sql*/
DROP FUNCTION FuncFKgenTareas
GO

CREATE FUNCTION FuncFKgenTareas
(
@pTarea_Id varchar (80)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = genTareas FROM genTareas WHERE 
	Tarea_Id = @pTarea_Id
  RETURN @pIdentity
END

GO

DROP PROCEDURE genTareasParametrosDatos
GO
CREATE PROCEDURE genTareasParametrosDatos
(
@pTarea_Id varchar (80)
)
AS
SET NOCOUNT ON 

SELECT genTareasParametros.Parametro, genTareasParametros.Descripcion, '' as Valor, genTareasParametros.Obligatorio
FROM genTareasParametros 
WHERE genTareasParametros.Tarea_Id = dbo.FuncFKgenTareas(@pTarea_Id) 

RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genTareasProgConRepeticion.sql*/
DROP PROCEDURE genTareasProgConRepeticionGuardar
GO
CREATE PROCEDURE genTareasProgConRepeticionGuardar
(
@pTareaProgramada_Id int,
@pValor int,
@pUnidadMedida varchar(15)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genTareasProgConRepeticion WHERE (TareaProgramada_Id = @pTareaProgramada_Id)))
BEGIN 
	UPDATE genTareasProgConRepeticion
	SET		Valor = @pValor,
		UnidadMedida = @pUnidadMedida
	WHERE (TareaProgramada_Id = @pTareaProgramada_Id)
END 
ELSE 
BEGIN 
	INSERT INTO genTareasProgConRepeticion
	(
		TareaProgramada_Id,
		Valor,
		UnidadMedida
	)
	VALUES 
	(
		@pTareaProgramada_Id,
		@pValor,
		@pUnidadMedida
	)
END 

GO

DROP PROCEDURE genTareasProgConRepeticionDatos
GO
CREATE PROCEDURE genTareasProgConRepeticionDatos
(
@pTareaProgramada_Id int
)
AS
SET NOCOUNT ON 

SELECT genTareasProgConRepeticion.Valor, genTareasProgConRepeticion.UnidadMedida
FROM genTareasProgConRepeticion 
INNER JOIN genTareasProgramadas  ON (genTareasProgramadas.genTareasProgramadas = genTareasProgConRepeticion.TareaProgramada_Id)
WHERE (genTareasProgConRepeticion.TareaProgramada_Id = @pTareaProgramada_Id)
 
RETURN @@Error 

GO

DROP PROCEDURE genTareasProgConRepeticionEliminar
GO
CREATE PROCEDURE genTareasProgConRepeticionEliminar
(
@pTareaProgramada_Id varchar(80)
)
AS
SET NOCOUNT ON 

DELETE FROM genTareasProgConRepeticion 
WHERE (TareaProgramada_Id = dbo.FuncFKgenTareasProgramadas(@pTareaProgramada_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genTareasProgDiarias.sql*/
DROP PROCEDURE genTareasProgDiariasGuardar
GO
CREATE PROCEDURE genTareasProgDiariasGuardar
(
@pTareaProgramada_Id int,
@pValor int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genTareasProgDiarias WHERE (TareaProgramada_Id = @pTareaProgramada_Id)))
BEGIN 
	UPDATE genTareasProgDiarias
	SET		Valor = @pValor
	WHERE (TareaProgramada_Id = @pTareaProgramada_Id)
END 
ELSE 
BEGIN 
	INSERT INTO genTareasProgDiarias
	(
		TareaProgramada_Id,
		Valor
	)
	VALUES 
	(
		@pTareaProgramada_Id,
		@pValor
	)
END 

GO

DROP PROCEDURE genTareasProgDiariasDatos
GO
CREATE PROCEDURE genTareasProgDiariasDatos
(
@pTareaProgramada_Id int
)
AS
SET NOCOUNT ON 

SELECT genTareasProgDiarias.Valor
FROM genTareasProgDiarias 
INNER JOIN genTareasProgramadas  ON (genTareasProgramadas.genTareasProgramadas = genTareasProgDiarias.TareaProgramada_Id)
WHERE (genTareasProgDiarias.TareaProgramada_Id = @pTareaProgramada_Id)
 
RETURN @@Error 

GO

DROP PROCEDURE genTareasProgDiariasEliminar
GO
CREATE PROCEDURE genTareasProgDiariasEliminar
(
@pTareaProgramada_Id varchar(80)
)
AS
SET NOCOUNT ON 

DELETE FROM genTareasProgDiarias 
WHERE (TareaProgramada_Id = dbo.FuncFKgenTareasProgramadas(@pTareaProgramada_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genTareasProgMensuales.sql*/
DROP PROCEDURE genTareasProgMensualesGuardar
GO
CREATE PROCEDURE genTareasProgMensualesGuardar
(
@pTareaProgramada_Id int,
@pEnero Sino,
@pFebrero Sino,
@pMarzo Sino,
@pAbril Sino,
@pMayo Sino,
@pJunio Sino,
@pJulio Sino,
@pAgosto Sino,
@pSeptiembre Sino,
@pOctubre Sino,
@pNoviembre Sino,
@pDiciembre Sino
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genTareasProgMensuales WHERE (TareaProgramada_Id = @pTareaProgramada_Id)))
BEGIN 
	UPDATE genTareasProgMensuales
	SET		Enero = @pEnero,
		Febrero = @pFebrero,
		Marzo = @pMarzo,
		Abril = @pAbril,
		Mayo = @pMayo,
		Junio = @pJunio,
		Julio = @pJulio,
		Agosto = @pAgosto,
		Septiembre = @pSeptiembre,
		Octubre = @pOctubre,
		Noviembre = @pNoviembre,
		Diciembre = @pDiciembre
	WHERE (TareaProgramada_Id = @pTareaProgramada_Id)
END 
ELSE 
BEGIN 
	INSERT INTO genTareasProgMensuales
	(
		TareaProgramada_Id,
		Enero,
		Febrero,
		Marzo,
		Abril,
		Mayo,
		Junio,
		Julio,
		Agosto,
		Septiembre,
		Octubre,
		Noviembre,
		Diciembre
	)
	VALUES 
	(
		@pTareaProgramada_Id,
		@pEnero,
		@pFebrero,
		@pMarzo,
		@pAbril,
		@pMayo,
		@pJunio,
		@pJulio,
		@pAgosto,
		@pSeptiembre,
		@pOctubre,
		@pNoviembre,
		@pDiciembre
	)
END 

GO

DROP PROCEDURE genTareasProgMensualesDatos
GO
CREATE PROCEDURE genTareasProgMensualesDatos
(
@pTareaProgramada_Id int
)
AS
SET NOCOUNT ON 

SELECT cast(1 as bit) EsPorDiaSemana
WHERE (Exists (select 1 
			  from genTareasProgMensualesXDiaSemana 
			  where (genTareasProgMensualesXDiaSemana.TareaProgramada_Id = @pTareaProgramada_Id)))
UNION
SELECT cast(0 as bit) EsPorDiaSemana
WHERE (Not Exists (select 1 
			  from genTareasProgMensualesXDiaSemana 
			  where (genTareasProgMensualesXDiaSemana.TareaProgramada_Id = @pTareaProgramada_Id)))


SELECT genTareasProgMensuales.Enero, genTareasProgMensuales.Febrero,
	genTareasProgMensuales.Marzo, genTareasProgMensuales.Abril, genTareasProgMensuales.Mayo, genTareasProgMensuales.Junio,
	genTareasProgMensuales.Julio, genTareasProgMensuales.Agosto, genTareasProgMensuales.Septiembre, genTareasProgMensuales.Octubre,
	genTareasProgMensuales.Noviembre, genTareasProgMensuales.Diciembre
FROM genTareasProgMensuales 
WHERE (genTareasProgMensuales.TareaProgramada_Id = @pTareaProgramada_Id)
 
RETURN @@Error 

GO

DROP PROCEDURE genTareasProgMensualesEliminar
GO
CREATE PROCEDURE genTareasProgMensualesEliminar
(
@pTareaProgramada_Id varchar(80)
)
AS
SET NOCOUNT ON 

DELETE FROM genTareasProgMensuales 
WHERE (TareaProgramada_Id = dbo.FuncFKgenTareasProgramadas(@pTareaProgramada_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genTareasProgMensualesXDia.sql*/
DROP PROCEDURE genTareasProgMensualesXDiaGuardar
GO
CREATE PROCEDURE genTareasProgMensualesXDiaGuardar
(
@pTareaProgramada_Id int,
@pDia_1 Sino,
@pDia_2 Sino,
@pDia_3 Sino,
@pDia_4 Sino,
@pDia_5 Sino,
@pDia_6 Sino,
@pDia_7 Sino,
@pDia_8 Sino,
@pDia_9 Sino,
@pDia_10 Sino,
@pDia_11 Sino,
@pDia_12 Sino,
@pDia_13 Sino,
@pDia_14 Sino,
@pDia_15 Sino,
@pDia_16 Sino,
@pDia_17 Sino,
@pDia_18 Sino,
@pDia_19 Sino,
@pDia_20 Sino,
@pDia_21 Sino,
@pDia_22 Sino,
@pDia_23 Sino,
@pDia_24 Sino,
@pDia_25 Sino,
@pDia_26 Sino,
@pDia_27 Sino,
@pDia_28 Sino,
@pDia_29 Sino,
@pDia_30 Sino,
@pDia_31 Sino,
@pUltimo Sino
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genTareasProgMensualesXDia WHERE (TareaProgramada_Id = @pTareaProgramada_Id)))
BEGIN 
	UPDATE genTareasProgMensualesXDia
	SET		Dia_1 = @pDia_1,
		Dia_2 = @pDia_2,
		Dia_3 = @pDia_3,
		Dia_4 = @pDia_4,
		Dia_5 = @pDia_5,
		Dia_6 = @pDia_6,
		Dia_7 = @pDia_7,
		Dia_8 = @pDia_8,
		Dia_9 = @pDia_9,
		Dia_10 = @pDia_10,
		Dia_11 = @pDia_11,
		Dia_12 = @pDia_12,
		Dia_13 = @pDia_13,
		Dia_14 = @pDia_14,
		Dia_15 = @pDia_15,
		Dia_16 = @pDia_16,
		Dia_17 = @pDia_17,
		Dia_18 = @pDia_18,
		Dia_19 = @pDia_19,
		Dia_20 = @pDia_20,
		Dia_21 = @pDia_21,
		Dia_22 = @pDia_22,
		Dia_23 = @pDia_23,
		Dia_24 = @pDia_24,
		Dia_25 = @pDia_25,
		Dia_26 = @pDia_26,
		Dia_27 = @pDia_27,
		Dia_28 = @pDia_28,
		Dia_29 = @pDia_29,
		Dia_30 = @pDia_30,
		Dia_31 = @pDia_31,
		Ultimo = @pUltimo
	WHERE (TareaProgramada_Id = @pTareaProgramada_Id)
END 
ELSE 
BEGIN 
	INSERT INTO genTareasProgMensualesXDia
	(
		TareaProgramada_Id,
		Dia_1,
		Dia_2,
		Dia_3,
		Dia_4,
		Dia_5,
		Dia_6,
		Dia_7,
		Dia_8,
		Dia_9,
		Dia_10,
		Dia_11,
		Dia_12,
		Dia_13,
		Dia_14,
		Dia_15,
		Dia_16,
		Dia_17,
		Dia_18,
		Dia_19,
		Dia_20,
		Dia_21,
		Dia_22,
		Dia_23,
		Dia_24,
		Dia_25,
		Dia_26,
		Dia_27,
		Dia_28,
		Dia_29,
		Dia_30,
		Dia_31,
		Ultimo
	)
	VALUES 
	(
		@pTareaProgramada_Id,
		@pDia_1,
		@pDia_2,
		@pDia_3,
		@pDia_4,
		@pDia_5,
		@pDia_6,
		@pDia_7,
		@pDia_8,
		@pDia_9,
		@pDia_10,
		@pDia_11,
		@pDia_12,
		@pDia_13,
		@pDia_14,
		@pDia_15,
		@pDia_16,
		@pDia_17,
		@pDia_18,
		@pDia_19,
		@pDia_20,
		@pDia_21,
		@pDia_22,
		@pDia_23,
		@pDia_24,
		@pDia_25,
		@pDia_26,
		@pDia_27,
		@pDia_28,
		@pDia_29,
		@pDia_30,
		@pDia_31,
		@pUltimo
	)
END 

GO

DROP PROCEDURE genTareasProgMensualesXDiaDatos
GO
CREATE PROCEDURE genTareasProgMensualesXDiaDatos
(
@pTareaProgramada_Id int
)
AS
SET NOCOUNT ON 

SELECT genTareasProgMensualesXDia.Dia_1, genTareasProgMensualesXDia.Dia_2,
	genTareasProgMensualesXDia.Dia_3, genTareasProgMensualesXDia.Dia_4, genTareasProgMensualesXDia.Dia_5, genTareasProgMensualesXDia.Dia_6,
	genTareasProgMensualesXDia.Dia_7, genTareasProgMensualesXDia.Dia_8, genTareasProgMensualesXDia.Dia_9, genTareasProgMensualesXDia.Dia_10,
	genTareasProgMensualesXDia.Dia_11, genTareasProgMensualesXDia.Dia_12, genTareasProgMensualesXDia.Dia_13, genTareasProgMensualesXDia.Dia_14,
	genTareasProgMensualesXDia.Dia_15, genTareasProgMensualesXDia.Dia_16, genTareasProgMensualesXDia.Dia_17, genTareasProgMensualesXDia.Dia_18,
	genTareasProgMensualesXDia.Dia_19, genTareasProgMensualesXDia.Dia_20, genTareasProgMensualesXDia.Dia_21, genTareasProgMensualesXDia.Dia_22,
	genTareasProgMensualesXDia.Dia_23, genTareasProgMensualesXDia.Dia_24, genTareasProgMensualesXDia.Dia_25, genTareasProgMensualesXDia.Dia_26,
	genTareasProgMensualesXDia.Dia_27, genTareasProgMensualesXDia.Dia_28, genTareasProgMensualesXDia.Dia_29, genTareasProgMensualesXDia.Dia_30,
	genTareasProgMensualesXDia.Dia_31, genTareasProgMensualesXDia.Ultimo
FROM genTareasProgMensualesXDia 
WHERE (genTareasProgMensualesXDia.TareaProgramada_Id = @pTareaProgramada_Id)
 
RETURN @@Error 

GO

DROP PROCEDURE genTareasProgMensualesXDiaEliminar
GO
CREATE PROCEDURE genTareasProgMensualesXDiaEliminar
(
@pTareaProgramada_Id varchar(80)
)
AS
SET NOCOUNT ON 

DELETE FROM genTareasProgMensualesXDia 
WHERE (TareaProgramada_Id = dbo.FuncFKgenTareasProgramadas(@pTareaProgramada_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genTareasProgMensualesXDiaSemana.sql*/
DROP PROCEDURE genTareasProgMensualesXDiaSemanaGuardar
GO
CREATE PROCEDURE genTareasProgMensualesXDiaSemanaGuardar
(
@pTareaProgramada_Id int,
@pPrimero Sino,
@pSegundo Sino,
@pTercero Sino,
@pCuarto Sino,
@pUltimo Sino,
@pLunes Sino,
@pMartes Sino,
@pMiercoles Sino,
@pJueves Sino,
@pViernes Sino,
@pSabado Sino,
@pDomingo Sino
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genTareasProgMensualesXDiaSemana WHERE (TareaProgramada_Id = @pTareaProgramada_Id)))
BEGIN 
	UPDATE genTareasProgMensualesXDiaSemana
	SET		Primero = @pPrimero,
		Segundo = @pSegundo,
		Tercero = @pTercero,
		Cuarto = @pCuarto,
		Ultimo = @pUltimo,
		Lunes = @pLunes,
		Martes = @pMartes,
		Miercoles = @pMiercoles,
		Jueves = @pJueves,
		Viernes = @pViernes,
		Sabado = @pSabado,
		Domingo = @pDomingo
	WHERE (TareaProgramada_Id = @pTareaProgramada_Id)
END 
ELSE 
BEGIN 
	INSERT INTO genTareasProgMensualesXDiaSemana
	(
		TareaProgramada_Id,
		Primero,
		Segundo,
		Tercero,
		Cuarto,
		Ultimo,
		Lunes,
		Martes,
		Miercoles,
		Jueves,
		Viernes,
		Sabado,
		Domingo
	)
	VALUES 
	(
		@pTareaProgramada_Id,
		@pPrimero,
		@pSegundo,
		@pTercero,
		@pCuarto,
		@pUltimo,
		@pLunes,
		@pMartes,
		@pMiercoles,
		@pJueves,
		@pViernes,
		@pSabado,
		@pDomingo
	)
END 

GO

DROP PROCEDURE genTareasProgMensualesXDiaSemanaDatos
GO
CREATE PROCEDURE genTareasProgMensualesXDiaSemanaDatos
(
@pTareaProgramada_Id int
)
AS
SET NOCOUNT ON 

SELECT genTareasProgMensualesXDiaSemana.Primero, genTareasProgMensualesXDiaSemana.Segundo,
	genTareasProgMensualesXDiaSemana.Tercero, genTareasProgMensualesXDiaSemana.Cuarto, genTareasProgMensualesXDiaSemana.Ultimo
FROM genTareasProgMensualesXDiaSemana 
WHERE (genTareasProgMensualesXDiaSemana.TareaProgramada_Id = @pTareaProgramada_Id)

SELECT genTareasProgMensualesXDiaSemana.Lunes,	genTareasProgMensualesXDiaSemana.Martes, genTareasProgMensualesXDiaSemana.Miercoles, 
	genTareasProgMensualesXDiaSemana.Jueves, genTareasProgMensualesXDiaSemana.Viernes,
	genTareasProgMensualesXDiaSemana.Sabado, genTareasProgMensualesXDiaSemana.Domingo
FROM genTareasProgMensualesXDiaSemana 
WHERE (genTareasProgMensualesXDiaSemana.TareaProgramada_Id = @pTareaProgramada_Id)
 
RETURN @@Error 

GO

DROP PROCEDURE genTareasProgMensualesXDiaSemanaEliminar
GO
CREATE PROCEDURE genTareasProgMensualesXDiaSemanaEliminar
(
@pTareaProgramada_Id varchar(80)
)
AS
SET NOCOUNT ON 

DELETE FROM genTareasProgMensualesXDiaSemana 
WHERE (TareaProgramada_Id = dbo.FuncFKgenTareasProgramadas(@pTareaProgramada_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genTareasProgParametros.sql*/
DROP PROCEDURE genTareasProgParametrosGuardar
GO
CREATE PROCEDURE genTareasProgParametrosGuardar
(
@pTareaProgramada_Id int,
@pParametro varchar(40),
@pValor varchar(80) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genTareasProgParametros WHERE (TareaProgramada_Id = @pTareaProgramada_Id) AND (Parametro = @pParametro)))
BEGIN 
	UPDATE genTareasProgParametros
	SET		Valor = @pValor		   
	WHERE (TareaProgramada_Id = @pTareaProgramada_Id) AND (Parametro = @pParametro) 
END 
ELSE 
BEGIN 
	INSERT INTO genTareasProgParametros
	(
		TareaProgramada_Id,
		Parametro,
		Valor
	)
	VALUES 
	(
		@pTareaProgramada_Id,
		@pParametro,
		@pValor
	)
END 

GO

DROP PROCEDURE genTareasProgParametrosDatos
GO
CREATE PROCEDURE genTareasProgParametrosDatos
(
@pTareaProgramada_Id int
)
AS
SET NOCOUNT ON 

SELECT genTareasProgParametros.Parametro, genTareasParametros.Descripcion, genTareasProgParametros.Valor, genTareasParametros.Obligatorio
FROM genTareasProgParametros 
INNER JOIN genTareasProgramadas ON (genTareasProgramadas.genTareasProgramadas = genTareasProgParametros.TareaProgramada_Id)
INNER JOIN genTareasParametros ON (genTareasParametros.Tarea_Id = genTareasProgramadas.Tarea_Id)  AND (genTareasParametros.Parametro = genTareasProgParametros.Parametro)
WHERE (genTareasProgParametros.TareaProgramada_Id = @pTareaProgramada_Id)
UNION 
SELECT genTareasParametros.Parametro, genTareasParametros.Descripcion, '', genTareasParametros.Obligatorio
FROM genTareasParametros 
INNER JOIN genTareasProgramadas ON (genTareasParametros.Tarea_Id = genTareasProgramadas.Tarea_Id)
WHERE (genTareasProgramadas.genTareasProgramadas = @pTareaProgramada_Id) 
AND NOT EXISTS (SELECT 1 
				FROM genTareasProgParametros 
				WHERE genTareasProgParametros.TareaProgramada_Id = @pTareaProgramada_Id
				AND genTareasProgParametros.Parametro = genTareasParametros .Parametro)

RETURN @@Error 

GO

DROP PROCEDURE genTareasProgParametrosEliminar
GO
CREATE PROCEDURE genTareasProgParametrosEliminar
(
@pTareaProgramada_Id varchar(80)
)
AS
SET NOCOUNT ON 

DELETE FROM genTareasProgParametros 
WHERE (TareaProgramada_Id = dbo.FuncFKgenTareasProgramadas(@pTareaProgramada_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genTareasProgramadas.sql*/

DROP PROCEDURE genTareasProgramadasGuardar
GO
CREATE PROCEDURE genTareasProgramadasGuardar
(
@pTareaProgramada_Id varchar(80),
@pTareaProgramada_Id_Nuevo varchar(80),
@pDescripcion varchar(200),
@pTarea_Id varchar(80),
@pFechaInicio qFechaHora,
@pHoraInicio varchar(5),
@pFechaFin qFechaHora = NULL,
@pHoraFin varchar(5) = NULL,
@pTipoEjecucionTarea_Id varchar(2),
@pEmpresa_Id int = NULL,
@pInactivo Sino,
@pUsuario_Id int,
@pPosteado Sino
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM genTareasProgramadas WHERE (TareaProgramada_Id = @pTareaProgramada_Id)))
BEGIN 
	UPDATE genTareasProgramadas
	SET		@lIdentidad = genTareasProgramadas,
		TareaProgramada_Id = @pTareaProgramada_Id_Nuevo,
		Descripcion = @pDescripcion,
		Tarea_Id = dbo.FuncFKgenTareas(@pTarea_Id),
		FechaInicio = @pFechaInicio,
		HoraInicio = @pHoraInicio,
		FechaFin = @pFechaFin,
		HoraFin = @pHoraFin,
		TipoEjecucionTarea_Id = @pTipoEjecucionTarea_Id,
		Empresa_Id = @pEmpresa_Id,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (TareaProgramada_Id = @pTareaProgramada_Id)
END 
ELSE 
BEGIN 
	INSERT INTO genTareasProgramadas
	(
		TareaProgramada_Id,
		Descripcion,
		Tarea_Id,
		FechaInicio,
		HoraInicio,
		FechaFin,
		HoraFin,
		TipoEjecucionTarea_Id,
		Empresa_Id,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pTareaProgramada_Id,
		@pDescripcion,
		dbo.FuncFKgenTareas(@pTarea_Id),
		@pFechaInicio,
		@pHoraInicio,
		@pFechaFin,
		@pHoraFin,
		@pTipoEjecucionTarea_Id,
		@pEmpresa_Id,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO


DROP PROCEDURE genTareasProgramadasDatos
GO
CREATE PROCEDURE genTareasProgramadasDatos
(
@pTareaProgramada_Id varchar(80)
)
AS
SET NOCOUNT ON 

SELECT genTareasProgramadas.genTareasProgramadas, genTareasProgramadas.TareaProgramada_Id, genTareasProgramadas.Descripcion,
	genTareasProgramadas.TipoEjecucionTarea_Id,	 
	genTareas.Tarea_Id, genTareas.Descripcion as DescripcionTareas, 
	genTareasProgramadas.FechaInicio, genTareasProgramadas.HoraInicio, genTareasProgramadas.FechaFin, genTareasProgramadas.HoraFin, 
	genTareasProgramadas.TareaProgramada_Id TareaProgramada_Id_Nueva, genTareasProgramadas.Empresa_Id, 
	Cast( Case When genTareasProgramadas.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, genTareasProgramadas.Inactivo,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, genTareasProgramadas.Posteado, '' as Sitio
FROM genTareasProgramadas 
INNER JOIN genTiposEjecucionTarea  ON (genTiposEjecucionTarea.TipoEjecucionTarea_Id = genTareasProgramadas.TipoEjecucionTarea_Id)
INNER JOIN genTareas  ON (genTareas.genTareas = genTareasProgramadas.Tarea_Id)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = genTareasProgramadas.Usuario_Id)
WHERE (TareaProgramada_Id = @pTareaProgramada_Id)
 
Declare @pidentity bigint= dbo.FuncFKgenTareasProgramadas(@pTareaProgramada_Id)

exec genTareasProgConRepeticionDatos @pidentity

exec genTareasProgDiariasDatos @pidentity

exec genTareasProgSemanalesDatos @pidentity

exec genTareasProgMensualesDatos @pidentity

exec genTareasProgMensualesXDiaDatos @pidentity

exec genTareasProgMensualesXDiaSemanaDatos @pidentity

exec genTareasProgParametrosDatos @pidentity

RETURN @@Error 

GO

DROP PROCEDURE genTareasProgramadasEliminar
GO
CREATE PROCEDURE genTareasProgramadasEliminar
(
@pTareaProgramada_Id varchar(80) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM genTareasProgramadas 
WHERE (TareaProgramada_Id = @pTareaProgramada_Id)
 
 RETURN @@Error 

GO


DROP PROCEDURE genTareasProgramadasTodasDatos
GO
CREATE PROCEDURE genTareasProgramadasTodasDatos
(
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 

SELECT genTareasProgramadas.genTareasProgramadas, genTareasProgramadas.TareaProgramada_Id, genTareasProgramadas.Descripcion,
	genTareas.Tarea_Id, genTareas.Descripcion as DescripcionTareas, 
	genTareasProgramadas.FechaInicio, genTareasProgramadas.HoraInicio, genTareasProgramadas.FechaFin, genTareasProgramadas.HoraFin, 
	genTareasProgramadas.Inactivo, 
	'' as EstadoSO, CONVERT(date, null) as FechaUltEjecucion, '' as HoraUltEjecucion,  CONVERT(date, null) as FechaProxEjecucion, 
	'' as HoraProxEjecucion, '' as ResultadoUltVez, '' as EstadoActual, '' as ColorFondo, '' as ColorTexto, CAST(0 as bit) EstadoCorrecto
FROM genTareasProgramadas 
INNER JOIN genTareas  ON (genTareas.genTareas = genTareasProgramadas.Tarea_Id)
WHERE (genTareasProgramadas.Empresa_Id = @pEmpresa_Id)

RETURN @@Error 

GO



DROP FUNCTION FuncFKgenTareasProgramadas
GO

CREATE FUNCTION FuncFKgenTareasProgramadas
(
@pTareaProgramada_Id varchar (80)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = genTareasProgramadas FROM genTareasProgramadas WHERE 
	TareaProgramada_Id = @pTareaProgramada_Id
  RETURN @pIdentity
END

GO





Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genTareasProgSemanales.sql*/
DROP PROCEDURE genTareasProgSemanalesGuardar
GO
CREATE PROCEDURE genTareasProgSemanalesGuardar
(
@pTareaProgramada_Id int,
@pValor int,
@pLunes Sino,
@pMartes Sino,
@pMiercoles Sino,
@pJueves Sino,
@pViernes Sino,
@pSabado Sino,
@pDomingo Sino
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genTareasProgSemanales WHERE (TareaProgramada_Id = @pTareaProgramada_Id)))
BEGIN 
	UPDATE genTareasProgSemanales
	SET		Valor = @pValor,
		Lunes = @pLunes,
		Martes = @pMartes,
		Miercoles = @pMiercoles,
		Jueves = @pJueves,
		Viernes = @pViernes,
		Sabado = @pSabado,
		Domingo = @pDomingo
	WHERE (TareaProgramada_Id = @pTareaProgramada_Id)
END 
ELSE 
BEGIN 
	INSERT INTO genTareasProgSemanales
	(
		TareaProgramada_Id,
		Valor,
		Lunes,
		Martes,
		Miercoles,
		Jueves,
		Viernes,
		Sabado,
		Domingo
	)
	VALUES 
	(
		@pTareaProgramada_Id,
		@pValor,
		@pLunes,
		@pMartes,
		@pMiercoles,
		@pJueves,
		@pViernes,
		@pSabado,
		@pDomingo
	)
END 

GO

DROP PROCEDURE genTareasProgSemanalesDatos
GO
CREATE PROCEDURE genTareasProgSemanalesDatos
(
@pTareaProgramada_Id int
)
AS
SET NOCOUNT ON 

SELECT genTareasProgSemanales.Valor
FROM genTareasProgSemanales 
WHERE (genTareasProgSemanales.TareaProgramada_Id = @pTareaProgramada_Id)

SELECT genTareasProgSemanales.Lunes,
	genTareasProgSemanales.Martes, genTareasProgSemanales.Miercoles, genTareasProgSemanales.Jueves, genTareasProgSemanales.Viernes,
	genTareasProgSemanales.Sabado, genTareasProgSemanales.Domingo
FROM genTareasProgSemanales 
WHERE (genTareasProgSemanales.TareaProgramada_Id = @pTareaProgramada_Id)
 
RETURN @@Error 

GO

DROP PROCEDURE genTareasProgSemanalesEliminar
GO
CREATE PROCEDURE genTareasProgSemanalesEliminar
(
@pTareaProgramada_Id varchar(80)
)
AS
SET NOCOUNT ON 

DELETE FROM genTareasProgSemanales 
WHERE (TareaProgramada_Id = dbo.FuncFKgenTareasProgramadas(@pTareaProgramada_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genTipoCambio.sql*/
DROP PROCEDURE genTipoCambioGuardar
GO
CREATE PROCEDURE genTipoCambioGuardar
(
@pMoneda_Id VarChar(3),
@pFecha qFecha,
@pEmpresa_Id int = NULL,
@pCambioCompra qMonedaD8,
@pCambioVenta qMonedaD8,
@pUsuario_Id int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genTipoCambio WHERE (Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id)) AND (Fecha = @pFecha) and 
	Empresa_id = isnull(@pEmpresa_Id,Empresa_id) ))
BEGIN 
	UPDATE genTipoCambio
	SET		Empresa_Id = @pEmpresa_Id,
		CambioCompra = @pCambioCompra,
		CambioVenta = @pCambioVenta,
		Usuario_Id = @pUsuario_Id
	WHERE (Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id)) AND (Fecha = @pFecha) and Empresa_id = isnull(@pEmpresa_Id,Empresa_id)
END 
ELSE 
BEGIN 
	INSERT INTO genTipoCambio
	(
		Moneda_Id,
		Fecha,
		Empresa_Id,
		CambioCompra,
		CambioVenta,
		Usuario_Id
	)
	VALUES 
	(
		dbo.FuncFKgenMonedas(@pMoneda_Id),
		@pFecha,
		@pEmpresa_Id,
		@pCambioCompra,
		@pCambioVenta,
		@pUsuario_Id
	)
END 

GO

DROP PROCEDURE genTipoCambioDatos
GO
CREATE PROCEDURE genTipoCambioDatos
(
@pMoneda_Id VarChar(3),
@pFecha qFecha, 
@pEmpresa_Id int 
)
AS
SET NOCOUNT ON 

SELECT genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas, genTipoCambio.Fecha, genTipoCambio.Empresa_Id,
	Cast( Case When genTipoCambio.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, genTipoCambio.CambioCompra, genTipoCambio.CambioVenta, genUsuarios.Usuario_Id,
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario
FROM genTipoCambio 
INNER JOIN genMonedas  ON (genMonedas.genMonedas = genTipoCambio.Moneda_Id)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = genTipoCambio.Usuario_Id)
WHERE genMonedas.Moneda_Id = @pMoneda_Id and 
isnull(genTipoCambio.Empresa_Id, @pEmpresa_id) =@pEmpresa_id  AND 
genTipoCambio.Fecha = (SELECT MAX(Fecha) from genTipoCambio genTipoCambio1 where
		genTipoCambio1.Moneda_id =   dbo.FuncFKgenMonedas(@pMoneda_Id) and 
		isnull(genTipoCambio1.Empresa_Id, @pEmpresa_id) =@pEmpresa_id and 
		genTipoCambio1.Fecha <= @pFecha)
 
 RETURN @@Error 

GO

DROP PROCEDURE genTipoCambioEliminar
GO
CREATE PROCEDURE genTipoCambioEliminar
(
@pMoneda_Id varchar(3),
@pFecha qFecha,
@pEmpresa_Id int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM genTipoCambio 
WHERE (Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id))
AND Fecha = @pFecha AND 
Empresa_id = isnull(@pEmpresa_Id,Empresa_id)
 
 RETURN @@Error 

GO

DROP PROCEDURE genTipoCambioPostDatos
GO
CREATE PROCEDURE genTipoCambioPostDatos
(
@pMoneda_Id VarChar(3),
@pFecha qFecha, 
@pEmpresa_Id int 
)
AS
SET NOCOUNT ON 

SELECT genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas, genTipoCambio.Fecha, genTipoCambio.Empresa_Id,
	Cast( Case When genTipoCambio.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, genTipoCambio.CambioCompra, genTipoCambio.CambioVenta, genUsuarios.Usuario_Id,
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario
FROM genTipoCambio 
INNER JOIN genMonedas  ON (genMonedas.genMonedas = genTipoCambio.Moneda_Id)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = genTipoCambio.Usuario_Id)
WHERE genMonedas.Moneda_Id = @pMoneda_Id and 
isnull(genTipoCambio.Empresa_Id, @pEmpresa_id) = @pEmpresa_id AND 
genTipoCambio.Fecha = (SELECT Min(Fecha) from genTipoCambio genTipoCambio1 where
		genTipoCambio1.Moneda_id = dbo.FuncFKgenMonedas(@pMoneda_Id) and 
		isnull(genTipoCambio1.Empresa_Id, @pEmpresa_id) = @pEmpresa_id and 
		genTipoCambio1.Fecha >= @pFecha)
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genTiposCompAfipDatos.sql*/
DROP PROCEDURE genTiposCompAfipDatos
GO
CREATE PROCEDURE genTiposCompAfipDatos
(
@pComprobante_Id int
)
AS
SET NOCOUNT ON 

SELECT genTiposCompAfip.Comprobante_Id, genTiposCompAfip.Descripcion, genTiposCompAfip.Segmento1N, genTiposCompAfip.Segmento2N, 
genTiposCompAfip.Segmento3N, genTiposCompAfip.Segmento4N, genTiposCompAfip.Segmento1C, genTiposCompAfip.Segmento2C, 
genTiposCompAfip.Segmento3C, genTiposCompAfip.Segmento4C
FROM genTiposCompAfip 
WHERE (Comprobante_Id = @pComprobante_Id)
 
 RETURN @@Error 

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genUltPaginasVisitadasUsuarios.sql*/
DROP PROCEDURE genUltPaginasVisitadasUsuariosGuardar
GO
CREATE PROCEDURE genUltPaginasVisitadasUsuariosGuardar
(
@pUsuario_Id int,
@pFormulario_id varchar(30)
)
AS
SET NOCOUNT ON 

IF (NOT EXISTS (SELECT 1 FROM genUltPaginasVisitadasUsuarios WHERE (Usuario_Id = @pUsuario_Id) AND (OrdenFormularioMenu = dbo.FuncFKgenMenusFormulario(@pFormulario_id))))
BEGIN 
	---Esta tabla no puede tener mas de 12 registros
	DELETE FROM genUltPaginasVisitadasUsuarios 
	WHERE OrdenFormularioMenu NOT IN (SELECT TOP 11 OrdenFormularioMenu FROM genUltPaginasVisitadasUsuarios ORDER BY FechaRegistro DESC)

	
	INSERT INTO genUltPaginasVisitadasUsuarios
	(
		Usuario_Id,
		OrdenFormularioMenu,
		FechaRegistro
	)
	VALUES 
	(
		@pUsuario_Id,
		dbo.FuncFKgenMenusFormulario(@pFormulario_id),
		GETDATE()
	)
END 
--Debemos actualizar la fecha de registro
ELSE 
BEGIN

UPDATE genUltPaginasVisitadasUsuarios 
SET FechaRegistro = GETDATE()
WHERE (Usuario_Id = @pUsuario_Id) AND (OrdenFormularioMenu = dbo.FuncFKgenMenusFormulario(@pFormulario_id))

END

GO

DROP PROCEDURE genUltPaginasVisitadasUsuariosDatos
GO
CREATE PROCEDURE genUltPaginasVisitadasUsuariosDatos
(
@pUsuario_Id int
)
AS
SET NOCOUNT ON 

Select '' as Formulario_Id

SELECT 	disFormularios.Formulario_Id, disFormularios.Titulo, mn2.Opcion as Modulo, mn1.Orden
FROM genUltPaginasVisitadasUsuarios 
INNER JOIN genMenus mn1 ON (mn1.Orden = genUltPaginasVisitadasUsuarios.OrdenFormularioMenu)
INNER JOIN disFormularios  ON (mn1.Formulario_Id = disFormularios.disFormularios)
--INNER JOIN genMenus mn2 on mn2.Orden = SUBSTRING(mn1.Orden, 1, 1) + '000' 
INNER JOIN genMenus mn2 on SUBSTRING(mn2.Orden, 1, 1) = SUBSTRING(mn1.Orden, 1, 1) AND mn2.Nivel = 1
WHERE (genUltPaginasVisitadasUsuarios.Usuario_Id = @pUsuario_Id)
ORDEr BY genUltPaginasVisitadasUsuarios.FechaRegistro DESC 
 RETURN @@Error 

GO

DROP PROCEDURE genUltPaginasVisitadasUsuariosEliminar
GO
CREATE PROCEDURE genUltPaginasVisitadasUsuariosEliminar
(
@pUsuario_Id int,
@pFormulario_id varchar(30)
)
AS
SET NOCOUNT ON 

DELETE FROM genUltPaginasVisitadasUsuarios 
WHERE (Usuario_Id = @pUsuario_Id)
AND (OrdenFormularioMenu = dbo.FuncFKgenMenusFormulario(@pFormulario_id))
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genUsuarioPermisosEsp.sql*/
DROP PROCEDURE genUsuarioPermisosEspGuardar
GO
CREATE PROCEDURE genUsuarioPermisosEspGuardar
(
@pUsuario_Id VarChar(25),
@pPermiso_Id int
)
AS
SET NOCOUNT ON 
	INSERT INTO genUsuarioPermisosEsp
	(
		Usuario_Id,
		Permiso_Id
	)
	VALUES 
	(
		dbo.FuncFKgenUsuarios(@pUsuario_Id),
		@pPermiso_Id
	)
GO
-- genUsuarioPermisosEspDatos 'ADMINSUMMA' ,1
DROP PROCEDURE genUsuarioPermisosEspDatos
GO
CREATE PROCEDURE genUsuarioPermisosEspDatos
(
@pUsuario_Id VarChar(25),
@pPermiso_Id int = NULL
)
AS
SET NOCOUNT ON 

SELECT genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, 
	@pPermiso_Id  as Permiso_Id
FROM genUsuarios
Where
	genUsuarios.Usuario_Id = @pUsuario_Id 

select genPermisosEsp.Permiso_Id, genPermisosEsp.Descripcion as DescripcionPermiosEsp, 
	Cast(Case when genUsuarioPermisosEsp.Usuario_Id  IS null then 0 else 1 end as bit) as Marcado
FROM genUsuarios Cross join genPermisosEsp
INNER join genUsuarioPermisosEsp ON 
	genUsuarios.genUsuarios = genUsuarioPermisosEsp.Usuario_Id AND 
	genPermisosEsp.Permiso_Id = genUsuarioPermisosEsp.Permiso_Id
WHERE 
genUsuarios.Usuario_Id = @pUsuario_Id AND 
genPermisosEsp.Permiso_Id = isnull(@pPermiso_Id, genPermisosEsp.Permiso_Id)
order by 1
 
RETURN @@Error 

GO

DROP PROCEDURE genUsuarioPermisosEspEliminar
GO
CREATE PROCEDURE genUsuarioPermisosEspEliminar
(
@pUsuario_Id varchar(25),
@pPermiso_Id int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM genUsuarioPermisosEsp 
WHERE (Usuario_Id = dbo.FuncFKgenUsuarios(@pUsuario_Id))
AND (Permiso_Id = ISNULL( @pPermiso_Id,Permiso_Id))
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genUsuarios.sql*/


DROP PROCEDURE genUsuariosGuardar
GO
CREATE PROCEDURE genUsuariosGuardar
(
@pUsuario_Id varchar(25),
@pUsuario_Id_Nuevo varchar(25),
@pEmpresa_Id int = NULL,
@pApellido_y_Nombres varchar(36),
@pTipoUsuario char(1),
@pSucursal char(4) = NULL,
@pClave_de_Acceso int,
@pCargo varchar(50),
@pUltCambioPass datetime,
@pIntentos smallint,
@pEmail varchar(150) = NULL,
@pUsuarioCarga int,
@pPtoEmision char(3) = NULL,
@pCambiarClave bit,
@pMalClave smallint,
@pEsSupervisor bit,
@pCultura varchar(5) = Null,
@pInactivo bit,
@pPosteado bit, 
@pMultiplesLogins Bit,
@pCliente_Id VarChar(15)= NULL,
@pProveed_Id VarChar(15)= NULL,
@pVendedor_Id VarChar(5)= NULL,
@pCobrador_Id VarChar(5)= NULL,
@pLegajo int= NULL,
@pRestringeHorarios SiNo,
@pFirma varchar(max),
@pImagenFirma varchar(max)
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM genUsuarios WHERE (Usuario_Id = @pUsuario_Id)))
BEGIN 
	UPDATE genUsuarios
	SET		@lIdentidad = genUsuarios,
		Usuario_Id = @pUsuario_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Apellido_y_Nombres = @pApellido_y_Nombres,
		TipoUsuario = @pTipoUsuario,
		Sucursal = dbo.FuncFKgenSucursalesEmpr(@pSucursal),
		Clave_de_Acceso = @pClave_de_Acceso,
		Cargo = @pCargo,
		UltCambioPass = @pUltCambioPass,
		Intentos = @pIntentos,
		Email = @pEmail,
		UsuarioCarga = @pUsuarioCarga,
		PtoEmision = @pPtoEmision,
		CambiarClave = @pCambiarClave,
		MalClave = @pMalClave,
		EsSupervisor = @pEsSupervisor,
		Cultura = @pCultura,
		Inactivo = @pInactivo,
		Posteado = @pPosteado, 
		MultiplesLogins = @pMultiplesLogins,
		Cliente_Id = dbo.FuncFKvenClientes(@pCliente_Id),
		Proveed_Id = dbo.FuncFKcomProveedores(@pProveed_Id),
		Vendedor_Id = dbo.FuncFKvenVendedores(@pVendedor_Id),
		Cobrador_Id = dbo.FuncFKvenCobradores(@pCobrador_Id),
		Legajo = dbo.FuncFKsuePersonal(@pLegajo),
		RestringeHorarios=@pRestringeHorarios,
		Firma=@pFirma,
		ImagenFirmaB64=@pImagenFirma
	WHERE (Usuario_Id = @pUsuario_Id)
END 
ELSE 
BEGIN 
	INSERT INTO genUsuarios
	(
		Usuario_Id,
		Empresa_Id,
		Apellido_y_Nombres,
		TipoUsuario,
		Sucursal,
		Clave_de_Acceso,
		Cargo,
		UltCambioPass,
		Intentos,
		Email,
		UsuarioCarga,
		PtoEmision,
		CambiarClave,
		MalClave,
		EsSupervisor,
		Cultura,
		Inactivo,
		Posteado, 
		MultiplesLogins,
		Cliente_Id ,
		Proveed_Id,
		Vendedor_Id,
		Cobrador_Id,
		Legajo ,
		RestringeHorarios,
		Firma,
		ImagenFirmaB64
	)
	VALUES 
	(
		@pUsuario_Id_Nuevo,
		@pEmpresa_Id,
		@pApellido_y_Nombres,
		@pTipoUsuario,
		dbo.FuncFKgenSucursalesEmpr(@pSucursal),
		@pClave_de_Acceso,
		@pCargo,
		@pUltCambioPass,
		@pIntentos,
		@pEmail,
		@pUsuarioCarga,
		@pPtoEmision,
		@pCambiarClave,
		@pMalClave,
		@pEsSupervisor,
		@pCultura,
		@pInactivo,
		@pPosteado, 
		@pMultiplesLogins,
		dbo.FuncFKvenClientes(@pCliente_Id),
		dbo.FuncFKcomProveedores(@pProveed_Id),
		dbo.FuncFKvenVendedores(@pVendedor_Id),
		dbo.FuncFKvenCobradores(@pCobrador_Id),
		dbo.FuncFKsuePersonal(@pLegajo),
		@pRestringeHorarios,
		@pFirma,
		@pImagenFirma
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO
-- genUsuariosDatos 'ALMACEN2'
DROP PROCEDURE genUsuariosDatos
GO
CREATE PROCEDURE genUsuariosDatos
(
@pUsuario_Id varchar(25)
)
AS
SET NOCOUNT ON 

SELECT genUsuarios.genUsuarios, genUsuarios.Usuario_Id, genUsuarios.Empresa_Id, 
	Cast( Case When genUsuarios.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	genUsuarios.Apellido_y_Nombres, genUsuarios.TipoUsuario, genSucursalesEmpr.Sucursal, genSucursalesEmpr.Descripcion as DescripcionSucursalesEmpr,
	genUsuarios.Clave_de_Acceso, genUsuarios.Cargo, genUsuarios.UltCambioPass, genUsuarios.Intentos,
	genUsuarios.Email, genUsuarios.UsuarioCarga, genUsuarios.PtoEmision, genUsuarios.CambiarClave,
	genUsuarios.MalClave, genUsuarios.EsSupervisor, genUsuarios.Cultura, genCulturas.Descripcion As DescripcionCultura,
	genUsuarios.Inactivo, genUsuarios.Posteado, 
	'' as Clave1, '' as Clave2 , genUsuarios.MultiplesLogins, 
	venClientes.Cliente_Id, venClientes.RazonSocial as DescripcionCliente,
	comProveedores.Proveed_Id, comProveedores.RazonSocial as DescripcionProveedor,
	venVendedores.Vendedor_Id, venVendedores.Nombre as DescripcionVendedor, 
	venCobradores.Cobrador_Id, venCobradores.Nombre as DescripcionCobrador,
	suePersonal.Legajo, suePersonal.ApellidoPaterno+','+suePersonal.ApellidoMaterno+','+suePersonal.Nombres as DescripcionLegajo,
	RestringeHorarios, Firma, ImagenFirmaB64
FROM genUsuarios 
LEFT JOIN genSucursalesEmpr  ON (genSucursalesEmpr.genSucursalesEmpr = genUsuarios.Sucursal)
Left Join genCulturas On genCulturas.Cultura = genUsuarios.Cultura
LEFT JOIN venClientes ON venClientes.genEntidades = genUsuarios.Cliente_Id
LEFT JOIN comProveedores ON comProveedores.genEntidades = genUsuarios.Proveed_Id
LEFT JOIN venVendedores ON venVendedores.venVendedores = genUsuarios.Vendedor_Id
LEFT JOIN venCobradores ON venCobradores.venCobradores = genUsuarios.Cobrador_Id
LEFT JOIN suePersonal ON suePersonal.genEntidades = genUsuarios.Legajo
WHERE (genUsuarios.Usuario_Id = @pUsuario_Id)
 


 Declare @pidentity bigint= dbo.FuncFKgenUsuarios(@pUsuario_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'genUsuarios'
 
 SELECT comProveedores.Proveed_Id, comProveedores.RazonSocial
 from comProveedores inner join genEntidades ON 
 comProveedores.genEntidades = genEntidades.genEntidades
 WHERE
 genEntidades.genEntidades = @pidentity
 
 
 SELECT venClientes.Cliente_Id, venClientes.RazonSocial
 from venClientes inner join genEntidades ON 
 venClientes.genEntidades = genEntidades.genEntidades
 WHERE
 genEntidades.genEntidades = @pidentity
 
 
 SELECT suePersonal.Legajo, suePersonal.ApellidoPaterno Apellido_y_Nombre 
 from suePersonal inner join genEntidades ON 
 suePersonal.genEntidades = genEntidades.genEntidades
 WHERE
 genEntidades.genEntidades = @pidentity
 
 
 SELECT venVendedores.Vendedor_Id, venVendedores.Nombre
 from venVendedores inner join genEntidades ON 
 venVendedores.venVendedores = genEntidades.genEntidades
 WHERE
 genEntidades.genEntidades = @pidentity
 
 
 SELECT venCobradores.Cobrador_Id, venCobradores.Nombre
 from venCobradores inner join genEntidades ON 
 venCobradores.venCobradores = genEntidades.genEntidades
 WHERE
 genEntidades.genEntidades = @pidentity
 
EXEC genHorariosIngreso @pidentity, null
exec genAdjuntosIdentityDatos 'genUsuarios', @pidentity
exec genUsuariosSucursalDatos null,null, @pUsuario_Id
 RETURN @@Error 

GO

DROP PROCEDURE genUsuariosEliminar
GO
CREATE PROCEDURE genUsuariosEliminar
(
@pUsuario_Id varchar(25) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM genUsuarios 
WHERE (Usuario_Id = @pUsuario_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKgenUsuarios
GO

CREATE FUNCTION FuncFKgenUsuarios
(
@pUsuario_Id varchar (25)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = genUsuarios FROM genUsuarios WHERE 
	Usuario_Id = @pUsuario_Id
  RETURN @pIdentity
END


GO


DROP PROCEDURE genUsuariosCambiarClaveDatos
GO
CREATE PROCEDURE genUsuariosCambiarClaveDatos
AS
SELECT ' ' ClaveVieja, ' ' ClaveNueva1 , ' ' ClaveNueva2 
GO


DROP PROCEDURE genUsuariosCambiarClaveGuardar
GO
CREATE PROCEDURE genUsuariosCambiarClaveGuardar
( 
	@Usuario_Id int,
	@Clave int
)
AS


Update genUsuarios 
SET Clave_de_Acceso = @Clave,
	CambiarClave = 0, Intentos=0, MalClave = 0, 
		UltCambioPass = dbo.FechaActual()
Where genUsuarios = @Usuario_Id
GO


DROP PROCEDURE genUsuariosDatosInt
GO
CREATE PROCEDURE genUsuariosDatosInt
(
@pUsuario_Id int
)
AS

Declare @pCodigo VarChar(25) = (SELECT Usuario_id From genUsuarios Where genUsuarios=@pUsuario_Id)
EXEC genUsuariosDatos @pCodigo

GO




DROP PROCEDURE genUsuariosIntentosGuardar
GO
CREATE PROCEDURE genUsuariosIntentosGuardar
( 
	@Usuario_Id int, 
	@Intentos Int
)
AS

Update genUsuarios SET Intentos = @Intentos Where genUsuarios = @Usuario_Id
GO

DROP PROCEDURE genUsuariosMalClaveGuardar
GO
CREATE PROCEDURE genUsuariosMalClaveGuardar
( 
	@Usuario_Id int, 
	@MalClave Int
)
AS

Update genUsuarios SET MalClave = @MalClave Where genUsuarios = @Usuario_Id
GO






Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genUsuariosLogueados.sql*/
DROP PROCEDURE genUsuariosLogueadosGuardar
GO
CREATE PROCEDURE genUsuariosLogueadosGuardar
(
@pUsuario_Id int,
@pUltEmpresa int,
@pFechaLogin datetime,
@pToken varchar(36)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM genUsuariosLogueados WHERE (Token = @pToken)))
BEGIN 
	UPDATE genUsuariosLogueados
	SET		Usuario_Id = @pUsuario_Id,
		UltEmpresa = @pUltEmpresa,
		FechaLogin = @pFechaLogin,
		Caduca = Dateadd(mi, 5, getdate())
	WHERE (Token = @pToken)
END 
ELSE 
BEGIN 
	INSERT INTO genUsuariosLogueados
	(
		Usuario_Id,
		UltEmpresa,
		FechaLogin,
		Caduca,
		Token
	)
	VALUES 
	(
		@pUsuario_Id,
		@pUltEmpresa,
		@pFechaLogin,
		Dateadd(mi, 5, getdate()),
		@pToken
	)
END 

GO

DROP PROCEDURE genUsuariosLogueadosDatos
GO
CREATE PROCEDURE genUsuariosLogueadosDatos
(
@pUsuario_Id int
)
AS
SET NOCOUNT ON 

SELECT genUsuariosLogueados.Usuario_Id, genUsuariosLogueados.UltEmpresa, genUsuariosLogueados.FechaLogin, genUsuariosLogueados.Caduca,
	genUsuariosLogueados.Token, genUsuarios.MultiplesLogins
FROM genUsuariosLogueados inner join genUsuarios ON
genUsuarios.genUsuarios = genUsuariosLogueados.Usuario_Id
WHERE (genUsuariosLogueados.Usuario_Id = @pUsuario_Id and Caduca >= getdate())
 
RETURN @@Error 

GO

DROP PROCEDURE genUsuariosLogueadosEliminar
GO
CREATE PROCEDURE genUsuariosLogueadosEliminar
(
@pToken varchar(36) 
)
AS
SET NOCOUNT ON 

DELETE FROM genUsuariosLogueados 
WHERE (Token = @pToken)
 
 RETURN @@Error 

GO

DROP PROCEDURE genUsuariosLogueadosCuantosDatos
GO
CREATE PROCEDURE genUsuariosLogueadosCuantosDatos
as

SELECT count(*) Cantidad
FROM genUsuariosLogueados 
WHERE 
	Caduca >= getdate()
 
RETURN @@Error 

GO

DROP PROCEDURE genUsuariosLogueadosCaduca
GO
CREATE PROCEDURE genUsuariosLogueadosCaduca
(
@pToken varchar(36)
)
AS
SET NOCOUNT ON 
UPDATE genUsuariosLogueados
	SET	Caduca = Dateadd(mi, 5, getdate())
	WHERE (Token = @pToken)

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genUsuariosRecuperar.sql*/
drop procedure genUsuariosRecuperar
go
create procedure genUsuariosRecuperar
(
    @pUsuario_Id varchar(25),
    @pEmpresa_Id varchar(15)
)
as
select genUsuarios.genUsuarios, genUsuarios.Usuario_Id, genEmpresas.Empresa_Id, genUsuarios.Email, genEmpresas.Correo as EmailEmpresa, genEmpresas.Servidor, genEmpresas.Seguridad, 
genEmpresas.Puerto, genEmpresas.Clave, '' as ClaveNueva,
genusuarios.Email as EmailUsuario from genusuarios
cross join genEmpresas
where genEmpresas.Empresa_Id=@pEmpresa_Id and genUsuarios.Usuario_Id=@pUsuario_Id
go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genUsuariosSucursal.sql*/
drop procedure genUsuariosSucursalDatos
go
create procedure genUsuariosSucursalDatos
(
    @pSucursal_Id Sucursal=null,
    @pEmpresa_Id varchar(15)=null,
    @pUsuario_Id varchar(25)=null
)
AS
select genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, genEmpresas.Empresa_Id, genEmpresas.RazonSocial as DescripcionEmpresa, genSucursalesEmpr.Sucursal, genSucursalesEmpr.Descripcion as DescripcionSucursal from genUsuariosSucursal
inner join genUsuarios on genUsuarios.genUsuarios=genUsuariosSucursal.Usuario_Id
inner join genEmpresas on genEmpresas.genEmpresas=genUsuariosSucursal.Empresa_Id
inner join genSucursalesEmpr on genSucursalesEmpr.genSucursalesEmpr=genUsuariosSucursal.Sucursal_Id
where genUsuarios.Usuario_Id=isnull(@pUsuario_Id,genUsuarios.Usuario_Id) AND
genSucursalesEmpr.Sucursal=isnull(@pSucursal_Id, genSucursalesEmpr.Sucursal) and
genEmpresas.Empresa_Id=isnull(@pEmpresa_Id, genEmpresas.Empresa_Id)
go

drop procedure genUsuariosSucursalInsertar
go
create procedure genUsuariosSucursalInsertar
(
    @pSucursal_Id Sucursal,
    @pEmpresa_Id varchar(15),
    @pUsuario_Id varchar(25)
)
AS
insert into genUsuariosSucursal
(
    Empresa_Id,
    Sucursal_Id,
    Usuario_Id
)
values
(
    dbo.FuncFKgenEmpresas(@pEmpresa_Id),
    dbo.FuncFKgenSucursalesEmpr(@pSucursal_Id),
    dbo.FuncFKgenUsuarios(@pUsuario_Id)
)
GO

drop procedure genUsuariosSucursalEliminar
go
create procedure genUsuariosSucursalEliminar
(
    @pSucursal_Id Sucursal=null,
    @pEmpresa_Id varchar(15)=null,
    @pUsuario_Id varchar(25)
)
AS
DELETE genUsuariosSucursal where Sucursal_Id=ISNULL(dbo.FuncFKgenSucursalesEmpr(@pSucursal_Id), Sucursal_Id) and
 Empresa_Id=ISNULL(dbo.FuncFKgenEmpresas(@pEmpresa_Id),Empresa_Id) and
  Usuario_Id=dbo.FuncFKgenUsuarios(@pUsuario_Id)
  go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\genWSFactElec.sql*/
DROP PROCEDURE genWSFactElecDatos
GO
CREATE PROCEDURE genWSFactElecDatos
(
@pTipoFE varchar(5)
)
AS
SET NOCOUNT ON 

SELECT genWSFactElec.TipoFE, genWSFactElec.Descripcion
FROM genWSFactElec 
WHERE (TipoFE = @pTipoFE)
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\HoraActual.sql*/
drop function HoraActual
go
create function HoraActual(@Fecha DateTime )
returns varChar(5)
as
BEGIN
DECLARE @Hora int, @Min int, @REt varchar(5)
set @Hora =DATEPART(HOUR, @Fecha)
set @Min =DATEPART(MI, @Fecha)
if @Hora < 10
    set @Ret = '0'+str(@Hora,1)+':'
ELSE    
    set @Ret = str(@Hora,2)+':'

if @Min < 10
    set @Ret =@Ret+ '0'+str(@Min,1)
ELSE    
    set @Ret =@Ret+ str(@Min,2)

return @Ret

END


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\imImpuestos.sql*/
DROP PROCEDURE impImpuestosGuardar
GO
CREATE PROCEDURE impImpuestosGuardar
(
@pImpuesto_Id varchar(5),
@pDescripcion varchar(60),
@pPosteado Sino,
@pInactivo Sino,
@pTipoVencimiento varchar(3),
@pDiaMesVence smallint,
@pAvisarNDias smallint,
@pProximoVencimiento qFecha,
@pCtaHaber_Id varchar(25) = NULL,
@pCtaDebe_Id varchar(25) = NULL,
@pPagoAnticipado Sino,
@pSePaga Sino,
@pVaAlCashFlow Sino,
@pLiquidadoHasta qFecha
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM impImpuestos WHERE Impuesto_Id = @pImpuesto_Id))
BEGIN 
	UPDATE impImpuestos
	SET		@lIdentidad = impImpuestos,
		Impuesto_Id = @pImpuesto_Id,
		Descripcion = @pDescripcion,
		Posteado = @pPosteado,
		Inactivo = @pInactivo,
		TipoVencimiento = @pTipoVencimiento,
		DiaMesVence = @pDiaMesVence,
		AvisarNDias = @pAvisarNDias,
		ProximoVencimiento = @pProximoVencimiento,
		CtaHaber_Id = dbo.FuncFKconCuentas(@pCtaHaber_Id),
		CtaDebe_Id = dbo.FuncFKconCuentas(@pCtaDebe_Id),
		PagoAnticipado = @pPagoAnticipado,
		SePaga = @pSePaga,
		VaAlCashFlow = @pVaAlCashFlow,
		LiquidadoHasta = @pLiquidadoHasta
	WHERE 
	Impuesto_Id = @pImpuesto_Id
END 
ELSE 
BEGIN 
	INSERT INTO impImpuestos
	(
		Impuesto_Id,
		Descripcion,
		Posteado,
		Inactivo,
		TipoVencimiento,
		DiaMesVence,
		AvisarNDias,
		ProximoVencimiento,
		CtaHaber_Id,
		CtaDebe_Id,
		PagoAnticipado,
		SePaga,
		VaAlCashFlow,
		LiquidadoHasta
	)
	VALUES 
	(
		@pImpuesto_Id,
		@pDescripcion,
		@pPosteado,
		@pInactivo,
		@pTipoVencimiento,
		@pDiaMesVence,
		@pAvisarNDias,
		@pProximoVencimiento,
		dbo.FuncFKconCuentas(@pCtaHaber_Id),
		dbo.FuncFKconCuentas(@pCtaDebe_Id),
		@pPagoAnticipado,
		@pSePaga,
		@pVaAlCashFlow,
		@pLiquidadoHasta
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE impImpuestosDatos
GO
CREATE PROCEDURE impImpuestosDatos
(
@pImpuesto_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT impImpuestos.impImpuestos, impImpuestos.Impuesto_Id, impImpuestos.Impuesto_Id as Impuesto_Id_Nueva, impImpuestos.Descripcion, impImpuestos.Posteado,
	impImpuestos.Inactivo, impImpuestos.TipoVencimiento, impImpuestos.DiaMesVence, impImpuestos.AvisarNDias,
	impImpuestos.ProximoVencimiento, CuentaHaber.Cuenta_Id as CuentaHaber , CuentaHaber.Descripcion as DescripcionCuentaHaber, CuentaDebe.Cuenta_Id as CuentaDebe,
	CuentaDebe.Descripcion as DescripcionCuentaDebe, impImpuestos.PagoAnticipado, impImpuestos.SePaga, impImpuestos.VaAlCashFlow,
	impImpuestos.LiquidadoHasta
FROM impImpuestos 
LEFT JOIN conCuentas CuentaHaber ON (CuentaHaber.conCuentas = impImpuestos.CtaHaber_Id)
LEFT JOIN conCuentas CuentaDebe ON (CuentaDebe.conCuentas = impImpuestos.CtaDebe_Id)
WHERE 

Impuesto_Id = @pImpuesto_Id




SELECT impImpuestos.Impuesto_Id, impImpuestos.Descripcion as DescripcionImpuestos, impFormulas.Renglon, conCuentas.Cuenta_Id, 
conCuentas.Descripcion as DescripcionCuentas,
impFormulas.Detalle, impFormulas.DebeHaberAmbos
FROM impFormulas 
INNER JOIN impImpuestos  ON (impImpuestos.impImpuestos = impFormulas.impImpuestos)
INNER JOIN conCuentas  ON (conCuentas.conCuentas = impFormulas.Cuenta_Id)
WHERE (impImpuestos.Impuesto_Id = @pImpuesto_Id)

 
 

Declare @pidentity bigint= dbo.FuncFKimpImpuestos( @pImpuesto_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'impImpuestos'




 RETURN @@Error 

GO

DROP PROCEDURE impImpuestosEliminar
GO
CREATE PROCEDURE impImpuestosEliminar
(
@pImpuesto_Id varchar(5)
)
AS
SET NOCOUNT ON 

DELETE FROM impImpuestos 
WHERE  Impuesto_Id = @pImpuesto_Id
 RETURN @@Error 

GO

DROP FUNCTION FuncFKimpImpuestos
GO

CREATE FUNCTION FuncFKimpImpuestos
(
@pImpuesto_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = impImpuestos FROM impImpuestos WHERE 
	Impuesto_Id = @pImpuesto_Id
  RETURN @pIdentity
END


GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impArbaTxt.sql*/
Drop procedure impArbaTxtImportar
Go


CREATE PROCEDURE impArbaTxtImportar
(    
@pTxt VARCHAR(200),    
@pMes SMALLINT,    
@pAnio SMALLINT,
@pReg CHAR(1)
)    
AS    
SET NOCOUNT ON

IF EXISTS (SELECT * FROM tempdb.dbo.sysobjects WHERE name = '#tmpRentas0')    
	DROP TABLE #tmpRentas0

CREATE TABLE #tmpRentas0 
(    
Reg CHAR(1),    
Col1 CHAR(8),    
VigDesde CHAR(8),    
VigHasta CHAR(8),    
Cuit CHAR(11),    
Col2 CHAR(1),    
Col3 CHAR(1),    
Col4 CHAR(1),    
Alic CHAR(4),    
Grupo CHAR(2),  
Col5 VARCHAR(50)
)

DECLARE @SQL VARCHAR(200)    
--SET @SQL = 'BULK INSERT #tmpRentas0 FROM ''' + @pTxt + ''' WITH (FIELDTERMINATOR = '';'', ROWTERMINATOR = ''\n'') '    
--EMP CAMBIO EL ROWTERMINATOR PORQUE EL ARCHIVO VIENE COMO UNIX (LF)
SET @SQL = 'BULK INSERT #tmpRentas0 FROM ''' + @pTxt + ''' WITH (FIELDTERMINATOR = '';'', ROWTERMINATOR = '''+CHAR(10)+''')'
EXEC (@SQL)

--SELECT * FROM #tmpRentas0  
DELETE FROM impArbatxt WHERE Mes = @pMes AND Anio = @pAnio AND Regimen = @pReg   

INSERT INTO impArbatxt     
(Regimen, Anio, Mes, CUIT, FechaVigDesde, FechaVigHasta, Alicuota, Grupo)    
SELECT Reg, @pAnio, @pMes,     
substring(Cuit, 1, 2) + '-' + substring(Cuit, 3, 8) + '-' + substring(Cuit, 11, 1),     
substring(VigDesde, 5,4) + substring(VigDesde, 3,2) + substring(VigDesde, 1,2),    
substring(VigHasta, 5,4) + substring(VigHasta, 3,2) + substring(VigHasta, 1,2),    
cast(replace(Alic, ',', '.') AS NUMERIC(5,2)),    
cast(Grupo AS SMALLINT)  
FROM #tmpRentas0     
WHERE cast(substring(VigDesde, 3,2) AS SMALLINT) = @pMes and     
cast(substring(VigDesde, 5,4) AS SMALLINT) = @pAnio    
DROP TABLE #tmpRentas0

Select Cast(Count(1) As bigint) Cant From impArbaTxt WHERE Mes = @pMes AND Anio = @pAnio AND Regimen = @pReg
GO


Drop procedure impArbaTxtDatos
Go
Create procedure impArbaTxtDatos
(
@pMes SMALLINT,    
@pAnio SMALLINT
)
As

Declare @lMes smallint
Declare @lAnio smallint

If @pMes = 0
	Set @lMes = Convert(SmallInt, Month(getDate()))
Else
	Set @lMes = @pMes

If @pAnio = 0
	Set @lAnio = Convert(SmallInt, Year(getDate()))
Else
	Set @lAnio = @pAnio

Select '' ArchivoRet, '' ArchivoPer, @lMes Mes, @lAnio Anio,
(Select Count(1) From impArbaTxt WHERE Mes = @pMes AND Anio = @pAnio AND Regimen = 'R') CantRet,
(Select Count(1) From impArbaTxt WHERE Mes = @pMes AND Anio = @pAnio AND Regimen = 'P')  CantPer

Select (Select top 1 FechaVigDesde from  ImpArbaTxt ORDER BY FechaVigDesde DESC) VigDesde,
(Select top 1 FechaVigHasta from  ImpArbaTxt ORDER BY FechaVigHasta DESC) VigHasta
Go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impArbaTxtModif.sql*/
--EXEC impArbaTxtModifDatos 8, 2021, '20-00012532-7'

DROP PROCEDURE impArbaTxtModifDatos
GO
CREATE PROCEDURE impArbaTxtModifDatos
(
@Mes SMALLINT,    
@Anio SMALLINT,
@CUIT char(14)
)
AS
SELECT impARBATxt.Anio, impARBATxt.Mes, impARBATxt.CUIT,
	Alicuota AlicuotaPer, 
	(SELECT ISNULL(Alicuota,0) FROM impARBATxt Arba 
	WHERE impARBATxt.CUIT = Arba.CUIT AND  
	impARBATxt.Mes = Arba.Mes AND 
	impARBATxt.Anio = Arba.Anio AND 
	Regimen = 'R') AlicuotaRet 
	FROM impARBATxt 
	WHERE Anio = @Anio AND Mes = @Mes AND 
	CUIT = @CUIT AND Regimen = 'P'
GO


DROP PROCEDURE impArbaTxtModifGuardar
GO
CREATE PROCEDURE impArbaTxtModifGuardar
(
@Mes SMALLINT,    
@Anio SMALLINT,
@CUIT char(14),
@AliPer qPorcentaje,
@AliRet qPorcentaje
)
AS
SET NOCOUNT ON 
BEGIN 
	UPDATE impArbaTxt
	SET	Alicuota = @AliRet 
	WHERE Anio = @Anio AND Mes = @Mes AND
		Regimen = 'R' AND CUIT = @CUIT

	UPDATE impArbaTxt
	SET	Alicuota = @AliPer 
	WHERE Anio = @Anio AND Mes = @Mes AND
		Regimen = 'P' AND CUIT = @CUIT
END 
GO





Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impArciba.sql*/
Drop procedure impArciba
Go

Create procedure impArciba
(
@pEmpresa_Id int,
@pFechaDesde datetime,
@pFechaHasta datetime
)
As

Select @pEmpresa_Id Empresa_Id, @pFechaDesde FechaDesde, @pFechaHasta FechaHasta
--- "a" es el resultado de una subconsulta as? la puedo ordenar por fecha.
Select a.Renglon from (
SELECT conAsientos.fecha, '1029'+convert(char(10),tesMovimientos.Fecha_Real,103)+'03 0000'+ genAsiSegmentos.Segmento4C+
	 genAsiSegmentos.Segmento2C +RIGHT('00000000' + Ltrim(Rtrim(convert(varchar(8),genAsiSegmentos.Segmento1N))),8)+
     +convert(char(10),conAsientos.Fecha,103)+
	 RIGHT(replicate('0',16)+ltrim(rtrim(convert(varchar(16),cast(ISNULL(Servicio.Importe,0)+ISNULL(Mercaderia.importe,0) as decimal(15,2)),1))),16)+
     right(replicate('0',16)+Ltrim(Rtrim(convert(varchar(14),tesRengMoviRetProv.tesMovimientos))),16)+'3'+
     substring(genEntidades.Cuit,1,2)+SUBSTRING(genEntidades.Cuit,4,8)+substring(genEntidades.Cuit,13,1)+
     cast(genJurisCoeficientes.Situacion as varchar(1))+
     RIGHT(REPLICATE('0',11)+LTRIM(rtrim(cast(comProveedores.ibrutos as varchar(11)))),11)+'1'+
     cast(comProveedores.RAZONSOCIAL as char(30))+'0000000000000.00'+'0000000000000.00'+
     RIGHT(replicate('0',16)+ltrim(rtrim(convert(varchar(16),cast(ISNULL(Servicio.Importe,0)+ISNULL(Mercaderia.importe,0) as decimal(15,2)),1))),16) +
     RIGHT(REPLICATE('0',1)+ltrim(rtrim(convert(varchar(5),cast(tesRengMoviRetProv.Porcentaje as decimal(4,2)),1))),16) +
     RIGHT(replicate('0',16)+ltrim(rtrim(convert(varchar(16),cast(ROUND((((ISNULL(Servicio.Importe,0)+ISNULL(Mercaderia.importe,0))*tesRengMoviRetProv.Porcentaje)/100), 2) as decimal(15,2)),1))),16) +
     RIGHT(replicate('0',16)+ltrim(rtrim(convert(varchar(16),cast(ROUND((((ISNULL(Servicio.Importe,0)+ISNULL(Mercaderia.importe,0))*tesRengMoviRetProv.Porcentaje)/100), 2) as decimal(15,2)),1))),16) +
     '           ' Renglon 
     FROM tesRengMovi 
     INNER JOIN tesMovimientos on tesRengMovi.tesMovimientos = tesMovimientos.tesMovimientos
     INNER JOIN tesidretprov on tesRengMovi.Cartera_Id = tesIdRetProv.Cartera_Id
	 INNER JOIN tesidentifica on tesIdRetProv.Cartera_Id = tesIdentifica.tesIdentifica
	 INNER JOIN conMovcont on conMovcont.conAsientos = tesRengMovi.tesMovimientos and conMovcont.Renglon = tesRengMovi.conRenglon
	 INNER JOIN tesRengMoviRetProv on tesRengMoviRetProv.tesMovimientos = conMovcont.conAsientos and tesRengMoviRetProv.conRenglon = conMovcont.Renglon
	 INNER JOIN conAsientos on tesMovimientos.tesMovimientos = conAsientos.conAsientos
	 INNER JOIN genAsiSegmentos ON conAsientos.conAsientos = genAsiSegmentos.Asiento_Id 
	 INNER JOIN comMovprov on tesMovimientos.tesMovimientos = comMovprov.comMovprov
	 INNER JOIN comProveedores on comMovprov.Proveed_Id = comProveedores.genEntidades
	 INNER JOIN genEntidades on comProveedores.genEntidades = genEntidades.genEntidades
	 INNER JOIN comCondFiscal on comProveedores.CondFiscal_Id = comCondFiscal.comCondFiscal
	 INNER JOIN genJurisCoeficientes on genEntidades.genEntidades = genJurisCoeficientes.genEntidades 
	 INNER JOIN impJurisdicciones on genJurisCoeficientes.Juris_Id = impJurisdicciones.impjurisdicciones
	 left join tesMoviGravado Servicio on Servicio.tesMovimientos = tesMovimientos.tesMovimientos and Servicio.TipoCtaProv = 2 
	 left join tesMoviGravado Mercaderia on Mercaderia.tesMovimientos = tesMovimientos.tesMovimientos and Mercaderia.TipoCtaProv = 1
	 /*LEFT JOIN impRentasCapGralTxt on genEntidades.Cuit = impRentasCapGralTxt.CUIT and 
		impRentasCapGralTxt.Anio = year(conAsientos.Fecha) and 
		impRentasCapGralTxt.Mes = month(conAsientos.Fecha) */
	 where conAsientos.fecha between @pFechaDesde and @pFechaHasta
	 and genAsiSegmentos.Empresa_Id = @pEmpresa_Id
	 and comMovprov.TipoMov = 'P'
	 and tesIdRetProv.TipoImpuesto = 1901
	 and impJurisdicciones.juris_id = '901' and conAsientos.Anulado = 0
Union all
	 SELECT conAsientos.fecha,'2029'+convert(char(10),conAsientos.Fecha,103) +
	 RIGHT(replicate('0',2)+lTrim(rTrim(convert(varchar(2),cast(ISNULL(venMovimientosFiscal.Comprobante_Id,0) as int),1))),2)
	 +substring(genAsiSegmentos.Segmento3C,1,1)+
	 '0000'+
	 genAsiSegmentos.Segmento2C +RIGHT('00000000' + Ltrim(Rtrim(convert(varchar(8),genAsiSegmentos.Segmento1N))),8) +
     +convert(char(10),conAsientos.Fecha,103)+
	 RIGHT(replicate('0',16)+ltrim(rtrim(convert(varchar(16),
					cast((ISNULL(TotalFactura.Importe,0)-ISNULL(venMovImpuestos.Importe,0)) as decimal(15,2)),1))),16)+
     replicate(' ',16)+'3'+
     substring(genEntidades.Cuit,1,2)+SUBSTRING(genEntidades.Cuit,4,8)+substring(genEntidades.Cuit,13,1)+
     cast(genJurisCoeficientes.Situacion as varchar(1))+
     RIGHT(REPLICATE('0',11)+LTRIM(rtrim(cast(replace(venClientes.ibrutos,'-','') as varchar(11)))),11)+'1'+
     --RIGHT(REPLICATE('0',11)+LTRIM(rtrim(cast(venClientes.ibrutos as varchar(11)))),11)+'1'+ lo cambi? para que salga sin los -
     cast(venClientes.RAZONSOCIAL as char(30))+'0000000000000.00'+
     RIGHT(replicate('0',16)+ltrim(rtrim(convert(varchar(16),cast(ISNULL(Iva1.ImporteIva,0) as decimal(15,2)),1))),16)+
     RIGHT(replicate('0',16)+ltrim(rtrim(convert(varchar(16),cast(ISNULL(venMovImpuestos.BaseImponibleMonedaNac,0) as decimal(15,2)),1))),16)+
     RIGHT(REPLICATE('0',1)+ltrim(rtrim(convert(varchar(5),cast(Venmovimpuestos.Porcentaje as decimal(4,2)),1))),16) +
     RIGHT(replicate('0',16)+ltrim(rtrim(convert(varchar(16),cast(ISNULL(venMovImpuestos.Importe,0) as decimal(15,2)),1))),16)+
     RIGHT(replicate('0',16)+ltrim(rtrim(convert(varchar(16),cast(ISNULL(venMovImpuestos.Importe,0) as decimal(15,2)),1))),16)+
     '           ' Renglon
     FROM venMovimientos
     INNER JOIN venMovImpuestos on venMovimientos.venMovimientos = venMovImpuestos.venMovimientos
     inner join venImpuestos on venMovImpuestos.Impuesto_Id = venImpuestos.venImpuestos
	 INNER JOIN conMovcont on conMovcont.conAsientos = venMovimientos.venMovimientos 
				and conMovcont.Renglon = venMovImpuestos.conRenglon
	 INNER JOIN conMovCont TotalFactura ON 
				TotalFactura.conAsientos = venMovimientos.venMovimientos 
 				and TotalFactura.Clase='CLI'
	 INNER JOIN conAsientos on venMovimientos.venMovimientos = conAsientos.conAsientos
	 INNER JOIN genAsiSegmentos ON conAsientos.conAsientos = genAsiSegmentos.Asiento_Id 
	 INNER JOIN venClientes on venMovimientos.Cliente_Id = venClientes.genEntidades
	 INNER JOIN genEntidades on venClientes.genEntidades = genEntidades.genEntidades
	 INNER JOIN venCondFiscal on venClientes.CondFisc_Id= venCondFiscal.venCondFiscal
	 INNER JOIN genJurisCoeficientes on genEntidades.genEntidades = genJurisCoeficientes.genEntidades 
	 INNER JOIN impJurisdicciones on genJurisCoeficientes.Juris_Id = impJurisdicciones.impjurisdicciones
	 /*INNER JOIN impRentasCapGralTxt on genEntidades.Cuit = impRentasCapGralTxt.CUIT and 
		impRentasCapGralTxt.Anio = year(conAsientos.Fecha) and 
		impRentasCapGralTxt.Mes = month(conAsientos.Fecha) */
	 INNER JOIN (select venMovimpuestos.venMovimientos, isnull(sum(venMovimpuestos.importe),0) ImporteIva
		 From venMovImpuestos
		 inner join venImpuestos on venMovImpuestos.Impuesto_Id = venImpuestos.venImpuestos
		 Inner Join impTipoImpuesto On impTipoImpuesto.TipoImpuesto = venImpuestos.TipoImpuesto
		 where  impTipoImpuesto.Referencia01 = 'IVA' group by venMovimpuestos.venMovimientos ) Iva1 on venMovimientos.venMovimientos = Iva1.venMovimientos
     INNER JOIN venMovimientosFiscal ON 
		 venMovimientos.venMovimientos = venMovimientosFiscal.venMovimientos		 
	 where conAsientos.fecha between @pFechaDesde and @pFechaHasta
	 and genAsiSegmentos.Empresa_Id = @pEmpresa_Id
	 and genAsiSegmentos.Segmento1C in ('F','D')
	 and venImpuestos.TipoImpuesto = 1901 and venMovImpuestos.Importe > 0
	 --and impJurisdicciones.juris_id = '901' 
	 and conAsientos.Anulado = 0
Union all
SELECT conAsientos.fecha,'2029'+convert(char(10),conAsientos.Fecha,103) +
	 '10'+
	 +substring(genAsiSegmentos.Segmento3C,1,1)+
	 '0000'+
	 genAsiSegmentos.Segmento2C +RIGHT('00000000' + Ltrim(Rtrim(convert(varchar(8),genAsiSegmentos.Segmento1N))),8) +
     +convert(char(10),conAsientos.Fecha,103)+
	 RIGHT(replicate('0',16)+ltrim(rtrim(convert(varchar(16),
					cast((ISNULL(TotalFactura.Importe,0)-ISNULL(venMovImpuestos.Importe,0)) as decimal(15,2)),1))),16)+
     replicate(' ',16)+'3'+
     substring(genEntidades.Cuit,1,2)+SUBSTRING(genEntidades.Cuit,4,8)+substring(genEntidades.Cuit,13,1)+
     cast(genJurisCoeficientes.Situacion as varchar(1))+
     RIGHT(REPLICATE('0',11)+LTRIM(rtrim(cast(replace(venClientes.ibrutos,'-','') as varchar(11)))),11)+'1'+
     --RIGHT(REPLICATE('0',11)+LTRIM(rtrim(cast(venClientes.ibrutos as varchar(11)))),11)+'1'+ lo cambi? para que salga sin los -
     cast(venClientes.RAZONSOCIAL as char(30))+'0000000000000.00'+
     RIGHT(replicate('0',16)+ltrim(rtrim(convert(varchar(16),cast(ISNULL(Iva1.ImporteIva,0) as decimal(15,2)),1))),16)+
     RIGHT(replicate('0',16)+ltrim(rtrim(convert(varchar(16),cast(ISNULL(venMovImpuestos.BaseImponibleMonedaNac,0) as decimal(15,2)),1))),16)+
     RIGHT(REPLICATE('0',1)+ltrim(rtrim(convert(varchar(5),cast(Venmovimpuestos.Porcentaje as decimal(4,2)),1))),16) +
     RIGHT(replicate('0',16)+ltrim(rtrim(convert(varchar(16),cast(ISNULL(venMovImpuestos.Importe,0) as decimal(15,2)),1))),16)+
     RIGHT(replicate('0',16)+ltrim(rtrim(convert(varchar(16),cast(ISNULL(venMovImpuestos.Importe,0) as decimal(15,2)),1))),16)+
     '           ' Renglon
     FROM venMovimientos
     INNER JOIN venMovImpuestos on venMovimientos.venMovimientos = venMovImpuestos.venMovimientos
     inner join venImpuestos on venMovImpuestos.Impuesto_Id = venImpuestos.venImpuestos
	 INNER JOIN conMovcont on conMovcont.conAsientos = venMovimientos.venMovimientos 
				and conMovcont.Renglon = venMovImpuestos.conRenglon
	 INNER JOIN conMovCont TotalFactura ON 
				TotalFactura.conAsientos = venMovimientos.venMovimientos 
 				and TotalFactura.Clase='CLI'
	 INNER JOIN conAsientos on venMovimientos.venMovimientos = conAsientos.conAsientos
	 INNER JOIN genAsiSegmentos ON conAsientos.conAsientos = genAsiSegmentos.Asiento_Id 
	 INNER JOIN venClientes on venMovimientos.Cliente_Id = venClientes.genEntidades
	 INNER JOIN genEntidades on venClientes.genEntidades = genEntidades.genEntidades
	 INNER JOIN venCondFiscal on venClientes.CondFisc_Id= venCondFiscal.venCondFiscal
	 INNER JOIN genJurisCoeficientes on genEntidades.genEntidades = genJurisCoeficientes.genEntidades 
	 INNER JOIN impJurisdicciones on genJurisCoeficientes.Juris_Id = impJurisdicciones.impjurisdicciones
	 /*INNER JOIN impRentasCapGralTxt on genEntidades.Cuit = impRentasCapGralTxt.CUIT and 
		impRentasCapGralTxt.Anio = year(conAsientos.Fecha) and 
		impRentasCapGralTxt.Mes = month(conAsientos.Fecha) */
	 INNER JOIN (select venMovimpuestos.venMovimientos, isnull(sum(venMovimpuestos.importe),0) ImporteIva
		 From venMovImpuestos
		 inner join venImpuestos on venMovImpuestos.Impuesto_Id = venImpuestos.venImpuestos
		 Inner Join impTipoImpuesto On impTipoImpuesto.TipoImpuesto = venImpuestos.TipoImpuesto
		 where  impTipoImpuesto.Referencia01 = 'IVA' group by venMovimpuestos.venMovimientos ) Iva1 on venMovimientos.venMovimientos = Iva1.venMovimientos
     INNER JOIN venMovimientosFiscal ON 
		 venMovimientos.venMovimientos = venMovimientosFiscal.venMovimientos		 
	 where conAsientos.fecha between @pFechaDesde and @pFechaHasta
	 and genAsiSegmentos.Empresa_Id = @pEmpresa_Id
	 and genAsiSegmentos.Segmento1C in ('I')
	 and venImpuestos.TipoImpuesto = 1901 and venMovImpuestos.Importe > 0
	 --and impJurisdicciones.juris_id = '901' 
	 and conAsientos.Anulado = 0 ) a order by a.Fecha
	 
--- "a" es el resultado de una subconsulta as? la puedo ordenar por fecha.
SELECT a.Renglon2 FROM (SELECT conAsientos.Fecha, '2'+RIGHT(replicate('0',2)+lTrim(rTrim(convert(varchar(2),cast(ISNULL(venMovimientosFiscal.Comprobante_Id,0) as int),1))),2)
	--+substring(genAsiSegmentos.Segmento3C,1,1)+
	+genAsiSegmentos.Segmento2C +RIGHT('0000' + Ltrim(Rtrim(convert(varchar(8),genAsiSegmentos.Segmento1N))),8) +
    +CONVERT(char(10),conAsientos.Fecha,103)+
	RIGHT(REPLICATE('0',16)+ltrim(rtrim(convert(varchar(16),cast(ISNULL(venMovImpuestos.BaseImponibleMonedaNac,0) as decimal(15,2)),1))),16)+
	REPLICATE(' ',16)+
	CASE WHEN VenMov.venTipomov = 'F' THEN '01' WHEN VenMov.venTipomov IS NULL THEN '01' ELSE '09' END+ 
	CASE WHEN VenMov.venTipomov = 'F' THEN substring(genAsiSegmentos.Segmento3C,1,1) 
		WHEN VenMov.venTipomov IS NULL THEN ' ' ELSE substring(genAsiSegmentos.Segmento3C,1,1) END +  
	CASE WHEN VenMov.venTipomov IS NOT NULL THEN VenMov.venTipomov+substring(genAsiSegmentos.Segmento3C,1,1)+'00'+
		genAsiSegmentos.Segmento2C +RIGHT('000000' + Ltrim(Rtrim(convert(varchar(8),genAsiSegmentos.Segmento1N))),8) 
		ELSE '0000000000000000' END +
	SUBSTRING(genEntidades.Cuit,1,2)+SUBSTRING(genEntidades.Cuit,4,8)+SUBSTRING(genEntidades.Cuit,13,1)+					
	'029'+
	CASE WHEN VenMov.venTipomov IS NOT NULL THEN convert(char(10),conAsi.Fecha,103) ELSE convert(char(10),conAsientos.Fecha,103) END +
    RIGHT(REPLICATE('0',16)+ltrim(rtrim(convert(varchar(16),cast(ISNULL(venMovImpuestos.Importe,0) as decimal(15,2)),1))),16)+
	RIGHT(REPLICATE('0',1)+ltrim(rtrim(convert(varchar(5),cast(Venmovimpuestos.Porcentaje as decimal(4,2)),1))),16) +
	'           ' Renglon2
FROM venMovimientos
    INNER JOIN venMovImpuestos ON venMovimientos.venMovimientos = venMovImpuestos.venMovimientos
    INNER JOIN venImpuestos ON venMovImpuestos.Impuesto_Id = venImpuestos.venImpuestos
	INNER JOIN conMovcont ON conMovcont.conAsientos = venMovimientos.venMovimientos AND conMovcont.Renglon = venMovImpuestos.conRenglon
	INNER JOIN conMovCont TotalFactura ON TotalFactura.conAsientos = venMovimientos.venMovimientos AND TotalFactura.Clase = 'CLI'
	INNER JOIN conAsientos ON venMovimientos.venMovimientos = conAsientos.conAsientos
	INNER JOIN genAsiSegmentos ON conAsientos.conAsientos = genAsiSegmentos.Asiento_Id 
	INNER JOIN venClientes ON venMovimientos.Cliente_Id = venClientes.genEntidades
	INNER JOIN genEntidades ON venClientes.genEntidades = genEntidades.genEntidades
	INNER JOIN venCondFiscal ON venClientes.CondFisc_Id= venCondFiscal.venCondFiscal
	INNER JOIN genJurisCoeficientes ON genEntidades.genEntidades = genJurisCoeficientes.genEntidades 
	INNER JOIN impJurisdicciones ON genJurisCoeficientes.Juris_Id = impJurisdicciones.impjurisdicciones
	/*INNER JOIN impRentasCapGralTxt ON genEntidades.Cuit = impRentasCapGralTxt.CUIT and 
		impRentasCapGralTxt.Anio = year(conAsientos.Fecha) and 
		impRentasCapGralTxt.Mes = month(conAsientos.Fecha) */
	INNER JOIN (SELECT venMovimpuestos.venMovimientos, ISNULL(SUM(venMovimpuestos.importe),0) ImporteIva
		FROM venMovImpuestos
		INNER JOIN venImpuestos ON venMovImpuestos.Impuesto_Id = venImpuestos.venImpuestos
		INNER JOIN impTipoImpuesto ON impTipoImpuesto.TipoImpuesto = venImpuestos.TipoImpuesto
		WHERE  impTipoImpuesto.Referencia01 = 'IVA' GROUP BY venMovimpuestos.venMovimientos) Iva1 ON 
		venMovimientos.venMovimientos = Iva1.venMovimientos
    INNER JOIN venMovimientosFiscal ON venMovimientos.venMovimientos = venMovimientosFiscal.venMovimientos
	LEFT JOIN (genCancMov INNER JOIN VenMovimientos VenMov ON genCancMov.Asiento_Id = VenMov.venMovimientos
		INNER JOIN conAsientos conAsi ON venMov.venMovimientos = conAsi.conAsientos AND conAsi.Anulado = 0
		INNER JOIN genAsiSegmentos genAsiSeg ON conAsi.conAsientos = genAsiSeg.Asiento_Id)	
		ON conAsientos.conAsientos = genCancMov.Asiento_Id_Ap 
WHERE conAsientos.fecha BETWEEN @pFechaDesde and @pFechaHasta
	AND genAsiSegmentos.Empresa_Id = @pEmpresa_Id
	AND genAsiSegmentos.Segmento1C = 'R'
	AND venImpuestos.TipoImpuesto = 1901 and venMovImpuestos.Importe > 0
	AND conAsientos.Anulado = 0	
Union all 
	SELECT conAsientos.Fecha, '2'+'13'+
	+substring(genAsiSegmentos.Segmento3C,1,1)+
	genAsiSegmentos.Segmento2C +RIGHT('000' + Ltrim(Rtrim(convert(varchar(8),genAsiSegmentos.Segmento1N))),8) +
    +CONVERT(char(10),conAsientos.Fecha,103)+
	RIGHT(REPLICATE('0',16)+ltrim(rtrim(convert(varchar(16),cast(ISNULL(venMovImpuestos.BaseImponibleMonedaNac,0) as decimal(15,2)),1))),16)+
	REPLICATE(' ',16)+
	CASE WHEN VenMov.venTipomov = 'I' THEN '10' WHEN VenMov.venTipomov IS NULL THEN '10' ELSE '09' END+ 
	CASE WHEN VenMov.venTipomov = 'I' THEN substring(genAsiSegmentos.Segmento3C,1,1) 
		WHEN VenMov.venTipomov IS NULL THEN ' ' ELSE substring(genAsiSegmentos.Segmento3C,1,1) END +  
	CASE WHEN VenMov.venTipomov IS NOT NULL THEN VenMov.venTipomov+substring(genAsiSegmentos.Segmento3C,1,1)+'00'+
		genAsiSegmentos.Segmento2C +RIGHT('000000' + Ltrim(Rtrim(convert(varchar(8),genAsiSegmentos.Segmento1N))),8) 
		ELSE '0000000000000000' END +
	SUBSTRING(genEntidades.Cuit,1,2)+SUBSTRING(genEntidades.Cuit,4,8)+SUBSTRING(genEntidades.Cuit,13,1)+					
	'029'+
	CASE WHEN VenMov.venTipomov IS NOT NULL THEN convert(char(10),conAsi.Fecha,103) ELSE convert(char(10),conAsientos.Fecha,103) END +
    RIGHT(REPLICATE('0',16)+ltrim(rtrim(convert(varchar(16),cast(ISNULL(venMovImpuestos.Importe,0) as decimal(15,2)),1))),16)+
	RIGHT(REPLICATE('0',1)+ltrim(rtrim(convert(varchar(5),cast(Venmovimpuestos.Porcentaje as decimal(4,2)),1))),16) +
	'           ' Renglon2
FROM venMovimientos
    INNER JOIN venMovImpuestos ON venMovimientos.venMovimientos = venMovImpuestos.venMovimientos
    INNER JOIN venImpuestos ON venMovImpuestos.Impuesto_Id = venImpuestos.venImpuestos
	INNER JOIN conMovcont ON conMovcont.conAsientos = venMovimientos.venMovimientos AND conMovcont.Renglon = venMovImpuestos.conRenglon
	INNER JOIN conMovCont TotalFactura ON TotalFactura.conAsientos = venMovimientos.venMovimientos AND TotalFactura.Clase = 'CLI'
	INNER JOIN conAsientos ON venMovimientos.venMovimientos = conAsientos.conAsientos
	INNER JOIN genAsiSegmentos ON conAsientos.conAsientos = genAsiSegmentos.Asiento_Id 
	INNER JOIN venClientes ON venMovimientos.Cliente_Id = venClientes.genEntidades
	INNER JOIN genEntidades ON venClientes.genEntidades = genEntidades.genEntidades
	INNER JOIN venCondFiscal ON venClientes.CondFisc_Id= venCondFiscal.venCondFiscal
	INNER JOIN genJurisCoeficientes ON genEntidades.genEntidades = genJurisCoeficientes.genEntidades 
	INNER JOIN impJurisdicciones ON genJurisCoeficientes.Juris_Id = impJurisdicciones.impjurisdicciones
	/*INNER JOIN impRentasCapGralTxt ON genEntidades.Cuit = impRentasCapGralTxt.CUIT and 
		impRentasCapGralTxt.Anio = year(conAsientos.Fecha) and 
		impRentasCapGralTxt.Mes = month(conAsientos.Fecha) */
	INNER JOIN (SELECT venMovimpuestos.venMovimientos, ISNULL(SUM(venMovimpuestos.importe),0) ImporteIva
		FROM venMovImpuestos
		INNER JOIN venImpuestos ON venMovImpuestos.Impuesto_Id = venImpuestos.venImpuestos
		INNER JOIN impTipoImpuesto ON impTipoImpuesto.TipoImpuesto = venImpuestos.TipoImpuesto
		WHERE  impTipoImpuesto.Referencia01 = 'IVA' GROUP BY venMovimpuestos.venMovimientos) Iva1 ON 
		venMovimientos.venMovimientos = Iva1.venMovimientos
    INNER JOIN venMovimientosFiscal ON venMovimientos.venMovimientos = venMovimientosFiscal.venMovimientos
	LEFT JOIN (genCancMov INNER JOIN VenMovimientos VenMov ON genCancMov.Asiento_Id = VenMov.venMovimientos
		INNER JOIN conAsientos conAsi ON venMov.venMovimientos = conAsi.conAsientos AND conAsi.Anulado = 0
		INNER JOIN genAsiSegmentos genAsiSeg ON conAsi.conAsientos = genAsiSeg.Asiento_Id)	
		ON conAsientos.conAsientos = genCancMov.Asiento_Id_Ap 
WHERE conAsientos.fecha BETWEEN @pFechaDesde and @pFechaHasta
	AND genAsiSegmentos.Empresa_Id = @pEmpresa_Id
	AND genAsiSegmentos.Segmento1C = 'E'
	AND venImpuestos.TipoImpuesto = 1901 and venMovImpuestos.Importe > 0
	AND conAsientos.Anulado = 0	) a ORDER BY a.Fecha
GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impCABATxt.sql*/
Drop procedure impCABATxtDatos
Go
Create procedure impCABATxtDatos
(
@pAnio SMALLINT,
@pMes SMALLINT,
@pTrimestre smallint   
)
As

Declare @lMes smallint
Declare @lAnio smallint
Declare @lTrimestre smallint

If @pMes = 0
	Set @lMes = Convert(SmallInt, Month(getDate()))
Else
	Set @lMes = @pMes

If @pAnio = 0
	Set @lAnio = Convert(SmallInt, Year(getDate()))
Else
	Set @lAnio = @pAnio

If @pTrimestre = 0
	Set @lTrimestre = Convert(SmallInt, Floor((Month(getDate() - 1)/3)+1))
Else
	Set @lTrimestre = @pTrimestre

Select '' ArchivoRegGral, '' ArchivoMagSup, '' ArchivoRiesFisc, '' ArchivoExentos, @lMes Mes, @lAnio Anio, @lTrimestre Trimestre, '' MesTrimestre,
(Select Count(1) From impRentasCapGralTxt WHERE Mes = @lMes AND Anio = @lAnio) CantGral,
(Select Count(1) From impRentasCapMagSupTxt WHERE Mes = @lMes AND Anio = @lAnio) CantMagSup,
(Select Count(1) From impRentasCapExentosTxt WHERE Trimestre = @lTrimestre AND Anio = @lAnio) CantExentos,
(Select Count(1) From impRentasCapRiesgoTxt WHERE Trimestre = @lTrimestre AND Anio = @lAnio) CantRiesgo

Select 
(Select top 1 FechaVigDesde From impRentasCapGralTxt ORDER BY FechaVigDesde DESC) VigGralDesde,
(Select top 1 FechaVigHasta From impRentasCapGralTxt ORDER BY FechaVigHasta DESC) VigGralHasta,
(Select top 1 FechaVigDesde From impRentasCapMagSupTxt ORDER BY FechaVigDesde DESC) VigMagSupDesde,
(Select top 1 FechaVigHasta From impRentasCapMagSupTxt ORDER BY FechaVigHasta DESC) VigMagSupHasta,
(Select top 1 FechaVigDesde From impRentasCapExentosTxt ORDER BY FechaVigDesde DESC) VigExentosDesde,
(Select top 1 FechaVigHasta From impRentasCapExentosTxt ORDER BY FechaVigHasta DESC) VigExentosHasta,
(Select top 1 FechaVigDesde From impRentasCapRiesgoTxt ORDER BY FechaVigDesde DESC) VigRiesgoDesde,
(Select top 1 FechaVigHasta From impRentasCapRiesgoTxt ORDER BY FechaVigHasta DESC) VigRiesgoHasta
Go


Drop PROCEDURE impRentasCapGralTxtImpor
Go
CREATE PROCEDURE impRentasCapGralTxtImpor
(    
@pAnio SMALLINT,
@pMes SMALLINT,
@pTxt VARCHAR(200)
)    
AS    
SET NOCOUNT ON    
IF EXISTS (SELECT * FROM tempdb.dbo.sysobjects WHERE name = '#tmpRentas0')    
	DROP TABLE #tmpRentas0
	    
CREATE TABLE #tmpRentas0 
(
Col1 CHAR(8),    
VigDesde CHAR(8),    
VigHasta CHAR(8),    
Cuit CHAR(11), 
Tipo CHAR(1),    
Col3 CHAR(1),    
Col4 CHAR(1),    
AlicP CHAR(4),    
AlicR CHAR(4),    
GrupoP CHAR(2),
GrupoR CHAR(2),
Col5 VARCHAR(200)
)

DECLARE @SQL VARCHAR(200)    
SET @SQL = 'BULK INSERT #tmpRentas0 FROM ''' + @pTxt + ''' WITH (FIELDTERMINATOR = '';'', ROWTERMINATOR = ''\n'') '    
EXEC (@SQL)

DELETE FROM impRentasCapGralTxt WHERE Mes = @pMes AND Anio = @pAnio 

INSERT INTO impRentasCapGralTxt     
(Anio, Mes, CUIT, FechaVigDesde, FechaVigHasta,Tipo,AlicuotaPer, AlicuotaRet, GrupoPer, GrupoRet)    
SELECT @pAnio, @pMes,     
substring(Cuit, 1, 2) + '-' + substring(Cuit, 3, 8) + '-' + substring(Cuit, 11, 1),     
substring(VigDesde, 5,4) + substring(VigDesde, 3,2) + substring(VigDesde, 1,2),    
substring(VigHasta, 5,4) + substring(VigHasta, 3,2) + substring(VigHasta, 1,2),    
substring(Tipo,1,1),   
cast(replace(AlicP, ',', '.') AS NUMERIC(5,2)),
cast(replace(AlicR, ',', '.') AS NUMERIC(5,2)),
cast(GrupoP AS SMALLINT),
cast(GrupoR AS SMALLINT)
FROM #tmpRentas0     
WHERE cast(substring(VigDesde, 3,2) AS SMALLINT) = @pMes and     
cast(substring(VigDesde, 5,4) AS SMALLINT) = @pAnio    

DROP TABLE #tmpRentas0

Select Cast(Count(1) as bigint) CantGral From impRentasCapGralTxt WHERE Mes = @pMes AND Anio = @pAnio
GO


Drop PROCEDURE impRentasCapMagSupTxtImpor
Go
CREATE PROCEDURE impRentasCapMagSupTxtImpor
(    
@pAnio SMALLINT,
@pMes SMALLINT,
@pTxt VARCHAR(200)
)    
AS    
SET NOCOUNT ON    
IF EXISTS (SELECT * FROM tempdb.dbo.sysobjects WHERE name = '#tmpRentas0')    
	DROP TABLE #tmpRentas0

CREATE TABLE #tmpRentas0 
(
Col1 CHAR(8),    
VigDesde CHAR(8),    
VigHasta CHAR(8),    
Cuit CHAR(11), 
Col2 CHAR(1),    
Col3 CHAR(1),    
Col4 CHAR(1),    
AlicP CHAR(4),    
AlicR CHAR(4),    
GrupoP CHAR(2),
GrupoR CHAR(2),
Col5 VARCHAR(200)
)

DECLARE @SQL VARCHAR(200)    
SET @SQL = 'BULK INSERT #tmpRentas0 FROM ''' + @pTxt + ''' WITH (FIELDTERMINATOR = '';'', ROWTERMINATOR = ''\n'') '    
EXEC (@SQL)    

DELETE FROM impRentasCapMagSupTxt WHERE Mes = @pMes AND Anio = @pAnio 
INSERT INTO impRentasCapMagSupTxt     
(Anio, Mes, CUIT, FechaVigDesde, FechaVigHasta, AlicuotaPer, AlicuotaRet, GrupoPer, GrupoRet)    
SELECT @pAnio, @pMes,     
substring(Cuit, 1, 2) + '-' + substring(Cuit, 3, 8) + '-' + substring(Cuit, 11, 1),     
substring(VigDesde, 5,4) + substring(VigDesde, 3,2) + substring(VigDesde, 1,2),    
substring(VigHasta, 5,4) + substring(VigHasta, 3,2) + substring(VigHasta, 1,2),    
cast(replace(AlicP, ',', '.') AS NUMERIC(5,2)),
cast(replace(AlicR, ',', '.') AS NUMERIC(5,2)),
cast(GrupoP AS SMALLINT),
cast(GrupoR AS SMALLINT)
FROM #tmpRentas0     
WHERE cast(substring(VigDesde, 3,2) AS SMALLINT) = @pMes and     
cast(substring(VigDesde, 5,4) AS SMALLINT) = @pAnio    
DROP TABLE #tmpRentas0

Select Cast(Count(1) As bigint) CantMagSup From impRentasCapMagSupTxt WHERE Mes = @pMes AND Anio = @pAnio
GO


Drop PROCEDURE impRentasCapExentosTxtImpor
Go
CREATE PROCEDURE impRentasCapExentosTxtImpor
(    
@pAnio SMALLINT,
@pTrim SMALLINT,
@pTxt VARCHAR(200)
)    
AS    
SET NOCOUNT ON    
IF EXISTS (SELECT * FROM tempdb.dbo.sysobjects WHERE name = '#tmpRentas0')    
	DROP TABLE #tmpRentas0

CREATE TABLE #tmpRentas0
(
Col1 CHAR(8),    
VigDesde CHAR(8),    
VigHasta CHAR(8),    
Cuit CHAR(11), 
Col2 CHAR(1),    
Col3 CHAR(1),    
Col4 CHAR(1),    
AlicP CHAR(4),    
AlicR CHAR(4),    
GrupoP CHAR(2),
GrupoR CHAR(2),
Col5 VARCHAR(200)
)    
DECLARE @SQL VARCHAR(200)    
SET @SQL = 'BULK INSERT #tmpRentas0 FROM ''' + @pTxt + ''' WITH (FIELDTERMINATOR = '';'', ROWTERMINATOR = ''\n'') '    
EXEC (@SQL)    

DELETE FROM impRentasCapExentosTxt WHERE Trimestre = @pTrim AND Anio = @pAnio 
INSERT INTO impRentasCapExentosTxt     
(Anio, Trimestre, CUIT, FechaVigDesde, FechaVigHasta, AlicuotaPer, AlicuotaRet, GrupoPer, GrupoRet)    
SELECT @pAnio, @pTrim,     
substring(Cuit, 1, 2) + '-' + substring(Cuit, 3, 8) + '-' + substring(Cuit, 11, 1),     
substring(VigDesde, 5,4) + substring(VigDesde, 3,2) + substring(VigDesde, 1,2),    
substring(VigHasta, 5,4) + substring(VigHasta, 3,2) + substring(VigHasta, 1,2),    
cast(replace(AlicP, ',', '.') AS NUMERIC(5,2)),
cast(replace(AlicR, ',', '.') AS NUMERIC(5,2)),
cast(GrupoP AS SMALLINT),
cast(GrupoR AS SMALLINT)
FROM #tmpRentas0     
WHERE (Floor((cast(substring(VigDesde,3,2) AS SMALLINT)-1)/3)+1) = @pTrim and     
cast(substring(VigDesde, 5,4) AS SMALLINT) = @pAnio    
DROP TABLE #tmpRentas0

Select Cast(Count(1) As bigint) CantExentos From impRentasCapExentosTxt WHERE Trimestre = @pTrim AND Anio = @pAnio
GO


Drop PROCEDURE impRentasCapRiesgoTxtImport
Go
CREATE PROCEDURE impRentasCapRiesgoTxtImport
(    
@pAnio SMALLINT,
@pTrim SMALLINT,
@pTxt VARCHAR(200)
)    
AS    
SET NOCOUNT ON    
IF EXISTS (SELECT * FROM tempdb.dbo.sysobjects WHERE name = '#tmpRentas0')    
	DROP TABLE #tmpRentas0

CREATE TABLE #tmpRentas0
(
Col1 CHAR(8),    
VigDesde CHAR(8),    
VigHasta CHAR(8),    
Cuit CHAR(11), 
Col2 CHAR(1),    
Col3 CHAR(1),    
Col4 CHAR(1),    
AlicP CHAR(4),    
AlicR CHAR(4),    
GrupoP CHAR(2),
GrupoR CHAR(2),
Col5 VARCHAR(200)
)    
DECLARE @SQL VARCHAR(200)    
SET @SQL = 'BULK INSERT #tmpRentas0 FROM ''' + @pTxt + ''' WITH (FIELDTERMINATOR = '';'', ROWTERMINATOR = ''\n'') '    
EXEC (@SQL)    

DELETE FROM impRentasCapRiesgoTxt WHERE Trimestre = @pTrim AND Anio = @pAnio

INSERT INTO impRentasCapRiesgoTxt     
(Anio, Trimestre, CUIT, FechaVigDesde, FechaVigHasta, AlicuotaPer, AlicuotaRet, GrupoPer, GrupoRet)    
SELECT @pAnio, @pTrim,     
substring(Cuit, 1, 2) + '-' + substring(Cuit, 3, 8) + '-' + substring(Cuit, 11, 1),     
substring(VigDesde, 5,4) + substring(VigDesde, 3,2) + substring(VigDesde, 1,2),    
substring(VigHasta, 5,4) + substring(VigHasta, 3,2) + substring(VigHasta, 1,2),    
cast(replace(AlicP, ',', '.') AS NUMERIC(5,2)),
cast(replace(AlicR, ',', '.') AS NUMERIC(5,2)),
cast(GrupoP AS SMALLINT),
cast(GrupoR AS SMALLINT)
FROM #tmpRentas0     
WHERE (Floor((cast(substring(VigDesde,3,2) AS SMALLINT)-1)/3)+1) = @pTrim and     
cast(substring(VigDesde, 5,4) AS SMALLINT) = @pAnio

DROP TABLE #tmpRentas0

Select Cast(Count(1) As bigint) CantRiesgo From impRentasCapRiesgoTxt WHERE Trimestre = @pTrim AND Anio = @pAnio
GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impCalularDatos.sql*/
-- exec impCalularDatos @Impuesto_Id='IVA',@FechaDesde='20190801 00:00:00',@FechaHasta='20190831 00:00:00',@Empresa_Id=1
	drop PROCEDURE impCalularDatos
go
CREATE PROCEDURE impCalularDatos
(
	@Impuesto_Id VarChar(5), 
	@FechaDesde DateTime, 
	@FechaHasta DateTime, 
	@Empresa_Id int
)
as
DECLARE @FechainiEje DATETIME

SET @FechainiEje = (SELECT Fecha_Desde From conPeriodos WHERE
	conPeriodos.Periodo = 1 AND 
	conPeriodos.Empresa_Id = @Empresa_Id AND 
	conPeriodos.Ejercicio = (SELECT Ejercicio from conPeriodos conPeriodos1 where
		@FechaDesde between conPeriodos1.Fecha_Desde and conPeriodos1.Fecha_Hasta AND 
		conPeriodos1.Empresa_Id = @Empresa_Id ))
		
	

SELECT Impuesto_id, Descripcion, @FechaDesde as FechaDesde, 
	@FechaHasta  FechaHasta  
from impImpuestos

SELECT conCuentas.Cuenta_Id, conCuentas.Descripcion, 
	impFormulas.Detalle,
	case when SUM(conmovcont.Importe * (-2*conMovCont.Tipomov+3)) < 0 then 
	-SUM(conmovcont.Importe * (-2*conMovCont.Tipomov+3)) else 0 end as Debe,
	case when SUM(conmovcont.Importe * (-2*conMovCont.Tipomov+3)) > 0 then 
	SUM(conmovcont.Importe * (-2*conMovCont.Tipomov+3)) else 0 end as Haber
from impFormulas inner join impImpuestos on 
impFormulas.impImpuestos = impImpuestos.impImpuestos
INNER JOIN conCuentas ON 
conCuentas.conCuentas = impFormulas.Cuenta_Id
INNER JOIN conMovCont ON 
		conMovCont.Cuenta_Id = conCuentas.conCuentas
INNER JOIN conAsientos ON 
	conAsientos.conAsientos = conMovCont.conAsientos 
	INNER JOIN genEmpresas ON
genEmpresas.genEmpresas = conAsientos.Empresa_Id
LEFT JOIN conAsientosCon ON conAsientosCon.conAsientos = conAsientos.conAsientos
WHERE
	impImpuestos.Impuesto_Id = @Impuesto_Id and 
	(conAsientos.Fecha >= genEmpresas.FechaInicioSumma  or
		conAsientosCon.conAsientos IS Not NULL) AND
		conAsientos.Especial NOT IN ('CCP','CIR') AND 
	conAsientos.Anulado = 0 AND 
	conAsientos.Posteado = 1 AND 
	conAsientos.Empresa_Id = @Empresa_Id AND 
	conAsientos.Fecha BETWEEN Case impFormulas.DebeHaberAmbos When  'A' THEN @FechainiEje ELSE @FechaDesde END AND @FechaHasta and 
	conMovCont.Tipomov = CASE impFormulas.DebeHaberAmbos  WHEN 'A' THEN conMovCont.Tipomov 
		WHEN 'D' THEN 1 ELSE 2 END
group by conCuentas.Cuenta_Id, conCuentas.Descripcion, 
	impFormulas.Detalle
GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impCerrar.sql*/
DROP Procedure impCerrar
GO
CREATE Procedure impCerrar
(
@Empresa_Id Int
)
as

SELECT FechaCierreImpuestos as UltimoCierre, 
conPeriodos.Fecha_Hasta as ProximoCierre, 
genEmpresas.FechaCierreCompras, genEmpresas.FechaCierreVentas
FROM genEmpresas 
INNER JOIN conPeriodos on
genEmpresas.genEmpresas = conPeriodos.Empresa_Id and 
DATEADD(dd,1,FechaCierreImpuestos) between conPeriodos.Fecha_Desde And conPeriodos.Fecha_Hasta
Where
	genEmpresas.genEmpresas = @Empresa_Id

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impCfdiMetaDatos.sql*/
DROP PROCEDURE impCfdiMetaDatosGuardar
GO
CREATE PROCEDURE impCfdiMetaDatosGuardar
(
@pUuid char(36),
@pRfcEmisor varchar(13),
@pNombreEmisor varchar(200),
@pRfcReceptor varchar(13),
@pNombreReceptor varchar(200) = NULL,
@pRfcPac varchar(13),
@pFechaEmision datetime,
@pFechaCertificacionSat datetime,
@pMonto numeric(18,2),
@pEfectoComprobante char(1),
@pEstatus bit,
@pFechaCancelacion datetime = NULL,
@pFechaDescarga datetime,
@pUsuario_Id int, 
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM impCfdiMetaDatos WHERE (Uuid = @pUuid)))
BEGIN 
	UPDATE impCfdiMetaDatos
	SET		RfcEmisor = @pRfcEmisor,
		NombreEmisor = @pNombreEmisor,
		RfcReceptor = @pRfcReceptor,
		NombreReceptor = @pNombreReceptor,
		RfcPac = @pRfcPac,
		FechaEmision = @pFechaEmision,
		FechaCertificacionSat = @pFechaCertificacionSat,
		Monto = @pMonto,
		EfectoComprobante = @pEfectoComprobante,
		Estatus = @pEstatus,
		FechaCancelacion = @pFechaCancelacion,
		FechaDescarga = @pFechaDescarga,
		Usuario_Id = @pUsuario_Id, 
		Empresa_Id = @pEmpresa_Id
	WHERE (Uuid = @pUuid)
END 
ELSE 
BEGIN 
	INSERT INTO impCfdiMetaDatos
	(
		Uuid,
		RfcEmisor,
		NombreEmisor,
		RfcReceptor,
		NombreReceptor,
		RfcPac,
		FechaEmision,
		FechaCertificacionSat,
		Monto,
		EfectoComprobante,
		Estatus,
		FechaCancelacion,
		FechaDescarga,
		Usuario_Id, 
		Empresa_Id
	)
	VALUES 
	(
		@pUuid,
		@pRfcEmisor,
		@pNombreEmisor,
		@pRfcReceptor,
		@pNombreReceptor,
		@pRfcPac,
		@pFechaEmision,
		@pFechaCertificacionSat,
		@pMonto,
		@pEfectoComprobante,
		@pEstatus,
		@pFechaCancelacion,
		@pFechaDescarga,
		@pUsuario_Id, 
		@pEmpresa_Id
	)
END 

GO

DROP PROCEDURE impCfdiMetaDatosDatos
GO
CREATE PROCEDURE impCfdiMetaDatosDatos
(
@pUuid char(36)
)
AS
SET NOCOUNT ON 

SELECT impCfdiMetaDatos.Uuid, impCfdiMetaDatos.RfcEmisor, impCfdiMetaDatos.NombreEmisor, impCfdiMetaDatos.RfcReceptor,
	impCfdiMetaDatos.NombreReceptor, impCfdiMetaDatos.RfcPac, impCfdiMetaDatos.FechaEmision, impCfdiMetaDatos.FechaCertificacionSat,
	impCfdiMetaDatos.Monto, impCfdiMetaDatos.EfectoComprobante, impCfdiMetaDatos.Estatus, impCfdiMetaDatos.FechaCancelacion,
	impCfdiMetaDatos.FechaDescarga, genUsuarios.Usuario_Id,  impCfdiMetaDatos.Empresa_Id
FROM impCfdiMetaDatos 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = impCfdiMetaDatos.Usuario_Id)
WHERE (Uuid = @pUuid)
 
 RETURN @@Error 

GO

DROP PROCEDURE impCfdiMetaDatosEliminar
GO
CREATE PROCEDURE impCfdiMetaDatosEliminar
(
@pUuid char(36) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM impCfdiMetaDatos 
WHERE (Uuid = ISNULL(@pUuid, Uuid))
 
 RETURN @@Error 

GO


DROP PROCEDURE impCfdiMetaDatosEliminarxFecha
GO
CREATE PROCEDURE impCfdiMetaDatosEliminarxFecha
(
	@pFechaDesde DateTime, 
	@pFechaHasta DateTime,
	@pEmpresa_Id int
)
AS
SET NOCOUNT ON 

DELETE FROM impCfdiMetaDatos 
WHERE FechaEmision Between @pFechaDesde AND @pFechaHasta AND 
	Empresa_Id = @pEmpresa_Id
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impCiti.sql*/
Drop Procedure impCiti
Go
Create Procedure impCiti
(
@pEmpresa_Id int,
@pFechaDesde Datetime,
@pFechaHasta Datetime
)
As

Select @pEmpresa_Id Empresa_Id, @pFechaDesde FechaDesde, @pFechaHasta FechaHasta, ' ' Destino, 0 ImportacionDefBienes

-- Ventas --
Select conAsientos.conAsientos, conAsientos.Fecha, genAsiSegmentos.Segmento2C venSucursal, genAsiSegmentos.Segmento1C venTipoMov_Id,
genAsiSegmentos.Segmento1N venComprobante, IsNull(venMovimientos.ComprobanteDesde, genAsiSegmentos.Segmento1N) ComprobanteDesde,
genAsiSegmentos.Segmento3C venLetra, venClientes.RazonSocial, genEntidades.TipoDoc, genPaises.Pais_Id Pais_Id_Fact,
venMovimientosFiscal.Comprobante_Id, venCondFiscal.CodigoFiscal,  

IsNull((Select Max(genMovCuotas.FechaVencimiento) FV From genMovCuotas
Where genMovCuotas.Asiento_Id = venMovimientos.venMovimientos), 0) FechaVencimiento, 

genMonedas.Moneda_Id, conAsientos.Cambio, genEntidades.Cuit, conMovCont.Importe,
IsNull((Select Sum(venMovImpuestos.BaseImponibleMonedaNac) BI From venMovImpuestos
	Inner Join venImpuestos On venImpuestos.venImpuestos = venMovImpuestos.Impuesto_Id
	Inner Join impTipoImpuesto On impTipoImpuesto.TipoImpuesto = venImpuestos.TipoImpuesto
Where venMovImpuestos.venMovimientos = venMovimientos.venMovimientos And impTipoImpuesto.CodigoFiscal = '1' And 
impTipoImpuesto.Referencia02 = 'IVA'), 0) NoGravado,

conMovCont.Importe -
/*
IsNull((Select Sum(BaseImponibleMonedaNac) BI From venMovImpuestos 
	Inner Join venImpuestos On venImpuestos.venImpuestos = venMovImpuestos.Impuesto_Id
	Inner Join impTipoImpuesto On impTipoImpuesto.TipoImpuesto = venImpuestos.TipoImpuesto
Where venMovImpuestos.venMovimientos = venMovimientos.venMovimientos 
and impTipoImpuesto.Referencia01 = 'IVA'
and venMovImpuestos.venMovimientos = venMovimientos.venMovimientos), 0) -
*/
(IsNull((Select Sum(conMovCont.Importe) BI From venMovImpuestos Inner Join conMovCont On conMovCont.conAsientos = venMovimientos.venMovimientos And
	conMovCont.Renglon = venMovImpuestos.conRenglon
Where venMovImpuestos.venMovimientos = venMovimientos.venMovimientos), 0) +

IsNull((Select Sum(venMovImpuestos.BaseImponibleMonedaNac) BI From venMovImpuestos
	Inner Join venImpuestos On venImpuestos.venImpuestos = venMovImpuestos.Impuesto_Id
	Inner Join impTipoImpuesto On impTipoImpuesto.TipoImpuesto = venImpuestos.TipoImpuesto
Where venMovImpuestos.venMovimientos = venMovimientos.venMovimientos And impTipoImpuesto.CodigoFiscal <> '2' And 
impTipoImpuesto.Referencia01 = 'IVA'), 0)) Exento,

IsNull((Select Sum(conMovCont.Importe) BI From venMovImpuestos  Inner Join conMovCont On conMovCont.conAsientos = venMovimientos.venMovimientos And
	conMovCont.Renglon = venMovImpuestos.conRenglon
	Inner Join venImpuestos On venImpuestos.venImpuestos = venMovImpuestos.Impuesto_Id
	Inner Join impTipoImpuesto On impTipoImpuesto.TipoImpuesto = venImpuestos.TipoImpuesto
Where venMovImpuestos.venMovimientos = venMovimientos.venMovimientos And impTipoImpuesto.Referencia04 = 'PERC' And 
impTipoImpuesto.Referencia05 = '1'), 0) PercNac,
IsNull((Select Sum(conMovCont.Importe) BI From venMovImpuestos  Inner Join conMovCont On conMovCont.conAsientos = venMovimientos.venMovimientos And
	conMovCont.Renglon = venMovImpuestos.conRenglon
	Inner Join venImpuestos On venImpuestos.venImpuestos = venMovImpuestos.Impuesto_Id
	Inner Join impTipoImpuesto On impTipoImpuesto.TipoImpuesto = venImpuestos.TipoImpuesto
Where venMovImpuestos.venMovimientos = venMovimientos.venMovimientos And impTipoImpuesto.Referencia04 = 'PERC' And 
impTipoImpuesto.Referencia02 = '2'), 0) PercIIBB,
IsNull((Select Sum(conMovCont.Importe) BI From venMovImpuestos  Inner Join conMovCont On conMovCont.conAsientos = venMovimientos.venMovimientos And
	conMovCont.Renglon = venMovImpuestos.conRenglon
	Inner Join venImpuestos On venImpuestos.venImpuestos = venMovImpuestos.Impuesto_Id
	Inner Join impTipoImpuesto On impTipoImpuesto.TipoImpuesto = venImpuestos.TipoImpuesto
Where venMovImpuestos.venMovimientos = venMovimientos.venMovimientos And
impTipoImpuesto.Referencia02 = '3'), 0) PercMuni,
IsNull((Select Sum(conMovCont.Importe) BI From venMovImpuestos  Inner Join conMovCont On conMovCont.conAsientos = venMovimientos.venMovimientos And
	conMovCont.Renglon = venMovImpuestos.conRenglon
	Inner Join venImpuestos On venImpuestos.venImpuestos = venMovImpuestos.Impuesto_Id
	Inner Join impTipoImpuesto On impTipoImpuesto.TipoImpuesto = venImpuestos.TipoImpuesto
Where venMovImpuestos.venMovimientos = venMovimientos.venMovimientos And
impTipoImpuesto.Referencia02 = '4'), 0) ImpInterno

From venMovimientos
Inner Join conAsientos On conAsientos.conAsientos = venMovimientos.venMovimientos
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
--Inner Join venClieHabitual On venClieHabitual.genEntidades = venMovimientos.Cliente_Id And venClieHabitual.Sucursal = venMovimientos.Sucursal
inner Join venMovimientosFiscal on venMovimientos.venMovimientos = venMovimientosFiscal.venMovimientos
Inner Join venClientes On venClientes.genEntidades = venMovimientos.Cliente_Id
Inner Join venClieHabitual On venClieHabitual.genEntidades = venMovimientos.Cliente_Id And
	venClieHabitual.Sucursal = venMovimientos.Sucursal
Inner Join genPaises On genPaises.genPaises = venClieHabitual.Pais_Id_Fact
Inner Join genMonedas On genMonedas.genMonedas = conAsientos.Moneda_Id
Inner Join genEntidades On genEntidades.genEntidades = venMovimientos.Cliente_Id
Inner Join venSubTipoMov On venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
Inner Join venSTMAfip On venSTMAfip.venSubTipoMov = venMovimientos.venSubTipoMov_Id And
	venSTMAfip.Letra = genAsiSegmentos.Segmento3C
Inner Join venCondFiscal On venCondFiscal.venCondFiscal = venClientes.CondFisc_Id
Inner Join conMovCont On conMovCont.conAsientos = conAsientos.conAsientos And conMovCont.Clase = 'CLI'
Where conAsientos.Anulado = 0 And conAsientos.Empresa_Id = @pEmpresa_Id And
venMovimientos.venTipoMov IN ('F','D','R', 'I', 'B', 'E') And conAsientos.Fecha BETWEEN @pFechaDesde AND @pFechaHasta
Order By 2, 3, 5

-- Al?cuotas comprobantes de ventas --
SELECT conAsientos.conAsientos, venMovImpuestos.BaseImponible NetoGravado, impTipoImpuesto.CodigoFiscal codAlicuota, venMovImpuestos.Importe 
FROM venMovImpuestos
Inner Join conAsientos On conAsientos.conAsientos = venMovImpuestos.venMovimientos
Inner Join venImpuestos ON venMovImpuestos.Impuesto_id = venImpuestos.venImpuestos 
Inner Join impTipoImpuesto On impTipoImpuesto.TipoImpuesto = venImpuestos.TipoImpuesto
Inner Join venMovimientos On venMovimientos.venMovimientos = conAsientos.conAsientos
Inner Join venSubTipoMov On venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
Where conAsientos.Anulado = 0 And impTipoImpuesto.Referencia01 = 'IVA' And
conAsientos.Empresa_Id = @pEmpresa_Id And
venMovimientos.venTipoMov IN ('F','D','R', 'I', 'B', 'E') And conAsientos.Fecha BETWEEN @pFechaDesde AND @pFechaHasta

-- Compras --
Select conAsientos.conAsientos, comMovProv.Fecha_CCP, comMovProv.TipoCompFE, comProveedores.Proveed_Id, 
genAsiSegmentos.Segmento2C TipoMov, genAsiSegmentos.Segmento1C Sucursal, genAsiSegmentos.Segmento1N Comprobante,
genAsiSegmentos.Segmento4C Letra, '' NroOrdenExterior, '' Aduana, '' Destinacion,
'' NroOperacion, '' FechaDespa, 
case when genAsisegmentos.segmento_id =23 then RIGHT('' + Ltrim(Rtrim(convert(varchar(16),genAsiSegmentos.Segmento3c))),16) else '' end Despacho_Id, '' Verificador, genEntidades.Cuit, comProveedores.RazonSocial, 
IsNull(genPaises.Pais_Id, 54) Pais_Id,
genEntidades.TipoDoc, comCondFiscal.CodigoFiscal, comMovProv.Importe,

IsNull((Select Sum(comMovImpuestos.Base_Imponible) BI From comMovImpuestos Inner Join conMovCont On conMovCont.conAsientos = comMovProv.comMovProv And
	conMovCont.Renglon = comMovImpuestos.conRenglon
	Inner Join comImpuestos On comImpuestos.comImpuestos = comMovImpuestos.Impuesto_Id
	Inner Join impTipoImpuesto On impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto
Where comMovImpuestos.comMovProv = comMovProv.comMovProv And impTipoImpuesto.Referencia01 = 'IVA' And
impTipoImpuesto.CodigoFiscal = '1'), 0) IvaNoGravado,

IsNull((Select Sum(comMovImpuestos.Base_Imponible) BI From comMovImpuestos Inner Join conMovCont On conMovCont.conAsientos = comMovProv.comMovProv And
	conMovCont.Renglon = comMovImpuestos.conRenglon
	Inner Join comImpuestos On comImpuestos.comImpuestos = comMovImpuestos.Impuesto_Id
	Inner Join impTipoImpuesto On impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto
Where comMovImpuestos.comMovProv = comMovProv.comMovProv And impTipoImpuesto.Referencia01 = 'IVA' And
impTipoImpuesto.CodigoFiscal = '2'), 0) + 

IsNull((Select comMovProv.Importe - Sum(comMovImpuestos.Base_Imponible) BI 
From comMovImpuestos 
Inner Join comMovProv CMP On CMP.comMovProv = comMovProv.comMovProv
Inner Join conMovCont On conMovCont.conAsientos = comMovProv.comMovProv And
	conMovCont.Renglon = comMovImpuestos.conRenglon
	Inner Join comImpuestos On comImpuestos.comImpuestos = comMovImpuestos.Impuesto_Id
	Inner Join impTipoImpuesto On impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto
Where comMovImpuestos.comMovProv = comMovProv.comMovProv And impTipoImpuesto.Referencia01 = 'IVA'), 0) -

IsNull((Select Sum(conMovCont.Importe) BI From comMovImpuestos Inner Join conMovCont On conMovCont.conAsientos = comMovProv.comMovProv And
	conMovCont.Renglon = comMovImpuestos.conRenglon
Where comMovImpuestos.comMovProv = comMovProv.comMovProv), 0) IvaExento,

IsNull((Select Sum(conMovCont.Importe) BI From comMovImpuestos Inner Join conMovCont On conMovCont.conAsientos = comMovProv.comMovProv And
	conMovCont.Renglon = comMovImpuestos.conRenglon
	Inner Join comImpuestos On comImpuestos.comImpuestos = comMovImpuestos.Impuesto_Id
	Inner Join impTipoImpuesto On impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto
Where comMovImpuestos.comMovProv = comMovProv.comMovProv And impTipoImpuesto.Referencia04 = 'PERC' And
impTipoImpuesto.Referencia05 = '1'), 0) PercIva,

IsNull((Select Sum(conMovCont.Importe) BI From comMovImpuestos Inner Join conMovCont On conMovCont.conAsientos = comMovProv.comMovProv And
	conMovCont.Renglon = comMovImpuestos.conRenglon
	Inner Join comImpuestos On comImpuestos.comImpuestos = comMovImpuestos.Impuesto_Id
	Inner Join impTipoImpuesto On impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto
Where comMovImpuestos.comMovProv = comMovProv.comMovProv And impTipoImpuesto.Referencia04 = 'PERC' And
impTipoImpuesto.Referencia05 = '1' And impTipoImpuesto.Referencia02 <> 'IVA'), 0) PercNac,

IsNull((Select Sum(conMovCont.Importe) BI From comMovImpuestos Inner Join conMovCont On conMovCont.conAsientos = comMovProv.comMovProv And
	conMovCont.Renglon = comMovImpuestos.conRenglon
	Inner Join comImpuestos On comImpuestos.comImpuestos = comMovImpuestos.Impuesto_Id
	Inner Join impTipoImpuesto On impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto
Where comMovImpuestos.comMovProv = comMovProv.comMovProv And impTipoImpuesto.Referencia04 = 'PERC' And
impTipoImpuesto.Referencia02 = '2'), 0) PercIIBB,

IsNull((Select Sum(conMovCont.Importe) BI From comMovImpuestos Inner Join conMovCont On conMovCont.conAsientos = comMovProv.comMovProv And
	conMovCont.Renglon = comMovImpuestos.conRenglon
	Inner Join comImpuestos On comImpuestos.comImpuestos = comMovImpuestos.Impuesto_Id
	Inner Join impTipoImpuesto On impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto
Where comMovImpuestos.comMovProv = comMovProv.comMovProv And
impTipoImpuesto.Referencia02 = '3'), 0) PercMuni,

IsNull((Select Sum(conMovCont.Importe) BI From comMovImpuestos Inner Join conMovCont On conMovCont.conAsientos = comMovProv.comMovProv And
	conMovCont.Renglon = comMovImpuestos.conRenglon
	Inner Join comImpuestos On comImpuestos.comImpuestos = comMovImpuestos.Impuesto_Id
	Inner Join impTipoImpuesto On impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto
Where comMovImpuestos.comMovProv = comMovProv.comMovProv And
impTipoImpuesto.Referencia02 = '4'), 0) ImpInterno,

IsNull((Select Sum(conMovCont.Importe) BI From comMovImpuestos Inner Join conMovCont On conMovCont.conAsientos = comMovProv.comMovProv And
	conMovCont.Renglon = comMovImpuestos.conRenglon
	Inner Join comImpuestos On comImpuestos.comImpuestos = comMovImpuestos.Impuesto_Id
Where comMovImpuestos.comMovProv = comMovProv.comMovProv AND
comImpuestos.TipoImpuesto IN ('1021','1022')), 0) Otros,

IsNull((Select Sum(conMovCont.Importe) BI From comMovImpuestos Inner Join conMovCont On conMovCont.conAsientos = comMovProv.comMovProv And
	conMovCont.Renglon = comMovImpuestos.conRenglon
	Inner Join comImpuestos On comImpuestos.comImpuestos = comMovImpuestos.Impuesto_Id
	Inner Join impTipoImpuesto On impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto
Where comMovImpuestos.comMovProv = comMovProv.comMovProv And impTipoImpuesto.Referencia01 = 'IVA'), 0) IVA,
genMonedas.Moneda_Id, conAsientos.Cambio

From comMovProv
Inner Join conAsientos On conAsientos.conAsientos = comMovProv.comMovProv
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
Inner Join comProveedores On comProveedores.genEntidades = comMovProv.Proveed_Id
Left Join genPaises On genPaises.genPaises = comProveedores.Pais
Inner Join genMonedas On genMonedas.genMonedas = conAsientos.Moneda_Id
Inner Join genEntidades On genEntidades.genEntidades = comMovprov.Proveed_Id
Inner Join comCondFiscal On comCondFiscal.comCondFiscal = comProveedores.CondFiscal_Id
Where conAsientos.Anulado = 0 And conAsientos.Empresa_Id = @pEmpresa_Id And
comMovProv.TipoMov IN ('F','D','R', 'I', 'B', 'E') And conAsientos.Fecha BETWEEN @pFechaDesde AND @pFechaHasta
Order By 2, 6, 7

-- Al?cuotas comprobantes de Compras --
SELECT conAsientos.conAsientos, comMovImpuestos.Base_Imponible NetoGravado, impTipoImpuesto.CodigoFiscal codAlicuota, comMovImpuestos.Importe_Impuesto
FROM comMovImpuestos
Inner Join conAsientos On conAsientos.conAsientos = comMovImpuestos.comMovProv
Inner Join comImpuestos ON comMovImpuestos.Impuesto_Id = comImpuestos.comImpuestos 
Inner Join impTipoImpuesto On impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto
Inner Join comMovProv On comMovProv.comMovProv = conAsientos.conAsientos
Where conAsientos.Anulado = 0 And impTipoImpuesto.Referencia01 = 'IVA' And
conAsientos.Empresa_Id = @pEmpresa_Id And
comMovProv.TipoMov IN ('F','D','R', 'I', 'B', 'E') And conAsientos.Fecha BETWEEN @pFechaDesde AND @pFechaHasta
GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impFacturasCompras.sql*/
Drop procedure impFacturasCompras
GO
Create procedure impFacturasCompras(
	@FechaDesde DateTime, 
	@FechaHasta DateTime, 
	@ProveedDesde VarChar(15),
	@ProveedHasta VarChar(15),
	@Empresa_Id Int
)
AS

SELECT comProveedores.Proveed_Id, comProveedores.RazonSocial, 
	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, 
	genAsiSegmentos.Segmento4N) AS Comprobante, 
	comMovProv.Fecha_CCP as Fecha, comMovProv.Importe, comMovProv.ClaveFiscal AS UUID, 
		genMonedas.Moneda_Id, genEntidades.Cuit as RFC
	from comProveedores 
		INNER JOIN comMovProv on comProveedores.genEntidades = comMovProv.Proveed_Id
		INNER JOIN genAsiSegmentos ON  genAsiSegmentos.Asiento_Id = comMovProv.comMovProv
		INNER JOIN conAsientos ON  conAsientos.conAsientos =genAsiSegmentos.Asiento_Id
		INNER JOIN genMonedas ON  genMonedas.genMonedas = conAsientos.Moneda_Id
		INNER JOIN genEntidades ON  genEntidades.genEntidades = comProveedores.genEntidades
where
	comMovProv.ClaveFiscal IS NOT NULL AND 
	comMovProv.ClaveFiscal != ' ' AND 
	conAsientos.Empresa_Id = @Empresa_Id and
	comProveedores.Proveed_Id BETWEEN @ProveedDesde AND @ProveedHasta AND 
	conAsientos.Fecha between @FechaDesde and @FechaHasta
ORDER BY 1,4,3
GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impFormulas.sql*/
DROP PROCEDURE impFormulasGuardar
GO
CREATE PROCEDURE impFormulasGuardar
(
@pImpuesto_Id varchar(5),
@pRenglon smallint,
@pCuenta_Id varchar(25),
@pDetalle varchar(80),
@pDebeHaberAmbos char(1)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM impFormulas WHERE (impImpuestos = dbo.FuncFKimpImpuestos(@pImpuesto_Id)) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE impFormulas
	SET		Cuenta_Id = dbo.FuncFKconCuentas(@pCuenta_Id),
		Detalle = @pDetalle,
		DebeHaberAmbos = @pDebeHaberAmbos
	WHERE (impImpuestos = dbo.FuncFKimpImpuestos(@pImpuesto_Id)) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO impFormulas
	(
		impImpuestos,
		Renglon,
		Cuenta_Id,
		Detalle,
		DebeHaberAmbos
	)
	VALUES 
	(
		dbo.FuncFKimpImpuestos(@pImpuesto_Id),
		@pRenglon,
		dbo.FuncFKconCuentas(@pCuenta_Id),
		@pDetalle,
		@pDebeHaberAmbos
	)
END 

GO

DROP PROCEDURE impFormulasDatos
GO
CREATE PROCEDURE impFormulasDatos
(
@pImpuesto_Id varchar(5),
@pRenglon smallint
)
AS
SET NOCOUNT ON 

SELECT impImpuestos.Descripcion as DescripcionImpuestos, impFormulas.Renglon, conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuentas,
	impFormulas.Detalle, impFormulas.DebeHaberAmbos
FROM impFormulas 
INNER JOIN impImpuestos  ON (impImpuestos.impImpuestos = impFormulas.impImpuestos)
INNER JOIN conCuentas  ON (conCuentas.conCuentas = impFormulas.Cuenta_Id)
WHERE 
impImpuestos.Impuesto_Id	= @pImpuesto_Id
AND (Renglon = @pRenglon)
 
 RETURN @@Error 

GO

DROP PROCEDURE impFormulasEliminar
GO
CREATE PROCEDURE impFormulasEliminar
(
@pImpuesto_Id varchar(5),
@pRenglon smallint = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM impFormulas 
WHERE (impImpuestos = dbo.FuncFKimpImpuestos(@pImpuesto_Id))
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impImpuestosCobradosAsi.sql*/
DROP PROCEDURE [dbo].[impImpuestosCobradosAsiDatos]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[impImpuestosCobradosAsiDatos]  
(
 @Empresa Int, 
 @FechaDesde DateTime, 
 @FechaHasta DateTime
)
as

SELECT @FechaDesde as FechaDesde, @FechaHasta  FechaHasta

SELECT Distinct genAsiSegmentos.Asiento_Id , 
	genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
	genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N, genAsiSegmentos.Segmento1C,
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C
from venMovImpTraslado INNER JOIN genAsiSegmentos ON
venMovImpTraslado.Asiento_Id = genAsiSegmentos.Asiento_Id
INNER JOIN genSegmentos ON
genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
INNER JOIN conAsientos ON
conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
Where
	conAsientos.Fecha BETWEEN @FechaDesde And @FechaHasta and 
	conAsientos.Anulado = 0 and 
	conAsientos.Empresa_Id = @Empresa
ORDER BY 1

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impJurisdicciones.sql*/
DROP PROCEDURE impJurisdiccionesGuardar
GO
CREATE PROCEDURE impJurisdiccionesGuardar
(
@pJuris_Id varchar(3),
@pJuris_Id_Nuevo varchar(3),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(20),
@pInactivo Sino,
@pUsuario_Id int,
@pPosteado Sino
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM impJurisdicciones WHERE (Juris_Id = @pJuris_Id)))
BEGIN 
	UPDATE impJurisdicciones
	SET		@lIdentidad = impJurisdicciones,
		Juris_Id = @pJuris_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (Juris_Id = @pJuris_Id)
END 
ELSE 
BEGIN 
	INSERT INTO impJurisdicciones
	(
		Juris_Id,
		Empresa_Id,
		Descripcion,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pJuris_Id,
		@pEmpresa_Id,
		@pDescripcion,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE impJurisdiccionesDatos
GO
CREATE PROCEDURE impJurisdiccionesDatos
(
@pJuris_Id varchar(3)
)
AS
SET NOCOUNT ON 

SELECT impJurisdicciones.impJurisdicciones, impJurisdicciones.Juris_Id, impJurisdicciones.Empresa_Id, Cast( Case When impJurisdicciones.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	impJurisdicciones.Descripcion, impJurisdicciones.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
	impJurisdicciones.Posteado
FROM impJurisdicciones 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = impJurisdicciones.Usuario_Id)
WHERE (Juris_Id = @pJuris_Id)
 


  Declare @pidentity bigint= dbo.FuncFKimpJurisdicciones(@pJuris_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'impJurisdicciones'
 RETURN @@Error 

GO

DROP PROCEDURE impJurisdiccionesEliminar
GO
CREATE PROCEDURE impJurisdiccionesEliminar
(
@pJuris_Id varchar(3) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM impJurisdicciones 
WHERE (Juris_Id = @pJuris_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKimpJurisdicciones
GO

CREATE FUNCTION FuncFKimpJurisdicciones
(
@pJuris_Id varchar (3)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = impJurisdicciones FROM impJurisdicciones WHERE 
	Juris_Id = @pJuris_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impLibrosTiposRenglon.sql*/
DROP PROCEDURE impLibrosTiposRenglonGuardar
GO
CREATE PROCEDURE impLibrosTiposRenglonGuardar
(
@pTipoRenglon char(2),
@pDescripcion varchar(35)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM impLibrosTiposRenglon WHERE (TipoRenglon = @pTipoRenglon)))
BEGIN 
	UPDATE impLibrosTiposRenglon
	SET		Descripcion = @pDescripcion
	WHERE (TipoRenglon = @pTipoRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO impLibrosTiposRenglon
	(
		TipoRenglon,
		Descripcion
	)
	VALUES 
	(
		@pTipoRenglon,
		@pDescripcion
	)
END 

GO

DROP PROCEDURE impLibrosTiposRenglonDatos
GO
CREATE PROCEDURE impLibrosTiposRenglonDatos
(
@pTipoRenglon char(2)
)
AS
SET NOCOUNT ON 

SELECT impLibrosTiposRenglon.TipoRenglon, impLibrosTiposRenglon.Descripcion
FROM impLibrosTiposRenglon 
WHERE (TipoRenglon = @pTipoRenglon)
 
 RETURN @@Error 

GO

DROP PROCEDURE impLibrosTiposRenglonEliminar
GO
CREATE PROCEDURE impLibrosTiposRenglonEliminar
(
@pTipoRenglon char(2) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM impLibrosTiposRenglon 
WHERE (TipoRenglon = ISNULL(@pTipoRenglon, TipoRenglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impLiquidacion.sql*/


DROP PROCEDURE impLiquidacionGuardar
GO
CREATE PROCEDURE impLiquidacionGuardar
(
@pconAsientos bigint,
@pImpuesto_Id varchar(5),
@pFechaPago datetime,
@pFechaDesde datetime,
@pFechaHasta datetime,
@pTotalaPagar qMonedaD2,
@pSePaga bit,
@ptesMovimientos bigint = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM impLiquidacion WHERE (conAsientos = @pconAsientos)))
BEGIN 
	UPDATE impLiquidacion
	SET		Impuesto_Id = dbo.FuncFKimpImpuestos( @pImpuesto_Id),
		FechaPago = @pFechaPago,
		FechaDesde = @pFechaDesde,
		FechaHasta = @pFechaHasta,
		TotalaPagar = @pTotalaPagar,
		Saldo = @pTotalaPagar,
		SePaga = @pSePaga,
		tesMovimientos = @ptesMovimientos
	WHERE (conAsientos = @pconAsientos)
END 
ELSE 
BEGIN 
	INSERT INTO impLiquidacion
	(
		conAsientos,
		Impuesto_Id,
		FechaPago,
		FechaDesde,
		FechaHasta,
		TotalaPagar,
		Saldo,
		SePaga,
		tesMovimientos
	)
	VALUES 
	(
		@pconAsientos,
		dbo.FuncFKimpImpuestos( @pImpuesto_Id),
		@pFechaPago,
		@pFechaDesde,
		@pFechaHasta,
		@pTotalaPagar,
		@pTotalaPagar,
		@pSePaga,
		@ptesMovimientos
	)
END 

GO

DROP PROCEDURE impLiquidacionDatos
GO
CREATE PROCEDURE impLiquidacionDatos
(

@pSegmento_Id varchar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 
declare @pconAsientos int
set @pconAsientos=(select Asiento_Id from genAsiSegmentos where
Segmento_Id=dbo.FuncFKgenSegmentos(@pSegmento_Id) and
Segmento1N=@pSegmento1N and Segmento2N=@pSegmento2N AND
Segmento3N=@pSegmento3N and Segmento4N=@pSegmento4N and
Segmento1C=@pSegmento1C and Segmento2C=@pSegmento2C and 
Segmento4C=@pSegmento3C and Segmento4C=@pSegmento4C and
Empresa_Id=@pEmpresa_Id
)
SELECT conAsientos.conAsientos,conAsientos.Fecha,conAsientos.Anulado,conAsientos.Posteado, genSegmentos.Segmento_Id,genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,
genAsiSegmentos.Segmento4N,genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C ,genAsiSegmentos.Segmento4C,
impImpuestos.Impuesto_Id,impImpuestos.Descripcion as DescripcionImpuesto, impLiquidacion.FechaPago, impLiquidacion.FechaDesde,
impLiquidacion.FechaHasta, impLiquidacion.TotalaPagar, impLiquidacion.SePaga, impLiquidacion.tesMovimientos
FROM impLiquidacion inner join impImpuestos on impImpuestos.impImpuestos=impLiquidacion.Impuesto_Id 
inner join genAsiSegmentos on  genAsiSegmentos.Asiento_Id = impLiquidacion.conAsientos 
inner join conAsientos on conAsientos.conAsientos=impLiquidacion.conAsientos
inner join genSegmentos on genSegmentos.genSegmentos=genAsiSegmentos.Segmento_Id

WHERE (conAsientos.conAsientos = @pconAsientos)
 
 SELECT   conMovCont.Renglon, conCuentas.Cuenta_Id,conCuentas.Descripcion,conMovCont.LeyendaLibroMayor as Detalle,
 case when conMovCont.TipoMov =1 then conMovCont.Importe else 0 end as Debe,
 case when conMovCont.TipoMov =2 then conMovCont.Importe else 0 end as Haber
   FROM conMovCont 
 INNER JOIN conCuentas on conMovCont.Cuenta_Id=conCuentas.conCuentas WHERE (conAsientos = @pconAsientos) order by 1
 
 Exec genAtributosGeneralesIdentityDatos @pconAsientos, 'impLiquidacion'

 RETURN @@Error 

GO

DROP PROCEDURE impLiquidacionEliminar
GO
CREATE PROCEDURE impLiquidacionEliminar
(
@pconAsientos bigint = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM impLiquidacion 
WHERE (conAsientos = ISNULL(@pconAsientos, conAsientos))
 
 RETURN @@Error 

GO



DROP PROCEDURE impLiquidacionPagar
GO
CREATE PROCEDURE impLiquidacionPagar
(
@pconAsientos bigint,
@ptesMovimientos bigint = NULL
)
AS
	UPDATE impLiquidacion SET	 tesMovimientos = @ptesMovimientos
		WHERE (conAsientos = @pconAsientos)

GO




DROP PROCEDURE impLiquidacionFechaDatos
GO
CREATE PROCEDURE impLiquidacionFechaDatos
(

@pFechaDesde DateTime, 
@pImpuesto_Id VarChar(5),
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 

SELECT dbo.Segmento(genAsiSegmentos.Segmento_Id,
	genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C,
	genAsiSegmentos.Segmento3C ,genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,
	genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N) as Segmento,
impImpuestos.Impuesto_Id,impImpuestos.Descripcion as DescripcionImpuesto, 
impLiquidacion.FechaDesde, impLiquidacion.FechaHasta, impLiquidacion.TotalaPagar
FROM impLiquidacion inner join impImpuestos on impImpuestos.impImpuestos=impLiquidacion.Impuesto_Id 
inner join genAsiSegmentos on  genAsiSegmentos.Asiento_Id = impLiquidacion.conAsientos 
inner join conAsientos on conAsientos.conAsientos=impLiquidacion.conAsientos
WHERE 
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado= 1 AND 
	conAsientos.Empresa_Id = @pEmpresa_Id and 
	impLiquidacion.FechaDesde= @pFechaDesde and 
	impImpuestos.Impuesto_Id = @pImpuesto_Id
 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impPadron.sql*/
DROP PROCEDURE impPadronGuardar
GO
CREATE PROCEDURE impPadronGuardar
(
@pPadron_Id varchar(10),
@pPadron_Id_Nuevo varchar(10),
@pDescripcion varchar(100),
@pEmpresa_Id int = NULL,
@pTabla varchar(60),
@pPeriodo char(1),
@pColCuit varchar(20),
@pColAnio varchar(20),
@pColPeriodo varchar(20),
@pColBusqueda varchar(20) = null,
@pColBusquedaValor varChar(5) = null,
@pColDevolucion varchar(20),
@pInactivo Sino,
@pPosteado Sino,
@pUsuario_Id int
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM impPadron WHERE (Padron_Id = @pPadron_Id)))
BEGIN 
	UPDATE impPadron
	SET	@lIdentidad = impPadron,
		Padron_Id = @pPadron_Id_Nuevo,
		Descripcion = @pDescripcion,
		Empresa_Id = @pEmpresa_Id,
		Tabla = @pTabla,
		Periodo = @pPeriodo,
		ColCuit = @pColCuit,
		ColAnio = @pColAnio,
		ColPeriodo = @pColPeriodo,
		ColBusqueda = @pColBusqueda,
		ColBusquedaValor = @pColBusquedaValor,
		ColDevolucion = @pColDevolucion,
		Inactivo = @pInactivo,
		Posteado = @pPosteado,
		Usuario_Id = @pUsuario_Id
	WHERE (Padron_Id = @pPadron_Id)
END 
ELSE 
BEGIN 
	INSERT INTO impPadron
	(
		Padron_Id,
		Descripcion,
		Empresa_Id,
		Tabla,
		Periodo,
		ColCuit,
		ColAnio,
		ColPeriodo,
		ColBusqueda,
		ColBusquedaValor,
		ColDevolucion,
		Inactivo,
		Posteado,
		Usuario_Id
	)
	VALUES 
	(
		@pPadron_Id,
		@pDescripcion,
		@pEmpresa_Id,
		@pTabla,
		@pPeriodo,
		@pColCuit,
		@pColAnio,
		@pColPeriodo,
		@pColBusqueda,
		@pColBusquedaValor,
		@pColDevolucion,
		@pInactivo,
		@pPosteado,
		@pUsuario_Id
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE impPadronDatos
GO
CREATE PROCEDURE impPadronDatos
(
@pPadron_Id varchar(10)
)
AS
SET NOCOUNT ON 

SELECT impPadron.impPadron, impPadron.Padron_Id, impPadron.Descripcion, impPadron.Padron_Id Padron_Id_Nueva,
	'' Cuit,	getDate() FechaBusqueda, Cast(0 As Numeric(5, 2)) ValorRetorno,
	impPadron.Empresa_Id, Cast( Case When impPadron.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, impPadron.Tabla, impPadron.Periodo,
	impPadron.ColCuit, impPadron.ColAnio, impPadron.ColPeriodo, impPadron.ColBusqueda, impPadron.ColBusquedaValor, impPadron.ColDevolucion,
	impPadron.Inactivo, impPadron.Posteado, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario
FROM impPadron 
Inner JOIN genUsuarios  ON (genUsuarios.genUsuarios = impPadron.Usuario_Id)
WHERE (Padron_Id = @pPadron_Id)

Declare @pidentity bigint= dbo.FuncFKimpPadron(@pPadron_Id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'impPadron'
RETURN @@Error 

GO

DROP PROCEDURE impPadronEliminar
GO
CREATE PROCEDURE impPadronEliminar
(
@pPadron_Id varchar(10) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM impPadron 
WHERE (Padron_Id = @pPadron_Id)
 
RETURN @@Error 

GO

DROP FUNCTION FuncFKimpPadron
GO

CREATE FUNCTION FuncFKimpPadron
(
@pPadron_Id varchar (10)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = impPadron FROM impPadron WHERE 
	Padron_Id = @pPadron_Id
  RETURN @pIdentity
END

GO

Drop procedure impPadronBuscar
Go
Create procedure impPadronBuscar
(
@pPadron_Id varchar (10),
@pCuit char(14),
@pAnio smallint,
@pPeriodo smallint
)
As

DECLARE @Sql nVarchar(max)
DECLARE @ParmDefinition nVarChar(max)
Declare @lRetorno qMonedaD2

Select @Sql = 'Select @lRetorno = ' + ColDevolucion + ' From ' + Tabla + ' Where ' + ColCuit + '= @ppCuit' + ' And ' + 
ColAnio + ' = @ppAnio And ' + ColPeriodo + ' = @ppPeriodo' + isNull(' And ' + ColBusqueda + ' = ''' + ColBusquedaValor + '''', '')
From impPadron
Where Padron_Id = @pPadron_Id

--Print @Sql

Set @ParmDefinition = N'@ppCuit char(14), @ppAnio smallint, @ppPeriodo smallint, @lRetorno qMonedaD2 OUTPUT';  

EXEC sp_executesql @Sql, @ParmDefinition, @ppCuit = @pCuit, @ppAnio = @pAnio, @ppPeriodo = @pPeriodo, @lRetorno = @lRetorno OUTPUT

Select IsNull(@lRetorno, 0)
Go


Drop procedure impPadronEstaEn
Go
Create procedure impPadronEstaEn
(
@pPadron_Id varchar (10),
@pCuit char(14),
@pAnio smallint,
@pPeriodo smallint
)
As

DECLARE @Sql nVarchar(max)
DECLARE @ParmDefinition nVarChar(max)
Declare @lRetorno Decimal

Select @Sql = 'Select @lRetorno = 1 From ' + Tabla + ' Where ' + ColCuit + '= @ppCuit' + ' And ' + 
ColAnio + ' = @ppAnio And ' + ColPeriodo + ' = @ppPeriodo' + isNull(' And ' + ColBusqueda + ' = ''' + ColBusquedaValor + '''', '')
From impPadron
Where Padron_Id = @pPadron_Id

--Print @Sql

Set @ParmDefinition = N'@ppCuit char(14), @ppAnio smallint, @ppPeriodo smallint, @lRetorno qMonedaD2 OUTPUT';  

EXEC sp_executesql @Sql, @ParmDefinition, @ppCuit = @pCuit, @ppAnio = @pAnio, @ppPeriodo = @pPeriodo, @lRetorno = @lRetorno OUTPUT

Select Cast(IsNull(@lRetorno, 0) As Int)
Go


Drop procedure impARBAImportar
Go
CREATE PROCEDURE impARBAImportar
(
@pTxt VARCHAR(200),    
@pAnio SMALLINT,
@pMes SMALLINT,
@pReg CHAR(1)  
)    
AS    
SET NOCOUNT ON    
IF EXISTS (SELECT * FROM tempdb.dbo.sysobjects WHERE name = '#tmpRentas0')    
	DROP TABLE #tmpRentas0    

CREATE TABLE #tmpRentas0 
(    
Reg CHAR(1),    
Col1 CHAR(8),    
VigDesde CHAR(8),    
VigHasta CHAR(8),    
Cuit CHAR(11),    
Col2 CHAR(1),    
Col3 CHAR(1),    
Col4 CHAR(1),    
Alic CHAR(4),    
Grupo CHAR(2),  
Col5 VARCHAR(50)
)

Declare @SQL varChar(200)    
Set @SQL = 'BULK INSERT #tmpRentas0 FROM ''' + @pTxt + ''' WITH (FIELDTERMINATOR = '';'', ROWTERMINATOR = ''\n'') '    
Exec (@SQL)    

--Select Top 10 *, cast(substring(VigDesde, 3,2) AS SMALLINT), cast(substring(VigDesde, 5,4) AS SMALLINT) 
--From #tmpRentas0 
--Where cast(substring(VigDesde, 3,2) AS SMALLINT) = @pMes and cast(substring(VigDesde, 5,4) AS SMALLINT) = @pAnio

Delete From impArbaTxt Where Mes = @pMes AND Anio = @pAnio AND Regimen = @pReg

Insert Into impArbaTxt (Regimen, Anio, Mes, CUIT, FechaVigDesde, FechaVigHasta, Alicuota, Grupo)    
SELECT Reg, @pAnio, @pMes,     
substring(Cuit, 1, 2) + '-' + substring(Cuit, 3, 8) + '-' + substring(Cuit, 11, 1),     
substring(VigDesde, 5,4) + substring(VigDesde, 3,2) + substring(VigDesde, 1,2),    
substring(VigHasta, 5,4) + substring(VigHasta, 3,2) + substring(VigHasta, 1,2),    
cast(replace(Alic, ',', '.') AS NUMERIC(5,2)),    
cast(Grupo AS SMALLINT)  
From #tmpRentas0     
Where cast(substring(VigDesde, 3,2) AS SMALLINT) = @pMes and     
cast(substring(VigDesde, 5,4) AS SMALLINT) = @pAnio    
Drop Table #tmpRentas0   
GO

--------------------------------------------------------------------------------
Drop procedure impRentasCapExentosImportar
Go

CREATE PROCEDURE impRentasCapExentosImportar
(
@pTxt VARCHAR(200),    
@pAnio SMALLINT,
@pTrim SMALLINT
)    
AS    
SET NOCOUNT ON    
IF EXISTS (SELECT * FROM tempdb.dbo.sysobjects WHERE name = '#tmpRentas0')    
	DROP TABLE #tmpRentas0

CREATE TABLE #tmpRentas0 (
Col1 CHAR(8),    
VigDesde CHAR(8),    
VigHasta CHAR(8),    
Cuit CHAR(11), 
Col2 CHAR(1),    
Col3 CHAR(1),    
Col4 CHAR(1),    
AlicP CHAR(4),    
AlicR CHAR(4),    
GrupoP CHAR(2),
GrupoR CHAR(2),
Col5 VARCHAR(200)
)    
DECLARE @SQL VARCHAR(200)    
SET @SQL = 'BULK INSERT #tmpRentas0 FROM ''' + @pTxt + ''' WITH (FIELDTERMINATOR = '';'', ROWTERMINATOR = ''\n'') '    
EXEC (@SQL)    

--SELECT * FROM #tmpRentas0  

DELETE FROM ImpRentasCapExentosTxt WHERE Trimestre = @pTrim AND Anio = @pAnio 

INSERT INTO ImpRentasCapExentosTxt     
(Anio, Trimestre, CUIT, FechaVigDesde, FechaVigHasta, AlicuotaPer, AlicuotaRet, GrupoPer, GrupoRet)    
SELECT @pAnio, @pTrim,     
substring(Cuit, 1, 2) + '-' + substring(Cuit, 3, 8) + '-' + substring(Cuit, 11, 1),     
substring(VigDesde, 5,4) + substring(VigDesde, 3,2) + substring(VigDesde, 1,2),    
substring(VigHasta, 5,4) + substring(VigHasta, 3,2) + substring(VigHasta, 1,2),    
cast(replace(AlicP, ',', '.') AS NUMERIC(5,2)),
cast(replace(AlicR, ',', '.') AS NUMERIC(5,2)),
cast(GrupoP AS SMALLINT),
cast(GrupoR AS SMALLINT)
FROM #tmpRentas0     
WHERE (Floor((cast(substring(VigDesde,3,2) AS SMALLINT)-1)/3)+1) = @pTrim and     
cast(substring(VigDesde, 5,4) AS SMALLINT) = @pAnio    
DROP TABLE #tmpRentas0
Go



Drop procedure impRentasCapGralImportar
Go

CREATE PROCEDURE impRentasCapGralImportar
(
@pTxt VARCHAR(200),    
@pAnio SMALLINT,
@pMes SMALLINT
)    
AS    
SET NOCOUNT ON    
IF EXISTS (SELECT * FROM tempdb.dbo.sysobjects WHERE name = '#tmpRentas0')    
	DROP TABLE #tmpRentas0

CREATE TABLE #tmpRentas0
(
Col1 CHAR(8),    
VigDesde CHAR(8),    
VigHasta CHAR(8),    
Cuit CHAR(11), 
Tipo CHAR(1),    
Col3 CHAR(1),    
Col4 CHAR(1),    
AlicP CHAR(4),    
AlicR CHAR(4),    
GrupoP CHAR(2),
GrupoR CHAR(2),
Col5 VARCHAR(200)
)    

DECLARE @SQL VARCHAR(200)    
SET @SQL = 'BULK INSERT #tmpRentas0 FROM ''' + @pTxt + ''' WITH (FIELDTERMINATOR = '';'', ROWTERMINATOR = ''\n'') '    
EXEC (@SQL)    

--SELECT * FROM #tmpRentas0  

DELETE FROM ImpRentasCapGralTxt WHERE Mes = @pMes AND Anio = @pAnio 
INSERT INTO ImpRentasCapGralTxt     
(Anio, Mes, CUIT, FechaVigDesde, FechaVigHasta,Tipo,AlicuotaPer, AlicuotaRet, GrupoPer, GrupoRet)    
SELECT @pAnio, @pMes,     
substring(Cuit, 1, 2) + '-' + substring(Cuit, 3, 8) + '-' + substring(Cuit, 11, 1),     
substring(VigDesde, 5,4) + substring(VigDesde, 3,2) + substring(VigDesde, 1,2),    
substring(VigHasta, 5,4) + substring(VigHasta, 3,2) + substring(VigHasta, 1,2),    
substring(Tipo,1,1),   
cast(replace(AlicP, ',', '.') AS NUMERIC(5,2)),
cast(replace(AlicR, ',', '.') AS NUMERIC(5,2)),
cast(GrupoP AS SMALLINT),
cast(GrupoR AS SMALLINT)
FROM #tmpRentas0     
WHERE cast(substring(VigDesde, 3,2) AS SMALLINT) = @pMes and     
cast(substring(VigDesde, 5,4) AS SMALLINT) = @pAnio    
DROP TABLE #tmpRentas0
Go


Drop procedure impRentasCapMagSupImportar
Go

Create procedure impRentasCapMagSupImportar
(    
@pTxt VARCHAR(200),    
@pAnio SMALLINT,
@pMes SMALLINT
)    
AS    
SET NOCOUNT ON    
IF EXISTS (SELECT * FROM tempdb.dbo.sysobjects WHERE name = '#tmpRentas0')    
	DROP TABLE #tmpRentas0    
CREATE TABLE #tmpRentas0 
(
Col1 CHAR(8),    
VigDesde CHAR(8),    
VigHasta CHAR(8),    
Cuit CHAR(11), 
Col2 CHAR(1),    
Col3 CHAR(1),    
Col4 CHAR(1),    
AlicP CHAR(4),    
AlicR CHAR(4),    
GrupoP CHAR(2),
GrupoR CHAR(2),
Col5 VARCHAR(200)
)    
DECLARE @SQL VARCHAR(200)    
SET @SQL = 'BULK INSERT #tmpRentas0 FROM ''' + @pTxt + ''' WITH (FIELDTERMINATOR = '';'', ROWTERMINATOR = ''\n'') '    
EXEC (@SQL)    

--SELECT * FROM #tmpRentas0  

DELETE FROM ImpRentasCapMagSupTxt WHERE Mes = @pMes AND Anio = @pAnio 

INSERT INTO ImpRentasCapMagSupTxt     
(Anio, Mes, CUIT, FechaVigDesde, FechaVigHasta, AlicuotaPer, AlicuotaRet, GrupoPer, GrupoRet)    
SELECT @pAnio, @pMes,     
substring(Cuit, 1, 2) + '-' + substring(Cuit, 3, 8) + '-' + substring(Cuit, 11, 1),     
substring(VigDesde, 5,4) + substring(VigDesde, 3,2) + substring(VigDesde, 1,2),    
substring(VigHasta, 5,4) + substring(VigHasta, 3,2) + substring(VigHasta, 1,2),    
cast(replace(AlicP, ',', '.') AS NUMERIC(5,2)),
cast(replace(AlicR, ',', '.') AS NUMERIC(5,2)),
cast(GrupoP AS SMALLINT),
cast(GrupoR AS SMALLINT)
FROM #tmpRentas0     
WHERE cast(substring(VigDesde, 3,2) AS SMALLINT) = @pMes and     
cast(substring(VigDesde, 5,4) AS SMALLINT) = @pAnio    
DROP TABLE #tmpRentas0
GO


Drop procedure impRentasCapRiesgoImportar
Go
Create procedure impRentasCapRiesgoImportar
(    
@pTxt VARCHAR(200),    
@pAnio SMALLINT,
@pTrim SMALLINT
)    
AS    
SET NOCOUNT ON    
IF EXISTS (SELECT * FROM tempdb.dbo.sysobjects WHERE name = '#tmpRentas0')    
	DROP TABLE #tmpRentas0

Create table #tmpRentas0
(
Col1 CHAR(8),    
VigDesde CHAR(8),    
VigHasta CHAR(8),    
Cuit CHAR(11), 
Col2 CHAR(1),    
Col3 CHAR(1),    
Col4 CHAR(1),    
AlicP CHAR(4),    
AlicR CHAR(4),    
GrupoP CHAR(2),
GrupoR CHAR(2),
Col5 VARCHAR(200)
)    
DECLARE @SQL VARCHAR(200)    
SET @SQL = 'BULK INSERT #tmpRentas0 FROM ''' + @pTxt + ''' WITH (FIELDTERMINATOR = '';'', ROWTERMINATOR = ''\n'') '    
EXEC (@SQL)    

--SELECT * FROM #tmpRentas0

DELETE FROM impRentasCapRiesgoTxt WHERE Trimestre = @pTrim AND Anio = @pAnio 

INSERT INTO impRentasCapRiesgoTxt     
(Anio, Trimestre, CUIT, FechaVigDesde, FechaVigHasta, AlicuotaPer, AlicuotaRet, GrupoPer, GrupoRet)    
SELECT @pAnio, @pTrim,     
substring(Cuit, 1, 2) + '-' + substring(Cuit, 3, 8) + '-' + substring(Cuit, 11, 1),     
substring(VigDesde, 5,4) + substring(VigDesde, 3,2) + substring(VigDesde, 1,2),    
substring(VigHasta, 5,4) + substring(VigHasta, 3,2) + substring(VigHasta, 1,2),    
cast(replace(AlicP, ',', '.') AS NUMERIC(5,2)),
cast(replace(AlicR, ',', '.') AS NUMERIC(5,2)),
cast(GrupoP AS SMALLINT),
cast(GrupoR AS SMALLINT)
FROM #tmpRentas0     
WHERE (Floor((cast(substring(VigDesde,3,2) AS SMALLINT)-1)/3)+1) = @pTrim and     
cast(substring(VigDesde, 5,4) AS SMALLINT) = @pAnio    
DROP TABLE #tmpRentas0
Go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impRetCFDIArrenda.sql*/
DROP PROCEDURE impRetCFDIArrendaGuardar
GO
CREATE PROCEDURE impRetCFDIArrendaGuardar
(
@pimpRetencionesCFDI int,
@pPagProvEfecPorFiduc numeric(18,4),
@pRendimFideicom numeric(18,4),
@pDeduccCorresp numeric(18,4),
@pMontTotRet numeric(18,4),
@pMontResFiscDistFibras numeric(18,4),
@pMontOtrosConceptDistr numeric(18,4),
@pDescrMontOtrosConceptDistr varchar(200)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM impRetCFDIArrenda WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)))
BEGIN 
	UPDATE impRetCFDIArrenda
	SET		PagProvEfecPorFiduc = @pPagProvEfecPorFiduc,
		RendimFideicom = @pRendimFideicom,
		DeduccCorresp = @pDeduccCorresp,
		MontTotRet = @pMontTotRet,
		MontResFiscDistFibras = @pMontResFiscDistFibras,
		MontOtrosConceptDistr = @pMontOtrosConceptDistr,
		DescrMontOtrosConceptDistr = @pDescrMontOtrosConceptDistr
	WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
END 
ELSE 
BEGIN 
	INSERT INTO impRetCFDIArrenda
	(
		impRetencionesCFDI,
		PagProvEfecPorFiduc,
		RendimFideicom,
		DeduccCorresp,
		MontTotRet,
		MontResFiscDistFibras,
		MontOtrosConceptDistr,
		DescrMontOtrosConceptDistr
	)
	VALUES 
	(
		@pimpRetencionesCFDI,
		@pPagProvEfecPorFiduc,
		@pRendimFideicom,
		@pDeduccCorresp,
		@pMontTotRet,
		@pMontResFiscDistFibras,
		@pMontOtrosConceptDistr,
		@pDescrMontOtrosConceptDistr
	)
END 

GO

DROP PROCEDURE impRetCFDIArrendaDatos
GO
CREATE PROCEDURE impRetCFDIArrendaDatos
(
@pimpRetencionesCFDI int
)
AS
SET NOCOUNT ON 

SELECT impRetCFDIArrenda.impRetencionesCFDI, impRetCFDIArrenda.PagProvEfecPorFiduc, impRetCFDIArrenda.RendimFideicom,
	impRetCFDIArrenda.DeduccCorresp, impRetCFDIArrenda.MontTotRet, impRetCFDIArrenda.MontResFiscDistFibras, impRetCFDIArrenda.MontOtrosConceptDistr,
	impRetCFDIArrenda.DescrMontOtrosConceptDistr
FROM impRetCFDIArrenda 
WHERE (impRetCFDIArrenda.impRetencionesCFDI = @pimpRetencionesCFDI)
 
 RETURN @@Error 

GO

DROP PROCEDURE impRetCFDIArrendaEliminar
GO
CREATE PROCEDURE impRetCFDIArrendaEliminar
(
@pimpRetencionesCFDI int
)
AS
SET NOCOUNT ON 

DELETE FROM impRetCFDIArrenda 
WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impRetCFDIDetalle.sql*/
DROP PROCEDURE impRetCFDIDetalleGuardar
GO
CREATE PROCEDURE impRetCFDIDetalleGuardar
(
@pimpRetencionesCFDI int,
@pRenglon int,
@pBaseRet numeric(18,4),
@pTipoImpuesto varchar(2),
@pmontoRet numeric(18,4),
@pTipoPagoRet varchar(17)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM impRetCFDIDetalle WHERE (impRetencionesCFDI = @pimpRetencionesCFDI) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE impRetCFDIDetalle
	SET		BaseRet = @pBaseRet,
		TipoImpuesto = @pTipoImpuesto,
		montoRet = @pmontoRet,
		TipoPagoRet = @pTipoPagoRet
	WHERE (impRetencionesCFDI = @pimpRetencionesCFDI) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO impRetCFDIDetalle
	(
		impRetencionesCFDI,
		Renglon,
		BaseRet,
		TipoImpuesto,
		montoRet,
		TipoPagoRet
	)
	VALUES 
	(
		@pimpRetencionesCFDI,
		@pRenglon,
		@pBaseRet,
		@pTipoImpuesto,
		@pmontoRet,
		@pTipoPagoRet
	)
END 

GO

DROP PROCEDURE impRetCFDIDetalleDatos
GO
CREATE PROCEDURE impRetCFDIDetalleDatos
(
@pimpRetencionesCFDI int,
@pRenglon int=NULL
)
AS
SET NOCOUNT ON 

SELECT impRetCFDIDetalle.impRetencionesCFDI,  impRetCFDIDetalle.Renglon, impRetCFDIDetalle.BaseRet,
	impRetCFDIDetalle.TipoImpuesto, impRetCFDIDetalle.montoRet, impRetCFDIDetalle.TipoPagoRet
FROM impRetCFDIDetalle 
WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
 RETURN @@Error 

GO

DROP PROCEDURE impRetCFDIDetalleEliminar
GO
CREATE PROCEDURE impRetCFDIDetalleEliminar
(
@pimpRetencionesCFDI int,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM impRetCFDIDetalle 
WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impRetCFDIDividendos.sql*/
DROP PROCEDURE impRetCFDIDividendosGuardar
GO
CREATE PROCEDURE impRetCFDIDividendosGuardar
(
@pimpRetencionesCFDI int,
@pCveTipDivOUtil varchar(2),
@pMontISRAcredRetMexico numeric(18,4),
@pMontISRAcredRetExtranjero numeric(18,4),
@pMontRetExtDivExt numeric(18,4),
@pTipoSocDistrDiv char(20),
@pMontISRAcredNal numeric(18,4),
@pMontDivAcumNal numeric(18,4),
@pMontDivAcumExt numeric(18,4),
@pProporcionRem numeric(10,6)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM impRetCFDIDividendos WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)))
BEGIN 
	UPDATE impRetCFDIDividendos
	SET		CveTipDivOUtil = @pCveTipDivOUtil,
		MontISRAcredRetMexico = @pMontISRAcredRetMexico,
		MontISRAcredRetExtranjero = @pMontISRAcredRetExtranjero,
		MontRetExtDivExt = @pMontRetExtDivExt,
		TipoSocDistrDiv = @pTipoSocDistrDiv,
		MontISRAcredNal = @pMontISRAcredNal,
		MontDivAcumNal = @pMontDivAcumNal,
		MontDivAcumExt = @pMontDivAcumExt,
		ProporcionRem = @pProporcionRem
	WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
END 
ELSE 
BEGIN 
	INSERT INTO impRetCFDIDividendos
	(
		impRetencionesCFDI,
		CveTipDivOUtil,
		MontISRAcredRetMexico,
		MontISRAcredRetExtranjero,
		MontRetExtDivExt,
		TipoSocDistrDiv,
		MontISRAcredNal,
		MontDivAcumNal,
		MontDivAcumExt,
		ProporcionRem
	)
	VALUES 
	(
		@pimpRetencionesCFDI,
		@pCveTipDivOUtil,
		@pMontISRAcredRetMexico,
		@pMontISRAcredRetExtranjero,
		@pMontRetExtDivExt,
		@pTipoSocDistrDiv,
		@pMontISRAcredNal,
		@pMontDivAcumNal,
		@pMontDivAcumExt,
		@pProporcionRem
	)
END 

GO

DROP PROCEDURE impRetCFDIDividendosDatos
GO
CREATE PROCEDURE impRetCFDIDividendosDatos
(
@pimpRetencionesCFDI int
)
AS
SET NOCOUNT ON 

SELECT impRetCFDIDividendos.impRetencionesCFDI, impRetCFDIDividendos.CveTipDivOUtil, impRetCFDIDividendos.MontISRAcredRetMexico,
	impRetCFDIDividendos.MontISRAcredRetExtranjero, impRetCFDIDividendos.MontRetExtDivExt, impRetCFDIDividendos.TipoSocDistrDiv, impRetCFDIDividendos.MontISRAcredNal,
	impRetCFDIDividendos.MontDivAcumNal, impRetCFDIDividendos.MontDivAcumExt, impRetCFDIDividendos.ProporcionRem
FROM impRetCFDIDividendos 
WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
 
 RETURN @@Error 

GO

DROP PROCEDURE impRetCFDIDividendosEliminar
GO
CREATE PROCEDURE impRetCFDIDividendosEliminar
(
@pimpRetencionesCFDI int
)
AS
SET NOCOUNT ON 

DELETE FROM impRetCFDIDividendos 
WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impRetCFDIEnajAccion.sql*/
DROP PROCEDURE impRetCFDIEnajAccionGuardar
GO
CREATE PROCEDURE impRetCFDIEnajAccionGuardar
(
@pimpRetencionesCFDI int,
@pContratoIntermediacion varchar(300),
@pGanancia numeric(18,4),
@pPerdida numeric(18,4)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM impRetCFDIEnajAccion WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)))
BEGIN 
	UPDATE impRetCFDIEnajAccion
	SET		ContratoIntermediacion = @pContratoIntermediacion,
		Ganancia = @pGanancia,
		Perdida = @pPerdida
	WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
END 
ELSE 
BEGIN 
	INSERT INTO impRetCFDIEnajAccion
	(
		impRetencionesCFDI,
		ContratoIntermediacion,
		Ganancia,
		Perdida
	)
	VALUES 
	(
		@pimpRetencionesCFDI,
		@pContratoIntermediacion,
		@pGanancia,
		@pPerdida
	)
END 

GO

DROP PROCEDURE impRetCFDIEnajAccionDatos
GO
CREATE PROCEDURE impRetCFDIEnajAccionDatos
(
@pimpRetencionesCFDI int
)
AS
SET NOCOUNT ON 

SELECT impRetCFDIEnajAccion.impRetencionesCFDI, impRetCFDIEnajAccion.ContratoIntermediacion, impRetCFDIEnajAccion.Ganancia,
	impRetCFDIEnajAccion.Perdida
FROM impRetCFDIEnajAccion 
WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
 
 RETURN @@Error 

GO

DROP PROCEDURE impRetCFDIEnajAccionEliminar
GO
CREATE PROCEDURE impRetCFDIEnajAccionEliminar
(
@pimpRetencionesCFDI int
)
AS
SET NOCOUNT ON 

DELETE FROM impRetCFDIEnajAccion 
WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impRetCFDIFiedeEmpr.sql*/
DROP PROCEDURE impRetCFDIFiedeEmprGuardar
GO
CREATE PROCEDURE impRetCFDIFiedeEmprGuardar
(
@pimpRetencionesCFDI int,
@pMontTotEntradasPeriodo numeric(18,4),
@pPartPropAcumDelFideicom numeric(18,4),
@pPropDelMontTot numeric(10,6),
@pConcepto varchar(100),
@pMontTotEgresPeriodo numeric(18,4),
@pPartPropDelFideicom numeric(18,4),
@pPropDelMontTotE numeric(10,6),
@pConseptoS varchar(100),
@pMontRetRelPagFideic numeric(18,4),
@pDescRetRelPagFideic varchar(100)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM impRetCFDIFiedeEmpr WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)))
BEGIN 
	UPDATE impRetCFDIFiedeEmpr
	SET		MontTotEntradasPeriodo = @pMontTotEntradasPeriodo,
		PartPropAcumDelFideicom = @pPartPropAcumDelFideicom,
		PropDelMontTot = @pPropDelMontTot,
		Concepto = @pConcepto,
		MontTotEgresPeriodo = @pMontTotEgresPeriodo,
		PartPropDelFideicom = @pPartPropDelFideicom,
		PropDelMontTotE = @pPropDelMontTotE,
		ConseptoS = @pConseptoS,
		MontRetRelPagFideic = @pMontRetRelPagFideic,
		DescRetRelPagFideic = @pDescRetRelPagFideic
	WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
END 
ELSE 
BEGIN 
	INSERT INTO impRetCFDIFiedeEmpr
	(
		impRetencionesCFDI,
		MontTotEntradasPeriodo,
		PartPropAcumDelFideicom,
		PropDelMontTot,
		Concepto,
		MontTotEgresPeriodo,
		PartPropDelFideicom,
		PropDelMontTotE,
		ConseptoS,
		MontRetRelPagFideic,
		DescRetRelPagFideic
	)
	VALUES 
	(
		@pimpRetencionesCFDI,
		@pMontTotEntradasPeriodo,
		@pPartPropAcumDelFideicom,
		@pPropDelMontTot,
		@pConcepto,
		@pMontTotEgresPeriodo,
		@pPartPropDelFideicom,
		@pPropDelMontTotE,
		@pConseptoS,
		@pMontRetRelPagFideic,
		@pDescRetRelPagFideic
	)
END 

GO

DROP PROCEDURE impRetCFDIFiedeEmprDatos
GO
CREATE PROCEDURE impRetCFDIFiedeEmprDatos
(
@pimpRetencionesCFDI int
)
AS
SET NOCOUNT ON 

SELECT impRetCFDIFiedeEmpr.impRetencionesCFDI, impRetCFDIFiedeEmpr.MontTotEntradasPeriodo, impRetCFDIFiedeEmpr.PartPropAcumDelFideicom,
	impRetCFDIFiedeEmpr.PropDelMontTot, impRetCFDIFiedeEmpr.Concepto, impRetCFDIFiedeEmpr.MontTotEgresPeriodo, impRetCFDIFiedeEmpr.PartPropDelFideicom,
	impRetCFDIFiedeEmpr.PropDelMontTotE, impRetCFDIFiedeEmpr.ConseptoS, impRetCFDIFiedeEmpr.MontRetRelPagFideic, impRetCFDIFiedeEmpr.DescRetRelPagFideic
FROM impRetCFDIFiedeEmpr 
WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
 
 RETURN @@Error 

GO

DROP PROCEDURE impRetCFDIFiedeEmprEliminar
GO
CREATE PROCEDURE impRetCFDIFiedeEmprEliminar
(
@pimpRetencionesCFDI int
)
AS
SET NOCOUNT ON 

DELETE FROM impRetCFDIFiedeEmpr 
WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impRetCFDIIntereses.sql*/
DROP PROCEDURE impRetCFDIInteresesGuardar
GO
CREATE PROCEDURE impRetCFDIInteresesGuardar
(
@pimpRetencionesCFDI int,
@pSistFinanciero varchar(2),
@pRetiroAORESRetInt varchar(2),
@pOperFinancDerivad varchar(2),
@pMontIntNominal numeric(18,4),
@pMontIntReal numeric(18,4),
@pPerdida numeric(18,4)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM impRetCFDIIntereses WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)))
BEGIN 
	UPDATE impRetCFDIIntereses
	SET		impRetencionesCFDI=@pimpRetencionesCFDI,
			SistFinanciero = @pSistFinanciero ,
			RetiroAORESRetInt =@pRetiroAORESRetInt, 
			OperFinancDerivad=@pOperFinancDerivad,
			MontIntNominal= @pMontIntNominal ,
			MontIntReal =@pMontIntReal ,
			Perdida =@pPerdida 
	WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
END 
ELSE 
BEGIN 
	INSERT INTO impRetCFDIIntereses
	(
			impRetencionesCFDI,
			SistFinanciero,
			RetiroAORESRetInt, 
			OperFinancDerivad,
			MontIntNominal ,
			MontIntReal ,
			Perdida
	)
	VALUES 
	(
			@pimpRetencionesCFDI,
			@pSistFinanciero ,
			@pRetiroAORESRetInt, 
			@pOperFinancDerivad,
			@pMontIntNominal ,
			@pMontIntReal ,
			@pPerdida 
	)
END 

GO

DROP PROCEDURE impRetCFDIInteresesDatos
GO

CREATE PROCEDURE impRetCFDIInteresesDatos
(
@pimpRetencionesCFDI int
)
AS
SET NOCOUNT ON 

SELECT	impRetencionesCFDI,	SistFinanciero,	RetiroAORESRetInt,OperFinancDerivad,MontIntNominal ,MontIntReal ,Perdida
FROM impRetCFDIIntereses 
WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
 
 RETURN @@Error 

GO

DROP PROCEDURE impRetCFDIInteresesEliminar
GO
CREATE PROCEDURE impRetCFDIInteresesEliminar
(
@pimpRetencionesCFDI int
)
AS
SET NOCOUNT ON 

DELETE FROM impRetCFDIIntereses 
WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impRetCFDIOperConDeriv.sql*/
DROP PROCEDURE impRetCFDIOperConDerivGuardar
GO
CREATE PROCEDURE impRetCFDIOperConDerivGuardar
(
@pimpRetencionesCFDI int,
@pMontGanAcum numeric(18,4),
@pMontPerdDed numeric(18,4)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM impRetCFDIOperConDeriv WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)))
BEGIN 
	UPDATE impRetCFDIOperConDeriv
	SET		MontGanAcum = @pMontGanAcum,
		MontPerdDed = @pMontPerdDed
	WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
END 
ELSE 
BEGIN 
	INSERT INTO impRetCFDIOperConDeriv
	(
		impRetencionesCFDI,
		MontGanAcum,
		MontPerdDed
	)
	VALUES 
	(
		@pimpRetencionesCFDI,
		@pMontGanAcum,
		@pMontPerdDed
	)
END 

GO

DROP PROCEDURE impRetCFDIOperConDerivDatos
GO
CREATE PROCEDURE impRetCFDIOperConDerivDatos
(
@pimpRetencionesCFDI int
)
AS
SET NOCOUNT ON 

SELECT impRetCFDIOperConDeriv.impRetencionesCFDI, impRetCFDIOperConDeriv.MontGanAcum, impRetCFDIOperConDeriv.MontPerdDed
FROM impRetCFDIOperConDeriv 
WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
 
 RETURN @@Error 

GO

DROP PROCEDURE impRetCFDIOperConDerivEliminar
GO
CREATE PROCEDURE impRetCFDIOperConDerivEliminar
(
@pimpRetencionesCFDI int
)
AS
SET NOCOUNT ON 

DELETE FROM impRetCFDIOperConDeriv 
WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impRetCFDIPagosExtr.sql*/
DROP PROCEDURE impRetCFDIPagosExtrGuardar
GO
CREATE PROCEDURE impRetCFDIPagosExtrGuardar
(
@pimpRetencionesCFDI int,
@pEsBenefEfectDelCobro varchar(2),
@pPais_id int = NULL,
@pConceptoPago varchar(1),
@pDescripcionConcepto varchar(max),
@pBeneRFC varchar(14) = NULL,
@pBeneCURP varchar(18) = NULL,
@pNomDenRazSocB varchar(300) = NULL,
@pBeneConceptoPago varchar(1) = NULL,
@pBeneDescripcionConcepto varchar(max) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM impRetCFDIPagosExtr WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)))
BEGIN 
	UPDATE impRetCFDIPagosExtr
	SET		EsBenefEfectDelCobro = @pEsBenefEfectDelCobro,
		Pais_id = dbo.FuncFKgenPaises(@pPais_id),
		ConceptoPago = @pConceptoPago,
		DescripcionConcepto = @pDescripcionConcepto,
		BeneRFC = @pBeneRFC,
		BeneCURP = @pBeneCURP,
		NomDenRazSocB = @pNomDenRazSocB,
		BeneConceptoPago = @pBeneConceptoPago,
		BeneDescripcionConcepto = @pBeneDescripcionConcepto
	WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
END 
ELSE 
BEGIN 
	INSERT INTO impRetCFDIPagosExtr
	(
		impRetencionesCFDI,
		EsBenefEfectDelCobro,
		Pais_id,
		ConceptoPago,
		DescripcionConcepto,
		BeneRFC,
		BeneCURP,
		NomDenRazSocB,
		BeneConceptoPago,
		BeneDescripcionConcepto
	)
	VALUES 
	(
		@pimpRetencionesCFDI,
		@pEsBenefEfectDelCobro,
		dbo.FuncFKgenPaises(@pPais_id),
		@pConceptoPago,
		@pDescripcionConcepto,
		@pBeneRFC,
		@pBeneCURP,
		@pNomDenRazSocB,
		@pBeneConceptoPago,
		@pBeneDescripcionConcepto
	)
END 

GO

DROP PROCEDURE impRetCFDIPagosExtrDatos
GO
CREATE PROCEDURE impRetCFDIPagosExtrDatos
(
@pimpRetencionesCFDI int
)
AS
SET NOCOUNT ON 

SELECT impRetCFDIPagosExtr.impRetencionesCFDI, impRetCFDIPagosExtr.EsBenefEfectDelCobro, genPaises.Pais_id,
	impRetCFDIPagosExtr.ConceptoPago, impRetCFDIPagosExtr.DescripcionConcepto, impRetCFDIPagosExtr.BeneRFC, impRetCFDIPagosExtr.BeneCURP,
	impRetCFDIPagosExtr.NomDenRazSocB, impRetCFDIPagosExtr.BeneConceptoPago, impRetCFDIPagosExtr.BeneDescripcionConcepto
FROM impRetCFDIPagosExtr left join genPaises ON
	genPaises.genPaises = impRetCFDIPagosExtr.Pais_id
	
WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
 
 RETURN @@Error 

GO

DROP PROCEDURE impRetCFDIPagosExtrEliminar
GO
CREATE PROCEDURE impRetCFDIPagosExtrEliminar
(
@pimpRetencionesCFDI int
)
AS
SET NOCOUNT ON 

DELETE FROM impRetCFDIPagosExtr 
WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impRetCFDIPlanesRet.sql*/
DROP PROCEDURE impRetCFDIPlanesRetGuardar
GO
CREATE PROCEDURE impRetCFDIPlanesRetGuardar
(
@pimpRetencionesCFDI int,
@pSistemaFinanc char(2),
@pMontTotAportAnioInmAnterior numeric(18,4),
@pMontIntRealesDevengAniooInmAnt numeric(18,4),
@pHuboRetirosAnioInmAntPer char(2),
@pMontTotRetiradoAnioInmAntPer numeric(18,4),
@pMontTotExentRetiradoAnioInmAnt numeric(18,4),
@pMontTotExedenteAnioInmAnt numeric(18,4),
@pHuboRetirosAnioInmAnt char(2),
@pMontTotRetiradoAnioInmAnt numeric(18,4)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM impRetCFDIPlanesRet WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)))
BEGIN 
	UPDATE impRetCFDIPlanesRet
	SET		SistemaFinanc = @pSistemaFinanc,
		MontTotAportAnioInmAnterior = @pMontTotAportAnioInmAnterior,
		MontIntRealesDevengAniooInmAnt = @pMontIntRealesDevengAniooInmAnt,
		HuboRetirosAnioInmAntPer = @pHuboRetirosAnioInmAntPer,
		MontTotRetiradoAnioInmAntPer = @pMontTotRetiradoAnioInmAntPer,
		MontTotExentRetiradoAnioInmAnt = @pMontTotExentRetiradoAnioInmAnt,
		MontTotExedenteAnioInmAnt = @pMontTotExedenteAnioInmAnt,
		HuboRetirosAnioInmAnt = @pHuboRetirosAnioInmAnt,
		MontTotRetiradoAnioInmAnt = @pMontTotRetiradoAnioInmAnt
	WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
END 
ELSE 
BEGIN 
	INSERT INTO impRetCFDIPlanesRet
	(
		impRetencionesCFDI,
		SistemaFinanc,
		MontTotAportAnioInmAnterior,
		MontIntRealesDevengAniooInmAnt,
		HuboRetirosAnioInmAntPer,
		MontTotRetiradoAnioInmAntPer,
		MontTotExentRetiradoAnioInmAnt,
		MontTotExedenteAnioInmAnt,
		HuboRetirosAnioInmAnt,
		MontTotRetiradoAnioInmAnt
	)
	VALUES 
	(
		@pimpRetencionesCFDI,
		@pSistemaFinanc,
		@pMontTotAportAnioInmAnterior,
		@pMontIntRealesDevengAniooInmAnt,
		@pHuboRetirosAnioInmAntPer,
		@pMontTotRetiradoAnioInmAntPer,
		@pMontTotExentRetiradoAnioInmAnt,
		@pMontTotExedenteAnioInmAnt,
		@pHuboRetirosAnioInmAnt,
		@pMontTotRetiradoAnioInmAnt
	)
END 

GO

DROP PROCEDURE impRetCFDIPlanesRetDatos
GO
CREATE PROCEDURE impRetCFDIPlanesRetDatos
(
@pimpRetencionesCFDI int
)
AS
SET NOCOUNT ON 

SELECT impRetCFDIPlanesRet.impRetencionesCFDI, impRetCFDIPlanesRet.SistemaFinanc, impRetCFDIPlanesRet.MontTotAportAnioInmAnterior,
	impRetCFDIPlanesRet.MontIntRealesDevengAniooInmAnt, impRetCFDIPlanesRet.HuboRetirosAnioInmAntPer, impRetCFDIPlanesRet.MontTotRetiradoAnioInmAntPer, impRetCFDIPlanesRet.MontTotExentRetiradoAnioInmAnt,
	impRetCFDIPlanesRet.MontTotExedenteAnioInmAnt, impRetCFDIPlanesRet.HuboRetirosAnioInmAnt, impRetCFDIPlanesRet.MontTotRetiradoAnioInmAnt
FROM impRetCFDIPlanesRet 

WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
 
 RETURN @@Error 

GO

DROP PROCEDURE impRetCFDIPlanesRetEliminar
GO
CREATE PROCEDURE impRetCFDIPlanesRetEliminar
(
@pimpRetencionesCFDI int
)
AS
SET NOCOUNT ON 

DELETE FROM impRetCFDIPlanesRet 
WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impRetCFDIPremios.sql*/
DROP PROCEDURE impRetCFDIPremiosGuardar
GO
CREATE PROCEDURE impRetCFDIPremiosGuardar
(
@pimpRetencionesCFDI int,
@pProvincia_id varchar(5) = NULL,
@pMontTotPago numeric(18,4),
@pMontTotPagoGrav numeric(18,4),
@pMontTotPagoExent numeric(18,4)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM impRetCFDIPremios WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)))
BEGIN 
	UPDATE impRetCFDIPremios
	SET		Provincia_id = dbo.FuncFKgenProvincias(@pProvincia_id),
		MontTotPago = @pMontTotPago,
		MontTotPagoGrav = @pMontTotPagoGrav,
		MontTotPagoExent = @pMontTotPagoExent
	WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
END 
ELSE 
BEGIN 
	INSERT INTO impRetCFDIPremios
	(
		impRetencionesCFDI,
		Provincia_id,
		MontTotPago,
		MontTotPagoGrav,
		MontTotPagoExent
	)
	VALUES 
	(
		@pimpRetencionesCFDI,
		dbo.FuncFKgenProvincias(@pProvincia_id),
		@pMontTotPago,
		@pMontTotPagoGrav,
		@pMontTotPagoExent
	)
END 

GO

DROP PROCEDURE impRetCFDIPremiosDatos
GO
CREATE PROCEDURE impRetCFDIPremiosDatos
(
@pimpRetencionesCFDI int
)
AS
SET NOCOUNT ON 

SELECT impRetCFDIPremios.impRetencionesCFDI, genProvincias.Provincia_id, 
	genProvincias.Descripcion as DescripcionProvincia,
	impRetCFDIPremios.MontTotPago,
	impRetCFDIPremios.MontTotPagoGrav, impRetCFDIPremios.MontTotPagoExent
FROM impRetCFDIPremios left join genProvincias ON 
impRetCFDIPremios.Provincia_id = genProvincias.genProvincias
WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
 
 RETURN @@Error 

GO

DROP PROCEDURE impRetCFDIPremiosEliminar
GO
CREATE PROCEDURE impRetCFDIPremiosEliminar
(
@pimpRetencionesCFDI int
)
AS
SET NOCOUNT ON 

DELETE FROM impRetCFDIPremios 
WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impRetCFDISecFinan.sql*/
DROP PROCEDURE impRetCFDISecFinanGuardar
GO
CREATE PROCEDURE impRetCFDISecFinanGuardar
(
@pimpRetencionesCFDI int,
@pIdFideicom varchar(20),
@pNomFideicom varchar(100),
@pDescripFideicom varchar(300)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM impRetCFDISecFinan WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)))
BEGIN 
	UPDATE impRetCFDISecFinan
	SET		IdFideicom = @pIdFideicom,
		NomFideicom = @pNomFideicom,
		DescripFideicom = @pDescripFideicom
	WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
END 
ELSE 
BEGIN 
	INSERT INTO impRetCFDISecFinan
	(
		impRetencionesCFDI,
		IdFideicom,
		NomFideicom,
		DescripFideicom
	)
	VALUES 
	(
		@pimpRetencionesCFDI,
		@pIdFideicom,
		@pNomFideicom,
		@pDescripFideicom
	)
END 

GO

DROP PROCEDURE impRetCFDISecFinanDatos
GO
CREATE PROCEDURE impRetCFDISecFinanDatos
(
@pimpRetencionesCFDI int
)
AS
SET NOCOUNT ON 

SELECT impRetCFDISecFinan.impRetencionesCFDI, impRetCFDISecFinan.IdFideicom, impRetCFDISecFinan.NomFideicom,
	impRetCFDISecFinan.DescripFideicom
FROM impRetCFDISecFinan 
WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
 
 RETURN @@Error 

GO

DROP PROCEDURE impRetCFDISecFinanEliminar
GO
CREATE PROCEDURE impRetCFDISecFinanEliminar
(
@pimpRetencionesCFDI int
)
AS
SET NOCOUNT ON 

DELETE FROM impRetCFDISecFinan 
WHERE (impRetencionesCFDI = @pimpRetencionesCFDI)
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impRetencionesCFDI.sql*/

DROP PROCEDURE impRetencionesCFDIGuardar
GO
CREATE PROCEDURE impRetencionesCFDIGuardar
(
@pFolio int,
@pSello varchar(max),
@pNumCert varchar(20),
@pFechaExp datetime,
@pCveRetenc varchar(2) = NULL,
@pDescRetenc varchar(100),
@pNacionalidad varchar(10),
@pRFC varchar(14),
@pRazonSocial varchar(300),
@pCURP char(18),
@pNroRegIdTrib char(20),
@pEjercicio int,
@pMesIni smallint,
@pMesFin smallint,
@pmontoTotOperacion numeric(18,4),
@pmontoTotGrav numeric(18,4),
@pmontoTotExent numeric(18,4),
@pmontoTotRet numeric(18,4),
@pCancelado bit,
@pFechaCancelacion datetime = NULL,
@pFechaTimbre varchar(19),
@pSelloSAT varchar(max),
@pNoCertificadoSAT varchar(20),
@pUUID char(36),
@pRfcProvCertif varchar(12) = NULL,
@pLeyenda varchar(150) = NULL, 
@pUsuario_Id Int, 
@pEmpresa_Id Int, 
@pXml Text
)
AS
SET NOCOUNT ON 
DECLARE @pidentity INT =(select impRetencionesCFDI 
 from impRetencionesCFDI 
 Where
	Empresa_id = @pEmpresa_id and 
	Folio = @pFolio)

	
IF (@pidentity  IS NOT NULL)

BEGIN 

	
	UPDATE impRetencionesCFDI
	SET		Sello = @pSello,
		NumCert = @pNumCert,
		FechaExp = @pFechaExp,
		CveRetenc = @pCveRetenc,
		DescRetenc = @pDescRetenc,
		Nacionalidad = @pNacionalidad,
		RFC = @pRFC,
		RazonSocial = @pRazonSocial,
		CURP = @pCURP,
		NroRegIdTrib = @pNroRegIdTrib,
		Ejercicio = @pEjercicio,
		MesIni = @pMesIni,
		MesFin = @pMesFin,
		montoTotOperacion = @pmontoTotOperacion,
		montoTotGrav = @pmontoTotGrav,
		montoTotExent = @pmontoTotExent,
		montoTotRet = @pmontoTotRet,
		Cancelado = @pCancelado,
		FechaCancelacion = @pFechaCancelacion,
		FechaTimbre = @pFechaTimbre,
		SelloSAT = @pSelloSAT,
		NoCertificadoSAT = @pNoCertificadoSAT,
		UUID = @pUUID,
		RfcProvCertif = @pRfcProvCertif,
		Leyenda = @pLeyenda, 
		Usuario_Id = @pUsuario_Id, 
		Empresa_Id = @pEmpresa_Id, 
		FechaRegistro = dbo.FechaActual(), 
		Xml = @pXml
	WHERE (Folio = @pFolio)
END 
ELSE 
BEGIN 

	SET @pFolio = 
		(SELECT ISNULL(MAX(Folio),0)+1 from impRetencionesCFDI)

	INSERT INTO impRetencionesCFDI
	(
		Folio,
		Sello,
		NumCert,
		FechaExp,
		CveRetenc,
		DescRetenc,
		Nacionalidad,
		RFC,
		RazonSocial,
		CURP,
		NroRegIdTrib,
		Ejercicio,
		MesIni,
		MesFin,
		montoTotOperacion,
		montoTotGrav,
		montoTotExent,
		montoTotRet,
		Cancelado,
		FechaCancelacion,
		FechaTimbre,
		SelloSAT,
		NoCertificadoSAT,
		UUID,
		RfcProvCertif,
		Leyenda, 
		Usuario_Id, 
		Empresa_Id,
		FechaRegistro, 
		Xml

	)
	VALUES 
	(
		@pFolio,
		@pSello,
		@pNumCert,
		@pFechaExp,
		@pCveRetenc,
		@pDescRetenc,
		@pNacionalidad,
		@pRFC,
		@pRazonSocial,
		@pCURP,
		@pNroRegIdTrib,
		@pEjercicio,
		@pMesIni,
		@pMesFin,
		@pmontoTotOperacion,
		@pmontoTotGrav,
		@pmontoTotExent,
		@pmontoTotRet,
		@pCancelado,
		@pFechaCancelacion,
		@pFechaTimbre,
		@pSelloSAT,
		@pNoCertificadoSAT,
		@pUUID,
		@pRfcProvCertif,
		@pLeyenda, 
		@pUsuario_Id, 
		@pEmpresa_Id, 
		dbo.FechaActual(), 
		@pXml
	)
	SET @pidentity =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @pidentity as RetVal 

GO





DROP PROCEDURE impRetencionesCFDIDatos
GO
CREATE PROCEDURE impRetencionesCFDIDatos
(
@pFolio int, 
@pEmpresa_Id Int
)
AS

SET NOCOUNT ON 
DECLARE @pidentity INT = isnull((select impRetencionesCFDI 
 from impRetencionesCFDI 
 Where
	Empresa_id = @pEmpresa_id and 
	Folio = @pFolio),0)

SELECT impRetencionesCFDI.impRetencionesCFDI,
	impRetencionesCFDI.Folio, impRetencionesCFDI.Sello, impRetencionesCFDI.NumCert, impRetencionesCFDI.FechaExp,
	impRetencionesCFDI.CveRetenc, impRetencionesCFDI.DescRetenc, impRetencionesCFDI.Nacionalidad, impRetencionesCFDI.RFC,
	impRetencionesCFDI.RazonSocial, impRetencionesCFDI.CURP, impRetencionesCFDI.NroRegIdTrib, impRetencionesCFDI.Ejercicio,
	impRetencionesCFDI.MesIni, impRetencionesCFDI.MesFin, impRetencionesCFDI.montoTotOperacion, impRetencionesCFDI.montoTotGrav,
	impRetencionesCFDI.montoTotExent, impRetencionesCFDI.montoTotRet, impRetencionesCFDI.Cancelado, impRetencionesCFDI.FechaCancelacion,
	impRetencionesCFDI.FechaTimbre, impRetencionesCFDI.SelloSAT, impRetencionesCFDI.NoCertificadoSAT, impRetencionesCFDI.UUID,
	impRetencionesCFDI.RfcProvCertif, impRetencionesCFDI.Leyenda, impRetencionesCFDI.Xml
FROM impRetencionesCFDI 
WHERE (Folio = @pFolio)
 

Exec impRetCFDIDetalleDatos   @pidentity

Exec impRetCFDIArrendaDatos  @pidentity

Exec impRetCFDIDividendosDatos @pidentity

Exec impRetCFDIEnajAccionDatos @pidentity

Exec impRetCFDIFiedeEmprDatos @pidentity

Exec impRetCFDIOperConDerivDatos @pidentity

Exec impRetCFDIPagosExtrDatos  @pidentity

Exec impRetCFDIPlanesRetDatos @pidentity

Exec impRetCFDIPremiosDatos @pidentity

Exec impRetCFDISecFinanDatos @pidentity

Exec impRetCFDIInteresesDatos @pidentity

 
RETURN @@Error 

GO

DROP PROCEDURE impRetencionesCFDIEliminar
GO
CREATE PROCEDURE impRetencionesCFDIEliminar
(
@pFolio int,
@pEmpresa_Id Int
)
AS
SET NOCOUNT ON 

DELETE FROM impRetencionesCFDI 
WHERE Folio = @pFolio and Empresa_Id = @pEmpresa_Id
 
RETURN @@Error 

GO


DROP PROCEDURE impRetencionesCFDICancelar
GO
CREATE PROCEDURE impRetencionesCFDICancelar
(
@pFolio int,
@pEmpresa_Id Int, 
@pUsuario_Id Int
)
AS
SET NOCOUNT ON 

Update impRetencionesCFDI  SET Cancelado = 1 , FechaCancelacion = dbo.FechaActual(), 
	Usuario_Id = @pUsuario_Id
	WHERE Folio = @pFolio and Empresa_Id = @pEmpresa_Id
 
RETURN @@Error 

GO


DROP PROCEDURE impRetencionesCFDIDatosInt
GO
CREATE PROCEDURE impRetencionesCFDIDatosInt
(
@pImpReteciones int
)
AS

DECLARE @pEmpresa_Id int
DECLARE @pFolio int

SELECT @pEmpresa_Id = Empresa_Id , @pFolio = Folio From impRetencionesCFDI WHERE
	impRetencionesCFDI = @pImpReteciones

exec impRetencionesCFDIDatos @pFolio, @pEmpresa_Id

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impSicore.sql*/
DROP PROCEDURE impSicore
GO
CREATE PROCEDURE impSicore
(
@pEmpresa_Id INT,
@pFechaDesde DATETIME,
@pFechaHasta DATETIME
)
AS

SELECT @pEmpresa_Id Empresa_Id, @pFechaDesde FechaDesde, @pFechaHasta FechaHasta

SELECT conAsientos.Fecha, tesIdRetProv.NroResSicore, genEntidades.Cuit,
conMovCont.Importe, genAsiSegmentos.Segmento1C TipoMov,
genAsiSegmentos.Segmento2C Sucursal, genAsiSegmentos.Segmento1N Comprobante, 
tesRetProvSegmento.Segmento1N, tesRengMoviRetProv.BaseImponible Gravado, genTiposDoc.TipoDoc,
comProveedores.Ganancias, tesIdRetProv.TipoImpuesto, tesRengMoviRetProv.Porcentaje, 
tesRengMoviRetProv.BaseImponible, genPaises.Pais_Id PaisProv, gp.Pais_Id PaisEmpr,
(SELECT sum(Importe) Importe FROM conMovCont cmc WHERE cmc.conAsientos = conMovCont.conAsientos AND
cmc.TipoMov = 1) ImporteTotal, genEmpresas.RazonSocial, genEmpresas.Cuit CuitEmpr
FROM TesMovimientos  
INNER JOIN conAsientos ON tesMovimientos.tesMovimientos = conAsientos.conAsientos
INNER JOIN TesRengMovi ON tesMovimientos.tesMovimientos = tesRengMovi.tesMovimientos
INNER JOIN TesIdRetProv ON 	TesIdRetProv.Cartera_Id = TesRengMovi.Cartera_Id 
INNER JOIN comMovProv ON TesMovimientos.tesMovimientos = comMovProv.comMovProv
INNER JOIN comProveedores ON comProveedores.genEntidades = comMovProv.Proveed_id 
INNER JOIN genEntidades ON comProveedores.genEntidades = genEntidades.genEntidades
INNER JOIN genTiposDoc ON genEntidades.TipoDoc = genTiposDoc.TipoDoc AND
	genTiposDoc.Dominio_Id = 'AR'
INNER JOIN tesRengMoviRetProv ON tesRengMoviRetProv.tesMovimientos = TesRengMovi.tesMovimientos AND
	tesRengMoviRetProv.conRenglon = TesRengMovi.conRenglon
INNER JOIN tesMoviGravado ON TesMovimientos.tesMovimientos = tesMoviGravado.tesMovimientos
INNER JOIN conMovCont ON conMovCont.conAsientos = TesRengMovi.tesMovimientos AND
	conMovCont.Renglon = TesRengMovi.conRenglon
INNER JOIN genAsiSegmentos ON conAsientos.conAsientos = genAsiSegmentos.Asiento_Id 
INNER JOIN tesRetProvSegmento ON tesRengMoviRetProv.tesMovimientos = tesRetProvSegmento.tesMovimientos AND
	tesRengMoviRetProv.conRenglon = tesRetProvSegmento.conRenglon
INNER JOIN impTipoImpuesto ON TesIdRetProv.TipoImpuesto = impTipoImpuesto.TipoImpuesto AND
	impTipoImpuesto.Referencia03 = 'RET' AND impTipoImpuesto.Referencia02 IN ('GAN','IVA')
INNER JOIN genPaises ON comProveedores.Pais = genPaises.genPaises
INNER JOIN genEmpresas ON genEmpresas.genEmpresas = conAsientos.Empresa_Id
INNER JOIN genPaises gp ON genEmpresas.Pais_Id = gp.genPaises
WHERE conAsientos.Fecha BETWEEN @pFechaDesde and @pFechaHasta AND 
conAsientos.Anulado = 0 AND conAsientos.Posteado = 1 AND
conAsientos.Empresa_Id = @pEmpresa_Id 
ORDER BY Fecha
GO





Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impSifere.sql*/
Drop procedure impSifere
Go
Create procedure impSifere
(
@pEmpresa_id int,
@pMes int,
@pAnio int
)
As

Select @pEmpresa_Id Empresa_Id, @pMes Mes, @pAnio Anio

Select impJurisdicciones.Juris_Id, conAsientos.Fecha, genEntidades.Cuit,
comMovProv.TipoMov, conMovCont.Importe * conAsientos.Cambio Importe,
genAsiSegmentos.Segmento1C Sucursal, genAsiSegmentos.Segmento4C Letra, 
genAsiSegmentos.Segmento1N Comprobante, comMovImpuestos.Porcentaje
From comMovProv
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = comMovProv.comMovProv
Inner Join comProveedores On comProveedores.genEntidades = comMovProv.Proveed_Id
Inner Join genEntidades On genEntidades.genEntidades = comProveedores.genEntidades
Inner Join conAsientos On conAsientos.conAsientos = comMovProv.comMovProv
Inner Join comMovImpuestos On comMovImpuestos.comMovProv = comMovProv.comMovProv
Inner Join comImpuestos On comImpuestos.comImpuestos = comMovImpuestos.Impuesto_Id
Inner Join impTipoImpuesto On impTipoImpuesto.TipoImpuesto = comImpuestos.TipoImpuesto
Inner Join impJurisdicciones On impJurisdicciones.impJurisdicciones = impTipoImpuesto.Juris_Id
Inner Join conMovCont On conMovCont.conAsientos = comMovImpuestos.comMovProv And conMovCont.Renglon = comMovImpuestos.conRenglon
Where conAsientos.Anulado = 0 And impTipoImpuesto.Juris_Id <> 0 And impTipoImpuesto.Referencia04 = 'PERC' And
genEntidades.Cuit <> '33-69345023-9'
--And comMovProv.TipoMov <> 'R' 
And conAsientos.Empresa_Id = @pEmpresa_id And Year(conAsientos.Fecha) = @pAnio And
Month( conAsientos.Fecha) = @pMes -- And impJurisdicciones.Juris_Id = @pJurisdiccion


Select impJurisdicciones.Juris_Id, genEntidades.Cuit, conAsientos.Fecha, tesRengMoviRetClie.SucursalRet,
tesRengMoviRetClie.ComprobanteRet, 'R' Tipo, genAsiSegmentos.Segmento2C Sucursal, genAsiSegmentos.Segmento1N Comprobante,
conMovCont.Importe
From tesMovimientos
Inner Join conAsientos On conAsientos.conAsientos = tesMovimientos.tesMovimientos
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
Inner Join venMovimientos On venMovimientos.venMovimientos = tesMovimientos.tesMovimientos
Inner Join tesRengMovi On tesRengMovi.tesMovimientos = tesMovimientos.tesMovimientos
Inner Join tesRengMoviRetClie On tesRengMoviRetClie.tesMovimientos = tesRengMovi.tesMovimientos And 
		tesRengMoviRetClie.conRenglon = tesRengMovi.conRenglon
Inner Join conMovCont On conMovCont.conAsientos = tesRengMovi.tesMovimientos And conMovCont.Renglon = tesRengMovi.conRenglon
Inner Join tesIdRetClien On tesIdRetClien.Cartera_Id = tesRengMovi.Cartera_Id
Inner Join impTipoImpuesto On impTipoImpuesto.TipoImpuesto = tesIdRetClien.TipoImpuesto
Inner Join impJurisdicciones On impJurisdicciones.impJurisdicciones = impTipoImpuesto.Juris_Id
Inner Join genEntidades On genEntidades.genEntidades = venMovimientos.Cliente_Id
Where conAsientos.Empresa_Id = @pEmpresa_id And Year(conAsientos.Fecha) = @pAnio And conAsientos.Anulado = 0 And
Month( conAsientos.Fecha) = @pMes
Go





Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\impTipoImpuesto.sql*/
DROP PROCEDURE impTipoImpuestoGuardar
GO
CREATE PROCEDURE impTipoImpuestoGuardar
(
@pTipoImpuesto int,
@pDescripcion varchar(80),
@pCodigoFiscal varchar(3) = NULL,
@pJuris_Id varchar(3) = NULL,
@pReferencia01 varchar(15) = NULL,
@pReferencia02 varchar(15) = NULL,
@pReferencia03 varchar(15) = NULL,
@pReferencia04 varchar(15) = NULL,
@pReferencia05 varchar(15) = NULL,
@pReferencia06 varchar(15) = NULL,
@pReferencia07 varchar(15) = NULL,
@pReferencia08 varchar(15) = NULL,
@pReferencia09 varchar(15) = NULL,
@pReferencia10 varchar(15) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM impTipoImpuesto WHERE (TipoImpuesto = @pTipoImpuesto)))
BEGIN 
	UPDATE impTipoImpuesto
	SET		Descripcion = @pDescripcion,
		CodigoFiscal = @pCodigoFiscal,
		Juris_Id = dbo.FuncFKimpJurisdicciones(@pJuris_Id),
		Referencia01 = @pReferencia01,
		Referencia02 = @pReferencia02,
		Referencia03 = @pReferencia03,
		Referencia04 = @pReferencia04,
		Referencia05 = @pReferencia05,
		Referencia06 = @pReferencia06,
		Referencia07 = @pReferencia07,
		Referencia08 = @pReferencia08,
		Referencia09 = @pReferencia09,
		Referencia10 = @pReferencia10
	WHERE (TipoImpuesto = @pTipoImpuesto)
END 
ELSE 
BEGIN 
	INSERT INTO impTipoImpuesto
	(
		TipoImpuesto,
		Descripcion,
		CodigoFiscal,
		Juris_Id,
		Referencia01,
		Referencia02,
		Referencia03,
		Referencia04,
		Referencia05,
		Referencia06,
		Referencia07,
		Referencia08,
		Referencia09,
		Referencia10
	)
	VALUES 
	(
		@pTipoImpuesto,
		@pDescripcion,
		@pCodigoFiscal,
		dbo.FuncFKimpJurisdicciones(@pJuris_Id),
		@pReferencia01,
		@pReferencia02,
		@pReferencia03,
		@pReferencia04,
		@pReferencia05,
		@pReferencia06,
		@pReferencia07,
		@pReferencia08,
		@pReferencia09,
		@pReferencia10
	)
END 

GO

DROP PROCEDURE impTipoImpuestoDatos
GO
CREATE PROCEDURE impTipoImpuestoDatos
(
@pTipoImpuesto int
)
AS
SET NOCOUNT ON 

SELECT impTipoImpuesto.TipoImpuesto, impTipoImpuesto.Descripcion, impTipoImpuesto.CodigoFiscal, impJurisdicciones.Juris_Id,
	impJurisdicciones.Descripcion as DescripcionJurisdicciones, impTipoImpuesto.Referencia01, impTipoImpuesto.Referencia02, impTipoImpuesto.Referencia03,
	impTipoImpuesto.Referencia04, impTipoImpuesto.Referencia05, impTipoImpuesto.Referencia06, impTipoImpuesto.Referencia07,
	impTipoImpuesto.Referencia08, impTipoImpuesto.Referencia09, impTipoImpuesto.Referencia10
FROM impTipoImpuesto 
LEFT JOIN impJurisdicciones  ON (impJurisdicciones.impJurisdicciones = impTipoImpuesto.Juris_Id)
WHERE (TipoImpuesto = @pTipoImpuesto)
 
 RETURN @@Error 

GO

DROP PROCEDURE impTipoImpuestoEliminar
GO
CREATE PROCEDURE impTipoImpuestoEliminar
(
@pTipoImpuesto int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM impTipoImpuesto 
WHERE (TipoImpuesto = ISNULL(@pTipoImpuesto, TipoImpuesto))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\lupIdentidades.sql*/
-- Cambio Lupas parametros Adicionales
DROP FUNCTION FuncFKlupIdentidades
GO

CREATE FUNCTION FuncFKlupIdentidades
(
@pIdentidad_Id varchar (30)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = lupIdentidades FROM lupIdentidades WHERE 
	Identidad_Id = @pIdentidad_Id
  RETURN @pIdentity
END


GO

DROP PROCEDURE lupIdentidadesDatos
GO
CREATE PROCEDURE lupIdentidadesDatos
(
@pIdentidad_Id varchar(30)
)
AS
	SET NOCOUNT ON 
	
	DECLARE @lIdentity int
	DECLARE @lDescripcion varchar(50)
	DECLARE @lCamposClaves varchar(30)
	DECLARE @lCampoDescripcion varchar(50)
	DECLARE @lCamposSelect varchar(max)
	DECLARE @lFromSelect varchar(max)
	DECLARE @lWhereSelect varchar(max)
	DECLARE @lOrderByDefault varchar(100)
	DECLARE @lCampoFKTablaSeg varchar(50)
	DECLARE @lVistaSeg varchar(50) 
	DECLARE @lCampoPKVistaSeg varchar(50) 
	DECLARE @Sql1 NVarchar(max)
	DECLARE @ParmDefinition nVarChar(max)
	DECLARE @lCharCasing varchar(6)
	DECLARE @lMascara varchar(40)
	DECLARE @lMaximaLongitud int

	DECLARE @pP1 VarChar(50)=null,@pP2 VarChar(50)=null, @pP3 VarChar(50)=null,
			@pP4 VarChar(50)=null,@pP5 VarChar(50)=null, @pP6 VarChar(50)=null,
			@pP7 VarChar(50)=null,@pP8 VarChar(50)=null, @pP9 VarChar(50)=null,
			@pP10 VarChar(50)=null 

	-- Almaceno los datos en variables, para no tener que realizar mas de una vez la misma consulta
	SELECT @lIdentity = lupIdentidades.lupIdentidades, @lDescripcion = lupIdentidades.Descripcion, 
		@lCamposSelect = CamposSelect, @lFromSelect = FromSelect, @lWhereSelect = WhereSelect,
		@lCamposClaves = lupIdentidades.CamposClaves, @lCampoDescripcion = lupIdentidades.CampoDescripcion,
		@lOrderByDefault = OrderByDefault, 	@lCampoFKTablaSeg = CampoFKTablaSeg, 
	    @lVistaSeg = VistaSeg, 	@lCampoPKVistaSeg = CampoPKVistaSeg, 
		@lCharCasing = CharCasing, @lMascara = Mascara, @lMaximaLongitud = MaximaLongitud
	FROM lupIdentidades 
	WHERE (Identidad_Id = @pIdentidad_Id)
 
	-- Retorno los datos de la identidad
	SELECT @lIdentity lupIdentidades, @pIdentidad_Id Identidad_Id,  @lDescripcion Descripcion, 
		@lCamposClaves CamposClaves, @lCampoDescripcion CampoDescripcion,
		@lCamposSelect CamposSelect, @lFromSelect FromSelect, @lWhereSelect WhereSelect,
		@lOrderByDefault OrderByDefault, @lCampoFKTablaSeg CampoFKTablaSeg,
		@lVistaSeg VistaSeg, @lCampoPKVistaSeg CampoPKVistaSeg, 
		@lCharCasing CharCasing, @lMascara Mascara, @lMaximaLongitud MaximaLongitud
 

    --Campos Visible
	SELECT lupIdentidadesColVisibles.Campo, lupIdentidadesColVisibles.Longitud, lupIdentidadesColVisibles.CondicionInicial
	FROM lupIdentidadesColVisibles 
	WHERE Identidad_Id = @lIdentity 

	--Parametros del SP
	--SELECT sysColumns.name AS Parametro, sysColumns.name as NombreParametro, sysTypes.name as TipoParametro 
	--FROM sysColumns 
	--inner join sysobjects on sysobjects.id = sysColumns.id
	--inner join systypes on systypes.xusertype = sysColumns.xusertype 	
	--WHERE sysobjects.name = @lNombreIdentificatorio
	--AND sysobjects.type = 'P' AND sysobjects.category <> 2
	
	SELECT 	Orden, NombreParametro as Parametro, NombreParametro, TipoParametro
	FROM lupIdentidadesParam
	WHERE Identidad_Id = @lIdentity 

	--Campos retornados por la Vista
	--SELECT sysColumns.name AS Campo, sysColumns.name as NombreCampo, sysTypes.name as TipoCampo 
	--FROM sysColumns
	--INNER JOIN sysObjects ON sysColumns.id = sysObjects.id
	--INNER JOIN sysTypes ON sysColumns.xtype = sysTypes.xUserType
	--WHERE ((sysObjects.name = @lNombreIdentificatorio) AND (@lTipoVista = 'V'))
	---- Los campos de los sps, se obtienen en el DAL
	----OR ((sysObjects.name = Rtrim(@lNombreIdentificatorio)+'Lupa') AND (@lTipoVista = 'P')) 

	SET @ParmDefinition = N'@pPar1 VarChar(50), @pPar2 VarChar(50), @pPar3 VarChar(50), @pPar4 VarChar(50), @pPar5 VarChar(50), @pPar6 VarChar(50), @pPar7 VarChar(50), @pPar8 VarChar(50), @pPar9 VarChar(50), @pPar10 VarChar(50)';  
	--Obtengo los campos retornados por la vista o sp.
	SET @Sql1 = ' SELECT ' + @lCamposSelect + ' FROM ' + @lFromSelect +  	' WHERE 1=0 '
	
	EXEC sp_executesql @SQL1, @ParmDefinition, @pPar1=@pP1,@pPar2=@pP2,@pPar3=@pP3,@pPar4=@pP4,
	@pPar5=@pP5,@pPar6=@pP6,@pPar7=@pP7,@pPar8=@pP8,@pPar9=@pP9,@pPar10=@pP10


 RETURN @@Error 

GO


DROP PROCEDURE lupIdentidadesTodas
GO
CREATE PROCEDURE lupIdentidadesTodas
AS
SET NOCOUNT ON 

SELECT lupIdentidades.Identidad_Id, lupIdentidades.Descripcion, 
CAST(CASE LTRIM(RTRIM(lupIdentidades.CamposClaves)) 
  WHEN '' THEN 1 
  ELSE 0 
END as bit) as EsSegmento 
FROM lupIdentidades 
ORDER BY lupIdentidades.Identidad_id
 
RETURN @@Error 

GO

DROP PROCEDURE [dbo].[Lup_EjecutarConsulta]
GO
CREATE PROCEDURE [dbo].[Lup_EjecutarConsulta](@pidentidad_id VarChar(30), @pWhereSP VarChar(max)=NULL, @pWhere VarChar(max)=NULL, @pOrderBy VarChar(max)=NULL,
										@pDesde int, @pHasta int, @pDominio Char(2), 
										@pP1 VarChar(50)=null,@pP2 VarChar(50)=null, @pP3 VarChar(50)=null,
										@pP4 VarChar(50)=null,@pP5 VarChar(50)=null, @pP6 VarChar(50)=null,
										@pP7 VarChar(50)=null,@pP8 VarChar(50)=null, @pP9 VarChar(50)=null,
										@pP10 VarChar(50)=null )
AS

DECLARE @Sql1 nVarchar(max)
DECLARE @lCamposSelect varchar(max)
DECLARE @lFromSelect varchar(max)
DECLARE @lOrderByDefault varchar(max)
DECLARE @WhereSelect VarChar(max)
DECLARE @ParmDefinition nVarChar(max)
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET @ParmDefinition = N'@pPar1 VarChar(50), @pPar2 VarChar(50), @pPar3 VarChar(50), @pPar4 VarChar(50), @pPar5 VarChar(50), @pPar6 VarChar(50), @pPar7 VarChar(50), @pPar8 VarChar(50), @pPar9 VarChar(50), @pPar10 VarChar(50)';  
-- AJ NOV 2016
-- Obtengo los datos para armar la consulta
SELECT @lCamposSelect = CamposSelect, @lFromSelect = FromSelect, @lOrderByDefault = CASE WHEN OrderByDefault='' THEN CamposSelect ELSE OrderByDefault END, 
	@WhereSelect = Replace(WhereSelect, '@Dominio_id', ''''+@pDominio+'''')
FROM lupIdentidades 
WHERE (Identidad_Id = @pIdentidad_Id)



SET @Sql1 =  'SELECT  * FROM (' +
					' SELECT ROW_NUMBER() OVER( ORDER BY ' + isnull(@pOrderBy, @lOrderByDefault)  + ' ) as N, SPOrig.* ' +
					' FROM (' +
							' SELECT ' + @lCamposSelect +
							' FROM ' + @lFromSelect  + ') as SPOrig ' +
					' WHERE ' + 
					+  isnull(@pWhereSP, '1=1') + ' and ' +
					case when @WhereSelect !='' then  @WhereSelect+  ' and ' else '' end   + 
					isnull(@pWhere, '1=1') + ' ) as spNumerado' +
      ' WHERE N BETWEEN '+str(@pDesde,8)+' AND '+str(@pHasta,8)

--PRINT @SQL1
EXEC sp_executesql @SQL1, @ParmDefinition, @pPar1=@pP1,@pPar2=@pP2,@pPar3=@pP3,@pPar4=@pP4,
	@pPar5=@pP5,@pPar6=@pP6,@pPar7=@pP7,@pPar8=@pP8,@pPar9=@pP9,@pPar10=@pP10
GO


DROP PROCEDURE Lup_EjecutarCantidadReg
GO

CREATE PROCEDURE [dbo].[Lup_EjecutarCantidadReg](@pidentidad_id VarChar(30), @pWhereSP VarChar(max)=NULL, @pWhere VarChar(max)=NULL, @pDominio char(2), 
										@pP1 VarChar(50)=null,@pP2 VarChar(50)=null, @pP3 VarChar(50)=null,
										@pP4 VarChar(50)=null,@pP5 VarChar(50)=null, @pP6 VarChar(50)=null,
										@pP7 VarChar(50)=null,@pP8 VarChar(50)=null, @pP9 VarChar(50)=null,
										@pP10 VarChar(50)=null )
AS

DECLARE @Sql1 nVarchar(max)
DECLARE @lCamposSelect varchar(max)
DECLARE @lFromSelect varchar(max)
DECLARE @lOrderByDefault varchar(max)
DECLARE @WhereSelect VarChar(max)
DECLARE @ParmDefinition nVarChar(max)

SET @ParmDefinition = N'@pPar1 VarChar(50), @pPar2 VarChar(50), @pPar3 VarChar(50), @pPar4 VarChar(50), @pPar5 VarChar(50), @pPar6 VarChar(50), @pPar7 VarChar(50), @pPar8 VarChar(50), @pPar9 VarChar(50), @pPar10 VarChar(50)';  
-- AJ NOV 2016
-- Obtengo los datos para armar la consulta
SELECT @lCamposSelect = CamposSelect, @lFromSelect = FromSelect, @lOrderByDefault = CASE WHEN OrderByDefault='' THEN CamposSelect ELSE OrderByDefault END, 
	@WhereSelect = Replace(WhereSelect, '@Dominio_id', ''''+@pDominio+'''')
FROM lupIdentidades 
WHERE (Identidad_Id = @pIdentidad_Id)
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET @Sql1 = 'SELECT COUNT(1) ' + 
			' FROM ' +
			' (SELECT ' + @lCamposSelect +
				' FROM ' + @lFromSelect  + ') as SPOrig ' +
			' WHERE ' + isnull(@pWhereSP, '1=1') +
			' AND ' +  case when @WhereSelect  !='' then  @WhereSelect+  ' and ' else '' end   + 
					isnull(@pWhere, '1=1')

--PRINT @SQL1
EXEC sp_executesql @SQL1, @ParmDefinition, @pPar1=@pP1,@pPar2=@pP2,@pPar3=@pP3,@pPar4=@pP4,
	@pPar5=@pP5,@pPar6=@pP6,@pPar7=@pP7,@pPar8=@pP8,@pPar9=@pP9,@pPar10=@pP10
GO	


DROP PROCEDURE Lup_EjecutarConsultaSeg
GO

CREATE PROCEDURE [dbo].[Lup_EjecutarConsultaSeg] (@pSegmento_Id VarChar(10), @pIdentidad_Id VarChar(30), @pCamposSelect VarChar(250),
												@pWhereSP VarChar(max)=NULL, @pWhere VarChar(max)=NULL, @pOrderBy VarChar(250),
												@pDesde int, @pHasta int, @pEmpresa int)
AS

DECLARE @SQL1 Varchar(max)
DECLARE @lVistaJoin varchar(max)
DECLARE @lFromSelect varchar(max)
DECLARE @lCamposVistaSelect VarChar(max)
DECLARE @lCampoFKTabla VarChar(40)
DECLARE @lCampoPKVista VarChar(40)
DECLARE @lOrderByDefault VarChar(max)
DECLARE @lOrderByAUsar varchar(max)
DECLARE @lPosComa int = 0

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED


-- Obtengo los datos para armar la consulta
SELECT @lCamposVistaSelect = CamposSelect, @lFromSelect = FromSelect, @lVistaJoin= VistaSeg,  
	   @lCampoFKTabla = CampoFKTablaSeg, @lCampoPKVista = CampoPKVistaSeg, 
	   --@lOrderByDefault = ISNULL(OrderByDefault,@pOrderBy)
	   @lOrderByDefault = OrderByDefault 
FROM lupIdentidades 
WHERE (Identidad_Id = @pIdentidad_Id)

-- que el parametro @pOrderBy traiga un * al comienzo, significa que el usuario orden? por una columna en especial
-- Si no viene el * entonces, si tiene definido en la lupa un ordenamiento, uso ese ordenamiento, sino uso el que env?a el BE que lo arma en base a las partes del segmento y sus posiciones
IF (CHARINDEX('*', @pOrderBy)<>1)
	set @lOrderByAUsar = ISNULL(@lOrderByDefault,@pOrderBy)
-- Si viene el *, y no tiene definido en la lupa un ordenamiento, entonces uso el ordenamiento del usuario (que tiene concatenado detras el ordenamiento que arma el BE con las partes y posiciones del segmento)
ELSE IF (@lOrderByDefault IS NULL)
	set @lOrderByAUsar = SUBSTRING(@pOrderBy, 2, LEN(@pOrderBy))
-- Si viene el *, y tiene definido en la lupa un ordenamiento, entonces debo usar la columna que utliza el usuario para ordenar y concatenado con el ordenamiento definido en la lupa
ELSE
BEGIN
	--uso solo la primer columna	
	set @lPosComa = CHARINDEX(',', @pOrderBy)
	set @lOrderByAUsar = SUBSTRING(@pOrderBy, 2, @lPosComa) + @lOrderByDefault
END


SET @SQL1 =  'SELECT  * FROM ('  +
					--' SELECT ROW_NUMBER() OVER( ORDER BY ' + @lOrderByDefault + ' ) as N, SPOrig.* ' +
					' SELECT ROW_NUMBER() OVER( ORDER BY ' + @lOrderByAUsar + ' ) as N, SPOrig.* ' +
					' FROM (' +
							' SELECT ' + @pCamposSelect + case when @pCamposSelect !='' THEN ', ' ELSE '' END + @lCamposVistaSelect +
							' FROM ' + @lFromSelect + 
							' INNER JOIN ' + @lVistaJoin + ' ON ' + @lVistaJoin + '.' + @lCampoPKVista + ' = ' + @lFromSelect + '.' + @lCampoFKTabla +
							' WHERE ' + @lVistaJoin + '.Segmento_Id = dbo.FuncFKgenSegmentos(''' + @pSegmento_Id + ''')' +
							' AND ' + @lVistaJoin + '.Empresa_Id = ' + str(@pEmpresa, 8) + 
							' AND ' + isnull(@pWhereSP, '1=1') + ') as SPOrig ' +
					' WHERE ' + isnull(@pWhere, '1=1') + ' ) as spNumerado' +
      ' WHERE N BETWEEN '+str(@pDesde,8)+' AND '+str(@pHasta,8) 
      
      

--PRINT @SQL1
EXEC sp_sqlExec @SQL1

GO



DROP PROCEDURE Lup_EjecutarCantidadRegSeg
GO
CREATE PROCEDURE Lup_EjecutarCantidadRegSeg(@pSegmento_Id VarChar(10), @pidentidad_id VarChar(30), @pCamposSelect VarChar(250),
										@pWhereSP VarChar(max)=NULL, @pWhere VarChar(max)=NULL, @pEmpresa int)
AS
DECLARE @Sql1 Varchar(max)
DECLARE @lFromSelect varchar(max)
DECLARE @lVistaJoin varchar(max)
DECLARE @lCampoFKTabla VarChar(40)
DECLARE @lCampoPKVista VarChar(40)
DECLARE @lCamposVistaSelect VarChar(max)
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
-- Obtengo los datos para armar la consulta
SELECT @lCamposVistaSelect = CamposSelect, @lFromSelect = FromSelect, @lVistaJoin= VistaSeg,  
	   @lCampoFKTabla = CampoFKTablaSeg, @lCampoPKVista = CampoPKVistaSeg
FROM lupIdentidades 
WHERE (Identidad_Id = @pIdentidad_Id)

SET @Sql1 = 'SELECT COUNT(1) FROM ( ' + 
			' SELECT '+@pCamposSelect + ', ' + @lCamposVistaSelect +
			' FROM ' + @lFromSelect + 
			' INNER JOIN ' + @lVistaJoin + ' ON ' + @lVistaJoin + '.' + @lCampoPKVista + ' = ' + @lFromSelect + '.' + @lCampoFKTabla +
			' WHERE ' + @lVistaJoin + '.Segmento_Id = dbo.FuncFKgenSegmentos(''' + @pSegmento_Id + ''')' +
			' AND ' + @lVistaJoin + '.Empresa_Id = ' + str(@pEmpresa, 8) + 
			' AND ' + isnull(@pWhereSP, '1=1') +
			' ) AS XXX WHERE ' + isnull(@pWhere, '(1=1)')

--PRINT @SQL1
EXEC sp_sqlExec @SQL1
GO


DROP PROCEDURE Lup_BrowserDatos
GO
CREATE PROCEDURE Lup_BrowserDatos
(
@pidentidad_id VarChar(30), 
@pCodigo VarChar(250), 
@pWhereSP VarChar(250)=NULL, 
@pWhere VarChar(250)=NULL, 
@pDominio Char(2), 
@pP1 VarChar(50)=null,
@pP2 VarChar(50)=null, 
@pP3 VarChar(50)=null,
@pP4 VarChar(50)=null,
@pP5 VarChar(50)=null, 
@pP6 VarChar(50)=null,
@pP7 VarChar(50)=null,
@pP8 VarChar(50)=null, 
@pP9 VarChar(50)=null,
@pP10 VarChar(50)=null 
)
AS
DECLARE @Sql1 nVarchar(max)
DECLARE @Sql2 nVarchar(max)
DECLARE @Sql3 nVarchar(max)
DECLARE @lCamposClave varchar(max)
DECLARE @lFromSelect varchar(max)
DECLARE @lCamposSelect varchar(max)
DECLARE @lOrderByDefault varchar(max)
DECLARE @WhereSelect VarChar(max)
DECLARE @ParmDefinition nVarChar(max)

SET @ParmDefinition = N'@pPar1 VarChar(50), @pPar2 VarChar(50), @pPar3 VarChar(50), @pPar4 VarChar(50), @pPar5 VarChar(50), @pPar6 VarChar(50), @pPar7 VarChar(50), @pPar8 VarChar(50), @pPar9 VarChar(50), @pPar10 VarChar(50)';  
-- AJ NOV 2016
-- Obtengo los datos para armar la consulta
SELECT @lCamposSelect = CamposSelect, @lCamposClave = CamposClaves, @lFromSelect = FromSelect, @lOrderByDefault = CamposClaves, 
	@WhereSelect = Replace(WhereSelect, '@Dominio_id', ''''+@pDominio+'''')
FROM lupIdentidades 
WHERE (Identidad_Id = @pIdentidad_Id)


SET @Sql1 = ' SELECT TOP 10 ' + @lCamposClave + ' as Codigo ' +
			' FROM (' +
			' SELECT ' + @lCamposSelect +
			' FROM ' + @lFromSelect  + ') as SPOrig ' +
			' WHERE ' + @lCamposClave + '<=' + '''' + @pCodigo + ''' and ' +
			isnull(@pWhereSP, '1=1') + ' and ' +
			case when @WhereSelect !='' then  @WhereSelect+  ' and ' else '' end   + 
			isnull(@pWhere, '1=1') +
			' ORDER BY ' + @lCamposClave + ' DESC'

SET @Sql2 = ' SELECT TOP 10 ' + @lCamposClave + ' as Codigo ' +
			' FROM (' +
			' SELECT ' + @lCamposSelect +
			' FROM ' + @lFromSelect  + ') as SPOrig ' +
			' WHERE ' + @lCamposClave + '>' + '''' + @pCodigo + ''' and ' +
			isnull(@pWhereSP, '1=1') + ' and ' +
			case when @WhereSelect !='' then  @WhereSelect+  ' and ' else '' end   + 
			isnull(@pWhere, '1=1') +
			' ORDER BY ' + @lCamposClave
			
SET @Sql3 = ' SELECT MIN(' + @lCamposClave + ') as Primero, MAX(' + @lCamposClave + ') as Ultimo ' +
			' FROM (' +
			' SELECT ' + @lCamposSelect +
			' FROM ' + @lFromSelect  + ') as SPOrig ' +
			' WHERE '+isnull(@pWhereSP, '1=1') + ' and ' +
			case when @WhereSelect !='' then  @WhereSelect+  ' and ' else '' end   + 
			isnull(@pWhere, '1=1')


--PRINT @SQL1
--PRINT @SQL2
--PRINT @SQL3
EXEC sp_executesql @SQL1, @ParmDefinition, @pPar1=@pP1,@pPar2=@pP2,@pPar3=@pP3,@pPar4=@pP4,
	@pPar5=@pP5,@pPar6=@pP6,@pPar7=@pP7,@pPar8=@pP8,@pPar9=@pP9,@pPar10=@pP10

EXEC sp_executesql @SQL2, @ParmDefinition, @pPar1=@pP1,@pPar2=@pP2,@pPar3=@pP3,@pPar4=@pP4,
	@pPar5=@pP5,@pPar6=@pP6,@pPar7=@pP7,@pPar8=@pP8,@pPar9=@pP9,@pPar10=@pP10

EXEC sp_executesql @SQL3, @ParmDefinition, @pPar1=@pP1,@pPar2=@pP2,@pPar3=@pP3,@pPar4=@pP4,
	@pPar5=@pP5,@pPar6=@pP6,@pPar7=@pP7,@pPar8=@pP8,@pPar9=@pP9,@pPar10=@pP10

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proCausas.sql*/
DROP PROCEDURE proCausasGuardar
GO
CREATE PROCEDURE proCausasGuardar
(
@pCausa_Id varchar(5),
@pCausa_Id_Nueva varchar(5),
@pDescripcion varchar(100),
@pInactivo Sino,
@pPosteado Sino,
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM proCausas WHERE proCausas.Causa_Id=@pCausa_Id))
BEGIN 
	UPDATE proCausas
	SET		@lIdentidad = proCausas,
		Causa_Id = @pCausa_Id_Nueva,
		Descripcion = @pDescripcion,
		Inactivo = @pInactivo,
		Posteado = @pPosteado,
		Usuario_Id = @pUsuario_Id
	WHERE proCausas.Causa_Id=@pCausa_Id
END 
ELSE 
BEGIN 
	INSERT INTO proCausas
	(
		Causa_Id,
		Descripcion,
		Inactivo,
		Posteado,
		Usuario_Id
	)
	VALUES 
	(
		@pCausa_Id,
		@pDescripcion,
		@pInactivo,
		@pPosteado,
		@pUsuario_Id
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE proCausasDatos
GO
CREATE PROCEDURE proCausasDatos
(
@pCausa_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT proCausas.proCausas, proCausas.Causa_Id,proCausas.Causa_Id as Causa_Id_Nueva, proCausas.Descripcion, proCausas.Inactivo,
	proCausas.Posteado, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario
FROM proCausas 
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = proCausas.Usuario_Id)
WHERE  proCausas.Causa_Id=@pCausa_Id


  Declare @pidentity bigint= dbo.FuncFKproCausas(@pCausa_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'proCausas'
 RETURN @@Error 

GO

DROP PROCEDURE proCausasEliminar
GO
CREATE PROCEDURE proCausasEliminar
(
@pCausa_Id varchar(5)
)
AS
SET NOCOUNT ON 

DELETE FROM proCausas 
WHERE  @pCausa_Id=proCausas.Causa_Id
 RETURN @@Error 

GO

drop FUNCTION FuncFKproCausas
go
CREATE FUNCTION FuncFKproCausas
(
@pCausa_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = proCausas FROM proCausas WHERE 
	Causa_Id = @pCausa_Id
  RETURN @pIdentity
END

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proCentroProductivo.sql*/
DROP PROCEDURE proCentroProductivoGuardar
GO
CREATE PROCEDURE proCentroProductivoGuardar
(
@pCtroProd_Id varchar(8),
@pCtroProd_Id_Nuevo varchar(8),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(35),
@pCentro1_Id varchar(8) = NULL,
@pCentro2_Id varchar(8) = NULL,
@pInactivo Sino,
@pPosteado Sino,
@pUsuario_Id int = NULL, 
@pCtaProdProceso VarChar(25) = NULL
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM proCentroProductivo WHERE (CtroProd_Id = @pCtroProd_Id)))
BEGIN 
	UPDATE proCentroProductivo
	SET		@lIdentidad = proCentroProductivo,
		CtroProd_Id = @pCtroProd_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Centro1_Id = dbo.FuncFKconCentro1(@pCentro1_Id),
		Centro2_Id = dbo.FuncFKconCentro2(@pCentro2_Id),
		Inactivo = @pInactivo,
		Posteado = @pPosteado,
		Usuario_Id = @pUsuario_Id, 
		CtaProdProceso = dbo.FuncFKconCuentas(@pCtaProdProceso)
	WHERE (CtroProd_Id = @pCtroProd_Id)
END 
ELSE 
BEGIN 
	INSERT INTO proCentroProductivo
	(
		CtroProd_Id,
		Empresa_Id,
		Descripcion,
		Centro1_Id,
		Centro2_Id,
		Inactivo,
		Posteado,
		Usuario_Id,
		CtaProdProceso
	)
	VALUES 
	(
		@pCtroProd_Id,
		@pEmpresa_Id,
		@pDescripcion,
		dbo.FuncFKconCentro1(@pCentro1_Id),
		dbo.FuncFKconCentro2(@pCentro2_Id),
		@pInactivo,
		@pPosteado,
		@pUsuario_Id,
		dbo.FuncFKconCuentas(@pCtaProdProceso)
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE proCentroProductivoDatos
GO
CREATE PROCEDURE proCentroProductivoDatos
(
@pCtroProd_Id varchar(8)
)
AS
SET NOCOUNT ON 

SELECT proCentroProductivo.proCentroProductivo, proCentroProductivo.CtroProd_Id, proCentroProductivo.Empresa_Id,
	Cast( Case When proCentroProductivo.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, proCentroProductivo.Descripcion, conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1,
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, proCentroProductivo.Inactivo, proCentroProductivo.Posteado, proCentroProductivo.Usuario_Id,
	conCuentas.Cuenta_Id CtaProdProceso , conCuentas.Descripcion as DescripcionCtaProdProceso
FROM proCentroProductivo 
LEFT JOIN conCentro1  ON (conCentro1.conCentro1 = proCentroProductivo.Centro1_Id)
left join conCentro2 on (conCentro2.conCentro2 = proCentroProductivo.Centro2_Id)
Left join conCuentas ON CtaProdProceso = conCuentas.conCuentas
WHERE (CtroProd_Id = @pCtroProd_Id)
 


  Declare @pidentity bigint= dbo.FuncFKproCentroProductivo(@pCtroProd_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'proCentroProductivo'
 RETURN @@Error 

GO

DROP PROCEDURE proCentroProductivoEliminar
GO
CREATE PROCEDURE proCentroProductivoEliminar
(
@pCtroProd_Id varchar(8) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM proCentroProductivo 
WHERE (CtroProd_Id = @pCtroProd_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKproCentroProductivo
GO

CREATE FUNCTION FuncFKproCentroProductivo
(
@pCtroProd_Id varchar (8)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = proCentroProductivo FROM proCentroProductivo WHERE 
	CtroProd_Id = @pCtroProd_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proCierresCosto.sql*/
--EXEC proCierresCosto 10531

DROP PROCEDURE proCierresCosto
go
CREATE PROCEDURE proCierresCosto
(
	@stkMoviCabe BigInt
)

AS

declare @proMovCierreOrden as bigint
SET @proMovCierreOrden = (SELECT proMovCierreOrden FROM 
	proOrdenStock where stkMoviCabe = @stkMoviCabe)

Select  proOrdenStock.stkMovicabe
from proOrdenStock
Where
	stkMoviCabe = @stkMoviCabe


Select  proMovCierreOrden.proMovCierreOrden, 
ISNULL((select sum(stkMoviCuerpo.Cantidad * stkMoviCuerpo.CostoUnitario)
from proOrdenStock INNER JOIN stkMoviCabe ON 
proOrdenStock.proMovCierreOrden = proMovCierreOrden.proMovCierreOrden AND 
proOrdenStock.stkMoviCabe = stkMoviCabe.stkMoviCabe
INNER JOIN  stkMoviCuerpo ON
stkMoviCuerpo.stkMoviCabe = stkMoviCabe.stkMoviCabe
inner join conAsientos ON 
conAsientos.conAsientos = stkMoviCabe.stkMoviCabe
Where
	stkMoviCabe.Signo = -1 and 
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1),0) as Materiales, 
	ISNULL((SELECT SUM(proMovCierreTrabajos3.Cantidad* proMovCierreTrabajos3.Precio)
	from proMovCierreTrabajos3 Where
	proMovCierreTrabajos3.proMovCierreOrden = proMovCierreOrden.proMovCierreOrden),0) as Trabajos3,

	ISNULL((SELECT SUM(proMovCierreRecursos.Cantidad* proMovCierreRecursos.Costo)
	from proMovCierreRecursos Where
	proMovCierreRecursos.proMovCierreOrden = proMovCierreOrden.proMovCierreOrden),0) as Recursos

from proMovCierreOrden INNER JOIN conAsientos ON 
proMovCierreOrden.proMovCierreOrden = conAsientos.conAsientos
Where
	proMovCierreOrden.proMovCierreOrden =  @proMovCierreOrden and
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1


Select  proMovCierreOrden.proMovCierreOrden, 
	stkMoviCuerpo.stkMoviCabe, 	stkMoviCuerpo.Renglon,
stkProductos.Producto_Id, proOrdenStockCosto.PorcentajeCosto, 
	stkMoviCuerpo.Cantidad, stkMoviCuerpo.Cantidad*stkMoviCuerpo.CostoUnitario as CostoTotal
from 
proMovCierreOrden INNER JOIN conAsientos ON 
proMovCierreOrden.proMovCierreOrden = conAsientos.conAsientos
INNER JOIN proOrdenStockCosto ON
proOrdenStockCosto.proMovCierreOrden = proMovCierreOrden.proMovCierreOrden 
INNER JOIN stkMoviCabe ON 
proOrdenStockCosto.stkMoviCabe = stkMoviCabe.stkMoviCabe
INNER JOIN  stkMoviCuerpo ON
stkMoviCuerpo.stkMoviCabe = proOrdenStockCosto.stkMoviCabe and 
stkMoviCuerpo.Renglon =  proOrdenStockCosto.Renglon 
inner join conAsientos  conAsientoss ON 
conAsientoss.conAsientos = stkMoviCabe.stkMoviCabe
INNER JOIN stkProductos ON 
stkProductos.stkProductos = stkmovicuerpo.Producto_Id
Where
	proMovCierreOrden.proMovCierreOrden =  @proMovCierreOrden and
	conAsientoss.Anulado = 0 and 
	conAsientoss.Posteado = 1 and 
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1
GO
	

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proExistencia.sql*/

---proExistencia 'MP-54-200NG', '00002', 1

DROP PROCEDURE proExistencia
GO
CREATE PROCEDURE proExistencia(
	@Producto_Id VarChar(25),
	@Deposito_Id VarChar(5),
	@Empresa_Id Int
	)
as

SELECT stkProductos.Producto_Id, stkDepositos.Deposito_Id, @Empresa_Id as Empresa_Id, 
ISNULL((SELECT SUM(Cantidad) from stkExistencia WHERE
		stkExistencia.Producto_Id = stkProductos.stkProductos and 
		stkExistencia.Deposito_Id = stkDepositos.stkDepositos and
		stkExistencia.Empresa_Id = @Empresa_Id),0) as Existencia, 
Convert(Numeric(18,4), ISNULL((SELECT SUM(proOrdenProd.Cantidad * (proOrden.Cantidad-proOrden.CantidadTerminada)/ proOrden.Cantidad *
	Case WHEN proOrdenProd.EntradaSalida = 'P' THEN 1 ELSE -1 END) 
	from proOrdenProd, proOrden, proOrdenSegmento 
		WHERE
		proOrden.proOrden = proOrdenProd.proOrden AND 
		proOrdenSegmento.proOrden = proOrden.proOrden and 
		proOrdenSegmento.Empresa_Id = @Empresa_Id and
		proOrdenProd.Producto_Id = stkProductos.stkProductos and 
		proOrdenProd.Deposito_Id = stkDepositos.stkDepositos and
		proOrden.Cantidad > proOrden.CantidadTerminada AND 
		proOrden.Anulado = 0 and 
		proOrden.FechaFin IS NULL ) ,0)) as Produccion
from stkProductos CROSS JOIN stkDepositos
where	
stkProductos.Producto_Id = @Producto_Id and 
stkDepositos.Deposito_Id = @Deposito_Id

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proMovCierreOrden.sql*/
DROP PROCEDURE proMovCierreOrdenGuardar
GO
CREATE PROCEDURE proMovCierreOrdenGuardar
(
@pproMovCierreOrden bigint,
@pproOrden int = NULL,
@pCantidad qCantidadD8,
@pParcial Sino,
@pCausa_Id VarChar(5)=  NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM proMovCierreOrden WHERE (proMovCierreOrden = @pproMovCierreOrden)))
BEGIN 
	UPDATE proMovCierreOrden
	SET		proOrden = @pproOrden,
		Cantidad = @pCantidad,
		Parcial = @pParcial,
		Causa_Id = dbo.FuncFKproCausas(@pCausa_Id)
	WHERE (proMovCierreOrden = @pproMovCierreOrden)
END 
ELSE 
BEGIN 
	INSERT INTO proMovCierreOrden
	(
		proMovCierreOrden,
		proOrden,
		Cantidad,
		Parcial,
		Causa_Id
	)
	VALUES 
	(
		@pproMovCierreOrden,
		@pproOrden,
		@pCantidad,
		@pParcial,
		dbo.FuncFKproCausas(@pCausa_Id)
	)
END 

GO

DROP PROCEDURE proMovCierreOrdenDatos
GO
CREATE PROCEDURE proMovCierreOrdenDatos
(
@pproMovCierreOrden bigint
)
AS
SET NOCOUNT ON 

SELECT genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, genAsiSegmentos.Segmento1C,
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	proMovCierreOrden.proMovCierreOrden, proMovCierreOrden.proOrden,
	proMovCierreOrden.Cantidad, proMovCierreOrden.Parcial,
	proCausas.Causa_Id, proCausas.Descripcion as DescripcionCausas
FROM proMovCierreOrden 
INNER JOIN conAsientos  ON (conAsientos.conAsientos = proMovCierreOrden.proMovCierreOrden)
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
LEFT JOIN proOrden  ON (proOrden.proOrden = proMovCierreOrden.proOrden)
LEFT JOIN proCausas  ON (proCausas.proCausas = proMovCierreOrden.Causa_Id)
WHERE (proMovCierreOrden = @pproMovCierreOrden)
 
 RETURN @@Error 

GO

DROP PROCEDURE proMovCierreOrdenEliminar
GO
CREATE PROCEDURE proMovCierreOrdenEliminar
(
@pproMovCierreOrden bigint
)
AS
SET NOCOUNT ON 

DELETE FROM proMovCierreOrden 
WHERE (proMovCierreOrden = @pproMovCierreOrden)
 
RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proMovCierreRecursos.sql*/
DROP PROCEDURE proMovCierreRecursosInsertar
GO
CREATE PROCEDURE proMovCierreRecursosInsertar
(
@pproMovCierreOrden bigint,
@pRenglon int,
@pRecurso_Id varchar(25),
@pSubRecurso_Id varchar(25) = NULL,
@pCantidad qCantidadD8,
@pCosto qMonedaD4
)
AS
SET NOCOUNT ON 
BEGIN 
	INSERT INTO proMovCierreRecursos
	(
		proMovCierreOrden,
		Renglon,
		Recurso_Id,
		SubRecurso_Id,
		Cantidad,
		Costo
	)
	VALUES 
	(
		@pproMovCierreOrden,
		@pRenglon,
		dbo.FuncFKproRecursos(@pRecurso_Id),
		dbo.FuncFKproSubRecursos(@pSubRecurso_Id),
		@pCantidad,
		@pCosto
	)
END 

GO


DROP PROCEDURE proMovCierreRecursosDatos
GO
CREATE PROCEDURE proMovCierreRecursosDatos
(
@pproMovCierreOrden bigint,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

SELECT proMovCierreRecursos.proMovCierreOrden, proMovCierreRecursos.Renglon,
	proRecursos.Recurso_Id, proRecursos.Descripcion as DescripcionRecursos, 
	proSubRecursos.SubRecurso_Id, proSubRecursos.Descripcion as DescripcionSubRecurso,
	proMovCierreRecursos.Cantidad,
	proMovCierreRecursos.Costo
FROM proMovCierreRecursos 
INNER JOIN proMovCierreOrden  ON (proMovCierreOrden.proMovCierreOrden = proMovCierreRecursos.proMovCierreOrden)
INNER JOIN proRecursos  ON (proRecursos.proRecursos = proMovCierreRecursos.Recurso_Id)
LEFT JOIN proSubRecursos ON proSubRecursos.proSubRecursos = proMovCierreRecursos.SubRecurso_Id
WHERE (proMovCierreRecursos.proMovCierreOrden = @pproMovCierreOrden)
AND (Renglon = ISNULL(@pRenglon,Renglon))
 
 RETURN @@Error 

GO

DROP PROCEDURE proMovCierreRecursosEliminar
GO
CREATE PROCEDURE proMovCierreRecursosEliminar
(
@pproMovCierreOrden bigint,
@pRenglon int = null
)
AS
SET NOCOUNT ON 

DELETE FROM proMovCierreRecursos 
WHERE (proMovCierreOrden = @pproMovCierreOrden)
AND (Renglon = ISNULL(@pRenglon,Renglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proMovCierreTrabajos3.sql*/
DROP PROCEDURE proMovCierreTrabajos3Insertar
GO
CREATE PROCEDURE proMovCierreTrabajos3Insertar
(
@pproMovCierreOrden bigint,
@pRenglon int,
@pTrabajo3_Id varchar(25),
@pCantidad qCantidadD8,
@pMoneda_Id varchar(3),
@pProveed_Id VarChar(15),
@pPrecio qMonedaD4, 
@pPrecioOriginal qMonedaD4 
)
AS
SET NOCOUNT ON 

	INSERT INTO proMovCierreTrabajos3
	(
		proMovCierreOrden,
		Renglon,
		Trabajo3_Id,
		Cantidad,
		Moneda_Id,
		Proveed_Id,
		Precio, 
		PrecioOriginal
	)
	VALUES 
	(
		@pproMovCierreOrden,
		@pRenglon,
		dbo.FuncFKproTrabajo3(@pTrabajo3_Id),
		@pCantidad,
		dbo.FuncFKgenMonedas(@pMoneda_Id),
		dbo.FuncFKcomProveedores(@pProveed_Id),
		@pPrecio, 
		@pPrecioOriginal
	)
GO

DROP PROCEDURE proMovCierreTrabajos3Datos
GO
CREATE PROCEDURE proMovCierreTrabajos3Datos
(
@pproMovCierreOrden bigint,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

SELECT proMovCierreTrabajos3.proMovCierreOrden,  proMovCierreTrabajos3.Renglon,
	proTrabajo3.Trabajo3_Id, proTrabajo3.Descripcion as DescripcionTrabajo3, 
	proMovCierreTrabajos3.Cantidad,
	genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas, 
	comProveedores.Proveed_Id, comProveedores.RazonSocial ,
	proMovCierreTrabajos3.Precio, proMovCierreTrabajos3.PrecioOriginal
FROM proMovCierreTrabajos3 
INNER JOIN proMovCierreOrden  ON (proMovCierreOrden.proMovCierreOrden = proMovCierreTrabajos3.proMovCierreOrden)
INNER JOIN proTrabajo3  ON (proTrabajo3.proTrabajo3 = proMovCierreTrabajos3.Trabajo3_Id)
INNER JOIN genMonedas  ON (genMonedas.genMonedas = proMovCierreTrabajos3.Moneda_Id)
INNER JOIN comProveedores  ON (comProveedores.genEntidades = proMovCierreTrabajos3.Proveed_Id)
WHERE (proMovCierreTrabajos3.proMovCierreOrden = @pproMovCierreOrden)
AND (proMovCierreTrabajos3.Renglon = ISNULL(@pRenglon,proMovCierreTrabajos3.Renglon))
 
 RETURN @@Error 

GO

DROP PROCEDURE proMovCierreTrabajos3Eliminar
GO
CREATE PROCEDURE proMovCierreTrabajos3Eliminar
(
@pproMovCierreOrden bigint,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM proMovCierreTrabajos3 
WHERE (proMovCierreOrden = @pproMovCierreOrden)
AND (proMovCierreTrabajos3.Renglon = ISNULL(@pRenglon,proMovCierreTrabajos3.Renglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proOrden.sql*/
drop procedure proOrdenDatos
go
create procedure proOrdenDatos
(
@pSegmento_Id varchar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pEmpresa_Id int
)
as
declare @Orden int
set @Orden=(select proOrden from proOrdenSegmento where
Segmento_Id=dbo.FuncFKgenSegmentos(@pSegmento_Id) and
Segmento1N=@pSegmento1N and Segmento2N=@pSegmento2N AND
Segmento3N=@pSegmento3N and Segmento4N=@pSegmento4N and
Segmento1C=@pSegmento1C and Segmento2C=@pSegmento2C and 
Segmento4C=@pSegmento3C and Segmento4C=@pSegmento4C and
Empresa_Id=@pEmpresa_Id
)
select proOrden.proOrden, genSegmentos.Segmento_Id, proOrdenSegmento.Segmento1N, proOrdenSegmento.Segmento2N, proOrdenSegmento.Segmento3N, proOrdenSegmento.Segmento4N,
proOrdenSegmento.Segmento1C, proOrdenSegmento.Segmento2C, proOrdenSegmento.Segmento3C, proOrdenSegmento.Segmento4C,
stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProducto, proOrden.TamBatch, proRecetas.Receta_Id,
proRecetas.Descripcion as DescripcionReceta, proOrden.Observaciones, Cantidad, CantidadIngresada, FechaEmision, CantidadProgramada, FechaNecesidad, FechaProduccion, FechaFin,
CantidadTerminada, CierreAutomatico, stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionMedida, Factor ,
	proOrden.Anulado, genUsuarios.Usuario_Id
from proOrden
inner join stkProductos on stkProductos=proOrden.Producto_Id
inner join proRecetas on proRecetas=proOrden.Receta_Id
inner join proOrdenSegmento on proOrdenSegmento.proOrden=proOrden.proOrden
inner join genSegmentos on genSegmentos.genSegmentos=proOrdenSegmento.Segmento_Id
left join stkUniMed on stkUniMed.stkUniMed=proOrden.Medida_Id
INNER JOIN genUsuarios ON genUsuarios.genUsuarios = proOrden.Usuario_Id
where proOrden.proOrden=@Orden

select proOrden, Renglon, stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProducto, EntradaSalida, stkUniMed.Medida_Id,
stkUniMed.Descripcion as DescripcionMedida, Cantidad, PorcentajeCosto, stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDeposito, TomaDepoT3 from proOrdenProd
inner join stkProductos on stkProductos=proOrdenProd.Producto_Id
inner join stkUniMed on stkUniMed=proOrdenProd.Medida_Id
inner join stkDepositos on stkDepositos=proOrdenProd.Deposito_Id
where proOrdenProd.proOrden=@Orden

select proOrden, Renglon, proRecursos.Recurso_Id, proRecursos.Descripcion as DescripcionRecurso, Cantidad , 
	proRecursos.UsaSubRecurso
from proOrdenRecursos
inner join proRecursos on proRecursos= proOrdenRecursos.Recurso_Id
where proOrdenRecursos.proOrden=@Orden

select proOrden, Renglon, proTrabajo3.Trabajo3_Id, proTrabajo3.Descripcion as DescripcionTrabajo3, comProveedores.Proveed_Id, comProveedores.RazonSocial from proOrdenTrabajos3
inner join comProveedores on comProveedores.genEntidades=proOrdenTrabajos3.Proveed_Id
inner join proTrabajo3 on proTrabajo3.proTrabajo3=proOrdenTrabajos3.proTrabajo3
where proOrdenTrabajos3.proOrden=@Orden

select proOrden, Renglon, proSubRecursos.Recurso_Id, proSubRecursos.Descripcion as DescripcionRecurso, 
	Cantidad 
from proOrdenSubRecurso 
inner join proSubRecursos on proSubRecursos= proOrdenSubRecurso.SubRecurso_Id
where proOrdenSubRecurso.proOrden=@Orden

SELECT proOrdenProdSerie.proOrden, proOrdenProdSerie.Renglon, proOrdenProdSerie.Serie,proOrdenProdSerie.Cantidad,stkSerieVencimiento.Vencimiento, ' ' AS Ubicacion_Id
FROM proOrdenProdSerie 
INNER JOIN proOrdenProd  ON (proOrdenProd.proOrden = proOrdenProdSerie.proOrden) AND (proOrdenProd.Renglon = proOrdenProdSerie.Renglon)
INNER JOIN proOrden ON proOrdenProd.proOrden = proOrden.proOrden
INNER JOIN proOrdenSegmento on	proOrden.proOrden = proOrdenSegmento.proOrden
Left Join stkSerieVencimiento ON stkSerieVencimiento.Serie =  proOrdenProdSerie.Serie And stkSerieVencimiento.Producto_Id = proOrdenProd.Producto_Id And
		stkSerieVencimiento.Empresa_Id = proOrdenSegmento.Empresa_Id
WHERE (proOrdenProdSerie.proOrden = @Orden)
AND (proOrdenProdSerie.Renglon = @Orden)

go

DROP PROCEDURE proOrdenGuardar
GO
CREATE PROCEDURE proOrdenGuardar
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20),
@pProducto_Id varchar(25) = NULL,
@pTamBatch qCantidadD8,
@pReceta_Id varchar(25) = NULL,
@pObservaciones varchar(max),
@pCantidad qCantidadD8,
@pCantidadProgramada qCantidadD8,
@pCantidadTerminada qCantidadD8,
@pCantidadIngresada qCantidadD8,
@pFechaEmision datetime,
@pFechaNecesidad datetime,
@pFechaProduccion datetime = NULL,
@pFechaFin datetime = NULL,
@pMedida_Id varchar(5),
@pFactor qMonedaD8, 
@pAnulado bit, 
@pUsuario_Id Int

)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int= (Select proOrden
 from proOrdenSegmento
 Where
	proOrdenSegmento.Empresa_id = @pEmpresa_Id and 
	proOrdenSegmento.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	proOrdenSegmento.Segmento1N = @pSegmento1N and 
	proOrdenSegmento.Segmento2N = @pSegmento2N and 
	proOrdenSegmento.Segmento3N = @pSegmento3N and 
	proOrdenSegmento.Segmento4N = @pSegmento4N and 
	proOrdenSegmento.Segmento1C = @pSegmento1C and 
	proOrdenSegmento.Segmento2C = @pSegmento2C and 
	proOrdenSegmento.Segmento3C = @pSegmento3C and 
	proOrdenSegmento.Segmento4C = @pSegmento4C )

IF (EXISTS (SELECT 1 FROM proOrden WHERE (proOrden = @lIdentidad)))
BEGIN 
	UPDATE proOrden
			
	SET	@lIdentidad=proOrden.proOrden,
		Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id),
		TamBatch = @pTamBatch,
		Receta_Id = dbo.FuncFKproRecetas(@pReceta_Id),
		Observaciones = @pObservaciones,
		Cantidad=@pCantidad,
		CantidadProgramada=@pCantidadProgramada ,
		CantidadTerminada=@pCantidadTerminada ,
		FechaEmision= @pFechaEmision ,
		FechaNecesidad= @pFechaNecesidad ,
		FechaProduccion= @pFechaProduccion ,
		FechaFin= @pFechaFin ,
		Medida_Id= dbo.FuncFKstkUniMed(@pMedida_Id),
		Factor=@pFactor,
		CantidadIngresada =@pCantidadIngresada, 
		Anulado = @pAnulado, 
		Usuario_Id = @pUsuario_Id

	WHERE (proOrden = @lIdentidad)
END 
ELSE 
BEGIN 
	INSERT INTO proOrden
	(
		
		Producto_Id,
		TamBatch,
		Receta_Id,
		Observaciones,
		Cantidad,
		CantidadProgramada ,
		CantidadTerminada ,
		FechaEmision ,
		FechaNecesidad ,
		FechaProduccion ,
		FechaFin ,
		Medida_Id ,
		Factor,
		CantidadIngresada, 
		Anulado, 
		Usuario_Id
	)
	VALUES 
	(
		
		dbo.FuncFKstkProductos(@pProducto_Id),
		@pTamBatch,
		dbo.FuncFKproRecetas(@pReceta_Id),
		@pObservaciones,
		@pCantidad,
		@pCantidadProgramada ,
		@pCantidadTerminada ,
		@pFechaEmision ,
		@pFechaNecesidad ,
		@pFechaProduccion ,
		@pFechaFin ,
		dbo.FuncFKstkUniMed(@pMedida_Id) ,
		@pFactor,
		@pCantidadIngresada, 
		@pAnulado,
		@pUsuario_Id
	)
SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE proOrdenEliminar
GO
CREATE PROCEDURE proOrdenEliminar
(
@pSegmento_Id varchar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pEmpresa_Id int, 
@pUsuario_Id int
)
as

SET NOCOUNT ON 

declare @Orden int
set @Orden=(select proOrden from proOrdenSegmento where
Segmento_Id=dbo.FuncFKgenSegmentos(@pSegmento_Id) and
Segmento1N=@pSegmento1N and Segmento2N=@pSegmento2N AND
Segmento3N=@pSegmento3N and Segmento4N=@pSegmento4N and
Segmento1C=@pSegmento1C and Segmento2C=@pSegmento2C and 
Segmento4C=@pSegmento3C and Segmento4C=@pSegmento4C and
Empresa_Id=@pEmpresa_Id
)

update proOrden set Anulado=1, Usuario_Id = @pUsuario_Id where proOrden=@Orden

 
 RETURN @@Error 

GO

DROP PROCEDURE proOrdenTerminar

GO



CREATE PROCEDURE proOrdenTerminar(
	@proOrden INT, 
	@pCantidad Numeric(18,8),
	@pFechaFin DateTime = NULL
)
AS

Update proOrden SET CantidadTerminada = CantidadTerminada + @pCantidad, 
	FechaFin = @pFechaFin 
	Where
		proOrden = @proOrden

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proOrdenCerrar.sql*/
DROP Function dbo.QueT3Cantidad
GO
CREATE Function dbo.QueT3Cantidad(
	@Producto_Id int, 
	@Medida_Id int
)
returns Numeric(18,8) 
as
begin
declare @Ret Numeric(18,8)

	IF (select medida_id from stkProductos where stkProductos = @Producto_Id ) = @Medida_Id 
	begin
			return 1.000
	end
	set @Ret = (select Factor from stkArtiUM where
				stkArtiUM.Producto_Id = @Producto_Id and 
				Medida_Id = @Medida_Id)

	return ISNULL(@Ret,1)

end
GO
-- proOrdenCerrarrDatos 'OPRO',4,0,0,0,'0001',' ', ' ', ' ',1
DROP PROCEDURE proOrdenCerrarrDatos
GO

CREATE PROCEDURE proOrdenCerrarrDatos
(
	@pSegmento_Id varchar(10),
	@pSegmento1N int,
	@pSegmento2N int,
	@pSegmento3N int,
	@pSegmento4N int,
	@pSegmento1C varchar(20),
	@pSegmento2C varchar(20),
	@pSegmento3C varchar(20),
	@pSegmento4C varchar(20),
	@pEmpresa_Id int

)
AS
DECLARE @proMovCierreOrden int

set @proMovCierreOrden = (select proMovCierreOrden.proMovCierreOrden
	from proMovCierreOrden 
	inner join genAsiSegmentos ON proMovCierreOrden.proMovCierreOrden =  genAsiSegmentos.Asiento_Id
	INNER JOIN genSegmentos ON  genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	Where
	genSegmentos.Segmento_Id = @pSegmento_Id AND
	genAsiSegmentos.Segmento1N = @pSegmento1N AND 
	genAsiSegmentos.Segmento2N = @pSegmento2N AND 
	genAsiSegmentos.Segmento3N = @pSegmento3N AND 
	genAsiSegmentos.Segmento4N = @pSegmento4N AND 
	genAsiSegmentos.Segmento1C = @pSegmento1C AND 
	genAsiSegmentos.Segmento2C = @pSegmento2C AND 
	genAsiSegmentos.Segmento3C = @pSegmento3C AND 
	genAsiSegmentos.Segmento4C = @pSegmento4C )

SELECT 
	proMovCierreOrden.proOrden, 
	genSegmentos.Segmento_Id Segmento_Id, genAsiSegmentos.Segmento1N , 
	genAsiSegmentos.Segmento2N , genAsiSegmentos.Segmento3N , 	genAsiSegmentos.Segmento4N ,
	genAsiSegmentos.Segmento1C , genAsiSegmentos.Segmento2C , genAsiSegmentos.Segmento3C , 	
	genAsiSegmentos.Segmento4C , conasientos.Observaciones,
	conAsientos.Fecha  FechaFin,
	proMovCierreOrden.Cantidad as CantIngPendiente,
	conAsientos.Anulado, case when proMovCierreOrden.Parcial=1 then '2' ELSE '1' END  TipoCierre, 
	proCausas.Causa_Id , proCausas.Descripcion DescripcionCausa, 
	proMovCierreOrden.proMovCierreOrden
FROM proMovCierreOrden Inner join genAsiSegmentos on 
proMovCierreOrden.proMovCierreOrden = genAsiSegmentos.Asiento_Id
INNER JOIN conAsientos ON 
conAsientos.conAsientos = proMovCierreOrden.proMovCierreOrden
INNER JOIN genUsuarios ON genUsuarios.genUsuarios = conAsientos.Usuario_Id
INNER JOIN genSegmentos ON  genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
LEFT JOIN proCausas ON proCausas.proCausas = proMovCierreOrden.Causa_Id
where 
genSegmentos.Segmento_Id = @pSegmento_Id AND
genAsiSegmentos.Segmento1N = @pSegmento1N AND 
genAsiSegmentos.Segmento2N = @pSegmento2N AND 
genAsiSegmentos.Segmento3N = @pSegmento3N AND 
genAsiSegmentos.Segmento4N = @pSegmento4N AND 
genAsiSegmentos.Segmento1C = @pSegmento1C AND 
genAsiSegmentos.Segmento2C = @pSegmento2C AND 
genAsiSegmentos.Segmento3C = @pSegmento3C AND 
genAsiSegmentos.Segmento4C = @pSegmento4C 

-- orden de produccion
SELECT 
	genSegmentos.Segmento_Id, proOrdenSegmento.Segmento1N, proOrdenSegmento.Segmento2N, proOrdenSegmento.Segmento3N, proOrdenSegmento.Segmento4N,
	proOrdenSegmento.Segmento1C, proOrdenSegmento.Segmento2C, proOrdenSegmento.Segmento3C, proOrdenSegmento.Segmento4C,
	stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProducto, 	
	proRecetas.Receta_Id, 	proRecetas.Descripcion as DescripcionReceta, 
	proOrden.Cantidad, proOrden.CantidadIngresada, 
	proOrden.FechaEmision, proOrden.FechaNecesidad, proOrden.FechaProduccion,
	proOrden.CantidadTerminada, (proOrden.Cantidad - proOrden.CantidadTerminada)/proOrden.Factor as CantPendiente,
	stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionMedida, Factor 
FROM proMovCierreOrden 
INNER JOIN proOrden ON proOrden.proOrden = promovCierreOrden.proOrden
inner join proOrdenSegmento on proOrdenSegmento.proOrden=proOrden.proOrden
inner join stkProductos on stkProductos=proOrden.Producto_Id
inner join proRecetas on proRecetas=proOrden.Receta_Id
inner join genSegmentos on genSegmentos.genSegmentos=proOrdenSegmento.Segmento_Id
INNER join stkUniMed on stkUniMed.stkUniMed=proOrden.Medida_Id
Where
	proMovCierreOrden.proMovCierreOrden = @proMovCierreOrden



SELECT proMovCierreOrden.proOrden, stkMoviCuerpo.Renglon, 
	'C' EntradaSalida, 
	stkUniMed.Medida_Id, 
	stkProductos.Producto_Id, stkProductos.Descripcion,
	stkMoviCuerpo.Cantidad,
	stkDepositos.Deposito_Id
From proMovCierreOrden 
inner join proOrdenStock ON proOrdenStock.proMovCierreOrden = proMovCierreOrden.proMovCierreOrden
inner join proOrden ON proMovCierreOrden.proOrden = proOrden.proOrden
inner join stkMoviCuerpo ON stkMoviCuerpo.stkMoviCabe = proOrdenStock.stkMoviCabe
INNER JOIN stkProductos ON stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
INNER JOIN stkDepositos ON stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id
INNER JOIN stkUniMed ON  stkUniMed.stkUniMed = stkMoviCuerpo.Medida_Id
INNER JOIN stkMoviCabe on  stkMoviCabe.stkMoviCabe = proOrdenStock.stkMoviCabe
WHERE
	proMovCierreOrden.proMovCierreOrden = @proMovCierreOrden and 
	stkMoviCabe.Signo = -1

ORDER BY 3,2

-- Trbajos de 3
SELECT proMovCierreOrden.proOrden, proMovCierreTrabajos3.Renglon, 
	proTrabajo3.Trabajo3_Id, proTrabajo3.Descripcion, 
	comProveedores.Proveed_Id, comProveedores.RazonSocial, 
	proMovCierreTrabajos3.Cantidad, 
	proMovCierreTrabajos3.PrecioOriginal as Preciouni, 
	genMonedas.Moneda_Id, 
	CASE WHEN proMovCierreTrabajos3.PrecioOriginal != 0 THEN 
		ROUND(proMovCierreTrabajos3.Precio/proMovCierreTrabajos3.PrecioOriginal,4) ELSE 1 END as Cambio
FROM proMovCierreOrden 
INNER JOIN proMovCierreTrabajos3 on proMovCierreTrabajos3.proMovCierreOrden = proMovCierreOrden.proMovCierreOrden
INNER JOIN proTrabajo3 ON proTrabajo3.proTrabajo3 =  proMovCierreTrabajos3.Trabajo3_Id
inner join proTrabajo3Prov on proTrabajo3Prov.Trabajo3_Id =  proMovCierreTrabajos3.Trabajo3_Id and 
			proTrabajo3Prov.Proveedor_Id = proMovCierreTrabajos3.Proveed_Id
INNER JOIN comProveedores  on comProveedores.genEntidades =  proMovCierreTrabajos3.Proveed_Id
inner join genMonedas ON proTrabajo3Prov.Moneda_Id = proMovCierreTrabajos3.Moneda_Id
WHERE
	proMovCierreTrabajos3.proMovCierreOrden = @proMovCierreOrden
ORDER BY 2
-- Recursos
select proMovCierreOrden.proOrden, proMovCierreRecursos.Renglon, 
	proRecursos.Recurso_Id, proRecursos.Descripcion,
	proSubRecursos.SubRecurso_Id as SubRecurso_Id, proSubRecursos.Descripcion as DescripcionSubRecurso, 
	Cast(case when proSubRecursos.SubRecurso_Id is null then 0 else  1 end  as bit) as UsaSubRecurso,
	proMovCierreRecursos.Cantidad, proMovCierreRecursos.Costo
From proMovCierreOrden 
INNER JOIN proMovCierreRecursos ON proMovCierreRecursos.proMovCierreOrden = proMovCierreOrden.proMovCierreOrden
INNER JOIN proRecursos ON  proRecursos.proRecursos = proMovCierreRecursos.Recurso_Id
LEFT JOIN proSubRecursos ON proSubRecursos.proSubRecursos = proMovCierreRecursos.SubRecurso_Id
Where
	proMovCierreOrden.proMovCierreOrden = @proMovCierreOrden
ORDER BY 2

-- Produccciones 
SELECT proMovCierreOrden.proOrden, stkMoviCuerpo.Renglon AS Renglon, 
	'P' EntradaSalida, 
	stkUniMed.Medida_Id, 
	stkProductos.Producto_Id, stkProductos.Descripcion,
	stkMoviCuerpo.Cantidad,
	proOrdenStockCosto.PorcentajeCosto , 
	stkDepositos.Deposito_Id, '' ParaPegar
From proMovCierreOrden 
inner join proOrdenStock ON proOrdenStock.proMovCierreOrden = proMovCierreOrden.proMovCierreOrden
inner join proOrden ON proMovCierreOrden.proOrden = proOrden.proOrden
inner join stkMoviCuerpo ON stkMoviCuerpo.stkMoviCabe = proOrdenStock.stkMoviCabe
INNER JOIN stkProductos ON stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
INNER JOIN stkDepositos ON stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id
INNER JOIN stkUniMed ON  stkUniMed.stkUniMed = stkMoviCuerpo.Medida_Id
INNER JOIN stkMoviCabe on  stkMoviCabe.stkMoviCabe = proOrdenStock.stkMoviCabe
LEFT JOIN proOrdenStockCosto ON proOrdenStockCosto.stkMoviCabe = stkMoviCuerpo.stkMoviCabe and 
		proOrdenStockCosto.Renglon = stkMoviCuerpo.Renglon and 
		proOrdenStockCosto.proMovCierreOrden = proMovCierreOrden.proMovCierreOrden

WHERE
	proMovCierreOrden.proMovCierreOrden = @proMovCierreOrden and 
	stkMoviCabe.Signo = 1
ORDER BY 2,3

-- SERIES consumo
SELECT stkMoviSerie.stkMoviCabe, stkMoviSerie.Renglon, stkMoviSerie.Serie, stkMoviSerie.Cantidad, stkSerieVencimiento.Vencimiento,
	stkUbicaciones.Ubicacion_Id
FROM proOrdenStock INNER JOIN 
stkMoviSerie ON stkMoviSerie.stkMoviCabe = proOrdenStock.stkMoviCabe
INNER JOIN stkMoviCuerpo ON stkMoviCuerpo.stkMoviCabe = stkMoviSerie.stkMoviCabe AND stkMoviCuerpo.Renglon = stkMoviSerie.Renglon
INNER JOIN stkMoviCabe ON  stkMoviCabe.stkMoviCabe =  stkMoviCuerpo.stkMoviCabe
Inner Join conAsientos On conAsientos.conAsientos = stkMoviCuerpo.stkMoviCabe
Left Join stkSerieVencimiento On stkSerieVencimiento.Serie = stkMoviSerie.Serie And stkSerieVencimiento.Producto_Id = stkMoviCuerpo.Producto_Id And
		stkSerieVencimiento.Empresa_Id = conAsientos.Empresa_Id
LEFT Join (stkMoviSerieUbicacion INNER JOIN stkUbicaciones ON 
		stkMoviSerieUbicacion.Ubicacion_Id = stkUbicaciones.stkUbicaciones) ON 
		stkMoviSerieUbicacion.stkMoviCabe = stkMoviSerie.stkMoviCabe and 
		stkMoviSerieUbicacion.Renglon = stkMoviSerie.Renglon and 
		stkMoviSerieUbicacion.Serie = stkMoviSerie.Serie

WHERE proOrdenStock.proMovCierreOrden = @proMovCierreOrden and 
stkMoviCabe.Signo= -1 

-- SERIES Produccion
SELECT stkMoviSerie.stkMoviCabe, stkMoviSerie.Renglon AS Renglon , stkMoviSerie.Serie, stkMoviSerie.Cantidad, stkSerieVencimiento.Vencimiento,
	stkUbicaciones.Ubicacion_Id
FROM proOrdenStock INNER JOIN 
stkMoviSerie ON stkMoviSerie.stkMoviCabe = proOrdenStock.stkMoviCabe
INNER JOIN stkMoviCuerpo ON stkMoviCuerpo.stkMoviCabe = stkMoviSerie.stkMoviCabe AND stkMoviCuerpo.Renglon = stkMoviSerie.Renglon
INNER JOIN stkMoviCabe ON  stkMoviCabe.stkMoviCabe =  stkMoviCuerpo.stkMoviCabe
Inner Join conAsientos On conAsientos.conAsientos = stkMoviCuerpo.stkMoviCabe
Left Join stkSerieVencimiento On stkSerieVencimiento.Serie = stkMoviSerie.Serie And stkSerieVencimiento.Producto_Id = stkMoviCuerpo.Producto_Id And
		stkSerieVencimiento.Empresa_Id = conAsientos.Empresa_Id
LEFT Join (stkMoviSerieUbicacion INNER JOIN stkUbicaciones ON 
		stkMoviSerieUbicacion.Ubicacion_Id = stkUbicaciones.stkUbicaciones) ON 
		stkMoviSerieUbicacion.stkMoviCabe = stkMoviSerie.stkMoviCabe and 
		stkMoviSerieUbicacion.Renglon = stkMoviSerie.Renglon and 
		stkMoviSerieUbicacion.Serie = stkMoviSerie.Serie
WHERE proOrdenStock.proMovCierreOrden = @proMovCierreOrden and 
stkMoviCabe.Signo= 1 

-- UBICACIONES Consumo

select stkMoviUbicacion.stkMoviCabe, stkMoviUbicacion.Renglon, 
	stkProductos.Producto_Id, stkDepositos.Deposito_Id, stkUbicaciones.Ubicacion_Id, 
		stkMoviUbicacion.Cantidad, stkMoviUbicacion.CantidadAlterna
from proOrdenStock INNER JOIN stkMoviUbicacion  ON stkMoviUbicacion.stkMoviCabe = proOrdenStock.stkMoviCabe
INNER JOIN stkMoviCuerpo ON stkMoviUbicacion.stkMoviCabe = stkMoviCuerpo.stkMoviCabe and 
							stkMoviUbicacion.Renglon = stkMoviCuerpo.Renglon
INNER JOIN stkProductos ON stkProductos.stkProductos = stkMoviCuerpo.Producto_Id 
INNER JOIN stkDepositos ON stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id
INNER JOIN stkMoviCabe ON stkMoviCabe.stkMoviCabe= stkMoviCuerpo.stkMoviCabe
INNER JOIN stkUbicaciones ON  stkUbicaciones.stkUbicaciones= stkMoviUbicacion.Ubicacion_Id
WHERE
	proOrdenStock.proMovCierreOrden = @proMovCierreOrden and 
	stkMoviCabe.Signo = -1 
	


Select stkMoviUbicacion.stkMoviCabe, stkMoviUbicacion.Renglon, 
	stkProductos.Producto_Id, stkDepositos.Deposito_Id, stkUbicaciones.Ubicacion_Id, 
		stkMoviUbicacion.Cantidad, stkMoviUbicacion.CantidadAlterna
from proOrdenStock INNER JOIN stkMoviUbicacion  ON stkMoviUbicacion.stkMoviCabe = proOrdenStock.stkMoviCabe
INNER JOIN stkMoviCuerpo ON stkMoviUbicacion.stkMoviCabe = stkMoviCuerpo.stkMoviCabe and 
							stkMoviUbicacion.Renglon = stkMoviCuerpo.Renglon
INNER JOIN stkProductos ON stkProductos.stkProductos = stkMoviCuerpo.Producto_Id 
INNER JOIN stkDepositos ON stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id
INNER JOIN stkMoviCabe ON stkMoviCabe.stkMoviCabe= stkMoviCuerpo.stkMoviCabe
INNER JOIN stkUbicaciones ON  stkUbicaciones.stkUbicaciones= stkMoviUbicacion.Ubicacion_Id
WHERE
	proOrdenStock.proMovCierreOrden = @proMovCierreOrden and 
	stkMoviCabe.Signo = 1

GO


DROP  PROCEDURE proOrdenCerrarrCalcular
GO
CREATE PROCEDURE proOrdenCerrarrCalcular(
	@pproOrden INT,
	@pCantidad Decimal
)
as

SELECT @pproOrden as proOrden, @pCantidad Cantidad

--Update proOrden set Factor = 1 where Factor = 0 and proOrden = @pproOrden

SELECT 
	genSegmentos.Segmento_Id, proOrdenSegmento.Segmento1N, proOrdenSegmento.Segmento2N, proOrdenSegmento.Segmento3N, proOrdenSegmento.Segmento4N,
	proOrdenSegmento.Segmento1C, proOrdenSegmento.Segmento2C, proOrdenSegmento.Segmento3C, proOrdenSegmento.Segmento4C,
	stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProducto, 	
	proRecetas.Receta_Id, 	proRecetas.Descripcion as DescripcionReceta, 
	proOrden.Cantidad, proOrden.CantidadIngresada, 
	proOrden.FechaEmision, proOrden.FechaNecesidad, proOrden.FechaProduccion,
	proOrden.CantidadTerminada, (proOrden.Cantidad - proOrden.CantidadTerminada)/proOrden.Factor as CantPendiente,
	stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionMedida, Factor 
FROM proOrden 
inner join proOrdenSegmento on proOrdenSegmento.proOrden=proOrden.proOrden
inner join stkProductos on stkProductos=proOrden.Producto_Id
inner join proRecetas on proRecetas=proOrden.Receta_Id
inner join genSegmentos on genSegmentos.genSegmentos=proOrdenSegmento.Segmento_Id
INNER join stkUniMed on stkUniMed.stkUniMed=proOrden.Medida_Id
Where
	proOrden.proOrden = @pproOrden

-- CONSUMOS
SELECT proOrdenProd.proOrden, proOrdenProd.Renglon, 
	proOrdenProd.EntradaSalida, 
	stkUniMed.Medida_Id, 
	stkProductos.Producto_Id, stkProductos.Descripcion,
	Convert(numeric(18,4) , proOrdenProd.Cantidad / proOrden.Cantidad * @pCantidad) as Cantidad,
	case when proOrdenProd.TomaDepoT3 = 0 THEN 	stkDepositos.Deposito_Id ELSE
		(SELECT MAX( stkDepistosT3.Deposito_Id) FROM stkDepositos  stkDepistosT3, proOrdenTrabajos3, proTrabajo3Prov 
			WHERE
				proOrdenTrabajos3.proOrden = proOrden.proOrden AND 
				proTrabajo3Prov.Trabajo3_Id = proOrdenTrabajos3.proTrabajo3 AND 
				proTrabajo3Prov.Proveedor_Id = proOrdenTrabajos3.Proveed_Id AND 
				stkDepistosT3.stkDepositos = proTrabajo3Prov.Deposito_Id) END as Deposito_Id
From proOrdenProd inner join proOrden ON 
proOrdenProd.proOrden = proOrden.proOrden
INNER JOIN stkProductos ON stkProductos.stkProductos = proOrdenProd.Producto_Id
INNER JOIN stkDepositos ON stkDepositos.stkDepositos = proOrdenProd.Deposito_Id
INNER JOIN stkUniMed ON  stkUniMed.stkUniMed = proOrdenProd.Medida_Id
WHERE
	proOrden.proOrden = @pproOrden  and 
	proOrdenProd.EntradaSalida = 'C'

SELECT proOrdenTrabajos3.proOrden, proOrdenTrabajos3.Renglon, 
	proTrabajo3.Trabajo3_Id, proTrabajo3.Descripcion, 
	comProveedores.Proveed_Id, comProveedores.RazonSocial, 
	Convert(numeric(18,4) , proOrden.Cantidad / dbo.QueT3Cantidad(proOrden.Producto_id, 
		proTrabajo3Prov.Medida_Id)  * @pCantidad / proOrden.Cantidad) as Cantidad, 
		Convert(numeric(18,4),proTrabajo3Prov.Precio /  proTrabajo3Prov.Cantidad) as Preciouni, 
		 genMonedas.Moneda_Id
FROM proOrdenTrabajos3 inner join proTrabajo3 ON
proTrabajo3.proTrabajo3 =  proOrdenTrabajos3.proTrabajo3
inner join proTrabajo3Prov on 
proTrabajo3Prov.Trabajo3_Id =  proOrdenTrabajos3.proTrabajo3  and 
proTrabajo3Prov.Proveedor_Id = proOrdenTrabajos3.Proveed_Id
INNER JOIN comProveedores  on 
comProveedores.genEntidades =  proTrabajo3Prov.Proveedor_Id
INNER JOIN proOrden on 
proOrden.proOrden = proOrdenTrabajos3.proOrden
inner join genMonedas ON
proTrabajo3Prov.Moneda_Id = genMonedas.genMonedas
WHERE
	proOrden.proOrden = @pproOrden

select proOrdenRecursos.proOrden, proOrdenRecursos.Renglon, 
	proRecursos.Recurso_Id, proRecursos.Descripcion,
	' ' as SubRecurso_Id, ' ' as DescripcionSubRecurso, proRecursos.UsaSubRecurso,
	Convert(numeric(18,2), proOrdenRecursos.Cantidad * @pCantidad/ proOrden.Cantidad) as Cantidad
	, proRecursos.Costo
From proOrdenRecursos
INNER JOIN proRecursos ON 
proRecursos.proRecursos = proOrdenRecursos.Recurso_Id
INNER JOIN proOrden ON
proOrden.proOrden = proOrdenRecursos.proOrden
Where
	proRecursos.UsaSubRecurso = 0 and 
	proOrden.proOrden = @pproOrden
UNION ALL
select proOrdenRecursos.proOrden, proOrdenRecursos.Renglon, 
	proRecursos.Recurso_Id, proRecursos.Descripcion,
	proSubRecursos.SubRecurso_Id, proSubRecursos.Descripcion as DescripcionSubRecurso,
	proRecursos.UsaSubRecurso,
	Convert(numeric(18,2), proOrdenSubRecurso.Cantidad * @pCantidad/ proOrden.Cantidad) as Cantidad
	, proSubRecursos.Costo
From proOrdenRecursos
INNER JOIN proRecursos ON 
proRecursos.proRecursos = proOrdenRecursos.Recurso_Id
INNER JOIN proOrden ON
proOrden.proOrden = proOrdenRecursos.proOrden
INNER JOIN proOrdenSubRecurso ON
proOrdenSubRecurso.proOrden = proOrdenRecursos.proOrden AND 
proOrdenSubRecurso.Renglon = proOrdenRecursos.Renglon
inner join proSubRecursos on 
proSubRecursos.proSubRecursos = proOrdenSubRecurso.SubRecurso_Id
Where
	proRecursos.UsaSubRecurso = 1 and 
	proOrden.proOrden = @pproOrden


-- producciones
SELECT proOrdenProd.proOrden, proOrdenProd.Renglon, 
	proOrdenProd.EntradaSalida, 
	stkUniMed.Medida_Id, 
	stkProductos.Producto_Id, stkProductos.Descripcion,
	Convert(numeric(18,4) , proOrdenProd.Cantidad / proOrden.Cantidad * @pCantidad) as Cantidad,
	proOrdenProd.PorcentajeCosto, 
	case when proOrdenProd.TomaDepoT3 = 0 THEN 	stkDepositos.Deposito_Id ELSE
		(SELECT MAX( stkDepistosT3.Deposito_Id) FROM stkDepositos  stkDepistosT3, proOrdenTrabajos3, proTrabajo3Prov 
			WHERE
				proOrdenTrabajos3.proOrden = proOrden.proOrden AND 
				proTrabajo3Prov.Trabajo3_Id = proOrdenTrabajos3.proTrabajo3 AND 
				proTrabajo3Prov.Proveedor_Id = proOrdenTrabajos3.Proveed_Id AND 
				stkDepistosT3.stkDepositos = proTrabajo3Prov.Deposito_Id) END as Deposito_Id
From proOrdenProd inner join proOrden ON 
proOrdenProd.proOrden = proOrden.proOrden
INNER JOIN stkProductos ON stkProductos.stkProductos = proOrdenProd.Producto_Id
INNER JOIN stkDepositos ON stkDepositos.stkDepositos = proOrdenProd.Deposito_Id
INNER JOIN stkUniMed ON  stkUniMed.stkUniMed = proOrdenProd.Medida_Id
WHERE
	proOrden.proOrden = @pproOrden  and 
	proOrdenProd.EntradaSalida = 'P'


GO


-- proOrdenCerrarrCalcular 62, 100


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proOrdenesLimpiar.sql*/

-- proOrdenesLimpiar '20190831',' ','ZZZ',1
DROP PROCEDURE proOrdenesLimpiar
GO
CREATE PROCEDURE proOrdenesLimpiar
(
	@FechaHasta DateTime, 
	@CtroProdDesde VarChar(8),
	@CtroProdHasta VarChar(8),
	@Empresa_Id Int

)
AS

SELECT @FechaHasta as FechaHasta, @CtroProdDesde  as CtroProdDesde, 
	@CtroProdHasta  as CtroProdHasta


Select proOrden.proOrden, dbo.Segmento(proOrdenSegmento.Segmento_Id,
	proOrdenSegmento.Segmento1C,proOrdenSegmento.Segmento2C, proOrdenSegmento.Segmento3C, 
		proOrdenSegmento.Segmento4C, proOrdenSegmento.Segmento1N, proOrdenSegmento.Segmento2N, 
		proOrdenSegmento.Segmento3N, proOrdenSegmento.Segmento4N) as Orden, 
		proOrden.FechaEmision, proOrden.FechaNecesidad, 
		stkProductos.Producto_Id, stkProductos.Descripcion, proOrden.Cantidad,
		proOrden.CantidadTerminada, 
		CAST(0 as bit) as Marca
From proOrden INNER JOIN stkProductos ON
	proOrden.Producto_Id =  stkProductos.stkProductos
	INNER JOIN proOrdenSegmento ON
	proOrdenSegmento.proOrden = proOrden.proOrden
	INNER JOIN proRecetas ON 
	proRecetas.proRecetas = proOrden.Receta_Id
	INNER JOIN proCentroProductivo ON
	proCentroProductivo.proCentroProductivo =  proRecetas.CtroProd_Id
Where
	proCentroProductivo.CtroProd_Id BETWEEN @CtroProdDesde And @CtroProdHasta AND
	proOrdenSegmento.Empresa_Id = @Empresa_Id and 
	proOrden.FechaFin IS NULL AND 
	proOrden.FechaNecesidad <= @FechaHasta
order by 2

GO
	
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proOrdenProd.sql*/
DROP PROCEDURE proOrdenProdGuardar
GO
CREATE PROCEDURE proOrdenProdGuardar
(
@pproOrden int,
@pRenglon int,
@pProducto_Id varchar(25),
@pEntradaSalida char(1),
@pMedida_Id varchar(5),
@pCantidad qCantidadD8,
@pPorcentajeCosto qPorcentaje,
@pDeposito_Id varchar(15) = NULL,
@pTomaDepoT3 Sino
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM proOrdenProd WHERE (proOrden = @pproOrden) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE proOrdenProd
	SET		Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id),
		EntradaSalida = @pEntradaSalida,
		Medida_Id = dbo.FuncFKstkUniMed(@pMedida_Id),
		Cantidad = @pCantidad,
		PorcentajeCosto = @pPorcentajeCosto,
		Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id),
		TomaDepoT3 = @pTomaDepoT3
	WHERE (proOrden = @pproOrden) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO proOrdenProd
	(
		proOrden,
		Renglon,
		Producto_Id,
		EntradaSalida,
		Medida_Id,
		Cantidad,
		PorcentajeCosto,
		Deposito_Id,
		TomaDepoT3
	)
	VALUES 
	(
		@pproOrden,
		@pRenglon,
		dbo.FuncFKstkProductos(@pProducto_Id),
		@pEntradaSalida,
		dbo.FuncFKstkUniMed(@pMedida_Id),
		@pCantidad,
		@pPorcentajeCosto,
		dbo.FuncFKstkDepositos(@pDeposito_Id),
		@pTomaDepoT3
	)
END 

GO

DROP PROCEDURE proOrdenProdDatos
GO
CREATE PROCEDURE proOrdenProdDatos
(
@pproOrden int,
@pRenglon int
)
AS
SET NOCOUNT ON 

SELECT proOrdenProd.proOrden, proOrdenProd.Renglon, stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos, proOrdenProd.EntradaSalida,
	stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionMedida, proOrdenProd.Cantidad, proOrdenProd.PorcentajeCosto, stkDepositos.Deposito_Id,
	stkDepositos.Descripcion as DescripcionDepositos, proOrdenProd.TomaDepoT3
FROM proOrdenProd 
LEFT JOIN stkDepositos  ON (stkDepositos.stkDepositos = proOrdenProd.Deposito_Id)
inner join stkProductos on stkProductos=proOrdenProd.Producto_Id
inner join stkUniMed on stkUniMed=proOrdenProd.Medida_Id
WHERE (proOrden = @pproOrden)
AND (Renglon = @pRenglon)
 
 RETURN @@Error 

GO

DROP PROCEDURE proOrdenProdEliminar
GO
CREATE PROCEDURE proOrdenProdEliminar
(
@pproOrden int,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM proOrdenProd 
WHERE (proOrden = @pproOrden)
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proOrdenProdSerie.sql*/
DROP PROCEDURE proOrdenProdSerieGuardar
GO
CREATE PROCEDURE proOrdenProdSerieGuardar
(
@pproOrden int,
@pRenglon int,
@pSerie varchar(25),
@pCantidad qCantidadD8
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM proOrdenProdSerie WHERE (proOrden = @pproOrden) AND (Renglon = @pRenglon) and (Serie = @pSerie)))
BEGIN 
	UPDATE proOrdenProdSerie
	SET	   Cantidad = @pCantidad
	WHERE (proOrden = @pproOrden) AND (Renglon = @pRenglon) and (Serie = @pSerie)
END 
ELSE 
BEGIN 
	INSERT INTO proOrdenProdSerie
	(
		proOrden,
		Renglon,
		Serie,
		Cantidad
	)
	VALUES 
	(
		@pproOrden,
		@pRenglon,
		@pSerie,
		@pCantidad
	)
END 

GO

DROP PROCEDURE proOrdenProdSerieDatos
GO
CREATE PROCEDURE proOrdenProdSerieDatos
(
@pproOrden int,
@pRenglon int
)
AS
SET NOCOUNT ON 

SELECT proOrdenProdSerie.proOrden, proOrdenProdSerie.Renglon, proOrdenProdSerie.Serie,proOrdenProdSerie.Cantidad,stkSerieVencimiento.Vencimiento, ' ' AS Ubicacion_Id
FROM proOrdenProdSerie 
INNER JOIN proOrdenProd  ON (proOrdenProd.proOrden = proOrdenProdSerie.proOrden) AND (proOrdenProd.Renglon = proOrdenProdSerie.Renglon)
INNER JOIN proOrden ON proOrdenProd.proOrden = proOrden.proOrden
INNER JOIN proOrdenSegmento on	proOrden.proOrden = proOrdenSegmento.proOrden
Left Join stkSerieVencimiento ON stkSerieVencimiento.Serie =  proOrdenProdSerie.Serie And stkSerieVencimiento.Producto_Id = proOrdenProd.Producto_Id And
		stkSerieVencimiento.Empresa_Id = proOrdenSegmento.Empresa_Id
WHERE (proOrdenProdSerie.proOrden = @pproOrden)
AND (proOrdenProdSerie.Renglon = @pRenglon)
 
 RETURN @@Error 

GO


DROP PROCEDURE proOrdenProdSerieEliminar
GO
CREATE PROCEDURE proOrdenProdSerieEliminar
(
@pproOrden int,
@pRenglon int = Null
)
AS
SET NOCOUNT ON 

DELETE FROM proOrdenProdSerie 
WHERE (proOrden = @pproOrden)
AND Renglon = isnull(@pRenglon,Renglon)
 
RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proOrdenRecursos.sql*/
DROP PROCEDURE proOrdenRecursosGuardar
GO
CREATE PROCEDURE proOrdenRecursosGuardar
(
@pproOrden int,
@pRenglon int,
@pRecurso_Id varchar(25),
@pCantidad qCantidadD8
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM proOrdenRecursos WHERE (proOrden = @pproOrden) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE proOrdenRecursos
	SET		Recurso_Id = dbo.FuncFKproRecursos(@pRecurso_Id),
		Cantidad = @pCantidad
	WHERE (proOrden = @pproOrden) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO proOrdenRecursos
	(
		proOrden,
		Renglon,
		Recurso_Id,
		Cantidad
	)
	VALUES 
	(
		@pproOrden,
		@pRenglon,
		dbo.FuncFKproRecursos(@pRecurso_Id),
		@pCantidad
	)
END 

GO

DROP PROCEDURE proOrdenRecursosDatos
GO
CREATE PROCEDURE proOrdenRecursosDatos
(
@pproOrden int,
@pRenglon int=null
)
AS
SET NOCOUNT ON 

SELECT proOrdenRecursos.proOrden, proOrdenRecursos.Renglon, proRecursos.Recurso_Id,
	proRecursos.Descripcion as DescripcionRecursos, proOrdenRecursos.Cantidad
FROM proOrdenRecursos 
INNER JOIN proOrden  ON (proOrden.proOrden = proOrdenRecursos.proOrden)
inner join proRecursos on proRecursos.proRecursos=proOrdenRecursos.Recurso_Id
WHERE (proOrden.proOrden = @pproOrden)
AND (Renglon = isnull(@pRenglon,Renglon))
 
 RETURN @@Error 

GO

DROP PROCEDURE proOrdenRecursosEliminar
GO
CREATE PROCEDURE proOrdenRecursosEliminar
(
@pproOrden int,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM proOrdenRecursos 
WHERE (proOrden = @pproOrden)
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proOrdenSegmento.sql*/
DROP PROCEDURE proOrdenSegmentoGuardar
GO
CREATE PROCEDURE proOrdenSegmentoGuardar
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pproOrden bigint, 
@pTieneAutomatico bit
)
AS
SET NOCOUNT ON 


IF (EXISTS (SELECT 1 FROM proOrdenSegmento WHERE 
	(Empresa_Id = @pEmpresa_Id) AND 
	(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
	(Segmento1N = @pSegmento1N) AND 
	(Segmento2N = @pSegmento2N) AND 
	(Segmento3N = @pSegmento3N) AND 
	(Segmento4N = @pSegmento4N) AND 
	(Segmento1C = @pSegmento1C) AND 
	(Segmento2C = @pSegmento2C) AND 
	(Segmento3C = @pSegmento3C) AND 
	(Segmento4C = @pSegmento4C)))

		

		
			UPDATE proOrdenSegmento
			SET	Empresa_Id = @pEmpresa_Id,
				proOrden = @pproOrden
			WHERE (Empresa_Id = @pEmpresa_Id) AND 
				(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
				(Segmento1N = @pSegmento1N) AND 
				(Segmento2N = @pSegmento2N) AND 
				(Segmento3N = @pSegmento3N) AND 
				(Segmento4N = @pSegmento4N) AND 
				(Segmento1C = @pSegmento1C) AND 
				(Segmento2C = @pSegmento2C) AND 
				(Segmento3C = @pSegmento3C) AND 
				(Segmento4C = @pSegmento4C)
		
	
ELSE 
BEGIN 
	
	-- Averiguo el que sigue
	
	if (@pTieneAutomatico=1)
	BEGIN
		
		
			SET @pSegmento1N = (SELECT MAX(proOrdenSegmento.Segmento1N)+1 AS Segmento1N 
					FROM proOrdenSegmento 
					Where
						proOrdenSegmento.Empresa_id = @pEmpresa_Id and 
						proOrdenSegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) And
						proOrdenSegmento.Segmento2N = @pSegmento2N And
						proOrdenSegmento.Segmento3N = @pSegmento3N And
						proOrdenSegmento.Segmento4N = @pSegmento4N And
						proOrdenSegmento.Segmento1C = @pSegmento1C And
						proOrdenSegmento.Segmento2C = @pSegmento2C And
						proOrdenSegmento.Segmento3C = @pSegmento3C And
						proOrdenSegmento.Segmento4C = @pSegmento4C)
						
						
			IF (@pSegmento1N IS NULL) 
			begin
				SET @pSegmento1N = (SELECT PrimerNumero
					FROM genContadorSegmento Where
						(genContadorSegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
						(genContadorSegmento.Segmento2N = @pSegmento2N) AND 
						(genContadorSegmento.Segmento3N = @pSegmento3N) AND 
						(genContadorSegmento.Segmento4N = @pSegmento4N) AND 
						(genContadorSegmento.Segmento1C = @pSegmento1C) AND 
						(genContadorSegmento.Segmento2C = @pSegmento2C) AND 
						(genContadorSegmento.Segmento3C = @pSegmento3C) AND 
						(genContadorSegmento.Segmento4C = @pSegmento4C) and 
						genContadorSegmento.Empresa_id = @pEmpresa_id and 
						genContadorSegmento.Segmento_Id =dbo.FuncFKgenSegmentos(@pSegmento_Id))
								
			end
		
		-- esto solo pasa si empieza en 1 esta prendido
			if @pSegmento1N is null or @pSegmento1N < 0
			begin
				set @pSegmento1N = 1
			end	
			
	END
	
	if (@pSegmento1N = 0)
			SET @pSegmento1N = 1

	INSERT INTO proOrdenSegmento
	(
		Empresa_Id,
		Segmento_Id,
		Segmento1N,
		Segmento2N,
		Segmento3N,
		Segmento4N,
		Segmento1C,
		Segmento2C,
		Segmento3C,
		Segmento4C,
		proOrden
	)
	VALUES 
	(
		@pEmpresa_Id,
		dbo.FuncFKgenSegmentos(@pSegmento_Id),
		@pSegmento1N,
		@pSegmento2N,
		@pSegmento3N,
		@pSegmento4N,
		@pSegmento1C,
		@pSegmento2C,
		@pSegmento3C,
		@pSegmento4C,
		@pproOrden
	)
	
END 
SELECT @pSegmento1N as RetVal

GO
DROP PROCEDURE proOrdenSegmentoDatos
GO
CREATE PROCEDURE proOrdenSegmentoDatos
(
@pSegmento_Id varchar(10),
@pEmpresa_Id int,
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20)
)
AS
SET NOCOUNT ON 

SELECT genSegmentos.Segmento_Id, proOrdenSegmento.Empresa_Id, proOrdenSegmento.Segmento1N, proOrdenSegmento.Segmento2N,
	proOrdenSegmento.Segmento3N, proOrdenSegmento.Segmento4N, proOrdenSegmento.Segmento1C, proOrdenSegmento.Segmento2C,
	proOrdenSegmento.Segmento3C, proOrdenSegmento.Segmento4C, proOrdenSegmento.proOrden
FROM proOrdenSegmento
inner join genSegmentos on genSegmentos=proOrdenSegmento.Segmento_Id
WHERE (genSegmentos.Segmento_Id = @pSegmento_Id)
AND (Empresa_Id = @pEmpresa_Id)
AND (Segmento1N = @pSegmento1N)
AND (Segmento2N = @pSegmento2N)
AND (Segmento3N = @pSegmento3N)
AND (Segmento4N = @pSegmento4N)
AND (Segmento1C = @pSegmento1C)
AND (Segmento2C = @pSegmento2C)
AND (Segmento3C = @pSegmento3C)
AND (Segmento4C = @pSegmento4C)
 
 RETURN @@Error 

GO

DROP PROCEDURE proOrdenSegmentoEliminar
GO
CREATE PROCEDURE proOrdenSegmentoEliminar
(
@pSegmento_Id varchar(10),
@pEmpresa_Id int,
@pSegmento1N int = NULL,
@pSegmento2N int = NULL,
@pSegmento3N int = NULL,
@pSegmento4N int = NULL,
@pSegmento1C varchar(20) = NULL,
@pSegmento2C varchar(20) = NULL,
@pSegmento3C varchar(20) = NULL,
@pSegmento4C varchar(20) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM proOrdenSegmento 
WHERE (Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id))
AND (Empresa_Id = @pEmpresa_Id)
AND (Segmento1N = ISNULL(@pSegmento1N, Segmento1N))
AND (Segmento2N = ISNULL(@pSegmento2N, Segmento2N))
AND (Segmento3N = ISNULL(@pSegmento3N, Segmento3N))
AND (Segmento4N = ISNULL(@pSegmento4N, Segmento4N))
AND (Segmento1C = ISNULL(@pSegmento1C, Segmento1C))
AND (Segmento2C = ISNULL(@pSegmento2C, Segmento2C))
AND (Segmento3C = ISNULL(@pSegmento3C, Segmento3C))
AND (Segmento4C = ISNULL(@pSegmento4C, Segmento4C))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proOrdenStock.sql*/
DROP PROCEDURE proOrdenStockInsertar
GO
CREATE PROCEDURE proOrdenStockInsertar
(
@pproMovCierreOrden bigint,
@pstkMoviCabe bigint
)
AS
BEGIN 
	INSERT INTO proOrdenStock
	(
		proMovCierreOrden,
		stkMoviCabe
	)
	VALUES 
	(
		@pproMovCierreOrden,
		@pstkMoviCabe
	)
END 
GO


DROP PROCEDURE proOrdenStockDatos
GO
CREATE PROCEDURE proOrdenStockDatos
(
@pproMovCierreOrden bigint = NULL,
@pstkMoviCabe bigint = NULL
)
AS
SET NOCOUNT ON 

SELECT proOrdenStock.proMovCierreOrden, proOrdenStock.stkMoviCabe
FROM proOrdenStock 
WHERE proMovCierreOrden = ISNULL(@pproMovCierreOrden, proMovCierreOrden)
AND stkMoviCabe = ISNULL(@pstkMoviCabe, stkMoviCabe)
 
RETURN @@Error 

GO

DROP PROCEDURE proOrdenStockEliminar
GO
CREATE PROCEDURE proOrdenStockEliminar
(
@pproMovCierreOrden bigint,
@pstkMoviCabe bigint 
)
AS
SET NOCOUNT ON 

DELETE FROM proOrdenStock 
WHERE (proMovCierreOrden = @pproMovCierreOrden)
AND (stkMoviCabe = @pstkMoviCabe)
 
RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proOrdenStockCosto.sql*/
DROP PROCEDURE proOrdenStockCostoInsertar
GO
CREATE PROCEDURE proOrdenStockCostoInsertar
(
@pproMovCierreOrden bigint,
@pstkMoviCabe bigint,
@pRenglon int,
@pPorcentajeCosto qPorcentaje
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM proOrdenStockCosto WHERE (proMovCierreOrden = @pproMovCierreOrden) AND (stkMoviCabe = @pstkMoviCabe) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE proOrdenStockCosto
	SET		PorcentajeCosto = @pPorcentajeCosto
	WHERE (proMovCierreOrden = @pproMovCierreOrden) AND (stkMoviCabe = @pstkMoviCabe) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO proOrdenStockCosto
	(
		proMovCierreOrden,
		stkMoviCabe,
		Renglon,
		PorcentajeCosto
	)
	VALUES 
	(
		@pproMovCierreOrden,
		@pstkMoviCabe,
		@pRenglon,
		@pPorcentajeCosto
	)
END 

GO

DROP PROCEDURE proOrdenStockCostoDatos
GO
CREATE PROCEDURE proOrdenStockCostoDatos
(
@pproMovCierreOrden bigint,
@pstkMoviCabe bigint,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

SELECT proOrdenStockCosto.proMovCierreOrden, proOrdenStockCosto.stkMoviCabe, proOrdenStockCosto.Renglon,
	stkProductos.Producto_Id, stkProductos.Descripcion, 
	proOrdenStockCosto.PorcentajeCosto
FROM proOrdenStockCosto 
INNER JOIN stkMoviCuerpo  ON stkMoviCuerpo.stkMoviCabe = proOrdenStockCosto.stkMoviCabe AND stkMoviCuerpo.Renglon = proOrdenStockCosto.Renglon
INNER JOIN stkProductos ON  stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
WHERE proOrdenStockCosto.proMovCierreOrden = @pproMovCierreOrden
AND proOrdenStockCosto.stkMoviCabe = @pstkMoviCabe
AND proOrdenStockCosto.Renglon = isnull(@pRenglon,proOrdenStockCosto.Renglon)
 
RETURN @@Error 

GO

DROP PROCEDURE proOrdenStockCostoEliminar
GO
CREATE PROCEDURE proOrdenStockCostoEliminar
(
@pproMovCierreOrden bigint,
@pstkMoviCabe bigint,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM proOrdenStockCosto 
WHERE (proMovCierreOrden = @pproMovCierreOrden)
AND (stkMoviCabe = @pstkMoviCabe)
AND (Renglon = ISNULL(@pRenglon,Renglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proOrdenSubRecursos.sql*/
DROP PROCEDURE proOrdenSubRecursoGuardar
GO
CREATE PROCEDURE proOrdenSubRecursoGuardar
(
@pproOrden int,
@pRenglon int,
@pSubRecurso_Id varchar(25),
@pCantidad qCantidadD8
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM proOrdenSubRecurso WHERE (proOrden = @pproOrden) AND (Renglon = @pRenglon) AND (SubRecurso_Id = @pSubRecurso_Id)))
BEGIN 
	UPDATE proOrdenSubRecurso
	SET		Cantidad = @pCantidad
	WHERE (proOrden = @pproOrden) AND (Renglon = @pRenglon) AND (SubRecurso_Id = @pSubRecurso_Id)
END 
ELSE 
BEGIN 
	INSERT INTO proOrdenSubRecurso
	(
		proOrden,
		Renglon,
		SubRecurso_Id,
		Cantidad
	)
	VALUES 
	(
		@pproOrden,
		@pRenglon,
		dbo.FuncFKproSubRecursos(@pSubRecurso_Id),
		@pCantidad
	)
END 

GO

DROP PROCEDURE proOrdenSubRecursoDatos
GO
CREATE PROCEDURE proOrdenSubRecursoDatos
(
@pproOrden int,
@pRenglon int,
@pSubRecurso_Id int
)
AS
SET NOCOUNT ON 

SELECT proOrdenSubRecurso.proOrden, proOrdenSubRecurso.Renglon, proSubRecursos.Descripcion as DescripcionOrdenRecursos, proSubRecursos.SubRecurso_Id,
	proSubRecursos.Descripcion as DescripcionSubRecursos, proOrdenSubRecurso.Cantidad
FROM proOrdenSubRecurso 
INNER JOIN proOrdenRecursos  ON (proOrdenRecursos.proOrden = proOrdenSubRecurso.proOrden) AND (proOrdenRecursos.Renglon = proOrdenSubRecurso.Renglon)
INNER JOIN proSubRecursos  ON (proSubRecursos.proSubRecursos = proOrdenSubRecurso.SubRecurso_Id)
WHERE (proOrdenSubRecurso.proOrden = @pproOrden)
AND (proOrdenSubRecurso.Renglon = @pRenglon)
AND (proOrdenSubRecurso.SubRecurso_Id = @pSubRecurso_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE proOrdenSubRecursoEliminar
GO
CREATE PROCEDURE proOrdenSubRecursoEliminar
(
@pproOrden int,
@pRenglon int,
@pSubRecurso_Id varchar(25)
)
AS
SET NOCOUNT ON 

DELETE FROM proOrdenSubRecurso 
WHERE (proOrden = @pproOrden)
AND (Renglon = @pRenglon)
AND (SubRecurso_Id = dbo.FuncFKproSubRecursos(@pSubRecurso_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proOrdenTrabajo3.sql*/
DROP PROCEDURE proOrdenTrabajos3Guardar
GO
CREATE PROCEDURE proOrdenTrabajos3Guardar
(
@pproOrden int,
@pRenglon int,
@pproTrabajo3 varchar(25),
@pProveed_Id varchar(15) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM proOrdenTrabajos3 WHERE (proOrden = @pproOrden) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE proOrdenTrabajos3
	SET		proTrabajo3 = dbo.FuncFKproTrabajo3(@pproTrabajo3),
		Proveed_Id = dbo.FuncFKcomProveedores(@pProveed_Id)
	WHERE (proOrden = @pproOrden) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO proOrdenTrabajos3
	(
		proOrden,
		Renglon,
		proTrabajo3,
		Proveed_Id
	)
	VALUES 
	(
		@pproOrden,
		@pRenglon,
		dbo.FuncFKproTrabajo3(@pproTrabajo3),
		dbo.FuncFKcomProveedores(@pProveed_Id)
	)
END 

GO

DROP PROCEDURE proOrdenTrabajos3Datos
GO
CREATE PROCEDURE proOrdenTrabajos3Datos
(
@pproOrden int,
@pRenglon int
)
AS
SET NOCOUNT ON 

SELECT proOrdenTrabajos3.proOrden, proOrdenTrabajos3.Renglon, proTrabajo3.Trabajo3_Id,
	proTrabajo3.Descripcion as DescripcionTrabajo3, comProveedores.Proveed_Id, comProveedores.RazonSocial as DescripcionProveedor
FROM proOrdenTrabajos3 
INNER JOIN proOrden  ON (proOrden.proOrden = proOrdenTrabajos3.proOrden)
inner join proTrabajo3 on proTrabajo3.proTrabajo3=proOrdenTrabajos3.proTrabajo3
left join comProveedores on comProveedores.genEntidades=proOrdenTrabajos3.Proveed_Id
WHERE (proOrden.proOrden = @pproOrden)
AND (Renglon = @pRenglon)
 
 RETURN @@Error 

GO

DROP PROCEDURE proOrdenTrabajos3Eliminar
GO
CREATE PROCEDURE proOrdenTrabajos3Eliminar
(
@pproOrden int,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM proOrdenTrabajos3 
WHERE (proOrden = @pproOrden)
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proPasarAProduccion.sql*/
-- proPasarAProduccionDatos ' ', 'ZZZ','20190801', '20190831', 1

DROP Procedure proPasarAProduccionDatos 
GO
Create Procedure proPasarAProduccionDatos 
(
	@CentroProdDesde VarChar(8),
	@CentroProdHasta VarChar(8),
	@FechaDesde DateTime, 
	@FechaHasta DateTime, 
	@Empresa_Id Int
)

AS

Select @FechaDesde as FechaDesde, @FechaHasta as FechaHasta, @FechaHasta as FechaProduccion, 
	@CentroProdDesde as CentroProdDesde,  @CentroProdHasta as CentroProdHasta

SELECT Cast(0 as Bit) as Marca, 
	proCentroProductivo.CtroProd_Id, proCentroProductivo.Descripcion as DescripcionCentro,
	proOrden.proOrden, 
	dbo.Segmento(proOrdenSegmento.Segmento_Id,   proOrdenSegmento.Segmento1C, 
	proOrdenSegmento.Segmento2C, proOrdenSegmento.Segmento3C, proOrdenSegmento.Segmento4C, 
	proOrdenSegmento.Segmento1N, proOrdenSegmento.Segmento2N, proOrdenSegmento.Segmento3N,
	proOrdenSegmento.Segmento4N) as Segmento_Str,
	stkProductos.Producto_Id, stkProductos.Descripcion, 
	proOrden.CantidadIngresada as Cantidad, stkUniMed.Medida_Id


FROM 
proOrden INNER JOIN proOrdenSegmento ON proOrden.proOrden = proOrdenSegmento.proOrden
INNER JOIN stkProductos ON stkProductos.stkProductos = proOrden.Producto_Id
INNER JOIN stkUniMed ON stkUniMed.stkUniMed = proOrden.Medida_Id
INNER JOIN proRecetas ON proRecetas.proRecetas = proOrden.Receta_Id
INNER JOIN proCentroProductivo ON proCentroProductivo.proCentroProductivo = proRecetas.CtroProd_Id
Where
	proOrden.FechaProduccion IS NULL AND 
	proOrdenSegmento.Empresa_Id = @Empresa_Id and 
	proCentroProductivo.CtroProd_Id BETWEEN @CentroProdDesde AND @CentroProdHasta AND
	proOrden.FechaEmision BETWEEN @FechaDesde And @FechaHasta
ORDER BY 2,5
GO


DROP Procedure proPasarAProduccionGuardar
GO
Create Procedure proPasarAProduccionGuardar
(
	@proOrden INT, 
	@FechaProduccion DateTime, 
	@pUsuario_Id Int

)
AS

Update proOrden SET FechaProduccion = @FechaProduccion, Usuario_Id = @pUsuario_Id 
Where
	proOrden = @proOrden
GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proPendientesProd.sql*/
-- proPendientesProd '20190820', 1, '20190820'
DROP PROCEDURE proPendientesProd
go
CREATE PROCEDURE proPendientesProd(

	@FechaHasta DateTime, 
	@Empresa_Id Int,
	@Fecha DateTime = NULL

)

as

select Producto_Id, Descripcion, 	Medida_Id, Deposito_Id,
	CtroProd_Id, DescripcionCentroProd,
	CostoUltCompra, Existencia,  Fecha, 
	SUM(Consumo) as Consumo, SUM(Produccion) as Produccion
from (
SELECT stkProductos.Producto_Id, stkProductos.Descripcion, 
	stkUniMed.Medida_Id, stkDepositos.Deposito_Id, 
	(Convert(numeric(18,4), proOrdenProd.Cantidad 	* proOrden.Cantidad / (proOrden.Cantidad - proOrden.CantidadTerminada) *
		case when proOrdenProd.EntradaSalida ='P' THEN 1 ELSE 0 END )) as Produccion,
	(Convert(numeric(18,4), proOrdenProd.Cantidad 	* proOrden.Cantidad / (proOrden.Cantidad - proOrden.CantidadTerminada) *
		case when proOrdenProd.EntradaSalida ='P' THEN 0 ELSE 1 END )) as Consumo, 
		proRecetas.Receta_Id, proRecetas.Descripcion as DescripcionReceta, 
		proCentroProductivo.CtroProd_Id, proCentroProductivo.Descripcion DescripcionCentroProd, 
		stkProductos.CostoUltCompra, stkExistencia.Cantidad as Existencia, 
		ISNULL(@Fecha, proOrden.FechaNecesidad) as Fecha

From proOrden INNER JOIN proOrdenProd ON
proOrden.proOrden = proOrdenProd.proOrden
INNER JOIN stkProductos ON 
stkProductos.stkProductos = proOrdenProd.Producto_Id
INNER JOIN stkUniMed ON
stkUniMed.stkUniMed = proOrdenProd.Medida_Id
INNER JOIN proOrdenSegmento ON
proOrdenSegmento.proOrden = proOrden.proOrden
INNER JOIN stkDepositos ON 
stkDepositos.stkDepositos =  proOrdenProd.Deposito_Id
INNER JOIN proRecetas ON
proRecetas.proRecetas = proOrden.Receta_Id
INNER JOIN proCentroProductivo ON
proCentroProductivo.proCentroProductivo = proRecetas.CtroProd_Id
LEFT JOIN stkExistencia ON
stkExistencia.Deposito_Id= proOrdenProd.Deposito_Id and 
stkExistencia.Producto_Id = proOrdenProd.Producto_Id
Where
	proOrden.Cantidad > proOrden.CantidadTerminada And
	proOrdenSegmento.Empresa_Id = @Empresa_Id and 
	proOrden.FechaNecesidad < @FechaHasta

	) as xxx

group by Producto_Id, Descripcion, 	Medida_Id, Deposito_Id,
	CtroProd_Id, DescripcionCentroProd,	CostoUltCompra, Existencia,  Fecha 
HAVING 	sum(Consumo - Produccion) <> 0
ORDER BY 1,4
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proProductosreceta.sql*/
DROP PROCEDURE proProductosRecetaGuardar
GO
CREATE PROCEDURE proProductosRecetaGuardar
(
@pProducto_Id varchar(25),
@pReceta_Id varchar(25),
@pPrincipal bit = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM proProductosReceta WHERE (Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id)) AND (Receta_Id = dbo.FuncFKproRecetas(@pReceta_Id))))
BEGIN 
	UPDATE proProductosReceta
	SET		Principal = @pPrincipal
	WHERE (Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id)) AND (Receta_Id = dbo.FuncFKproRecetas(@pReceta_Id))
END 
ELSE 
BEGIN 
	INSERT INTO proProductosReceta
	(
		Producto_Id,
		Receta_Id,
		Principal
	)
	VALUES 
	(
		dbo.FuncFKstkProductos(@pProducto_Id),
		dbo.FuncFKproRecetas(@pReceta_Id),
		@pPrincipal
	)
END 

GO

DROP PROCEDURE proProductosRecetaDatos
GO
CREATE PROCEDURE proProductosRecetaDatos
(
@pProducto_Id varchar(25)=null,
@pReceta_Id varchar(25)=null
)
AS
SET NOCOUNT ON 

SELECT stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos, proRecetas.Receta_Id, proRecetas.Descripcion as DescripcionReceta, proProductosReceta.Principal
FROM proProductosReceta 
INNER JOIN stkProductos  ON (stkProductos.stkProductos = proProductosReceta.Producto_Id)
inner join proRecetas on proRecetas=proProductosReceta.Receta_Id
WHERE (stkProductos.Producto_Id = isnull(@pProducto_Id,stkProductos.Producto_Id))
AND (proRecetas.Receta_Id = isnull(@pReceta_Id, proRecetas.Receta_Id))
 
 RETURN @@Error 

GO

DROP PROCEDURE proProductosRecetaEliminar
GO
CREATE PROCEDURE proProductosRecetaEliminar
(
@pProducto_Id varchar(25),
@pReceta_Id varchar(25)
)
AS
SET NOCOUNT ON 

DELETE FROM proProductosReceta 
WHERE (Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id))
AND (Receta_Id = dbo.FuncFKproRecetas(@pReceta_Id))
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proPrograma.sql*/

-- proProgramaDatos 1, '20190807', '20190808', 'H', ' ', 'ZIN'
drop procedure proProgramaDatos
go
create procedure proProgramaDatos
(
    @pEmpresa int,
    @pFechaDesde datetime,
    @pFechaHasta datetime,
    @pPendHist char,
    @pProveedor_Id varchar(15),
    @pTrabajo3_Id varchar(25), 
	@pSoloEnProd Bit
)
as
select proTrabajo3.Trabajo3_Id, protrabajo3.Descripcion as DescripcionTrabajo3,
comProveedores.Proveed_Id as Proveedor_Id,comProveedores.RazonSocial as DescripcionProveedor,
@pFechaDesde as FechaDesde, @pFechaHasta as FechaHasta, @pPendHist as  PendHist, 
	@pSoloEnProd as SoloEnProd
 from proTrabajo3
 left join comProveedores on comProveedores.Proveed_Id=@pProveedor_Id
  where Trabajo3_Id=@pTrabajo3_Id

select proOrden.proOrden, dbo.Segmento( Segmento_Id, Segmento1C, Segmento2C, 
Segmento3C, Segmento4C,Segmento1N, Segmento2N, Segmento3N, Segmento4N) as SegmentoSTR, 
comProveedores.Proveed_Id, comProveedores.RazonSocial as DescripcionProveed,
proTrabajo3.Trabajo3_Id, proTrabajo3.Descripcion as DescripcionTrabajo3, 
CantidadIngresada, stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionMedida, 
FechaEmision, FechaNecesidad, FechaProduccion, FechaFin, proOrdenTrabajos3.Renglon
from proOrden
inner join proOrdenSegmento on proOrden.proOrden=proOrdenSegmento.proOrden
inner join proOrdenTrabajos3 on proOrdenTrabajos3.proOrden=proOrden.proOrden
left join comProveedores on comProveedores.genEntidades=proOrdenTrabajos3.Proveed_Id
inner join proTrabajo3 on proTrabajo3.proTrabajo3=proOrdenTrabajos3.proTrabajo3
inner join proOrdenProd on proOrdenProd.proOrden=proOrden.proOrden
inner join stkUniMed on stkUniMed.stkUniMed=proOrdenProd.Medida_Id
where 
((proOrden.FechaProduccion BETWEEN @pFechaDesde and @pFechaHasta and @pPendHist='H') OR
(@pPendHist='P' and proOrdenTrabajos3.Proveed_Id is null)) and
proTrabajo3.Trabajo3_Id  = @pTrabajo3_Id AND
proOrdenSegmento.Empresa_Id=@pEmpresa and 
(@pSoloEnProd=0 or proOrden.FechaProduccion is null)

go

drop  procedure proProgramaGuardar
go
create procedure proProgramaGuardar
(
    @pOrden int,
    @pRenlon int,
    @pProveed_Id varchar(15)
)
as

update proOrdenTrabajos3 
	set Proveed_Id= dbo.FuncFkComProveedores(@pProveed_Id) 
		where proOrdenTrabajos3.proOrden=@pOrden and proOrdenTrabajos3.Renglon=@pRenlon
go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proProgramaOrden.sql*/
DROP PROCEDURE proProgramaOrdenInsertar
GO
CREATE PROCEDURE proProgramaOrdenInsertar
(
@pproProgramas int,
@pRenglon int,
@pproOrden int
)
AS
BEGIN 
	INSERT INTO proProgramaOrden
	(
		proProgramas,
		Renglon,
		proOrden
	)
	VALUES 
	(
		@pproProgramas,
		@pRenglon,
		@pproOrden
	)
END 

GO

DROP PROCEDURE proProgramaOrdenDatos
GO
CREATE PROCEDURE proProgramaOrdenDatos
(
@pproProgramas int=null,
@pRenglon int=null,
@pproOrden int=null
)
AS
SET NOCOUNT ON 

SELECT proProgramaOrden.proProgramas, proProgramaOrden.Renglon, proProgramaOrden.proOrden
FROM proProgramaOrden 
INNER JOIN proOrden  ON (proOrden.proOrden = proProgramaOrden.proOrden)
WHERE proProgramaOrden.proProgramas = isnull(@pproProgramas, proProgramaOrden.proProgramas)
AND proProgramaOrden.Renglon = ISNULL(@pRenglon,proProgramaOrden.Renglon)
AND proProgramaOrden.proOrden = ISNULL(@pproOrden,proProgramaOrden.proOrden)
 
RETURN @@Error 

GO

DROP PROCEDURE proProgramaOrdenEliminar
GO
CREATE PROCEDURE proProgramaOrdenEliminar
(
@pproProgramas int,
@pRenglon int
)
AS
SET NOCOUNT ON 

DELETE FROM proProgramaOrden 
WHERE (proProgramas = @pproProgramas) AND (Renglon = @pRenglon)

 
 RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proProgramaProd.sql*/

drop procedure proProgramaProdCalc
go
create procedure proProgramaProdCalc
(
@pProductoDesde varchar(25),
@pProductoHasta varchar(25),
@pFechaDesde datetime,
@pFechaHasta datetime,
@pDeposito varchar(15),
@pFechaHastaPedidos datetime,
@pFamiliaDesde varchar(15),
@pFamiliaHasta varchar(15),
@pGrupoDesde varchar(15),
@pGrupoHasta varchar(15),
@pDescripcion varchar(80),
@pEmpresa_Id int
)
as
select stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos, stkUniMed.Medida_Id, 
stkUniMed.Descripcion as DescripcionMedida, 
isnull((select sum(venPediCuerpo.CantidadPedida) from venPediCuerpo
inner join venPedidos on venPedidos.venPedidos=venPediCuerpo.venPedidos
where venPediCuerpo.Producto_Id=stkProductos.stkProductos  and
venPedidos.Estado='P'),0) as Pedidos,
isnull((select (stkExistencia.Cantidad) from stkExistencia where
stkExistencia.Producto_Id=stkProductos.stkProductos and stkExistencia.Deposito_Id=stkDepositos.stkDepositos),0) as Stock, 
cast(0 as numeric(18,4)) as MinNecesario,
stkMaxMin.Minimo, cast(0 as numeric) as OrdProducto, 
isnull((select sum(proOrden.Cantidad-proOrden.CantidadTerminada) from proOrden
where proOrden.Producto_Id=stkProductos.stkProductos and 
proOrden.Anulado=0 and proOrden.FechaProduccion between @pFechaDesde and @pFechaHasta),cast(0 as numeric)) as Faltantes, 
stkMaxMin.Maximo, 
isnull((select sum(proOrdenProd.Cantidad) from proOrdenProd inner join proOrden on proOrden.proOrden=proOrdenProd.proOrden
where proOrdenProd.Producto_Id=stkProductos.stkProductos and proOrdenProd.Deposito_Id=stkDepositos.stkDepositos and
proOrden.Anulado=0 and proOrden.FechaProduccion between DATEADD(DAY,-90,@pFechaDesde) and @pFechaDesde),cast(0 as numeric)) as Ult90Dias, 
0 as ProdPeriodo
from stkProductos 
inner join proProductosReceta on 
proProductosReceta.Producto_Id = stkProductos.stkProductos and
proProductosReceta.Principal = 1
inner join stkDepositos on stkDepositos.Deposito_Id=@pDeposito
left join stkFamilias on stkProductos.Familia_Id=stkFamilias
left join stkGrupos on stkGrupos=stkProductos.Grupo_Id
inner join stkUniMed on stkUniMed=stkProductos.Medida_Id
left join stkMaxMin on stkMaxMin.Producto_Id=stkProductos and stkMaxMin.Deposito_Id=stkDepositos
left join proOrdenProd on proOrdenProd.Deposito_Id=@pDeposito and 
	exists(select 1 from proOrden where proOrden.proOrden=proOrdenProd.proOrden and
		proOrden.FechaProduccion between @pFechaDesde and @pFechaHasta)
where 
	isnull(stkGrupos.Grupo_Id, ' ') between @pGrupoDesde and @pGrupoHasta and
	isnull(stkFamilias.Familia_Id,' ') between @pFamiliaDesde and @pFamiliaHasta
group by stkProductos.Producto_Id, stkProductos.Descripcion, stkUniMed.Medida_Id, stkUniMed.Descripcion, Minimo, Maximo,
stkProductos.stkProductos, stkDepositos.stkDepositos

go

drop procedure proProgramaProduccionDatos
go
create procedure proProgramaProduccionDatos
(
@pSegmento_Id varchar(10),
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pFechaHastaPedidos DateTime,
@pEmpresa_Id Int
)
as
declare @lIdentity int = (select proProgramasSegmento.proProgramas from proProgramasSegmento where
Segmento_Id=dbo.FuncFKgenSegmentos(@pSegmento_Id) and
Segmento1N=@pSegmento1N and Segmento2N=@pSegmento2N and Segmento3N=@pSegmento3N and Segmento4N=@pSegmento4N and
Segmento1C=@pSegmento1C and Segmento2C=@pSegmento2C and Segmento3C=@pSegmento3C and Segmento4C=@pSegmento4C and
proProgramasSegmento.Empresa_Id = @pEmpresa_Id
)
PRINT @lIdentity
exec proProgramaProduccionDatosInt @lIdentity, @pFechaHastaPedidos
go

drop procedure proProgramaProduccionDatosInt
go
create procedure proProgramaProduccionDatosInt
(
@pproProgramaProduccion int,
@pFechaHastaPedidos datetime
)
as
select gensegmentos.Segmento_Id, proProgramasSegmento.Segmento1N, proProgramasSegmento.Segmento2N,
proProgramasSegmento.Segmento3N, proProgramasSegmento.Segmento4N, proProgramasSegmento.Segmento1C,
proProgramasSegmento.Segmento2C, proProgramasSegmento.Segmento3C, proProgramasSegmento.Segmento4C,
proProgramas.proProgramas, proProgramas.Descripcion, proProgramas.Empresa_Id, Fecha, FechaDesde, FechaHasta, stkDepositos.Deposito_Id, ProductoDesde, 
ProductoHasta, Lunes, Martes, Miercoles, Jueves, Viernes, Sabado, Domingo, GrupoDesde, GrupoHasta, FamiliaDesde, 
FamiliaHasta, proProgramas.Usuario_Id, @pFechaHastaPedidos as FechaHastaPedidos
from proProgramas
inner join stkDepositos on stkDepositos=proProgramas.Deposito_Id
inner join proProgramasSegmento on proProgramasSegmento.proProgramas= proProgramas.proProgramas
inner join genSegmentos on gensegmentos.genSegmentos=proProgramasSegmento.Segmento_Id
where proProgramas.proProgramas=@pproProgramaProduccion

select 0 as Columna, getdate() as Fecha

go

drop procedure proProgramaProduccionGuardar
go
create procedure proProgramaProduccionGuardar
(
@pSegmento_Id varchar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pproPrograma int,
@pDescripcion varchar(80),
@pEmpresa_Id int,
@pFecha datetime,
@pFechaDesde datetime,
@pFechaHasta datetime,
@pDeposito_Id varchar(15),
@pProductoDesde varchar(25),
@pProductoHasta varchar(25),
@pLunes bit,
@pMartes bit,
@pMiercoles bit,
@pJueves bit,
@pViernes bit,
@pSabado bit,
@pDomingo bit,
@pGrupoDesde varchar(15),
@pGrupoHasta varchar(15),
@pFamiliaDesde varchar(15),
@pFamiliaHasta varchar(15),
@pUsuario_Id int
)
as
DECLARE @lIdentidad int = (Select proProgramas
 from proProgramasSegmento
 Where
	proProgramasSegmento.Empresa_id = @pEmpresa_Id and 
	proProgramasSegmento.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	proProgramasSegmento.Segmento1N = @pSegmento1N and 
	proProgramasSegmento.Segmento2N = @pSegmento2N and 
	proProgramasSegmento.Segmento3N = @pSegmento3N and 
	proProgramasSegmento.Segmento4N = @pSegmento4N and 
	proProgramasSegmento.Segmento1C = @pSegmento1C and 
	proProgramasSegmento.Segmento2C = @pSegmento2C and 
	proProgramasSegmento.Segmento3C = @pSegmento3C and 
	proProgramasSegmento.Segmento4C = @pSegmento4C )

IF (EXISTS (SELECT 1 FROM proProgramas WHERE proProgramas.proProgramas=@lIdentidad))

begin
update proProgramas set
Descripcion=Descripcion, Empresa_Id=@pEmpresa_Id, Fecha=dbo.FechaActual(), FechaDesde=@pFechaDesde, FechaHasta=@pFechaHasta,
Deposito_Id=dbo.FuncFKstkDepositos(@pDeposito_Id), ProductoDesde=@pProductoDesde, ProductoHasta=@pProductoHasta, Lunes=@pLunes, Martes=@pMartes,
Miercoles=@pMiercoles, Jueves=@pJueves, Viernes=@pViernes, Sabado=@pSabado, Domingo=@pDomingo, GrupoDesde=@pGrupoDesde,
GrupoHasta=@pGrupoHasta, FamiliaDesde=@pFamiliaDesde, FamiliaHasta=@pFamiliaHasta, Usuario_Id=@pUsuario_Id
where @lIdentidad=proProgramas
end
else
begin
insert proProgramas
(
Descripcion, Empresa_Id, Fecha, FechaDesde, FechaHasta, Deposito_Id, ProductoDesde, ProductoHasta, 
Lunes, Martes, Miercoles, Jueves, Viernes, Sabado, Domingo,
GrupoDesde, GrupoHasta, FamiliaDesde, FamiliaHasta, Usuario_Id
)
values
(
@pDescripcion,
@pEmpresa_Id,
@pFecha,
@pFechaDesde, @pFechaHasta,
dbo.FuncFKstkDepositos(@pDeposito_Id),
@pProductoDesde, @pProductoHasta,
@pLunes, @pMartes, @pMiercoles, @pJueves, @pViernes, @pSabado, @pDomingo,
@pGrupoDesde, @pGrupoHasta,
@pFamiliaDesde, @pFamiliaHasta,
@pUsuario_Id
)

SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 
go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proProgramaRecursos.sql*/
--proProgramaSubRecursosDatos 1, 'MA', '20190801','20190801','P',1
drop procedure proProgramaSubRecursosDatos
go
create procedure proProgramaSubRecursosDatos
(
@pEmpresa_Id int,
@pRecurso_Id varchar(25)=null,
@pFechaDesde datetime,
@pFechaHasta datetime,
@pPendHist char, 
@pSoloEnProd bit

)
as
select @pRecurso_Id as Recurso_Id, proRecursos.Descripcion as DescripcionRecurso,
@pFechaDesde as FechaDesde, @pFechaHasta as FechaHasta, @pPendHist as PendHist, 
@pSoloEnProd as  SoloEnProd, 
' ' as SubRecurso_Id, ' ' as DescripcionSubRecurso
from proRecursos 
Where
	proRecursos.Recurso_Id = @pRecurso_Id
	

	
Select proOrden.proOrden, proOrdenRecursos.Renglon, dbo.Segmento(proOrdenSegmento.Segmento_Id, proOrdenSegmento.Segmento1C,Segmento2C,Segmento3C,Segmento4C,Segmento1N,Segmento2N,Segmento3N,Segmento4N) as SegmentoSTR,
proRecursos.Recurso_Id, proRecursos.Descripcion as DescripcionRecursos, 
proOrdenRecursos.Cantidad as CantidadRecurso, 
proOrden.CantidadIngresada, stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionMedida, 
proOrden.FechaEmision, proOrden.FechaNecesidad, proOrden.FechaProduccion,
proOrden.FechaFin, SUM(proOrdenSubRecurso.Cantidad) as CantidadSubRecurso, 
0 as RenglonInt
From proOrdenRecursos
inner join proOrden on proOrden.proOrden=proOrdenRecursos.proOrden
left join stkUniMed on stkUniMed=proOrden.Medida_Id
inner join proOrdenSegmento on proOrdenSegmento.proOrden=proOrden.proOrden
inner join proRecursos on proRecursos.proRecursos=proOrdenRecursos.Recurso_Id
left join proOrdenSubRecurso on proOrden.proOrden=proOrdenSubRecurso.proOrden and 
								proOrdenSubRecurso.Renglon=proOrdenRecursos.Renglon
left join proSubRecursos on proSubRecursos.proSubRecursos=proOrdenSubRecurso.SubRecurso_Id
where
proRecursos.UsaSubRecurso = 1 and 
proOrdenSegmento.Empresa_Id=@pEmpresa_Id and
proRecursos.Recurso_Id=@pRecurso_Id  and
((@pPendHist='H' and proOrden.FechaProduccion between @pFechaDesde and @pFechaHasta) or
(@pPendHist='P' and proOrdenSubRecurso.SubRecurso_Id is null)) and 
(@pSoloEnProd=0 or proOrden.FechaProduccion IS NOT NULL)
group by proOrden.proOrden, proOrdenRecursos.Renglon, proOrdenSegmento.Segmento_Id, proOrdenSegmento.Segmento1C,Segmento2C,Segmento3C,Segmento4C,Segmento1N,Segmento2N,Segmento3N,Segmento4N,
proRecursos.Recurso_Id, proRecursos.Descripcion , 
proOrdenRecursos.Cantidad , 
proOrden.CantidadIngresada, stkUniMed.Medida_Id, stkUniMed.Descripcion , 
proOrden.FechaEmision, proOrden.FechaNecesidad, proOrden.FechaProduccion,
proOrden.FechaFin
ORDER BY 3,2

SELECT proOrdenSubRecurso.proOrden, proOrdenSubRecurso.Renglon, 
	proSubRecursos.SubRecurso_Id, proSubRecursos.Descripcion,
	proOrdenSubRecurso.Cantidad, 0 as RenglonInt
from proOrdenSubRecurso inner join proSubRecursos ON
	proOrdenSubRecurso.SubRecurso_Id =  proSubRecursos.proSubRecursos
	inner join proOrden on 
	proOrden.proOrden = proOrdenSubRecurso.proOrden
	INNER JOIN proOrdenRecursos ON
	proOrdenRecursos.proOrden =proOrdenSubRecurso.proOrden AND 
	proOrdenRecursos.Renglon =  proOrdenSubRecurso.Renglon
	INNER JOIN proOrdenSegmento ON
	proOrdenSegmento.proOrden = proOrden.proOrden
	INNER JOIN proRecursos ON
	proRecursos.proRecursos = proOrdenRecursos.Recurso_Id
Where 
proOrdenSegmento.Empresa_Id=@pEmpresa_Id and
proRecursos.Recurso_Id=@pRecurso_Id  and
((@pPendHist='H' and proOrden.FechaProduccion between @pFechaDesde and @pFechaHasta) or
(@pPendHist='P' and proOrdenSubRecurso.SubRecurso_Id is null)) and 
(@pSoloEnProd=0 or proOrden.FechaProduccion IS NOT NULL)

go


drop procedure proProgramaSubRecursosGuardar
go
create procedure proProgramaSubRecursosGuardar
(
@pOrden int,
@pSubRecurso_Id varchar(25),
@pRenglon int,
@pCantidad qCantidadD8
)
as
insert into proOrdenSubRecurso (proOrden,Renglon, SubRecurso_Id, Cantidad) values (@pOrden, @pRenglon, dbo.FuncFKproSubRecursos(@pSubRecurso_Id),@pCantidad)
go


drop procedure proProgramaSubRecursosEliminar
go
create procedure proProgramaSubRecursosEliminar
(
@proOrden int,
@pRecurso_id varchar(25),
@pRenglon int
)
as
delete proOrdenSubRecurso 
Where	
	proOrden = @proOrden and
	Renglon = @pRenglon and 
	Exists(SELECT 1 FROM proOrdenRecursos, proRecursos where
		proOrdenRecursos.proOrden = proOrdenSubRecurso.proOrden and 
		proOrdenRecursos.Renglon = proOrdenSubRecurso.Renglon and 
		proOrdenRecursos.Recurso_Id =  proRecursos.proRecursos  and
		proRecursos.Recurso_Id = @pRecurso_id)
go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proProgramasCuerpo.sql*/

drop procedure proProgramasCuerpoDatos
go
create procedure proProgramasCuerpoDatos
(
@pproProgramas int
)
as
select proProgramas, Renglon, stkProductos.Producto_Id, Cantidad, proProgramasCuerpo.Observaciones, FechaNecesidad, Confirmado, proRecetas.Receta_Id from proProgramasCuerpo
inner join stkProductos on stkProductos=proProgramasCuerpo.Producto_Id
inner join proRecetas on proRecetas=proProgramasCuerpo.Receta_Id
where
proProgramasCuerpo.proProgramas=@pproProgramas
go

drop procedure proProgramasCuerpoGuardar
go
create procedure proProgramasCuerpoGuardar
(
@pproProgramas int,
@pRenglon int, 
@pProducto_Id varchar(25),
@pCantidad qCantidadD8, 
@pObservaciones varchar(max), 
@pFechaNecesidad datetime, 
@pConfirmado bit, 
@pReceta_Id varchar(25)
)
as

set @pRenglon = ISNULL((SELECT MAX(Renglon) from proProgramasCuerpo where proProgramas = @pproProgramas),0)+1

insert into proProgramasCuerpo (proProgramas,Renglon,Producto_Id, Cantidad, Observaciones, FechaNecesidad, Confirmado, Receta_Id)
values(@pproProgramas, @pRenglon, dbo.FuncFKstkProductos(@pProducto_Id), @pCantidad,
@pObservaciones, @pFechaNecesidad, @pConfirmado, dbo.FuncFKproRecetas(@pReceta_Id))
go

drop procedure proProgramasCuerpoEliminar
go
create procedure proProgramasCuerpoEliminar
(
@pproProgramas int,
@pRenglon int =null
)
as
delete proProgramasCuerpo where proProgramasCuerpo.proProgramas=@pproProgramas and
proProgramasCuerpo.Renglon=isnull(@pRenglon, proProgramasCuerpo.Renglon) and
proProgramasCuerpo.Confirmado=0
go


drop procedure proProgramasCuerpoPendDatos
go
create procedure proProgramasCuerpoPendDatos
(
@pproProgramas int, 
@pFechaDesde DateTime,
@pFechaHasta DateTime 
)
as
select proProgramas, Renglon, 
	stkProductos.Producto_Id, Cantidad, proProgramasCuerpo.Observaciones, FechaNecesidad, Confirmado, 
	proRecetas.Receta_Id 
	From proProgramasCuerpo
inner join stkProductos on stkProductos=proProgramasCuerpo.Producto_Id
inner join proRecetas on proRecetas=proProgramasCuerpo.Receta_Id
where
proProgramasCuerpo.proProgramas=@pproProgramas and 
proProgramasCuerpo.Confirmado = 0 and 
proProgramasCuerpo.FechaNecesidad between @pFechaDesde And @pFechaHasta

go



drop procedure proProgramasCuerpoConfirmar
go
create procedure proProgramasCuerpoConfirmar
(
@pproProgramas int,
@pRenglon int , 
@pConfirmado bit
)
as
Update proProgramasCuerpo set Confirmado = @pConfirmado 
where 
proProgramasCuerpo.proProgramas=@pproProgramas and
proProgramasCuerpo.Renglon=@pRenglon

go


Drop Procedure proOrdenesProgramaEliminar
GO

Create Procedure proOrdenesProgramaEliminar
(
 @proProgramas int, 
 @FechaDesde DateTime, 
 @FechaHasta DateTime
)
as

select proProgramaOrden.proProgramas, proProgramaOrden.Renglon,proProgramaOrden.proOrden
	INTO #TempOrden
	from proProgramaOrden, proProgramasCuerpo, proOrden 
		Where
		proProgramaOrden.proProgramas = proProgramasCuerpo.proProgramas and 
		proProgramaOrden.Renglon = proProgramaOrden.Renglon and
		proOrden.proOrden =  proProgramaOrden.proOrden and 
		proProgramasCuerpo.FechaNecesidad between @FechaDesde And @FechaHasta and 
		proOrden.FechaProduccion IS NULL AND 
		proProgramaOrden.proProgramas = @proProgramas

DELETE FROM proProgramaOrden 
	Where exists(select 1 from #TempOrden where 
		#TempOrden.proOrden = proProgramaOrden.proOrden and 
		#TempOrden.proProgramas = proProgramaOrden.proProgramas and 
		#TempOrden.Renglon = proProgramaOrden.Renglon)

DELETE FROM proOrdenProd 
	Where exists(select 1 from #TempOrden where #TempOrden.proOrden = proOrdenProd.proOrden)
	
DELETE FROM proOrdenRecursos
	Where exists(select 1 from #TempOrden where #TempOrden.proOrden = proOrdenRecursos.proOrden)

DELETE FROM proOrdenTrabajos3
	Where exists(select 1 from #TempOrden where #TempOrden.proOrden = proOrdenTrabajos3.proOrden)

DELETE FROM proOrdenSegmento
	Where exists(select 1 from #TempOrden where #TempOrden.proOrden = proOrdenSegmento.proOrden)

DELETE FROM proOrden
	Where exists(select 1 from #TempOrden where #TempOrden.proOrden = proOrden.proOrden)


Update proProgramasCuerpo SET Confirmado = 0 
	Where exists(select 1 from #TempOrden where 
		#TempOrden.proProgramas = proProgramasCuerpo.proProgramas and
		#TempOrden.Renglon = proProgramasCuerpo.Renglon )

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proProgramasSegmento.sql*/
DROP PROCEDURE proProgramaSegmentoGuardar
GO
CREATE PROCEDURE proProgramaSegmentoGuardar
(
@pEmpresa_Id int = NULL,
@pSegmento_Id varchar(10) = NULL,
@pSegmento1N int = NULL,
@pSegmento2N int = NULL,
@pSegmento3N int = NULL,
@pSegmento4N int = NULL,
@pSegmento1C varchar(20) = NULL,
@pSegmento2C varchar(20) = NULL,
@pSegmento3C varchar(20) = NULL,
@pSegmento4C varchar(20) = NULL,
@pTieneAutomatico bit,
@pproPrograma int = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM proProgramasSegmento WHERE 
	(Empresa_Id = @pEmpresa_Id) AND 
	(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
	(Segmento1N = @pSegmento1N) AND 
	(Segmento2N = @pSegmento2N) AND 
	(Segmento3N = @pSegmento3N) AND 
	(Segmento4N = @pSegmento4N) AND 
	(Segmento1C = @pSegmento1C) AND 
	(Segmento2C = @pSegmento2C) AND 
	(Segmento3C = @pSegmento3C) AND 
	(Segmento4C = @pSegmento4C)))

BEGIN 
	UPDATE proProgramasSegmento
	SET	Empresa_Id = @pEmpresa_Id,
		proProgramas = @pproPrograma
	WHERE (Empresa_Id = @pEmpresa_Id) AND 
		(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
		(Segmento1N = @pSegmento1N) AND 
		(Segmento2N = @pSegmento2N) AND 
		(Segmento3N = @pSegmento3N) AND 
		(Segmento4N = @pSegmento4N) AND 
		(Segmento1C = @pSegmento1C) AND 
		(Segmento2C = @pSegmento2C) AND 
		(Segmento3C = @pSegmento3C) AND 
		(Segmento4C = @pSegmento4C)
END 
ELSE 
BEGIN 
	If (@pTieneAutomatico=1)
	BEGIN
		SET @pSegmento1N = (SELECT MAX(proProgramasSegmento.Segmento1N)+1 AS Segmento1N 
				FROM proProgramasSegmento
					Where				
					Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) AND 
					Segmento2N = @pSegmento2N AND 
					Segmento3N = @pSegmento3N AND 
					Segmento4N = @pSegmento4N AND 
					Segmento1C = @pSegmento1C AND 
					Segmento2C = @pSegmento2C AND 
					Segmento3C = @pSegmento3C AND 
					Segmento4C = @pSegmento4C And
					Empresa_Id = @pEmpresa_Id)
		
		If @pSegmento1N Is Null
			SET @pSegmento1N = (SELECT genContadorSegmento.PrimerNumero AS Segmento1N 
				FROM proProgramasSegmento
				INNER JOIN genContadorSegmento ON genContadorSegmento.Empresa_Id = proProgramasSegmento.Empresa_id And
					(genContadorSegmento.Segmento_Id = proProgramasSegmento.Segmento_Id) AND 
					(genContadorSegmento.Segmento2N = proProgramasSegmento.Segmento2N) AND 
					(genContadorSegmento.Segmento3N = proProgramasSegmento.Segmento3N) AND 
					(genContadorSegmento.Segmento4N = proProgramasSegmento.Segmento4N) AND 
					(genContadorSegmento.Segmento1C = proProgramasSegmento.Segmento1C) AND 
					(genContadorSegmento.Segmento2C = proProgramasSegmento.Segmento2C) AND 
					(genContadorSegmento.Segmento3C = proProgramasSegmento.Segmento3C) AND 
					(genContadorSegmento.Segmento4C = proProgramasSegmento.Segmento4C)
					Where
					genContadorSegmento.Empresa_Id = @pEmpresa_Id And
							(genContadorSegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
							genContadorSegmento.Segmento2N = @pSegmento2N AND 
							genContadorSegmento.Segmento3N = @pSegmento3N AND 
							genContadorSegmento.Segmento4N = @pSegmento4N AND 
							genContadorSegmento.Segmento1C = @pSegmento1C AND 
							genContadorSegmento.Segmento2C = @pSegmento2C AND 
							genContadorSegmento.Segmento3C = @pSegmento3C AND 
							genContadorSegmento.Segmento4C = @pSegmento4C)

		If @pSegmento1N Is Null
			Set @pSegmento1N = 1
	END
	if (@pSegmento1N = 0)
			SET @pSegmento1N = 1

	INSERT INTO proProgramasSegmento
	(
		Empresa_Id,
		Segmento_Id,
		Segmento1N,
		Segmento2N,
		Segmento3N,
		Segmento4N,
		Segmento1C,
		Segmento2C,
		Segmento3C,
		Segmento4C,
		proProgramas
	)
	VALUES 
	(
		@pEmpresa_Id,
		dbo.FuncFKgenSegmentos(@pSegmento_Id),
		@pSegmento1N,
		@pSegmento2N,
		@pSegmento3N,
		@pSegmento4N,
		@pSegmento1C,
		@pSegmento2C,
		@pSegmento3C,
		@pSegmento4C,
		@pproPrograma
	)
	
END 
SELECT @pSegmento1N as RetVal

GO


DROP PROCEDURE proProgramasSegmentoDatos
GO
CREATE PROCEDURE proProgramasSegmentoDatos
(
@pSegmento_Id varchar(25),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20)
)
as
select Empresa_Id, genSegmentos.Segmento_Id, Segmento1N, Segmento2N, Segmento3N, Segmento4N, Segmento1C, Segmento2C, Segmento3C,
Segmento4C, proProgramas,cast(0 as bit) as TieneColumnaAutomatica from proProgramasSegmento inner join genSegmentos on genSegmentos=proProgramasSegmento.Segmento_Id where 
@pSegmento_Id =genSegmentos.Segmento_Id and
@pSegmento1N =Segmento1N and
@pSegmento2N =Segmento2N and
@pSegmento3N =Segmento3N and
@pSegmento4N =Segmento4N and
@pSegmento1C =Segmento1C and
@pSegmento2C =Segmento2C and
@pSegmento3C = Segmento3C and
@pSegmento4C = Segmento4C
go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proRecetas.sql*/
drop procedure proRecetasDatos
go
create procedure proRecetasDatos
(
@pReceta_Id varchar(25)
)
as
set nocount on
select proRecetas, Receta_Id, proRecetas.Descripcion, proRecetas.Empresa_Id, proCentroProductivo.CtroProd_Id, 
proCentroProductivo.Descripcion as descripcionCentroProd, TamBatch, Agrupa, Corte, proRecetas.Inactivo, proRecetas.Posteado,
 genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario from proRecetas
 left join proCentroProductivo on proCentroProductivo.proCentroProductivo=proRecetas.CtroProd_Id
 left join genUsuarios on genUsuarios.genUsuarios= proRecetas.Usuario_Id
 where Receta_Id=@pReceta_Id
select proRecetas, Renglon, stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos, EntradaSalida,
stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, Formula, Cantidad, PorcentajeCosto, stkDepositos.Deposito_Id,
stkDepositos.Descripcion as DescripcionDeposito, proRecetasProd.Observaciones, TomaDepoT3, '' ParaPegar
 from proRecetasProd
inner join proRecetas on proRecetas=proRecetasProd.Receta_Id
left join stkproductos on stkProductos=proRecetasProd.Producto_Id
left join stkUniMed on stkUniMed=proRecetasProd.Medida_Id
left join stkDepositos on stkDepositos=proRecetasProd.Deposito_Id
where proRecetas.Receta_Id=@pReceta_Id
select proRecetas.proRecetas,Renglon,proRecursos.Recurso_Id, proRecursos.Descripcion as DescripcionRecurso, Cantidad from proRecetasRecursos
inner join proRecetas on proRecetas.proRecetas= proRecetasRecursos.proRecetas
left join proRecursos on proRecursos.proRecursos=proRecetasRecursos.Recurso_Id
where proRecetas.Receta_Id=@pReceta_Id
select proRecetas.proRecetas, proRecetas.Receta_Id, proRecetas.Descripcion as DescripcionReceta, 
proTrabajo3.proTrabajo3, proTrabajo3.Trabajo3_Id, proTrabajo3.Descripcion as DescripcionTrabajo3 from proRecetasTrabajo3
inner join proRecetas on proRecetas.proRecetas=proRecetasTrabajo3.Receta_Id
inner join proTrabajo3 on proTrabajo3.proTrabajo3=proRecetasTrabajo3.Trabajo3_Id
where proRecetas.Receta_Id=@pReceta_Id

 Declare @pidentity bigint= dbo.FuncFKproRecetas(@pReceta_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'proRecetas'

  RETURN @@Error 
go

DROP PROCEDURE proRecetasGuardar
GO
CREATE PROCEDURE proRecetasGuardar
(
@pReceta_Id varchar(25),
@pReceta_Id_Nuevo varchar(25),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(80),
@pCtroProd_Id varchar(8) = NULL,
@pTamBatch qCantidadD8,
@pAgrupa Sino,
@pCorte Sino,
@pInactivo Sino,
@pPosteado Sino,
@pUsuario_Id int = NULL,
@pFechaModificacion qFechaHora
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM proRecetas WHERE (Receta_Id = @pReceta_Id)))
BEGIN 
	UPDATE proRecetas
	SET		@lIdentidad = proRecetas,
		Receta_Id = @pReceta_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		CtroProd_Id = dbo.FuncFKproCentroProductivo(@pCtroProd_Id),
		TamBatch = @pTamBatch,
		Agrupa = @pAgrupa,
		Corte = @pCorte,
		Inactivo = @pInactivo,
		Posteado = @pPosteado,
		Usuario_Id = @pUsuario_Id,
		FechaModificacion = @pFechaModificacion
	WHERE (Receta_Id = @pReceta_Id)
END 
ELSE 
BEGIN 
	INSERT INTO proRecetas
	(
		Receta_Id,
		Empresa_Id,
		Descripcion,
		CtroProd_Id,
		TamBatch,
		Agrupa,
		Corte,
		Inactivo,
		Posteado,
		Usuario_Id,
		FechaModificacion
	)
	VALUES 
	(
		@pReceta_Id,
		@pEmpresa_Id,
		@pDescripcion,
		dbo.FuncFKproCentroProductivo(@pCtroProd_Id),
		@pTamBatch,
		@pAgrupa,
		@pCorte,
		@pInactivo,
		@pPosteado,
		@pUsuario_Id,
		@pFechaModificacion
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO



DROP PROCEDURE proRecetasEliminar
GO
CREATE PROCEDURE proRecetasEliminar
(
@pReceta_Id varchar(25) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM proRecetas 
WHERE (Receta_Id = @pReceta_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKproRecetas
GO

CREATE FUNCTION FuncFKproRecetas
(
@pReceta_Id varchar (25)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = proRecetas FROM proRecetas WHERE 
	Receta_Id = @pReceta_Id
  RETURN @pIdentity
END


GO


DROP PROCEDURE proRecetasCambioProductoGuardar
GO

CREATE PROCEDURE proRecetasCambioProductoGuardar
(
	@ProductoOriginal VarChar(25),
	@ProductoNuevo VarChar(25),
	@Empresa_Id int
)

as
	Update proRecetasProd SET 
		Producto_Id = dbo.FuncFKstkProductos(@ProductoNuevo)
		Where
			Producto_Id = dbo.FuncFKstkProductos(@ProductoOriginal) and 
			Exists(SELECT 1 FROM proRecetas WHERE
				proRecetas.proRecetas = proRecetasProd.Receta_Id and 
				ISNULL(proRecetas.Empresa_Id,@Empresa_Id) = @Empresa_Id)

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proRecetasProd.sql*/
DROP PROCEDURE proRecetasProdGuardar
GO
CREATE PROCEDURE proRecetasProdGuardar
(
@pReceta_Id varchar(25),
@pRenglon int,
@pProducto_Id varchar(25),
@pEntradaSalida char(1),
@pMedida_Id varchar(5) = NULL,
@pFormula varchar(max),
@pCantidad qCantidadD8,
@pPorcentajeCosto qPorcentaje,
@pDeposito_Id varchar(15) = NULL,
@pObservaciones varchar(max) = NULL,
@pTomaDepoT3 Sino
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM proRecetasProd WHERE (Receta_Id = dbo.FuncFKproRecetas(@pReceta_Id)) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE proRecetasProd
	SET		Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id),
		EntradaSalida = @pEntradaSalida,
		Medida_Id = dbo.FuncFKstkUniMed(@pMedida_Id),
		Formula = @pFormula,
		Cantidad = @pCantidad,
		PorcentajeCosto = @pPorcentajeCosto,
		Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id),
		Observaciones = @pObservaciones,
		TomaDepoT3 = @pTomaDepoT3
	WHERE (Receta_Id = dbo.FuncFKproRecetas(@pReceta_Id)) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO proRecetasProd
	(
		Receta_Id,
		Renglon,
		Producto_Id,
		EntradaSalida,
		Medida_Id,
		Formula,
		Cantidad,
		PorcentajeCosto,
		Deposito_Id,
		Observaciones,
		TomaDepoT3
	)
	VALUES 
	(
		dbo.FuncFKproRecetas(@pReceta_Id),
		@pRenglon,
		dbo.FuncFKstkProductos(@pProducto_Id),
		@pEntradaSalida,
		dbo.FuncFKstkUniMed(@pMedida_Id),
		@pFormula,
		@pCantidad,
		@pPorcentajeCosto,
		dbo.FuncFKstkDepositos(@pDeposito_Id),
		@pObservaciones,
		@pTomaDepoT3
	)
END 

GO

DROP PROCEDURE proRecetasProdDatos
GO
CREATE PROCEDURE proRecetasProdDatos
(
@pReceta_Id int,
@pRenglon int
)
AS
SET NOCOUNT ON 

SELECT proRecetas.Receta_Id, proRecetas.Descripcion as DescripcionReceta, proRecetasProd.Renglon, stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProducto, proRecetasProd.EntradaSalida,
	stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionMedida_Id, proRecetasProd.Formula, proRecetasProd.Cantidad, proRecetasProd.PorcentajeCosto,
	stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos, proRecetasProd.Observaciones, proRecetasProd.TomaDepoT3
FROM proRecetasProd 
LEFT JOIN stkDepositos  ON (stkDepositos.stkDepositos = proRecetasProd.Deposito_Id)
left join stkProductos on stkProductos=proRecetasProd.Producto_Id
left join stkUniMed on stkUniMed.stkUniMed=proRecetasProd.Medida_Id
inner join proRecetas on proRecetas=proRecetasProd.Receta_Id
WHERE (proRecetas = @pReceta_Id)
AND (Renglon = @pRenglon)
 
 RETURN @@Error 

GO

DROP PROCEDURE proRecetasProdEliminar
GO
CREATE PROCEDURE proRecetasProdEliminar
(
@pReceta_Id varchar(25),
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM proRecetasProd 
WHERE (Receta_Id = dbo.FuncFKproRecetas(@pReceta_Id))
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proRecetasRecursos.sql*/
DROP PROCEDURE proRecetasRecursosGuardar
GO
CREATE PROCEDURE proRecetasRecursosGuardar
(
@pRecetas_Id varchar(25),
@pRenglon int,
@pRecurso_Id varchar(25),
@pCantidad qCantidadD8
)
AS
SET NOCOUNT ON 

	INSERT INTO proRecetasRecursos
	(
		proRecetas,
		Renglon,
		Recurso_Id,
		Cantidad
	)
	VALUES 
	(
		dbo.FuncFKproRecetas(@pRecetas_Id),
		@pRenglon,
		dbo.FuncFKproRecursos(@pRecurso_Id),
		@pCantidad
	)


GO

DROP PROCEDURE proRecetasRecursosDatos
GO
CREATE PROCEDURE proRecetasRecursosDatos
(
@pproRecetas int,
@pRenglon int=null
)
AS
SET NOCOUNT ON 

SELECT proRecetas.Receta_Id, proRecetas.Descripcion as DescripcionRecetas, proRecetasRecursos.Renglon, proRecursos.Recurso_Id,
	proRecursos.Descripcion as DescripcionRecursos,proRecetasRecursos.Cantidad
FROM proRecetasRecursos 
INNER JOIN proRecetas  ON (proRecetas.proRecetas = proRecetasRecursos.proRecetas)
left join proRecursos on proRecursos.proRecursos=proRecetasRecursos.Recurso_Id
WHERE (proRecetas.proRecetas = @pproRecetas)
AND (Renglon = isnull(@pRenglon,Renglon))
 
 RETURN @@Error 

GO

DROP PROCEDURE proRecetasRecursosEliminar
GO
CREATE PROCEDURE proRecetasRecursosEliminar
(
@pReceta_Id varchar(25),
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM proRecetasRecursos 
WHERE (proRecetas = dbo.FuncFKproRecetas(@pReceta_Id))
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proRecetasTrabajo3.sql*/
DROP PROCEDURE proRecetasTrabajo3Guardar
GO
CREATE PROCEDURE proRecetasTrabajo3Guardar
(
@pReceta_Id varchar(25),
@pTrabajo3_Id varchar(25)
)
AS
SET NOCOUNT ON 

	INSERT INTO proRecetasTrabajo3
	(
		Receta_Id,
		Trabajo3_Id
	)
	VALUES 
	(
		dbo.FuncFKproRecetas(@pReceta_Id),
		dbo.FuncFKproTrabajo3(@pTrabajo3_Id)
	)


GO

DROP PROCEDURE proRecetasTrabajo3Datos
GO
CREATE PROCEDURE proRecetasTrabajo3Datos
(
@pReceta_Id varchar(25),
@pTrabajo3_Id varchar(25)=null
)
AS
SET NOCOUNT ON 

SELECT proRecetas.Receta_Id, proRecetas.Descripcion as DescripcionRecetas, 
proTrabajo3.Trabajo3_Id,proTrabajo3.Descripcion as DescripcionTrabajo3
FROM proRecetasTrabajo3 
INNER JOIN proRecetas  ON (proRecetas.proRecetas = proRecetasTrabajo3.Receta_Id)
inner join proTrabajo3 on proTrabajo3=proRecetasTrabajo3.Trabajo3_Id
WHERE (proRecetas.Receta_Id = @pReceta_Id)
AND (proTrabajo3.Trabajo3_Id = isnull(@pTrabajo3_Id,proTrabajo3.Trabajo3_Id))
 
 RETURN @@Error 

GO

DROP PROCEDURE proRecetasTrabajo3Eliminar
GO
CREATE PROCEDURE proRecetasTrabajo3Eliminar
(
@pReceta_Id varchar(25),
@pTrabajo3_Id varchar(25)=null
)
AS
SET NOCOUNT ON 

DELETE FROM proRecetasTrabajo3 
WHERE (Receta_Id = dbo.FuncFKproRecetas(@pReceta_Id))
AND (Trabajo3_Id = isnull(dbo.FuncFKproTrabajo3(@pTrabajo3_Id),Trabajo3_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proRecursos.sql*/
DROP PROCEDURE proRecursosGuardar
GO
CREATE PROCEDURE proRecursosGuardar
(
@pRecurso_Id varchar(25),
@pRecurso_Id_Nueva varchar(25),
@pDescripcion varchar(60),
@pUnidad_Id varchar(5) = NULL,
@pCapacidad qCantidadD8,
@pCosto qMonedaD4,
@pUsaSubRecurso Sino,
@pInactivo Sino,
@pPosteado Sino,
@pEmpresa_Id Int = NULL, 
@pUsuario_Id Int, 
@pCuenta_Id VarChar(25) = NULL
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM proRecursos WHERE (Recurso_Id = @pRecurso_Id)))
BEGIN 
	UPDATE proRecursos
	SET		@lIdentidad=proRecursos,
	Recurso_Id = @pRecurso_Id_Nueva,
		Descripcion = @pDescripcion,
		Unidad_Id = dbo.FuncFKstkUniMed(@pUnidad_Id),
		Capacidad = @pCapacidad,
		Costo = @pCosto,
		UsaSubRecurso = @pUsaSubRecurso,
		Inactivo = @pInactivo,
		Posteado = @pPosteado, 
		Empresa_Id = @pEmpresa_Id, 
		Usuario_Id = @pUsuario_Id, 
		Cuenta_Id = dbo.FuncFKconCuentas(@pCuenta_Id)
	WHERE (Recurso_Id = @pRecurso_Id)
END 
ELSE 
BEGIN 
	INSERT INTO proRecursos
	(
		
		Recurso_Id,
		Descripcion,
		Unidad_Id,
		Capacidad,
		Costo,
		UsaSubRecurso,
		Inactivo,
		Posteado,
		Empresa_Id, 
		Usuario_Id,
		Cuenta_Id
	)
	VALUES 
	(
		
		@pRecurso_Id,
		@pDescripcion,
		dbo.FuncFKstkUniMed(@pUnidad_Id),
		@pCapacidad,
		@pCosto,
		@pUsaSubRecurso,
		@pInactivo,
		@pPosteado, 
		@pEmpresa_Id, 
		@pUsuario_Id, 
		dbo.FuncFKconCuentas(@pCuenta_Id)
	)
SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE proRecursosDatos
GO
CREATE PROCEDURE proRecursosDatos
(
@pRecurso_Id varchar(25)
)
AS
SET NOCOUNT ON 

SELECT proRecursos.proRecursos, proRecursos.Recurso_Id,  proRecursos.Descripcion, stkUniMed.Medida_Id,
	stkUniMed.Descripcion as DescripcionUniMed, proRecursos.Capacidad, proRecursos.Costo, proRecursos.UsaSubRecurso,
	proRecursos.Inactivo, proRecursos.Posteado, 
	proRecursos.Empresa_Id,
	CAST(CASE WHEN proRecursos.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT) AS PTodasEmpresas,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
	conCuentas.Cuenta_Id, conCuentas.Descripcion as  DescripcionCuenta
FROM proRecursos 
LEFT JOIN stkUniMed  ON (stkUniMed.stkUniMed = proRecursos.Unidad_Id)
INNER JOIN genUsuarios ON genUsuarios.genUsuarios = proRecursos.Usuario_Id
LEFT JOIN conCuentas ON conCuentas.conCuentas = proRecursos.Cuenta_Id
WHERE (proRecursos = dbo.FuncFKproRecursos(@pRecurso_Id))

exec proSubRecursosDatos @pRecurso_Id

 Declare @pidentity bigint= dbo.FuncFKproRecursos(@pRecurso_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'proRecursos'

 RETURN @@Error 

GO

DROP PROCEDURE proRecursosEliminar
GO
CREATE PROCEDURE proRecursosEliminar
(
@pRecurso_Id varchar(25) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM proRecursos 
WHERE proRecursos.Recurso_Id=@pRecurso_Id
 
 RETURN @@Error 

GO
DROP FUNCTION FuncFKproRecursos
GO

CREATE FUNCTION FuncFKproRecursos
(
@pRecurso_Id varchar (25)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = proRecursos FROM proRecursos WHERE 
	Recurso_Id = @pRecurso_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proSubRecursos.sql*/
DROP PROCEDURE proSubRecursosGuardar
GO
CREATE PROCEDURE proSubRecursosGuardar
(
@pSubRecurso_Id varchar(25),
@pSubRecurso_Id_Nuevo varchar(25),
@pRecurso_Id varchar(25),
@pDescripcion varchar(60),
@pCapacidad qCantidadD8,
@pCosto qMonedaD4,
@pPredeterminado Sino,
@pInactivo Sino
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM proSubRecursos WHERE (SubRecurso_Id = @pSubRecurso_Id)))
BEGIN 
	UPDATE proSubRecursos
	SET		@lIdentidad = proSubRecursos,
		SubRecurso_Id = @pSubRecurso_Id_Nuevo,
		Recurso_Id = dbo.FuncFKproRecursos(@pRecurso_Id),
		Descripcion = @pDescripcion,
		Capacidad = @pCapacidad,
		Costo = @pCosto,
		Predeterminado = @pPredeterminado,
		Inactivo = @pInactivo
	WHERE (SubRecurso_Id = @pSubRecurso_Id)
END 
ELSE 
BEGIN 
	INSERT INTO proSubRecursos
	(
		SubRecurso_Id,
		Recurso_Id,
		Descripcion,
		Capacidad,
		Costo,
		Predeterminado,
		Inactivo
	)
	VALUES 
	(
		@pSubRecurso_Id,
		dbo.FuncFKproRecursos(@pRecurso_Id),
		@pDescripcion,
		@pCapacidad,
		@pCosto,
		@pPredeterminado,
		@pInactivo
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE proSubRecursosDatos
GO
CREATE PROCEDURE proSubRecursosDatos
(
@pRecurso_Id varchar(25)
)
AS
SET NOCOUNT ON 

SELECT proSubRecursos.proSubRecursos, proSubRecursos.SubRecurso_Id, proSubRecursos.SubRecurso_Id SubRecurso_Id_Nueva, proRecursos.Recurso_Id, proRecursos.Descripcion as DescripcionRecursos,
	proSubRecursos.Descripcion, proSubRecursos.Capacidad, proSubRecursos.Costo, proSubRecursos.Predeterminado,
	proSubRecursos.Inactivo
FROM proSubRecursos 
INNER JOIN proRecursos  ON (proRecursos.proRecursos = proSubRecursos.Recurso_Id)
WHERE (proRecursos.Recurso_Id = @pRecurso_Id)
 
 RETURN @@Error 

GO


DROP PROCEDURE proSubRecursosUNODatos
GO
CREATE PROCEDURE proSubRecursosUNODatos
(
@pSubRecurso_Id varchar(25)
)
AS
SET NOCOUNT ON 

SELECT proSubRecursos.proSubRecursos, proSubRecursos.SubRecurso_Id, proSubRecursos.SubRecurso_Id SubRecurso_Id_Nueva, proRecursos.Recurso_Id, proRecursos.Descripcion as DescripcionRecursos,
	proSubRecursos.Descripcion, proSubRecursos.Capacidad, proSubRecursos.Costo, proSubRecursos.Predeterminado,
	proSubRecursos.Inactivo
FROM proSubRecursos 
INNER JOIN proRecursos  ON (proRecursos.proRecursos = proSubRecursos.Recurso_Id)
WHERE 
proSubRecursos.SubRecurso_Id = @pSubRecurso_Id
 
 RETURN @@Error 

GO

DROP PROCEDURE proSubRecursosEliminar
GO
CREATE PROCEDURE proSubRecursosEliminar
(
@pRecurso_Id varchar(25),
@pSubRecurso_Id varchar(25) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM proSubRecursos 
WHERE proSubRecursos.Recurso_Id=dbo.FuncFKproRecursos(@pRecurso_Id) and (SubRecurso_Id = isnull(@pSubRecurso_Id,SubRecurso_Id))
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKproSubRecursos
GO

CREATE FUNCTION FuncFKproSubRecursos
(

@pSubRecurso_Id varchar (25)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = proSubRecursos FROM proSubRecursos WHERE 
	SubRecurso_Id = @pSubRecurso_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proTrabajo3.sql*/
DROP PROCEDURE proTrabajo3Guardar
GO
CREATE PROCEDURE proTrabajo3Guardar
(
@pTrabajo3_Id varchar(25),
@pTrabajo3_Id_Nuevo varchar(25),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(60),
@pCuenta_Id varchar(25) = NULL,
@pInactivo Sino,
@pPosteado Sino,
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM proTrabajo3 WHERE (Trabajo3_Id = @pTrabajo3_Id)))
BEGIN 
	UPDATE proTrabajo3
	SET		@lIdentidad = proTrabajo3,
		Trabajo3_Id = @pTrabajo3_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Cuenta_Id = dbo.FuncFKconCuentas(@pCuenta_Id),
		Inactivo = @pInactivo,
		Posteado = @pPosteado,
		Usuario_Id = @pUsuario_Id
	WHERE (Trabajo3_Id = @pTrabajo3_Id)
END 
ELSE 
BEGIN 
	INSERT INTO proTrabajo3
	(
		Trabajo3_Id,
		Empresa_Id,
		Descripcion,
		Cuenta_Id,
		Inactivo,
		Posteado,
		Usuario_Id
	)
	VALUES 
	(
		@pTrabajo3_Id,
		@pEmpresa_Id,
		@pDescripcion,
		dbo.FuncFKconCuentas(@pCuenta_Id),
		@pInactivo,
		@pPosteado,
		@pUsuario_Id
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE proTrabajo3Datos
GO
CREATE PROCEDURE proTrabajo3Datos
(
@pTrabajo3_Id varchar(25)
)
AS
SET NOCOUNT ON 

SELECT proTrabajo3.proTrabajo3, proTrabajo3.Trabajo3_Id, proTrabajo3.Empresa_Id,
	Cast( Case When proTrabajo3.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, proTrabajo3.Descripcion, conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuentas,
	proTrabajo3.Inactivo, proTrabajo3.Posteado, proTrabajo3.Usuario_Id
FROM proTrabajo3 
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = proTrabajo3.Cuenta_Id)
WHERE (Trabajo3_Id = @pTrabajo3_Id)
 


  Declare @pidentity bigint= dbo.FuncFKproTrabajo3(@pTrabajo3_Id)
  exec proTrabajo3ProvDatos @pTrabajo3_Id,null
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'proTrabajo3'
 RETURN @@Error 

GO

DROP PROCEDURE proTrabajo3Eliminar
GO
CREATE PROCEDURE proTrabajo3Eliminar
(
@pTrabajo3_Id varchar(25) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM proTrabajo3 
WHERE (Trabajo3_Id = @pTrabajo3_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKproTrabajo3
GO

CREATE FUNCTION FuncFKproTrabajo3
(
@pTrabajo3_Id varchar (25)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = proTrabajo3 FROM proTrabajo3 WHERE 
	Trabajo3_Id = @pTrabajo3_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proTrabajo3Prov.sql*/
DROP PROCEDURE proTrabajo3ProvGuardar
GO
CREATE PROCEDURE proTrabajo3ProvGuardar
(
@pTrabajo3_Id varchar(25),
@pRenglon int,
@pProveedor_Id varchar(15) = NULL,
@pMoneda_Id varchar(3) = NULL,
@pPrecio qMonedaD4,
@pMedida_Id varchar(5) = NULL,
@pCantidad qCantidadD8,
@pPredeterminado Sino, 
@pDeposito_Id VarChar(5)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM proTrabajo3Prov WHERE (Trabajo3_Id = dbo.FuncFKproTrabajo3(@pTrabajo3_Id)) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE proTrabajo3Prov
	SET		Proveedor_Id = dbo.FuncFKcomProveedores(@pProveedor_Id),
		Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id),
		Precio = @pPrecio,
		Medida_Id = dbo.FuncFKstkUniMed(@pMedida_Id),
		Cantidad = @pCantidad,
		Predeterminado = @pPredeterminado, 
		Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id)
	WHERE (Trabajo3_Id = dbo.FuncFKproTrabajo3(@pTrabajo3_Id)) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO proTrabajo3Prov
	(
		Trabajo3_Id,
		Renglon,
		Proveedor_Id,
		Moneda_Id,
		Precio,
		Medida_Id,
		Cantidad,
		Predeterminado,
		Deposito_Id 
	)
	VALUES 
	(
		dbo.FuncFKproTrabajo3(@pTrabajo3_Id),
		@pRenglon,
		dbo.FuncFKcomProveedores(@pProveedor_Id),
		dbo.FuncFKgenMonedas(@pMoneda_Id),
		@pPrecio,
		dbo.FuncFKstkUniMed(@pMedida_Id),
		@pCantidad,
		@pPredeterminado,
		dbo.FuncFKstkDepositos(@pDeposito_Id)
	)
END 

GO

DROP PROCEDURE proTrabajo3ProvDatos
GO
CREATE PROCEDURE proTrabajo3ProvDatos
(
@pTrabajo3_Id varchar(25),
@pRenglon int=null
)
AS
SET NOCOUNT ON 

SELECT proTrabajo3.Trabajo3_Id, proTrabajo3.Descripcion, proTrabajo3Prov.Renglon, comProveedores.Proveed_Id, comProveedores.RazonSocial as DescripcionProveed,
genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMoneda, proTrabajo3Prov.Precio, stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, proTrabajo3Prov.Cantidad,
	proTrabajo3Prov.Predeterminado, stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDeposito
FROM proTrabajo3Prov 
LEFT JOIN stkUniMed  ON (stkUniMed.stkUniMed = proTrabajo3Prov.Medida_Id)
inner join proTrabajo3 on proTrabajo3.proTrabajo3=proTrabajo3Prov.Trabajo3_Id
left join comProveedores on comProveedores.genEntidades=proTrabajo3Prov.Proveedor_Id
left join genMonedas on genMonedas.genMonedas=proTrabajo3Prov.Moneda_Id
left join stkDepositos ON stkDepositos.stkDepositos = proTrabajo3Prov.Deposito_Id
WHERE (proTrabajo3.Trabajo3_Id = @pTrabajo3_Id)
AND (Renglon = isnull(@pRenglon,Renglon))
 
 RETURN @@Error 

GO

DROP PROCEDURE proTrabajo3ProvEliminar
GO
CREATE PROCEDURE proTrabajo3ProvEliminar
(
@pTrabajo3_Id varchar(25),
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM proTrabajo3Prov 
WHERE (Trabajo3_Id = dbo.FuncFKproTrabajo3(@pTrabajo3_Id))
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\proVarGlobales.sql*/
DROP PROCEDURE provarGlobalesGuardar
GO
CREATE PROCEDURE provarGlobalesGuardar
(
@pVariable_Id smallint,
@pDescripcion varchar(100),
@pValor qCantidadD8
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM provarGlobales WHERE (Variable_Id = @pVariable_Id)))
BEGIN 
	UPDATE provarGlobales
	SET		Descripcion = @pDescripcion,
		Valor = @pValor
	WHERE (Variable_Id = @pVariable_Id)
END 
ELSE 
BEGIN 
	INSERT INTO provarGlobales
	(
		Variable_Id,
		Descripcion,
		Valor
	)
	VALUES 
	(
		@pVariable_Id,
		@pDescripcion,
		@pValor
	)
END 

GO

DROP PROCEDURE provarGlobalesDatos
GO
CREATE PROCEDURE provarGlobalesDatos
(
@pVariable_Id smallint
)
AS
SET NOCOUNT ON 

SELECT provarGlobales.Variable_Id, provarGlobales.Descripcion, provarGlobales.Valor
FROM provarGlobales 
WHERE (Variable_Id = @pVariable_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE provarGlobalesEliminar
GO
CREATE PROCEDURE provarGlobalesEliminar
(
@pVariable_Id smallint = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM provarGlobales 
WHERE (Variable_Id = ISNULL(@pVariable_Id, Variable_Id))
 
 RETURN @@Error 

GO
drop Procedure proFormulasConVar
go
create Procedure proFormulasConVar

as
select proRecetas.Receta_Id,Renglon,stkProductos.Producto_Id,EntradaSalida,stkUniMed.Medida_Id,Formula,Cantidad,PorcentajeCosto,stkDepositos.Deposito_Id,proRecetasProd.Observaciones,TomaDepoT3 from proRecetasProd 
inner join stkProductos on stkProductos.stkProductos=proRecetasProd.Producto_Id
inner join stkUniMed on stkUniMed=proRecetasProd.Medida_Id
inner join stkDepositos on stkDepositos=proRecetasProd.Deposito_Id
inner join proRecetas on proRecetas=proRecetasProd.Receta_Id
where Formula like ('%var%')

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\PTodasEmpresas.sql*/
DROP Function PTodasEmpresas
GO
CREATE Function PTodasEmpresas(@Empresa_id int=null)
RETURNS bit
Begin
	return Cast(Case When @Empresa_id is null then 1 else 0 end as Bit)
end	

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\QuePedimento.sql*/
-- exec QuePedimento '124NPT101','P',10,'20200811',1
-- este procedure lo uso para asignar el numero de pedimento en ajustes de inventarios
DROP PROCEDURE QuePedimento
GO
CREATE PROCEDURE QuePedimento(
@Producto_Id VarChar(25),
@Deposito_Id VarChar(5), 
@Cantidad Numeric(19,8), 
@Fecha DateTime,
@Empresa_Id Int
)
AS
DECLARE @FechaDesp DATETIME
DECLARE @Despacho_Id VarChar(20)
DECLARE @CantidadDespa Numeric(19,8)


CREATE TABLE #PEDIMENTOS (Despacho_Id VarChar(20), Cantidad Numeric(19,8))

DECLARE curDespachos CURSOR FOR
	SELECT comDespachos.Fecha, comDespachos.Despacho_Id, 
		Convert(Numeric(19,8), sum(stkMoviDespa.Cantidad * stkMoviCabe.Signo)) as Cantidad
	from stkMoviCabe 
	INNER JOIN stkMoviCuerpo ON stkMoviCabe.stkMoviCabe = stkMoviCuerpo.stkMoviCabe
	INNER JOIN stkMoviDespa  ON stkMoviDespa.stkMoviCabe = stkMoviCuerpo.stkMoviCabe and 
								stkMoviDespa.Renglon = stkMoviCuerpo.Renglon
	INNER JOIN stkProductos ON stkMoviCuerpo.Producto_Id = stkProductos.stkProductos
	INNER JOIN stkDepositos ON stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id
	INNER JOIN conAsientos ON conAsientos.conAsientos = stkMoviCabe.stkMoviCabe 
	INNER JOIN comDespachos ON comDespachos.comDespachos = stkMoviDespa.Despacho_Id
	WHERE
	conAsientos.Anulado= 0 AND 
	conAsientos.Posteado = 1 AND 
	conAsientos.Fecha < @Fecha and 
	conAsientos.Empresa_Id = @Empresa_Id
	GROUP BY comDespachos.Fecha, comDespachos.Despacho_Id
	HAVING sum(stkMoviDespa.Cantidad * stkMoviCabe.Signo) < 0
	ORDER BY 1 DESC

OPEN curDespachos  
  
FETCH NEXT FROM curDespachos
INTO @FechaDesp, @Despacho_Id, @CantidadDespa

WHILE @@FETCH_STATUS = 0  and @Cantidad > 0
BEGIN 

	if (@CantidadDespa > @Cantidad)
		SET @CantidadDespa = @Cantidad

	if (@CantidadDespa > 0)
		insert into #PEDIMENTOS (Despacho_Id, Cantidad) VALUES(@Despacho_Id, @CantidadDespa)


	FETCH NEXT FROM curDespachos
	INTO @FechaDesp, @Despacho_Id, @CantidadDespa

END

IF @Cantidad > 0
	insert into #PEDIMENTOS (Despacho_Id, Cantidad) VALUES('1', @Cantidad)

CLOSE curDespachos
DEALLOCATE curDespachos

Select @Producto_Id as Producto_Id, @Deposito_Id as Deposito_Id, @Cantidad as Cantidad, @Fecha as Fecha
SELECT * FROM #PEDIMENTOS
DROP TABLE #PEDIMENTOS

GO




Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\RemiCancPend.sql*/
drop procedure stkRemiCancPend
go
create procedure stkRemiCancPend
@pFechaHasta datetime
as
set nocount on
select @pFechaHasta as FechaHasta
select stkRemiPendFact.stkMoviCabe, dbo.Segmento(genAsiSegmentos.Segmento_Id,genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C,genAsiSegmentos.Segmento4C,genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,
genAsiSegmentos.Segmento4N) as SegmentoSTR, conAsientos.Fecha,
sum(stkMoviCuerpo.CostoUnitario*stkRemiPendFact.CantidadPendiente) as Monto,convert(bit,0) as Marca
from stkRemiPendFact 
inner join stkRemitos on stkRemitos.stkMoviCabe=stkRemiPendFact.stkMoviCabe
inner join genAsiSegmentos on genAsiSegmentos.Asiento_Id=stkRemiPendFact.stkMoviCabe
inner join stkMoviCuerpo on stkMoviCuerpo.stkMoviCabe=stkRemiPendFact.stkMoviCabe and stkMoviCuerpo.Renglon= stkRemiPendFact.Renglon
inner join conAsientos on conAsientos.conAsientos=stkRemiPendFact.stkMoviCabe
where conAsientos.Fecha<=@pFechaHasta and stkRemiPendFact.CantidadPendiente>0
group by stkRemiPendFact.stkMoviCabe, genAsiSegmentos.Segmento_Id,genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C,genAsiSegmentos.Segmento4C,genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,
genAsiSegmentos.Segmento4N, conAsientos.Fecha
go
drop procedure stkEliminaRemiPendGuardar
go
create procedure stkEliminaRemiPendGuardar
@pstkMoviCabe bigint,
@pUsuario_Id int
as
set nocount on
insert into stkEliminaRemiPend
(stkMoviCabe, Usuario_Id, Fecha)
values (@pstkMoviCabe,@pUsuario_Id,getdate())
go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\SegmentoSP.sql*/

DROP FUNCTION [dbo].[SegmentoSP]
go

CREATE FUNCTION [dbo].[SegmentoSP](@Segmento_id int, 
	@Segmento1C VarChar(20),@Segmento2C VarChar(20),
	@Segmento3C VarChar(20), @Segmento4C VarChar(20),
	@Segmento1N int,@Segmento2N int,
	@Segmento3N int, @Segmento4N int)
RETURNS VarChar(120)
as
BEGIN

DECLARE @Orden1C INT
DECLARE @Orden2C INT
DECLARE @Orden3C INT
DECLARE @Orden4C INT
DECLARE @Orden1N INT
DECLARE @Orden2N INT
DECLARE @Orden3N INT
DECLARE @Orden4N INT
DECLARE @Ret VarChar(120)		
DECLARE @I INT
DECLARE @Sepa Char(1) 


DECLARE @Orden1CEP BIT
DECLARE @Orden2CEP BIT
DECLARE @Orden3CEP BIT
DECLARE @Orden4CEP BIT
DECLARE @Digitos1N Int

SET @Ret=''

SELECT @Orden1C = Orden1C , @Orden2C = Orden2C , @Orden3C = Orden3C , @Orden4C = Orden4C ,
	@Orden1N = Orden1N , @Orden2N = Orden2N , @Orden3N = Orden3N , @Orden4N = Orden4N,
	@Orden1CEP = case when Origen1C = 9 then 1 else 0 end, 
	@Orden2CEP = case when Origen2C = 9 then 1 else 0 end, 
	@Orden3CEP = case when Origen3C = 9 then 1 else 0 end, 
	@Orden4CEP = case when Origen4C = 9 then 1 else 0 end
	from genSegmentos 
	where
	genSegmentos.genSegmentos = @Segmento_Id

SET @I= 1
SET @Sepa=''
WHILE @I <= 8
BEGIN 
	IF @Orden1C = @I
	BEGIN
		IF @Segmento1C <> '' and @Orden1CEP = 0
		BEGIN
			SET @Ret = @Ret + @Sepa + @Segmento1C
			SET @Sepa = '-'
		END
	END	
	
	IF @Orden2C = @I
	BEGIN
		IF @Segmento2C <> '' and @Orden2CEP = 0
		BEGIN
		SET @Ret = @Ret + @Sepa + @Segmento2C
		SET @Sepa = '-'
		END
	END	
	
	IF @Orden3C = @I 
	BEGIN
		IF @Segmento3C <> '' and @Orden3CEP = 0
		BEGIN
		SET @Ret = @Ret + @Sepa + @Segmento3C
		SET @Sepa = '-'
		END
	END	
	
	IF @Orden4C = @I
	BEGIN
		IF @Segmento4C <> '' and @Orden4CEP = 0
		BEGIN
		SET @Ret = @Ret + @Sepa + @Segmento4C
		SET @Sepa = '-'
		END
	END	
	
	IF @Orden1N = @I
	BEGIN
		SET @Ret = @Ret + @Sepa + case when @Segmento1N<0 then '*' else '' end + 
			Left('0000000000',@Digitos1N-len(ltrim(STR(abs(@Segmento1N),@Digitos1N))))+ltrim(STR(abs(@Segmento1N),@Digitos1N))
		SET @Sepa = '-'
	END	
	
	IF @Orden2N = @I
	BEGIN
		SET @Ret = @Ret + @Sepa + case when @Segmento2N<0 then '*' else '' end +ltrim(STR(abs(@Segmento2N),10))
		SET @Sepa = '-'
	END	
	
	IF @Orden3N = @I
	BEGIN
		SET @Ret = @Ret + @Sepa +case when @Segmento3N<0 then '*' else '' end + ltrim(STR(Abs(@Segmento3N),10))
		SET @Sepa = '-'
	END	
	
	IF @Orden4N = @I
	BEGIN
		SET @Ret = @Ret + @Sepa +case when @Segmento4N<0 then '*' else '' end + ltrim(STR(Abs(@Segmento4N),10))
		SET @Sepa = '-'
	END	
	
	SET @I = @I+1
	
END
RETURN @Ret	

END	

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sisAcciones.sql*/
Drop Procedure sisAccion_Datos
GO

CREATE PROCEDURE sisAccion_Datos
(
	@pAccion_Id varchar(200)
)

AS
SET NOCOUNT ON  

SELECT Controlador, ModoTransaccion 
FROM sisAccionesConfig
WHERE Accion_Id = @pAccion_Id
GO

Drop Procedure sisAccion_Guardar
GO

create PROCEDURE sisAccion_Guardar
(
	@pAccion_Id varchar(200),
	@pAccion_Id_Anterior varchar(200),	
	@pDescripcion varchar(254) = NULL,
	@pControlador varchar(254),
	@pModoTransaccion int
)
AS
SET NOCOUNT ON  
IF (exists(select 1 from sisAccionesConfig Where Accion_Id = @pAccion_Id_Anterior))
BEGIN
	UPDATE sisAccionesConfig
	SET Accion_Id = @pAccion_Id,	
		Descripcion = @pDescripcion,
		Controlador = @pControlador,
		ModoTransaccion = @pModoTransaccion
	WHERE Accion_Id = @pAccion_Id_Anterior
END
ELSE
BEGIN
	INSERT INTO sisAccionesConfig(Accion_Id, Descripcion, Controlador, ModoTransaccion)
	VALUES (@pAccion_Id, @pDescripcion, @pControlador, @pModoTransaccion)
END
RETURN @@Error 
GO

Drop Procedure sisAcciones_Datos
GO

CREATE procedure sisAcciones_Datos
As
Select Accion_Id, Descripcion, Controlador, ModoTransaccion 
From sisAccionesConfig
GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\splogColumnasTablas.sql*/

DROP PROCEDURE logColumnasTablas
GO
CREATE PROCEDURE logColumnasTablas
(
@pNAME VarChar(100) 
)
AS
SET NOCOUNT ON 

select syscolumns.name, systypes.name Tipo,  
                 syscolumns.length long, syscolumns.colid, syscolumns.id,  systypes.xusertype,  
                 systypes.length longEst, sysindexkeys.keyno, syscolumns.isnullable  ,
				 systypes.xprec, systypes.xscale, systypes.type
                 from sysobjects inner join syscolumns on sysobjects.id = syscolumns.id  
                 inner join systypes on systypes.xusertype = syscolumns.xusertype  
                 left join sysindexkeys on sysobjects.id  = sysindexkeys.id and  
                 syscolumns.colid  = sysindexkeys.colid and sysindexkeys.indid = 1  
                 where sysobjects.name  =   @pNAME   Order by 4
 
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkArtiUM.sql*/
DROP PROCEDURE stkArtiUMGuardar
GO
CREATE PROCEDURE stkArtiUMGuardar
(
@pProducto_Id VarChar(25),
@pMedida_Id VarChar(5),
@pFactor numeric(15,8),
@pCodigoBarra VarChar(25)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkArtiUM 
	WHERE Producto_Id = dbo.FuncFKStkProductos(@pProducto_Id) AND 
		Medida_Id = dbo.FuncFKstkUniMed(@pMedida_Id)))
		
BEGIN 
	UPDATE stkArtiUM
	SET		Factor = @pFactor, CodigoBarra = @pCodigoBarra
	WHERE 
		Producto_Id = dbo.FuncFKStkProductos(@pProducto_Id) AND 
		Medida_Id = dbo.FuncFKstkUniMed(@pMedida_Id)
END 
ELSE 
BEGIN 
	INSERT INTO stkArtiUM
	(
		Producto_Id,
		Medida_Id,
		Factor, 
		CodigoBarra
	)
	VALUES 
	(
		dbo.FuncFKStkProductos(@pProducto_Id),
		dbo.FuncFKstkUniMed(@pMedida_Id),
		@pFactor, 
		@pCodigoBarra
	)
END 

GO

DROP PROCEDURE stkArtiUMDatos
GO
CREATE PROCEDURE stkArtiUMDatos
(
@pProducto_Id VarChar(25),
@pMedida_Id VarChar(5)
)
AS
SET NOCOUNT ON 

SELECT stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos, stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed,
	stkArtiUM.Factor, stkArtiUM.CodigoBarra
FROM stkArtiUM 
INNER JOIN stkProductos  ON (stkProductos.stkProductos = stkArtiUM.Producto_Id)
INNER JOIN stkUniMed  ON (stkUniMed.stkUniMed = stkArtiUM.Medida_Id)
WHERE (stkProductos.Producto_Id = @pProducto_Id)
AND (stkUniMed.Medida_Id = @pMedida_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE stkArtiUMEliminar
GO
CREATE PROCEDURE stkArtiUMEliminar
(
@pProducto_id varchar(25),
@pMedida_id varchar(5)= null
)
AS
SET NOCOUNT ON 

DELETE FROM stkArtiUM 
WHERE (Producto_Id = dbo.FuncFKstkProductos(@pProducto_id))
AND (@pMedida_id  IS NULL OR Medida_Id = dbo.FuncFKstkUniMed(@pMedida_id))
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkCataProductosDatos.sql*/
DROP Procedure stkCataProductosDatos
GO
Create Procedure stkCataProductosDatos
(
	@ProductoDesde VarChar(25),
	@ProductoHasta VarChar(25),
	@FamiliaDesde VarChar(15),
	@FamiliaHasta VarChar(15),
	@GrupoDesde VarChar(15),
	@GrupoHasta VarChar(15),
	@Empresa_Id Int
)
AS

select	@ProductoDesde as ProductoDesde, @ProductoHasta ProductoHasta,
	@FamiliaDesde FamiliaDesde, @FamiliaHasta FamiliaHasta,
	@GrupoDesde GrupoDesde, @GrupoHasta GrupoHasta


Select Producto_Id,	Descripcion,	Clase,	Description,	DescripcionDetallada,	Tipo_Id,	
CodigoBarra,	CtaCompra,	CtaAjuInventario,	Familia_Id,	Grupo_Id,	Medida_Id,	Acepta_Compras AceptaCompras,	
Acepta_Ventas AceptaVentas,	Cast(case when Empresa_Id is null then 1 else 0 end as bit) PTodasEmpresas,	
Inactivo,	Posteado,	ClaseAlterna,	UsaDespachoImportacion,	
Serializable,	TrabajaPorLotes,	conVencimiento,	MedidaAlterna,	FactorAlterna,	CostoUltCompra CostoUltimaCompra,	
CostoPromPond,	CostoReposicion,	PrecioUltCompra,	MonedaUltCompra,	MargenExceso,	
TiempoEntrega,	CFComp_Id,	UMCompra,	CtaVenta,	CtaVentaExt,	CtaCredito,	CtaCreditoExt,	
CtaDescuento,	CtaDescuentoExt,	CtaCosto,	CtaCostoExt,	UmVenta,	DiasGarantia,	
Acepta_Comis_Vta,	CFVenta_Id,	CodigoFiscal,	FraccionArancelaria,	Fcha_Ult_Compra FechaUltCompra, 
MaterialPeligroso, CveMaterialPeligroso, 
PesoEnKg, ClaveSTCC
from vstkproductos 

Where 
	isnull(Familia_Id, ' ') Between @FamiliaDesde and @FamiliaHasta and 
	isnull(Grupo_Id,' ') Between @GrupoDesde and @GrupoHasta and 
	Producto_Id Between @ProductoDesde And @ProductoHasta and 
	ISNULL(Empresa_Id ,@Empresa_Id) = @Empresa_Id
order by 1

SELECT stkProductos.Producto_Id,	stkUniMed.Medida_Id,	
	stkArtiUM.Factor,	stkArtiUM.CodigoBarra CodigoBarras
FROM stkArtiUM 
INNER JOIN stkProductos ON stkArtiUM.Producto_Id = stkProductos.stkProductos
INNER JOIN stkUniMed ON stkUniMed.stkUniMed = stkArtiUM.Medida_Id
left JOIN stkFamilias ON  stkFamilias.stkFamilias = stkProductos.Familia_Id
left JOIN stkGrupos ON  stkGrupos.stkGrupos = stkProductos.Grupo_Id
Where 
	ISNULL(stkFamilias.Familia_Id,' ')  Between @FamiliaDesde and @FamiliaHasta and 
	ISNULL(stkGrupos.Grupo_Id,' ') Between @GrupoDesde and @GrupoHasta and 
	stkProductos.Producto_Id Between @ProductoDesde And @ProductoHasta and 
	ISNULL(stkProductos.Empresa_Id ,@Empresa_Id) = @Empresa_Id

order by 1,2

select COMBO.Producto_Id, stkProductos.Producto_Id Producto_Componente,	stkproductosCombo.Cantidad
from stkproductosCombo 
	INNER JOIN stkproductos COMBO ON  COMBO.stkproductos =stkproductosCombo.Combo_id
	INNER JOIN stkproductos ON  stkproductos.stkproductos =stkproductosCombo.Producto_Id
	left JOIN stkFamilias ON  stkFamilias.stkFamilias = COMBO.Familia_Id
	left JOIN stkGrupos ON  stkGrupos.stkGrupos = COMBO.Grupo_Id
WHERE
	ISNULL(stkFamilias.Familia_Id,' ')  Between @FamiliaDesde and @FamiliaHasta and 
	ISNULL(stkGrupos.Grupo_Id,' ') Between @GrupoDesde and @GrupoHasta and 
	COMBO.Producto_Id Between @ProductoDesde And @ProductoHasta and 
	ISNULL(COMBO.Empresa_Id ,@Empresa_Id) = @Empresa_Id
order by 1,2


GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkCausasMovi.sql*/
--- AJ Causa tiene 100 en Descripcion
DROP PROCEDURE stkCausasMoviGuardar
GO
CREATE PROCEDURE stkCausasMoviGuardar
(
@pCausa_Id varchar(5),
@pCausa_Id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(100),
@pCuenta_Id varchar(25) = NULL,
@pEntSalAmb char(1),
@pUsuarioAutorizado varchar(25) = NULL,
@pInactivo bit,
@pUsuario_Id int,
@pPosteado bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM stkCausasMovi WHERE (Causa_Id = @pCausa_Id)))
BEGIN 
	UPDATE stkCausasMovi
	SET		@lIdentidad = stkCausasMovi,
		Causa_Id = @pCausa_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Cuenta_Id = dbo.FuncFKconCuentas(@pCuenta_Id),
		EntSalAmb = @pEntSalAmb,
		UsuarioAutorizado = dbo.FuncFKgenUsuarios(@pUsuarioAutorizado),
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (Causa_Id = @pCausa_Id)
END 
ELSE 
BEGIN 
	INSERT INTO stkCausasMovi
	(
		Causa_Id,
		Empresa_Id,
		Descripcion,
		Cuenta_Id,
		EntSalAmb,
		UsuarioAutorizado,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pCausa_Id,
		@pEmpresa_Id,
		@pDescripcion,
		dbo.FuncFKconCuentas(@pCuenta_Id),
		@pEntSalAmb,
		dbo.FuncFKgenUsuarios(@pUsuarioAutorizado),
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE stkCausasMoviDatos
GO
CREATE PROCEDURE stkCausasMoviDatos
(
@pCausa_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT stkCausasMovi.stkCausasMovi, stkCausasMovi.Causa_Id, stkCausasMovi.Empresa_Id, Cast( Case When stkCausasMovi.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	stkCausasMovi.Descripcion, conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuentas, stkCausasMovi.EntSalAmb,
	genUsuarios.Usuario_Id UsuarioAutorizado, genUsuarios.Apellido_y_Nombres as DescripcionUsuarioAutorizado, 
	stkCausasMovi.Inactivo, genUsuarios2.Usuario_Id, 	genUsuarios2.Apellido_y_Nombres as DescripcionUsuario, 
	stkCausasMovi.Posteado
FROM stkCausasMovi 
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = stkCausasMovi.Cuenta_Id)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = stkCausasMovi.UsuarioAutorizado)
INNER JOIN genUsuarios genUsuarios2 ON (genUsuarios2.genUsuarios = stkCausasMovi.Usuario_Id)
WHERE (Causa_Id = @pCausa_Id)
 


  Declare @pidentity bigint= dbo.FuncFKstkCausasMovi(@pCausa_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'stkCausasMovi'
 RETURN @@Error 

GO

DROP PROCEDURE stkCausasMoviEliminar
GO
CREATE PROCEDURE stkCausasMoviEliminar
(
@pCausa_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkCausasMovi 
WHERE (Causa_Id = @pCausa_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKstkCausasMovi
GO

CREATE FUNCTION FuncFKstkCausasMovi
(
@pCausa_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = stkCausasMovi FROM stkCausasMovi WHERE 
	Causa_Id = @pCausa_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkCFComImp.sql*/
DROP PROCEDURE stkCFComImpInsertar
GO
CREATE PROCEDURE stkCFComImpInsertar
(
@pCFComp_Id int,
@pImpuesto_Id VarChar(5)
)
AS
BEGIN 
	INSERT INTO stkCFComImp
	(
		CFComp_Id,
		Impuesto_Id
	)
	VALUES 
	(
		@pCFComp_Id,
		dbo.FuncFKcomImpuestos(@pImpuesto_Id)
	)
END 

GO


DROP PROCEDURE stkCFComImpEliminar
GO
CREATE PROCEDURE stkCFComImpEliminar
(
@pCFComp_Id VarChar(5),
@pImpuesto_Id VarChar(5)=null
)
AS
SET NOCOUNT ON 

DELETE FROM stkCFComImp 
WHERE (CFComp_Id = dbo.FuncFKstkCondFisCompra(@pCFComp_Id))
AND ((@pImpuesto_Id is null) or (Impuesto_Id = dbo.FuncFKcomImpuestos(@pImpuesto_Id)))
 
 RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkCFVenImp.sql*/
DROP PROCEDURE stkCFVenImpInsertar
GO
CREATE PROCEDURE stkCFVenImpInsertar
(
@pCFVenta_Id int,
@pImpuesto_Id VarChar(5)
)
AS
SET NOCOUNT ON 
BEGIN 
	INSERT INTO stkCFVenImp
	(
		CFVenta_Id,
		Impuesto_Id
	)
	VALUES 
	(
		@pCFVenta_Id,
		dbo.FuncFkvenImpuestos(@pImpuesto_Id)
	)
END 

GO


DROP PROCEDURE stkCFVenImpEliminar
GO
CREATE PROCEDURE stkCFVenImpEliminar
(
@pCfVenta_Id VarChar(5),
@pImpuesto_Id VarChar(5)=NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkCFVenImp 
WHERE (CFVenta_Id = dbo.FuncFKstkCondFisVenta(@pCfVenta_id)) AND 
((@pImpuesto_Id is null) or (Impuesto_Id = dbo.FuncFkVenImpuestos(@pImpuesto_Id)))
 
 RETURN @@Error 

GO

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkCondFisCompra.sql*/
DROP PROCEDURE stkCondFisCompraGuardar
GO
CREATE PROCEDURE stkCondFisCompraGuardar
(
@pCFComp_Id varchar(5),
@pCFComp_Id_Nuevo varchar(5),
@pEmpresa_Id int=null,
@pDescripcion varchar(35),
@pInactivo Sino,
@pUsuario_Id int,
@pPosteado Sino
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM stkCondFisCompra WHERE (CFComp_Id = @pCFComp_Id)))
BEGIN 
	UPDATE stkCondFisCompra
	SET		@lIdentidad = stkCondFisCompra,
		CFComp_Id = @pCFComp_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (CFComp_Id = @pCFComp_Id)
END 
ELSE 
BEGIN 
	INSERT INTO stkCondFisCompra
	(
		CFComp_Id,
		Empresa_Id,
		Descripcion,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pCFComp_Id,
		@pEmpresa_Id,
		@pDescripcion,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE stkCondFisCompraDatos
GO
CREATE PROCEDURE stkCondFisCompraDatos
(
@pCFComp_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT stkCondFisCompra.stkCondFisCompra, stkCondFisCompra.CFComp_Id, stkCondFisCompra.Empresa_Id, 
	dbo.PTodasEmpresas(stkCondFisCompra.Empresa_Id) as PTodasEmpresas,
	stkCondFisCompra.Descripcion,
	stkCondFisCompra.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, stkCondFisCompra.Posteado
FROM stkCondFisCompra 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = stkCondFisCompra.Usuario_Id)
WHERE (CFComp_Id = @pCFComp_Id)
 
 SELECT comImpuestos.Impuesto_id, comImpuestos.Descripcion from 
	stkCFComImp inner join comImpuestos ON
	stkCFComImp.Impuesto_Id = comImpuestos.comImpuestos
	INNER JOIN stkCondFisCompra on 
	stkCondFisCompra.stkCondFisCompra = stkCFComImp.CFComp_Id
WHERE	
	stkCondFisCompra.CFComp_Id = @pCFComp_Id
ORDER BY 1


Declare @pidentity bigint= dbo.FuncFKstkCondFisCompra(@pCFComp_id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'stkCondFisCompra'
 
RETURN @@Error 

GO

DROP PROCEDURE stkCondFisCompraEliminar
GO
CREATE PROCEDURE stkCondFisCompraEliminar
(
@pCFComp_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkCondFisCompra 
WHERE (CFComp_Id = @pCFComp_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKstkCondFisCompra
GO

CREATE FUNCTION FuncFKstkCondFisCompra
(
@pCFComp_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = stkCondFisCompra FROM stkCondFisCompra WHERE 
	CFComp_Id = @pCFComp_Id
  RETURN @pIdentity
END


GO


 

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkCondFisVenta.sql*/
-- stkCondFisVentaDatos 'VF'
DROP PROCEDURE stkCondFisVentaGuardar
GO
CREATE PROCEDURE stkCondFisVentaGuardar
(
@pCFVenta_Id varchar(5),
@pCFVenta_Id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(35),
@pInactivo Sino,
@pUsuario_Id int,
@pPosteado Sino
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM stkCondFisVenta WHERE (CFVenta_Id = @pCFVenta_Id)))
BEGIN 
	UPDATE stkCondFisVenta
	SET		@lIdentidad = stkCondFisVenta,
		CFVenta_Id = @pCFVenta_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (CFVenta_Id = @pCFVenta_Id)
END 
ELSE 
BEGIN 
	INSERT INTO stkCondFisVenta
	(
		CFVenta_Id,
		Empresa_Id,
		Descripcion,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pCFVenta_Id,
		@pEmpresa_Id,
		@pDescripcion,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE stkCondFisVentaDatos
GO
CREATE PROCEDURE stkCondFisVentaDatos
(
@pCFVenta_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT stkCondFisVenta.stkCondFisVenta, stkCondFisVenta.CFVenta_Id, stkCondFisVenta.Empresa_Id, 
	dbo.PTodasEmpresas(stkCondFisVenta.Empresa_Id) as PTodasEmpresas,
	stkCondFisVenta.Descripcion,
	stkCondFisVenta.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, stkCondFisVenta.Posteado
FROM stkCondFisVenta 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = stkCondFisVenta.Usuario_Id)
WHERE (CFVenta_Id = @pCFVenta_Id)

SELECT venImpuestos.Impuesto_Id, venImpuestos.Descripcion, venImpuestos.CodigoFiscal, venImpuestos.UsaFormula,
venImpuestos.FormulaCalc, venImpuestos.Porcentaje, venImpuestos.Fecha_Desde, venImpuestos.Fecha_Hasta,
venImpuestos.Depende_De, venImpuestos.PorVencimiento, venImpuestos.CtaReversion, venImpuestos.Cuenta_Id,
venImpuestos.CtaDifCambio, venImpuestos.Inactivo, impTipoImpuesto.CodigoFiscal CodigoFiscalTipo, impTipoImpuesto.Juris_Id,
impTipoImpuesto.Dominio_Id, impTipoImpuesto.Referencia01, impTipoImpuesto.Referencia02, impTipoImpuesto.Referencia03,
impTipoImpuesto.Referencia04, impTipoImpuesto.Referencia05, impTipoImpuesto.Referencia06, impTipoImpuesto.Referencia07,
impTipoImpuesto.Referencia08, impTipoImpuesto.Referencia09, impTipoImpuesto.Referencia10
FROM stkCFVenImp 
INNER JOIN stkCondFisVenta  ON (stkCondFisVenta.stkCondFisVenta = stkCFVenImp.CFVenta_Id)
INNER JOIN venImpuestos  ON (venImpuestos.venImpuestos = stkCFVenImp.Impuesto_Id)
Inner Join impTipoImpuesto On impTipoImpuesto.TipoImpuesto = venImpuestos.TipoImpuesto
WHERE (stkCondFisVenta.CFVenta_Id = @pCFVenta_Id)
order by 1
 
 
 Declare @pidentity bigint= dbo.FuncFKstkCondFisVenta(@pCFVenta_id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'stkCondFisVenta'
 
 RETURN @@Error 

GO

DROP PROCEDURE stkCondFisVentaEliminar
GO
CREATE PROCEDURE stkCondFisVentaEliminar
(
@pCFVenta_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkCondFisVenta 
WHERE (CFVenta_Id = @pCFVenta_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKstkCondFisVenta
GO

CREATE FUNCTION FuncFKstkCondFisVenta
(
@pCFVenta_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = stkCondFisVenta FROM stkCondFisVenta WHERE 
	CFVenta_Id = @pCFVenta_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkConsKardex.sql*/
-- exec stkConsKardex '06607',' ','ZZZZZ','20200101' , '20200630',1,1
DROP Procedure stkConsKardex
GO
Create Procedure stkConsKardex(
	@Producto_Id VarChar(25),
	@DepositoDesde VarChar(5),
	@DepositoHasta VarChar(5),
	@FechaDesde DateTime, 
	@FechaHasta DateTime, 
	@IncluCanc Bit,
	@Empresa_Id Int)
as

select stkProductos.Producto_Id, stkProductos.Descripcion, 
		@DepositoDesde  DepositoDesde, @DepositoHasta  DepositoHasta, 
		@FechaDesde as FechaDesde, @FechaHasta as FechaHasta, 
		@IncluCanc as IncluCanc
from stkProductos 
Where
	stkProductos.Producto_Id = @Producto_Id




SELECT conAsientos.Fecha, conAsientos.FechaRegistro, conAsientos.conAsientos,
	stkInvenSegmentos.stkInventarios, 
	case when stkInvenSegmentos.stkInventarios IS NOT NULL THEN
		'frmstkInventario'
		
		when stkMoviCabe.SubTipoMov_Id = 'CDE' 
			THEN 'frmstkEntradasCD' 
			
		when stkMoviCabe.SubTipoMov_Id = 'ECO' or stkMoviCabe.SubTipoMov_Id = 'SCO'
			THEN 'Interface' 
		ELSE
		disFormularios.Formulario_Id end Formulario_Id,
	CASE WHEN venMovimientos.venMovimientos IS NOT NULL THEN 
			dbo.Segmento(Factura.Segmento_Id, Factura.Segmento1C, Factura.Segmento2C, 
		Factura.Segmento3C, Factura.Segmento4C,  Factura.Segmento1N, Factura.Segmento2N, Factura.Segmento3N, Factura.Segmento4N) 
		when stkInvenSegmentos.stkInventarios IS NOT NULL THEN
			dbo.Segmento(stkInvenSegmentos.Segmento_Id, stkInvenSegmentos.Segmento1C, stkInvenSegmentos.Segmento2C, 
		stkInvenSegmentos.Segmento3C, stkInvenSegmentos.Segmento4C, 
		stkInvenSegmentos.Segmento1N, stkInvenSegmentos.Segmento2N, 
		stkInvenSegmentos.Segmento3N, stkInvenSegmentos.Segmento4N) 
		ELSE		
		dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, 
		genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, 
		genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
		genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) END AS Comprobante, 
		ISNULL(ISNULL(Isnull(Isnull(isnull(venClientes.Cliente_Id, comProveedores.Proveed_Id),stkDepositosO.Deposito_Id), stkDepositosS.Deposito_Id),venClientesR.Cliente_Id), ' ') as Codigo , 
		ISNULL(ISNULL(Isnull(Isnull(Isnull(venClientes.RazonSocial, comProveedores.RazonSocial),stkDepositosO.Descripcion), stkDepositosS.Descripcion),venClientesR.RazonSocial), ' ') as Descripcion, 
		CASE WHEN venMovimientos.venMovimientos IS NOT NULL THEN 
			dbo.Segmento(Factura.Segmento_Id, Factura.Segmento1C, Factura.Segmento2C, 
			Factura.Segmento3C, Factura.Segmento4C,  Factura.Segmento1N, Factura.Segmento2N, Factura.Segmento3N, Factura.Segmento4N) 
		when comOCSegmentos.comOrdenComp IS NOT NULL THEN 
				dbo.Segmento(comOCSegmentos.Segmento_Id, comOCSegmentos.Segmento1C, comOCSegmentos.Segmento2C, 
				comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C,  comOCSegmentos.Segmento1N, comOCSegmentos.Segmento2N, 
				comOCSegmentos.Segmento3N, comOCSegmentos.Segmento4N) 
				ELSE ' ' END AS Comprobante2,
		case  
		when stkMoviCabe.SubTipoMov_Id = 'ECO' or stkMoviCabe.SubTipoMov_Id = 'SCO'
			THEN stkSubTipoMov.Descripcion
		ELSE
		disFormularios.Descripcion END as Formulario, 
		CASE WHEN stkMoviCabe.Signo = 1 THEN isnull(venMovStkHist.Cantidad, stkMoviCuerpo.Cantidad) else 0 end as Entradas, 
		CASE WHEN stkMoviCabe.Signo = -1 THEN isnull(venMovStkHist.Cantidad, stkMoviCuerpo.Cantidad) else 0 end as Salidas, 
		stkMoviCuerpo.CostoUnitario , 
		CONVERT(numeric(18,2) , stkMoviCuerpo.Cantidad *stkMoviCuerpo.CostoUnitario *stkMoviCabe.Signo) as Total,
		CONVERT(numeric(18,4) , isnull( conasientosf.Cambio * venMovConStockCr.PrecioVenta,0)) as PrecioVenta,
		stkMoviCuerpo.CostoUnitario*0 as SaldoCant,
		stkMoviCuerpo.CostoUnitario*0 as AcumEntradas,
		stkMoviCuerpo.CostoUnitario*0 as AcumSalidas,
		stkMoviCuerpo.CostoUnitario*0 as Saldo,
		case when conAsientos.Anulado=1 then 'Rojo' else '' end as Color, 
		stkDepositos.Deposito_Id
From conAsientos inner join stkMoviCabe ON 
conAsientos.conAsientos =stkMoviCabe.stkMoviCabe
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = conAsientos.conAsientos 
INNER JOIN disFormularios ON  disFormularios.disFormularios = conAsientos.Formulario_Id
INNER JOIN stkSubTipoMov ON  stkSubTipoMov.SubTipoMov_Id = stkMoviCabe.SubTipoMov_Id
INNER JOIN stkMoviCuerpo ON  stkMoviCuerpo.stkMoviCabe = stkMoviCabe.stkMoviCabe
INNER JOIN stkProductos ON  stkProductos.stkProductos = stkMoviCuerpo.Producto_Id 
INNER JOIN stkDepositos ON  stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id
left join (venMovStkHist inner join venMovimientos ON 
		venMovStkHist.venMovimientos = venMovimientos.venMovimientos 
		inner join venClientes ON venClientes.genEntidades = venMovimientos.Cliente_Id
		INNER JOIN genAsiSegmentos AS Factura ON Factura.Asiento_Id = venMovimientos.venMovimientos
		inner join venMovConStockCr ON venMovConStockCr.venMovimientos = venMovStkHist.venMovimientos and
			venMovConStockCr.RenglonCuerpo = venMovStkHist.RenglonCuerpo and 
			venMovStkHist.FacturaRemito != 'F' 
		INNER JOIN conAsientos as conasientosf on conasientosf.conAsientos = venMovimientos.venMovimientos AND
		conasientosf.Anulado = 0 and conasientosf.Posteado =1)
	ON venMovStkHist.stkMoviCabe = stkMoviCuerpo.stkMoviCabe and 
	   venMovStkHist.Renglon = stkMoviCuerpo.Renglon
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id 
left join (stkMoviProv 	inner join comProveedores ON comProveedores.genEntidades = stkmoviprov.Proveed_Id
	) ON stkMoviProv.stkMoviCabe = stkMoviCabe.stkMoviCabe 
left join (stkMoviOC inner join comOCSegmentos ON  stkMoviOC.comOrdenComp = comOCSegmentos.comOrdenComp) ON
	stkMoviOC.stkMoviCabe = stkMoviCuerpo.stkMoviCabe AND
	stkMoviOC.Renglon = stkMoviCuerpo.Renglon
Left join (stkEnTransito INNER JOIN stkDepositos stkDepositosO ON 
	stkEnTransito.Deposito_Id = stkDepositosO.stkDepositos ) ON 
	stkEnTransito.stkMoviCabe = stkMoviCabe.stkMoviCabe 
Left join (stkEnTransito stkEnTransitoS INNER JOIN stkDepositos stkDepositosS ON 
	stkEnTransitoS.Deposito_Id = stkDepositosS.stkDepositos ) ON 
	stkEnTransito.stkMoviCabeEntr = stkMoviCabe.stkMoviCabe 
left join (stkRemitos  INNER JOIN venClientes venClientesR ON stkRemitos.Cliente_Id = venClientesR.genEntidades) ON 
	stkRemitos.stkMoviCabe = stkMoviCabe.stkMoviCabe
Left join (stkInvMoviStk INNER JOIN stkInvenSegmentos ON stkInvMoviStk.stkInventarios = stkInvenSegmentos.stkInventarios) on
		stkInvMoviStk.stkMoviCabe = stkMoviCabe.stkMoviCabe
WHERE
	(@IncluCanc=1 or conAsientos.Anulado = 0) and 
	conAsientos.Empresa_Id = @Empresa_Id and
	conAsientos.Posteado = 1 and
	stkProductos.Producto_Id = @Producto_Id and 
	conAsientos.Fecha between @FechaDesde and @FechaHasta and
	stkDepositos.Deposito_Id Between @DepositoDesde and @DepositoHasta
UNION ALL
SELECT Dateadd(dd,-1, @FechaDesde) as Fecha, Dateadd(dd,-1, @FechaDesde) as Fecha, 0 as conAsientos,
	0 as stkInventarios, ' ' Formulario_Id, 'Saldo Inicial'  as Comprobante,
	' ' as Deposito_Id,  ' ' as Codigo,' ' as Comprobante2, ' ' Formulario, 
	SUM(stkMoviCuerpo.Cantidad* stkMoviCabe.Signo) as Entradas, 0 as Salidas, 
	Case when SUM(stkMoviCuerpo.Cantidad* stkMoviCabe.Signo) != 0 then
	SUM(stkMoviCuerpo.Cantidad* stkMoviCabe.Signo* stkMoviCuerpo.CostoUnitario)/
		SUM(stkMoviCuerpo.Cantidad* stkMoviCabe.Signo) end 	as Costo, 
	SUM(stkMoviCuerpo.Cantidad* stkMoviCabe.Signo * stkMoviCuerpo.CostoUnitario) as Total, 
	0 as PrecioVenta,
	0 as SaldoCant,
	0 as AcumEntradas,
	0 as AcumSalidas,
	0 as Saldo,
	'' as Color, ''
From stkMoviCabe 
	INNER JOIN conAsientos ON stkMoviCabe.stkMoviCabe= conAsientos.conAsientos
	INNER JOIN stkMoviCuerpo ON stkMoviCabe.stkMoviCabe= stkMoviCuerpo.stkMoviCabe
	INNER JOIN stkProductos ON  stkProductos.stkProductos =stkMoviCuerpo.Producto_Id
	INNER JOIN stkDepositos ON stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id
Where
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and
	conAsientos.Empresa_Id = @Empresa_Id and
	stkProductos.Producto_Id = @Producto_Id and 
	conAsientos.Fecha <= @FechaDesde and
	stkDepositos.Deposito_Id Between @DepositoDesde and @DepositoHasta
	HAVING SUM(stkMoviCuerpo.Cantidad* stkMoviCabe.Signo) <> 0
order by 1,2,3




Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkConsStockDatos.sql*/


-- Exec stkConsStockDatos '177D', '00001',1
drop procedure stkConsStockDetalle
go
create procedure stkConsStockDetalle
AS
 select '' as Entidad_Id, '' as Descripcion,
		 0.00 as Cantidad,
         '' as SegmentoSTR
		 select '' as TipoConsulta, '' as Producto_Id, '' as Deposito_Id, getdate() as Fecha

go


DROP PROCEDURE stkConsStockDatos
GO
CREATE PROCEDURE stkConsStockDatos(
	@Producto_id VarChar(25),
	@Deposito_Id VarChar(5),
	@Empresa Int
)
AS
Declare @Fecha DateTime 
SET @Fecha =dbo.FechaSinHora(dbo.FechaActual())
select @Producto_id as Producto_Id, @Deposito_Id as Deposito_Id

SELECT Fecha, Producto_Id, Descripcion, SUM(Existencia) as Existencia, 
	SUM(Compras) as Compras, SUM(Embarques) as Embarques,	
		SUM(Pedidos) as Pedidos, SUM(Transito) as TransitoLocal,
		SUM(Existencia+Compras+Embarques-Pedidos+Transito) as Final, @Deposito_Id as Deposito_Id
FROM (

SELECT  @Fecha as Fecha, stkProductos.Producto_Id, stkProductos.Descripcion,	
	ISNULL(stkExistencia.Cantidad,0.00) as Existencia, 
		ISNULL((SELECT SUM(comOcCuerpo.Cantidad-case when stkDepositos.consCompra_Venta = 1 then 
		comOcCuerpo.CantidadConsignada else comOcCuerpo.Cantidad_Recibida end )
		from comOrdenComp inner join comOcCuerpo ON
		comOrdenComp.comOrdenComp = comOcCuerpo.comOrdenComp 
		INNER JOIN comOCArticulo ON
		comOcCuerpo.comOrdenComp = comOCArticulo.comOrdenComp and  
		comOcCuerpo.Renglon_OC = comOCArticulo.Renglon_OC 
		INNER JOIN comOCSegmentos ON
		comOrdenComp.comOrdenComp = comOCSegmentos.comOrdenComp 
		INNER JOIN stkDepositos ON 
		stkDepositos.stkDepositos = comOCArticulo.Deposito_Id
		Where
			stkDepositos.Deposito_Id = @Deposito_Id and 
			comOcCuerpo.Pendiente = 1 AND 
			comOcCuerpo.Cantidad > case when stkDepositos.consCompra_Venta = 1 then 
		comOcCuerpo.CantidadConsignada else comOcCuerpo.Cantidad_Recibida end  and 
			NOT EXISTS(SELECT 1 FROM comEmbcuerpo WHERE
				comEmbcuerpo.comOrdenComp = comOcCuerpo.comOrdenComp and 
				comEmbcuerpo.Renglon_OC = comOcCuerpo.Renglon_OC) AND
			comOrdenComp.Estado_Id in ( 'A','P','E' ) AND 
			comOCArticulo.Producto_Id = stkProductos.stkProductos AND 
			comOCSegmentos.Empresa_Id = @Empresa AND 
			comOcCuerpo.Fecha_Entrega <= @Fecha),0) as Compras, 

	ISNULL((SELECT SUM(comEmbCuerpo.Cantidad -comEmbCuerpo.CantidadRecibida)
		from comEmbarques inner join comEmbCuerpo ON
		comEmbCuerpo.comEmbarques = comEmbarques.comEmbarques
		INNER JOIN comOCArticulo ON
		comEmbCuerpo.comOrdenComp = comOCArticulo.comOrdenComp and  
		comEmbCuerpo.Renglon_OC = comOCArticulo.Renglon_OC 
		INNER JOIN conAsientos ON
		conAsientos.conAsientos = comEmbarques.comEmbarques
		INNER JOIN stkDepositos ON 
		stkDepositos.stkDepositos = comOCArticulo.Deposito_Id
		Where
			stkDepositos.Deposito_Id = @Deposito_Id and 
			conAsientos.Anulado = 0 and 
			comEmbarques.Estado_Id = 'P' AND 
			comEmbCuerpo.Cantidad > comEmbCuerpo.CantidadRecibida and 
			comOCArticulo.Producto_Id = stkProductos.stkProductos AND 
			conAsientos.Empresa_Id = @Empresa AND 
			comEmbarques.FechaArribo <= @Fecha),0) as Embarques, 

	ISNULL((SELECT SUM(venPediCuerpo.CantidadPedida - venPediCuerpo.CantidadRemitida)
		FROM venPedidos INNER JOIN venPediCuerpo on 
			venPedidos.venPedidos =venPediCuerpo.venPedidos
			INNER JOIN stkDepositos ON 
			stkDepositos.stkDepositos = venPediCuerpo.Deposito_Id
			WHERE
			stkDepositos.Deposito_Id = @Deposito_Id and 
			venPedidos.Estado  IN('P','A') AND 
			venPediCuerpo.Pendiente = 1 AND
			venPediCuerpo.CantidadPedida > venPediCuerpo.CantidadRemitida AND
			venPediCuerpo.Producto_Id = stkProductos.stkProductos AND 
			venPedidos.Empresa_Id = @Empresa AND 
			venPediCuerpo.FechaEntrega <= @Fecha),0) as Pedidos,
	ISNULL((SELECT SUM(stkmovicuerpo.Cantidad) 
		from stkEntransito inner join stkMoviCuerpo ON 
		stkEntransito.stkMoviCabe = stkMoviCuerpo.stkMoviCabe 
		INNER JOIN stkDepositos ON 
		stkDepositos.stkDepositos = stkEntransito.Deposito_Id
		inner join conAsientos ON
		conAsientos.conAsientos = stkEntransito.stkMoviCabe 
		WHERE
			conAsientos.Anulado = 0 and 
			conAsientos.Posteado = 1 and 
			conAsientos.Empresa_Id = @Empresa and 
			stkEntransito.stkMoviCabeEntr is null  AND
			stkDepositos.Deposito_Id = @Deposito_Id and 
			stkMoviCuerpo.Producto_Id = stkProductos.stkProductos),0) AS Transito
	FROM stkProductos
	LEFT JOIN (stkExistencia INNER JOIN stkDepositos ON 
		stkExistencia.Deposito_Id = stkDepositos.stkDepositos and
		stkDepositos.Deposito_Id = @Deposito_Id and 
		stkExistencia.Empresa_Id = @Empresa) ON
		stkExistencia.Producto_Id = stkProductos.stkProductos 

where 
	stkProductos.Producto_Id =@Producto_id 
UNION ALL -- COMPRAS

SELECT  comOcCuerpo.Fecha_Entrega Fecha, stkProductos.Producto_Id, stkProductos.Descripcion,	
	0 as Existencia, SUM(comOcCuerpo.Cantidad-case when stkDepositos.consCompra_Venta = 1 then 
		comOcCuerpo.CantidadConsignada else comOcCuerpo.Cantidad_Recibida end ) AS Compras, 
		0 as Embarques, 0 as Pedidos, 0 as Transito
		from 	comOrdenComp inner join comOcCuerpo ON
		comOrdenComp.comOrdenComp = comOcCuerpo.comOrdenComp 
		INNER JOIN comOCArticulo ON
		comOcCuerpo.comOrdenComp = comOCArticulo.comOrdenComp and  
		comOcCuerpo.Renglon_OC = comOCArticulo.Renglon_OC 
		INNER JOIN comOCSegmentos ON
		comOrdenComp.comOrdenComp = comOCSegmentos.comOrdenComp 
		INNER JOIN stkProductos ON
		comOCArticulo.Producto_Id = stkProductos.stkProductos 
		INNER JOIN stkDepositos ON 
		stkDepositos.stkDepositos = comOCArticulo.Deposito_Id
		Where
			stkDepositos.Deposito_Id = @Deposito_Id and 
			stkProductos.Producto_Id =@Producto_id  AND 
			comOcCuerpo.Pendiente = 1 AND 
			comOcCuerpo.Cantidad > case when stkDepositos.consCompra_Venta = 1 then 
		comOcCuerpo.CantidadConsignada else comOcCuerpo.Cantidad_Recibida end  and 
			NOT EXISTS(SELECT 1 FROM comEmbcuerpo WHERE
				comEmbcuerpo.comOrdenComp = comOcCuerpo.comOrdenComp and 
				comEmbcuerpo.Renglon_OC = comOcCuerpo.Renglon_OC) AND
			comOrdenComp.Estado_Id in ( 'A','P' ) AND 
			comOCSegmentos.Empresa_Id = @Empresa AND 
			comOcCuerpo.Fecha_Entrega > @Fecha
GROUP BY comOcCuerpo.Fecha_Entrega , stkProductos.Producto_Id, stkProductos.Descripcion
UNION ALL -- EMBARQUES

SELECT  comEmbarques.FechaArribo Fecha, stkProductos.Producto_Id, stkProductos.Descripcion,	
	0 as Existencia, 0 as Compras , SUM(comEmbCuerpo.Cantidad-comEmbCuerpo.CantidadRecibida) as Embarques, 
		0 as Pedidos, 0 as Transito
			from comEmbarques inner join comEmbCuerpo ON
		comEmbCuerpo.comEmbarques = comEmbarques.comEmbarques
		INNER JOIN comOCArticulo ON
		comEmbCuerpo.comOrdenComp = comOCArticulo.comOrdenComp and  
		comEmbCuerpo.Renglon_OC = comOCArticulo.Renglon_OC 
		INNER JOIN conAsientos ON
		conAsientos.conAsientos = comEmbarques.comEmbarques
		INNER JOIN stkProductos ON 
		comOCArticulo.Producto_Id = stkProductos.stkProductos 
		INNER JOIN stkDepositos ON 
		stkDepositos.stkDepositos = comOCArticulo.Deposito_Id
		Where
			stkDepositos.Deposito_Id = @Deposito_Id and 
			stkProductos.Producto_Id =@Producto_id AND 
			conAsientos.Anulado = 0 and 
			comEmbarques.Estado_Id = 'P' AND 
			comEmbCuerpo.Cantidad > comEmbCuerpo.CantidadRecibida and 
			conAsientos.Empresa_Id = @Empresa AND 
			comEmbarques.FechaArribo > @Fecha
GROUP BY comEmbarques.FechaArribo , stkProductos.Producto_Id, stkProductos.Descripcion
UNION ALL -- PEDIDOS
SELECT  venPediCuerpo.FechaEntrega Fecha, stkProductos.Producto_Id, stkProductos.Descripcion,	
	0 as Existencia, 0 as Compras , 0 as Embarques, 
		 SUM(venPediCuerpo.CantidadPedida - venPediCuerpo.CantidadRemitida) as Pedidos, 0 as Transito
			FROM venPedidos INNER JOIN venPediCuerpo on 
			venPedidos.venPedidos =venPediCuerpo.venPedidos 
			INNER JOIN stkProductos ON 
			stkProductos.stkProductos =venPediCuerpo.Producto_Id
			INNER JOIN stkDepositos ON 
			stkDepositos.stkDepositos = venPediCuerpo.Deposito_Id
			WHERE
			stkDepositos.Deposito_Id = @Deposito_Id and 
			venPedidos.Estado  IN('P','A') AND 
			venPediCuerpo.Pendiente = 1 AND
			venPediCuerpo.CantidadPedida > venPediCuerpo.CantidadRemitida AND
			venPediCuerpo.Producto_Id = stkProductos.stkProductos AND 
			stkProductos.Producto_Id = @Producto_id AND 
			venPedidos.Empresa_Id = @Empresa AND 
			venPediCuerpo.FechaEntrega > @Fecha
GROUP BY venPediCuerpo.FechaEntrega, stkProductos.Producto_Id, stkProductos.Descripcion) AS XXX
GROUP BY Fecha, Producto_Id, Descripcion
ORDER BY 1

GO






drop PROCEDURE stkConsStockEnTransito
go
create PROCEDURE stkConsStockEnTransito
(
    @Producto_id varchar(25),
    @Deposito_Id varchar(5),
    @Empresa int
)
as
--transito
SELECT stkMoviCuerpo.Cantidad, Origen.Deposito_Id as Entidad_Id, Origen.Descripcion as Descripcion,
		dbo.Segmento(genAsiSegmentos.Segmento_Id,genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
         genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoSTR
		from stkEntransito inner join stkMoviCuerpo ON 
		stkEntransito.stkMoviCabe = stkMoviCuerpo.stkMoviCabe 
		INNER JOIN stkDepositos ON 
		stkDepositos.stkDepositos = stkEntransito.Deposito_Id
		inner join conAsientos ON
		conAsientos.conAsientos = stkEntransito.stkMoviCabe 
        inner join genAsiSegmentos on genAsiSegmentos.Asiento_Id=stkMoviCuerpo.stkMoviCabe
        inner join stkProductos on stkProductos.stkProductos=stkMoviCuerpo.Producto_Id
		inner join stkDepositos as Origen ON  Origen.stkDepositos = stkMoviCuerpo.Deposito_Id
		WHERE
			conAsientos.Anulado = 0 and 
			conAsientos.Posteado = 1 and 
			stkEntransito.stkMoviCabeEntr is null  AND
			conAsientos.Empresa_Id = @Empresa and 
			stkDepositos.Deposito_Id = @Deposito_Id and 
			stkProductos.Producto_Id = @Producto_id
go
    
    
    -- COMPRAS
drop PROCEDURE stkConsStockCompras
go
create PROCEDURE stkConsStockCompras
(
    @Producto_id varchar(25),
    @Deposito_Id varchar(5),
    @Fecha datetime,
    @Empresa int
)
as
-- COMPRAS

SELECT  
	 comOcCuerpo.Cantidad-comOcCuerpo.Cantidad_Recibida AS Cantidad, 
		comProveedores.Proveed_Id as Entidad_Id, comProveedores.RazonSocial as Descripcion,
		dbo.Segmento(comOCSegmentos.Segmento_Id,comOCSegmentos.Segmento1C, comOCSegmentos.Segmento2C, comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C,
         comOCSegmentos.Segmento1N, comOCSegmentos.Segmento2N, comOCSegmentos.Segmento3N, comOCSegmentos.Segmento4N) as SegmentoSTR
		from 	comOrdenComp inner join comOcCuerpo ON
		comOrdenComp.comOrdenComp = comOcCuerpo.comOrdenComp 
		INNER JOIN comOCArticulo ON
		comOcCuerpo.comOrdenComp = comOCArticulo.comOrdenComp and  
		comOcCuerpo.Renglon_OC = comOCArticulo.Renglon_OC 
		INNER JOIN comOCSegmentos ON
		comOrdenComp.comOrdenComp = comOCSegmentos.comOrdenComp 
		INNER JOIN stkProductos ON
		comOCArticulo.Producto_Id = stkProductos.stkProductos 
		INNER JOIN stkDepositos ON 
		stkDepositos.stkDepositos = comOCArticulo.Deposito_Id
        inner join comProveedores on comProveedores.genEntidades=comOrdenComp.Proveed_Id
		Where
			stkDepositos.Deposito_Id = @Deposito_Id and 
			stkProductos.Producto_Id =@Producto_id  AND 
			comOcCuerpo.Pendiente = 1 AND 
			comOcCuerpo.Cantidad > comOcCuerpo.Cantidad_Recibida and 
			NOT EXISTS(SELECT 1 FROM comEmbcuerpo WHERE
				comEmbcuerpo.comOrdenComp = comOcCuerpo.comOrdenComp and 
				comEmbcuerpo.Renglon_OC = comOcCuerpo.Renglon_OC) AND
			comOrdenComp.Estado_Id in ( 'A','P' ) AND 
			comOCSegmentos.Empresa_Id = @Empresa AND 
			(comOcCuerpo.Fecha_Entrega = @Fecha or (@Fecha< dbo.FechaActual() and comOCCuerpo.Fecha_Entrega<=@Fecha))
go


-- EMBARQUES
drop PROCEDURE stkConsStockEmbarques
go
create PROCEDURE stkConsStockEmbarques
(
    @Producto_id varchar(25),
    @Deposito_Id varchar(5),
    @Fecha datetime,
    @Empresa int
)
as
SELECT 	
	 comEmbCuerpo.Cantidad-comEmbCuerpo.CantidadRecibida as Cantidad,
     comProveedores.Proveed_Id as Entidad_Id, comProveedores.RazonSocial as Descripcion,
		dbo.Segmento(genAsiSegmentos.Segmento_Id,genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
         genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoSTR
			from comEmbarques inner join comEmbCuerpo ON
		comEmbCuerpo.comEmbarques = comEmbarques.comEmbarques
		INNER JOIN comOCArticulo ON
		comEmbCuerpo.comOrdenComp = comOCArticulo.comOrdenComp and  
		comEmbCuerpo.Renglon_OC = comOCArticulo.Renglon_OC 
		INNER JOIN conAsientos ON
		conAsientos.conAsientos = comEmbarques.comEmbarques
		INNER JOIN stkProductos ON 
		comOCArticulo.Producto_Id = stkProductos.stkProductos 
		INNER JOIN stkDepositos ON 
		stkDepositos.stkDepositos = comOCArticulo.Deposito_Id
        inner join comOrdenComp on comEmbCuerpo.comOrdenComp=comOrdenComp.comOrdenComp
        inner join comProveedores on comOrdenComp.Proveed_Id=comProveedores.genEntidades
        inner join genAsiSegmentos on genAsiSegmentos.Asiento_Id=comEmbarques.comEmbarques
		Where
			stkDepositos.Deposito_Id = @Deposito_Id and 
			stkProductos.Producto_Id =@Producto_id AND 
			conAsientos.Anulado = 0 and 
			comEmbarques.Estado_Id = 'P' AND 
			comEmbCuerpo.Cantidad > comEmbCuerpo.CantidadRecibida and 
			conAsientos.Empresa_Id = @Empresa AND 
			(comEmbarques.FechaArribo = @Fecha or (@Fecha< dbo.FechaActual() and comEmbarques.FechaArribo<=@Fecha))

go


-- PEDIDOS
drop PROCEDURE stkConsStockPedidos
go
create PROCEDURE stkConsStockPedidos
(
    @Producto_id varchar(25),
    @Deposito_Id varchar(5),
    @Fecha datetime,
	@Vendedor_id VarChar(5) = NULL,
    @Empresa int
)
as
SELECT  venClientes.Cliente_Id as Entidad_Id, venClientes.RazonSocial as Descripcion,
		 venPediCuerpo.CantidadPedida - venPediCuerpo.CantidadRemitida as Cantidad,
         dbo.Segmento(venPediSegmentos.Segmento_Id,venPediSegmentos.Segmento1C, venPediSegmentos.Segmento2C, venPediSegmentos.Segmento3C, venPediSegmentos.Segmento4C,
         venPediSegmentos.Segmento1N, venPediSegmentos.Segmento2N, venPediSegmentos.Segmento3N, venPediSegmentos.Segmento4N) as SegmentoSTR
			FROM venPedidos INNER JOIN venPediCuerpo on 
			venPedidos.venPedidos =venPediCuerpo.venPedidos 
			INNER JOIN stkProductos ON 
			stkProductos.stkProductos =venPediCuerpo.Producto_Id
			INNER JOIN stkDepositos ON 
			stkDepositos.stkDepositos = venPediCuerpo.Deposito_Id
			inner join venClientes on venClientes.genEntidades=venPedidos.Cliente_Id
            inner join venPediSegmentos on venPediSegmentos.venPedidos=venPedidos.venPedidos
			INNER JOIN venVendedores ON venVendedores.venVendedores = venPedidos.Vendedor_Id
            WHERE
			stkDepositos.Deposito_Id = @Deposito_Id and 
			venPedidos.Estado  IN('P','A') AND 
			venPediCuerpo.Pendiente = 1 AND
			venPediCuerpo.CantidadPedida > venPediCuerpo.CantidadRemitida AND
			stkProductos.Producto_Id = @Producto_id AND 
			venVendedores.Vendedor_Id = ISNULL(@Vendedor_id, venVendedores.Vendedor_Id) AND 
			venPedidos.Empresa_Id = @Empresa AND 
			(venPediCuerpo.FechaEntrega = @Fecha or (@Fecha<dbo.FechaActual() and venPediCuerpo.FechaEntrega<=@Fecha))
            

go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkCostosEliminar.sql*/
DROP PROCEDURE stkCostosEliminar
GO

CREATE PROCEDURE stkCostosEliminar
(
	@pProducto_Id VarChar(25),
	@pEmpresa_Id Int
)
AS

delete from stkproductosCostos where Producto_Id = dbo.FuncfkstkProductos(@pProducto_Id) and Empresa_Id = @pEmpresa_Id
delete from stkProductosCostosSucursal where Producto_Id = dbo.FuncfkstkProductos(@pProducto_Id) and Empresa_Id = @pEmpresa_Id
delete from stkProductosCostoCierre where Producto_Id = dbo.FuncfkstkProductos(@pProducto_Id) and Empresa_Id = @pEmpresa_Id
delete from stkProductosCostoCierreSucursal where Producto_Id = dbo.FuncfkstkProductos(@pProducto_Id) and Empresa_Id = @pEmpresa_Id

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkCostoUltimaCompra.sql*/
drop procedure stkCostoUltimaCompra
go
create procedure stkCostoUltimaCompra
(
    @pProducto_Id varchar(25)
)
as
select  Producto_Id, CostoUltCompra from stkProductos
where Producto_Id=@pProducto_Id
go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkCOTAr.sql*/
DROP PROCEDURE stkCOTArGuardar
GO
CREATE PROCEDURE stkCOTArGuardar
(
@pEmpresa_Id int,
@lIdentity int,
@pUsuario_Id int = NULL,
@pCot varchar(Max)
)
AS
SET NOCOUNT ON 

DECLARE @lProvincia INT = (SELECT genSucursalesEmpr.Provincia_Id 
FROM genUsuarios
INNER JOIN genSucursalesEmpr ON genUsuarios.Sucursal = genSucursalesEmpr.genSucursalesEmpr
WHERE genUsuarios.genUsuarios = @pUsuario_Id)

DECLARE @lCotLimiteKG NUMERIC(14,2) = (SELECT nValor FROM genGlobales WHERE Nombre_Var = 'STKCOTLIMITE1' AND 
Empresa_Id = @pEmpresa_id) 

DECLARE @lCotLimitePES NUMERIC(14,2) = (SELECT nValor FROM genGlobales WHERE Nombre_Var = 'STKCOTLIMITE2' AND 
Empresa_Id = @pEmpresa_id) 

BEGIN 

INSERT INTO stkCOTAr
(
	stkHojaDeRuta,
	Provincia_Id,
	Peso,
	Importe,
	COT
)
VALUES 
(
	@lIdentity,
	@lProvincia,
	@lCotLimiteKG,
	@lCotLimitePES,
	@pCot
)
END
SELECT @lIdentity AS RetVal 
GO

DROP PROCEDURE stkCOTArDatos
GO
CREATE PROCEDURE stkCOTArDatos
(
@lIdentity int
)
AS
SET NOCOUNT ON 

SELECT stkCOTAr.stkHojaDeRuta, genProvincias.genProvincias, genProvincias.Provincia_Id,
genProvincias.Descripcion, stkCOTAr.Importe, stkCOTAr.Peso, stkCOTAr.COT
FROM stkCOTAr 
INNER JOIN genProvincias ON stkCOTAr.Provincia_Id = genProvincias.genProvincias
WHERE stkCOTAr.stkHojaDeRuta = @lIdentity
GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkCOTArLimites.sql*/
DROP PROCEDURE stkCOTArLimites
GO
CREATE PROCEDURE stkCOTArLimites
(
@pEmpresa_id int
)
AS
SELECT (SELECT nValor FROM genGlobales WHERE Nombre_Var = 'STKCOTLIMITE1' AND 
Empresa_Id = @pEmpresa_id) CotLimiteKG, 
(SELECT nValor FROM genGlobales WHERE Nombre_Var = 'STKCOTLIMITE2' AND 
Empresa_Id = @pEmpresa_id) CotLimitePES,
(SELECT cValor FROM genGlobales WHERE Nombre_Var = 'STKCODKILOGRAMOS' AND 
Empresa_Id = @pEmpresa_id) CodKilos, 
(SELECT nValor FROM genGlobales WHERE Nombre_Var = 'STKCOTATRI' AND
Empresa_Id = @pEmpresa_id) Atributo
GO





Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkDepositos.sql*/
-- AJ SE  AGREGO UsaUbicacion EN V2
-- stkDepositosDatos 'a'
DROP PROCEDURE stkDepositosGuardar
GO
CREATE PROCEDURE stkDepositosGuardar
(
@pDeposito_id varchar(15),
@pDeposito_id_Nuevo varchar(15),
@pEmpresa_Id int = NULL,
@pSucursal Sucursal = NULL,
@pDescripcion varchar(35),
@pDireccion varchar(35),
@pGrupoUsuarios varchar(25) = NULL,
@pCentro1_Id varchar(8) = NULL,
@pCentro2_Id varchar(8) = NULL,
@pAdmiteVentas Sino,
@pConsignacion Sino,
@pCuentaDeudCons varchar(25) = NULL,
@pCuentaAcredCons varchar(25) = NULL,
@pCtaBienesCambio varchar(25) = NULL,
@pCtaMercEnCons varchar(25) = NULL,
@pDepositoReal varchar(15) = NULL,
@pconsCompra_Venta Sino,
@pLocalidad varchar(35) = NULL,
@pCodigoPostal CodigoPostal = NULL,
@pProvincia_Id varchar(5) = NULL,
@pInactivo Sino,
@pPosteado Sino,
@pUsuario_Id int, 
@pUsaUbicacion SiNo, 
@pc_ColoniaEntr VarChar(4) = NULL,
@pc_LocalidadEntr VarChar(4) = NULL,
@pc_MunicipioEntr VarChar(3) = NULL

)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM stkDepositos WHERE (Deposito_id = @pDeposito_id)))
BEGIN 
	UPDATE stkDepositos
	SET		@lIdentidad = stkDepositos,
		Deposito_id = @pDeposito_id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Sucursal = dbo.FuncFKgenSucursalesEmpr(@pSucursal),
		Descripcion = @pDescripcion,
		Direccion = @pDireccion,
		GrupoUsuarios = dbo.FuncFKgenUsuarios(@pGrupoUsuarios),
		Centro1_Id = dbo.FuncFKconCentro1(@pCentro1_Id),
		Centro2_Id = dbo.FuncFKconCentro2(@pCentro2_Id),
		AdmiteVentas = @pAdmiteVentas,
		Consignacion = @pConsignacion,
		CuentaDeudCons = dbo.FuncFKconCuentas(@pCuentaDeudCons),
		CuentaAcredCons = dbo.FuncFKconCuentas(@pCuentaAcredCons),
		CtaBienesCambio = dbo.FuncFKconCuentas(@pCtaBienesCambio),
		CtaMercEnCons = dbo.FuncFKconCuentas(@pCtaMercEnCons),
		DepositoReal = dbo.FuncFKstkDepositos(@pDepositoReal),
		consCompra_Venta = @pconsCompra_Venta,
		Localidad = @pLocalidad,
		CodigoPostal = @pCodigoPostal,
		Provincia_Id = dbo.FuncFKgenProvincias(@pProvincia_Id),
		Inactivo = @pInactivo,
		Posteado = @pPosteado,
		Usuario_Id = @pUsuario_Id, 
		UsaUbicacion = @pUsaUbicacion, 
		c_ColoniaEntr = @pc_ColoniaEntr,
		c_LocalidadEntr = @pc_LocalidadEntr,
		c_MunicipioEntr =  @pc_MunicipioEntr
	WHERE (Deposito_id = @pDeposito_id)
END 
ELSE 
BEGIN 
	INSERT INTO stkDepositos
	(
		Deposito_id,
		Empresa_Id,
		Sucursal,
		Descripcion,
		Direccion,
		GrupoUsuarios,
		Centro1_Id,
		Centro2_Id,
		AdmiteVentas,
		Consignacion,
		CuentaDeudCons,
		CuentaAcredCons,
		CtaBienesCambio,
		CtaMercEnCons,
		DepositoReal,
		consCompra_Venta,
		Localidad,
		CodigoPostal,
		Provincia_Id,
		Inactivo,
		Posteado,
		Usuario_Id, 
		UsaUbicacion, 
		c_ColoniaEntr,
		c_LocalidadEntr,
		c_MunicipioEntr

	)
	VALUES 
	(
		@pDeposito_id,
		@pEmpresa_Id,
		dbo.FuncFKgenSucursalesEmpr(@pSucursal),
		@pDescripcion,
		@pDireccion,
		dbo.FuncFKgenUsuarios(@pGrupoUsuarios),
		dbo.FuncFKconCentro1(@pCentro1_Id),
		dbo.FuncFKconCentro2(@pCentro2_Id),
		@pAdmiteVentas,
		@pConsignacion,
		dbo.FuncFKconCuentas(@pCuentaDeudCons),
		dbo.FuncFKconCuentas(@pCuentaAcredCons),
		dbo.FuncFKconCuentas(@pCtaBienesCambio),
		dbo.FuncFKconCuentas(@pCtaMercEnCons),
		dbo.FuncFKstkDepositos(@pDepositoReal),
		@pconsCompra_Venta,
		@pLocalidad,
		@pCodigoPostal,
		dbo.FuncFKgenProvincias(@pProvincia_Id),
		@pInactivo,
		@pPosteado,
		@pUsuario_Id, 
		@pUsaUbicacion, 
		@pc_ColoniaEntr,
		@pc_LocalidadEntr,
		@pc_MunicipioEntr
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE stkDepositosDatos
GO
CREATE PROCEDURE stkDepositosDatos
(
@pDeposito_id varchar(15)
)
AS
SET NOCOUNT ON 

SELECT stkDepositos.stkDepositos, stkDepositos.Deposito_Id, stkDepositos.Empresa_Id,
	dbo.PTodasEmpresas(stkDepositos.Empresa_Id) as PTodasEmpresas, 
	 genSucursalesEmpr.Sucursal,
	genSucursalesEmpr.Descripcion as DescripcionSucursalesEmpr, stkDepositos.Descripcion, stkDepositos.Direccion, 
	genUsuarios.Usuario_Id as GrupoUsuarios, genUsuarios.Apellido_y_Nombres as DescripcionGrupoUsuarios, 
	conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1,
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, stkDepositos.AdmiteVentas, stkDepositos.Consignacion,
	CuentaDeudCons.Cuenta_Id as CuentaDeudCons, CuentaDeudCons.Descripcion as DescripcionCuentaDeudCons, 
	CuentaAcredCons.Cuenta_Id as CuentaAcredCons, CuentaAcredCons.Descripcion as DescripcionCuentaAcredCons,
	CtaBienesCambio.Cuenta_Id as CtaBienesCambio, CtaBienesCambio.Descripcion as DescripcionCtaBienesCambio, 
	CtaMercEnCons.Cuenta_Id as CtaMercEnCons, CtaMercEnCons.Descripcion as DescripcionCtaMercEnCons,
	DepositoReal.Deposito_id as DepositoReal, 
	stkDepositos.Descripcion as DescripcionDepositoReal, 
	stkDepositos.consCompra_Venta,
	stkDepositos.Localidad, stkDepositos.CodigoPostal, 
	genProvincias.Provincia_Id, 	genProvincias.Descripcion as DescripcionProvincias, 
	stkDepositos.Inactivo, stkDepositos.Posteado,
	genUsuarios2.Usuario_Id, genUsuarios2.Apellido_y_Nombres as DescripcionUsuario, 
	stkDepositos.UsaUbicacion, 	stkDepositos.c_ColoniaEntr, stkDepositos.c_LocalidadEntr,
		stkDepositos.c_MunicipioEntr
FROM stkDepositos 
LEFT JOIN genSucursalesEmpr  ON (genSucursalesEmpr.genSucursalesEmpr = stkDepositos.Sucursal)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = stkDepositos.GrupoUsuarios)
LEFT JOIN conCentro1  ON (conCentro1.conCentro1 = stkDepositos.Centro1_Id)
LEFT JOIN conCentro2  ON (conCentro2.conCentro2 = stkDepositos.Centro2_Id)
LEFT JOIN conCuentas  as CuentaDeudCons ON (CuentaDeudCons.conCuentas = stkDepositos.CuentaDeudCons)
LEFT JOIN conCuentas CuentaAcredCons ON (CuentaAcredCons.conCuentas = stkDepositos.CuentaAcredCons)
LEFT JOIN conCuentas CtaBienesCambio ON (CtaBienesCambio.conCuentas = stkDepositos.CtaBienesCambio)
LEFT JOIN conCuentas CtaMercEnCons ON (CtaMercEnCons.conCuentas = stkDepositos.CtaMercEnCons)
LEFT JOIN stkDepositos  as DepositoReal ON (DepositoReal.stkDepositos = stkDepositos.DepositoReal)
LEFT JOIN genProvincias  ON (genProvincias.genProvincias = stkDepositos.Provincia_Id)
INNER JOIN genUsuarios genUsuarios2 ON (genUsuarios2.genUsuarios = stkDepositos.Usuario_Id)
WHERE (stkDepositos.Deposito_id = @pDeposito_id)
 
 Declare @pidentity bigint= dbo.FuncFKstkDepositos(@pDeposito_id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'stkDepositos' 
 
 RETURN @@Error 

GO


-- stkTieneExistenciaDepo '1'
DROP PROCEDURE stkTieneExistenciaDepo
GO
CREATE PROCEDURE stkTieneExistenciaDepo
(
@pDeposito_Id VarChar(15) 
)
AS
SET NOCOUNT ON 

SELECT COUNT(1) as Cantidad
FROM stkExistencia 
INNER JOIN stkProductos  ON (stkProductos.stkProductos = stkExistencia.Producto_Id)
INNER JOIN stkDepositos  ON (stkDepositos.stkDepositos = stkExistencia.Deposito_Id)
WHERE 
stkDepositos.Deposito_Id = @pDeposito_Id and 
stkExistencia.Cantidad <> 0
 
RETURN @@Error 

GO


DROP PROCEDURE stkDepositosEliminar
GO
CREATE PROCEDURE stkDepositosEliminar
(
@pDeposito_id varchar(15) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkDepositos 
WHERE (Deposito_id = @pDeposito_id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKstkDepositos
GO

CREATE FUNCTION FuncFKstkDepositos
(
@pDeposito_id varchar (15)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = stkDepositos FROM stkDepositos WHERE 
	Deposito_id = @pDeposito_id 
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkDevolucionesClie.sql*/

DROP Procedure   stkDevolucionesClieDatos 
go
create procedure stkDevolucionesClieDatos 
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20),
@pSegmento_IdSal VarChar(10), 
@pSegmento1NSal int,
@pSegmento2NSal int,
@pSegmento3NSal int,
@pSegmento4NSal int,
@pSegmento1CSal VarChar(20),
@pSegmento2CSal VarChar(20),
@pSegmento3CSal VarChar(20),
@pSegmento4CSal VarChar(20)

)
AS
Declare @pstkMoviCabe bigint = (select Asiento_Id
 from genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and 
	genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_IdSal) and 
	genAsiSegmentos.Segmento1N = @pSegmento1NSal and 
	genAsiSegmentos.Segmento2N = @pSegmento2NSal and 
	genAsiSegmentos.Segmento3N = @pSegmento3NSal and 
	genAsiSegmentos.Segmento4N = @pSegmento4NSal and 
	genAsiSegmentos.Segmento1C = @pSegmento1CSal and 
	genAsiSegmentos.Segmento2C = @pSegmento2CSal and 
	genAsiSegmentos.Segmento3C = @pSegmento3CSal and 
	genAsiSegmentos.Segmento4C = @pSegmento4CSal )

	Declare @pvenMovimientos bigint = (select Asiento_Id
 from genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and 
	genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C )


select genSegmentos.Segmento_Id ,genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C,stkCausasMovi.Causa_Id, stkCausasMovi.Descripcion as DescripcionCausa,
	conCentro1.Centro1_Id,conCentro2.Centro2_Id,'' as Deposito,stkDevolucionesClie.stkMoviCabe, 
	conAsientos.Anulado, stkSubTipoMov.TipoMov
	from genAsiSegmentos
	inner join	genSegmentos on  genSegmentos.genSegmentos=genAsiSegmentos.Segmento_Id
	inner join stkDevolucionesClie on  stkDevolucionesClie.stkMoviCabe=genAsiSegmentos.Asiento_Id
	inner join stkMoviCausa on stkMoviCausa.stkMoviCabe = stkDevolucionesClie.stkMoviCabe
	INNER JOIN stkCausasMovi ON stkCausasMovi.stkCausasMovi = stkMoviCausa.Causa_Id
	LEFT JOIN conCentro1 ON conCentro1.conCentro1 = stkMoviCausa.Centro1_Id
	LEFT JOIN conCentro2 ON conCentro2.conCentro2 = stkMoviCausa.Centro2_Id
	inner join stkMoviCabe ON stkMoviCabe.stkMoviCabe = stkDevolucionesClie.stkMoviCabe
	INNER JOIN stkSubTipoMov ON  stkSubTipoMov.SubTipoMov_Id = stkMoviCabe.SubTipoMov_Id
	inner join conAsientos ON conAsientos.conAsientos = stkDevolucionesClie.stkMoviCabe
	where
	stkDevolucionesClie.stkMoviCabe=@pstkMoviCabe

if @pstkMoviCabe is not null
	Begin
		


select venMovimientos.venMovimientos,genSegmentos.Segmento_Id ,genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C , conAsientos.Fecha, venClientes.Cliente_Id,venClientes.RazonSocial
	from genAsiSegmentos 
		inner join	genSegmentos on  genSegmentos.genSegmentos=genAsiSegmentos.Segmento_Id
		inner join stkDevolucionesClie on  stkDevolucionesClie.venMovimientosFact=genAsiSegmentos.Asiento_Id 
		inner join conAsientos ON conAsientos.conAsientos = stkDevolucionesClie.venMovimientosFact
		inner join venMovimientos on venMovimientos.venMovimientos=stkDevolucionesClie.venMovimientosFact
		inner join venClientes on venClientes.genEntidades=venMovimientos.Cliente_Id
		WHERE
			stkDevolucionesClie.stkMoviCabe = @pstkMoviCabe
			

select venMovConStockCr.venMovimientos, venMovConStockCr.RenglonCuerpo,
stkProductos.Producto_Id,stkProductos.Descripcion,stkUniMed.Medida_Id,
venMovConStockCr.CantOriginal, ISNULL(SUM(stkMoviCuerpo.Cantidad),0)  as DevolucionesAnteriores ,
0.00 as Cantidad,venMovConStockCr.PrecioVenta,stkDepositos.Deposito_Id
from stkMoviCuerpo
INNER JOIN stkProductos ON stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
INNER JOIN stkUniMed ON stkUniMed.stkUniMed = stkMoviCuerpo.Medida_Id

left Join stkDevolucionesClie on  
	stkMoviCuerpo.stkMoviCabe=stkDevolucionesClie.stkMoviCabe and
	stkMoviCuerpo.Renglon= stkDevolucionesClie.Renglon
left join venMovConStockCr  ON 
	venMovConStockCr.venMovimientos =stkDevolucionesClie.venMovimientosFact	
	inner join stkDepositos on stkDepositos.stkDepositos=venMovConStockCr.Deposito_Id
 where 
 stkMoviCuerpo.stkMoviCabe=@pstkMoviCabe
  
Group by venMovConStockCr.venMovimientos, 
venMovConStockCr.RenglonCuerpo,
stkProductos.Producto_Id,stkProductos.Descripcion,stkUniMed.Medida_Id,
venMovConStockCr.CantOriginal,venMovConStockCr.PrecioVenta,stkDepositos.Deposito_Id
end
else
begin

select venMovimientos.venMovimientos,genSegmentos.Segmento_Id ,genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C  , conAsientos.Fecha, venClientes.Cliente_Id,venClientes.RazonSocial
	from genAsiSegmentos inner join
		genSegmentos on  genSegmentos.genSegmentos=genAsiSegmentos.Segmento_Id
		inner join venMovimientos on venMovimientos.venMovimientos=genAsiSegmentos.Asiento_Id
		inner join venClientes on venClientes.genEntidades=venMovimientos.Cliente_Id
		inner join conAsientos ON conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
		WHERE
		venMovimientos.venMovimientos= @pvenMovimientos

		

select venMovConStockCr.venMovimientos, venMovConStockCr.RenglonCuerpo,
stkProductos.Producto_Id,stkProductos.Descripcion,stkUniMed.Medida_Id,
venMovConStockCr.CantOriginal, ISNULL(SUM(stkMoviCuerpo.Cantidad),0)  as DevolucionesAnteriores ,
0.00 as Cantidad,venMovConStockCr.PrecioVenta,stkDepositos.Deposito_Id
from venMovConStockCr
INNER JOIN stkProductos ON stkProductos.stkProductos = venMovConStockCr.Producto_Id
INNER JOIN stkUniMed ON stkUniMed.stkUniMed = venMovConStockCr.Medida_Id
left Join stkDevolucionesClie on  
	venMovConStockCr.venMovimientos=stkDevolucionesClie.venMovimientosFact
left join stkMoviCuerpo  ON 
	stkMoviCuerpo.stkMoviCabe =stkDevolucionesClie.stkMoviCabe and 
	stkMoviCuerpo.Producto_Id = stkProductos.stkProductos
	inner join stkDepositos on stkDepositos.stkDepositos=venMovConStockCr.Deposito_Id
 where 
 venMovConStockCr.venMovimientos=@pvenMovimientos
  
Group by venMovConStockCr.venMovimientos, 
venMovConStockCr.RenglonCuerpo,
stkProductos.Producto_Id,stkProductos.Descripcion,stkUniMed.Medida_Id,
venMovConStockCr.CantOriginal,venMovConStockCr.PrecioVenta,stkDepositos.Deposito_Id



end
go

drop procedure stkDevolucionesClieGuardar 
go
create procedure stkDevolucionesClieGuardar 
(@pstkMoviCabe bigint ,
@pvenMovimientosFact bigint,
@pvenMovimientosNC bigint = null,
@pRenglon int,
@pRenglonCuerpo int,
@pRenglonNC int)
as

BEGIN 
INSERT INTO stkDevolucionesClie
(
stkMoviCabe,
venMovimientosFact,
venMovimientosNC,
Renglon,
RenglonCuerpo,
RenglonNC
)
values
(
@pstkMoviCabe,
@pvenMovimientosFact ,
@pvenMovimientosNC ,
@pRenglon,
@pRenglonCuerpo,
@pRenglonNC
)
end

go

drop procedure stkDevolucionesClieEliminar 
go
create procedure stkDevolucionesClieEliminar
(@pstkMoviCabe bigint )
as
delete from stkDevolucionesClie where stkMoviCabe=@pstkMoviCabe 

go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkDevolucionesProv.sql*/

DROP PROCEDURE stkDevolucionesProvDatos
GO
CREATE PROCEDURE stkDevolucionesProvDatos
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20),
@pSegmento_Id_OC VarChar(10), 
@pSegmento1N_OC int,
@pSegmento2N_OC int,
@pSegmento3N_OC int,
@pSegmento4N_OC int,
@pSegmento1C_OC VarChar(20),
@pSegmento2C_OC VarChar(20),
@pSegmento3C_OC VarChar(20),
@pSegmento4C_OC VarChar(20)

)
AS
SET NOCOUNT ON 

DECLARE @pstkMoviCabe bigint

SET @pstkMoviCabe = (
SELECT Asiento_id from genAsiSegmentos where
	Empresa_Id = @pEmpresa_id and 
	Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_id) and
	Segmento1N =@pSegmento1N and
	Segmento2N = @pSegmento2N and
	Segmento3N = @pSegmento3N and
	Segmento4N = @pSegmento4N and
	Segmento1C = @pSegmento1C and
	Segmento2C = @pSegmento2C and 
	Segmento3C = @pSegmento3C and 
	Segmento4C = @pSegmento4C )



	
SELECT stkMoviCabe.stkMoviCabe,
	genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C, Cast(0 As Bit) DistribuyeContrapartida,
	conAsientos.Posteado, conAsientos.Fecha, conAsientos.FechaRegistro, 
	conAsientos.Cambio,conAsientos.CambioMonedaOriginal, 
	conAsientos.Anulado, conAsientos.Observaciones,  disFormularios.Formulario_Id Formulario,
	genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas,
	stkSubTipoMov.SubTipoMov_Id, stkSubTipoMov.Descripcion as DescripcionSubTipoMov, 
	stkMoviCabe.ModificaCosto, 	stkMoviCabe.Signo, stkSubTipoMov.Tipomov, ' ' as Proveed_Id, 
	genSucursalesEmpr.Sucursal
FROM stkMoviCabe 
INNER JOIN conAsientos  ON (conAsientos.conAsientos = stkMoviCabe.stkMoviCabe)
INNER JOIN stkSubTipoMov  ON (stkSubTipoMov.SubTipoMov_Id = stkMoviCabe.SubTipoMov_Id)
INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_id
Inner Join disFormularios On disFormularios.disFormularios = conAsientos.Formulario_Id
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_id = stkMoviCabe.stkMoviCabe
INNER JOIN genSegmentos ON genAsiSegmentos.Segmento_id = genSegmentos.genSegmentos
INNER JOIN genSucursalesEmpr on conAsientos.Sucursal = genSucursalesEmpr.genSucursalesEmpr
WHERE (stkMoviCabe = @pstkMoviCabe)


if @pstkMoviCabe is null
BEGIN

SELECT comOCSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
	comOCSegmentos.Segmento1N, comOCSegmentos.Segmento2N,
	comOCSegmentos.Segmento3N, comOCSegmentos.Segmento4N,
	comOCSegmentos.Segmento1C, comOCSegmentos.Segmento2C,
	comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C,
	comOrdenComp.Fecha, comProveedores.Proveed_Id, comProveedores.RazonSocial, 
	genMonedas.Moneda_Id

From comOCSegmentos 
INNER JOIN comOrdenComp on comOCSegmentos.comOrdenComp = comOrdenComp.comOrdenComp
INNER JOIN comProveedores ON comProveedores.genEntidades = comOrdenComp.Proveed_id
INNER JOIN genMonedas ON genMonedas.genMonedas = comOrdenComp.Moneda_Id
INNER JOIN genSegmentos	ON genSegmentos.genSegmentos = comOCSegmentos.Segmento_Id
WHERE 
	
	comOCSegmentos.Empresa_Id =@pEmpresa_id and 
	comOCSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_id_OC) and
	comOCSegmentos.Segmento1N =@pSegmento1N_OC and
	comOCSegmentos.Segmento2N = @pSegmento2N_OC and
	comOCSegmentos.Segmento3N = @pSegmento3N_OC and
	comOCSegmentos.Segmento4N = @pSegmento4N_OC and
	comOCSegmentos.Segmento1C = @pSegmento1C_OC and
	comOCSegmentos.Segmento2C = @pSegmento2C_OC and 
	comOCSegmentos.Segmento3C = @pSegmento3C_OC and 
	comOCSegmentos.Segmento4C = @pSegmento4C_OC 
ORDER BY 2




SELECT Convert(bigint, 0) AS stkMoviCabe, comOCCuerpo.Renglon_OC Renglon, 0 RenglonReferencia, 
	comOCCuerpo.Fecha_Entrega Fecha,
	stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos, 
	stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos,
	stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, 
	comOCArticulo.Factor, comOCCuerpo.Cantidad*0 as Cantidad,
	comOCCuerpo.Cantidad*0 as CantidadForm, comOcCuerpo.Precio as CostoUnitario, 
	comOCArticulo.PrecioOriginal, stkMedidaAlterna.Medida_Id MedidaAlterna, 
	stkMedidaAlterna.Descripcion DescripcionMedidaAlterna,
	comOCCuerpo.Cantidad*0 As CantidadAlternaForm, ' ' Observaciones, 0.00 as Descuento, 0 as conRenglonDebe, 
	conCuentasDebe.Cuenta_Id as CuentaDebe, conCuentasDebe.Descripcion as DescripcionCuentaDebe,
	conCentro1Debe.Centro1_Id as Centro1Debe, conCentro1Debe.Descripcion as DescripcionCentro1Debe,
	conCentro2Debe.Centro2_Id as Centro2Debe, conCentro2Debe.Descripcion as DescripcionCentro2Debe,
	' ' as ClaseDebe, comOCCuerpo.Precio*0  as ImporteContableDebe, 
	0 as conRenglonHaber, 
	conCuentasHaber.Cuenta_Id as CuentaHaber, conCuentasHaber.Descripcion as DescripcionCuentaHaber,
	' ' as Centro1Haber, ' ' as DescripcionCentro1Haber,
	' ' as Centro2Haber, ' ' as DescripcionCentro2Haber,
	' '  as ClaseHaber, comOCCuerpo.Precio*0 as ImporteContableHaber , 
	comOcCuerpo.Renglon_oc, comOCArticulo.CantidadOriginal as CantidadOC, comOcCuerpo.Cantidad_Recibida, comOCCuerpo.CantidadConsignada,
	comOcCuerpo.Precio, '' Despacho_Id, '' PegarSeries
FROM comOCSegmentos 
INNER JOIN comOcCuerpo ON comOCSegmentos.comOrdenComp = comOcCuerpo.comOrdenComp
INNER JOIN comOcArticulo ON comOcCuerpo.comOrdenComp = comOcArticulo.comOrdenComp and comOcCuerpo.Renglon_OC = comOcArticulo.Renglon_OC
INNER JOIN stkDepositos  ON (stkDepositos.stkDepositos = comOcArticulo.Deposito_Id)
INNER JOIN stkProductos  ON (stkProductos.stkProductos = comOcArticulo.Producto_Id)
INNER JOIN stkUniMed  ON (stkUniMed.stkUniMed = comOcCuerpo.Medida_Id)
Inner Join comOrdenComp On comOrdenComp.comOrdenComp = comOCSegmentos.comOrdenComp
Left Join genMonedas On genMonedas.genMonedas = comOrdenComp.Moneda_Id
INNER JOIN conCuentas as conCuentasDebe ON conCuentasDebe.conCuentas = stkProductos.CtaCompra
LEFT OUTER JOIN conCentro1 as conCentro1Debe ON conCentro1Debe.conCentro1 = comOcCuerpo.Centro1_id
LEFT OUTER JOIN conCentro2  as conCentro2Debe ON conCentro2Debe.conCentro2 = comOcCuerpo.Centro2_id
--left outer JOIN conCuentas as conCuentasHaber ON conCuentasHaber.conCuentas = (select nValor from genGlobales where nombre_var ='CTAFACAREC')
left outer Join conCuentas as conCuentasHaber ON conCuentasHaber.conCuentas = genMonedas.CtaFactaRecibir
Left Join stkUniMed stkMedidaAlterna On stkMedidaAlterna.stkUniMed = stkProductos.MedidaAlterna
WHERE 
	case when stkDepositos.consCompra_Venta = 1 then comOCCuerpo.CantidadConsignada else
	comOCCuerpo.Cantidad_Recibida end >0 and 
	comOCSegmentos.Empresa_Id =@pEmpresa_id and 
	comOCSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_id_OC) and
	comOCSegmentos.Segmento1N =@pSegmento1N_OC and
	comOCSegmentos.Segmento2N = @pSegmento2N_OC and
	comOCSegmentos.Segmento3N = @pSegmento3N_OC and
	comOCSegmentos.Segmento4N = @pSegmento4N_OC and
	comOCSegmentos.Segmento1C = @pSegmento1C_OC and
	comOCSegmentos.Segmento2C = @pSegmento2C_OC and 
	comOCSegmentos.Segmento3C = @pSegmento3C_OC and 
	comOCSegmentos.Segmento4C = @pSegmento4C_OC 
ORDER BY 2


END

ELSE
-- Cuerpo
BEGIN

SELECT comOCSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
	comOCSegmentos.Segmento1N, comOCSegmentos.Segmento2N,
	comOCSegmentos.Segmento3N, comOCSegmentos.Segmento4N,
	comOCSegmentos.Segmento1C, comOCSegmentos.Segmento2C,
	comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C,
	comOrdenComp.Fecha, comProveedores.Proveed_Id, comProveedores.RazonSocial, 
	genMonedas.Moneda_Id

From comOCSegmentos 
INNER JOIN comOrdenComp on comOCSegmentos.comOrdenComp = comOrdenComp.comOrdenComp
INNER JOIN comProveedores ON comProveedores.genEntidades = comOrdenComp.Proveed_id
INNER JOIN genMonedas ON genMonedas.genMonedas = comOrdenComp.Moneda_Id
INNER JOIN genSegmentos	ON genSegmentos.genSegmentos = comOCSegmentos.Segmento_Id


WHERE 
	Exists(select 1 from stkmovioc where
		stkmovioc.stkMoviCabe = @pstkMoviCabe and 
		stkmovioc.comOrdenComp =	comOrdenComp.comOrdenComp)
ORDER BY 2


SELECT stkMoviCuerpo.stkMoviCabe, stkMoviCuerpo.Renglon, 0 RenglonReferencia, stkMoviCuerpo.Fecha,
	stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos, stkProductos.Producto_Id, 
	stkProductos.Descripcion as DescripcionProductos,
	stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, stkMoviCuerpo.Factor, stkMoviCuerpo.Cantidad,
	stkMoviCuerpo.CantidadForm, stkMoviCuerpo.CostoUnitario, stkMoviCuerpo.PrecioOriginal,
	stkMedidaAlterna.Medida_Id MedidaAlterna, stkMedidaAlterna.Descripcion DescripcionMedidaAlterna,
	stkMoviCuerpo.CantidadalternaForm, stkMoviCuerpo.Observaciones, stkMoviCuerpo.Descuento, 
	stkMoviCuerpo.conRenglonDebe, 
	conCuentasDebe.Cuenta_Id as CuentaDebe, conCuentasDebe.Descripcion as DescripcionCuentaDebe,
	conCentro1Debe.Centro1_Id as Centro1Debe, conCentro1Debe.Descripcion as DescripcionCentro1Debe,
	conCentro2Debe.Centro2_Id as Centro2Debe, conCentro2Debe.Descripcion as DescripcionCentro2Debe,
	conMovContDebe.Clase as ClaseDebe, conMovContDebe.Importe as ImporteContableDebe, 
	stkMoviCuerpo.conRenglonHaber, 
	conCuentasHaber.Cuenta_Id as CuentaHaber, conCuentasHaber.Descripcion as DescripcionCuentaHaber,
	conCentro1Haber.Centro1_id as Centro1Haber, conCentro1Haber.Descripcion as DescripcionCentro1Haber,
	conCentro2Haber.Centro2_id as Centro2Haber, conCentro2Haber.Descripcion as DescripcionCentro2Haber,
	conMovContHaber.Clase as ClaseHaber, conMovContDebe.Importe as ImporteContableHaber , 
	stkMoviOC.Renglon_oc, comOcArticulo.CantidadOriginal as CantidadOC, comOcCuerpo.Cantidad_Recibida, comOCCuerpo.CantidadConsignada,
	comOcCuerpo.Precio, '' Despacho_Id, '' PegarSeries
FROM stkMoviOC 
INNER JOIN stkMoviCuerpo ON stkMoviOC.stkMoviCabe = stkMoviCuerpo.stkMoviCabe and stkMoviOC.Renglon = stkMoviCuerpo.Renglon
INNER JOIN comOcCuerpo ON comOcCuerpo.comOrdenComp = stkMoviOC.comOrdenComp and comOcCuerpo.Renglon_OC = stkMoviOC.Renglon_oc
Inner Join comOCArticulo On comOCArticulo.comOrdenComp = stkMoviOC.comOrdenComp And comOCArticulo.Renglon_OC = stkMoviOC.Renglon_OC
INNER JOIN stkMoviCabe  ON (stkMoviCabe.stkMoviCabe = stkMoviCuerpo.stkMoviCabe)
LEFT JOIN stkDepositos  ON (stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id)
LEFT JOIN stkProductos  ON (stkProductos.stkProductos = stkMoviCuerpo.Producto_Id)
LEFT JOIN stkUniMed  ON (stkUniMed.stkUniMed = stkMoviCuerpo.Medida_Id)
INNER JOIN conMovCont  ON (conMovCont.conAsientos = stkMoviCuerpo.stkMoviCabe) AND (conMovCont.Renglon = stkMoviCuerpo.conRenglonDebe)
INNER JOIN conMovCont conMovCont2 ON (conMovCont2.conAsientos = stkMoviCuerpo.stkMoviCabe) AND (conMovCont2.Renglon = stkMoviCuerpo.conRenglonHaber)
INNER JOIN conMovCont as conMovContDebe ON conMovContDebe.conAsientos = stkMoviCuerpo.stkMoviCabe And
	conMovContDebe.Renglon = stkMoviCuerpo.conRenglonDebe
INNER JOIN conCuentas as conCuentasDebe ON conCuentasDebe.conCuentas = conMovContDebe.cuenta_id 
LEFT OUTER  JOIN conCentro1 as conCentro1Debe ON conCentro1Debe.conCentro1 = conMovContDebe.Centro1_id
LEFT OUTER  JOIN conCentro2  as conCentro2Debe ON conCentro2Debe.conCentro2 = conMovContDebe.Centro2_id
INNER JOIN conMovCont as conMovContHaber ON conMovContHaber.conAsientos = stkMoviCuerpo.stkMoviCabe And
	conMovContHaber.Renglon = stkMoviCuerpo.conRenglonHaber
INNER JOIN conCuentas as conCuentasHaber ON conCuentasHaber.conCuentas = conMovContHaber.cuenta_id 
LEFT OUTER JOIN conCentro1 as conCentro1Haber ON conCentro1Haber.conCentro1 = conMovContHaber.Centro1_id
LEFT OUTER JOIN conCentro2  as conCentro2Haber ON conCentro2Haber.conCentro2 = conMovContHaber.Centro2_id
Left Join stkUniMed stkMedidaAlterna On stkMedidaAlterna.stkUniMed = stkMoviCuerpo.MedidaAlterna
WHERE (stkMoviCuerpo.stkMoviCabe = @pstkMoviCabe)
ORDER BY 2
END


Exec genAtributosGeneralesIdentityDatos @pstkMoviCabe, 'stkMoviCabe' 

Exec stkMoviSerieDatos @pstkMoviCabe

Exec stkMoviDespaDatos @pstkMoviCabe

Select '' RemitoProv, getDate() FechaRemito 
 
Exec stkMoviUbicacionDatos @pstkMoviCabe

RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkEntradasCancRemi.sql*/
DROP PROCEDURE stkEntradasCancRemiGuardar
GO
CREATE PROCEDURE stkEntradasCancRemiGuardar
(
@pstkMoviCabeEntrada bigint,
@pRenglonEntrada int,
@pstkMoviCabeRemi bigint,
@pRenglonRemi int,
@pCantidad qCantidadD8
)
AS
SET NOCOUNT ON 
	INSERT INTO stkEntradasCancRemi
	(
		stkMoviCabeEntrada,
		RenglonEntrada,
		stkMoviCabeRemi,
		RenglonRemi,
		Cantidad
	)
	VALUES 
	(
		@pstkMoviCabeEntrada,
		@pRenglonEntrada,
		@pstkMoviCabeRemi,
		@pRenglonRemi,
		@pCantidad
	)

GO

DROP PROCEDURE stkEntradasCancRemiDatos
GO
CREATE PROCEDURE stkEntradasCancRemiDatos
(
@pstkMoviCabeEntrada bigint,
@pRenglonEntrada int = null
)
AS
SET NOCOUNT ON 

SELECT stkEntradasCancRemi.stkMoviCabeEntrada, stkEntradasCancRemi.RenglonEntrada, 
stkEntradasCancRemi.stkMoviCabeRemi, stkEntradasCancRemi.RenglonRemi,  stkEntradasCancRemi.Cantidad
FROM stkEntradasCancRemi 
WHERE (stkMoviCabeEntrada = @pstkMoviCabeEntrada)
AND (RenglonEntrada = ISNULL(@pRenglonEntrada,RenglonEntrada))
 
 RETURN @@Error 

GO

DROP PROCEDURE stkEntradasCancRemiEliminar
GO
CREATE PROCEDURE stkEntradasCancRemiEliminar
(
@pstkMoviCabeEntrada bigint,
@pRenglonEntrada int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkEntradasCancRemi 
WHERE (stkMoviCabeEntrada = @pstkMoviCabeEntrada)
AND (RenglonEntrada = ISNULL(@pRenglonEntrada,RenglonEntrada))
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkEntradasCancRemiPend.sql*/

--- exec stkEntradasCancRemiPend 1, 'STOCK',0,0,0,0,' ',' ',' ',' ','REM', 45397,0,0,0,'CCG',' ',' ',' '
DROP PROCEDURE stkEntradasCancRemiPend
GO
CREATE PROCEDURE stkEntradasCancRemiPend
(

@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20),
@pSegmento_IdRemi VarChar(10), 
@pSegmento1NRemi int,
@pSegmento2NRemi int,
@pSegmento3NRemi int,
@pSegmento4NRemi int,
@pSegmento1CRemi VarChar(20),
@pSegmento2CRemi VarChar(20),
@pSegmento3CRemi VarChar(20),
@pSegmento4CRemi VarChar(20)

)
AS

DECLARE @pStkmoviCabe Bigint

SET @pStkmoviCabe = (SELECT Asiento_Id FROM genAsiSegmentos 
			INNER JOIN genSegmentos ON genSegmentos.genSegmentos =genAsiSegmentos.Segmento_Id
			Where
				genSegmentos.Segmento_Id = @pSegmento_Id and 
				genAsiSegmentos.Segmento1N = @pSegmento1N and
				genAsiSegmentos.Segmento2N = @pSegmento2N and
				genAsiSegmentos.Segmento3N = @pSegmento3N and
				genAsiSegmentos.Segmento4N = @pSegmento4N and
				genAsiSegmentos.Segmento1C = @pSegmento1C and
				genAsiSegmentos.Segmento2C = @pSegmento2C and
				genAsiSegmentos.Segmento3C = @pSegmento3C and
				genAsiSegmentos.Segmento4C = @pSegmento4C and
				genAsiSegmentos.Empresa_Id = @pEmpresa_Id)

Exec stkMoviCabeSoloDatos @pStkmoviCabe


if @pstkMoviCabe is null
BEGIN

-- Traigo el pendiente de recepci?n de la OC --
SELECT genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	conAsientos.Fecha, venClientes.Cliente_Id, venClientes.RazonSocial, 
	genMonedas.Moneda_Id, Cast(0.00 as Numeric(18,2)) as Total
From genAsiSegmentos
INNER JOIN stkRemitos on genAsiSegmentos.Asiento_Id = stkRemitos.stkMoviCabe
INNER JOIN venClientes ON venClientes.genEntidades = stkRemitos.Cliente_Id
INNER JOIN conAsientos ON conAsientos.conAsientos =genAsiSegmentos.Asiento_Id 
INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
INNER JOIN genSegmentos	ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
WHERE 
	genAsiSegmentos.Empresa_Id =@pEmpresa_id and 
	genSegmentos.Segmento_Id = @pSegmento_IdRemi and
	genAsiSegmentos.Segmento1N =@pSegmento1NRemi and
	genAsiSegmentos.Segmento2N = @pSegmento2NRemi and
	genAsiSegmentos.Segmento3N = @pSegmento3NRemi and
	genAsiSegmentos.Segmento4N = @pSegmento4NRemi and
	genAsiSegmentos.Segmento1C = @pSegmento1CRemi and
	genAsiSegmentos.Segmento2C = @pSegmento2CRemi and 
	genAsiSegmentos.Segmento3C = @pSegmento3CRemi and 
	genAsiSegmentos.Segmento4C = @pSegmento4CRemi
ORDER BY 2




SELECT Convert(bigint, 0) AS stkMoviCabe, stkMoviCuerpo.Renglon,  stkMoviCuerpo.Renglon RenglonReferencia, 
	conAsientos.Fecha Fecha,
	stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos, 
	stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos,
	stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, 
	stkMoviCuerpo.Factor, stkMoviCuerpo.Cantidad*0  as Cantidad,
	stkMoviCuerpo.Cantidad*0 as CantidadForm, stkMoviCuerpo.CostoUnitario as CostoUnitario, 
	stkMoviCuerpo.PrecioOriginal PrecioOriginal, stkMedidaAlterna.Medida_Id MedidaAlterna, 
	stkMedidaAlterna.Descripcion DescripcionMedidaAlterna,
	stkMoviCuerpo.CantidadAlternaForm As CantidadAlternaForm, stkMoviCuerpo.Observaciones, stkMoviCuerpo.Descuento, 
	0 as conRenglonDebe, 
	conCuentasDebe.Cuenta_Id as CuentaDebe, conCuentasDebe.Descripcion as DescripcionCuentaDebe,
	' '  as Centro1Debe, ' ' as DescripcionCentro1Debe,
	' ' as Centro2Debe, ' ' as DescripcionCentro2Debe,
	' ' as ClaseDebe, stkMoviCuerpo.Cantidad*0  as ImporteContableDebe, 
	0 as conRenglonHaber, 
	conCuentasHaber.Cuenta_Id as CuentaHaber, conCuentasHaber.Descripcion as DescripcionCuentaHaber,
	' ' as Centro1Haber, ' ' as DescripcionCentro1Haber,
	' ' as Centro2Haber, ' ' as DescripcionCentro2Haber,
	' '  as ClaseHaber, stkMoviCuerpo.Cantidad*0 as ImporteContableHaber, 
	stkMoviCuerpo.Renglon Renglon_oc, stkMoviCuerpo.Cantidad as CantidadOC, stkRemiPendFact.CantidadPendiente  , 
	 stkMoviCuerpo.PrecioOriginal Precio, ISNULL((SELECT MAX(comDespachos.Despacho_Id) from 
		stkMoviDespa INNER JOIN comDespachos ON 
		stkMoviDespa.stkMoviCabe = stkMoviCuerpo.stkMoviCabe and 
		stkMoviDespa.Renglon = stkMoviCuerpo.Renglon and 
		comDespachos.comDespachos = stkMoviDespa.Despacho_Id) ,	 '') Despacho_Id
FROM 
genAsiSegmentos Inner join genSegmentos ON genAsiSegmentos.Segmento_Id = genSegmentos.genSegmentos
Inner join stkMoviCabe ON stkMoviCabe.stkMoviCabe = genAsiSegmentos.Asiento_Id
INNER JOIN stkMoviCuerpo ON stkMoviCuerpo.stkMoviCabe = stkMoviCabe.stkMoviCabe
INNER JOIN stkDepositos  ON stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id
INNER JOIN stkProductos  ON stkMoviCuerpo.Producto_Id =  stkProductos.stkProductos
INNER JOIN stkUniMed  ON stkUniMed.stkUniMed = stkMoviCuerpo.Medida_Id
Inner Join stkRemitos On stkRemitos.stkMoviCabe = stkMoviCabe.stkMoviCabe
Inner join conAsientos ON conAsientos.conAsientos = stkMoviCabe.stkMoviCabe
Left Join genMonedas On genMonedas.genMonedas = conAsientos.Moneda_Id
INNER JOIN conMovCont conMovContDebe ON conMovContDebe.conAsientos = stkMoviCuerpo.stkMoviCabe and 
										conMovContDebe.Renglon = stkMoviCuerpo.conRenglonDebe
INNER JOIN conMovCont conMovContHaber ON conMovContHaber.conAsientos = stkMoviCuerpo.stkMoviCabe and 
										conMovContHaber.Renglon = stkMoviCuerpo.conRenglonHaber
INNER JOIN conCuentas as conCuentasDebe ON conCuentasDebe.conCuentas = conMovContDebe.Cuenta_Id
INNER JOIN conCuentas conCuentasHaber ON conCuentasHaber.conCuentas = conMovContHaber.Cuenta_Id
Left Join stkUniMed stkMedidaAlterna On stkMedidaAlterna.stkUniMed = stkProductos.MedidaAlterna
INNER join stkRemiPendFact ON stkRemiPendFact.stkMoviCabe = stkMoviCuerpo.stkMoviCabe and 
							 stkRemiPendFact.Renglon = 	stkMoviCuerpo.Renglon
WHERE 
	stkRemiPendFact.CantidadPendiente  > 0 and 
	genAsiSegmentos.Empresa_Id =@pEmpresa_id and 
	genSegmentos.Segmento_Id = @pSegmento_idRemi and
	genAsiSegmentos.Segmento1N =@pSegmento1NRemi and
	genAsiSegmentos.Segmento2N = @pSegmento2NRemi and
	genAsiSegmentos.Segmento3N = @pSegmento3NRemi and
	genAsiSegmentos.Segmento4N = @pSegmento4NRemi and
	genAsiSegmentos.Segmento1C = @pSegmento1CRemi and
	genAsiSegmentos.Segmento2C = @pSegmento2CRemi and 
	genAsiSegmentos.Segmento3C = @pSegmento3CRemi and 
	genAsiSegmentos.Segmento4C = @pSegmento4CRemi 
ORDER BY 2


END

ELSE
-- Cuerpo
-- Traigo el comprobante que se est? consultando --
BEGIN


-- Traigo el pendiente de recepci?n de la OC --
SELECT  genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	conAsientos.Fecha, venClientes.Cliente_Id, venClientes.RazonSocial, 
	genMonedas.Moneda_Id, (stkMoviCuerpo.CantidadForm * stkMoviCuerpo.PrecioOriginal) as Total
From genAsiSegmentos
INNER JOIN stkRemitos on genAsiSegmentos.Asiento_Id = stkRemitos.stkMoviCabe
INNER JOIN venClientes ON venClientes.genEntidades = stkRemitos.Cliente_Id
INNER JOIN conAsientos ON conAsientos.conAsientos =genAsiSegmentos.Asiento_Id 
INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
INNER JOIN genSegmentos	ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
INNER JOIN stkEntradasCancRemi ON 
	stkEntradasCancRemi.stkMoviCabeRemi = stkRemitos.stkMoviCabe 
INNER JOIN stkMoviCuerpo ON  stkMoviCuerpo.stkMoviCabe = stkEntradasCancRemi.stkMoviCabeEntrada and 
	stkMoviCuerpo.Renglon = stkEntradasCancRemi.RenglonEntrada

WHERE 
	stkEntradasCancRemi.stkMoviCabeEntrada = @pStkmoviCabe


SELECT stkMoviCuerpo.stkMoviCabe, stkMoviCuerpo.Renglon, stkEntradasCancRemi.RenglonRemi RenglonReferencia, stkMoviCuerpo.Fecha,
	stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos, stkProductos.Producto_Id, 
	stkProductos.Descripcion as DescripcionProductos,
	stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, stkMoviCuerpo.Factor, stkMoviCuerpo.Cantidad,
	stkMoviCuerpo.CantidadForm, stkMoviCuerpo.CostoUnitario, stkMoviCuerpo.PrecioOriginal,
	stkMedidaAlterna.Medida_Id MedidaAlterna, stkMedidaAlterna.Descripcion DescripcionMedidaAlterna,
	stkMoviCuerpo.CantidadalternaForm, stkMoviCuerpo.Observaciones, stkMoviCuerpo.Descuento, 
	stkMoviCuerpo.conRenglonDebe, 
	conCuentasDebe.Cuenta_Id as CuentaDebe, conCuentasDebe.Descripcion as DescripcionCuentaDebe,
	conCentro1Debe.Centro1_Id as Centro1Debe, conCentro1Debe.Descripcion as DescripcionCentro1Debe,
	conCentro2Debe.Centro2_Id as Centro2Debe, conCentro2Debe.Descripcion as DescripcionCentro2Debe,
	conMovContDebe.Clase as ClaseDebe, conMovContDebe.Importe as ImporteContableDebe, 
	stkMoviCuerpo.conRenglonHaber, 
	conCuentasHaber.Cuenta_Id as CuentaHaber, conCuentasHaber.Descripcion as DescripcionCuentaHaber,
	conCentro1Haber.Centro1_id as Centro1Haber, conCentro1Haber.Descripcion as DescripcionCentro1Haber,
	conCentro2Haber.Centro2_id as Centro2Haber, conCentro2Haber.Descripcion as DescripcionCentro2Haber,
	conMovContHaber.Clase as ClaseHaber, conMovContDebe.Importe as ImporteContableHaber , 
	stkEntradasCancRemi.RenglonRemi  Renglon_oc, 
	stkEntradasCancRemi.Cantidad as CantidadOC,  stkEntradasCancRemi.Cantidad CantidadPendiente,
	stkMoviCuerpo.PrecioOriginal  as Precio, comDespachos.Despacho_Id
FROM stkMoviCabe 
INNER JOIN stkMoviCuerpo ON stkMoviCabe.stkMoviCabe = stkMoviCuerpo.stkMoviCabe
INNER JOIN stkEntradasCancRemi ON stkEntradasCancRemi.stkMoviCabeEntrada = stkMoviCuerpo.stkMoviCabe AND 
					stkEntradasCancRemi.RenglonEntrada = stkMoviCuerpo.Renglon
INNER JOIN stkDepositos  ON stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id
LEFT JOIN stkProductos  ON stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
LEFT JOIN stkUniMed  ON stkUniMed.stkUniMed = stkMoviCuerpo.Medida_Id
INNER JOIN conMovCont  ON (conMovCont.conAsientos = stkMoviCuerpo.stkMoviCabe) AND 
						(conMovCont.Renglon = stkMoviCuerpo.conRenglonDebe)
INNER JOIN conMovCont conMovCont2 ON (conMovCont2.conAsientos = stkMoviCuerpo.stkMoviCabe) AND 
						(conMovCont2.Renglon = stkMoviCuerpo.conRenglonHaber)
INNER JOIN conMovCont as conMovContDebe ON conMovContDebe.conAsientos = stkMoviCuerpo.stkMoviCabe And
	conMovContDebe.Renglon = stkMoviCuerpo.conRenglonDebe
INNER JOIN conCuentas as conCuentasDebe ON conCuentasDebe.conCuentas = conMovContDebe.cuenta_id 
LEFT OUTER  JOIN conCentro1 as conCentro1Debe ON conCentro1Debe.conCentro1 = conMovContDebe.Centro1_id
LEFT OUTER  JOIN conCentro2  as conCentro2Debe ON conCentro2Debe.conCentro2 = conMovContDebe.Centro2_id
INNER JOIN conMovCont as conMovContHaber ON conMovContHaber.conAsientos = stkMoviCuerpo.stkMoviCabe And
	conMovContHaber.Renglon = stkMoviCuerpo.conRenglonHaber
INNER JOIN conCuentas as conCuentasHaber ON conCuentasHaber.conCuentas = conMovContHaber.cuenta_id 
LEFT OUTER JOIN conCentro1 as conCentro1Haber ON conCentro1Haber.conCentro1 = conMovContHaber.Centro1_id
LEFT OUTER JOIN conCentro2  as conCentro2Haber ON conCentro2Haber.conCentro2 = conMovContHaber.Centro2_id
Left Join stkUniMed stkMedidaAlterna On stkMedidaAlterna.stkUniMed = stkMoviCuerpo.MedidaAlterna
left join (stkMoviDespa  INNER JOIN comDespachos ON stkMoviDespa.Despacho_Id = comDespachos.comDespachos) ON 
	stkMoviDespa.stkMoviCabe = stkMoviCuerpo.stkMoviCabe AND 
	stkMoviDespa.Renglon = stkMoviCuerpo.Renglon
WHERE 
(stkMoviCuerpo.stkMoviCabe = @pstkMoviCabe)
ORDER BY 2
END



Exec genAtributosGeneralesIdentityDatos @pstkMoviCabe, 'stkMoviCabe' 

Exec stkMoviSerieDatos @pstkMoviCabe

Exec stkMoviDespaDatos @pstkMoviCabe
	-- PARA V2
Exec stkMoviUbicacionDatos  @pStkMoviCabe



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkEntradasCD.sql*/
drop procedure stkEntradasCDDatos
go
create procedure stkEntradasCDDatos
(
@pEmpresa_id int, 
@pSegmento_id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
AS
Declare @pstkMoviCabe bigint = (select Asiento_id
 from genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_id = @pEmpresa_id and 
	genAsiSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C )

exec stkMoviCabeDatos @pstkMoviCabe


SELECT stkEnTransito.stkMoviCabe,stkEnTransito.stkMoviCabeEntr, @pstkMoviCabe as var, genSegmentos.Segmento_Id, 
genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
stkEnTransito.stkMoviCabeEntr, stkSubTipoMov.TipoMov,
stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos

FROM stkEnTransito 

INNER JOIN genAsiSegmentos  ON (genAsiSegmentos.Asiento_id = stkEnTransito.stkMoviCabe)
INNER JOIN stkDepositos  ON (stkDepositos.stkDepositos = stkEnTransito.Deposito_Id)
inner join genSegmentos on genAsiSegmentos.Segmento_Id=genSegmentos.genSegmentos
Inner Join stkMoviCabe On stkMoviCabe.stkMoviCabe = stkEnTransito.stkMoviCabe
Inner Join stkSubTipoMov On stkSubTipoMov.SubTipoMov_Id = stkMoviCabe.SubTipoMov_Id
WHERE (stkEnTransito.stkMoviCabeEntr = @pstkMoviCabe)
go

--exec stkEntradasCDDatos 1,'STOCK',19,0,0,0,'E','0001','',''
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkEntradasEmbDatos.sql*/

-- stkEntradasEmbarqueDatos 1, 'STK',0,0,0,0,' ',' ',' ',' ','EMB',2,0,0,0,'0004',' ',' ',' ', 'E0001E'
-- stkEntradasEmbarqueDatos 1, 'STOCK',82,0,0,0,'E','0002',' ',' ','EMB',0,0,0,0,' ',' ',' ',' ', ' '


Drop procedure stkEntradasEmbarqueDatos
Go
Create procedure stkEntradasEmbarqueDatos
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20),
@pSegmento_Id_Emb VarChar(10), 
@pSegmento1N_Emb int,
@pSegmento2N_Emb int,
@pSegmento3N_Emb int,
@pSegmento4N_Emb int,
@pSegmento1C_Emb VarChar(20),
@pSegmento2C_Emb VarChar(20),
@pSegmento3C_Emb VarChar(20),
@pSegmento4C_Emb VarChar(20),
@pProveed_Id varChar(25)
)
AS
Declare @pstkMoviCabe bigint = (Select Asiento_id
 From genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and 
	genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C )

SELECT stkMoviCabe.stkMoviCabe,
	genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C, Cast(0 As Bit) DistribuyeContrapartida,
	conAsientos.Posteado, conAsientos.Fecha, conAsientos.FechaRegistro, 
	conAsientos.Cambio,conAsientos.CambioMonedaOriginal, 
	conAsientos.Anulado, conAsientos.Observaciones,  disFormularios.Formulario_Id Formulario,
	genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas,
	stkSubTipoMov.SubTipoMov_Id, stkSubTipoMov.Descripcion as DescripcionSubTipoMov, 
	stkMoviCabe.ModificaCosto, 	stkMoviCabe.Signo, stkSubTipoMov.Tipomov, ' ' as Proveed_Id, ' ' Cliente_Id
FROM stkMoviCabe 
INNER JOIN conAsientos  ON (conAsientos.conAsientos = stkMoviCabe.stkMoviCabe)
INNER JOIN stkSubTipoMov  ON (stkSubTipoMov.SubTipoMov_Id = stkMoviCabe.SubTipoMov_Id)
INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_id
Inner Join disFormularios On disFormularios.disFormularios = conAsientos.Formulario_Id
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_id = stkMoviCabe.stkMoviCabe
INNER JOIN genSegmentos ON genAsiSegmentos.Segmento_id = genSegmentos.genSegmentos
WHERE (stkMoviCabe = @pstkMoviCabe)


-- Busco el cuerpo de un movimiento ya existente --
SELECT stkMoviCuerpo.stkMoviCabe, stkMoviCuerpo.Renglon, stkMoviOC.Renglon_OC RenglonReferencia, stkMoviCuerpo.Fecha,
	stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos, stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos,
	stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, stkMoviCuerpo.Factor, stkMoviCuerpo.Cantidad,
	stkMoviCuerpo.CantidadForm, stkMoviCuerpo.CostoUnitario, stkMoviCuerpo.PrecioOriginal,
	stkMedidaAlterna.Medida_Id MedidaAlterna, stkMedidaAlterna.Descripcion as DescripcionMedidaAlterna,
	stkMoviCuerpo.CantidadAlternaForm,
	stkMoviCuerpo.Observaciones, stkMoviCuerpo.Descuento, stkMoviCuerpo.conRenglonDebe, 
	conCuentasDebe.Cuenta_Id as CuentaDebe, conCuentasDebe.Descripcion as DescripcionCuentaDebe,
	conCentro1Debe.Centro1_id as Centro1Debe, conCentro1Debe.Descripcion as DescripcionCentro1Debe,
	conCentro2Debe.Centro2_id as Centro2Debe, conCentro2Debe.Descripcion as DescripcionCentro2Debe,
	conMovContDebe.Clase as ClaseDebe, conMovContDebe.Importe as ImporteContableDebe, 
	stkMoviCuerpo.conRenglonHaber, 
	conCuentasHaber.Cuenta_id as CuentaHaber, conCuentasHaber.Descripcion as DescripcionCuentaHaber,
	conCentro1Haber.Centro1_id as Centro1Haber, conCentro1Haber.Descripcion as DescripcionCentro1Haber,
	conCentro2Haber.Centro2_id as Centro2Haber, conCentro2Haber.Descripcion as DescripcionCentro2Haber,
	conMovContHaber.Clase as ClaseHaber, conMovContDebe.Importe as ImporteContableHaber, comDespachos.Despacho_Id,
	stkMoviOc.comOrdenComp,
	stkMoviCuerpo.Cantidad*0 CantidadEmb, comEmbCuerpo.CantidadOriginal CantidadOriginalEmb, stkMoviCuerpo.Cantidad*0 CantidadRecibidaEmb,
	stkMoviCuerpo.CostoUnitario PrecioSinGastos,  '' PegarSeries
FROM stkMoviCuerpo 
INNER JOIN stkMoviCabe  ON (stkMoviCabe.stkMoviCabe = stkMoviCuerpo.stkMoviCabe)
Inner JOIN stkDepositos  ON (stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id)
Inner JOIN stkProductos  ON (stkProductos.stkProductos = stkMoviCuerpo.Producto_Id)
Inner JOIN stkUniMed  ON (stkUniMed.stkUniMed = stkMoviCuerpo.Medida_Id)
INNER JOIN conMovCont as conMovContDebe ON conMovContDebe.conAsientos = stkMoviCuerpo.stkMoviCabe And
	conMovContDebe.Renglon = stkMoviCuerpo.conRenglonDebe
INNER JOIN conCuentas as conCuentasDebe ON conCuentasDebe.conCuentas = conMovContDebe.cuenta_id 
LEFT JOIN conCentro1 as conCentro1Debe ON conCentro1Debe.conCentro1 = conMovContDebe.Centro1_id
LEFT JOIN conCentro2  as conCentro2Debe ON conCentro2Debe.conCentro2 = conMovContDebe.Centro2_id
INNER JOIN conMovCont as conMovContHaber ON conMovContHaber.conAsientos = stkMoviCuerpo.stkMoviCabe And
	conMovContHaber.Renglon = stkMoviCuerpo.conRenglonHaber
INNER JOIN conCuentas as conCuentasHaber ON conCuentasHaber.conCuentas = conMovContHaber.cuenta_id 
LEFT JOIN conCentro1 as conCentro1Haber ON conCentro1Haber.conCentro1 = conMovContHaber.Centro1_id
LEFT JOIN conCentro2  as conCentro2Haber ON conCentro2Haber.conCentro2 = conMovContHaber.Centro2_id
LEFT JOIN stkUniMed stkMedidaAlterna ON stkMedidaAlterna.stkUniMed = stkMoviCuerpo.MedidaAlterna
Left Join stkMoviDespa On stkMoviDespa.stkMoviCabe = stkMoviCuerpo.stkMoviCabe And stkMoviDespa.Renglon = stkMoviCuerpo.Renglon
Left Join comDespachos On comDespachos.comDespachos = stkMoviDespa.Despacho_Id
Inner Join stkMoviEmbarque On stkMoviEmbarque.stkMoviCabe = stkMoviCabe.stkMoviCabe
Inner Join stkMoviOC On stkMoviOC.stkMoviCabe = stkMoviCabe.stkMoviCabe And stkMoviOC.Renglon = stkMoviCuerpo.Renglon
Inner Join comEmbCuerpo On comEmbCuerpo.comOrdenComp = stkMoviOC.comOrdenComp And 
	comEmbCuerpo.Renglon_OC = stkMoviOC.Renglon_OC and 
	comEmbCuerpo.comEmbarques = stkMoviEmbarque.comEmbarques
WHERE stkMoviCuerpo.stkMoviCabe = @pstkMoviCabe
union all
-- Armo el cuerpo seg?n el cuerpo pendiente de la OE --
SELECT Cast(0 As bigint) stkMoviCabe, 
	Cast(ROW_NUMBER() OVER( ORDER BY comOrdenComp.comOrdenComp, comEmbCuerpo.Renglon_OC) as int) - 1 Renglon, 
	comEmbCuerpo.Renglon_OC RenglonReferencia, comOCCuerpo.Fecha_Entrega Fecha,
	stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos, stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos,
	stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, comOCArticulo.Factor, comOcCuerpo.Cantidad*0 Cantidad,
	0 CantidadForm, comEmbCuerpo.PrecioCalculado CostoUnitario, comEmbCuerpo.PrecioCalculadoOriginal as PrecioOriginal,
	stkMedidaAlterna.Medida_Id MedidaAlterna, stkMedidaAlterna.Descripcion as DescripcionMedidaAlterna,
	comOCCuerpo.Cantidad*0 CantidadAlternaForm,
	'' Observaciones, 0 Descuento, 0 conRenglonDebe, 
	conCuentasDebe.Cuenta_Id as CuentaDebe, conCuentasDebe.Descripcion as DescripcionCuentaDebe,
	conCentro1Debe.Centro1_id as Centro1Debe, conCentro1Debe.Descripcion as DescripcionCentro1Debe,
	conCentro2Debe.Centro2_id as Centro2Debe, conCentro2Debe.Descripcion as DescripcionCentro2Debe,
	'' ClaseDebe, 0 ImporteContableDebe, 0 conRenglonHaber, 
	'' CuentaHaber, '' DescripcionCuentaHaber, '' Centro1Haber, '' DescripcionCentro1Haber,
	'' Centro2Haber, '' DescripcionCentro2Haber, '' ClaseHaber, 0 ImporteContableHaber, '' Despacho_Id,
	comOrdenComp.comOrdenComp, 
	comEmbCuerpo.Cantidad CantidadEmb, comEmbCuerpo.CantidadOriginal CantidadOriginalEmb, comEmbCuerpo.CantidadRecibida CantidadRecibidaEmb, 
	comOCCuerpo.Precio PrecioSinGastos, '' PegarSeries
FROM comEmbCuerpo
Inner Join comOrdenComp On comOrdenComp.comOrdenComp = comEmbCuerpo.comOrdenComp
Inner Join comOcCuerpo On comOCCuerpo.comOrdenComp = comEmbCuerpo.comOrdenComp And comOCCuerpo.Renglon_OC = comEmbCuerpo.Renglon_OC
Inner Join comOCArticulo On comOCArticulo.comOrdenComp = comOCCuerpo.comOrdenComp And comOCArticulo.Renglon_OC = comOCCuerpo.Renglon_OC
Inner JOIN stkDepositos ON stkDepositos.stkDepositos = comOCArticulo.Deposito_Id
Inner JOIN stkProductos ON stkProductos.stkProductos = comOCArticulo.Producto_Id
Inner JOIN stkUniMed ON stkUniMed.stkUniMed = comOCCuerpo.Medida_Id
INNER JOIN conCuentas as conCuentasDebe ON conCuentasDebe.conCuentas = stkProductos.CtaCompra
LEFT JOIN conCentro1 as conCentro1Debe ON conCentro1Debe.conCentro1 = comOCCuerpo.Centro1_id
LEFT JOIN conCentro2 as conCentro2Debe ON conCentro2Debe.conCentro2 = comOCCuerpo.Centro2_id
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = comEmbCuerpo.comEmbarques
Left Join stkUniMed stkMedidaAlterna ON stkMedidaAlterna.stkUniMed = stkProductos.MedidaAlterna
WHERE 
comOrdenComp.Proveed_Id = dbo.FuncFKcomProveedores(@pProveed_Id) And
comEmbCuerpo.Cantidad > comEmbCuerpo.CantidadRecibida And 
genAsiSegmentos.Empresa_Id = @pEmpresa_id And 
genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id_Emb) And
genAsiSegmentos.Segmento1N = @pSegmento1N_Emb And
genAsiSegmentos.Segmento2N = @pSegmento2N_Emb And
genAsiSegmentos.Segmento3N = @pSegmento3N_Emb And
genAsiSegmentos.Segmento4N = @pSegmento4N_Emb And
genAsiSegmentos.Segmento1C = @pSegmento1C_Emb And
genAsiSegmentos.Segmento2C = @pSegmento2C_Emb And 
genAsiSegmentos.Segmento3C = @pSegmento3C_Emb And 
genAsiSegmentos.Segmento4C = @pSegmento4C_Emb and 
@pstkMoviCabe IS NULL
ORDER BY 2

Select genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C, comProveedores.Proveed_Id, comProveedores.RazonSocial,
	stkMoviEmbarque.RemitoProv, comDespachos.Despacho_Id
From stkMoviEmbarque
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = stkMoviEmbarque.comEmbarques
Inner Join genSegmentos On genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
Inner Join comProveedores On comProveedores.genEntidades = stkMoviEmbarque.Proveed_Id
Inner Join comDespachos On comDespachos.comDespachos = stkMoviEmbarque.Despacho_Id
Where stkMoviEmbarque.stkMoviCabe = @pstkMoviCabe

Exec genAtributosGeneralesIdentityDatos @pstkMoviCabe, 'stkMoviCabe' 

Exec stkMoviSerieDatos @pstkMoviCabe

Exec stkMoviDespaDatos @pstkMoviCabe

-- V2
Exec stkMoviUbicacionDatos @pstkMoviCabe

Go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkEntradasOcDatos.sql*/
-- stkEntradasOcDatos 1, 'STK',0,0,0,0,' ',' ',' ',' ','OC',3,0,0,0,'0002',' ',' ',' '

DROP PROCEDURE stkEntradasOcDatos
GO
CREATE PROCEDURE stkEntradasOcDatos
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20),
@pSegmento_Id_OC VarChar(10), 
@pSegmento1N_OC int,
@pSegmento2N_OC int,
@pSegmento3N_OC int,
@pSegmento4N_OC int,
@pSegmento1C_OC VarChar(20),
@pSegmento2C_OC VarChar(20),
@pSegmento3C_OC VarChar(20),
@pSegmento4C_OC VarChar(20)

)
AS
SET NOCOUNT ON 

DECLARE @pstkMoviCabe bigint

SET @pstkMoviCabe = (
SELECT Asiento_id from genAsiSegmentos where
	Empresa_Id = @pEmpresa_id and 
	Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_id) and
	Segmento1N =@pSegmento1N and
	Segmento2N = @pSegmento2N and
	Segmento3N = @pSegmento3N and
	Segmento4N = @pSegmento4N and
	Segmento1C = @pSegmento1C and
	Segmento2C = @pSegmento2C and 
	Segmento3C = @pSegmento3C and 
	Segmento4C = @pSegmento4C )



	
SELECT stkMoviCabe.stkMoviCabe,
	genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C, Cast(0 As Bit) DistribuyeContrapartida,
	conAsientos.Posteado, conAsientos.Fecha, conAsientos.FechaRegistro, 
	conAsientos.Cambio,conAsientos.CambioMonedaOriginal, 
	conAsientos.Anulado, conAsientos.Observaciones,  disFormularios.Formulario_Id Formulario,
	genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas,
	stkSubTipoMov.SubTipoMov_Id, stkSubTipoMov.Descripcion as DescripcionSubTipoMov, 
	stkMoviCabe.ModificaCosto, 	stkMoviCabe.Signo, stkSubTipoMov.Tipomov, ' ' as Proveed_Id, 
			genSucursalesEmpr.Sucursal
FROM stkMoviCabe 
INNER JOIN conAsientos  ON (conAsientos.conAsientos = stkMoviCabe.stkMoviCabe)
INNER JOIN stkSubTipoMov  ON (stkSubTipoMov.SubTipoMov_Id = stkMoviCabe.SubTipoMov_Id)
INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_id
Inner Join disFormularios On disFormularios.disFormularios = conAsientos.Formulario_Id
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_id = stkMoviCabe.stkMoviCabe
INNER JOIN genSegmentos ON genAsiSegmentos.Segmento_id = genSegmentos.genSegmentos
INNER JOIN genSucursalesEmpr ON genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
WHERE (stkMoviCabe = @pstkMoviCabe)


if @pstkMoviCabe is null
BEGIN
-- Traigo el pendiente de recepci?n de la OC --
SELECT comOCSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
	comOCSegmentos.Segmento1N, comOCSegmentos.Segmento2N,
	comOCSegmentos.Segmento3N, comOCSegmentos.Segmento4N,
	comOCSegmentos.Segmento1C, comOCSegmentos.Segmento2C,
	comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C,
	comOrdenComp.Fecha, comProveedores.Proveed_Id, comProveedores.RazonSocial, 
	genMonedas.Moneda_Id

From comOCSegmentos 
INNER JOIN comOrdenComp on comOCSegmentos.comOrdenComp = comOrdenComp.comOrdenComp
INNER JOIN comProveedores ON comProveedores.genEntidades = comOrdenComp.Proveed_id
INNER JOIN genMonedas ON genMonedas.genMonedas = comOrdenComp.Moneda_Id
INNER JOIN genSegmentos	ON genSegmentos.genSegmentos = comOCSegmentos.Segmento_Id
WHERE 
	
	comOCSegmentos.Empresa_Id =@pEmpresa_id and 
	comOCSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_id_OC) and
	comOCSegmentos.Segmento1N =@pSegmento1N_OC and
	comOCSegmentos.Segmento2N = @pSegmento2N_OC and
	comOCSegmentos.Segmento3N = @pSegmento3N_OC and
	comOCSegmentos.Segmento4N = @pSegmento4N_OC and
	comOCSegmentos.Segmento1C = @pSegmento1C_OC and
	comOCSegmentos.Segmento2C = @pSegmento2C_OC and 
	comOCSegmentos.Segmento3C = @pSegmento3C_OC and 
	comOCSegmentos.Segmento4C = @pSegmento4C_OC 
ORDER BY 2




SELECT Convert(bigint, 0) AS stkMoviCabe, comOCCuerpo.Renglon_OC Renglon, 0 RenglonReferencia, 
	comOCCuerpo.Fecha_Entrega Fecha,
	stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos, 
	stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos,
	stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, 
	comOCArticulo.Factor, comOCCuerpo.Cantidad*0 as Cantidad,
	comOCCuerpo.Cantidad*0 as CantidadForm, comOcCuerpo.Precio as CostoUnitario, 
	comOCArticulo.PrecioOriginal, stkMedidaAlterna.Medida_Id MedidaAlterna, 
	stkMedidaAlterna.Descripcion DescripcionMedidaAlterna,
	comOCCuerpo.Cantidad*0 As CantidadAlternaForm, ' ' Observaciones, 0.00 as Descuento, 0 as conRenglonDebe, 
	conCuentasDebe.Cuenta_Id as CuentaDebe, conCuentasDebe.Descripcion as DescripcionCuentaDebe,
	conCentro1Debe.Centro1_Id as Centro1Debe, conCentro1Debe.Descripcion as DescripcionCentro1Debe,
	conCentro2Debe.Centro2_Id as Centro2Debe, conCentro2Debe.Descripcion as DescripcionCentro2Debe,
	' ' as ClaseDebe, comOCCuerpo.Precio*0  as ImporteContableDebe, 
	0 as conRenglonHaber, 
	conCuentasHaber.Cuenta_Id as CuentaHaber, conCuentasHaber.Descripcion as DescripcionCuentaHaber,
	' ' as Centro1Haber, ' ' as DescripcionCentro1Haber,
	' ' as Centro2Haber, ' ' as DescripcionCentro2Haber,
	' '  as ClaseHaber, comOCCuerpo.Precio*0 as ImporteContableHaber, 
	comOcCuerpo.Renglon_oc, comOcArticulo.CantidadOriginal as CantidadOC, case when stkDepositos.consCompra_Venta=1 then comOCCuerpo.CantidadConsignada else comOCCuerpo.Cantidad_Recibida end as Cantidad_Recibida, 
	comOcCuerpo.Precio, '' Despacho_Id, comOCCuerpo.CantidadConsignada, '' as PegarSeries
FROM comOCSegmentos 
INNER JOIN comOcCuerpo ON comOCSegmentos.comOrdenComp = comOcCuerpo.comOrdenComp
INNER JOIN comOcArticulo ON comOcCuerpo.comOrdenComp = comOcArticulo.comOrdenComp and comOcCuerpo.Renglon_OC = comOcArticulo.Renglon_OC
INNER JOIN stkDepositos  ON (stkDepositos.stkDepositos = comOcArticulo.Deposito_Id)
INNER JOIN stkProductos  ON (stkProductos.stkProductos = comOcArticulo.Producto_Id)
INNER JOIN stkUniMed  ON (stkUniMed.stkUniMed = comOcCuerpo.Medida_Id)
Inner Join comOrdenComp On comOrdenComp.comOrdenComp = comOCSegmentos.comOrdenComp
Left Join genMonedas On genMonedas.genMonedas = comOrdenComp.Moneda_Id
INNER JOIN conCuentas as conCuentasDebe ON conCuentasDebe.conCuentas = stkProductos.CtaCompra
LEFT OUTER JOIN conCentro1 as conCentro1Debe ON conCentro1Debe.conCentro1 = comOcCuerpo.Centro1_id
LEFT OUTER JOIN conCentro2  as conCentro2Debe ON conCentro2Debe.conCentro2 = comOcCuerpo.Centro2_id
left outer Join conCuentas as conCuentasHaber ON conCuentasHaber.conCuentas = genMonedas.CtaFactaRecibir
Left Join stkUniMed stkMedidaAlterna On stkMedidaAlterna.stkUniMed = stkProductos.MedidaAlterna

WHERE 
	comOCCuerpo.Cantidad > case when stkDepositos.consCompra_Venta=1 then comOCCuerpo.CantidadConsignada else comOCCuerpo.Cantidad_Recibida end and 
	comOCCuerpo.Pendiente = 1 and 
	comOCSegmentos.Empresa_Id =@pEmpresa_id and 
	comOCSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_id_OC) and
	comOCSegmentos.Segmento1N =@pSegmento1N_OC and
	comOCSegmentos.Segmento2N = @pSegmento2N_OC and
	comOCSegmentos.Segmento3N = @pSegmento3N_OC and
	comOCSegmentos.Segmento4N = @pSegmento4N_OC and
	comOCSegmentos.Segmento1C = @pSegmento1C_OC and
	comOCSegmentos.Segmento2C = @pSegmento2C_OC and 
	comOCSegmentos.Segmento3C = @pSegmento3C_OC and 
	comOCSegmentos.Segmento4C = @pSegmento4C_OC 
ORDER BY 2


END

ELSE
-- Cuerpo
-- Traigo el comprobante que se est? consultando --
BEGIN

SELECT comOCSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
	comOCSegmentos.Segmento1N, comOCSegmentos.Segmento2N,
	comOCSegmentos.Segmento3N, comOCSegmentos.Segmento4N,
	comOCSegmentos.Segmento1C, comOCSegmentos.Segmento2C,
	comOCSegmentos.Segmento3C, comOCSegmentos.Segmento4C,
	comOrdenComp.Fecha, comProveedores.Proveed_Id, comProveedores.RazonSocial, 
	genMonedas.Moneda_Id

From comOCSegmentos 
INNER JOIN comOrdenComp on comOCSegmentos.comOrdenComp = comOrdenComp.comOrdenComp
INNER JOIN comProveedores ON comProveedores.genEntidades = comOrdenComp.Proveed_id
INNER JOIN genMonedas ON genMonedas.genMonedas = comOrdenComp.Moneda_Id
INNER JOIN genSegmentos	ON genSegmentos.genSegmentos = comOCSegmentos.Segmento_Id


WHERE 
	Exists(select 1 from stkmovioc where
		stkmovioc.stkMoviCabe = @pstkMoviCabe and 
		stkmovioc.comOrdenComp =	comOrdenComp.comOrdenComp) or
	Exists(select 1 from stkMoviConsigna Where
		stkMoviConsigna.stkMoviCabe = @pstkMoviCabe and 
		stkMoviConsigna.comOrdenComp =	comOrdenComp.comOrdenComp) 
ORDER BY 2


SELECT stkMoviCuerpo.stkMoviCabe, stkMoviCuerpo.Renglon, 0 RenglonReferencia, stkMoviCuerpo.Fecha,
	stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos, stkProductos.Producto_Id, 
	stkProductos.Descripcion as DescripcionProductos,
	stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, stkMoviCuerpo.Factor, stkMoviCuerpo.Cantidad,
	stkMoviCuerpo.CantidadForm, stkMoviCuerpo.CostoUnitario, stkMoviCuerpo.PrecioOriginal,
	stkMedidaAlterna.Medida_Id MedidaAlterna, stkMedidaAlterna.Descripcion DescripcionMedidaAlterna,
	stkMoviCuerpo.CantidadalternaForm, stkMoviCuerpo.Observaciones, stkMoviCuerpo.Descuento, 
	stkMoviCuerpo.conRenglonDebe, 
	conCuentasDebe.Cuenta_Id as CuentaDebe, conCuentasDebe.Descripcion as DescripcionCuentaDebe,
	conCentro1Debe.Centro1_Id as Centro1Debe, conCentro1Debe.Descripcion as DescripcionCentro1Debe,
	conCentro2Debe.Centro2_Id as Centro2Debe, conCentro2Debe.Descripcion as DescripcionCentro2Debe,
	conMovContDebe.Clase as ClaseDebe, conMovContDebe.Importe as ImporteContableDebe, 
	stkMoviCuerpo.conRenglonHaber, 
	conCuentasHaber.Cuenta_Id as CuentaHaber, conCuentasHaber.Descripcion as DescripcionCuentaHaber,
	conCentro1Haber.Centro1_id as Centro1Haber, conCentro1Haber.Descripcion as DescripcionCentro1Haber,
	conCentro2Haber.Centro2_id as Centro2Haber, conCentro2Haber.Descripcion as DescripcionCentro2Haber,
	conMovContHaber.Clase as ClaseHaber, conMovContDebe.Importe as ImporteContableHaber , 
	stkMoviOC.Renglon_oc Renglon_oc, 
	comOCArticulo.CantidadOriginal as CantidadOC, 
	isNull(case when stkDepositos.consCompra_Venta=1 then comOCCuerpo.CantidadConsignada else comOCCuerpo.Cantidad_Recibida end, 0) Cantidad_Recibida, 
	comOcCuerpo.Precio  as Precio, comDespachos.Despacho_Id, 
	comOCCuerpo.CantidadConsignada CantidadConsignada, '' as PegarSerie
FROM stkMoviCabe 
INNER JOIN stkMoviCuerpo ON (stkMoviCabe.stkMoviCabe = stkMoviCuerpo.stkMoviCabe) 
Left JOIN (stkMoviOC
INNER JOIN comOcCuerpo ON comOcCuerpo.comOrdenComp = stkMoviOC.comOrdenComp and comOcCuerpo.Renglon_OC = stkMoviOC.Renglon_oc
Inner Join comOCArticulo On comOCArticulo.comOrdenComp = stkMoviOC.comOrdenComp And comOCArticulo.Renglon_OC = stkMoviOC.Renglon_OC)
	  ON stkMoviOC.stkMoviCabe = stkMoviCuerpo.stkMoviCabe and stkMoviOC.Renglon = stkMoviCuerpo.Renglon
LEFT JOIN stkDepositos  ON (stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id)
LEFT JOIN stkProductos  ON (stkProductos.stkProductos = stkMoviCuerpo.Producto_Id)
LEFT JOIN stkUniMed  ON (stkUniMed.stkUniMed = stkMoviCuerpo.Medida_Id)
INNER JOIN conMovCont  ON (conMovCont.conAsientos = stkMoviCuerpo.stkMoviCabe) AND (conMovCont.Renglon = stkMoviCuerpo.conRenglonDebe)
INNER JOIN conMovCont conMovCont2 ON (conMovCont2.conAsientos = stkMoviCuerpo.stkMoviCabe) AND (conMovCont2.Renglon = stkMoviCuerpo.conRenglonHaber)
INNER JOIN conMovCont as conMovContDebe ON conMovContDebe.conAsientos = stkMoviCuerpo.stkMoviCabe And
	conMovContDebe.Renglon = stkMoviCuerpo.conRenglonDebe
INNER JOIN conCuentas as conCuentasDebe ON conCuentasDebe.conCuentas = conMovContDebe.cuenta_id 
LEFT OUTER  JOIN conCentro1 as conCentro1Debe ON conCentro1Debe.conCentro1 = conMovContDebe.Centro1_id
LEFT OUTER  JOIN conCentro2  as conCentro2Debe ON conCentro2Debe.conCentro2 = conMovContDebe.Centro2_id
INNER JOIN conMovCont as conMovContHaber ON conMovContHaber.conAsientos = stkMoviCuerpo.stkMoviCabe And
	conMovContHaber.Renglon = stkMoviCuerpo.conRenglonHaber
INNER JOIN conCuentas as conCuentasHaber ON conCuentasHaber.conCuentas = conMovContHaber.cuenta_id 
LEFT OUTER JOIN conCentro1 as conCentro1Haber ON conCentro1Haber.conCentro1 = conMovContHaber.Centro1_id
LEFT OUTER JOIN conCentro2  as conCentro2Haber ON conCentro2Haber.conCentro2 = conMovContHaber.Centro2_id
Left Join stkUniMed stkMedidaAlterna On stkMedidaAlterna.stkUniMed = stkMoviCuerpo.MedidaAlterna
left join (stkMoviDespa  INNER JOIN comDespachos ON stkMoviDespa.Despacho_Id = comDespachos.comDespachos) ON 
	stkMoviDespa.stkMoviCabe = stkMoviCuerpo.stkMoviCabe AND 
	stkMoviDespa.Renglon = stkMoviCuerpo.Renglon

WHERE (stkMoviCuerpo.stkMoviCabe = @pstkMoviCabe)
ORDER BY 2
END


Exec genAtributosGeneralesIdentityDatos @pstkMoviCabe, 'stkMoviCabe' 

Exec stkMoviSerieDatos @pstkMoviCabe

Exec stkMoviDespaDatos @pstkMoviCabe

SELECT RemitoProv, FechaRemito 
	FROM stkMoviProv
	Where
	 stkMoviCabe = @pstkMoviCabe

Exec stkMoviUbicacionDatos @pstkMoviCabe
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkEntradasRIDatos.sql*/
-- stkEntradasRIDatos 1,'STOCK', 0,0,0,0,' ',' ',' ',' ','REQIN',1,0,0,0,'0001',' ',' ',' '


drop procedure stkEntradasRIDatos
go
create procedure stkEntradasRIDatos
(
@pEmpresa_id int, 
@pSegmento_id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20), 
@pSegmento_id_RI VarChar(10), 
@pSegmento1N_RI int,
@pSegmento2N_RI int,
@pSegmento3N_RI int,
@pSegmento4N_RI int,
@pSegmento1C_RI VarChar(20),
@pSegmento2C_RI VarChar(20),
@pSegmento3C_RI VarChar(20),
@pSegmento4C_RI VarChar(20)
)
AS
SET NOCOUNT ON 

DECLARE @pstkMoviCabe bigint

SET @pstkMoviCabe = (
SELECT Asiento_id from genAsiSegmentos where
	Empresa_Id = @pEmpresa_id and 
	Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_id) and
	Segmento1N =@pSegmento1N and
	Segmento2N = @pSegmento2N and
	Segmento3N = @pSegmento3N and
	Segmento4N = @pSegmento4N and
	Segmento1C = @pSegmento1C and
	Segmento2C = @pSegmento2C and 
	Segmento3C = @pSegmento3C and 
	Segmento4C = @pSegmento4C )

SELECT stkMoviCabe.stkMoviCabe,
	genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C, Cast(0 As Bit) DistribuyeContrapartida,
	conAsientos.Posteado, conAsientos.Fecha, conAsientos.FechaRegistro, 
	conAsientos.Cambio,conAsientos.CambioMonedaOriginal, 
	conAsientos.Anulado, conAsientos.Observaciones,  disFormularios.Formulario_Id Formulario,
	genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas,
	stkSubTipoMov.SubTipoMov_Id, stkSubTipoMov.Descripcion as DescripcionSubTipoMov, 
	stkMoviCabe.ModificaCosto, 	stkMoviCabe.Signo, stkSubTipoMov.Tipomov, ' ' as Proveed_Id
FROM stkMoviCabe 
INNER JOIN conAsientos  ON (conAsientos.conAsientos = stkMoviCabe.stkMoviCabe)
INNER JOIN stkSubTipoMov  ON (stkSubTipoMov.SubTipoMov_Id = stkMoviCabe.SubTipoMov_Id)
INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_id
Inner Join disFormularios On disFormularios.disFormularios = conAsientos.Formulario_Id
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_id = stkMoviCabe.stkMoviCabe
INNER JOIN genSegmentos ON genAsiSegmentos.Segmento_id = genSegmentos.genSegmentos
WHERE (stkMoviCabe = @pstkMoviCabe)


if @pstkMoviCabe is null
BEGIN
-- Traigo el Entregado de la RI --
SELECT comRISegmento.Empresa_Id, genSegmentos.Segmento_Id, 
	comRISegmento.Segmento1N, comRISegmento.Segmento2N,
	comRISegmento.Segmento3N, comRISegmento.Segmento4N,
	comRISegmento.Segmento1C, comRISegmento.Segmento2C,
	comRISegmento.Segmento3C, comRISegmento.Segmento4C,
	comReqInterno.Fecha, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres 
	
From comRISegmento 
INNER JOIN comReqInterno on comRISegmento.comReqInterno = comReqInterno.comReqInterno
INNER JOIN genSegmentos	ON genSegmentos.genSegmentos = comRISegmento.Segmento_Id
INNER JOIN genUsuarios ON genUsuarios.genUsuarios = comReqInterno.Usuario_Id
WHERE 
	
	comRISegmento.Empresa_Id =@pEmpresa_id and 
	genSegmentos.Segmento_Id = @pSegmento_id_RI and
	comRISegmento.Segmento1N =@pSegmento1N_RI and
	comRISegmento.Segmento2N = @pSegmento2N_RI and
	comRISegmento.Segmento3N = @pSegmento3N_RI and
	comRISegmento.Segmento4N = @pSegmento4N_RI and
	comRISegmento.Segmento1C = @pSegmento1C_RI and
	comRISegmento.Segmento2C = @pSegmento2C_RI and 
	comRISegmento.Segmento2C = @pSegmento2C_RI and 
	comRISegmento.Segmento3C = @pSegmento3C_RI and 
	comRISegmento.Segmento4C = @pSegmento4C_RI 
ORDER BY 2




SELECT Convert(bigint, 0) AS stkMoviCabe, comRICuerpo.Renglon_RI Renglon, 0 RenglonReferencia, 
	comRICuerpo.FechaNecesidad Fecha,
	stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos, 
	stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos,
	stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, 
	comRIArticulo.Factor, 0.00 as Cantidad, 	0.00  as CantidadForm, 
	comRICuerpo.Precio as CostoUnitario, 
	comRIArticulo.PrecioOriginal, stkMedidaAlterna.Medida_Id MedidaAlterna, 
	stkMedidaAlterna.Descripcion DescripcionMedidaAlterna,
	comRICuerpo.Cantidad*0 As CantidadAlternaForm, ' ' Observaciones, 0.00 as Descuento, 0 as conRenglonDebe, 
	conCuentasDebe.Cuenta_Id as CuentaDebe, conCuentasDebe.Descripcion as DescripcionCuentaDebe,
	' ' as Centro1Debe, ' ' as DescripcionCentro1Debe,
	' ' as Centro2Debe, ' ' as DescripcionCentro2Debe,
	' ' as ClaseDebe, comRICuerpo.Precio*0  as ImporteContableDebe, 
	0 as conRenglonHaber, 
	conCuentasHaber.Cuenta_Id as CuentaHaber, conCuentasHaber.Descripcion as DescripcionCuentaHaber,
	conCentro1Haber.Centro1_Id  as Centro1Haber, conCentro1Haber.Descripcion as DescripcionCentro1Haber,
	conCentro2Haber.Centro2_Id as Centro2Haber, conCentro2Haber.Descripcion as DescripcionCentro2Haber,
	' '  as ClaseHaber, comRICuerpo.Precio*0 as ImporteContableHaber, 
	comRICuerpo.Renglon_RI, comRIArticulo.CantidadOriginal as CantidadRI, comRICuerpo.CantidadRecibida, 
	comRICuerpo.Precio, '' Despacho_Id
FROM comRISegmento 
INNER JOIN comRICuerpo ON comRISegmento.comReqInterno = comRICuerpo.comReqInterno
INNER JOIN comRIArticulo ON comRICuerpo.comReqInterno = comRIArticulo.comReqInterno and comRICuerpo.Renglon_RI = comRIArticulo.Renglon_RI
INNER JOIN stkDepositos  ON (stkDepositos.stkDepositos = comRIArticulo.Deposito_Id)
INNER JOIN stkProductos  ON (stkProductos.stkProductos = comRIArticulo.Producto_Id)
INNER JOIN stkUniMed  ON (stkUniMed.stkUniMed = comRICuerpo.Medida_Id)
Inner Join comReqInterno On comReqInterno.comReqInterno = comRISegmento.comReqInterno
INNER JOIN conCuentas as conCuentasDebe ON conCuentasDebe.conCuentas = stkProductos.CtaCompra
LEFT OUTER JOIN conCentro1 as conCentro1Haber ON conCentro1Haber.conCentro1 = comRICuerpo.Centro1_id
LEFT OUTER JOIN conCentro2  as conCentro2Haber ON conCentro2Haber.conCentro2 = comRICuerpo.Centro2_id
left outer Join conCuentas as conCuentasHaber ON stkProductos.CtaConsumo = conCuentasHaber.conCuentas
Left Join stkUniMed stkMedidaAlterna On stkMedidaAlterna.stkUniMed = stkProductos.MedidaAlterna
left JOIN stkArtiUM on
stkArtiUM.Producto_Id = stkProductos.stkProductos and 
stkArtiUM.Medida_Id = comRICuerpo.Medida_Id
WHERE 
	comRICuerpo.CantidadRecibida > 0 and 
	comRISegmento.Empresa_Id =@pEmpresa_id and 
	comRISegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_id_RI) and
	comRISegmento.Segmento1N =@pSegmento1N_RI and
	comRISegmento.Segmento2N = @pSegmento2N_RI and
	comRISegmento.Segmento3N = @pSegmento3N_RI and
	comRISegmento.Segmento4N = @pSegmento4N_RI and
	comRISegmento.Segmento1C = @pSegmento1C_RI and
	comRISegmento.Segmento2C = @pSegmento2C_RI and 
	comRISegmento.Segmento3C = @pSegmento3C_RI and 
	comRISegmento.Segmento4C = @pSegmento4C_RI 
ORDER BY 2


END

ELSE
-- Cuerpo
-- Traigo el comprobante que se est? consultando --
BEGIN

SELECT comRISegmento.Empresa_Id, genSegmentos.Segmento_Id, 
	comRISegmento.Segmento1N, comRISegmento.Segmento2N,
	comRISegmento.Segmento3N, comRISegmento.Segmento4N,
	comRISegmento.Segmento1C, comRISegmento.Segmento2C,
	comRISegmento.Segmento3C, comRISegmento.Segmento4C,
	comReqInterno.Fecha, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres 

From comRISegmento 
INNER JOIN comReqInterno on comRISegmento.comReqInterno = comReqInterno.comReqInterno
INNER JOIN genSegmentos	ON genSegmentos.genSegmentos = comRISegmento.Segmento_Id
INNER JOIN genUsuarios ON genUsuarios.genUsuarios = comReqInterno.Usuario_Id


WHERE 
	Exists(select 1 from stkMoviRi where
		stkMoviRi.stkMoviCabe = @pstkMoviCabe and 
		stkMoviRi.comReqInterno =	comReqInterno.comReqInterno)
ORDER BY 2


SELECT stkMoviCuerpo.stkMoviCabe, stkMoviCuerpo.Renglon, 0 RenglonReferencia, stkMoviCuerpo.Fecha,
	stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos, stkProductos.Producto_Id, 
	stkProductos.Descripcion as DescripcionProductos,
	stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, stkMoviCuerpo.Factor, stkMoviCuerpo.Cantidad,
	stkMoviCuerpo.CantidadForm, stkMoviCuerpo.CostoUnitario, stkMoviCuerpo.PrecioOriginal,
	stkMedidaAlterna.Medida_Id MedidaAlterna, stkMedidaAlterna.Descripcion DescripcionMedidaAlterna,
	stkMoviCuerpo.CantidadalternaForm, stkMoviCuerpo.Observaciones, stkMoviCuerpo.Descuento, 
	stkMoviCuerpo.conRenglonDebe, 
	conCuentasDebe.Cuenta_Id as CuentaDebe, conCuentasDebe.Descripcion as DescripcionCuentaDebe,
	conCentro1Debe.Centro1_Id as Centro1Debe, conCentro1Debe.Descripcion as DescripcionCentro1Debe,
	conCentro2Debe.Centro2_Id as Centro2Debe, conCentro2Debe.Descripcion as DescripcionCentro2Debe,
	conMovContDebe.Clase as ClaseDebe, conMovContDebe.Importe as ImporteContableDebe, 
	stkMoviCuerpo.conRenglonHaber, 
	conCuentasHaber.Cuenta_Id as CuentaHaber, conCuentasHaber.Descripcion as DescripcionCuentaHaber,
	conCentro1Haber.Centro1_id as Centro1Haber, conCentro1Haber.Descripcion as DescripcionCentro1Haber,
	conCentro2Haber.Centro2_id as Centro2Haber, conCentro2Haber.Descripcion as DescripcionCentro2Haber,
	conMovContHaber.Clase as ClaseHaber, conMovContDebe.Importe as ImporteContableHaber , 
	stkMoviRi.Renglon_RI, comRIArticulo.CantidadOriginal as CantidadRI, isNull(comRICuerpo.CantidadRecibida, 0) Cantidad_Recibida, 
	comRICuerpo.Precio, comDespachos.Despacho_Id
FROM stkMoviCabe 
INNER JOIN stkMoviCuerpo ON (stkMoviCabe.stkMoviCabe = stkMoviCuerpo.stkMoviCabe) 
Left JOIN (stkMoviRi
INNER JOIN comRICuerpo ON comRICuerpo.comReqInterno = stkMoviRi.comReqInterno and comRICuerpo.Renglon_RI = stkMoviRi.Renglon_RI
Inner Join comRIArticulo On comRIArticulo.comReqInterno = stkMoviRi.comReqInterno And comRIArticulo.Renglon_RI = stkMoviRi.Renglon_RI)
	  ON stkMoviRi.stkMoviCabe = stkMoviCuerpo.stkMoviCabe and stkMoviRi.Renglon = stkMoviCuerpo.Renglon
LEFT JOIN stkDepositos  ON (stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id)
LEFT JOIN stkProductos  ON (stkProductos.stkProductos = stkMoviCuerpo.Producto_Id)
LEFT JOIN stkUniMed  ON (stkUniMed.stkUniMed = stkMoviCuerpo.Medida_Id)
INNER JOIN conMovCont  ON (conMovCont.conAsientos = stkMoviCuerpo.stkMoviCabe) AND (conMovCont.Renglon = stkMoviCuerpo.conRenglonDebe)
INNER JOIN conMovCont conMovCont2 ON (conMovCont2.conAsientos = stkMoviCuerpo.stkMoviCabe) AND (conMovCont2.Renglon = stkMoviCuerpo.conRenglonHaber)
INNER JOIN conMovCont as conMovContDebe ON conMovContDebe.conAsientos = stkMoviCuerpo.stkMoviCabe And
	conMovContDebe.Renglon = stkMoviCuerpo.conRenglonDebe
INNER JOIN conCuentas as conCuentasDebe ON conCuentasDebe.conCuentas = conMovContDebe.cuenta_id 
LEFT OUTER  JOIN conCentro1 as conCentro1Debe ON conCentro1Debe.conCentro1 = conMovContDebe.Centro1_id
LEFT OUTER  JOIN conCentro2  as conCentro2Debe ON conCentro2Debe.conCentro2 = conMovContDebe.Centro2_id
INNER JOIN conMovCont as conMovContHaber ON conMovContHaber.conAsientos = stkMoviCuerpo.stkMoviCabe And
	conMovContHaber.Renglon = stkMoviCuerpo.conRenglonHaber
INNER JOIN conCuentas as conCuentasHaber ON conCuentasHaber.conCuentas = conMovContHaber.cuenta_id 
LEFT OUTER JOIN conCentro1 as conCentro1Haber ON conCentro1Haber.conCentro1 = conMovContHaber.Centro1_id
LEFT OUTER JOIN conCentro2  as conCentro2Haber ON conCentro2Haber.conCentro2 = conMovContHaber.Centro2_id
Left Join stkUniMed stkMedidaAlterna On stkMedidaAlterna.stkUniMed = stkMoviCuerpo.MedidaAlterna
left join (stkMoviDespa  INNER JOIN comDespachos ON stkMoviDespa.Despacho_Id = comDespachos.comDespachos) ON 
	stkMoviDespa.stkMoviCabe = stkMoviCuerpo.stkMoviCabe AND 
	stkMoviDespa.Renglon = stkMoviCuerpo.Renglon
WHERE (stkMoviCuerpo.stkMoviCabe = @pstkMoviCabe)
ORDER BY 2
END


Exec genAtributosGeneralesIdentityDatos @pstkMoviCabe, 'stkMoviCabe' 

Exec stkMoviSerieDatos @pstkMoviCabe

Exec stkMoviDespaDatos @pstkMoviCabe

Exec stkMoviUbicacionDatos @pstkMoviCabe
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkEnTransito.sql*/
DROP PROCEDURE stkEnTransitoGuardar
GO
CREATE PROCEDURE stkEnTransitoGuardar
(
@pstkMoviCabe bigint,
@pstkMoviCabeEntr bigint = NULL,
@pDeposito_Id varchar(15)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkEnTransito WHERE (stkMoviCabe = @pstkMoviCabe)))
BEGIN 
	UPDATE stkEnTransito
	SET		stkMoviCabeEntr = @pstkMoviCabeEntr,
		Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id)
	WHERE (stkMoviCabe = @pstkMoviCabe)
END 
ELSE 
BEGIN 
	INSERT INTO stkEnTransito
	(
		stkMoviCabe,
		stkMoviCabeEntr,
		Deposito_Id
	)
	VALUES 
	(
		@pstkMoviCabe,
		@pstkMoviCabeEntr,
		dbo.FuncFKstkDepositos(@pDeposito_Id)
	)
END 

GO

DROP PROCEDURE stkEnTransitoDatos
GO
CREATE PROCEDURE stkEnTransitoDatos
(
@pstkMoviCabe bigint
)
AS
SET NOCOUNT ON 

SELECT stkEnTransito.stkMoviCabe, 
genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
genAsiSegmentosEntr.Segmento1N Segmento1NEntr, genAsiSegmentosEntr.Segmento2N Segmento2NEntr, 
genAsiSegmentosEntr.Segmento3N Segmento3NEntr, genAsiSegmentosEntr.Segmento4N Segmento4NEntr,
stkEnTransito.stkMoviCabeEntr,
genAsiSegmentosEntr.Segmento1C Segmento1CEntr, genAsiSegmentosEntr.Segmento2C Segmento2CEntr, 
genAsiSegmentosEntr.Segmento3C Segmento3CEntr, genAsiSegmentosEntr.Segmento4C Segmento4CEntr,
stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos
FROM stkEnTransito 
INNER JOIN genAsiSegmentos  ON (genAsiSegmentos.Asiento_id = stkEnTransito.stkMoviCabe)
LEFT JOIN genAsiSegmentos genAsiSegmentosEntr ON (genAsiSegmentosEntr.Asiento_id = stkEnTransito.stkMoviCabeEntr)
INNER JOIN stkDepositos  ON (stkDepositos.stkDepositos = stkEnTransito.Deposito_Id)
WHERE (stkEnTransito.stkMoviCabe = @pstkMoviCabe)
 
RETURN @@Error 

GO

DROP PROCEDURE stkEnTransitoDatosEntr
GO
CREATE PROCEDURE stkEnTransitoDatosEntr
(
@pstkMoviCabeEntr bigint
)
AS
SET NOCOUNT ON 

SELECT stkEnTransito.stkMoviCabe, 
genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
genAsiSegmentosEntr.Segmento1N Segmento1NEntr, genAsiSegmentosEntr.Segmento2N Segmento2NEntr, 
genAsiSegmentosEntr.Segmento3N Segmento3NEntr, genAsiSegmentosEntr.Segmento4N Segmento4NEntr,
stkEnTransito.stkMoviCabeEntr,
genAsiSegmentosEntr.Segmento1C Segmento1CEntr, genAsiSegmentosEntr.Segmento2C Segmento2CEntr, 
genAsiSegmentosEntr.Segmento3C Segmento3CEntr, genAsiSegmentosEntr.Segmento4C Segmento4CEntr,
stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos
FROM stkEnTransito 
INNER JOIN genAsiSegmentos  ON (genAsiSegmentos.Asiento_id = stkEnTransito.stkMoviCabe)
LEFT JOIN genAsiSegmentos genAsiSegmentosEntr ON (genAsiSegmentosEntr.Asiento_id = stkEnTransito.stkMoviCabeEntr)
INNER JOIN stkDepositos  ON (stkDepositos.stkDepositos = stkEnTransito.Deposito_Id)
WHERE (stkEnTransito.stkMoviCabeEntr = @pstkMoviCabeEntr)
 
RETURN @@Error 

GO

DROP PROCEDURE stkEnTransitoEliminar
GO
CREATE PROCEDURE stkEnTransitoEliminar
(
@pstkMoviCabe bigint
)
AS
SET NOCOUNT ON 

DELETE FROM stkEnTransito 
WHERE (stkMoviCabe = @pstkMoviCabe)
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkExistencia.sql*/
DROP PROCEDURE stkExistenciaSumar
GO
CREATE PROCEDURE stkExistenciaSumar
(
@pEmpresa_Id Int,
@pProducto_Id VarChar(25),
@pDeposito_Id VarChar(15),
@pCantidad qCantidadD8,
@pCantidadReservada qCantidadD8,
@pCantidadAlterna qCantidadD8
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkExistencia WHERE 
	Empresa_Id = @pEmpresa_Id And
	Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id) AND 
	Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id)))
	
BEGIN 
	UPDATE stkExistencia
	SET	Cantidad = Cantidad + @pCantidad,
		CantidadReservada = CantidadReservada  + @pCantidadReservada,
		CantidadAlterna = CantidadAlterna + @pCantidadAlterna
		WHERE Empresa_Id = @pEmpresa_Id And
			  Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id) AND 
			  Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id)
END 
ELSE 
BEGIN 
	INSERT INTO stkExistencia
	(
		Empresa_Id,
		Producto_Id,
		Deposito_Id,
		Cantidad,
		CantidadReservada,
		CantidadAlterna
	)
	VALUES 
	(
		@pEmpresa_Id,
		dbo.FuncFKstkProductos(@pProducto_Id),
		dbo.FuncFKstkDepositos(@pDeposito_Id),
		@pCantidad,
		@pCantidadReservada,
		@pCantidadAlterna
	)
END 

GO

DROP PROCEDURE stkExistenciaDatos
GO
CREATE PROCEDURE stkExistenciaDatos
(
@pEmpresa_Id Int,
@pProducto_Id VarChar(25),
@pDeposito_Id VarChar(15) = Null
)
AS
SET NOCOUNT ON 

SELECT stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos, 
	stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos,
	stkExistencia.Cantidad, stkExistencia.CantidadReservada, stkExistencia.CantidadAlterna
FROM stkExistencia 
INNER JOIN stkProductos  ON (stkProductos.stkProductos = stkExistencia.Producto_Id)
INNER JOIN stkDepositos  ON (stkDepositos.stkDepositos = stkExistencia.Deposito_Id)
WHERE stkExistencia.Empresa_Id = @pEmpresa_Id And stkProductos.Producto_Id = @pProducto_Id
AND stkDepositos.Deposito_Id = IsNull(@pDeposito_Id, stkDepositos.Deposito_Id)
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkExistenciaDespa.sql*/
DROP PROCEDURE stkExistenciaDespaSumar
GO
CREATE PROCEDURE stkExistenciaDespaSumar
(
@pProducto_Id varChar(25),
@pDeposito_Id varChar(15),
@pDespacho_Id varChar(20),
@pCantidad qCantidadD8,
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkExistenciaDespa 
	WHERE Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id) AND 
	Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id) AND 
	Despacho_Id = dbo.FuncFKcomDespachos(@pDespacho_Id) AND Empresa_Id = @pEmpresa_Id))
BEGIN 
	UPDATE stkExistenciaDespa
	SET	 Cantidad = Cantidad + @pCantidad,
		Empresa_Id = @pEmpresa_Id
	WHERE Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id) AND 
	Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id) AND 
	Despacho_Id = dbo.FuncFKcomDespachos(@pDespacho_Id) AND 
	Empresa_Id = @pEmpresa_Id
END 
ELSE 
BEGIN 
	INSERT INTO stkExistenciaDespa
	(
		Producto_Id,
		Deposito_Id,
		Despacho_Id,
		Cantidad,
		Empresa_Id
	)
	VALUES 
	(
		dbo.FuncFKstkProductos(@pProducto_Id),
		dbo.FuncFKstkDepositos(@pDeposito_Id),
		dbo.FuncFKcomDespachos(@pDespacho_Id),
		@pCantidad,
		@pEmpresa_Id
	)
END 

GO

DROP PROCEDURE stkExistenciaDespaDatos
GO
CREATE PROCEDURE stkExistenciaDespaDatos
(
@pProducto_Id varChar(25),
@pDeposito_Id varChar(15),
@pDespacho_Id varChar(20),
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 

SELECT stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos, comDespachos.Despacho_Id,
stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos,
	stkExistenciaDespa.Cantidad, stkExistenciaDespa.Empresa_Id
FROM stkExistenciaDespa 
INNER JOIN stkProductos  ON (stkProductos.stkProductos = stkExistenciaDespa.Producto_Id)
INNER JOIN stkDepositos  ON (stkDepositos.stkDepositos = stkExistenciaDespa.Deposito_Id)
INNER JOIN comDespachos  ON (comDespachos.comDespachos = stkExistenciaDespa.Despacho_Id)
WHERE stkExistenciaDespa.Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id)
AND stkExistenciaDespa.Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id)
AND stkExistenciaDespa.Despacho_Id = dbo.FuncFKcomDespachos(@pDespacho_Id)
AND stkExistenciaDespa.Empresa_Id = @pEmpresa_Id
 
RETURN @@Error 

GO

DROP PROCEDURE stkExistenciaDespaEliminar
GO
CREATE PROCEDURE stkExistenciaDespaEliminar
(
@pProducto_Id varchar(25),
@pDeposito_Id varchar(15),
@pDespacho_Id int,
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 

DELETE FROM stkExistenciaDespa 
WHERE Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id)
AND Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id)
AND Despacho_Id = dbo.FuncFKcomDespachos(@pDespacho_Id)
AND Empresa_Id = @pEmpresa_Id
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkExistenciaDespaXFifo.sql*/
Drop procedure stkExistenciaDespaXFifo
Go

Create procedure stkExistenciaDespaXFifo
(
@pEmpresa_Id int,
@pProducto_Id varChar(25),
@pDeposito_Id varChar(5),
@pCantidad qCantidadD8
)
As

Declare @lDespacho_Id varChar(25)
Declare @lCantidad qCantidadD8

Declare lCursorDespa Cursor for
Select comDespachos.Despacho_Id, Cantidad
From stkExistenciaDespa 
Inner Join comDespachos On comDespachos.comDespachos = stkExistenciaDespa.Despacho_Id
Where stkExistenciaDespa.Empresa_Id = @pEmpresa_Id And
	Producto_Id = dbo.funcFKstkProductos(@pProducto_Id) And
	Deposito_Id = dbo.funcFKstkDepositos(@pDeposito_Id) And stkExistenciaDespa.Cantidad > 0
Order By comDespachos.Fecha

Open lCursorDespa

Create table #lCursorDevol
(
Despacho_Id varChar(25) Not Null,
Cantidad Numeric(19,8) Not Null
)

Fetch Next From lCursorDespa
Into @lDespacho_Id, @lCantidad

While (@@FETCH_STATUS = 0 And @pCantidad > 0 And @lCantidad > 0)
Begin
print @pCantidad
print @lCantidad
	If @lCantidad >= @pCantidad
	Begin
		Insert Into #lCursorDevol Values (@lDespacho_Id, @pCantidad)
		Set @pCantidad = 0
	End
	Else
	Begin
		Insert Into #lCursorDevol Values (@lDespacho_Id, @lCantidad)
		Set @pCantidad = @pCantidad - @lCantidad
	End

	Fetch Next From lCursorDespa
	Into @lDespacho_Id, @lCantidad
End

Select @pProducto_Id Producto_Id, @pDeposito_Id Deposito_Id, @pCantidad Cantidad

Select Despacho_Id, Cantidad From #lCursorDevol
Drop table #lCursorDevol

Close lCursorDespa
Deallocate lCursorDespa

Go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkExistenciaSerie.sql*/

DROP PROCEDURE stkExistenciaSerieDatos
GO
CREATE PROCEDURE stkExistenciaSerieDatos
(
@pProducto_Id varChar(25),
@pDeposito_Id varChar(15),
@pSerie varchar(25),
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 

SELECT stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos, stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos,
	stkExistenciaSerie.Serie, stkExistenciaSerie.Cantidad, stkExistenciaSerie.Empresa_Id
FROM stkExistenciaSerie 
INNER JOIN stkProductos  ON (stkProductos.stkProductos = stkExistenciaSerie.Producto_Id)
INNER JOIN stkDepositos  ON (stkDepositos.stkDepositos = stkExistenciaSerie.Deposito_Id)
WHERE stkExistenciaSerie.Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id)
AND stkExistenciaSerie.Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id)
AND Serie = @pSerie
AND stkExistenciaSerie.Empresa_Id = @pEmpresa_Id
 
RETURN @@Error 

GO

DROP PROCEDURE stkExistenciaSerieEliminar
GO
CREATE PROCEDURE stkExistenciaSerieEliminar
(
@pProducto_Id varchar(25),
@pDeposito_Id varchar(15),
@pSerie varchar(25) = NULL,
@pEmpresa_Id int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkExistenciaSerie 
WHERE Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id)
AND Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id)
AND Serie = ISNULL(@pSerie, Serie)
AND Empresa_Id = ISNULL(@pEmpresa_Id, Empresa_Id)
 
 RETURN @@Error 

GO


DROP PROCEDURE stkExistenciaSerieSumar
GO
CREATE PROCEDURE stkExistenciaSerieSumar
(
@pProducto_Id varChar(25),
@pDeposito_Id varChar(15),
@pSerie varchar(25),
@pCantidad qMonedaD8,
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkExistenciaSerie 
	WHERE Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id) AND 
	Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id) AND 
	Serie = @pSerie AND 
	Empresa_Id = @pEmpresa_Id))
BEGIN 
	UPDATE stkExistenciaSerie
	SET Cantidad = Cantidad + @pCantidad
	WHERE Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id) AND 
	Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id) AND 
	Serie = @pSerie AND Empresa_Id = @pEmpresa_Id
END 
ELSE 
BEGIN 
	INSERT INTO stkExistenciaSerie
	(
		Producto_Id,
		Deposito_Id,
		Serie,
		Cantidad,
		Empresa_Id
	)
	VALUES 
	(
		dbo.FuncFKstkProductos(@pProducto_Id),
		dbo.FuncFKstkDepositos(@pDeposito_Id),
		@pSerie,
		@pCantidad,
		@pEmpresa_Id
	)
END 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkExistenciaSerieUbi.sql*/
DROP PROCEDURE stkExistenciaUbiSerieSumar
GO
CREATE PROCEDURE stkExistenciaUbiSerieSumar
(
@pEmpresa_Id Int,
@pProducto_Id VarChar(25),
@pDeposito_Id VarChar(15),
@pSerie VarChar(25),
@pUbicacion_Id VarChar(25),
@pCantidad qCantidadD8
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT * FROM stkExistenciaUbiSerie WHERE 
	Empresa_Id = @pEmpresa_Id And
	Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id) AND 
	Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id) AND
	Serie = @pSerie AND
	Ubicacion_Id = dbo.FuncFKstkUbicaciones(@pUbicacion_Id)))
	
BEGIN 

	UPDATE stkExistenciaUbiSerie
	SET	Cantidad = Cantidad + @pCantidad
		WHERE Empresa_Id = @pEmpresa_Id And
			  Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id) AND 
			  Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id) and 
			  Serie = @pSerie and 
			  Ubicacion_Id = dbo.FuncFKstkUbicaciones(@pUbicacion_Id)
END 
ELSE 
BEGIN 
	INSERT INTO stkExistenciaUbiSerie
	(
		Empresa_Id,
		Producto_Id,
		Deposito_Id,
		Serie,
		Ubicacion_Id,
		Cantidad
	)
	VALUES 
	(
		@pEmpresa_Id,
		dbo.FuncFKstkProductos(@pProducto_Id),
		dbo.FuncFKstkDepositos(@pDeposito_Id),
		@pSerie,
		dbo.FuncFKstkUbicaciones(@pUbicacion_Id),
		@pCantidad
		
	)
END 

GO

DROP PROCEDURE stkExistenciaUbiSerieDatos
GO
CREATE PROCEDURE stkExistenciaUbiSerieDatos
(
@pEmpresa_Id Int,
@pProducto_Id VarChar(25),
@pDeposito_Id VarChar(15) = Null,
@pSerie VarChar(25) = Null,
@pUbicacion_Id VarChar(25) = Null
)
AS
SET NOCOUNT ON 

SELECT stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos, 
	stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos,
	stkExistenciaUbiSerie.Serie, stkSerieVencimiento.Vencimiento, stkUbicaciones.Ubicacion_Id,
	stkExistenciaUbiSerie.Cantidad
FROM stkExistenciaUbiSerie
INNER JOIN stkProductos  ON (stkProductos.stkProductos = stkExistenciaUbiSerie.Producto_Id)
INNER JOIN stkDepositos  ON (stkDepositos.stkDepositos = stkExistenciaUbiSerie.Deposito_Id)
INNER JOIN stkUbicaciones ON stkUbicaciones.stkUbicaciones = stkExistenciaUbiSerie.Ubicacion_Id
LEFT JOIN stkSerieVencimiento ON  stkSerieVencimiento.Serie = stkExistenciaUbiSerie.Serie
WHERE stkExistenciaUbiSerie.Empresa_Id = @pEmpresa_Id And stkProductos.Producto_Id = @pProducto_Id
AND stkDepositos.Deposito_Id = IsNull(@pDeposito_Id, stkDepositos.Deposito_Id)
AND stkUbicaciones.Ubicacion_Id = IsNull(@pUbicacion_Id, stkUbicaciones.Ubicacion_Id) 
AND stkExistenciaUbiSerie.Serie = ISNULL(@pSerie,stkExistenciaUbiSerie.Serie)
and stkExistenciaUbiSerie.Cantidad <> 0
order by 5, 8 desc  
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkExistenciaSerieXFifo.sql*/
Drop procedure stkExistenciaSerieXFifoOVto
Go
--exec stkExistenciaSerieXFifoOVto 1, '0147E', '03', 1000, 'REPARTO', 6, 0, 0, 0, '0002', '', '', ''
--exec stkExistenciaSerieXFifoOVto 1, '0208E', '03', 1000, 'REPARTO', 0, 0, 0, 0, '0002', '', '', ''
--exec stkExistenciaSerieXFifoOVto 1, '0147E', '03', 300, 'REPARTO', Null, Null, Null, Null, '0002', Null, Null, Null
Create procedure stkExistenciaSerieXFifoOVto
(
@pEmpresa_Id int,
@pProducto_Id varChar(25),
@pDeposito_Id varChar(5),
@pCantidad qCantidadD8,
@pSegmento_Id varChar(10) = Null,
@pSegmento1N int = Null,
@pSegmento2N int = Null,
@pSegmento3N int = Null,
@pSegmento4N int = Null,
@pSegmento1C varchar(20) = Null,
@pSegmento2C varchar(20) = Null,
@pSegmento3C varchar(20) = Null,
@pSegmento4C varchar(20) = Null
)
As

Declare @lSerie varChar(25)
Declare @lCantidad qCantidadD8
Declare @lFecha datetime

Declare @lvenReparto int
-- Si se informa el reparto y no existe, que asigne 0. Si no se informa que asigne Null para que no reste nada --
If @pSegmento1N Is Null
	Set @lvenReparto = Null
Else
Begin
	Select @lvenReparto = venReparto From venRepaSegmentos Where Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) And
		Segmento1N = @pSegmento1N And
		Segmento2N = isNull(@pSegmento2N, 0) And
		Segmento3N = isNull(@pSegmento3N, 0) And
		Segmento4N = isNull(@pSegmento4N, 0) And
		Segmento1C = isNull(@pSegmento1C, '') And
		Segmento2C = isNull(@pSegmento2C, '') And
		Segmento3C = isNull(@pSegmento3C, '') And
		Segmento4C = isNull(@pSegmento4C, '') And
		Empresa_Id = @pEmpresa_Id
	If @lvenReparto Is Null
		Set @lvenReparto = 0
End

--print @lvenReparto

Select @pProducto_Id Producto_Id, @pDeposito_Id Deposito_Id, @pCantidad Cantidad, @pSegmento_Id Segmento_Id, @pSegmento1N Segmento1N,
@pSegmento2N Segmento2N, @pSegmento3N Segmento3N, @pSegmento4N Segmento4N, @pSegmento1C Segmento1C,
@pSegmento2C Segmento2C, @pSegmento3C Segmento3C, @pSegmento4C Segmento4C

Declare lCursorSerie Cursor for
-- Primero los productos que llevan Vto se orden por esa fecha, primero los que vencen primero --
Select stkExistenciaSerie.Serie, stkExistenciaSerie.Cantidad -
	isNull((Select Sum(venRepaPediSerie.Cantidad) From venRepaPedi 
	Inner Join venPediCuerpo On venRepaPedi.venPedidos = venPediCuerpo.venPedidos And venRepaPedi.Renglon_Pe = venPediCuerpo.Renglon_Pe
	Inner Join venReparto On venReparto.venReparto = venRepaPedi.venReparto
	Inner Join venRepaPediSerie On venRepaPediSerie.venReparto = venRepaPedi.venReparto And venRepaPediSerie.Renglon_Rep = venRepaPedi.Renglon_Rep And
		venRepaPediSerie.venPedidos = venRepaPedi.venPedidos And venRepaPediSerie.Renglon_Pe = venRepaPedi.Renglon_Pe
	Where venRepaPedi.venReparto <> @lvenReparto And venPediCuerpo.Producto_Id = dbo.funcFKstkProductos(@pProducto_Id) And
	venPediCuerpo.Deposito_Id = dbo.funcFKstkDepositos(@pDeposito_Id) And venRepaPedi.Remitido = 0 And 
	venReparto.Cerrado = 0 And venReparto.Empresa_Id = @pEmpresa_Id And venRepaPediSerie.Serie = stkExistenciaSerie.Serie), 0) Cantidad,
stkSerieVencimiento.Vencimiento
From stkExistenciaSerie
Inner Join stkSerieVencimiento On stkSerieVencimiento.Producto_Id = stkExistenciaSerie.Producto_Id And stkSerieVencimiento.Serie = stkExistenciaSerie.Serie And
	stkSerieVencimiento.Empresa_Id = stkExistenciaSerie.Empresa_Id
Inner Join stkProductos On stkProductos.stkProductos = stkExistenciaSerie.Producto_Id
Where stkProductos.conVencimiento = 1 And stkExistenciaSerie.Cantidad <> 0 And
	stkExistenciaSerie.Empresa_Id = @pEmpresa_Id And stkExistenciaSerie.Producto_Id = dbo.funcFKstkProductos(@pProducto_Id) And
	stkExistenciaSerie.Deposito_Id = dbo.funcFKstkDepositos(@pDeposito_Id) And
	stkExistenciaSerie.Cantidad -
	isNull((Select Sum(venRepaPediSerie.Cantidad) From venRepaPedi 
	Inner Join venPediCuerpo On venRepaPedi.venPedidos = venPediCuerpo.venPedidos And venRepaPedi.Renglon_Pe = venPediCuerpo.Renglon_Pe
	Inner Join venReparto On venReparto.venReparto = venRepaPedi.venReparto
	Inner Join venRepaPediSerie On venRepaPediSerie.venReparto = venRepaPedi.venReparto And venRepaPediSerie.Renglon_Rep = venRepaPedi.Renglon_Rep And
		venRepaPediSerie.venPedidos = venRepaPedi.venPedidos And venRepaPediSerie.Renglon_Pe = venRepaPedi.Renglon_Pe
	Where venRepaPedi.venReparto <> @lvenReparto And venPediCuerpo.Producto_Id = dbo.funcFKstkProductos(@pProducto_Id) And
	venPediCuerpo.Deposito_Id = dbo.funcFKstkDepositos(@pDeposito_Id) And venRepaPedi.Remitido = 0 And 
	venReparto.Cerrado = 0 And venReparto.Empresa_Id = @pEmpresa_Id And venRepaPediSerie.Serie = stkExistenciaSerie.Serie), 0) <> 0
Union All
-- Ahora los productos que no llevan vto. Se ordena por la fecha que ingresaron al stock --
Select Serie, Cantidad - 
	isNull((Select Sum(venRepaPediSerie.Cantidad) From venRepaPedi 
	Inner Join venPediCuerpo On venRepaPedi.venPedidos = venPediCuerpo.venPedidos And venRepaPedi.Renglon_Pe = venPediCuerpo.Renglon_Pe
	Inner Join venReparto On venReparto.venReparto = venRepaPedi.venReparto
	Inner Join venRepaPediSerie On venRepaPediSerie.venReparto = venRepaPedi.venReparto And venRepaPediSerie.Renglon_Rep = venRepaPedi.Renglon_Rep And
		venRepaPediSerie.venPedidos = venRepaPedi.venPedidos And venRepaPediSerie.Renglon_Pe = venRepaPedi.Renglon_Pe
	Where venRepaPedi.venReparto <> @lvenReparto And venPediCuerpo.Producto_Id = dbo.funcFKstkProductos(@pProducto_Id) And
	venPediCuerpo.Deposito_Id = dbo.funcFKstkDepositos(@pDeposito_Id) And venRepaPedi.Remitido = 0 And 
	venReparto.Cerrado = 0 And venReparto.Empresa_Id = @pEmpresa_Id And venRepaPediSerie.Serie = Fifo.Serie), 0) Cantidad, 
Vencimiento From
(
Select stkMoviSerie.Serie, Sum(stkMoviSerie.Cantidad * stkMoviCabe.Signo) Cantidad, PrimeraEntrada.Vencimiento
From stkMoviSerie
Inner Join stkMoviCuerpo On stkMoviCuerpo.stkMoviCabe = stkMoviSerie.stkMoviCabe And stkMoviCuerpo.Renglon = stkMoviSerie.Renglon
Inner Join stkMoviCabe On stkMoviCabe.stkMoviCabe = stkMoviCuerpo.stkMoviCabe
Inner Join conAsientos On conAsientos.conAsientos = stkMoviCabe.stkMoviCabe
Inner Join stkProductos On stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
Inner Join 
(
Select conAsientos.Empresa_Id, stkMoviCuerpo.Producto_Id, stkMoviCuerpo.Deposito_Id, stkMoviSerie.Serie, Min(conAsientos.Fecha) Vencimiento
From stkMoviSerie
Inner Join stkMoviCuerpo On stkMoviCuerpo.stkMoviCabe = stkMoviSerie.stkMoviCabe And stkMoviCuerpo.Renglon = stkMoviSerie.Renglon
Inner Join stkMoviCabe On stkMoviCabe.stkMoviCabe = stkMoviCuerpo.stkMoviCabe
Inner Join conAsientos On conAsientos.conAsientos = stkMoviCabe.stkMoviCabe
Inner Join stkProductos On stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
Where conAsientos.Posteado = 1 And conAsientos.Anulado = 0 And stkMoviCabe.Signo = 1 And stkProductos.conVencimiento = 0 And
	conAsientos.Empresa_Id = @pEmpresa_Id And stkMoviCuerpo.Producto_Id = dbo.funcFKstkProductos(@pProducto_Id) And
	stkMoviCuerpo.Deposito_Id = dbo.funcFKstkDepositos(@pDeposito_Id)
Group By conAsientos.Empresa_Id, stkMoviCuerpo.Producto_Id, stkMoviCuerpo.Deposito_Id, stkMoviSerie.Serie
) PrimeraEntrada On PrimeraEntrada.Empresa_Id = conAsientos.Empresa_Id And PrimeraEntrada.Producto_Id = stkMoviCuerpo.Producto_Id And
	PrimeraEntrada.Deposito_Id = stkMoviCuerpo.Deposito_Id And PrimeraEntrada.Serie = stkMoviSerie.Serie
Where conAsientos.Posteado = 1 And conAsientos.Anulado = 0 And stkProductos.conVencimiento = 0
Group By conAsientos.Empresa_Id, stkProductos.Producto_Id, stkMoviCuerpo.Deposito_Id, stkMoviSerie.Serie, PrimeraEntrada.Vencimiento
Having Sum(stkMoviSerie.Cantidad * stkMoviCabe.Signo) <> 0
) Fifo
Order By 3


Open lCursorSerie

Create table #lCursorSerie
(
Serie varChar(25) Not Null,
Cantidad Numeric(19,8) Not Null,
Vencimiento datetime Not Null
)

-- Que siempre traiga todos los lotes porque dentro del programa puede ser que descarte algunos --
-- renglones anteriores del mismo producto y tiene que ir tomando los siguientes lotes --
Set @pCantidad = 999999999

Fetch Next From lCursorSerie Into @lSerie, @lCantidad, @lFecha

While (@@FETCH_STATUS = 0 And @pCantidad > 0 And @lCantidad > 0)
Begin
--print 'pCantidad'
--print @pCantidad
--print 'lCantidad'
--print @lCantidad
	If @lCantidad >= @pCantidad
	Begin
		Insert Into #lCursorSerie Values (@lSerie, @pCantidad, @lFecha)
		Set @pCantidad = 0
	End
	Else
	Begin
		Insert Into #lCursorSerie Values (@lSerie, @lCantidad, @lFecha)
		Set @pCantidad = @pCantidad - @lCantidad
	End

	Fetch Next From lCursorSerie
	Into @lSerie, @lCantidad, @lFecha
End


Select Serie, Cantidad, Vencimiento From #lCursorSerie
Drop table #lCursorSerie

Close lCursorSerie
Deallocate lCursorSerie

Go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkExistenciasXDeposito.sql*/
-- stkExistenciasXDeposito 1,' ','ZZZ',' ','ZZZ','ABB','ABB',' ','ZZ'

drop procedure stkExistenciasXDeposito
go


create procedure stkExistenciasXDeposito
(
@pEmpresa_Id Int = Null,
@pProductoDesde varchar(25),
@pProductoHasta varchar(25),
@pDepositoDesde varchar(15),
@pDepositoHasta varchar(15), 
@pFamiliaDesde varchar(15), 
@pFamiliaHasta varchar(15), 
@pGrupoDesde varchar(15), 
@pGrupoHasta varchar(15),
@pTipoDesde VarChar(5),
@pTipoHasta VarChar(5)
)
as
select '' as ProductoDesde, 'ZZZZZZZZZZZZZZZ' as ProductoHasta, '' as DepositoDesde, 'ZZZZZ' as DepositoHasta, 
	' ' FamiliaDesde, 'ZZZZZZZZZZZZZZZ' FamiliaHasta, ' ' GrupoDesde, 'ZZZZZZZZZZZZZZZ' GrupoHasta, ' ' TipoDesde, 
	'ZZZZZ' TipoHasta


SELECT distinct stkDepositos.Deposito_Id
FROm stkExistencia inner join stkProductos ON
stkExistencia.Producto_Id = stkProductos.stkProductos
INNER JOIN stkDepositos ON
stkDepositos.stkDepositos = stkExistencia.Deposito_Id
where Cantidad <> 0 AND 
stkExistencia.Empresa_Id = ISNULL(@pEmpresa_Id, stkExistencia.Empresa_Id)
and (stkProductos.Producto_Id between @pProductoDesde and @pProductoHasta)
and (stkDepositos.Deposito_Id between @pDepositoDesde and @pDepositoHasta)
union ALL
SELECT distinct
	'zEnTransito' as Deposito_Id

FROM
	stkEnTransito INNER JOIN stkMoviCabe ON
	stkEnTransito.stkMoviCabe = stkMoviCabe.stkMoviCabe
	INNER JOIN stkMoviCuerpo ON 
	stkMoviCabe.stkMoviCabe = stkMoviCuerpo.stkMoviCabe
	INNER JOIN conAsientos ON
	conAsientos.conAsientos =stkMoviCabe.stkMoviCabe 
	INNER JOIN genAsiSegmentos ON
	genAsiSegmentos.Asiento_Id = stkMoviCabe.stkMoviCabe 
	INNER JOIN stkProductos ON
	stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
	INNER JOIN stkUniMed ON
	stkUniMed.stkUniMed = stkProductos.Medida_Id
	LEFT OUTER JOIN (stkMoviCabe stkMoviCabeEntr INNER JOIN conAsientos conAsientosEntr ON
		stkMoviCabeEntr.stkMoviCabe =conAsientosEntr.conAsientos) ON
	stkMoviCabeEntr.stkMoviCabe = stkEnTransito.stkMoviCabeEntr 
	inner join stkDepositos  as stkDepositosD ON
	stkDepositosD.stkDepositos = stkEnTransito.Deposito_Id
	inner join stkDepositos  ON
	stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id
	LEFT JOIN stkFamilias ON stkFamilias.stkFamilias = stkProductos.Familia_Id
	LEFT JOIN stkGrupos ON stkGrupos.stkGrupos = stkProductos.Grupo_Id
    INNER JOIN stkTipos ON stkTipos.stkTipos = stkProductos.Tipo_Id
	WHERE
		conAsientos.Anulado = 0 and 
		conAsientosEntr.Fecha IS NULL and 
		conAsientos.Empresa_Id = ISNULL(@pEmpresa_Id,conAsientos.Empresa_Id) and
        stkProductos.Producto_Id between @pProductoDesde and @pProductoHasta and 
		ISNULL(stkFamilias.Familia_Id,' ') BETWEEN @pFamiliaDesde and @pFamiliaHasta and 
		ISNULL(stkGrupos.Grupo_Id,' ') BETWEEN @pGrupoDesde and @pGrupoHasta and 
		stkTipos.Tipo_Id between @pTipoDesde and @pTipoHasta
        --group by genEmpresas.Empresa_Id
UNION  -- COMPRAS
SELECT  Distinct 'zPorRecibir' as Deposito_Id
		from 	comOrdenComp inner join comOcCuerpo ON
		comOrdenComp.comOrdenComp = comOcCuerpo.comOrdenComp 
		INNER JOIN comOCArticulo ON
		comOcCuerpo.comOrdenComp = comOCArticulo.comOrdenComp and  
		comOcCuerpo.Renglon_OC = comOCArticulo.Renglon_OC 
		INNER JOIN comOCSegmentos ON
		comOrdenComp.comOrdenComp = comOCSegmentos.comOrdenComp 
		INNER JOIN stkProductos ON
		comOCArticulo.Producto_Id = stkProductos.stkProductos 
		INNER JOIN stkDepositos ON 
		stkDepositos.stkDepositos = comOCArticulo.Deposito_Id
		LEFT JOIN stkFamilias ON stkFamilias.stkFamilias = stkProductos.Familia_Id
		LEFT JOIN stkGrupos ON stkGrupos.stkGrupos = stkProductos.Grupo_Id
		INNER JOIN stkTipos ON stkTipos.stkTipos = stkProductos.Tipo_Id
		Where

			stkDepositos.Deposito_Id BETWEEN @pDepositoDesde and @pDepositoHasta and
			stkProductos.Producto_Id between @pProductoDesde AND  @pProductoHasta and
			comOcCuerpo.Pendiente = 1 AND 
			ISNULL(stkFamilias.Familia_Id,' ') BETWEEN @pFamiliaDesde and @pFamiliaHasta and 
			ISNULL(stkGrupos.Grupo_Id,' ') BETWEEN @pGrupoDesde and @pGrupoHasta and
			(comOcCuerpo.Cantidad > case when stkDepositos.consCompra_Venta = 1 then comOcCuerpo.CantidadConsignada else 
			 comOcCuerpo.Cantidad_Recibida end) and 
			NOT EXISTS(SELECT 1 FROM comEmbcuerpo WHERE
				comEmbcuerpo.comOrdenComp = comOcCuerpo.comOrdenComp and 
				comEmbcuerpo.Renglon_OC = comOcCuerpo.Renglon_OC) AND
			comOrdenComp.Estado_Id in ( 'A','P' ) AND 
			@pFamiliaDesde = ' ' and
			comOCSegmentos.Empresa_Id = ISNULL(@pEmpresa_Id,comOCSegmentos.Empresa_Id) and 
			stkTipos.Tipo_Id between @pTipoDesde and @pTipoHasta
UNION
SELECT  Distinct 'zPorRecibir' as Deposito_Id 
order by 1


SELECT stkProductos.Producto_Id, stkProductos.Descripcion, stkUniMed.Medida_id UniMed, 
stkDepositos.Deposito_Id, stkExistencia.Cantidad, 
ISNULL(stkExistencia.CantidadAlterna,0) CantidadAlterna, ISNULL(UniMed2.Medida_Id,'') UniMedAlt
FROm stkExistencia inner join stkProductos ON
stkExistencia.Producto_Id = stkProductos.stkProductos
INNER JOIN stkDepositos ON
stkDepositos.stkDepositos = stkExistencia.Deposito_Id
LEFT JOIN stkFamilias ON stkFamilias.stkFamilias = stkProductos.Familia_Id
LEFT JOIN stkGrupos ON stkGrupos.stkGrupos = stkProductos.Grupo_Id
INNER JOIN stkTipos ON stkTipos.stkTipos = stkProductos.Tipo_Id
INNER JOIN stkUniMed ON stkUniMed.stkUniMed = stkProductos.Medida_Id
LEFT JOIN stkUniMed UniMed2 ON UniMed2.stkUniMed = stkProductos.MedidaAlterna
Where Cantidad <> 0 AND 
stkExistencia.Empresa_Id = ISNULL(@pEmpresa_Id,stkExistencia.Empresa_Id)
and (stkProductos.Producto_Id between @pProductoDesde and @pProductoHasta)
and (stkDepositos.Deposito_Id between @pDepositoDesde and @pDepositoHasta)
and	ISNULL(stkFamilias.Familia_Id,' ') BETWEEN @pFamiliaDesde and @pFamiliaHasta 
and	ISNULL(stkGrupos.Grupo_Id,' ') BETWEEN @pGrupoDesde and @pGrupoHasta and 
			stkTipos.Tipo_Id between @pTipoDesde and @pTipoHasta
union all
SELECT 
	stkProductos.Producto_Id, stkProductos.Descripcion, stkUniMed.Medida_id,
	'zEnTransito' as Deposito_Id, sum(stkMoviCuerpo.Cantidad) as Cantidad,  
	SUM(ISNULL(stkMoviCuerpo.CantidadAlternaForm,0)) CantidadAlterna, ISNULL(UniMed2.Medida_Id,'') MedidaAlterna
FROM
	stkEnTransito INNER JOIN stkMoviCabe ON
	stkEnTransito.stkMoviCabe = stkMoviCabe.stkMoviCabe
	INNER JOIN stkMoviCuerpo ON stkMoviCabe.stkMoviCabe = stkMoviCuerpo.stkMoviCabe
	INNER JOIN conAsientos ON conAsientos.conAsientos =stkMoviCabe.stkMoviCabe 
	INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = stkMoviCabe.stkMoviCabe 
	INNER JOIN stkProductos ON stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
	INNER JOIN stkUniMed ON stkUniMed.stkUniMed = stkProductos.Medida_Id
	LEFT JOIN stkUniMed UniMed2 ON UniMed2.stkUniMed = stkProductos.MedidaAlterna
	LEFT OUTER JOIN (stkMoviCabe stkMoviCabeEntr INNER JOIN conAsientos conAsientosEntr ON
		stkMoviCabeEntr.stkMoviCabe =conAsientosEntr.conAsientos) ON
	stkMoviCabeEntr.stkMoviCabe = stkEnTransito.stkMoviCabeEntr 
	inner join stkDepositos as stkDepositosD ON stkDepositosD.stkDepositos = stkEnTransito.Deposito_Id
	inner join stkDepositos ON stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id
	LEFT JOIN stkFamilias ON stkFamilias.stkFamilias = stkProductos.Familia_Id
	LEFT JOIN stkGrupos ON stkGrupos.stkGrupos = stkProductos.Grupo_Id
	INNER JOIN stkTipos ON stkTipos.stkTipos = stkProductos.Tipo_Id
	WHERE
		conAsientos.Anulado = 0 and 
		conAsientosEntr.Fecha IS NULL and 
		conAsientos.Empresa_Id = ISNULL(@pEmpresa_Id,conAsientos.Empresa_Id) and
        stkProductos.Producto_Id between @pProductoDesde and @pProductoHasta and 
		ISNULL(stkFamilias.Familia_Id,' ') BETWEEN @pFamiliaDesde and @pFamiliaHasta and 
		ISNULL(stkGrupos.Grupo_Id,' ') BETWEEN @pGrupoDesde and @pGrupoHasta and 
		stkTipos.Tipo_Id between @pTipoDesde and @pTipoHasta
        group by stkProductos.Producto_Id, stkProductos.Descripcion, stkUniMed.Medida_id, UniMed2.Medida_Id
UNION ALL
SELECT 
	stkProductos.Producto_Id, stkProductos.Descripcion, stkUniMed.Medida_id, 'zPorRecibir' as Deposito_Id, 
		SUM(comOcCuerpo.Cantidad-case when stkDepositos.consCompra_Venta = 1 then comOcCuerpo.CantidadConsignada else 
			 comOcCuerpo.Cantidad_Recibida end )  as Cantidad, 
		0 CantidadAlterna, ISNULL(UniMed2.Medida_Id,'') MedidaAlterna
		from comOrdenComp inner join comOcCuerpo ON
		comOrdenComp.comOrdenComp = comOcCuerpo.comOrdenComp 
		INNER JOIN comOCArticulo ON comOcCuerpo.comOrdenComp = comOCArticulo.comOrdenComp and  
		comOcCuerpo.Renglon_OC = comOCArticulo.Renglon_OC 
		INNER JOIN comOCSegmentos ON comOrdenComp.comOrdenComp = comOCSegmentos.comOrdenComp 
		INNER JOIN stkProductos ON comOCArticulo.Producto_Id = stkProductos.stkProductos 
		INNER JOIN stkDepositos ON stkDepositos.stkDepositos = comOCArticulo.Deposito_Id
		INNER JOIN stkUniMed ON stkProductos.Medida_id = stkUniMed.stkUniMed
		LEFT JOIN stkUniMed UniMed2 ON UniMed2.stkUniMed = stkProductos.MedidaAlterna
		LEFT JOIN stkFamilias ON stkFamilias.stkFamilias = stkProductos.Familia_Id
		LEFT JOIN stkGrupos ON stkGrupos.stkGrupos = stkProductos.Grupo_Id
		INNER JOIN stkTipos ON stkTipos.stkTipos = stkProductos.Tipo_Id
		Where
			stkDepositos.Deposito_Id BETWEEN @pDepositoDesde and @pDepositoHasta and
			stkProductos.Producto_Id between @pProductoDesde AND  @pProductoHasta and			
			comOcCuerpo.Pendiente = 1 AND 
			ISNULL(stkFamilias.Familia_Id,' ') BETWEEN @pFamiliaDesde and @pFamiliaHasta and 
			ISNULL(stkGrupos.Grupo_Id,' ') BETWEEN @pGrupoDesde and @pGrupoHasta and 
			stkTipos.Tipo_Id between @pTipoDesde and @pTipoHasta	and 
			comOcCuerpo.Cantidad > comOcCuerpo.Cantidad_Recibida and 
			NOT EXISTS(SELECT 1 FROM comEmbcuerpo WHERE
				comEmbcuerpo.comOrdenComp = comOcCuerpo.comOrdenComp and 
				comEmbcuerpo.Renglon_OC = comOcCuerpo.Renglon_OC) AND
			comOrdenComp.Estado_Id in ( 'A','P' ) AND 
			comOCSegmentos.Empresa_Id = ISNULL(@pEmpresa_Id,comOCSegmentos.Empresa_Id)
	GROUP BY stkProductos.Producto_Id, stkProductos.Descripcion, stkUniMed.Medida_id, UniMed2.Medida_Id
union all
select stkProductos.Producto_Id, stkProductos.Descripcion, stkUniMed.Medida_id,
	'zPorRecibir' as Deposito_id, 0 as Cantidad, 0 CantidadAlterna, ISNULL(UniMed2.Medida_Id,'') MedidaAlterna
from stkProductos 
		LEFT JOIN stkFamilias ON stkFamilias.stkFamilias = stkProductos.Familia_Id
		LEFT JOIN stkGrupos ON stkGrupos.stkGrupos = stkProductos.Grupo_Id
		INNER JOIN stkUniMed ON stkProductos.Medida_id = stkUniMed.stkUniMed
		LEFT JOIN stkUniMed UniMed2 ON UniMed2.stkUniMed = stkProductos.MedidaAlterna
		INNER JOIN stkTipos ON stkTipos.stkTipos = stkProductos.Tipo_Id
where
			@pFamiliaDesde > ' ' and 
			stkProductos.Producto_Id between @pProductoDesde AND  @pProductoHasta and			
			ISNULL(stkFamilias.Familia_Id,' ') BETWEEN @pFamiliaDesde and @pFamiliaHasta and 
			ISNULL(stkGrupos.Grupo_Id,' ') BETWEEN @pGrupoDesde and @pGrupoHasta and 
			stkTipos.Tipo_Id between @pTipoDesde and @pTipoHasta	and 
			not exists(select 1 from comOrdenComp inner join comOcCuerpo ON
					comOrdenComp.comOrdenComp = comOcCuerpo.comOrdenComp 
					INNER JOIN comOCArticulo ON
					comOcCuerpo.comOrdenComp = comOCArticulo.comOrdenComp and  
					comOcCuerpo.Renglon_OC = comOCArticulo.Renglon_OC and
					comOCArticulo.Producto_Id = stkProductos.stkProductos 
					INNER JOIN comOCSegmentos ON
					comOrdenComp.comOrdenComp = comOCSegmentos.comOrdenComp 
					INNER JOIN stkDepositos ON 
					stkDepositos.stkDepositos = comOCArticulo.Deposito_Id
					where
					stkDepositos.Deposito_Id BETWEEN @pDepositoDesde and @pDepositoHasta and
					comOcCuerpo.Pendiente = 1 AND 
					comOcCuerpo.Cantidad > comOcCuerpo.Cantidad_Recibida )


	ORDER BY 1,3
	OPTION	(RECOMPILE)
go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkExistenciasXDepositoXLote.sql*/
Drop procedure stkExistenciasXDepositoXLote
go

Create procedure stkExistenciasXDepositoXLote
(
@pEmpresa_Id Int,
@pProductoDesde varchar(25),
@pProductoHasta varchar(25),
@pDepositoDesde varchar(15),
@pDepositoHasta varchar(15),
@pLoteDesde varchar(15),
@pLoteHasta varchar(15),
@pFamiliaDesde varchar(15),
@pFamiliaHasta varchar(15),
@pGrupoDesde varchar(15),
@pGrupoHasta varchar(15),
@pFecha DateTime
)
As
Select @pProductoDesde As ProductoDesde, @pProductoHasta As ProductoHasta, 
	@pDepositoDesde As DepositoDesde, @pDepositoHasta As DepositoHasta, 
	@pLoteDesde As LoteDesde, @pLoteHasta As LoteHasta, getdate() Fecha, 
	@pFamiliaDesde FamiliaDesde, @pFamiliaHasta FamiliaHasta, 
	@pGrupoDesde GrupoDesde, @pGrupoHasta GrupoHasta
	

Select Distinct stkDepositos.Deposito_Id
From stkMoviSerie
Inner Join stkMoviCuerpo On stkMoviCuerpo.stkMoviCabe = stkMoviSerie.stkMoviCabe And stkMoviCuerpo.Renglon = stkMoviSerie.Renglon
Inner Join stkProductos On stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
Inner Join stkDepositos On stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id
Inner Join stkMoviCabe On stkMoviCabe.stkMoviCabe = stkMoviCuerpo.stkMoviCabe
Inner Join conAsientos On conAsientos.conAsientos = stkMoviCabe.stkMoviCabe
Left Join stkSerieVencimiento On stkSerieVencimiento.Empresa_Id = conAsientos.Empresa_Id And stkSerieVencimiento.Producto_Id = stkMoviCuerpo.Producto_Id And
	stkSerieVencimiento.Serie = stkMoviSerie.Serie
LEFT JOIN stkFamilias ON stkFamilias.stkFamilias = stkProductos.Familia_Id
LEFT JOIN stkGrupos ON stkGrupos.stkGrupos = stkProductos.Grupo_Id
Where conAsientos.Fecha <= @pFecha
And conAsientos.Posteado = 1 And conAsientos.Anulado = 0 And conAsientos.Empresa_Id = @pEmpresa_Id
And stkProductos.Producto_Id Between @pProductoDesde And @pProductoHasta
And stkDepositos.Deposito_Id Between @pDepositoDesde And @pDepositoHasta
And stkMoviSerie.Serie Between @pLoteDesde And @pLoteHasta and 
ISNULL(stkFamilias.Familia_Id,' ') Between @pFamiliaDesde and @pFamiliaHasta and 
ISNULL(stkGrupos.Grupo_Id,' ') Between @pGrupoDesde and @pGrupoHasta
Group by stkProductos.Producto_Id, stkProductos.Descripcion, stkDepositos.Deposito_Id, stkMoviSerie.Serie, stkSerieVencimiento.Vencimiento
Having Sum(stkMoviSerie.Cantidad * stkMoviCabe.Signo) <> 0


Select stkProductos.Producto_Id, stkProductos.Descripcion, stkDepositos.Deposito_Id, stkMoviSerie.Serie, stkSerieVencimiento.Vencimiento,
	Sum(stkMoviSerie.Cantidad * stkMoviCabe.Signo) Cantidad
From stkMoviSerie
Inner Join stkMoviCuerpo On stkMoviCuerpo.stkMoviCabe = stkMoviSerie.stkMoviCabe And stkMoviCuerpo.Renglon = stkMoviSerie.Renglon
Inner Join stkProductos On stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
Inner Join stkDepositos On stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id
Inner Join stkMoviCabe On stkMoviCabe.stkMoviCabe = stkMoviCuerpo.stkMoviCabe
Inner Join conAsientos On conAsientos.conAsientos = stkMoviCabe.stkMoviCabe
Left Join stkSerieVencimiento On stkSerieVencimiento.Empresa_Id = conAsientos.Empresa_Id And stkSerieVencimiento.Producto_Id = stkMoviCuerpo.Producto_Id And
	stkSerieVencimiento.Serie = stkMoviSerie.Serie
LEFT JOIN stkFamilias ON stkFamilias.stkFamilias = stkProductos.Familia_Id
LEFT JOIN stkGrupos ON stkGrupos.stkGrupos = stkProductos.Grupo_Id
Where conAsientos.Fecha <= @pFecha
And conAsientos.Posteado = 1 And conAsientos.Anulado = 0 And conAsientos.Empresa_Id = @pEmpresa_Id
And stkProductos.Producto_Id Between @pProductoDesde And @pProductoHasta
And stkDepositos.Deposito_Id Between @pDepositoDesde And @pDepositoHasta
And stkMoviSerie.Serie Between @pLoteDesde And @pLoteHasta and 
ISNULL(stkFamilias.Familia_Id,' ') Between @pFamiliaDesde and @pFamiliaHasta and 
ISNULL(stkGrupos.Grupo_Id,' ') Between @pGrupoDesde and @pGrupoHasta
Group by stkProductos.Producto_Id, stkProductos.Descripcion, stkDepositos.Deposito_Id, stkMoviSerie.Serie, stkSerieVencimiento.Vencimiento
Having Sum(stkMoviSerie.Cantidad * stkMoviCabe.Signo) <> 0

-- ojo al generar resultado debe quedar vacio
Select '' Producto_Id, '' Descripcion, '' Lote, getdate() Vencimiento, Cast(0 As Decimal) Total
Go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkExistenciaUbi.sql*/
DROP PROCEDURE stkExistenciaUbiSumar
GO
CREATE PROCEDURE stkExistenciaUbiSumar
(
@pEmpresa_Id Int,
@pProducto_Id VarChar(25),
@pDeposito_Id VarChar(15),
@pUbicacion_Id VarChar(25),
@pCantidad qCantidadD8,
@pCantidadReservada qCantidadD8,
@pCantidadAlterna qCantidadD8
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT * FROM stkExistenciaUbi WHERE 
	Empresa_Id = @pEmpresa_Id And
	Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id) AND 
	Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id) AND
	Ubicacion_Id = dbo.FuncFKstkUbicaciones(@pUbicacion_Id)))
	
BEGIN 

	UPDATE stkExistenciaUbi
	SET	Cantidad = Cantidad + @pCantidad,
		CantidadReservada = CantidadReservada  + @pCantidadReservada,
		CantidadAlterna = CantidadAlterna + @pCantidadAlterna
		WHERE Empresa_Id = @pEmpresa_Id And
			  Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id) AND 
			  Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id) and 
			  Ubicacion_Id = dbo.FuncFKstkUbicaciones(@pUbicacion_Id)
END 
ELSE 
BEGIN 
	INSERT INTO stkExistenciaUbi
	(
		Empresa_Id,
		Producto_Id,
		Deposito_Id,
		Ubicacion_Id,
		Cantidad,
		CantidadReservada,
		CantidadAlterna
	)
	VALUES 
	(
		@pEmpresa_Id,
		dbo.FuncFKstkProductos(@pProducto_Id),
		dbo.FuncFKstkDepositos(@pDeposito_Id),
		dbo.FuncFKstkUbicaciones(@pUbicacion_Id),
		@pCantidad,
		@pCantidadReservada,
		@pCantidadAlterna
	)
END 

GO

DROP PROCEDURE stkExistenciaUbiDatos
GO
CREATE PROCEDURE stkExistenciaUbiDatos
(
@pEmpresa_Id Int,
@pProducto_Id VarChar(25),
@pDeposito_Id VarChar(15) = Null,
@pUbicacion_Id VarChar(25) = Null
)
AS
SET NOCOUNT ON 

SELECT stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos, 
	stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos,
	stkUbicaciones.Ubicacion_Id,
	stkExistenciaUbi.Cantidad, stkExistenciaUbi.CantidadReservada, stkExistenciaUbi.CantidadAlterna
FROM stkExistenciaUbi 
INNER JOIN stkProductos  ON (stkProductos.stkProductos = stkExistenciaUbi.Producto_Id)
INNER JOIN stkDepositos  ON (stkDepositos.stkDepositos = stkExistenciaUbi.Deposito_Id)
INNER JOIN stkUbicaciones ON stkUbicaciones.stkUbicaciones = stkExistenciaUbi.Ubicacion_Id
WHERE stkExistenciaUbi.Empresa_Id = @pEmpresa_Id And stkProductos.Producto_Id = @pProducto_Id
AND stkDepositos.Deposito_Id = IsNull(@pDeposito_Id, stkDepositos.Deposito_Id)
AND stkUbicaciones.Ubicacion_Id = IsNull(@pUbicacion_Id, stkUbicaciones.Ubicacion_Id) and 
stkExistenciaUbi.Cantidad <> 0
order by 6  
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkFacturacionPedido.sql*/
-- stkRemisionFacturaDatos 1,'FC',430,0,0,0,'F','0001','I',' '
DROP PROCEDURE stkRemisionFacturaDatos_Identity
GO

CREATE PROCEDURE stkRemisionFacturaDatos_Identity
(
@lIdentity int
)
AS
SET NOCOUNT ON 

SELECT venMovimientos.venMovimientos, genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
	genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C,
	venSubTipoMov.SubTipoMov_Id, venSubTipoMov.Descripcion as DescripcionSubTipoMov, 
	conAsientos.Fecha FechaFactura,
	dbo.FechaActual() Fecha,
	venClientes.Cliente_Id, venClieHabitual.Sucursal, venClieHabitual.NombreFantasia,
	venListasPrecios.ListaPrecio_Id, venListasPrecios.Descripcion as DescripcionListasPrecios, 
	venVendedores.Vendedor_Id, 	venVendedores.Nombre as DescripcionVendedores, 
	conAsientos.Observaciones,	venMovimientos.Importe, 
	' ' Segmento_IdRem , 0 Segmento1NRem , 0 Segmento2NRem , 0 Segmento3NRem , 0 Segmento4NRem ,
	' ' Segmento1CRem , ' ' Segmento2CRem, ' ' Segmento3CRem, ' ' Segmento4CRem,	
	' ' as ArchivoPDFRem, ' ' as ArchivoXMLRem , 'S' as Tipomov, 
	venFormaEntrega.FormaEntrega_Id, venFormaEntrega.RazonSocial as DescripcionFormaEntrega
	
FROM venMovimientos 
INNER JOIN venSubTipoMov  ON (venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id)
LEFT JOIN venClieHabitual  ON (venClieHabitual.genEntidades = venMovimientos.Cliente_Id) AND (venClieHabitual.Sucursal = venMovimientos.Sucursal)
Left Join venClientes On venMovimientos.Cliente_Id = venClientes.genEntidades
INNER JOIN  venMovConStock ON venMovConStock.venMovimientos =  venMovimientos.venMovimientos
LEFT JOIN venListasPrecios  ON (venListasPrecios.venListasPrecios = venMovConStock.ListaPrecio_Id)
LEFT JOIN venVendedores  ON (venVendedores.venVendedores = venMovimientos.Vendedor_Id)
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = venMovimientos.venMovimientos
INNER JOIN genSegmentos ON genAsiSegmentos.Segmento_Id = genSegmentos.genSegmentos
INNER JOIN conAsientos ON  conAsientos.conAsientos = venMovimientos.venMovimientos
INNER JOIN venFormaEntrega ON  venFormaEntrega.venFormaEntrega = venMovimientos.FormaEntrega_Id
WHERE 
conAsientos.Anulado = 0 AND 
conAsientos.Posteado = 1 AND 
venMovimientos.venMovimientos = @lIdentity


SELECT venMovimientos.venMovimientos, venMovConStockCr.RenglonCuerpo, stkProductos.Producto_Id, 
	stkProductos.Descripcion as DescripcionProductos,
	stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, 
	stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos,
	venMovConStockCr.Factor,
	venMovConStockCr.CantOriginal, venMovConStockCr.CantEntregada, 
	venMovConStockCr.CantPendiente, venMovConStockCr.CantFacturada,
	venMovConStockCr.CantFacturada * 0 CantidadAEntregar,
	venMovConStockCr.CantPendiente/venMovConStockCr.Factor CantidadPendienteOrig,
	'' MedidaAlterna, venMovConStockCr.CantFacturada * 0 CantidadAFacturarAlterna,
	venMovConStockCr.CantFacturada * 0 CantidadAEntregarAlterna,
	venMovConStockCr.PrecioForm, venCondFiscal.CondFisc_Id AS CFVenta_Id, 
	venMovConStockCr.PrecioLista, venMovConStockCr.PrecioVenta, venMovConStockCr.FechaEntrega,
	venMovConStockCr.Bonificacion, venMovConStockCr.Observaciones,
	concentro1.Centro1_Id, conCentro1.Descripcion DescripcionCentro1,
	concentro2.Centro2_Id, conCentro2.Descripcion DescripcionCentro2, 
	conCuentas.Cuenta_Id as CtaDebe_Id
FROM venMovConStockCr 
INNER JOIN venMovimientos  ON (venMovimientos.venMovimientos = venMovConStockCr.venMovimientos)
LEFT JOIN stkProductos  ON (stkProductos.stkProductos = venMovConStockCr.Producto_Id)
LEFT JOIN venCondFiscal ON venCondFiscal.venCondFiscal = stkProductos.CFVenta_Id 
LEFT JOIN stkUniMed  ON (stkUniMed.stkUniMed = venMovConStockCr.Medida_Id)
LEFT JOIN stkDepositos  ON (stkDepositos.stkDepositos = venMovConStockCr.Deposito_Id)
Left Join conCentro1 On conCentro1.conCentro1 = venMovConStockCr.Centro1_Id
Left Join conCentro2 On conCentro2.conCentro2 = venMovConStockCr.Centro2_Id
INNER JOIN conCuentas ON  conCuentas.conCuentas = stkProductos.CtaCosto
WHERE 
venMovConStockCr.CantPendiente > 0 AND 
venMovimientos.venMovimientos = @lIdentity
 

SELECT stkMoviCabe as VenPedidos, stkMoviSerie.Renglon, stkMoviSerie.Serie, stkMoviSerie.Cantidad,  
	stkSerieVencimiento.Vencimiento, ' ' as Ubicacion_Id
	FROM stkMoviSerie 
	inner join stkSerieVencimiento ON stkSerieVencimiento.Serie = stkMoviSerie.Serie 
	where 1=2

Exec genAtributosGeneralesIdentityDatos @lIdentity, 'venRemisionFacturas'

Exec stkMoviUbicacionDatos 0

GO

DROP PROCEDURE stkRemisionFacturaDatos
GO
CREATE PROCEDURE stkRemisionFacturaDatos
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
AS
SET NOCOUNT ON 

Declare @pIdentity int= (select Asiento_Id from 
	genAsiSegmentos INNER JOIN genSegmentos ON
	genAsiSegmentos.Segmento_id = genSegmentos.genSegmentos
	Where
	genAsiSegmentos.Empresa_id = @pEmpresa_id and 
	genSegmentos.Segmento_id = @pSegmento_id and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C)

Exec stkRemisionFacturaDatos_Identity @pIdentity

RETURN @@Error
GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkFamilias.sql*/
DROP PROCEDURE stkFamiliasGuardar
GO
CREATE PROCEDURE stkFamiliasGuardar
(
@pFamilia_Id varchar(15),
@pFamilia_Id_Nuevo varchar(15),
@pDescripcion varchar(60),
@pEmpresa_Id int = NULL,
@pInactivo Sino,
@pPosteado Sino,
@pUsuario_Id int
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM stkFamilias WHERE (Familia_Id = @pFamilia_Id)))
BEGIN 
	UPDATE stkFamilias
	SET		@lIdentidad = stkFamilias,
		Familia_Id = @pFamilia_Id_Nuevo,
		Descripcion = @pDescripcion,
		Empresa_Id = @pEmpresa_Id,
		Inactivo = @pInactivo,
		Posteado = @pPosteado,
		Usuario_Id = @pUsuario_Id
	WHERE (Familia_Id = @pFamilia_Id)
END 
ELSE 
BEGIN 
	INSERT INTO stkFamilias
	(
		Familia_Id,
		Descripcion,
		Empresa_Id,
		Inactivo,
		Posteado,
		Usuario_Id
	)
	VALUES 
	(
		@pFamilia_Id,
		@pDescripcion,
		@pEmpresa_Id,
		@pInactivo,
		@pPosteado,
		@pUsuario_Id
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE stkFamiliasDatos
GO
CREATE PROCEDURE stkFamiliasDatos
(
@pFamilia_Id varchar(15)
)
AS
SET NOCOUNT ON 

SELECT stkFamilias.stkFamilias, stkFamilias.Familia_Id, stkFamilias.Descripcion, stkFamilias.Familia_Id Familia_Id_Nueva,
	stkFamilias.Empresa_Id, Cast( Case When stkFamilias.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, stkFamilias.Inactivo, stkFamilias.Posteado,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario
FROM stkFamilias 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = stkFamilias.Usuario_Id)
WHERE (Familia_Id = @pFamilia_Id)
 


  Declare @pidentity bigint= dbo.FuncFKstkFamilias(@pFamilia_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'stkFamilias'
 RETURN @@Error 

GO

DROP PROCEDURE stkFamiliasEliminar
GO
CREATE PROCEDURE stkFamiliasEliminar
(
@pFamilia_Id varchar(15) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkFamilias 
WHERE (Familia_Id = @pFamilia_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKstkFamilias
GO

CREATE FUNCTION FuncFKstkFamilias
(
@pFamilia_Id varchar (15)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = stkFamilias FROM stkFamilias WHERE 
	Familia_Id = @pFamilia_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkGrupos.sql*/
DROP PROCEDURE stkGruposGuardar
GO
CREATE PROCEDURE stkGruposGuardar
(
@pGrupo_Id varchar(15),
@pGrupo_Id_Nuevo varchar(15),
@pDescripcion varchar(60),
@pEmpresa_Id int = NULL,
@pInactivo Sino,
@pPosteado Sino,
@pUsuario_Id int
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM stkGrupos WHERE (Grupo_Id = @pGrupo_Id)))
BEGIN 
	UPDATE stkGrupos
	SET		@lIdentidad = stkGrupos,
		Grupo_Id = @pGrupo_Id_Nuevo,
		Descripcion = @pDescripcion,
		Empresa_Id = @pEmpresa_Id,
		Inactivo = @pInactivo,
		Posteado = @pPosteado,
		Usuario_Id = @pUsuario_Id
	WHERE (Grupo_Id = @pGrupo_Id)
END 
ELSE 
BEGIN 
	INSERT INTO stkGrupos
	(
		Grupo_Id,
		Descripcion,
		Empresa_Id,
		Inactivo,
		Posteado,
		Usuario_Id
	)
	VALUES 
	(
		@pGrupo_Id,
		@pDescripcion,
		@pEmpresa_Id,
		@pInactivo,
		@pPosteado,
		@pUsuario_Id
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE stkGruposDatos
GO
CREATE PROCEDURE stkGruposDatos
(
@pGrupo_Id varchar(15)
)
AS
SET NOCOUNT ON 

SELECT stkGrupos.stkGrupos, stkGrupos.Grupo_Id, stkGrupos.Descripcion, stkGrupos.Grupo_Id Grupo_Id_Nueva,
	stkGrupos.Empresa_Id, Cast( Case When stkGrupos.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, stkGrupos.Inactivo, stkGrupos.Posteado,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario
FROM stkGrupos 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = stkGrupos.Usuario_Id)
WHERE (Grupo_Id = @pGrupo_Id)
 


 Declare @pidentity bigint= dbo.FuncFKstkGrupos(@pGrupo_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'stkGrupos'
 RETURN @@Error 

GO

DROP PROCEDURE stkGruposEliminar
GO
CREATE PROCEDURE stkGruposEliminar
(
@pGrupo_Id varchar(15) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkGrupos 
WHERE (Grupo_Id = @pGrupo_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKstkGrupos
GO

CREATE FUNCTION FuncFKstkGrupos
(
@pGrupo_Id varchar (15)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = stkGrupos FROM stkGrupos WHERE 
	Grupo_Id = @pGrupo_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkHojaDeRuta.sql*/
DROP PROCEDURE stkHojaDeRutaGuardar
GO
CREATE PROCEDURE stkHojaDeRutaGuardar
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20),
@pUsuario_Id int = NULL,
@pFechaRegistro qFechaHora,
@pvenReparto int = NULL,
@pFormaEntrega_Id VarChar(5) = NULL,
@pPatente_Id varchar(20) = NULL,
@pPatenteAcoplado varchar(20) = NULL, 
@pChofer VarChar(100)
)
AS
SET NOCOUNT ON 
DECLARE @lIdentity int = (Select stkHojaDeRuta
 From stkHojaSegmentos
 Where
	stkHojaSegmentos.Empresa_Id = @pEmpresa_Id and 
	stkHojaSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	stkHojaSegmentos.Segmento1N = @pSegmento1N and 
	stkHojaSegmentos.Segmento2N = @pSegmento2N and 
	stkHojaSegmentos.Segmento3N = @pSegmento3N and 
	stkHojaSegmentos.Segmento4N = @pSegmento4N and 
	stkHojaSegmentos.Segmento1C = @pSegmento1C and 
	stkHojaSegmentos.Segmento2C = @pSegmento2C and 
	stkHojaSegmentos.Segmento3C = @pSegmento3C and 
	stkHojaSegmentos.Segmento4C = @pSegmento4C )

IF (@lIdentity IS NOT NULL)
BEGIN 
	UPDATE stkHojaDeRuta
	SET
		Empresa_Id = @pEmpresa_Id,
		Usuario_Id = @pUsuario_Id,
		FechaRegistro = @pFechaRegistro,
		venReparto = @pvenReparto,
		FormaEntrega_Id = dbo.FuncFKvenFormaEntrega(@pFormaEntrega_Id),
		Patente_Id = dbo.FuncFKvenCamiones(@pPatente_Id),
		PatenteAcoplado = dbo.FuncFKvenCamiones(@pPatenteAcoplado), 
		Chofer  = @pChofer
	WHERE stkHojaDeRuta = @lIdentity
END 
ELSE 
BEGIN 
	INSERT INTO stkHojaDeRuta
	(
		Empresa_Id,
		Usuario_Id,
		FechaRegistro,
		venReparto,
		FormaEntrega_Id,
		Patente_Id,
		PatenteAcoplado, 
		Estado ,
		Chofer
	)
	VALUES 
	(
		@pEmpresa_Id,
		@pUsuario_Id,
		@pFechaRegistro,
		@pvenReparto,
		dbo.FuncFKvenFormaEntrega(@pFormaEntrega_Id),
		dbo.FuncFKvenCamiones(@pPatente_Id),
		dbo.FuncFKvenCamiones(@pPatenteAcoplado),
		'A', 
		@pChofer
	)
	SET @lIdentity =  Cast(SCOPE_IDENTITY() as int) 
END 
SELECT @lIdentity AS RetVal 
GO

DROP PROCEDURE stkHojaDeRutaIdentity
GO
CREATE PROCEDURE stkHojaDeRutaIdentity
(
@lIdentity int
)
AS
SET NOCOUNT ON 

SELECT stkHojaDeRuta.stkHojaDeRuta, stkHojaDeRuta.Empresa_Id, genSegmentos.Segmento_Id, stkHojaSegmentos.Segmento1N,
	stkHojaSegmentos.Segmento2N,stkHojaSegmentos.Segmento3N,stkHojaSegmentos.Segmento4N,
	stkHojaSegmentos.Segmento1C, stkHojaSegmentos.Segmento2C,stkHojaSegmentos.Segmento3C,
	stkHojaSegmentos.Segmento4C, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
	stkHojaDeRuta.FechaRegistro, venFormaEntrega.FormaEntrega_Id, venFormaEntrega.RazonSocial ForEntregaRazonSocial,
	venCamiones.Patente_Id, venCamiones.Descripcion as DescripcionCamiones,
	venCamiones2.Patente_Id PatenteAcoplado, venCamiones2.Descripcion as DescripcionAcoplado,
	dbo.Segmento(venRepaSegmentos.Segmento_Id, venRepaSegmentos.Segmento1C, venRepaSegmentos.Segmento2C,
	venRepaSegmentos.Segmento3C, venRepaSegmentos.Segmento4C, venRepaSegmentos.Segmento1N, venRepaSegmentos.Segmento2N, 
	venRepaSegmentos.Segmento3N, venRepaSegmentos.Segmento4N) Reparto, stkHojaDeRuta.venReparto Reparto_Id,
	'' ClienteDesde, '' RazonSocialClieD, 'ZZZZZZZZZZZZZZZ' ClienteHasta, '' RazonSocialClieH,
	'' ZonaDesde, '' DescripcionZonaD, 'ZZZZZ' ZonaHasta, '' DescripcionZonaH,
	'' RegionDesde, '' DescripcionRegionD, 'ZZZZZ' RegionHasta, '' DescripcionRegionH,
	'' TipoClieDesde, '' DescripcionTipoClieD, 'ZZZZZ' TipoClieHasta, '' DescripcionTipoClieH,
	'' FormaDesde, '' DescripcionFormaD, 'ZZZ' FormaHasta,  '' DescripcionFormaH,
	' ' SucursalDesde, 'ZZZZ' SucursalHasta,
	Cast(0 As bit) FiltroXFecha, dbo.FechaActual() FechaDesde, dbo.FechaActual() FechaHasta, 
	stkHojaDeRuta.Estado, stkHojaDeRuta.Chofer, Cast(0 as bit) as ReporteDetallado
FROM stkHojaDeRuta 
LEFT JOIN genUsuarios ON (genUsuarios.genUsuarios = stkHojaDeRuta.Usuario_Id)
LEFT JOIN venReparto  ON (venReparto.venReparto = stkHojaDeRuta.venReparto)
LEFT JOIN venCamiones ON (venCamiones.venCamiones = stkHojaDeRuta.Patente_Id)
LEFT JOIN venCamiones venCamiones2 ON (venCamiones2.venCamiones = stkHojaDeRuta.PatenteAcoplado)
LEFT JOIN venFormaEntrega On venFormaEntrega.venFormaEntrega = stkHojaDeRuta.FormaEntrega_Id
Inner Join stkHojaSegmentos On stkHojaSegmentos.stkHojaDeRuta = stkHojaDeRuta.stkHojaDeRuta
INNER JOIN genSegmentos ON stkHojaSegmentos.Segmento_Id = genSegmentos.genSegmentos
Left Join venRepaSegmentos On venRepaSegmentos.venReparto = stkHojaDeRuta.venReparto
WHERE stkHojaDeRuta.stkHojaDeRuta = @lIdentity

Exec genAtributosGeneralesIdentityDatos @lIdentity, 'stkHojaDeRuta'
RETURN @@Error 
GO


DROP PROCEDURE stkHojaDeRutaDatos
GO
CREATE PROCEDURE stkHojaDeRutaDatos
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
As

Declare @pIdentity int= (select stkHojaDeRuta From stkHojaSegmentos
	Where
	stkHojaSegmentos.Empresa_id = @pEmpresa_id and 
	stkHojaSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_id) and 
	stkHojaSegmentos.Segmento1N = @pSegmento1N and 
	stkHojaSegmentos.Segmento2N = @pSegmento2N and 
	stkHojaSegmentos.Segmento3N = @pSegmento3N and 
	stkHojaSegmentos.Segmento4N = @pSegmento4N and 
	stkHojaSegmentos.Segmento1C = @pSegmento1C and 
	stkHojaSegmentos.Segmento2C = @pSegmento2C and 
	stkHojaSegmentos.Segmento3C = @pSegmento3C and 
	stkHojaSegmentos.Segmento4C = @pSegmento4C)

Exec stkHojaDeRutaIdentity @pIdentity

Select dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Remito, stkRemitos.stkMoviCabe,
genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
ISNULL(venClientes.Cliente_Id,'') Cliente_Id, ISNULL(venClientes.RazonSocial,'') RazonSocial, 
ISNULL(venFormaEntrega.FormaEntrega_Id,'') FormaEntrega_Id, 
ISNULL(venFormaEntrega.RazonSocial,'') ForEntregaRazonSocial,
venTiposClie.TipoClie_Id, venTiposClie.Descripcion DescripcionTiposClie, venRegion.Region_Id, 
venRegion.Descripcion DescripcionRegion, venZona.Zona_Id, venZona.Descripcion DescripcionZona,
conAsientos.Fecha FechaRegistro, Cast( 1 as bit ) Marcado,
ISNULL(stkHojaDeRuta.Patente_id,'') Patente_id, ISNULL(stkHojaDeRuta.PatenteAcoplado,'') PatenteAcoplado
From stkHojaDeRuta
Inner Join stkRemitos On stkRemitos.HojaRuta_Id = stkHojaDeRuta.stkHojaDeRuta
Inner Join conAsientos On conAsientos.conAsientos = stkRemitos.stkMoviCabe
LEFT JOIN (venClientes INNER JOIN venClieHabitual ON venClientes.genEntidades = venClieHabitual.genEntidades) ON
venClientes.genEntidades = stkRemitos.Cliente_Id AND venClieHabitual.Sucursal = stkRemitos.Sucursal
LEFT JOIN venFormaEntrega On venFormaEntrega.venFormaEntrega = stkHojaDeRuta.FormaEntrega_Id
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = stkRemitos.stkMoviCabe
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
Inner Join venTiposClie On venTiposClie.venTiposClie = venClieHabitual.TipoClie_Id
Inner Join venRegion On venRegion.venRegion = venClieHabitual.Region_Id
Inner Join venZona On venZona.venZona = venClieHabitual.Zona_Id
Where stkHojaDeRuta.stkHojaDeRuta = @pIdentity
UNION ALL
Select dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Remito, venMovimientos.venMovimientos,
genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
ISNULL(venClientes.Cliente_Id,'') Cliente_Id, ISNULL(venClientes.RazonSocial,'') RazonSocial, 
ISNULL(venFormaEntrega.FormaEntrega_Id,'') FormaEntrega_Id, 
ISNULL(venFormaEntrega.RazonSocial,'') ForEntregaRazonSocial,
venTiposClie.TipoClie_Id, venTiposClie.Descripcion DescripcionTiposClie, venRegion.Region_Id, 
venRegion.Descripcion DescripcionRegion, venZona.Zona_Id, venZona.Descripcion DescripcionZona,
conAsientos.Fecha FechaRegistro, Cast( 1 as bit ) Marcado,
ISNULL(stkHojaDeRuta.Patente_id,'') Patente_id, ISNULL(stkHojaDeRuta.PatenteAcoplado,'') PatenteAcoplado
From stkHojaDeRuta
Inner Join stkHojaDeRutaCuerpo On stkHojaDeRutaCuerpo.stkHojaDeRuta = stkHojaDeRuta.stkHojaDeRuta
Inner Join venMovimientos ON venMovimientos.venMovimientos = stkHojaDeRutaCuerpo.conAsientos
Inner Join conAsientos On conAsientos.conAsientos = venMovimientos.venMovimientos
LEFT JOIN (venClientes INNER JOIN venClieHabitual ON venClientes.genEntidades = venClieHabitual.genEntidades) ON
venClientes.genEntidades = venMovimientos.Cliente_Id AND venClieHabitual.Sucursal = venMovimientos.Sucursal
LEFT JOIN venFormaEntrega On venFormaEntrega.venFormaEntrega = stkHojaDeRuta.FormaEntrega_Id
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = venMovimientos.venMovimientos
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
Inner Join venTiposClie On venTiposClie.venTiposClie = venClieHabitual.TipoClie_Id
Inner Join venRegion On venRegion.venRegion = venClieHabitual.Region_Id
Inner Join venZona On venZona.venZona = venClieHabitual.Zona_Id
Where stkHojaDeRuta.stkHojaDeRuta = @pIdentity

GO


-- stkHojaDeRutaPendientes 1, 'RUT',0,0,0,0,' ',' ',' ',' ','RUT',' ',' ',' ','ZZZZ',' ','ZZZ',' ','ZZZ',' ','ZZZ',' ','ZZZ',1,'20200701','20200810'
DROP PROCEDURE stkHojaDeRutaPendientes
GO
CREATE PROCEDURE stkHojaDeRutaPendientes
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20),
@pFormaEntrega_Id VarChar(5) = NULL,
@pPatente_Id varChar(20),
@pPatenteAcoplado varChar(20) = null,
@pClienteDesde varChar(15),
@pClienteHasta varChar(15),
@pZonaDesde varChar(5),
@pZonaHasta varChar(5),
@pRegionDesde varChar(5),
@pRegionHasta varChar(5),
@pTipoClieDesde varChar(5),
@pTipoClieHasta varChar(5),
@pFormaDesde varChar(5),
@pFormaHasta varChar(5),
@pFiltroXFecha bit,
@pFechaHoraDesde Datetime = null,
@pFechaHoraHasta Datetime = null, 
@pSucursalDesde Varchar(4),
@pSucursalHasta Varchar(4)
)
As

Declare @pIdentity int= (select stkHojaDeRuta From stkHojaSegmentos
	Where
	stkHojaSegmentos.Empresa_id = @pEmpresa_id and 
	stkHojaSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_id) and 
	stkHojaSegmentos.Segmento1N = @pSegmento1N and 
	stkHojaSegmentos.Segmento2N = @pSegmento2N and 
	stkHojaSegmentos.Segmento3N = @pSegmento3N and 
	stkHojaSegmentos.Segmento4N = @pSegmento4N and 
	stkHojaSegmentos.Segmento1C = @pSegmento1C and 
	stkHojaSegmentos.Segmento2C = @pSegmento2C and 
	stkHojaSegmentos.Segmento3C = @pSegmento3C and 
	stkHojaSegmentos.Segmento4C = @pSegmento4C)

Exec stkHojaDeRutaIdentity @pIdentity

-- Primero los que ya existen y luego los que quiera agragar //
SELECT dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Remito, stkHojaDeRutaCuerpo.conAsientos stkMoviCabe,
genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
isnull(venClientes.Cliente_Id, venClientesF.Cliente_Id) Cliente_Id , 
isnull(venClientes.RazonSocial, venClientesF.RazonSocial) AS  RazonSocial, 
ISNULL(venFormaEntrega.FormaEntrega_Id,'') FormaEntrega_Id, 
ISNULL(venFormaEntrega.RazonSocial,'') ForEntregaRazonSocial, venTiposClie.TipoClie_Id, 
venTiposClie.Descripcion DescripcionTiposClie, venRegion.Region_Id, 
venRegion.Descripcion DescripcionRegion, venZona.Zona_Id, venZona.Descripcion DescripcionZona,
conAsientos.Fecha FechaRegistro, Cast( 1 as bit ) Marcado
FROM stkHojaDeRuta
INNER JOIN stkHojaDeRutaCuerpo ON stkHojaDeRutaCuerpo.stkHojaDeRuta = stkHojaDeRuta.stkHojaDeRuta
INNER JOIN conAsientos ON conAsientos.conAsientos = stkHojaDeRutaCuerpo.conAsientos
LEFT JOIN (stkRemitos 
		INNER JOIN venClientes  ON 	venClientes.genEntidades = stkRemitos.Cliente_Id 
		INNER JOIN venClieHabitual ON venClientes.genEntidades = venClieHabitual.genEntidades AND 
									   venClieHabitual.Sucursal = stkRemitos.Sucursal
		) ON stkRemitos.stkMoviCabe = stkHojaDeRutaCuerpo.conAsientos
LEFT JOIN (venMovimientos INNER JOIN venClientes venClientesF  ON 	venClientesF.genEntidades = venMovimientos.Cliente_Id 
		INNER JOIN venClieHabitual venClieHabitualF ON venClientesF.genEntidades = venClieHabitualF.genEntidades AND 
									   venClieHabitualF.Sucursal = venMovimientos.Sucursal
		) ON venMovimientos.venMovimientos = stkHojaDeRutaCuerpo.conAsientos

LEFT JOIN venFormaEntrega On venFormaEntrega.venFormaEntrega = stkHojaDeRuta.FormaEntrega_Id
INNER JOIN genAsiSegmentos On genAsiSegmentos.Asiento_Id = stkHojaDeRutaCuerpo.conasientos
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
LEFT JOIN venTiposClie On venTiposClie.venTiposClie = isnull(venClieHabitual.TipoClie_Id, venClieHabitualF.TipoClie_Id)
LEFT JOIN venRegion On venRegion.venRegion = ISNULL(venClieHabitual.Region_Id, venClieHabitualF.Region_Id)
LEFT JOIN venZona On venZona.venZona = ISNULL(venClieHabitual.Zona_Id,venClieHabitualF.Zona_Id)
WHERE stkHojaDeRuta.stkHojaDeRuta = @pIdentity
UNION ALL
SELECT dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Remito, stkRemitos.stkMoviCabe,
genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
venClientes.Cliente_Id, venClientes.RazonSocial, venFormaEntrega.FormaEntrega_Id, venFormaEntrega.RazonSocial ForEntregaRazonSocial,
venTiposClie.TipoClie_Id, venTiposClie.Descripcion DescripcionTiposClie, venRegion.Region_Id, 
venRegion.Descripcion DescripcionRegion, venZona.Zona_Id, venZona.Descripcion DescripcionZona,
conAsientos.Fecha FechaRegistro, Cast( 0 as bit ) Marcado
FROM stkRemitos
INNER JOIN conAsientos ON conAsientos.conAsientos = stkRemitos.stkMoviCabe
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = stkRemitos.stkMoviCabe
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
LEFT JOIN (venClientes INNER JOIN venClieHabitual ON venClientes.genEntidades = venClieHabitual.genEntidades) ON
venClientes.genEntidades = stkRemitos.Cliente_Id AND venClieHabitual.Sucursal = stkRemitos.Sucursal
LEFT JOIN venFormaEntrega ON venFormaEntrega.venFormaEntrega = ISNULL(stkRemitos.FormaEntrega_Id, venClieHabitual.FormaEntrega_Id)
LEFT JOIN venTiposClie ON venTiposClie.venTiposClie = venClieHabitual.TipoClie_Id
LEFT JOIN venRegion ON venRegion.venRegion = venClieHabitual.Region_Id
LEFT JOIN venZona ON venZona.venZona = venClieHabitual.Zona_Id
INNER JOIN genSucursalesEmpr ON genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
WHERE stkRemitos.HojaRuta_Id IS NULL AND conAsientos.Empresa_Id = @pEmpresa_Id AND
ISNULL(venClientes.Cliente_Id,'') Between @pClienteDesde And @pClienteHasta And
ISNULL(venZona.Zona_Id,'') Between @pZonaDesde And @pZonaHasta And
ISNULL(venRegion.Region_Id,'') Between @pRegionDesde And @pRegionHasta And
ISNULL(venTiposClie.TipoClie_Id,'') Between @pTipoClieDesde And @pTipoClieHasta And
ISNULL(venFormaEntrega.FormaEntrega_Id,'') Between @pFormaDesde And @pFormaHasta And
conAsientos.Fecha Between IsNull(@pFechaHoraDesde, conAsientos.Fecha) AND
IsNull(@pFechaHoraHasta, conAsientos.Fecha) 
and  venFormaEntrega.ExcluirDelReparto = 0  /* falta la forma de entrega en la remision */
and genSucursalesEmpr.Sucursal Between @pSucursalDesde and @pSucursalHasta
UNION ALL -- Facturas que no tienen Remito
SELECT dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Remito, venMovimientos.venMovimientos stkMoviCabe,
genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
venClientes.Cliente_Id, venClientes.RazonSocial, venFormaEntrega.FormaEntrega_Id, venFormaEntrega.RazonSocial ForEntregaRazonSocial,
venTiposClie.TipoClie_Id, venTiposClie.Descripcion DescripcionTiposClie, venRegion.Region_Id, 
venRegion.Descripcion DescripcionRegion, venZona.Zona_Id, venZona.Descripcion DescripcionZona,
conAsientos.Fecha FechaRegistro, Cast( 0 as bit ) Marcado

FROM venMovimientos
INNER JOIN conAsientos ON conAsientos.conAsientos = venMovimientos.venMovimientos
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = venMovimientos.venMovimientos
inner join genSegmentos on genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
INNER JOIN venClientes ON venClientes.genEntidades = venMovimientos.Cliente_Id 
INNER JOIN venClieHabitual ON venClieHabitual.genEntidades = venMovimientos.Cliente_Id AND 
							  venClieHabitual.Sucursal = venMovimientos.Sucursal
LEFT JOIN venFormaEntrega ON venFormaEntrega.venFormaEntrega = venMovimientos.FormaEntrega_Id
LEFT JOIN venTiposClie ON venTiposClie.venTiposClie = venClieHabitual.TipoClie_Id
LEFT JOIN venRegion ON venRegion.venRegion = venClieHabitual.Region_Id
LEFT JOIN venZona ON venZona.venZona = venClieHabitual.Zona_Id
INNER JOIN genSucursalesEmpr ON genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
WHERE 
venMovimientos.venTipoMov = 'F' AND 
NOT EXISTS(SELECT 1 FROM stkHojaDeRutaCuerpo WHERE stkHojaDeRutaCuerpo.conAsientos = venMovimientos.venMovimientos) and
NOT EXISTS(SELECT 1 FROM stkRemitos, venMovStkHist WHERE venMovStkHist.venMovimientos = venMovimientos.venMovimientos AND 
	venMovStkHist.stkMoviCabe = stkRemitos.stkMoviCabe) and
conAsientos.Empresa_Id = @pEmpresa_Id AND
ISNULL(venClientes.Cliente_Id,'') Between @pClienteDesde And @pClienteHasta And
ISNULL(venZona.Zona_Id,'') Between @pZonaDesde And @pZonaHasta And
ISNULL(venRegion.Region_Id,'') Between @pRegionDesde And @pRegionHasta And
ISNULL(venTiposClie.TipoClie_Id,'') Between @pTipoClieDesde And @pTipoClieHasta And
ISNULL(venFormaEntrega.FormaEntrega_Id,'') Between @pFormaDesde And @pFormaHasta And
conAsientos.Fecha Between IsNull(@pFechaHoraDesde, conAsientos.Fecha) AND
IsNull(@pFechaHoraHasta, conAsientos.Fecha) and 
venFormaEntrega.ExcluirDelReparto = 0  and 
genSucursalesEmpr.Sucursal Between @pSucursalDesde and @pSucursalHasta
ORDER BY 14 DESC, 13 ASC
GO



DROP PROCEDURE stkHojaDeRutaEliminar
GO
CREATE PROCEDURE stkHojaDeRutaEliminar
(
@lIdentity int
)
AS
SET NOCOUNT ON 

DELETE FROM stkHojaDeRuta 
WHERE stkHojaDeRuta.stkHojaDeRuta = @lIdentity
RETURN @@Error 
GO



DROP PROCEDURE stkHojaDeRutaPendientesCOT
GO
CREATE PROCEDURE stkHojaDeRutaPendientesCOT
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20),
@pUsuario INT,
@pFormaEntrega_Id VarChar(5) = NULL,
@pPatente_Id varChar(20),
@pPatenteAcoplado varChar(20) = null,
@pClienteDesde varChar(15),
@pClienteHasta varChar(15),
@pZonaDesde varChar(5),
@pZonaHasta varChar(5),
@pRegionDesde varChar(5),
@pRegionHasta varChar(5),
@pTipoClieDesde varChar(5),
@pTipoClieHasta varChar(5),
@pFormaDesde varChar(5),
@pFormaHasta varChar(5),
@pFiltroXFecha bit,
@pFechaHoraDesde Datetime = NULL,
@pFechaHoraHasta Datetime = NULL
)
AS
DECLARE @pIdentity int= (select stkHojaDeRuta From stkHojaSegmentos
	WHERE
	stkHojaSegmentos.Empresa_id = @pEmpresa_id and 
	stkHojaSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_id) and 
	stkHojaSegmentos.Segmento1N = @pSegmento1N and 
	stkHojaSegmentos.Segmento2N = @pSegmento2N and 
	stkHojaSegmentos.Segmento3N = @pSegmento3N and 
	stkHojaSegmentos.Segmento4N = @pSegmento4N and 
	stkHojaSegmentos.Segmento1C = @pSegmento1C and 
	stkHojaSegmentos.Segmento2C = @pSegmento2C and 
	stkHojaSegmentos.Segmento3C = @pSegmento3C and 
	stkHojaSegmentos.Segmento4C = @pSegmento4C)

EXEC stkHojaDeRutaIdentity @pIdentity

SELECT dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Remito, stkRemitos.stkMoviCabe,
genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
venClientes.Cliente_Id, venClientes.RazonSocial, venFormaEntrega.FormaEntrega_Id, venFormaEntrega.RazonSocial ForEntregaRazonSocial,
venTiposClie.TipoClie_Id, venTiposClie.Descripcion DescripcionTiposClie, venRegion.Region_Id, 
venRegion.Descripcion DescripcionRegion, venZona.Zona_Id, venZona.Descripcion DescripcionZona,
conAsientos.Fecha FechaRegistro, CAST(0 AS BIT) Marcado
FROM stkRemitos
INNER JOIN conAsientos ON conAsientos.conAsientos = stkRemitos.stkMoviCabe
INNER JOIN ((SELECT Sucursal FROM genSucursalesEmpr INNER JOIN 
(SELECT genSucursalesEmpr.Provincia_Id FROM genSucursalesEmpr INNER JOIN genUsuarios ON 
genSucursalesEmpr.genSucursalesEmpr = genUsuarios.Sucursal AND
genUsuarios.genUsuarios = @pUsuario) A ON A.Provincia_Id = genSucursalesEmpr.Provincia_Id)) SucProv	ON
conAsientos.Sucursal = SucProv.Sucursal
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = stkRemitos.stkMoviCabe
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
LEFT JOIN (venClientes INNER JOIN venClieHabitual ON venClientes.genEntidades = venClieHabitual.genEntidades) ON
venClientes.genEntidades = stkRemitos.Cliente_Id AND venClieHabitual.Sucursal = stkRemitos.Sucursal
LEFT JOIN venFormaEntrega ON venFormaEntrega.venFormaEntrega = venClieHabitual.FormaEntrega_Id
LEFT JOIN venTiposClie ON venTiposClie.venTiposClie = venClieHabitual.TipoClie_Id
LEFT JOIN venRegion ON venRegion.venRegion = venClieHabitual.Region_Id
LEFT JOIN venZona ON venZona.venZona = venClieHabitual.Zona_Id
WHERE stkRemitos.HojaRuta_Id IS NULL AND conAsientos.Empresa_Id = @pEmpresa_Id AND
ISNULL(venClientes.Cliente_Id,'') Between @pClienteDesde And @pClienteHasta And
ISNULL(venZona.Zona_Id,'') Between @pZonaDesde And @pZonaHasta And
ISNULL(venRegion.Region_Id,'') Between @pRegionDesde And @pRegionHasta And
ISNULL(venTiposClie.TipoClie_Id,'') Between @pTipoClieDesde And @pTipoClieHasta And
ISNULL(venFormaEntrega.FormaEntrega_Id,'') Between @pFormaDesde And @pFormaHasta And
conAsientos.Fecha Between IsNull(@pFechaHoraDesde, conAsientos.Fecha) AND
ISNULL(@pFechaHoraHasta, conAsientos.Fecha) AND
NOT EXISTS (SELECT 1 FROM stkCOTAr WHERE stkCOTAr.stkHojaDeRuta = stkRemitos.HojaRuta_Id)
ORDER BY 14 DESC, 13 ASC
GO


DROP PROCEDURE stkHojaDeRutaCerrarDatos
GO
CREATE PROCEDURE stkHojaDeRutaCerrarDatos
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
As

Declare @pIdentity int= (select stkHojaDeRuta From stkHojaSegmentos
	Where
	stkHojaSegmentos.Empresa_id = @pEmpresa_id and 
	stkHojaSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_id) and 
	stkHojaSegmentos.Segmento1N = @pSegmento1N and 
	stkHojaSegmentos.Segmento2N = @pSegmento2N and 
	stkHojaSegmentos.Segmento3N = @pSegmento3N and 
	stkHojaSegmentos.Segmento4N = @pSegmento4N and 
	stkHojaSegmentos.Segmento1C = @pSegmento1C and 
	stkHojaSegmentos.Segmento2C = @pSegmento2C and 
	stkHojaSegmentos.Segmento3C = @pSegmento3C and 
	stkHojaSegmentos.Segmento4C = @pSegmento4C)

SELECT genSegmentos.Segmento_Id, stkHojaSegmentos.Segmento1C, stkHojaSegmentos.Segmento2C,
stkHojaSegmentos.Segmento3C, stkHojaSegmentos.Segmento4C, stkHojaSegmentos.Segmento1N, stkHojaSegmentos.Segmento2N, 
stkHojaSegmentos.Segmento3N, stkHojaSegmentos.Segmento4N, 
stkHojaDeRuta.FechaRegistro, stkHojaDeRuta.Estado
from stkHojaDeRuta inner join stkHojaSegmentos ON 
stkHojaDeRuta.stkHojaDeRuta = stkHojaSegmentos.stkHojaDeRuta
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = stkHojaSegmentos.Segmento_Id
WHERE
	stkHojaDeRuta.stkHojaDeRuta = @pIdentity


Select dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Remito, stkRemitos.stkMoviCabe,
genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
ISNULL(venClientes.Cliente_Id,'') Cliente_Id, ISNULL(venClientes.RazonSocial,'') RazonSocial, 
ISNULL(venFormaEntrega.FormaEntrega_Id,'') FormaEntrega_Id, 
ISNULL(venFormaEntrega.RazonSocial,'') ForEntregaRazonSocial,
venTiposClie.TipoClie_Id, venTiposClie.Descripcion DescripcionTiposClie, venRegion.Region_Id, 
venRegion.Descripcion DescripcionRegion, venZona.Zona_Id, venZona.Descripcion DescripcionZona,
conAsientos.Fecha FechaRegistro, Cast( 1 as bit ) Marcado,
ISNULL(stkHojaDeRuta.Patente_id,'') Patente_id, ISNULL(stkHojaDeRuta.PatenteAcoplado,'') PatenteAcoplado
From stkHojaDeRuta
Inner Join stkRemitos On stkRemitos.HojaRuta_Id = stkHojaDeRuta.stkHojaDeRuta
Inner Join conAsientos On conAsientos.conAsientos = stkRemitos.stkMoviCabe
LEFT JOIN (venClientes INNER JOIN venClieHabitual ON venClientes.genEntidades = venClieHabitual.genEntidades) ON
venClientes.genEntidades = stkRemitos.Cliente_Id AND venClieHabitual.Sucursal = stkRemitos.Sucursal
LEFT JOIN venFormaEntrega On venFormaEntrega.venFormaEntrega = stkHojaDeRuta.FormaEntrega_Id
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = stkRemitos.stkMoviCabe
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
Inner Join venTiposClie On venTiposClie.venTiposClie = venClieHabitual.TipoClie_Id
Inner Join venRegion On venRegion.venRegion = venClieHabitual.Region_Id
Inner Join venZona On venZona.venZona = venClieHabitual.Zona_Id
Where stkHojaDeRuta.stkHojaDeRuta = @pIdentity
UNION ALL
Select dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Remito, venMovimientos.venMovimientos,
genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
ISNULL(venClientes.Cliente_Id,'') Cliente_Id, ISNULL(venClientes.RazonSocial,'') RazonSocial, 
ISNULL(venFormaEntrega.FormaEntrega_Id,'') FormaEntrega_Id, 
ISNULL(venFormaEntrega.RazonSocial,'') ForEntregaRazonSocial,
venTiposClie.TipoClie_Id, venTiposClie.Descripcion DescripcionTiposClie, venRegion.Region_Id, 
venRegion.Descripcion DescripcionRegion, venZona.Zona_Id, venZona.Descripcion DescripcionZona,
conAsientos.Fecha FechaRegistro, Cast( 1 as bit ) Marcado,
ISNULL(stkHojaDeRuta.Patente_id,'') Patente_id, ISNULL(stkHojaDeRuta.PatenteAcoplado,'') PatenteAcoplado
From stkHojaDeRuta
Inner Join stkHojaDeRutaCuerpo On stkHojaDeRutaCuerpo.stkHojaDeRuta = stkHojaDeRuta.stkHojaDeRuta
Inner Join venMovimientos ON venMovimientos.venMovimientos = stkHojaDeRutaCuerpo.conAsientos
Inner Join conAsientos On conAsientos.conAsientos = venMovimientos.venMovimientos
LEFT JOIN (venClientes INNER JOIN venClieHabitual ON venClientes.genEntidades = venClieHabitual.genEntidades) ON
venClientes.genEntidades = venMovimientos.Cliente_Id AND venClieHabitual.Sucursal = venMovimientos.Sucursal
LEFT JOIN venFormaEntrega On venFormaEntrega.venFormaEntrega = stkHojaDeRuta.FormaEntrega_Id
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = venMovimientos.venMovimientos
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
Inner Join venTiposClie On venTiposClie.venTiposClie = venClieHabitual.TipoClie_Id
Inner Join venRegion On venRegion.venRegion = venClieHabitual.Region_Id
Inner Join venZona On venZona.venZona = venClieHabitual.Zona_Id
Where stkHojaDeRuta.stkHojaDeRuta = @pIdentity

GO



DROP PROCEDURE stkHojaDeRutaCambiarEstado
GO
CREATE PROCEDURE stkHojaDeRutaCambiarEstado
(
@pstkHojaDeRuta int, 
@pEstado Char(1)
)
As

Update stkHojaDeRuta SET Estado = @pEstado Where stkHojaDeRuta = @pstkHojaDeRuta
GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkHojaDeRutaCuerpo.sql*/
DROP PROCEDURE stkHojaDeRutaCuerpoGuardar
GO
CREATE PROCEDURE stkHojaDeRutaCuerpoGuardar
(
@pstkHojaDeRuta int,
@pconAsientos bigint
)
AS
BEGIN 
	INSERT INTO stkHojaDeRutaCuerpo
	(
		stkHojaDeRuta,
		conAsientos
	)
	VALUES 
	(
		@pstkHojaDeRuta,
		@pconAsientos
	)
END 

GO

DROP PROCEDURE stkHojaDeRutaCuerpoDatos
GO
CREATE PROCEDURE stkHojaDeRutaCuerpoDatos
(
@pstkHojaDeRuta int = null,
@pconAsientos bigint = null
)
AS
SET NOCOUNT ON 

SELECT stkHojaDeRutaCuerpo.stkHojaDeRuta, stkHojaDeRutaCuerpo.conAsientos, 
dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, 
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, 
genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as Comprobante, 
dbo.Segmento(stkHojaSegmentos.Segmento_Id, stkHojaSegmentos.Segmento1C, stkHojaSegmentos.Segmento2C, 
stkHojaSegmentos.Segmento3C, stkHojaSegmentos.Segmento4C, stkHojaSegmentos.Segmento1N, 
stkHojaSegmentos.Segmento2N, stkHojaSegmentos.Segmento3N, stkHojaSegmentos.Segmento4N) as HojaRuta 
FROM stkHojaDeRutaCuerpo 
inner join genAsiSegmentos ON genAsiSegmentos.Asiento_Id = stkHojaDeRutaCuerpo.conAsientos
inner join stkHojaSegmentos  ON  stkHojaSegmentos.stkHojaDeRuta = stkHojaDeRutaCuerpo.stkHojaDeRuta
WHERE 
stkHojaDeRutaCuerpo.stkHojaDeRuta = ISNULL(@pstkHojaDeRuta,stkHojaDeRutaCuerpo.stkHojaDeRuta) AND 
stkHojaDeRutaCuerpo.conAsientos =  ISNULL(@pconAsientos,stkHojaDeRutaCuerpo.conAsientos)
RETURN @@Error 

GO

DROP PROCEDURE stkHojaDeRutaCuerpoEliminar
GO
CREATE PROCEDURE stkHojaDeRutaCuerpoEliminar
(
@pstkHojaDeRuta int,
@pconAsientos bigint = null
)
AS
SET NOCOUNT ON 

DELETE FROM stkHojaDeRutaCuerpo 
WHERE (stkHojaDeRuta = @pstkHojaDeRuta)
AND (conAsientos = ISNULL(@pconAsientos,conAsientos))
 
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkHojaSegmentos.sql*/
DROP PROCEDURE stkHojaSegmentosGuardar
GO
CREATE PROCEDURE stkHojaSegmentosGuardar
(
@pEmpresa_Id int,
@pSegmento_Id varChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pstkHojaDeRuta int,
@pTieneAutomatico bit
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkHojaSegmentos 
		WHERE (Empresa_Id = @pEmpresa_Id) AND 
		(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
		(Segmento1N = @pSegmento1N) AND 
		(Segmento2N = @pSegmento2N) AND 
		(Segmento3N = @pSegmento3N) AND 
		(Segmento4N = @pSegmento4N) AND 
		(Segmento1C = @pSegmento1C) AND 
		(Segmento2C = @pSegmento2C) AND 
		(Segmento3C = @pSegmento3C) AND 
		(Segmento4C = @pSegmento4C)))
BEGIN 
	UPDATE stkHojaSegmentos
	SET		Empresa_Id = @pEmpresa_Id,
		stkHojaDeRuta = @pstkHojaDeRuta
	WHERE (Empresa_Id = @pEmpresa_Id) AND 
		(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
		(Segmento1N = @pSegmento1N) AND 
		(Segmento2N = @pSegmento2N) AND 
		(Segmento3N = @pSegmento3N) AND 
		(Segmento4N = @pSegmento4N) AND 
		(Segmento1C = @pSegmento1C) AND 
		(Segmento2C = @pSegmento2C) AND 
		(Segmento3C = @pSegmento3C) AND 
		(Segmento4C = @pSegmento4C)
END 
ELSE 
BEGIN

	If @pTieneAutomatico = 1
	Begin
		SET @pSegmento1N = (SELECT MAX(stkHojaSegmentos.Segmento1N)+1 AS Segmento1N 
				FROM stkHojaSegmentos 
					Where				
					stkHojaSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) AND 
					stkHojaSegmentos.Segmento2N = @pSegmento2N AND 
					stkHojaSegmentos.Segmento3N = @pSegmento3N AND 
					stkHojaSegmentos.Segmento4N = @pSegmento4N AND 
					stkHojaSegmentos.Segmento1C = @pSegmento1C AND 
					stkHojaSegmentos.Segmento2C = @pSegmento2C AND 
					stkHojaSegmentos.Segmento3C = @pSegmento3C AND 
					stkHojaSegmentos.Segmento4C = @pSegmento4C And
					stkHojaSegmentos.Empresa_Id = @pEmpresa_Id)
		
		If @pSegmento1N Is Null
			SET @pSegmento1N = (SELECT genContadorSegmento.PrimerNumero AS Segmento1N 
				FROM genContadorSegmento Where 
					(genContadorSegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
					(genContadorSegmento.Segmento2N = @pSegmento2N) AND 
					(genContadorSegmento.Segmento3N = @pSegmento3N) AND 
					(genContadorSegmento.Segmento4N = @pSegmento4N) AND 
					(genContadorSegmento.Segmento1C = @pSegmento1C) AND 
					(genContadorSegmento.Segmento2C = @pSegmento2C) AND 
					(genContadorSegmento.Segmento3C = @pSegmento3C) AND 
					(genContadorSegmento.Segmento4C = @pSegmento4C) And
					genContadorSegmento.Empresa_Id = @pEmpresa_Id)

		-- esto solo pasa si empieza en 1 esta prendido
			if @pSegmento1N is null or @pSegmento1N < 0
			begin
				set @pSegmento1N = 1
			end	
	End

	INSERT INTO stkHojaSegmentos
	(
		Empresa_Id,
		Segmento_Id,
		Segmento1N,
		Segmento2N,
		Segmento3N,
		Segmento4N,
		Segmento1C,
		Segmento2C,
		Segmento3C,
		Segmento4C,
		stkHojaDeRuta
	)
	VALUES 
	(
		@pEmpresa_Id,
		dbo.FuncFKgenSegmentos(@pSegmento_Id),
		@pSegmento1N,
		@pSegmento2N,
		@pSegmento3N,
		@pSegmento4N,
		@pSegmento1C,
		@pSegmento2C,
		@pSegmento3C,
		@pSegmento4C,
		@pstkHojaDeRuta
	)
END

SELECT @pSegmento1N as RetVal

GO

DROP PROCEDURE stkHojaSegmentosDatos
GO
CREATE PROCEDURE stkHojaSegmentosDatos
(
@pEmpresa_Id int,
@pSegmento_Id varChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20)
)
AS
SET NOCOUNT ON 

SELECT stkHojaSegmentos.Empresa_Id, genSegmentos.Segmento_Id, genSegmentos.Descripcion as DescripcionSegmentos, stkHojaSegmentos.Segmento1N,
	stkHojaSegmentos.Segmento2N, stkHojaSegmentos.Segmento3N, stkHojaSegmentos.Segmento4N, stkHojaSegmentos.Segmento1C,
	stkHojaSegmentos.Segmento2C, stkHojaSegmentos.Segmento3C, stkHojaSegmentos.Segmento4C, stkHojaSegmentos.stkHojaDeRuta,
	genSegmentos.TieneColumnaAutomatica
FROM stkHojaSegmentos 
INNER JOIN genSegmentos ON (genSegmentos.genSegmentos = stkHojaSegmentos.Segmento_Id)
WHERE (stkHojaSegmentos.Empresa_Id = @pEmpresa_Id)
AND genSegmentos.Segmento_Id = @pSegmento_Id
AND (Segmento1N = @pSegmento1N)
AND (Segmento2N = @pSegmento2N)
AND (Segmento3N = @pSegmento3N)
AND (Segmento4N = @pSegmento4N)
AND (Segmento1C = @pSegmento1C)
AND (Segmento2C = @pSegmento2C)
AND (Segmento3C = @pSegmento3C)
AND (Segmento4C = @pSegmento4C)
 
 RETURN @@Error 

GO

DROP PROCEDURE stkHojaSegmentosEliminar
GO
CREATE PROCEDURE stkHojaSegmentosEliminar
(
@pEmpresa_Id int,
@pSegmento_Id varchar(10),
@pSegmento1N int = NULL,
@pSegmento2N int = NULL,
@pSegmento3N int = NULL,
@pSegmento4N int = NULL,
@pSegmento1C varchar(20) = NULL,
@pSegmento2C varchar(20) = NULL,
@pSegmento3C varchar(20) = NULL,
@pSegmento4C varchar(20) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkHojaSegmentos 
WHERE (Empresa_Id = dbo.FuncFKgenEmpresas(@pEmpresa_Id))
AND (Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id))
AND (Segmento1N = ISNULL(@pSegmento1N, Segmento1N))
AND (Segmento2N = ISNULL(@pSegmento2N, Segmento2N))
AND (Segmento3N = ISNULL(@pSegmento3N, Segmento3N))
AND (Segmento4N = ISNULL(@pSegmento4N, Segmento4N))
AND (Segmento1C = ISNULL(@pSegmento1C, Segmento1C))
AND (Segmento2C = ISNULL(@pSegmento2C, Segmento2C))
AND (Segmento3C = ISNULL(@pSegmento3C, Segmento3C))
AND (Segmento4C = ISNULL(@pSegmento4C, Segmento4C))
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkInvenSegmentos.sql*/
DROP PROCEDURE stkInvenSegmentosInsertar
GO
CREATE PROCEDURE stkInvenSegmentosInsertar
(
@pstkInventarios int,
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20), 
@pAutomatico bit
)
AS
if ((@pAutomatico=1) and (@pSegmento1N=0)) 
begin


	SET @pSegmento1N = (SELECT isnull(max(stkInvenSegmentos.Segmento1N),0)+1 AS Segmento1N
	FROM stkInvenSegmentos 
	WHERE 
	stkInvenSegmentos.Empresa_id = @pEmpresa_id and 
	stkInvenSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_id) and 
	stkInvenSegmentos.Segmento2N = @pSegmento2N and 
	stkInvenSegmentos.Segmento3N = @pSegmento3N and 
	stkInvenSegmentos.Segmento4N = @pSegmento4N and 
	stkInvenSegmentos.Segmento1C = @pSegmento1C and 
	stkInvenSegmentos.Segmento2C = @pSegmento2C and 
	stkInvenSegmentos.Segmento3C = @pSegmento3C and 
	stkInvenSegmentos.Segmento4C = @pSegmento4C )

	-- esto solo pasa si empieza en 1 esta prendido
			if @pSegmento1N is null or @pSegmento1N < 0
			begin
				set @pSegmento1N = 1
			end	


end


INSERT INTO stkInvenSegmentos
(
	stkInventarios,
	Empresa_Id,
	Segmento_Id,
	Segmento1N,
	Segmento2N,
	Segmento3N,
	Segmento4N,
	Segmento1C,
	Segmento2C,
	Segmento3C,
	Segmento4C
)
VALUES 
(
	@pstkInventarios,
	@pEmpresa_Id,
	dbo.FuncFKgenSegmentos(@pSegmento_id),
	@pSegmento1N,
	@pSegmento2N,
	@pSegmento3N,
	@pSegmento4N,
	@pSegmento1C,
	@pSegmento2C,
	@pSegmento3C,
	@pSegmento4C
)
	
SELECT @pSegmento1N as RetVal

GO

DROP PROCEDURE stkInvenSegmentosDatos
GO
CREATE PROCEDURE stkInvenSegmentosDatos
(
@pEmpresa_id int, 
@pSegmento_id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
AS
SET NOCOUNT ON 

SELECT genSegmentos.genSegmentos,
	stkInvenSegmentos.Empresa_Id, genSegmentos.Segmento_Id, genSegmentos.Descripcion as DescripcionSegmentos,
	stkInvenSegmentos.Segmento1N, stkInvenSegmentos.Segmento2N, stkInvenSegmentos.Segmento3N, stkInvenSegmentos.Segmento4N,
	stkInvenSegmentos.Segmento1C, stkInvenSegmentos.Segmento2C, stkInvenSegmentos.Segmento3C, stkInvenSegmentos.Segmento4C
FROM stkInvenSegmentos 
INNER JOIN genSegmentos  ON (genSegmentos.genSegmentos = stkInvenSegmentos.Segmento_Id)
WHERE 
stkInvenSegmentos.Empresa_id = @pEmpresa_id and 
genSegmentos.Segmento_id = @pSegmento_id and 
stkInvenSegmentos.Segmento1N = @pSegmento1N and 
stkInvenSegmentos.Segmento2N = @pSegmento2N and 
stkInvenSegmentos.Segmento3N = @pSegmento3N and 
stkInvenSegmentos.Segmento4N = @pSegmento4N and 
stkInvenSegmentos.Segmento1C = @pSegmento1C and 
stkInvenSegmentos.Segmento2C = @pSegmento2C and 
stkInvenSegmentos.Segmento3C = @pSegmento3C and 
stkInvenSegmentos.Segmento4C = @pSegmento4C 
 
 RETURN @@Error 

GO

DROP PROCEDURE stkInvenSegmentosEliminar
GO
CREATE PROCEDURE stkInvenSegmentosEliminar
(
@pEmpresa_id int, 
@pSegmento_id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
AS
SET NOCOUNT ON 

DELETE FROM stkInvenSegmentos 
WHERE 
stkInvenSegmentos.Empresa_id = @pEmpresa_id and 
stkInvenSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_id) and 
stkInvenSegmentos.Segmento1N = @pSegmento1N and 
stkInvenSegmentos.Segmento2N = @pSegmento2N and 
stkInvenSegmentos.Segmento3N = @pSegmento3N and 
stkInvenSegmentos.Segmento4N = @pSegmento4N and 
stkInvenSegmentos.Segmento1C = @pSegmento1C and 
stkInvenSegmentos.Segmento2C = @pSegmento2C and 
stkInvenSegmentos.Segmento3C = @pSegmento3C and 
stkInvenSegmentos.Segmento4C = @pSegmento4C 
 
 RETURN @@Error 

GO





Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkInventario.sql*/
--select * from stkInventarios
--select * from stkInventCuerpo
--select * from stkInvenSegmentos
--Exec stkInventarioDatos 1, 'INV', 3, 0, 0, 0, '0001', '', '', ''

drop procedure stkInventarioDatos
go
create procedure stkInventarioDatos
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20)
)
as
SET NOCOUNT ON

declare @stkInventario as int
set @stkInventario =(select stkInventarios 
from stkInvenSegmentos 
where (Empresa_Id = @pEmpresa_Id) AND 
	(Segmento_Id = dbo.FuncFkgenSegmentos(@pSegmento_Id)) AND 
	(Segmento1N = @pSegmento1N) AND 
	(Segmento2N = @pSegmento2N) AND 
	(Segmento3N = @pSegmento3N) AND 
	(Segmento4N = @pSegmento4N) AND 
	(Segmento1C = @pSegmento1C) AND 
	(Segmento2C = @pSegmento2C) AND 
	(Segmento3C = @pSegmento3C) AND 
	(Segmento4C = @pSegmento4C))

select stkInventarios.stkInventarios, stkInvenSegmentos.Empresa_Id,
stkInvenSegmentos.Segmento1N, stkInvenSegmentos.Segmento2N, stkInvenSegmentos.Segmento3N, stkInvenSegmentos.Segmento4N,
stkInvenSegmentos.Segmento1C, stkInvenSegmentos.Segmento2C, stkInvenSegmentos.Segmento3C,
stkInvenSegmentos.Segmento4C,
stkInventarios.FechaInventario, stkInventarios.FechaCarga, stkDepositos.Deposito_Id, stkInventarios.FechaAutorizo,
UsuarioAuto.genUsuarios as UsuarioAutorizo, UsuarioRespo.Usuario_Id as UsuRespo_Id, genUsuarios.Usuario_Id,
stkInventarios.Posteado, ' ' as Desde, ' ' as Hasta, ' ' as Segmento_Id, ' ' as Apellido_y_Nombres, ' ' as DescripcionDeposito,
' ' as ExtencionArchivo, '' as FamiliaDesde, '' as FamiliaHasta, '' as GrupoDesde, '' as GrupoHasta, conCentro1.Centro1_Id, conCentro1.Descripcion Centro1Descripcion,
conCentro2.Centro2_Id, conCentro2.Descripcion Centro2Descripcion
From stkInventarios
inner join stkInvenSegmentos on stkInventarios.stkInventarios=stkInvenSegmentos.stkInventarios
inner join genUsuarios on stkInventarios.Usuario_Id=genUsuarios.genUsuarios
inner join stkDepositos on stkInventarios.Deposito_Id=stkDepositos.stkDepositos
inner join genUsuarios UsuarioRespo on stkInventarios.UsuRespo_Id=UsuarioRespo.genUsuarios
left join genUsuarios UsuarioAuto on UsuarioAuto.genUsuarios=stkInventarios.UsuarioAutorizo
Left Join conCentro1 On conCentro1.conCentro1 = stkInventarios.Centro1_Id
Left Join conCentro2 On conCentro2.conCentro2 = stkInventarios.Centro2_Id
where @stkInventario=stkInventarios.stkInventarios


Select stkProductos.Producto_Id, Cantidad, stkUniMed.Medida_Id, CantidadAlterna, UniMedAlterna.Medida_Id as MedidaAlterna_Id, stkProductos.Descripcion as DescripcionProducto
from stkInventCuerpo
inner join stkProductos on stkInventCuerpo.Producto_Id=stkProductos.stkProductos
inner join stkUniMed on stkProductos.Medida_Id=stkUniMed.stkUniMed
left join stkUniMed UniMedAlterna on stkProductos.MedidaAlterna=stkUniMed.stkUniMed
where stkInventarios=@stkInventario

Exec genAtributosGeneralesIdentityDatos @stkInventario, 'stkInventarios'

Exec stkInventDespachoDatos @stkInventario
Exec stkInventSerieDatos @stkInventario

return @@error
go

drop procedure stkInventarioGuardar
go
create procedure stkInventarioGuardar
(
@pDeposito_Id varchar(15),
@pFechaInventario datetime,
@pFechaCarga datetime,
@pFechaAutorizo datetime=null,
@pUsuarioAutorizo int=null,
@pUsuRespo_Id varchar(25),
@pCentro1_Id varChar(8) = Null,
@pCentro2_Id varChar(8) = Null,
@pUsuario_Id int,
@pPosteado SiNo,

@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pTieneAutomatico bit
)
as
SET NOCOUNT ON
set @pDeposito_Id=dbo.FuncFKstkDepositos(@pDeposito_Id)
set @pUsuRespo_Id=dbo.FuncFKgenUsuarios(@pUsuRespo_Id)
DECLARE @pstkInventarios as Int
SET @pstkInventarios = (SELECT stkInventarios 
	FROM stkInvenSegmentos WHERE 
	(Empresa_Id = @pEmpresa_Id) AND 
	(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
	(Segmento1N = @pSegmento1N) AND 
	(Segmento2N = @pSegmento2N) AND 
	(Segmento3N = @pSegmento3N) AND 
	(Segmento4N = @pSegmento4N) AND 
	(Segmento1C = @pSegmento1C) AND 
	(Segmento2C = @pSegmento2C) AND 
	(Segmento3C = @pSegmento3C) AND 
	(Segmento4C = @pSegmento4C))
if(@pstkInventarios is not null)
begin
	update stkInventarios set
	Deposito_Id = @pDeposito_Id,
	FechaInventario = @pFechaInventario,
	FechaCarga = @pFechaCarga,
	FechaAutorizo = @pFechaAutorizo,
	UsuarioAutorizo = @pUsuarioAutorizo,
	UsuRespo_Id = @pUsuRespo_Id,
	Centro1_Id = dbo.FuncFKconCentro1(@pCentro1_Id),
	Centro2_Id = dbo.FuncFKconCentro2(@pCentro2_Id),
	Usuario_Id = @pUsuario_Id,
	Posteado = @pPosteado
	where stkInventarios = @pstkInventarios
end
else
begin

if ((@pTieneAutomatico=1) AND (@pSegmento1N = 0))
		BEGIN
			
			set @pSegmento1N = ISNULL((SELECT MAX(Segmento1N) 
				FROM stkInvenSegmentos inner join genSegmentos ON
				stkInvenSegmentos.Segmento_id = genSegmentos.genSegmentos
				WHERE
				(stkInvenSegmentos.Empresa_Id = @pEmpresa_Id) AND 
				(genSegmentos.Segmento_Id = @pSegmento_Id) AND 
				(Segmento2N = @pSegmento2N) AND 
				(Segmento3N = @pSegmento3N) AND 
				(Segmento4N = @pSegmento4N) AND 
				(Segmento1C = @pSegmento1C) AND 
				(Segmento2C = @pSegmento2C) AND 
				(Segmento3C = @pSegmento3C) AND 
				(Segmento4C = @pSegmento4C)),0) + 1

		END

insert into stkInventarios
(
	Deposito_Id,
	FechaInventario,
	FechaCarga,
	FechaAutorizo,
	UsuarioAutorizo,
	UsuRespo_Id,
	Centro1_Id,
	Centro2_Id,
	Usuario_Id,
	Posteado
)
Values
(
	@pDeposito_Id,
	@pFechaInventario,
	@pFechaCarga,
	@pFechaAutorizo,
	@pUsuarioAutorizo,
	@pUsuRespo_Id,
	dbo.FuncFKconCentro1(@pCentro1_Id),
	dbo.FuncFKconCentro2(@pCentro2_Id),
	@pUsuario_Id,
	@pPosteado
)
SET @pstkInventarios =  Cast(SCOPE_IDENTITY() as int) 
end
Select @pstkInventarios as RetVal 
go

drop procedure stkInventarioEliminar
go
create procedure stkInventarioEliminar
(
@pstkInventario int
)
as
SET NOCOUNT ON
delete from stkInventarios where stkInventarios=@pstkInventario
return @@error
go

DROP PROCEDURE stkInventarioDatosInt
GO
CREATE PROCEDURE stkInventarioDatosInt
( @pstkInventarios int)
as
	select stkInvenSegmentos.stkInventarios, stkInvenSegmentos.Empresa_Id, 
	stkInvenSegmentos.Segmento1N,stkInvenSegmentos.Segmento2N, stkInvenSegmentos.Segmento3N, stkInvenSegmentos.Segmento4N, 
	stkInvenSegmentos.Segmento1C, stkInvenSegmentos.Segmento2C, stkInvenSegmentos.Segmento3C, stkInvenSegmentos.Segmento4C
	from stkInvenSegmentos
	Where
	stkInvenSegmentos.stkInventarios = @pstkInventarios

go

drop procedure stkAgregarListaProductos
go
create procedure stkAgregarListaProductos
(
@pProductoDesde_Id varchar(25),
@pProductoHasta_Id varchar(25),
@pFamiliaDesde varchar(15),
@pFamiliaHasta varchar(15),
@pGrupoDesde varchar(15),
@pGrupoHasta varchar(15),
@pEmpresa_Id Int
)
as
set nocount on
select Producto_Id, stkProductos.Descripcion, stkUniMed.Medida_Id, stkUniMedAlterna.Medida_Id as MedidaAlterna from stkProductos
inner join stkUniMed on stkUniMed=stkProductos.Medida_Id
left join stkUniMed as stkUniMedAlterna on stkUniMedAlterna.stkUniMed=stkProductos.MedidaAlterna
left join stkFamilias on stkProductos.Familia_Id=stkFamilias.stkFamilias
left join stkGrupos on stkGrupos.stkGrupos=stkProductos.Grupo_Id
where stkProductos.Producto_Id Between @pProductoDesde_Id and @pProductoHasta_Id  and 
ISNULL(stkFamilias.Familia_Id,' ') BETWEEN @pFamiliaDesde and @pFamiliaHasta and
ISNULL(stkGrupos.Grupo_Id,' ') between @pGrupoDesde and @pGrupoHasta and
	(Clase='E' or Clase='-') and stkProductos.Inactivo = 0 and stkProductos.Posteado = 1 and
ISNULL(stkProductos.Empresa_Id,@pEmpresa_Id) = @pEmpresa_Id
go

drop procedure stkInventariosAutorizar
go
create procedure stkInventariosAutorizar
(
@pstkInventarios int,
@pUsuarioAutorizo int
)
as
set nocount on
update stkInventarios set UsuarioAutorizo=@pUsuarioAutorizo, FechaAutorizo=getdate() where stkInventarios=@pstkInventarios
go



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkInventCuerpo.sql*/
DROP PROCEDURE stkInventCuerpoInsertar
GO
CREATE PROCEDURE stkInventCuerpoInsertar
(
@pstkInventarios int,
@pProducto_Id VarChar(25),
@pCantidad numeric(15,8),
@pCantidadAlterna numeric(15,8)
)
AS
	INSERT INTO stkInventCuerpo
	(
		stkInventarios,
		Producto_Id,
		Cantidad,
		CantidadAlterna
	)
	VALUES 
	(
		@pstkInventarios,
		dbo.FuncFKstkProductos(@pProducto_Id),
		@pCantidad,
		@pCantidadAlterna
	)

GO

DROP PROCEDURE stkInventCuerpoEliminar
GO
CREATE PROCEDURE stkInventCuerpoEliminar
(
@pstkInventarios int,
@pProducto_Id VarChar(25) = Null
)
AS
SET NOCOUNT ON 

DELETE FROM stkInventCuerpo 
WHERE (stkInventarios = @pstkInventarios)
AND (@pProducto_Id IS NULL OR Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkInventDespacho.sql*/
DROP PROCEDURE stkInventDespachoInsertar
GO
CREATE PROCEDURE stkInventDespachoInsertar
(
@pstkInventarios int,
@pProducto_Id VarChar(25),
@pDespacho_Id varchar(20),
@pCantidad qCantidadD8
)
AS

INSERT INTO stkInventDespacho
(
	stkInventarios,
	Producto_Id,
	Despacho_Id,
	Cantidad
)
VALUES 
(
	@pstkInventarios,
	dbo.FuncFKstkProductos(@pProducto_Id),
	dbo.FuncFKcomDespachos(@pDespacho_Id),
	@pCantidad
)


GO

DROP PROCEDURE stkInventDespachoDatos
GO
CREATE PROCEDURE stkInventDespachoDatos
(
@pstkInventarios int
)
AS
SET NOCOUNT ON 

SELECT stkInventDespacho.stkInventarios, stkProductos.Producto_Id, comDespachos.Despacho_Id, stkInventDespacho.Cantidad
FROM stkInventDespacho
Inner Join stkProductos On stkProductos.stkProductos = stkInventDespacho.Producto_Id
INNER JOIN comDespachos ON (comDespachos.comDespachos = stkInventDespacho.Despacho_Id)
WHERE stkInventDespacho.stkInventarios = @pstkInventarios
 
RETURN @@Error 

GO

DROP PROCEDURE stkInventDespachoEliminar
GO
CREATE PROCEDURE stkInventDespachoEliminar
(
@pstkInventarios int,
@pProducto_Id VarChar(25) = Null,
@pDespacho_Id varchar(20) = Null
)
AS
SET NOCOUNT ON 

DELETE FROM stkInventDespacho 
WHERE (stkInventarios = @pstkInventarios)
AND Producto_Id = isNull(dbo.FuncFKstkProductos(@pProducto_Id), Producto_Id)
AND Despacho_Id = isNull(dbo.FuncFKcomDespachos(@pDespacho_Id), Despacho_Id)
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkInventSerie.sql*/
--Exec stkInventSerieDatos 6

DROP PROCEDURE stkInventSerieGuardar
GO
CREATE PROCEDURE stkInventSerieGuardar
(
@pstkInventarios int,
@pProducto_Id VarChar(25),
@pSerie varchar(25),
@pCantidad qCantidadD8
)
AS

INSERT INTO stkInventSerie
(
	stkInventarios,
	Producto_Id,
	Serie,
	Cantidad
)
VALUES 
(
	@pstkInventarios,
	dbo.FuncFKstkProductos(@pProducto_Id),
	@pSerie,
	@pCantidad
)


GO

DROP PROCEDURE stkInventSerieDatos
GO
CREATE PROCEDURE stkInventSerieDatos
(
@pstkInventarios int
)
AS
SET NOCOUNT ON 

SELECT stkInventSerie.stkInventarios, stkProductos.Producto_Id, stkInventSerie.Serie, stkInventSerie.Cantidad
FROM stkInventSerie
Inner Join stkProductos On stkProductos.stkProductos = stkInventSerie.Producto_Id
WHERE stkInventarios = @pstkInventarios
 
RETURN @@Error 

GO

DROP PROCEDURE stkInventSerieEliminar
GO
CREATE PROCEDURE stkInventSerieEliminar
(
@pstkInventarios int,
@pProducto_Id VarChar(25) = Null,
@pSerie varchar(25) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkInventSerie 
WHERE (stkInventarios = @pstkInventarios)
AND Producto_Id = isNull(dbo.FuncFKstkProductos(@pProducto_Id), Producto_Id)
AND (Serie = ISNULL(@pSerie, Serie))
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkInvMoviStk.sql*/
drop procedure stkInvMoviStkInsertar
go
create procedure stkInvMoviStkInsertar
(
@pstkMoviCabe bigint,
@pstkInventarios int
)
as
set nocount on
insert into stkInvMoviStk
(
stkMoviCabe,
stkInventarios
)
values
(
@pstkMoviCabe,
@pstkInventarios
)
go

drop procedure stkInvMoviStkDatos
go
create procedure stkInvMoviStkDatos
(
	@pEmpresa_Id int =null
)
AS

select 1 as Algo

select stkInventarios.stkInventarios,FechaInventario,genUsuarios.Apellido_y_Nombres as UsuRespo_Id, 'P' as Estado,
dbo.Segmento(stkInvenSegmentos.Segmento_Id,stkInvenSegmentos.Segmento1C, stkInvenSegmentos.Segmento2C,
stkInvenSegmentos.Segmento3C, stkInvenSegmentos.Segmento4C,
stkInvenSegmentos.Segmento1N,stkInvenSegmentos.Segmento2N,
stkInvenSegmentos.Segmento3N, stkInvenSegmentos.Segmento4N) as SegmentoStr, 
stkInvenSegmentos.Empresa_Id,genSegmentos.Segmento_Id,stkInvenSegmentos.Segmento1N,stkInvenSegmentos.Segmento2N,
stkInvenSegmentos.Segmento3N, stkInvenSegmentos.Segmento4N, stkInvenSegmentos.Segmento1C, stkInvenSegmentos.Segmento2C,
stkInvenSegmentos.Segmento3C, stkInvenSegmentos.Segmento4C, 
stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDesposito
from stkInventarios
inner join genUsuarios on UsuRespo_Id=genUsuarios.genUsuarios
inner join stkInvenSegmentos on stkInvenSegmentos.stkInventarios=stkInventarios.stkInventarios 
inner join genSegmentos on stkInvenSegmentos.Segmento_Id=genSegmentos.genSegmentos 
inner join stkDepositos ON stkDepositos.stkDepositos = stkInventarios.Deposito_Id
where 
UsuarioAutorizo is null and stkInventarios.Posteado=1 and stkInvenSegmentos.Empresa_Id=isnull(@pEmpresa_Id, stkInvenSegmentos.Empresa_Id)
go

-- stkAFecha 1
DROP PROCEDURE stkAFecha
GO
CREATE PROCEDURE stkAFecha (
	@pstkInventrios int
)

AS

SELECT stkInventarios.stkInventarios, stkProductos.Producto_Id, stkProductos.Descripcion, stkUniMed.Medida_Id, 
	stkInventCuerpo.Cantidad,stkInventCuerpo.CantidadAlterna, stkProductos.ClaseAlterna, stkProductos.UsaDespachoImportacion,
	stkProductos.Serializable, stkProductos.TrabajaPorLotes, stkProductos.conVencimiento,
	isnull(SUM(stkMoviCuerpo.Cantidad * stkMoviCabe.Signo),0) as CantidadStk ,
	isnull(SUM(stkMoviCuerpo.CantidadAlternaForm* stkMoviCabe.Signo),0) as CantidadAternaStk
	
FROM stkInventarios
inner join stkInventCuerpo on stkInventCuerpo.stkInventarios=stkInventarios.stkInventarios
inner join stkInvenSegmentos on stkInvenSegmentos.stkInventarios=stkInventarios.stkInventarios
left join ( stkMoviCabe INNER JOIN stkMoviCuerpo ON stkMoviCabe.stkMoviCabe = stkMoviCuerpo.stkMoviCabe
	INNER JOIN conAsientos ON
		conAsientos.conAsientos =stkMoviCabe.stkMoviCabe And
		conAsientos.Anulado = 0 And 
		conAsientos.Posteado = 1 
	) ON
	conAsientos.Empresa_Id = stkInvenSegmentos.Empresa_Id and 
	stkMoviCuerpo.Producto_Id  =stkInventCuerpo.Producto_Id and 
	stkMoviCuerpo.Deposito_Id = stkInventarios.Deposito_Id
	And conAsientos.Fecha <= stkInventarios.FechaInventario
	and conAsientos.Empresa_Id = stkInvenSegmentos.Empresa_Id
INNER JOIN stkProductos ON stkProductos.stkProductos = stkInventCuerpo.Producto_Id
INNER JOIN stkUniMed ON stkUniMed.stkUniMed = stkProductos.Medida_Id
	
WHERE
stkInventarios.stkInventarios = @pstkInventrios and stkProductos.Clase IN ('E','-') 
		
GROUP BY stkProductos.Producto_Id, stkProductos.Descripcion, stkProductos.stkProductos, 
	stkUniMed.Medida_id, stkInventCuerpo.Cantidad,stkInventCuerpo.CantidadAlterna,
	stkProductos.ClaseAlterna,stkInventarios.stkInventarios, 
	stkProductos.UsaDespachoImportacion, stkProductos.Serializable, stkProductos.TrabajaPorLotes, stkProductos.conVencimiento
ORDER BY 1

Select stkProductos.Producto_Id, stkInventDespacho.Despacho_Id, stkInventDespacho.Cantidad
From stkInventarios
Inner Join stkInventCuerpo On stkInventCuerpo.stkInventarios = stkInventarios.stkInventarios
Inner Join stkProductos On stkProductos.stkProductos = stkInventCuerpo.Producto_Id
Inner Join stkInventDespacho On stkInventDespacho.stkInventarios = stkInventarios.stkInventarios
WHERE
stkInventarios.stkInventarios = @pstkInventrios And stkProductos.Clase In ('E','-') 


Select stkProductos.Producto_Id, stkMoviSerie.Serie, Sum(stkMoviSerie.Cantidad * stkMoviCabe.Signo) Cantidad
From stkInventarios
Inner Join stkInventCuerpo On stkInventCuerpo.stkInventarios = stkInventarios.stkInventarios
Inner Join stkProductos On stkProductos.stkProductos = stkInventCuerpo.Producto_Id
Inner Join stkInvenSegmentos on stkInvenSegmentos.stkInventarios=stkInventarios.stkInventarios
Left Join (stkMoviCabe Inner Join stkMoviCuerpo ON stkMoviCabe.stkMoviCabe = stkMoviCuerpo.stkMoviCabe
	Inner Join conAsientos ON conAsientos.conAsientos = stkMoviCabe.stkMoviCabe And
		conAsientos.Anulado = 0 And 
		conAsientos.Posteado = 1
	Inner Join stkMoviSerie On stkMoviSerie.stkMoviCabe = stkMoviCuerpo.stkMoviCabe And
		stkMoviSerie.Renglon = stkMoviCuerpo.Renglon
	) ON
	conAsientos.Empresa_Id = stkInvenSegmentos.Empresa_Id And 
	stkMoviCuerpo.Producto_Id  =stkInventCuerpo.Producto_Id And 
	stkMoviCuerpo.Deposito_Id = stkInventarios.Deposito_Id And
	conAsientos.Fecha <= stkInventarios.FechaInventario And
	conAsientos.Empresa_Id = stkInvenSegmentos.Empresa_Id
WHERE
stkInventarios.stkInventarios = @pstkInventrios And stkProductos.Clase In ('E','-') 
Group by stkProductos.Producto_Id, stkMoviSerie.Serie

go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkMaxMin.sql*/
drop Procedure stkMaxMinDatos
go
create Procedure stkMaxMinDatos
(
@pDeposito_Id varchar(15), 
@pEmpresa_Id Int
)
as
set nocount on
select stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDeposito, '' as Excel, cast(0 as bit) as Quita_No_Existentes
From stkDepositos 
where stkDepositos.Deposito_Id=@pDeposito_Id

select stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProducto, stkMaxMin.Minimo,stkMaxMin.Maximo,stkMaxMin.Empresa_Id
from stkMaxMin 
inner join stkProductos on stkProductos.stkProductos = stkMaxMin.Producto_Id
inner join stkDepositos on stkDepositos.stkDepositos = stkMaxMin.Deposito_Id
where 
stkDepositos.Deposito_id =@pDeposito_Id and 
stkMaxMin.Empresa_Id = @pEmpresa_Id

go
drop procedure stkMaxMinInsertar
go
create Procedure stkMaxMinInsertar
(
@pProducto_Id varchar(25),
@pDeposito_Id varchar(15),
@pMin qCantidadD8,
@pMax qCantidadD8,
@pEmpresa_Id int
)
as
set nocount on
insert into stkMaxMin
(Producto_Id, Deposito_Id, Minimo,Maximo,Empresa_Id)
values
(dbo.FuncFKstkProductos(@pProducto_Id),dbo.FuncFKstkDepositos(@pDeposito_Id),@pMin,@pMax, @pEmpresa_Id)
go
drop procedure stkMaxMinEliminar
go
create Procedure stkMaxMinEliminar
(
@pProducto_Id varchar(25)=null,
@pDeposito_Id varchar(15), 
@pEmpresa_Id Int
)
as
set nocount on
delete from stkMaxMin 
	where Deposito_Id=dbo.FuncFKstkDepositos(@pDeposito_Id) and Producto_Id=isnull(@pProducto_Id,Producto_Id) and 
	Empresa_Id = @pEmpresa_Id
go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkMoviCabe.sql*/
-- exec stkMoviCabeDatos 1, 'STK',1,0,0,0,'E','0001','',''
-- exec stkMoviCabeDatosCausa 1, 'STK',1,0,0,0,'E','0001','',''

DROP PROCEDURE stkMoviCabeGuardar
GO
CREATE PROCEDURE stkMoviCabeGuardar
(
@pstkMoviCabe bigint, 
@pSubTipoMov_Id varchar(5),
@pModificaCosto Sino,
@pSigno smallint
)
AS
SET NOCOUNT ON 


SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkMoviCabe WHERE (stkMoviCabe = @pstkMoviCabe)))
BEGIN 
	UPDATE stkMoviCabe
	SET		SubTipoMov_Id = @pSubTipoMov_Id,
		ModificaCosto = @pModificaCosto,
		Signo = @pSigno
	WHERE (stkMoviCabe = @pstkMoviCabe)
END 
ELSE 
BEGIN 
	INSERT INTO stkMoviCabe
	(
		stkMoviCabe,
		SubTipoMov_Id,
		ModificaCosto,
		Signo
	)
	VALUES 
	(
		@pstkMoviCabe,
		@pSubTipoMov_Id,
		@pModificaCosto,
		@pSigno
	)
END 

GO

DROP PROCEDURE stkMoviCabeSoloDatos
GO
CREATE PROCEDURE stkMoviCabeSoloDatos
(
@pstkMoviCabe bigint
)
AS
SET NOCOUNT ON 
	
SELECT stkMoviCabe.stkMoviCabe,
	genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C, Cast(0 As Bit) DistribuyeContrapartida,
	conAsientos.Posteado, conAsientos.Fecha, conAsientos.FechaRegistro, 
	conAsientos.Cambio,conAsientos.CambioMonedaOriginal, 
	conAsientos.Anulado, conAsientos.Observaciones,  disFormularios.Formulario_Id Formulario,
	genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas,
	stkSubTipoMov.SubTipoMov_Id, stkSubTipoMov.Descripcion as DescripcionSubTipoMov, 
	stkMoviCabe.ModificaCosto, 	stkMoviCabe.Signo, stkSubTipoMov.Tipomov, ' ' as Proveed_Id, ' ' Cliente_Id, 
		' ' Sucursal
FROM stkMoviCabe 
INNER JOIN conAsientos  ON (conAsientos.conAsientos = stkMoviCabe.stkMoviCabe)
INNER JOIN stkSubTipoMov  ON (stkSubTipoMov.SubTipoMov_Id = stkMoviCabe.SubTipoMov_Id)
INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
Inner Join disFormularios On disFormularios.disFormularios = conAsientos.Formulario_Id
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = stkMoviCabe.stkMoviCabe
INNER JOIN genSegmentos ON genAsiSegmentos.Segmento_Id = genSegmentos.genSegmentos
WHERE (stkMoviCabe = @pstkMoviCabe)
go


DROP PROCEDURE stkMoviCabeDatos
GO
CREATE PROCEDURE stkMoviCabeDatos
(
@pstkMoviCabe bigint
)
AS
SET NOCOUNT ON 

Exec stkMoviCabeSoloDatos @pStkmoviCabe
	
Exec stkMoviCuerpoDatos @pstkMoviCabe

Exec genAtributosGeneralesIdentityDatos @pstkMoviCabe, 'stkMoviCabe' 

Exec stkMoviSerieDatos @pstkMoviCabe

Exec stkMoviDespaDatos @pstkMoviCabe
-- PARA V2
Exec stkMoviUbicacionDatos  @pStkMoviCabe

 
RETURN @@Error 

GO




DROP PROCEDURE stkMoviCabeEliminar
GO
CREATE PROCEDURE stkMoviCabeEliminar
(
@pstkMoviCabe bigint
)
AS
SET NOCOUNT ON 

DELETE FROM stkMoviCabe 
WHERE (stkMoviCabe = @pstkMoviCabe)
 
 RETURN @@Error 

GO
DROP PROCEDURE stkMoviCabeDatosProv 
GO
CREATE PROCEDURE stkMoviCabeDatosProv
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
AS
Declare @pstkMoviCabe bigint = (select Asiento_Id
 From genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and 
	genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C )
	
EXEC stkMoviCabeDatos @pstkMoviCabe


SELECT stkMoviProv.RemitoProv, 
	comProveedores.Proveed_Id, comProveedores.RazonSocial, 
	' ' Cuenta_Id, stkMoviProv.FechaRemito
FROM stkMoviProv 
INNER JOIN comProveedores ON stkMoviProv.Proveed_Id = comProveedores.genEntidades
WHERE stkMoviProv.stkMoviCabe = @pstkMoviCabe

GO	
		

DROP PROCEDURE stkMoviCabeDatosCausa 
GO
CREATE PROCEDURE stkMoviCabeDatosCausa 
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
AS
Declare @pstkMoviCabe bigint = (select Asiento_Id
 from genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and 
	genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C )
	
EXEC stkMoviCabeDatos @pstkMoviCabe

SELECT stkCausasMovi.Causa_Id, stkCausasMovi.Descripcion,
	conCuentas.Cuenta_Id, conCuentas.Descripcion DescripcionCuentas,
	conCentro1.Centro1_Id, conCentro1.Descripcion DescripcionCentro1,
	conCentro2.Centro2_Id, conCentro2.Descripcion DescripcionCentro2
FROM stkMoviCausa 
	INNER JOIN stkCausasMovi ON stkMoviCausa.Causa_Id = stkCausasMovi.stkCausasMovi
	INNER JOIN conCuentas ON stkCausasMovi.Cuenta_Id = conCuentas.conCuentas
	LEFT Join conCentro1 On stkMoviCausa.Centro1_Id = conCentro1.conCentro1
	LEFT Join conCentro2 On stkMoviCausa.Centro2_Id = conCentro2.conCentro2
	WHERE
	stkMoviCausa.stkMoviCabe = @pstkMoviCabe 
GO	


DROP PROCEDURE stkMoviCabeDatosSalidasRemito
GO
CREATE PROCEDURE stkMoviCabeDatosSalidasRemito 
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
AS
Declare @pstkMoviCabe bigint = (select Asiento_Id
 from genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and 
	genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C )
	
EXEC stkMoviCabeDatos @pstkMoviCabe

/*
SELECT stkRemitos.stkMoviCabe, venClientes.Cliente_Id, stkRemitos.Sucursal, 
venClientes.RazonSocial, IsNull(gensegmentos.Segmento_Id, '') Segmento_Id,
venListasPrecios.ListaPrecio_Id, venListasPrecios.Descripcion DescripcionListasPrecios
FROM stkRemitos
Inner Join venClieHabitual On stkRemitos.Cliente_Id = venClieHabitual.genEntidades And
	stkRemitos.Sucursal = venClieHabitual.Sucursal
Inner Join venClientes On venClientes.genEntidades = stkRemitos.Cliente_Id
Inner Join genSegmentos On stkRemitos.Segmento_Id = genSegmentos.genSegmentos
Left Join venListasPrecios On venListasPrecios.venListasPrecios = stkRemitos.ListaPrecio_Id
WHERE (stkMoviCabe = @pstkMoviCabe)
*/
EXEC stkRemitosDatos @pstkMoviCabe

Select stkMoviCausa.stkMoviCabe, Cast(0 As bit) SoloRemito, Cast(1 As bit) PendienteFacturacion,
stkCausasMovi.Causa_Id, stkCausasMovi.Descripcion DescripcionCausa,
conCentro1.Centro1_Id, conCentro1.Descripcion DescripcionCentro1,
conCentro2.Centro2_Id, conCentro2.Descripcion DescripcionCentro2
From stkMoviCausa
Inner Join stkCausasMovi On stkCausasMovi.stkCausasMovi = stkMoviCausa.Causa_Id
Left Join conCentro1 On conCentro1.conCentro1 = stkMoviCausa.Centro1_Id
Left Join conCentro2 On conCentro2.conCentro2 = stkMoviCausa.Centro2_Id
Where stkMoviCausa.stkMoviCabe = @pstkMoviCabe

SELECT CAST(0 AS bit) AceptaDatosExternos
GO

drop procedure stkMoviCabeDatosSeg
go
create procedure stkMoviCabeDatosSeg
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
as
set nocount on
Declare @pstkMoviCabe bigint = (Select Asiento_Id
 From genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and 
	genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C )
exec stkMoviCabeDatos @pstkMoviCabe
go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkMoviCabeCentro.sql*/
DROP PROCEDURE stkMoviCabeCentroGuardar
GO
CREATE PROCEDURE stkMoviCabeCentroGuardar
(
@pstkMoviCabe bigint,
@pCentro1_Id varchar(8) = NULL,
@pCentro2_Id varchar(8) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkMoviCabeCentro WHERE (stkMoviCabe = @pstkMoviCabe)))
BEGIN 
	UPDATE stkMoviCabeCentro
	SET		Centro1_Id = dbo.FuncFKconCentro1(@pCentro1_Id),
		Centro2_Id = dbo.FuncFKconCentro2(@pCentro2_Id)
	WHERE (stkMoviCabe = @pstkMoviCabe)
END 
ELSE 
BEGIN 
	INSERT INTO stkMoviCabeCentro
	(
		stkMoviCabe,
		Centro1_Id,
		Centro2_Id
	)
	VALUES 
	(
		@pstkMoviCabe,
		dbo.FuncFKconCentro1(@pCentro1_Id),
		dbo.FuncFKconCentro2(@pCentro2_Id)
	)
END 

GO

DROP PROCEDURE stkMoviCabeCentroDatos
GO
CREATE PROCEDURE stkMoviCabeCentroDatos
(
@pstkMoviCabe bigint
)
AS
SET NOCOUNT ON 

SELECT stkMoviCabeCentro.stkMoviCabe, conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1,
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2
FROM stkMoviCabeCentro 
LEFT JOIN conCentro1  ON (conCentro1.conCentro1 = stkMoviCabeCentro.Centro1_Id)
LEFT JOIN conCentro2  ON (conCentro2.conCentro2 = stkMoviCabeCentro.Centro2_Id)
WHERE (stkMoviCabe = @pstkMoviCabe)
 
 RETURN @@Error 

GO

DROP PROCEDURE stkMoviCabeCentroEliminar
GO
CREATE PROCEDURE stkMoviCabeCentroEliminar
(
@pstkMoviCabe bigint
)
AS
SET NOCOUNT ON 

DELETE FROM stkMoviCabeCentro WHERE (stkMoviCabe = @pstkMoviCabe)
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkMoviCabeDatosEmpleado.sql*/
DROP PROCEDURE stkMoviCabeDatosEmpleado
GO
CREATE PROCEDURE stkMoviCabeDatosEmpleado
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
AS
Declare @pstkMoviCabe bigint = (select Asiento_Id
 from genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and 
	genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C )
	
EXEC stkMoviCabeDatos @pstkMoviCabe

SELECT stkCausasMovi.Causa_Id, stkCausasMovi.Descripcion,
	conCuentas.Cuenta_Id, conCuentas.Descripcion DescripcionCuentas,
	conCentro1.Centro1_Id, conCentro1.Descripcion DescripcionCentro1,
	conCentro2.Centro2_Id, conCentro2.Descripcion DescripcionCentro2
FROM stkMoviCausa 
	INNER JOIN stkCausasMovi ON stkMoviCausa.Causa_Id = stkCausasMovi.stkCausasMovi
	INNER JOIN conCuentas ON stkCausasMovi.Cuenta_Id = conCuentas.conCuentas
	LEFT Join conCentro1 On stkMoviCausa.Centro1_Id = conCentro1.conCentro1
	LEFT Join conCentro2 On stkMoviCausa.Centro2_Id = conCentro2.conCentro2
	WHERE
	stkMoviCausa.stkMoviCabe = @pstkMoviCabe 

SELECT suePersonal.Legajo, suePersonal.Nombres +', '+suePersonal.ApellidoPaterno +
	CASE WHEN suePersonal.ApellidoPaterno = ' ' THEN '' ELSE ', ' end +suePersonal.ApellidoMaterno as Nombre
FROM stkMoviLega
	INNER JOIN suePersonal ON stkMoviLega.Legajo = suePersonal.genEntidades
WHERE
	stkMoviLega.stkMoviCabe = @pstkMoviCabe
GO	


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkMoviCabeReva.sql*/
-- stkMoviCabeRevaDatos 1, 'STOCK',1,0,0,0,'RV',' ',' ',' '
DROP PROCEDURE stkMoviCabeRevaDatos 
go
CREATE PROCEDURE stkMoviCabeRevaDatos (
@pEmpresa_id int, 
@pSegmento_id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
AS
Declare @pstkMoviCabe bigint = (select Asiento_id
 from genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_id = @pEmpresa_id and 
	genAsiSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C )
	
EXEC stkMoviCabeSoloDatos @pstkMoviCabe

EXEC stkMoviCuerpoRevaDatos @pstkMoviCabe

Exec genAtributosGeneralesIdentityDatos @pstkMoviCabe, 'stkMoviCabe' 
-- para Agregar al Asiento
SELECT conCuentas.Cuenta_id, 0 as Tipomov, 0.00 as Importe, ' ' as Clase
FROM conCuentas 
Where
	1=2

-- cuentas de Ajuste
SELECT conCuentas.Cuenta_id CtaDebe, conCuentas.Cuenta_id CtaHaber
FROM conCuentas 
Where
	1=2

EXEC stkmoviCabeCentroDatos @pstkMoviCabe

go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkMoviCausa.sql*/
DROP PROCEDURE stkMoviCausaGuardar
GO
CREATE PROCEDURE stkMoviCausaGuardar
(
@pstkMoviCabe bigint,
@pCausa_Id varchar(5),
@pCentro1_Id varChar(8),
@pCentro2_Id varChar(8)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkMoviCausa WHERE (stkMoviCabe = @pstkMoviCabe)))
BEGIN 
	UPDATE stkMoviCausa
	SET		Causa_Id = dbo.FuncFKstkCausasMovi(@pCausa_Id), Centro1_Id = dbo.FuncFKconCentro1(@pCentro1_Id),
			Centro2_Id = dbo.FuncFKconCentro2(@pCentro2_Id)
	WHERE (stkMoviCabe = @pstkMoviCabe)
END 
ELSE 
BEGIN 
	INSERT INTO stkMoviCausa
	(
		stkMoviCabe,
		Causa_Id,
		Centro1_Id,
		Centro2_Id
	)
	VALUES 
	(
		@pstkMoviCabe,
		dbo.FuncFKstkCausasMovi(@pCausa_Id),
		dbo.FuncFKconCentro1(@pCentro1_Id),
		dbo.FuncFKconCentro2(@pCentro2_Id)
	)
END 

GO

DROP PROCEDURE stkMoviCausaDatos
GO
CREATE PROCEDURE stkMoviCausaDatos
(
@pstkMoviCabe bigint
)
AS
SET NOCOUNT ON 

SELECT stkMoviCausa.stkMoviCabe, stkCausasMovi.Causa_Id, stkCausasMovi.Descripcion as DescripcionCausasMovi,
conCentro1.Centro1_Id, conCentro1.Descripcion DescripcionCentro1,
conCentro2.Centro2_Id, conCentro2.Descripcion DescripcionCentro2
FROM stkMoviCausa 
INNER JOIN stkCausasMovi  ON (stkCausasMovi.stkCausasMovi = stkMoviCausa.Causa_Id)
Inner Join conCentro1 On stkMoviCausa.Centro1_Id = conCentro1.conCentro1
Inner Join conCentro2 On stkMoviCausa.Centro2_Id = conCentro2.conCentro2
WHERE (stkMoviCausa.stkMoviCabe = @pstkMoviCabe)
 
 RETURN @@Error 

GO

DROP PROCEDURE stkMoviCausaEliminar
GO
CREATE PROCEDURE stkMoviCausaEliminar
(
@pstkMoviCabe bigint
)
AS
SET NOCOUNT ON 

DELETE FROM stkMoviCausa 
WHERE (stkMoviCabe = @pstkMoviCabe)
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkMoviConsigna.SQL*/
DROP PROCEDURE stkMoviConsignaInsertar
GO
CREATE PROCEDURE stkMoviConsignaInsertar
(
@pstkMoviCabe bigint,
@pRenglon int,
@pcomOrdenComp int,
@pRenglon_OC int,
@pCantidad qCantidadD8
)
AS
	INSERT INTO stkMoviConsigna
	(
		stkMoviCabe,
		Renglon,
		comOrdenComp,
		Renglon_OC,
		Cantidad
	)
	VALUES 
	(
		@pstkMoviCabe,
		@pRenglon,
		@pcomOrdenComp,
		@pRenglon_OC,
		@pCantidad
	)

GO

DROP PROCEDURE stkMoviConsignaDatos
GO
CREATE PROCEDURE stkMoviConsignaDatos
(
@pstkMoviCabe bigint = null,
@pRenglon int = null,
@pcomOrdenComp int = null,
@pRenglon_OC int = null
)
AS
SET NOCOUNT ON 

SELECT stkMoviConsigna.stkMoviCabe, stkMoviConsigna.Renglon, stkMoviConsigna.comOrdenComp,
	stkMoviConsigna.Renglon_OC,  stkMoviConsigna.Cantidad
FROM stkMoviConsigna 
WHERE 
stkMoviCabe = isnull(@pstkMoviCabe, stkMoviCabe) AND 
Renglon = isnull(@pRenglon, Renglon) AND 
comOrdenComp = isnull(@pcomOrdenComp, comOrdenComp) AND 
Renglon_OC = isnull(@pRenglon_OC, Renglon_OC)
 
 RETURN @@Error 

GO

DROP PROCEDURE stkMoviConsignaEliminar
GO
CREATE PROCEDURE stkMoviConsignaEliminar
(
@pstkMoviCabe bigint,
@pRenglon int = null,
@pcomOrdenComp int = null,
@pRenglon_OC int = null
)
AS
SET NOCOUNT ON 

DELETE FROM stkMoviConsigna 
WHERE (stkMoviCabe = @pstkMoviCabe)
AND (Renglon = isnull(@pRenglon,Renglon))
AND (comOrdenComp = isnull(@pcomOrdenComp, comOrdenComp))
AND (Renglon_OC = isnull(@pRenglon_OC, Renglon_OC))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkMoviCRevaluo.sql*/
DROP PROCEDURE stkMoviCRevaluoInsertar
GO
CREATE PROCEDURE stkMoviCRevaluoInsertar
(
@pstkMoviCabeReva bigint,
@pconAsientos bigint
)
AS
	INSERT INTO stkMoviCRevaluo
	(
		stkMoviCabeReva,
		conAsientos
	)
	VALUES 
	(
		@pstkMoviCabeReva,
		@pconAsientos
	)
GO

DROP PROCEDURE stkMoviCRevaluoDatos
GO
CREATE PROCEDURE stkMoviCRevaluoDatos
(
@pstkMoviCabeReva bigint
)
AS
SET NOCOUNT ON 

SELECT stkMoviCRevaluo.stkMoviCabeReva, stkMoviCRevaluo.conAsientos
FROM stkMoviCRevaluo 
WHERE (stkMoviCabeReva = @pstkMoviCabeReva)
 
RETURN @@Error 

GO

DROP PROCEDURE stkMoviCRevaluoEliminar
GO
CREATE PROCEDURE stkMoviCRevaluoEliminar
(
@pstkMoviCabeReva bigint
)
AS
SET NOCOUNT ON 

DELETE FROM stkMoviCRevaluo WHERE (stkMoviCabeReva = @pstkMoviCabeReva)
 
 RETURN @@Error 

GO


DROP PROCEDURE stkMoviCRevaluoDatosCabe
GO
CREATE PROCEDURE stkMoviCRevaluoDatosCabe
(
@pconAsientos bigint
)
AS
SET NOCOUNT ON 

SELECT stkMoviCRevaluo.stkMoviCabeReva, stkMoviCRevaluo.conAsientos
FROM stkMoviCRevaluo 
WHERE (conAsientos= @pconAsientos)
 
RETURN @@Error 

GO




Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkMoviCuerpo.sql*/
DROP PROCEDURE stkMoviCuerpoGuardar
GO
CREATE PROCEDURE stkMoviCuerpoGuardar
(
@pstkMoviCabe bigint,
@pRenglon int,
@pFecha qFecha,
@pDeposito_Id varchar(15) = NULL,
@pProducto_Id varchar(25) = NULL,
@pMedida_Id varchar(5) = NULL,
@pFactor qCantidadD8,
@pCantidad qCantidadD8,
@pCantidadForm qCantidadD8,
@pCostoUnitario qMonedaD8,
@pPrecioOriginal qMonedaD8,
@pMedidaAlterna varchar(5) = NULL,
@pCantidadAlternaForm qCantidadD8,
@pObservaciones QMemo = NULL,
@pDescuento qPorcentaje,
@pconRenglonDebe int,
@pconRenglonHaber int
)
AS
-- es siempre insert
/*
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkMoviCuerpo WHERE (stkMoviCabe = @pstkMoviCabe) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE stkMoviCuerpo
	SET		Fecha = @pFecha,
		Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id),
		Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id),
		Medida_Id = dbo.FuncFKstkUniMed(@pMedida_Id),
		Factor = @pFactor,
		Cantidad = @pCantidad,
		CantidadForm = @pCantidadForm,
		CostoUnitario = @pCostoUnitario,
		PrecioOriginal = @pPrecioOriginal,
		MedidaAlterna = dbo.FuncFKstkUniMed(@pMedidaAlterna),
		CantidadalternaForm = @pCantidadalternaForm,
		Observaciones = @pObservaciones,
		Descuento = @pDescuento,
		conRenglonDebe = @pconRenglonDebe,
		conRenglonHaber = @pconRenglonHaber
	WHERE (stkMoviCabe = @pstkMoviCabe) AND (Renglon = @pRenglon)
END 
ELSE 
*/

--BEGIN 
	INSERT INTO stkMoviCuerpo
	(
		stkMoviCabe,
		Renglon,
		Fecha,
		Deposito_Id,
		Producto_Id,
		Medida_Id,
		Factor,
		Cantidad,
		CantidadForm,
		CostoUnitario,
		PrecioOriginal,
		MedidaAlterna,
		CantidadAlternaForm,
		Observaciones,
		Descuento,
		conRenglonDebe,
		conRenglonHaber
	)
	VALUES 
	(
		@pstkMoviCabe,
		@pRenglon,
		@pFecha,
		dbo.FuncFKstkDepositos(@pDeposito_Id),
		dbo.FuncFKstkProductos(@pProducto_Id),
		dbo.FuncFKstkUniMed(@pMedida_Id),
		@pFactor,
		@pCantidad,
		@pCantidadForm,
		@pCostoUnitario,
		@pPrecioOriginal,
		dbo.FuncFKstkUniMed(@pMedidaAlterna),
		@pCantidadAlternaForm,
		@pObservaciones,
		@pDescuento,
		@pconRenglonDebe,
		@pconRenglonHaber
	)
--END 

GO

DROP PROCEDURE stkMoviCuerpoDatos
GO
CREATE PROCEDURE stkMoviCuerpoDatos
(
@pstkMoviCabe bigint,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

SELECT stkMoviCuerpo.stkMoviCabe, stkMoviCuerpo.Renglon, 0 RenglonReferencia, stkMoviCuerpo.Fecha,
	stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos, stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos,
	stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, stkMoviCuerpo.Factor, stkMoviCuerpo.Cantidad,
	stkMoviCuerpo.CantidadForm, stkMoviCuerpo.CostoUnitario, stkMoviCuerpo.PrecioOriginal,
	stkMedidaAlterna.Medida_Id MedidaAlterna, stkMedidaAlterna.Descripcion as DescripcionMedidaAlterna,
	stkMoviCuerpo.CantidadAlternaForm,
	stkMoviCuerpo.Observaciones, 0.00 AS Descuento, stkMoviCuerpo.conRenglonDebe, 
	conCuentasDebe.Cuenta_Id as CuentaDebe, conCuentasDebe.Descripcion as DescripcionCuentaDebe,
	conCentro1Debe.Centro1_id as Centro1Debe, conCentro1Debe.Descripcion as DescripcionCentro1Debe,
	conCentro2Debe.Centro2_id as Centro2Debe, conCentro2Debe.Descripcion as DescripcionCentro2Debe,
	conMovContDebe.Clase as ClaseDebe, conMovContDebe.Importe as ImporteContableDebe, 
	stkMoviCuerpo.conRenglonHaber, 
	conCuentasHaber.Cuenta_id as CuentaHaber, conCuentasHaber.Descripcion as DescripcionCuentaHaber,
	conCentro1Haber.Centro1_id as Centro1Haber, conCentro1Haber.Descripcion as DescripcionCentro1Haber,
	conCentro2Haber.Centro2_id as Centro2Haber, conCentro2Haber.Descripcion as DescripcionCentro2Haber,
	conMovContHaber.Clase as ClaseHaber, conMovContDebe.Importe as ImporteContableHaber, --comDespachos.Despacho_Id
	(Select Top 1 comDespachos.Despacho_Id From stkMoviDespa
		Inner Join comDespachos On comDespachos.comDespachos = stkMoviDespa.Despacho_Id
		Where stkMoviDespa.stkMoviCabe = stkMoviCuerpo.stkMoviCabe And stkMoviDespa.Renglon = stkMoviCuerpo.Renglon) Despacho_Id
FROM stkMoviCuerpo 
INNER JOIN stkMoviCabe  ON (stkMoviCabe.stkMoviCabe = stkMoviCuerpo.stkMoviCabe)
LEFT JOIN stkDepositos  ON (stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id)
LEFT JOIN stkProductos  ON (stkProductos.stkProductos = stkMoviCuerpo.Producto_Id)
LEFT JOIN stkUniMed  ON (stkUniMed.stkUniMed = stkMoviCuerpo.Medida_Id)
INNER JOIN conMovCont  ON (conMovCont.conAsientos = stkMoviCuerpo.stkMoviCabe) AND (conMovCont.Renglon = stkMoviCuerpo.conRenglonDebe)
INNER JOIN conMovCont conMovCont2 ON (conMovCont2.conAsientos = stkMoviCuerpo.stkMoviCabe) AND (conMovCont2.Renglon = stkMoviCuerpo.conRenglonHaber)
INNER JOIN conMovCont as conMovContDebe ON conMovContDebe.conAsientos = stkMoviCuerpo.stkMoviCabe And
	conMovContDebe.Renglon = stkMoviCuerpo.conRenglonDebe
INNER JOIN conCuentas as conCuentasDebe ON conCuentasDebe.conCuentas = conMovContDebe.cuenta_id 
LEFT JOIN conCentro1 as conCentro1Debe ON conCentro1Debe.conCentro1 = conMovContDebe.Centro1_id
LEFT  JOIN conCentro2  as conCentro2Debe ON conCentro2Debe.conCentro2 = conMovContDebe.Centro2_id
INNER JOIN conMovCont as conMovContHaber ON conMovContHaber.conAsientos = stkMoviCuerpo.stkMoviCabe And
	conMovContHaber.Renglon = stkMoviCuerpo.conRenglonHaber
INNER JOIN conCuentas as conCuentasHaber ON conCuentasHaber.conCuentas = conMovContHaber.cuenta_id 
LEFT JOIN conCentro1 as conCentro1Haber ON conCentro1Haber.conCentro1 = conMovContHaber.Centro1_id
LEFT JOIN conCentro2  as conCentro2Haber ON conCentro2Haber.conCentro2 = conMovContHaber.Centro2_id
LEFT JOIN stkUniMed stkMedidaAlterna ON stkMedidaAlterna.stkUniMed = stkMoviCuerpo.MedidaAlterna
--Left Join stkMoviDespa On stkMoviDespa.stkMoviCabe = stkMoviCuerpo.stkMoviCabe And stkMoviDespa.Renglon = stkMoviCuerpo.Renglon
--Left Join comDespachos On comDespachos.comDespachos = stkMoviDespa.Despacho_Id
WHERE (stkMoviCuerpo.stkMoviCabe = @pstkMoviCabe)
AND (stkMoviCuerpo.Renglon = ISNULL(@pRenglon, stkMoviCuerpo.Renglon))
ORDER BY 2 
 RETURN @@Error 

GO

DROP PROCEDURE stkMoviCuerpoEliminar
GO
CREATE PROCEDURE stkMoviCuerpoEliminar
(
@pstkMoviCabe bigint,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkMoviCuerpo 
WHERE (stkMoviCabe = @pstkMoviCabe)
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
 RETURN @@Error 

GO

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkMoviCuerpoCambiarCosto.sql*/
DROP PROCEDURE stkMoviCuerpoCambiarCosto
GO
CREATE PROCEDURE stkMoviCuerpoCambiarCosto
(
	@pstkMoviCabe BigInt, 
	@pRenglon Int, 
	@pCosto Numeric(18,4)
)
as

Update stkMoviCuerpo set CostoUnitario = @pCosto 
	Where	
	stkMoviCabe = @pstkMoviCabe and 
	Renglon = @pRenglon
GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkMoviCuerpoCombo.sql*/
DROP PROCEDURE stkMoviCuerpoComboGuardar
GO
CREATE PROCEDURE stkMoviCuerpoComboGuardar
(
@pstkMoviCabeComponente bigint,
@pRenglonComponente int,
@pstkMoviCabe bigint ,
@pRenglon int 
)
AS
	INSERT INTO stkMoviCuerpoCombo
	(
		stkMoviCabeComponente,
		RenglonComponente,
		stkMoviCabe,
		Renglon
	)
	VALUES 
	(
		@pstkMoviCabeComponente,
		@pRenglonComponente,
		@pstkMoviCabe,
		@pRenglon
	)

GO

DROP PROCEDURE stkMoviCuerpoComboDatos
GO
CREATE PROCEDURE stkMoviCuerpoComboDatos
(
@pstkMoviCabeComponente bigint,
@pRenglonComponente int = NULL
)
AS
SET NOCOUNT ON 

SELECT stkMoviCuerpoCombo.stkMoviCabeComponente, stkMoviCuerpoCombo.RenglonComponente, stkMoviCuerpoCombo.stkMoviCabe,
	stkMoviCuerpoCombo.Renglon
FROM stkMoviCuerpoCombo 
WHERE (stkMoviCabeComponente = @pstkMoviCabeComponente)
AND (RenglonComponente = isnull(@pRenglonComponente,RenglonComponente))
 
RETURN @@Error 

GO

DROP PROCEDURE stkMoviCuerpoOrigenDatos
GO
CREATE PROCEDURE stkMoviCuerpoOrigenDatos
(
@pstkMoviCabe bigint,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

SELECT stkMoviCuerpoCombo.stkMoviCabeComponente, stkMoviCuerpoCombo.RenglonComponente, stkMoviCuerpoCombo.stkMoviCabe,
	stkMoviCuerpoCombo.Renglon
FROM stkMoviCuerpoCombo 
WHERE (stkMoviCabe = @pstkMoviCabe)
AND (Renglon = isnull(@pRenglon,Renglon))
 
RETURN @@Error 

GO


DROP PROCEDURE stkMoviCuerpoComboEliminar
GO
CREATE PROCEDURE stkMoviCuerpoComboEliminar
(
@pstkMoviCabeComponente bigint,
@pRenglonComponente int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkMoviCuerpoCombo 
WHERE (stkMoviCabeComponente = @pstkMoviCabeComponente)
AND (RenglonComponente = isnull(@pRenglonComponente,RenglonComponente))
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkMoviCuerpoDpre.sql*/
DROP PROCEDURE stkMoviCuerpoDpreGuardar
GO
CREATE PROCEDURE stkMoviCuerpoDpreGuardar
(
@pStkMoviCabe bigint,
@pRenglon smallint,
@pCantidad_Original qCantidadD8,
@pCantidad qCantidadD8,
@pDif_Costo qMonedaD4,
@pDescuento qPorcentaje
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkMoviCuerpoDpre WHERE (StkMoviCabe = @pStkMoviCabe) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE stkMoviCuerpoDpre
	SET		Cantidad_Original = @pCantidad_Original,
		Cantidad = @pCantidad,
		Dif_Costo = @pDif_Costo,
		Descuento = @pDescuento
	WHERE (StkMoviCabe = @pStkMoviCabe) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO stkMoviCuerpoDpre
	(
		StkMoviCabe,
		Renglon,
		Cantidad_Original,
		Cantidad,
		Dif_Costo,
		Descuento
	)
	VALUES 
	(
		@pStkMoviCabe,
		@pRenglon,
		@pCantidad_Original,
		@pCantidad,
		@pDif_Costo,
		@pDescuento
	)
END 

GO

DROP PROCEDURE stkMoviCuerpoDpreDatos
GO
CREATE PROCEDURE stkMoviCuerpoDpreDatos
(
@pStkMoviCabe bigint,
@pRenglon smallint
)
AS
SET NOCOUNT ON 

SELECT stkMoviCuerpoDpre.Renglon, stkMoviCuerpoDpre.Cantidad_Original,
	stkMoviCuerpoDpre.Cantidad, stkMoviCuerpoDpre.Dif_Costo, stkMoviCuerpoDpre.Descuento
FROM stkMoviCuerpoDpre 
INNER JOIN stkMoviCabe ON (stkMoviCabe.stkMoviCabe = stkMoviCuerpoDpre.StkMoviCabe)
WHERE (stkMoviCuerpoDpre.StkMoviCabe = @pStkMoviCabe)
AND (Renglon = @pRenglon)
 
 RETURN @@Error 

GO

DROP PROCEDURE stkMoviCuerpoDpreEliminar
GO
CREATE PROCEDURE stkMoviCuerpoDpreEliminar
(
@pStkMoviCabe bigint,
@pRenglon smallint = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkMoviCuerpoDpre 
WHERE (StkMoviCabe = @pStkMoviCabe)
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkMoviCuerpoPediCuerpo.sql*/
DROP PROCEDURE stkMoviCuerpoPediCuerpoInsertar
GO
CREATE PROCEDURE stkMoviCuerpoPediCuerpoInsertar
(
@pstkMoviCabe bigint,
@pRenglon int,
@pvenPedidos int,
@pRenglon_Pe int
)
AS
SET NOCOUNT ON 
	INSERT INTO stkMoviCuerpoPediCuerpo
	(
		stkMoviCabe,
		Renglon,
		venPedidos,
		Renglon_Pe
	)
	VALUES 
	(
		@pstkMoviCabe,
		@pRenglon,
		@pvenPedidos,
		@pRenglon_Pe
	)

GO

DROP PROCEDURE stkMoviCuerpoPediCuerpoDatos
GO
CREATE PROCEDURE stkMoviCuerpoPediCuerpoDatos
(
@pstkMoviCabe bigint,
@pRenglon int=Null
)
AS
SET NOCOUNT ON 

SELECT stkMoviCuerpoPediCuerpo.stkMoviCabe, stkMoviCuerpoPediCuerpo.Renglon, 
	stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProducto, 
	venPediCuerpo.CantidadPedida, stkMoviCuerpo.Cantidad, 
	stkMoviCuerpoPediCuerpo.venPedidos, stkMoviCuerpoPediCuerpo.Renglon_Pe
FROM stkMoviCuerpoPediCuerpo 
INNER JOIN stkMoviCuerpo  ON (stkMoviCuerpo.stkMoviCabe = stkMoviCuerpoPediCuerpo.stkMoviCabe) AND (stkMoviCuerpo.Renglon = stkMoviCuerpoPediCuerpo.Renglon)
INNER JOIN venPediCuerpo  ON (venPediCuerpo.venPedidos = stkMoviCuerpoPediCuerpo.venPedidos) AND (venPediCuerpo.Renglon_Pe = stkMoviCuerpoPediCuerpo.Renglon_Pe)
INNER JOIN stkProductos ON venPediCuerpo.Producto_Id = stkproductos.stkproductos 
WHERE (stkMoviCuerpoPediCuerpo.stkMoviCabe = @pstkMoviCabe)
AND (stkMoviCuerpoPediCuerpo.Renglon =  ISNULL(@pRenglon,stkMoviCuerpoPediCuerpo.Renglon))
 
RETURN @@Error 

GO

DROP PROCEDURE stkMoviCuerpoPediCuerpoEliminar
GO
CREATE PROCEDURE stkMoviCuerpoPediCuerpoEliminar
(
@pstkMoviCabe bigint,
@pRenglon int=Null
)
AS
SET NOCOUNT ON 

DELETE FROM stkMoviCuerpoPediCuerpo 
WHERE (stkMoviCabe = @pstkMoviCabe) and 
(stkMoviCuerpoPediCuerpo.Renglon =  ISNULL(@pRenglon,stkMoviCuerpoPediCuerpo.Renglon))
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkMoviCuerpoReva.sql*/
DROP PROCEDURE stkMoviCuerpoRevaGuardar
GO
CREATE PROCEDURE stkMoviCuerpoRevaGuardar
(
@pstkMoviCabe bigint,
@pRenglon int,
@pProducto_Id varchar(25),
@pPUC_Actual qMonedaD8,
@pPUC_Anterior qMonedaD8,
@pPPP_Actual qMonedaD8,
@pPPP_Anterior qMonedaD8,
@pSTD_Actual qMonedaD8,
@pSTD_Anterior qMonedaD8,
@pImporteAjuste qMonedaD2, 
@pImporteAjusteCosto qMonedaD2, 
@pCantidad qCantidadD8
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkMoviCuerpoReva WHERE (stkMoviCabe = @pstkMoviCabe) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE stkMoviCuerpoReva
	SET		Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id),
		PUC_Actual = @pPUC_Actual,
		PUC_Anterior = @pPUC_Anterior,
		PPP_Actual = @pPPP_Actual,
		PPP_Anterior = @pPPP_Anterior,
		STD_Actual = @pSTD_Actual,
		STD_Anterior = @pSTD_Anterior,
		ImporteAjuste = @pImporteAjuste,
		ImporteAjusteCosto = @pImporteAjusteCosto,
		Cantidad = @pCantidad
	WHERE (stkMoviCabe = @pstkMoviCabe) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO stkMoviCuerpoReva
	(
		stkMoviCabe,
		Renglon,
		Producto_Id,
		PUC_Actual,
		PUC_Anterior,
		PPP_Actual,
		PPP_Anterior,
		STD_Actual,
		STD_Anterior,
		ImporteAjuste,
		ImporteAjusteCosto,
		Cantidad
	)
	VALUES 
	(
		@pstkMoviCabe,
		@pRenglon,
		dbo.FuncFKstkProductos(@pProducto_Id),
		@pPUC_Actual,
		@pPUC_Anterior,
		@pPPP_Actual,
		@pPPP_Anterior,
		@pSTD_Actual,
		@pSTD_Anterior,
		@pImporteAjuste, 
		@pImporteAjusteCosto,
		@pCantidad
	)
END 

GO

DROP PROCEDURE stkMoviCuerpoRevaDatos
GO
CREATE PROCEDURE stkMoviCuerpoRevaDatos
(
@pstkMoviCabe bigint,
@pRenglon int=NULL
)
AS
SET NOCOUNT ON 

SELECT stkMoviCuerpoReva.stkMoviCabe, stkMoviCuerpoReva.Renglon, stkProductos.Producto_Id,
	stkProductos.Descripcion as DescripcionProductos, stkMoviCuerpoReva.PUC_Actual, stkMoviCuerpoReva.PUC_Anterior, stkMoviCuerpoReva.PPP_Actual,
	stkMoviCuerpoReva.PPP_Anterior, stkMoviCuerpoReva.STD_Actual, stkMoviCuerpoReva.STD_Anterior, stkMoviCuerpoReva.ImporteAjuste, stkMoviCuerpoReva.ImporteAjusteCosto,
		' ' Cuenta_Id, ' ' CtaCompras, '' Centro1_Id, '' Centro2_Id, 
		stkMoviCuerpoReva.Cantidad
FROM stkMoviCuerpoReva 
INNER JOIN stkProductos  ON (stkProductos.stkProductos = stkMoviCuerpoReva.Producto_Id)
WHERE (stkMoviCuerpoReva.stkMoviCabe = @pstkMoviCabe)
AND (stkMoviCuerpoReva.Renglon = ISNULL(@pRenglon,stkMoviCuerpoReva.Renglon))
ORDER BY 2 
RETURN @@Error 

GO
	
DROP PROCEDURE stkMoviCuerpoRevaEliminar
GO
CREATE PROCEDURE stkMoviCuerpoRevaEliminar
(
@pstkMoviCabe bigint,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkMoviCuerpoReva 
WHERE (stkMoviCabe = @pstkMoviCabe)
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkMoviDespa.sql*/
DROP PROCEDURE stkMoviDespaGuardar
GO
CREATE PROCEDURE stkMoviDespaGuardar
(
@pstkMoviCabe bigint,
@pRenglon int,
@pDespacho_Id varChar(20),
@pCantidad qCantidadD8
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkMoviDespa 
	WHERE stkMoviCabe = @pstkMoviCabe AND Renglon = @pRenglon AND Despacho_Id = dbo.FuncFKcomDespachos(@pDespacho_Id)))
BEGIN 
	UPDATE stkMoviDespa
	SET		Cantidad = @pCantidad
	WHERE stkMoviCabe = @pstkMoviCabe AND Renglon = @pRenglon AND Despacho_Id = dbo.FuncFKcomDespachos(@pDespacho_Id)
END 
ELSE 
BEGIN 
	INSERT INTO stkMoviDespa
	(
		stkMoviCabe,
		Renglon,
		Despacho_Id,
		Cantidad
	)
	VALUES 
	(
		@pstkMoviCabe,
		@pRenglon,
		dbo.FuncFKcomDespachos(@pDespacho_Id),
		@pCantidad
	)
END 

GO

DROP PROCEDURE stkMoviDespaDatos
GO
CREATE PROCEDURE stkMoviDespaDatos
(
@pstkMoviCabe bigint,
@pRenglon int = null,
@pDespacho_Id varChar(20) = null
)
AS
SET NOCOUNT ON 

SELECT stkMoviDespa.stkMoviCabe, stkMoviDespa.Renglon, comDespachos.Despacho_Id, stkMoviDespa.Cantidad
FROM stkMoviDespa 
INNER JOIN stkMoviCuerpo ON stkMoviCuerpo.stkMoviCabe = stkMoviDespa.stkMoviCabe AND stkMoviCuerpo.Renglon = stkMoviDespa.Renglon
INNER JOIN comDespachos ON comDespachos.comDespachos = stkMoviDespa.Despacho_Id
WHERE stkMoviDespa.stkMoviCabe = @pstkMoviCabe
AND stkMoviDespa.Renglon = IsNull(@pRenglon, stkMoviDespa.Renglon)
AND stkMoviDespa.Despacho_Id = IsNull(dbo.FuncFKcomDespachos(@pDespacho_Id), stkMoviDespa.Despacho_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE stkMoviDespaEliminar
GO
CREATE PROCEDURE stkMoviDespaEliminar
(
@pstkMoviCabe bigint,
@pRenglon int = null,
@pDespacho_Id varchar(20) = null
)
AS
SET NOCOUNT ON 

DELETE FROM stkMoviDespa 
WHERE (stkMoviCabe = @pstkMoviCabe)
AND Renglon = IsNull(@pRenglon, Renglon)
AND Despacho_Id = IsNull(dbo.FuncFKcomDespachos(@pDespacho_Id), Despacho_Id)
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkMoviEmbarque.sql*/
DROP PROCEDURE stkMoviEmbarqueGuardar
GO
CREATE PROCEDURE stkMoviEmbarqueGuardar
(
@pstkMoviCabe bigint,
@pcomEmbarques bigint,
@pProveed_Id varChar(25),
@pRemitoProv varchar(20),
@pDespacho_Id varchar(20) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkMoviEmbarque WHERE (stkMoviCabe = @pstkMoviCabe)))
BEGIN 
	UPDATE stkMoviEmbarque
	SET comEmbarques = @pcomEmbarques,
		Proveed_Id = dbo.funcFKcomProveedores(@pProveed_Id),
		RemitoProv = @pRemitoProv,
		Despacho_Id = dbo.FuncFKcomDespachos(@pDespacho_Id)
	WHERE (stkMoviCabe = @pstkMoviCabe)
END 
ELSE 
BEGIN 
	INSERT INTO stkMoviEmbarque
	(
		stkMoviCabe,
		comEmbarques,
		Proveed_Id,
		RemitoProv,
		Despacho_Id
	)
	VALUES 
	(
		@pstkMoviCabe,
		@pcomEmbarques,
		dbo.funcFKcomProveedores(@pProveed_Id),
		@pRemitoProv,
		dbo.FuncFKcomDespachos(@pDespacho_Id)
	)
END 

GO

DROP PROCEDURE stkMoviEmbarqueDatos
GO
CREATE PROCEDURE stkMoviEmbarqueDatos
(
@pstkMoviCabe bigint
)
AS
SET NOCOUNT ON 

SELECT stkMoviEmbarque.stkMoviCabe, stkMoviEmbarque.comEmbarques,
	stkMoviEmbarque.Proveed_Id, comProveedores.RazonSocial, stkMoviEmbarque.RemitoProv, comDespachos.Despacho_Id
FROM stkMoviEmbarque 
INNER JOIN stkMoviCabe  ON (stkMoviCabe.stkMoviCabe = stkMoviEmbarque.stkMoviCabe)
INNER JOIN comEmbarques  ON (comEmbarques.comEmbarques = stkMoviEmbarque.comEmbarques)
INNER JOIN comProveedores  ON (comProveedores.genEntidades = stkMoviEmbarque.Proveed_Id)
LEFT JOIN comDespachos  ON (comDespachos.comDespachos = stkMoviEmbarque.Despacho_Id)
WHERE (stkMoviEmbarque.stkMoviCabe = @pstkMoviCabe)
 
 RETURN @@Error 

GO

DROP PROCEDURE stkMoviEmbarqueEliminar
GO
CREATE PROCEDURE stkMoviEmbarqueEliminar
(
@pstkMoviCabe bigint
)
AS
SET NOCOUNT ON 

DELETE FROM stkMoviEmbarque 
WHERE (stkMoviCabe = @pstkMoviCabe)
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkMoviLega.sql*/
DROP PROCEDURE stkMoviLegaGuardar
GO

CREATE PROCEDURE stkMoviLegaGuardar
(
@pstkMoviCabe bigint,
@pLegajo Int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkMoviLega WHERE (stkMoviCabe = @pstkMoviCabe)))
BEGIN 
	UPDATE stkMoviLega
	SET		Legajo = dbo.FuncFKsuePersonal(@pLegajo)
	WHERE (stkMoviCabe = @pstkMoviCabe)
END 
ELSE 
BEGIN 
	INSERT INTO stkMoviLega
	(
		stkMoviCabe,
		Legajo
	)
	VALUES 
	(
		@pstkMoviCabe,
		dbo.FuncFKsuePersonal(@pLegajo)
	)
END 

GO

DROP PROCEDURE stkMoviLegaDatos
GO
CREATE PROCEDURE stkMoviLegaDatos
(
@pstkMoviCabe bigint
)
AS
SET NOCOUNT ON 

SELECT stkMoviLega.stkMoviCabe, suePersonal.Legajo
FROM stkMoviLega 
INNER JOIN suePersonal  ON (suePersonal.genEntidades = stkMoviLega.Legajo)
WHERE (stkMoviCabe = @pstkMoviCabe)
 
RETURN @@Error 

GO

DROP PROCEDURE stkMoviLegaEliminar
GO
CREATE PROCEDURE stkMoviLegaEliminar
(
@pstkMoviCabe bigint
)
AS
SET NOCOUNT ON 

DELETE FROM stkMoviLega 
WHERE (stkMoviCabe = @pstkMoviCabe)
 
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkMoviOC.sql*/
DROP PROCEDURE stkMoviOCInsertar
GO
CREATE PROCEDURE stkMoviOCInsertar
(
@pstkMoviCabe bigint,
@pRenglon int,
@pcomOrdenComp int,
@pRenglon_OC int,
@pCantFactPendiente qMonedaD8
)
AS
SET NOCOUNT ON 
	INSERT INTO stkMoviOC
	(
		stkMoviCabe,
		Renglon,
		comOrdenComp,
		Renglon_OC,
		CantFactPendiente
	)
	VALUES 
	(
		@pstkMoviCabe,
		@pRenglon,
		@pcomOrdenComp,
		@pRenglon_OC,
		@pCantFactPendiente
	)

GO

DROP PROCEDURE stkMoviOCDatos
GO
CREATE PROCEDURE stkMoviOCDatos
(
@pstkMoviCabe bigint,
@pRenglon int=NULL
)
AS
SET NOCOUNT ON 

SELECT stkMoviOC.stkMoviCabe, stkMoviOC.Renglon,  stkMoviOC.comOrdenComp,
	stkMoviOC.Renglon_OC, 
	stkProductos.Producto_id, stkProductos.Descripcion as DescripcionProducto , 
	stkMoviCuerpo.Cantidad,  stkMoviCuerpo.CantidadForm AS CantidadOriginal,
	comOCCuerpo.Cantidad as CantidadOC, comOcArticulo.CantidadOriginal as CantidadOriginalOC, stkMoviOC.CantFactPendiente
FROM stkMoviOC 
INNER JOIN stkMoviCuerpo  ON (stkMoviCuerpo.stkMoviCabe = stkMoviOC.stkMoviCabe) AND (stkMoviCuerpo.Renglon = stkMoviOC.Renglon)
INNER JOIN comOCArticulo  ON (comOCArticulo.comOrdenComp = stkMoviOC.comOrdenComp) AND (comOCArticulo.Renglon_OC = stkMoviOC.Renglon_OC)
INNER JOIN comOCCuerpo ON (comOCCuerpo.comOrdenComp = stkMoviOC.comOrdenComp) AND (comOCCuerpo.Renglon_OC = stkMoviOC.Renglon_OC)
INNER JOIN stkProductos ON stkProductos.Producto_id = stkMoviCuerpo.Producto_Id
WHERE (stkMoviOC.stkMoviCabe = @pstkMoviCabe)
AND (stkMoviOC.Renglon = isnull(@pRenglon,stkMoviOC.Renglon))
 
 RETURN @@Error 

GO

DROP PROCEDURE stkMoviOCEliminar
GO
CREATE PROCEDURE stkMoviOCEliminar
(
@pstkMoviCabe bigint,
@pRenglon int=NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkMoviOC 
WHERE (stkMoviCabe = @pstkMoviCabe)
AND (stkMoviOC.Renglon = isnull(@pRenglon,stkMoviOC.Renglon))
 
 RETURN @@Error 

GO

Drop Procedure stkMoviOCActuPendiente
Go
Create Procedure stkMoviOCActuPendiente
(
@pstkMoviCabe bigint,
@pRenglon int,
@pCantidad qMonedaD8
)
As
Update stkMoviOC Set CantFactPendiente = CantFactPendiente - @pCantidad Where stkMoviCabe = @pstkMoviCabe And Renglon = @pRenglon
Go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkMoviProv.sql*/

DROP PROCEDURE stkMoviProvGuardar
GO
CREATE PROCEDURE stkMoviProvGuardar
(
@pstkMoviCabe bigint,
@pProveed_Id VarChar(15),
@pRemitoProv VarChar(50), 
@pFechaRemito DateTime
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkMoviProv WHERE (stkMoviCabe = @pstkMoviCabe)))
BEGIN 
	UPDATE stkMoviProv
	SET		Proveed_Id = dbo.FuncFKcomProveedores(@pProveed_Id),
		RemitoProv = @pRemitoProv, FechaRemito = @pFechaRemito
	WHERE (stkMoviCabe = @pstkMoviCabe)
END 
ELSE 
BEGIN 
	INSERT INTO stkMoviProv
	(
		stkMoviCabe,
		Proveed_Id,
		RemitoProv, 
		FechaRemito
	)
	VALUES 
	(
		@pstkMoviCabe,
		dbo.FuncFKcomProveedores(@pProveed_Id),
		@pRemitoProv, 
		@pFechaRemito
	)
END 

GO

DROP PROCEDURE stkMoviProvDatos
GO
CREATE PROCEDURE stkMoviProvDatos
(
@pstkMoviCabe bigint
)
AS
SET NOCOUNT ON 

SELECT stkMoviProv.stkMoviCabe, comProveedores.Proveed_Id, 
	comProveedores.RazonSocial as DescripcionProveedores,
	stkMoviProv.RemitoProv, stkMoviProv.FechaRemito
FROM stkMoviProv 
INNER JOIN stkMoviCabe  ON (stkMoviCabe.stkMoviCabe = stkMoviProv.stkMoviCabe)
INNER JOIN comProveedores  ON (comProveedores.genEntidades = stkMoviProv.Proveed_Id)
WHERE (stkMoviProv.stkMoviCabe = @pstkMoviCabe)
 
RETURN @@Error 

GO

DROP PROCEDURE stkMoviProvEliminar
GO
CREATE PROCEDURE stkMoviProvEliminar
(
@pstkMoviCabe bigint
)
AS
SET NOCOUNT ON 

DELETE FROM stkMoviProv 
WHERE (stkMoviCabe = @pstkMoviCabe)
 
RETURN @@Error 

GO

drop procedure stkRemiProvDatos
go
create procedure stkRemiProvDatos
(
@pEmpresa_id int, 
@pSegmento_id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
AS
Declare @pstkMoviCabe bigint = (select Asiento_id
 from genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_id = @pEmpresa_id and 
	genAsiSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C )

exec stkMoviCabeDatos @pstkMoviCabe
exec stkMoviProvDatos @pstkMoviCabe
go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkMoviRI.sql*/
DROP PROCEDURE stkMoviRIGuardar
GO
CREATE PROCEDURE stkMoviRIGuardar
(
@pstkMoviCabe bigint,
@pRenglon int,
@pcomReqInterno int = NULL,
@pRenglon_RI int = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkMoviRI WHERE (stkMoviCabe = @pstkMoviCabe) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE stkMoviRI
	SET		comReqInterno = @pcomReqInterno,
		Renglon_RI = @pRenglon_RI
	WHERE (stkMoviCabe = @pstkMoviCabe) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO stkMoviRI
	(
		stkMoviCabe,
		Renglon,
		comReqInterno,
		Renglon_RI
	)
	VALUES 
	(
		@pstkMoviCabe,
		@pRenglon,
		@pcomReqInterno,
		@pRenglon_RI
	)
END 

GO

DROP PROCEDURE stkMoviRIDatos
GO
CREATE PROCEDURE stkMoviRIDatos
(
@pstkMoviCabe bigint,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

SELECT stkMoviRI.stkMoviCabe, stkMoviRI.Renglon, stkMoviRI.comReqInterno, stkMoviRI.Renglon_RI
FROM stkMoviRI 
WHERE (stkMoviCabe = @pstkMoviCabe)
AND (Renglon = ISNULL(@pRenglon,Renglon))
 
RETURN @@Error 

GO

DROP PROCEDURE stkMoviRIEliminar
GO
CREATE PROCEDURE stkMoviRIEliminar
(
@pstkMoviCabe bigint,
@pRenglon int = null
)
AS
SET NOCOUNT ON 

DELETE FROM stkMoviRI 
WHERE (stkMoviCabe = @pstkMoviCabe)
AND (Renglon = ISNULL(@pRenglon,Renglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkMoviSerie.sql*/
DROP PROCEDURE stkMoviSerieGuardar
GO
CREATE PROCEDURE stkMoviSerieGuardar
(
@pstkMoviCabe bigint,
@pRenglon int,
@pSerie varchar(25),
@pCantidad qCantidadD8
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkMoviSerie WHERE (stkMoviCabe = @pstkMoviCabe) AND (Renglon = @pRenglon) AND (Serie = @pSerie)))
BEGIN 
	UPDATE stkMoviSerie
	SET		Cantidad = @pCantidad
	WHERE (stkMoviCabe = @pstkMoviCabe) AND (Renglon = @pRenglon) AND (Serie = @pSerie)
END 
ELSE 
BEGIN 
	INSERT INTO stkMoviSerie
	(
		stkMoviCabe,
		Renglon,
		Serie,
		Cantidad
	)
	VALUES 
	(
		@pstkMoviCabe,
		@pRenglon,
		@pSerie,
		@pCantidad
	)
END 

GO

DROP PROCEDURE stkMoviSerieDatos
GO
CREATE PROCEDURE stkMoviSerieDatos
(
@pstkMoviCabe bigint,
@pRenglon int = null,
@pSerie varchar(25) = null
)
AS
SET NOCOUNT ON 

SELECT stkMoviSerie.stkMoviCabe, stkMoviSerie.Renglon, stkMoviSerie.Serie, stkMoviSerie.Cantidad / stkMoviCuerpo.Factor Cantidad, 
	stkSerieVencimiento.Vencimiento, ISNULL(stkUbicaciones.Ubicacion_Id,' ') AS Ubicacion_Id
FROM stkMoviSerie 
INNER JOIN stkMoviCuerpo ON stkMoviCuerpo.stkMoviCabe = stkMoviSerie.stkMoviCabe AND stkMoviCuerpo.Renglon = stkMoviSerie.Renglon
Inner Join conAsientos On conAsientos.conAsientos = stkMoviCuerpo.stkMoviCabe
Left Join stkSerieVencimiento On stkSerieVencimiento.Serie = stkMoviSerie.Serie And stkSerieVencimiento.Producto_Id = stkMoviCuerpo.Producto_Id And
		stkSerieVencimiento.Empresa_Id = conAsientos.Empresa_Id
left join (stkMoviSerieUbicacion  INNER JOIN stkUbicaciones ON 
	stkMoviSerieUbicacion.Ubicacion_Id = stkUbicaciones.stkUbicaciones) on 
	stkMoviSerieUbicacion.stkMoviCabe = stkMoviSerie.stkMoviCabe and 
	stkMoviSerieUbicacion.Renglon = stkMoviSerie.Renglon and
	stkMoviSerieUbicacion.Serie = stkMoviSerie.Serie
	
WHERE stkMoviSerie.stkMoviCabe = @pstkMoviCabe
AND stkMoviCuerpo.Renglon = IsNull(@pRenglon, stkMoviCuerpo.Renglon)
AND stkMoviSerie.Serie = IsNull(@pSerie, stkMoviSerie.Serie)
 
 RETURN @@Error 

GO
DROP PROCEDURE stkMoviSerieEliminar
GO
CREATE PROCEDURE stkMoviSerieEliminar
(
@pstkMoviCabe bigint,
@pRenglon int = Null,
@pSerie varchar(25) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkMoviSerie 
WHERE stkMoviCabe = @pstkMoviCabe
AND Renglon = IsNull(@pRenglon, Renglon)
AND Serie = ISNULL(@pSerie, Serie)
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkMoviSerieUbicacion.sql*/
DROP PROCEDURE stkMoviSerieUbicacionInsertar
GO
CREATE PROCEDURE stkMoviSerieUbicacionInsertar
(
@pstkMoviCabe bigint,
@pRenglon int,
@pSerie varchar(25),
@pUbicacion_Id varchar(25),
@pCantidad qCantidadD8
)
AS
	INSERT INTO stkMoviSerieUbicacion
	(
		stkMoviCabe,
		Renglon,
		Serie,
		Ubicacion_Id,
		Cantidad
	)
	VALUES 
	(
		@pstkMoviCabe,
		@pRenglon,
		@pSerie,
		dbo.FuncFKstkUbicaciones(@pUbicacion_Id),
		@pCantidad
	)

GO

DROP PROCEDURE stkMoviSerieUbicacionDatos
GO
CREATE PROCEDURE stkMoviSerieUbicacionDatos
(
@pstkMoviCabe bigint,
@pRenglon int,
@pSerie varchar(25),
@pUbicacion_Id varchar(25)
)
AS
SET NOCOUNT ON 

SELECT stkMoviSerieUbicacion.stkMoviCabe, stkMoviSerieUbicacion.Renglon, stkMoviSerieUbicacion.Serie, 
	stkUbicaciones.Ubicacion_Id, stkMoviSerieUbicacion.Cantidad
FROM stkMoviSerieUbicacion 
INNER JOIN stkMoviSerie  ON (stkMoviSerie.stkMoviCabe = stkMoviSerieUbicacion.stkMoviCabe) AND (stkMoviSerie.Renglon = stkMoviSerieUbicacion.Renglon) AND (stkMoviSerie.Serie = stkMoviSerieUbicacion.Serie)
INNER JOIN stkUbicaciones  ON (stkUbicaciones.stkUbicaciones = stkMoviSerieUbicacion.Ubicacion_Id)
WHERE (stkMoviSerieUbicacion.stkMoviCabe = @pstkMoviCabe)
AND (stkMoviSerieUbicacion.Renglon = @pRenglon)
AND (stkMoviSerieUbicacion.Serie = @pSerie)
AND (stkMoviSerieUbicacion.Ubicacion_Id = dbo.stkUbicaciones(@pUbicacion_Id))
 
 RETURN @@Error 

GO

DROP PROCEDURE stkMoviSerieUbicacionEliminar
GO
CREATE PROCEDURE stkMoviSerieUbicacionEliminar
(
@pstkMoviCabe bigint,
@pRenglon int = NULL,
@pSerie varchar(25) = NULL ,
@pUbicacion_Id varchar(25) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkMoviSerieUbicacion 
WHERE stkMoviCabe = @pstkMoviCabe
AND Renglon = isnull(@pRenglon, Renglon)
AND Serie = isnull(@pSerie, Serie)
AND (@pUbicacion_Id IS NULL OR Ubicacion_Id = dbo.FuncFKstkUbicaciones(@pUbicacion_Id))
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkMoviUbicacion.sql*/
DROP PROCEDURE stkMoviUbicacionInsertar
GO
CREATE PROCEDURE stkMoviUbicacionInsertar
(
@pstkMoviCabe bigint,
@pRenglon int,
@pUbicacion_Id varchar(25),
@pCantidad qCantidadD8,
@pCantidadAlterna qCantidadD8
)
AS
	INSERT INTO stkMoviUbicacion
	(
		stkMoviCabe,
		Renglon,
		Ubicacion_Id,
		Cantidad,
		CantidadAlterna
	)
	VALUES 
	(
		@pstkMoviCabe,
		@pRenglon,
		dbo.FuncFKstkUbicaciones(@pUbicacion_Id),
		@pCantidad,
		@pCantidadAlterna
	)


GO

DROP PROCEDURE stkMoviUbicacionDatos
GO
CREATE PROCEDURE stkMoviUbicacionDatos
(
@pstkMoviCabe bigint,
@pRenglon int = NULL,
@pUbicacion_Id VarChar(25) = NULL
)
AS
SET NOCOUNT ON 

SELECT stkMoviUbicacion.stkMoviCabe, stkMoviUbicacion.Renglon, stkProductos.Producto_Id, 
	stkDepositos.Deposito_Id,  stkUbicaciones.Ubicacion_Id,
	stkMoviUbicacion.Cantidad / stkMoviCuerpo.Factor as Cantidad, stkMoviUbicacion.CantidadAlterna
FROM stkMoviUbicacion 
INNER JOIN stkMoviCuerpo  ON (stkMoviCuerpo.stkMoviCabe = stkMoviUbicacion.stkMoviCabe) AND (stkMoviCuerpo.Renglon = stkMoviUbicacion.Renglon)
INNER JOIN stkUbicaciones  ON (stkUbicaciones.stkUbicaciones = stkMoviUbicacion.Ubicacion_Id)
INNER JOIN stkProductos ON stkProductos.stkProductos = stkMoviCuerpo.Producto_Id 
INNER JOIN stkDepositos ON stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id
WHERE stkMoviCuerpo.stkMoviCabe = @pstkMoviCabe
AND stkMoviCuerpo.Renglon = ISNULL(@pRenglon,stkMoviCuerpo.Renglon)
AND stkUbicaciones.Ubicacion_Id = ISNULL(@pUbicacion_Id,stkUbicaciones.Ubicacion_Id)
 
RETURN @@Error 

GO

DROP PROCEDURE stkMoviUbicacionEliminar
GO
CREATE PROCEDURE stkMoviUbicacionEliminar
(
@pstkMoviCabe bigint,
@pRenglon int = null,
@pUbicacion_Id varchar(25) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkMoviUbicacion 
WHERE 
	(stkMoviCabe = @pstkMoviCabe)
AND (Renglon = ISNULL(@pRenglon,stkMoviUbicacion.Renglon))
AND (Ubicacion_Id = dbo.FuncFKstkUbicaciones(@pUbicacion_Id))
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkNotasCreditoXDevolucion.sql*/


DROP Procedure  stkNotasCreditoXDevolucionDatos
go
create procedure stkNotasCreditoXDevolucionDatos
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20),
@pSegmento_IdNC VarChar(10), 
@pSegmento1NNC int,
@pSegmento2NNC int,
@pSegmento3NNC int,
@pSegmento4NNC int,
@pSegmento1CNC VarChar(20),
@pSegmento2CNC VarChar(20),
@pSegmento3CNC VarChar(20),
@pSegmento4CNC VarChar(20)

)
AS

Declare @pstkMoviCabe bigint = (select Asiento_Id
 from genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and 
	genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C )

Declare @pvenMovimientos bigint = (select Asiento_Id
 from genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and 
	genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_IdNC) and 
	genAsiSegmentos.Segmento1N = @pSegmento1NNC and 
	genAsiSegmentos.Segmento2N = @pSegmento2NNC and 
	genAsiSegmentos.Segmento3N = @pSegmento3NNC and 
	genAsiSegmentos.Segmento4N = @pSegmento4NNC and 
	genAsiSegmentos.Segmento1C = @pSegmento1CNC and 
	genAsiSegmentos.Segmento2C = @pSegmento2CNC and 
	genAsiSegmentos.Segmento3C = @pSegmento3CNC and 
	genAsiSegmentos.Segmento4C = @pSegmento4CNC )



select stkDevolucionesClie.stkMoviCabe, genSegmentos.Segmento_Id ,genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C , 
	/*@pSegmento_IdNC as Segmento_IdNC  , @pSegmento1NNC AS Segmento1NNC,@pSegmento2NNC AS Segmento2NNC,@pSegmento3NNC AS Segmento3NNC ,@pSegmento4NNC AS Segmento4NNC
	,@pSegmento1CNC AS	Segmento1CNC,@pSegmento2CNC AS Segmento2CNC	,@pSegmento3CNC AS Segmento3CNC,@pSegmento4CNC AS Segmento4CNC,*/
	conAsientos.Fecha, venClientes.Cliente_Id,venClientes.RazonSocial,
	conCentro1.Centro1_Id,conCentro2.Centro2_Id,venMovimientos.Dato1,venMovimientos.Dato2,venMovimientos.Dato3,venMovimientos.Comision1,venMovimientos.Comision2,
	venMovimientos.Bonificacion1,venMovimientos.Bonificacion2,venMovimientos.Bonificacion3,venMovimientos.Bonificacion4,venMovimientos.Bonificacion5,
	venMovimientos.CobraAbasto,venVendedores.Vendedor_Id,venFormaEntrega.FormaEntrega_Id,venMovimientos.Sucursal,venMovimientos.SubTotalBonif,
	venMovimientos.SubTotal,venCondPago.CondPagoCli_Id,venMovimientos.Importe,venMovimientos.CambioFijo,venMovimientos.ComprobanteDesde,venMovimientos.TipoPago,
	venIncoterm.Incoterm_Id,venMovimientos.Saldo,venSubTipoMov.SubTipoMov_Id,genMonedas.Moneda_Id,conAsientos.CambioMonedaOriginal,
	conAsientos.Cambio,conAsientos.Observaciones,venCondFiscal.CondFisc_Id
	from genAsiSegmentos 
		inner join	genSegmentos on  genSegmentos.genSegmentos=genAsiSegmentos.Segmento_Id
		inner join stkDevolucionesClie on  stkDevolucionesClie.venMovimientosFact=genAsiSegmentos.Asiento_Id 
		inner join conAsientos ON conAsientos.conAsientos = stkDevolucionesClie.venMovimientosFact
		inner join venMovimientos on venMovimientos.venMovimientos=stkDevolucionesClie.venMovimientosFact
		inner join venClientes on venClientes.genEntidades=venMovimientos.Cliente_Id
		inner join stkMoviCausa on stkMoviCausa.stkMoviCabe = stkDevolucionesClie.stkMoviCabe
		INNER JOIN stkCausasMovi ON stkCausasMovi.stkCausasMovi = stkMoviCausa.Causa_Id
		LEFT JOIN conCentro1 ON conCentro1.conCentro1 = stkMoviCausa.Centro1_Id
		LEFT JOIN conCentro2 ON conCentro2.conCentro2 = stkMoviCausa.Centro2_Id
		inner join genMonedas on genMonedas.genMonedas=conAsientos.Moneda_Id
		inner join venSubTipoMov on venSubTipoMov.venSubTipoMov=venMovimientos.venSubTipoMov_Id
		inner join venCondPago on venMovimientos.CondPagoCli_Id=venCondPago.venCondPago
		inner join venVendedores on venVendedores.venVendedores= venMovimientos.Vendedor_Id
		inner join venFormaEntrega on venMovimientos.FormaEntrega_Id=venFormaEntrega.venFormaEntrega
		inner join venIncoterm on venIncoterm.venIncoterm_int=venMovimientos.Incoterm_Id
		inner join venCondFiscal on venMovimientos.CondFisc_Id=venCondFiscal.venCondFiscal
		WHERE
			stkDevolucionesClie.stkMoviCabe = @pstkMoviCabe

select stkMoviCabe,Renglon,comDespachos.Despacho_Id,Cantidad 
from stkMoviDespa
inner join comDespachos on comDespachos.comDespachos=stkMoviDespa.Despacho_Id 
where stkMoviCabe=@pstkMoviCabe


if @pvenMovimientos is not null
	Begin

	select venMovConStockCr.venMovimientos,stkMoviCuerpo.Cantidad,stkProductos.Producto_Id,stkProductos.Descripcion,
	FactOriginal.RenglonCuerpo, FactOriginal.PrecioForm,FactOriginal.Bonificacion,
	stkUniMed.Medida_Id,venMovConStockCr.CantOriginal as CantidadNueva,stkDepositos.Deposito_Id,
	FactOriginal.Factor,venMovConStockCr.PrecioForm as PrecioOriginal,FactOriginal.Observaciones,
	FactOriginal.CantOriginal,FactOriginal.FechaEntrega,
	FactOriginal.TipoPrecio,FactOriginal.CantidadAlternaForm,
	FactOriginal.PrecioFormImpuesto,FactOriginal.ComiPorce,
	FactOriginal.PrecioLista,FactOriginal.PrecioSinIva,FactOriginal.PrecioVenta,
	FactOriginal.PrecioFormImpuesto,FactOriginal.PrecioFormImpuestoBon,FactOriginal.PrecioFormImpuestoTot,
	FactOriginal.SubTotal,FactOriginal.SubTotalFormImpuesto
 
 
 from  venMovConStockCr
 
INNER JOIN stkProductos ON stkProductos.stkProductos = venMovConStockCr.Producto_Id
INNER JOIN stkUniMed ON stkUniMed.stkUniMed = venMovConStockCr.Medida_Id
Inner Join stkDepositos ON stkDepositos.stkDepositos=venMovConStockCr.Deposito_Id
left Join stkDevolucionesClie on  
	venMovConStockCr.venMovimientos=stkDevolucionesClie.venMovimientosNC
left join stkMoviCuerpo  ON 
	stkMoviCuerpo.stkMoviCabe =stkDevolucionesClie.stkMoviCabe and 
	stkMoviCuerpo.Producto_Id = stkProductos.stkProductos
	inner join venMovConStockCr as FactOriginal ON venMovConStockCr.venMovimientos=stkDevolucionesClie.venMovimientosFact

 where venMovConStockCr.venMovimientos= @pvenMovimientos

	end
	else

 select stkMoviCuerpo.stkMoviCabe,stkMoviCuerpo.Cantidad,stkProductos.Producto_Id, stkProductos.Descripcion,
 venMovConStockCr.RenglonCuerpo,venMovConStockCr.PrecioForm,venMovConStockCr.Bonificacion,
 stkUniMed.Medida_Id,0.00 as CantidadNueva,stkDepositos.Deposito_Id,
 venMovConStockCr.Factor,venMovConStockCr.PrecioForm as PrecioOriginal,venMovConStockCr.Observaciones,
 venMovConStockCr.CantOriginal,venMovConStockCr.FechaEntrega,
 venMovConStockCr.TipoPrecio,venMovConStockCr.CantidadAlternaForm,
 venMovConStockCr.PrecioFormImpuesto,venMovConStockCr.ComiPorce,
 venMovConStockCr.PrecioLista,venMovConStockCr.PrecioSinIva,venMovConStockCr.PrecioVenta,
 venMovConStockCr.PrecioFormImpuesto,venMovConStockCr.PrecioFormImpuestoBon,venMovConStockCr.PrecioFormImpuestoTot,
 venMovConStockCr.SubTotal,venMovConStockCr.SubTotalFormImpuesto
 from  stkMoviCuerpo 
 --venMovConStockCr

 inner join stkMoviCabe on stkMoviCabe.stkMoviCabe=stkMoviCuerpo.stkMoviCabe 
 INNER JOIN stkProductos ON stkProductos.stkProductos = stkMoviCuerpo.Producto_Id 

 INNER JOIN stkUniMed ON stkUniMed.stkUniMed = stkMoviCuerpo.Medida_Id
 inner join stkDevolucionesClie on stkDevolucionesClie.stkMoviCabe=stkMoviCabe.stkMoviCabe
 inner join venMovConStockCr on  stkDevolucionesClie.venMovimientosFact=venMovConStockCr.venMovimientos 
 
Inner Join stkDepositos ON stkDepositos.stkDepositos=venMovConStockCr.Deposito_Id


 where stkMoviCabe.stkMoviCabe=@pstkMoviCabe
GO


drop procedure stkNotasCreditoXDevolucionGuardar 
go
create procedure stkNotasCreditoXDevolucionGuardar 
(@pstkMoviCabe bigint ,
@pvenMovimientosNC bigint = null)
as

	UPDATE stkDevolucionesClie
	SET		 venMovimientosNC=@pvenMovimientosNC
	WHERE (stkMoviCabe = @pstkMoviCabe)
go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkProductos.sql*/
DROP PROCEDURE stkProductosGuardar
GO
CREATE PROCEDURE stkProductosGuardar
(
@pProducto_Id varchar(25),
@pProducto_Id_Nuevo varchar(25),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(80),
@pDescripcionDetallada QMemo = NULL,
@pDescription QMemo = NULL,
@pMedida_Id varchar(5),
@pMedidaAlterna varChar(5) = NULL,
@pFactorAlterna qCantidadD8,
@pClase char(1),
@pClaseAlterna char(1),
@pCodigoBarra varchar(25),
@pTipo_Id varchar(5) = NULL,
@pFamilia_Id varChar(15) = Null,
@pGrupo_Id varChar(15) = Null,
@pTrabajaPorLotes Sino,
@pconVencimiento Sino,
@pSerializable Sino,
@pUsaDespachoImportacion Sino,
@pUmVenta varchar(5) = NULL,
@pCostoPromPond qMonedaD8,
@pCostoUltCompra qMonedaD8,
@pCostoReposicion qMonedaD8,
@pCostoStandard qMonedaD8,
@pCostoUltimoCierre qMonedaD8,
@pMonedaUltCompra varchar(3) = NULL,
@pPrecioUltCompra qMonedaD8,
@pUMCompra varchar(5) = NULL,
@pCtaCompra varchar(25) = NULL,
@pCtaAjuInventario varchar(25) = NULL,
@pCtaVenta varchar(25) = NULL,
@pCtaCredito varchar(25) = NULL,
@pCtaDescuento varchar(25) = NULL,
@pCtaCosto varchar(25) = NULL,
@pCtaVentaExt varchar(25) = NULL,
@pCtaCreditoExt varchar(25) = NULL,
@pCtaDescuentoExt varchar(25) = NULL,
@pCtaCostoExt varchar(25) = NULL,
@pFcha_Ult_Compra qFecha,
@pMargenExceso qPorcentaje,
@pTiempoEntrega smallint,
@pAcepta_Ventas Sino,
@pCFVenta_Id varchar(5) = NULL,
@pAcepta_Compras Sino,
@pCFComp_Id varchar(5) = NULL,
@pAcepta_Comis_Vta Sino,
@pDiasGarantia smallint,
@pImagen QMemo = NULL,
@pFechaUltModif qFechaHora,
@pImagenExtension varchar(5),
@pCodigoFiscal VarChar(20)=NULL,
@pFraccionArancelaria VarChar(20)=NULL,
@pInactivo Sino,
@pUsuario_Id int,
@pPosteado Sino,
@pCtaConsumo varchar(25)=null,
@pObservaciones QMemo,
@pUlrProd varchar(max)=null,
@pClaveSTCC VarChar(6) = NULL,
@pMaterialPeligroso Bit, 
@pCveMaterialPeligroso VarChar(6) = NULL,
@pEmbalaje VarChar(6) = NULL,
@pPesoEnKg Numeric(18,4) = NULL
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM stkProductos WHERE (Producto_Id = @pProducto_id)))
BEGIN 
	UPDATE stkProductos
	SET		@lIdentidad = stkProductos,
		Producto_Id = @pProducto_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		DescripcionDetallada = @pDescripcionDetallada,
		Description = @pDescription,
		Medida_Id = dbo.FuncFKstkUniMed(@pMedida_Id),
		MedidaAlterna = dbo.FuncFKstkUniMed(@pMedidaAlterna),
		FactorAlterna = @pFactorAlterna,
		Clase = @pClase,
		ClaseAlterna = @pClaseAlterna,
		CodigoBarra = @pCodigoBarra,
		Tipo_Id = dbo.FuncFKstkTipos(@pTipo_Id),
		Familia_Id = dbo.FuncFKstkFamilias(@pFamilia_Id),
		Grupo_Id = dbo.FuncFKstkGrupos(@pGrupo_Id),
		TrabajaPorLotes = @pTrabajaPorLotes,
		conVencimiento = @pconVencimiento,
		Serializable = @pSerializable,
		UsaDespachoImportacion = @pUsaDespachoImportacion,
		UmVenta = dbo.FuncFKstkUniMed(@pUmVenta),
		CostoPromPond = @pCostoPromPond,
		CostoUltCompra = @pCostoUltCompra,
		CostoReposicion = @pCostoReposicion,
		CostoStandard = @pCostoStandard,
		CostoUltimoCierre = @pCostoUltimoCierre,
		MonedaUltCompra = dbo.FuncFKgenMonedas(@pMonedaUltCompra),
		PrecioUltCompra = @pPrecioUltCompra,
		UMCompra = dbo.FuncFKstkUniMed(@pUMCompra),
		CtaCompra = dbo.FuncFKconCuentas(@pCtaCompra),
		CtaAjuInventario = dbo.FuncFKconCuentas(@pCtaAjuInventario),
		CtaVenta = dbo.FuncFKconCuentas(@pCtaVenta),
		CtaCredito = dbo.FuncFKconCuentas(@pCtaCredito),
		CtaDescuento = dbo.FuncFKconCuentas(@pCtaDescuento),
		CtaCosto = dbo.FuncFKconCuentas(@pCtaCosto),
		CtaVentaExt = dbo.FuncFKconCuentas(@pCtaVentaExt),
		CtaCreditoExt = dbo.FuncFKconCuentas(@pCtaCreditoExt),
		CtaDescuentoExt = dbo.FuncFKconCuentas(@pCtaDescuentoExt),
		CtaCostoExt = dbo.FuncFKconCuentas(@pCtaCostoExt),
		Fcha_Ult_Compra = @pFcha_Ult_Compra,
		MargenExceso = @pMargenExceso,
		TiempoEntrega = @pTiempoEntrega,
		Acepta_Ventas = @pAcepta_Ventas,
		CFVenta_Id = dbo.FuncFKstkCondFisVenta(@pCFVenta_Id),
		Acepta_Compras = @pAcepta_Compras,
		CFComp_Id = dbo.FuncFKstkCondFisCompra(@pCFComp_Id),
		Acepta_Comis_Vta = @pAcepta_Comis_Vta,
		DiasGarantia = @pDiasGarantia,
		FechaUltModif = @pFechaUltModif,
		ImagenExtension = @pImagenExtension,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado,
		Imagen = @pImagen, 
		CodigoFiscal = @pCodigoFiscal, 
		FraccionArancelaria =@pFraccionArancelaria,
		CtaConsumo=dbo.funcfkconCuentas(@pCtaConsumo),
		Observaciones=@pObservaciones,
		UrlProd=@pUlrProd, 
		ClaveSTCC = @pClaveSTCC,
		MaterialPeligroso  = @pMaterialPeligroso, 
		CveMaterialPeligroso = @pCveMaterialPeligroso,
		Embalaje = @pEmbalaje,
		PesoEnKg = @pPesoEnKg
	WHERE (Producto_Id = @pProducto_Id)
END 
ELSE 
BEGIN 
	INSERT INTO stkProductos
	(
		Producto_Id,
		Empresa_Id,
		Descripcion,
		DescripcionDetallada,
		Description,
		Medida_Id,
		MedidaAlterna,
		FactorAlterna,
		Clase,
		ClaseAlterna,
		CodigoBarra,
		Tipo_Id,
		Familia_Id,
		Grupo_Id,
		TrabajaPorLotes,
		conVencimiento,
		Serializable,
		UsaDespachoImportacion,
		UmVenta,
		CostoPromPond,
		CostoUltCompra,
		CostoReposicion,
		CostoStandard,
		CostoUltimoCierre,
		MonedaUltCompra,
		PrecioUltCompra,
		UMCompra,
		CtaCompra,
		CtaAjuInventario,
		CtaVenta,
		CtaCredito,
		CtaDescuento,
		CtaCosto,
		CtaVentaExt,
		CtaCreditoExt,
		CtaDescuentoExt,
		CtaCostoExt,
		Fcha_Ult_Compra,
		MargenExceso,
		TiempoEntrega,
		Acepta_Ventas,
		CFVenta_Id,
		Acepta_Compras,
		CFComp_Id,
		Acepta_Comis_Vta,
		DiasGarantia,
		FechaUltModif,
		ImagenExtension,
		Inactivo,
		Usuario_Id,
		Posteado,
		Imagen, 
		CodigoFiscal,
		FraccionArancelaria,
		CtaConsumo,
		Observaciones,
		UrlProd,
		ClaveSTCC,
		MaterialPeligroso , 
		CveMaterialPeligroso,
		Embalaje,
		PesoEnKg
	)
	VALUES 
	(
		@pProducto_Id_Nuevo,
		@pEmpresa_Id,
		@pDescripcion,
		@pDescripcionDetallada,
		@pDescription,
		dbo.FuncFKstkUniMed(@pMedida_Id),
		dbo.FuncFKstkUniMed(@pMedidaAlterna),
		@pFactorAlterna,
		@pClase,
		@pClaseAlterna,
		@pCodigoBarra,
		dbo.FuncFKstkTipos(@pTipo_Id),
		dbo.FuncFKstkFamilias(@pFamilia_Id),
		dbo.FuncFKstkGrupos(@pGrupo_Id),
		@pTrabajaPorLotes,
		@pconVencimiento,
		@pSerializable,
		@pUsaDespachoImportacion,
		dbo.FuncFKstkUniMed(@pUmVenta),
		@pCostoPromPond,
		@pCostoUltCompra,
		@pCostoReposicion,
		@pCostoStandard,
		@pCostoUltimoCierre,
		dbo.FuncFKgenMonedas(@pMonedaUltCompra),
		@pPrecioUltCompra,
		dbo.FuncFKstkUniMed(@pUMCompra),
		dbo.FuncFKconCuentas(@pCtaCompra),
		dbo.FuncFKconCuentas(@pCtaAjuInventario),
		dbo.FuncFKconCuentas(@pCtaVenta),
		dbo.FuncFKconCuentas(@pCtaCredito),
		dbo.FuncFKconCuentas(@pCtaDescuento),
		dbo.FuncFKconCuentas(@pCtaCosto),
		dbo.FuncFKconCuentas(@pCtaVentaExt),
		dbo.FuncFKconCuentas(@pCtaCreditoExt),
		dbo.FuncFKconCuentas(@pCtaDescuentoExt),
		dbo.FuncFKconCuentas(@pCtaCostoExt),
		@pFcha_Ult_Compra,
		@pMargenExceso,
		@pTiempoEntrega,
		@pAcepta_Ventas,
		dbo.FuncFKstkCondFisVenta(@pCFVenta_Id),
		@pAcepta_Compras,
		dbo.FuncFKstkCondFisCompra(@pCFComp_Id),
		@pAcepta_Comis_Vta,
		@pDiasGarantia,
		@pFechaUltModif,
		@pImagenExtension,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado,
		@pImagen, 
		@pCodigoFiscal, 
		@pFraccionArancelaria,
		dbo.FuncFKconCuentas(@pCtaConsumo),
		@pObservaciones,
		@pUlrProd,
		@pClaveSTCC,
		@pMaterialPeligroso , 
		@pCveMaterialPeligroso,
		@pEmbalaje,
		@pPesoEnKg
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO


DROP PROCEDURE stkProductosGuardarConMovimientos
GO
CREATE PROCEDURE stkProductosGuardarConMovimientos
(
@pProducto_Id varchar(25),
@pProducto_Id_Nueva varchar(25),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(80),
@pDescripcionDetallada QMemo = NULL,
@pDescription QMemo = NULL,
--@pMedida_Id varchar(5),
@pMedidaAlterna varChar(5) = NULL,
@pFactorAlterna qCantidadD8,
--@pClase char(1),
@pClaseAlterna char(1),
@pCodigoBarra varchar(25),
@pTipo_Id varchar(5) = NULL,
@pFamilia_Id varChar(15) = Null,
@pGrupo_Id varChar(15) = Null,
--@pTrabajaPorLotes Sino,
--@pconVencimiento Sino,
--@pSerializable Sino,
--@pUsaDespachoImportacion Sino,
@pUmVenta varchar(5) = NULL,
--@pCostoPromPond qMonedaD8,
--@pCostoUltCompra qMonedaD8,
@pCostoReposicion qMonedaD8,
--@pCostoStandard qMonedaD8,
--@pCostoUltimoCierre qMonedaD8,
@pMonedaUltCompra varchar(3) = NULL,
--@pPrecioUltCompra qMonedaD8,
@pUMCompra varchar(5) = NULL,
@pCtaCompra varchar(25) = NULL,
@pCtaAjuInventario varchar(25) = NULL,
@pCtaVenta varchar(25) = NULL,
@pCtaCredito varchar(25) = NULL,
@pCtaDescuento varchar(25) = NULL,
@pCtaCosto varchar(25) = NULL,
@pCtaVentaExt varchar(25) = NULL,
@pCtaCreditoExt varchar(25) = NULL,
@pCtaDescuentoExt varchar(25) = NULL,
@pCtaCostoExt varchar(25) = NULL,
--@pFcha_Ult_Compra qFecha,
@pMargenExceso qPorcentaje,
@pTiempoEntrega smallint,
@pAcepta_Ventas Sino,
@pCFVenta_Id varchar(5) = NULL,
@pAcepta_Compras Sino,
@pCFComp_Id varchar(5) = NULL,
@pAcepta_Comis_Vta Sino,
@pDiasGarantia smallint,
@pImagen QMemo = NULL,
@pFechaUltModif qFechaHora,
@pImagenExtension varchar(5),
@pCodigoFiscal VarChar(20)=NULL,
@pFraccionArancelaria VarChar(20)=NULL,
@pInactivo Sino,
@pUsuario_Id int,
@pPosteado Sino,
@pCtaConsumo varchar(25),
@pObservaciones QMemo,
@pUlrProd varchar(max)=null, 
@pClaveSTCC VarChar(6) = NULL,
@pMaterialPeligroso Bit, 
@pCveMaterialPeligroso VarChar(6) = NULL,
@pEmbalaje VarChar(6) = NULL,
@pPesoEnKg Numeric(18,4) = NULL
)
AS
SET NOCOUNT ON 

DECLARE @lIdentidad int
--IF (EXISTS (SELECT 1 FROM stkProductos WHERE (Producto_Id = @pProducto_id)))

UPDATE stkProductos
SET	@lIdentidad = stkProductos,
	Producto_Id = @pProducto_Id_Nueva,
	Empresa_Id = @pEmpresa_Id,
	Descripcion = @pDescripcion,
	DescripcionDetallada = @pDescripcionDetallada,
	Description = @pDescription,
	--Medida_Id = dbo.FuncFKstkUniMed(@pMedida_Id),
	MedidaAlterna = dbo.FuncFKstkUniMed(@pMedidaAlterna),
	FactorAlterna = @pFactorAlterna,
	--Clase = @pClase,
	ClaseAlterna = @pClaseAlterna,
	CodigoBarra = @pCodigoBarra,
	Tipo_Id = dbo.FuncFKstkTipos(@pTipo_Id),
	Familia_Id = dbo.FuncFKstkFamilias(@pFamilia_Id),
	Grupo_Id = dbo.FuncFKstkGrupos(@pGrupo_Id),	--TrabajaPorLotes = @pTrabajaPorLotes,
	--conVencimiento = @pconVencimiento,
	--Serializable = @pSerializable,
	--UsaDespachoImportacion = @pUsaDespachoImportacion,
	UmVenta = dbo.FuncFKstkUniMed(@pUmVenta),
	--CostoPromPond = @pCostoPromPond,
	--CostoUltCompra = @pCostoUltCompra,
	CostoReposicion = @pCostoReposicion,
	--CostoStandard = @pCostoStandard,
	--CostoUltimoCierre = @pCostoUltimoCierre,
	MonedaUltCompra = dbo.FuncFKgenMonedas(@pMonedaUltCompra),
	--PrecioUltCompra = @pPrecioUltCompra,
	UMCompra = dbo.FuncFKstkUniMed(@pUMCompra),
	CtaCompra = dbo.FuncFKconCuentas(@pCtaCompra),
	CtaAjuInventario = dbo.FuncFKconCuentas(@pCtaAjuInventario),
	CtaVenta = dbo.FuncFKconCuentas(@pCtaVenta),
	CtaCredito = dbo.FuncFKconCuentas(@pCtaCredito),
	CtaDescuento = dbo.FuncFKconCuentas(@pCtaDescuento),
	CtaCosto = dbo.FuncFKconCuentas(@pCtaCosto),
	CtaVentaExt = dbo.FuncFKconCuentas(@pCtaVentaExt),
	CtaCreditoExt = dbo.FuncFKconCuentas(@pCtaCreditoExt),
	CtaDescuentoExt = dbo.FuncFKconCuentas(@pCtaDescuentoExt),
	CtaCostoExt = dbo.FuncFKconCuentas(@pCtaCostoExt),
	--Fcha_Ult_Compra = @pFcha_Ult_Compra,
	MargenExceso = @pMargenExceso,
	TiempoEntrega = @pTiempoEntrega,
	Acepta_Ventas = @pAcepta_Ventas,
	CFVenta_Id = dbo.FuncFKstkCondFisVenta(@pCFVenta_Id),
	Acepta_Compras = @pAcepta_Compras,
	CFComp_Id = dbo.FuncFKstkCondFisCompra(@pCFComp_Id),
	Acepta_Comis_Vta = @pAcepta_Comis_Vta,
	DiasGarantia = @pDiasGarantia,
	FechaUltModif = @pFechaUltModif,
	ImagenExtension = @pImagenExtension,
	Inactivo = @pInactivo,
	Usuario_Id = @pUsuario_Id,
	Posteado = @pPosteado,
	Imagen = @pImagen, 
	CodigoFiscal = @pCodigoFiscal, 
	FraccionArancelaria =@pFraccionArancelaria,
	CtaConsumo=dbo.FuncFKconCuentas(@pCtaConsumo),
	Observaciones=@pObservaciones,
	UrlProd=@pUlrProd,
	ClaveSTCC = @pClaveSTCC,
	MaterialPeligroso  = @pMaterialPeligroso, 
	CveMaterialPeligroso = @pCveMaterialPeligroso,
	Embalaje = @pEmbalaje,
	PesoEnKg = @pPesoEnKg
WHERE (Producto_Id = @pProducto_Id)

Select @lIdentidad as RetVal 

GO




DROP PROCEDURE stkProductosDatos
GO
CREATE PROCEDURE stkProductosDatos
(
@pProducto_id varchar(25)
)
AS
SET NOCOUNT ON 


SELECT stkProductos.stkProductos, stkProductos.Producto_Id, stkProductos.Empresa_Id, 
	Cast( Case When stkProductos.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	stkProductos.Descripcion, stkProductos.DescripcionDetallada, stkProductos.Description, stkUniMed.Medida_Id,
	stkUniMed.Descripcion as DescripcionUniMed, stkMedidaAlterna.Medida_Id MedidaAlterna, stkMedidaAlterna.Descripcion DescripcionMedidaAlterna,
	stkProductos.FactorAlterna, stkProductos.Clase, stkProductos.ClaseAlterna, stkProductos.CodigoBarra, stkTipos.Tipo_Id,
	stkTipos.Descripcion as DescripcionTipos, stkFamilias.Familia_Id, stkFamilias.Descripcion DescripcionFamilia,
	stkGrupos.Grupo_Id, stkGrupos.Descripcion DescripcionGrupo,	stkProductos.TrabajaPorLotes, stkProductos.conVencimiento,
	stkProductos.Serializable, stkProductos.UsaDespachoImportacion,
	UmVenta.Medida_Id as UmVenta, UmVenta.Descripcion as DescripcionUmVenta, stkProductos.CostoPromPond, stkProductos.CostoUltCompra,
	stkProductos.CostoReposicion, stkProductos.CostoStandard, stkProductos.CostoUltimoCierre,
	genMonedas.Moneda_Id MonedaUltCompra, genMonedas.Descripcion as DescripcionMonedas,
	stkProductos.PrecioUltCompra, UMCompra.Medida_Id as UMCompra, UMCompra.Descripcion as DescripcionUMCompra, 
	CtaCompra.Cuenta_Id as CtaCompra,CtaCompra.Descripcion as DescripcionCtaCompra, 
	CtaAjuInventario.Cuenta_Id as CtaAjuInventario, CtaAjuInventario.Descripcion as DescripcionCtaAjuInventario, 
	CtaVenta.Cuenta_Id as CtaVenta,	CtaVenta.Descripcion as DescripcionCtaVenta, 
	CtaCredito.Cuenta_Id as CtaCredito, CtaCredito.Descripcion as DescripcionCtaCredito, 
	CtaDescuento.Cuenta_Id as CtaDescuento,CtaDescuento.Descripcion as DescripcionCtaDescuento, 
	CtaCosto.Cuenta_Id as CtaCosto , CtaCosto.Descripcion as DescripcionCtaCosto, 
	CtaVentaExt.Cuenta_Id as CtaVentaExt ,	CtaVentaExt.Descripcion as DescripcionCtaVentaExt, 
	CtaCreditoExt.Cuenta_Id as CtaCreditoExt , CtaCreditoExt.Descripcion as DescripcionCtaCreditoExt, 
	CtaDescuentoExt.Cuenta_Id as CtaDescuentoExt ,CtaDescuentoExt.Descripcion as DescripcionCtaDescuentoExt, 
	CtaCostoExt.Cuenta_Id as CtaCostoExt , CtaCostoExt.Descripcion as DescripcionCtaCostoExt, 
	stkProductos.Fcha_Ult_Compra,
	stkProductos.MargenExceso, stkProductos.TiempoEntrega, stkProductos.Acepta_Ventas, stkCondFisVenta.CFVenta_Id,
	stkCondFisVenta.Descripcion as DescripcionCondFisVenta, stkProductos.Acepta_Compras, stkCondFisCompra.CFComp_Id, stkCondFisCompra.Descripcion as DescripcionCondFisCompra,
	stkProductos.Acepta_Comis_Vta, stkProductos.DiasGarantia, stkProductos.FechaUltModif, stkProductos.ImagenExtension,
	stkProductos.Imagen, stkProductos.CodigoFiscal, stkProductos.FraccionArancelaria, Cast(0 As Bit) TieneMovimientos,
	stkProductos.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, stkProductos.Posteado,
	CtaConsumo.Cuenta_Id as CtaConsumo, CtaConsumo.Descripcion as DescripcionCtaConsumo, ' ' as Plantilla_Id, 
	' ' DescripcionPlantilla,Observaciones,UrlProd, stkProductos.ClaveSTCC, stkProductos.MaterialPeligroso , 
		stkProductos.CveMaterialPeligroso, stkProductos.Embalaje, stkProductos.PesoEnKg
FROM stkProductos 
INNER JOIN stkUniMed  ON (stkUniMed.stkUniMed = stkProductos.Medida_Id)
LEFT JOIN stkTipos  ON (stkTipos.stkTipos = stkProductos.Tipo_Id)
LEFT JOIN stkUniMed UmVenta ON (UmVenta.stkUniMed = stkProductos.UmVenta)
LEFT JOIN genMonedas  ON (genMonedas.genMonedas = stkProductos.MonedaUltCompra)
LEFT JOIN stkUniMed UMCompra ON (UMCompra.stkUniMed = stkProductos.UMCompra)
LEFT JOIN conCuentas  as CtaCompra ON (CtaCompra.conCuentas = stkProductos.CtaCompra)
LEFT JOIN conCuentas CtaAjuInventario ON (CtaAjuInventario.conCuentas = stkProductos.CtaAjuInventario)
LEFT JOIN conCuentas CtaVenta ON (CtaVenta.conCuentas = stkProductos.CtaVenta)
LEFT JOIN conCuentas CtaCredito ON (CtaCredito.conCuentas = stkProductos.CtaCredito)
LEFT JOIN conCuentas CtaDescuento ON (CtaDescuento.conCuentas = stkProductos.CtaDescuento)
LEFT JOIN conCuentas CtaCosto ON (CtaCosto.conCuentas = stkProductos.CtaCosto)
LEFT JOIN conCuentas CtaVentaExt ON (CtaVentaExt.conCuentas = stkProductos.CtaVentaExt)
LEFT JOIN conCuentas CtaCreditoExt ON (CtaCreditoExt.conCuentas = stkProductos.CtaCreditoExt)
LEFT JOIN conCuentas CtaDescuentoExt ON (CtaDescuentoExt.conCuentas = stkProductos.CtaDescuentoExt)
LEFT JOIN conCuentas CtaCostoExt ON (CtaCostoExt.conCuentas = stkProductos.CtaCostoExt)
LEFT JOIN stkCondFisVenta  ON (stkCondFisVenta.stkCondFisVenta = stkProductos.CFVenta_Id)
LEFT JOIN stkCondFisCompra  ON (stkCondFisCompra.stkCondFisCompra = stkProductos.CFComp_Id)
Left Join stkUniMed stkMedidaAlterna On stkMedidaAlterna.stkUniMed = stkProductos.MedidaAlterna
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = stkProductos.Usuario_Id)
Left Join stkFamilias On stkFamilias.stkFamilias = stkProductos.Familia_Id
Left Join stkGrupos On stkGrupos.stkGrupos = stkProductos.Grupo_Id
left join conCuentas CtaConsumo on CtaConsumo.conCuentas=stkProductos.CtaConsumo
WHERE (stkProductos.Producto_id = @pProducto_id)
 

SELECT stkUniMed.Medida_Id, stkArtiUM.Factor, stkArtiUM.CodigoBarra
FROM stkArtiUM 
INNER JOIN stkProductos ON stkArtiUM.Producto_id = stkProductos.stkProductos 
INNER JOIN stkUniMed ON stkArtiUM.Medida_id = stkUniMed.stkUniMed
WHERE (stkProductos.Producto_id = @pProducto_id)		

Declare @pidentity bigint= dbo.FuncFKstkProductos(@pProducto_id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'stkProductos'
--Exec genAtributosGeneralesIdentityEspDatos @pidentity, 'stkProductos'
-- PARA V2 Se agrega esto
exec proProductosRecetaDatos @pProducto_Id
exec stkProductosComboDatos @pProducto_Id

exec genAdjuntosIdentityDatos 'stkProductos', 0
RETURN @@Error 

GO

DROP PROCEDURE stkProductosEliminar
GO
CREATE PROCEDURE stkProductosEliminar
(
@pProducto_Id varchar(25) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkProductos 
WHERE (Producto_Id = @pProducto_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKstkProductos
GO

CREATE FUNCTION FuncFKstkProductos
(
@pProducto_id varchar (25)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  
  SELECT @pIdentity = stkProductos 
  FROM stkProductos 
  WHERE Producto_id = @pProducto_id
  
  RETURN @pIdentity
END


GO

DROP PROCEDURE stkProductosTieneMovimientos 
GO
CREATE PROCEDURE stkProductosTieneMovimientos 
(
	@pProducto_id VarChar(25)
)
AS

SELECT count(1) as Cantidad
From stkMoviCuerpo 
INNER JOIN stkProductos ON stkMoviCuerpo.Producto_id = stkProductos.stkProductos
where stkProductos.Producto_id = @pProducto_id
	
GO
	
DROP PROCEDURE stkProductosCodFiscalGuardar
GO
CREATE PROCEDURE stkProductosCodFiscalGuardar
(
@pProducto_Id varchar(25),
@pCodigoFiscal VarChar(20)
)
AS
Update stkProductos set CodigoFiscal = @pCodigoFiscal Where Producto_Id = @pProducto_Id
GO
	




Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkProductosActucostos.sql*/
-- Este metodo se usa para acutalizar el costo de forma provisoria hasta el cierre unicamente
DROP PROCEDURE stkProductosActucostos
GO
CREATE PROCEDURE stkProductosActucostos (
	@Producto_id VarChar(25), 
	@Cantidad  Numeric(19,8), 
	@Costo Numeric(19,8), 
	@CostoOriginal Numeric(19,8), 
	@Moneda_Id VarChar(3)
)	
AS

Declare @Costoactual Numeric(19,8) 
Declare @CantidadActual Numeric(19,8) 
 
SELECT @CostoActual = IsNull(SUM(stkExistencia.Cantidad*stkProductos.CostoPromPond), 0),
	@CantidadActual = IsNull(SUM(stkExistencia.Cantidad), 0)
From stkProductos
left join (stkExistencia INNER JOIN stkDepositos ON 
	stkDepositos.stkDepositos = stkExistencia.Deposito_Id and 
		stkDepositos.consCompra_Venta <> 1 ) ON 
		stkProductos.stkProductos = stkExistencia.Producto_Id
Where
	stkProductos.Producto_id = @Producto_id 
	

UPDATE stkProductos set CostoPromPond = (@CostoActual +@Cantidad*@CostoOriginal) /(@CantidadActual+@Cantidad), 
		CostoUltCompra = @Costo, PrecioUltCompra = @CostoOriginal, 
		MonedaUltCompra = dbo.FuncFkgenMonedas(@Moneda_Id)
		Where
		stkProductos.Producto_Id = @Producto_id 

SELECT @CostoActual/(@CantidadActual+@Cantidad) AS PPP
GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkProductosActuProdCostos.sql*/
DROP PROCEDURE stkProductosCostosGuardar
GO
CREATE PROCEDURE stkProductosCostosGuardar
(
@pProducto_Id VarChar(25),
@pEmpresa_Id int,
@pCostoPromPond numeric(19,8),
@pCostoUltCompra numeric(19,8),
@pCostoStandard numeric(19,8),
@pUsuario_Id int,
@pMonedaUltCompra varchar(3),
@pPrecioUltCompra numeric(19,8),
@pFecha_Ult_Compra datetime
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkProductosCostos WHERE (Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id)) 
		AND (Empresa_Id = @pEmpresa_Id)))
BEGIN 
	UPDATE stkProductosCostos
	SET	Empresa_Id = @pEmpresa_Id,
		CostoPromPond = @pCostoPromPond,
		CostoUltCompra = @pCostoUltCompra,
		CostoStandard = @pCostoStandard,
		Usuario_Id = @pUsuario_Id,
		FechaUltModif = GETDATE(),
		MonedaUltCompra = dbo.FuncFKgenMonedas(@pMonedaUltCompra),
		PrecioUltCompra = @pPrecioUltCompra,
		Fecha_Ult_Compra = @pFecha_Ult_Compra
	WHERE (Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id)) AND (Empresa_Id = @pEmpresa_Id)
END 
ELSE 
BEGIN 
	INSERT INTO stkProductosCostos
	(
		Producto_Id,
		Empresa_Id,
		CostoPromPond,
		CostoUltCompra,
		CostoStandard,
		Usuario_Id,
		FechaUltModif,
		MonedaUltCompra,
		PrecioUltCompra,
		Fecha_Ult_Compra
	)
	VALUES 
	(
		dbo.FuncFKstkProductos(@pProducto_Id),
		@pEmpresa_Id,
		@pCostoPromPond,
		@pCostoUltCompra,
		@pCostoStandard,
		@pUsuario_Id,
		GETDATE(),
		dbo.FuncFKgenMonedas(@pMonedaUltCompra),
		@pPrecioUltCompra,
		@pFecha_Ult_Compra
	)
END 

GO

DROP PROCEDURE stkProductosCostosDatos
GO
CREATE PROCEDURE stkProductosCostosDatos
(
@pProducto_Id VarChar(25),
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 

SELECT stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos, stkProductosCostos.Empresa_Id, stkProductosCostos.CostoPromPond,
	stkProductosCostos.CostoUltCompra, stkProductosCostos.CostoStandard, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
	stkProductosCostos.FechaUltModif, genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas, stkProductosCostos.PrecioUltCompra,
	stkProductosCostos.Fecha_Ult_Compra
FROM stkProductosCostos 
INNER JOIN stkProductos  ON (stkProductos.stkProductos = stkProductosCostos.Producto_Id)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = stkProductosCostos.Usuario_Id)
INNER JOIN genMonedas  ON (genMonedas.genMonedas = stkProductosCostos.MonedaUltCompra)
WHERE (stkProductos.Producto_Id = @pProducto_Id)
AND (stkProductosCostos.Empresa_Id = @pEmpresa_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE stkProductosCostosEliminar
GO
CREATE PROCEDURE stkProductosCostosEliminar
(
@pProducto_Id varchar(25),
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 

DELETE FROM stkProductosCostos 
WHERE (Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id))
AND (Empresa_Id = @pEmpresa_Id)
 
RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkProductosCombo.sql*/
DROP PROCEDURE stkProductosComboInsertar
GO
CREATE PROCEDURE stkProductosComboInsertar
(
@pCombo_Id varchar(25),
@pProducto_Id varchar(25),
@pCantidad qCantidadD8
)
AS
BEGIN 
	INSERT INTO stkProductosCombo
	(
		Combo_Id,
		Producto_Id,
		Cantidad
	)
	VALUES 
	(
		dbo.FuncFKstkProductos(@pCombo_Id),
		dbo.FuncFKstkProductos(@pProducto_Id),
		@pCantidad
	)
END 

GO

DROP PROCEDURE stkProductosComboDatos
GO
CREATE PROCEDURE stkProductosComboDatos
(
@pCombo_Id varchar(25),
@pProducto_Id varchar(25) = NULL
)
AS
SET NOCOUNT ON 

SELECT stkProductos.Producto_Id as Combo_Id, stkProductos2.Producto_Id, stkProductos2.Descripcion as DescripcionProducto,
	stkProductosCombo.Cantidad
FROM stkProductosCombo 
INNER JOIN stkProductos  ON (stkProductos.stkProductos = stkProductosCombo.Combo_Id)
INNER JOIN stkProductos stkProductos2 ON (stkProductos2.stkProductos = stkProductosCombo.Producto_Id)
WHERE (stkProductos.Producto_Id = @pCombo_Id)
AND (stkProductos2.Producto_Id = ISNULL(@pProducto_Id,stkProductos2.Producto_Id))
 
 RETURN @@Error 

GO

DROP PROCEDURE stkProductosComboEliminar
GO
CREATE PROCEDURE stkProductosComboEliminar
(
@pCombo_Id varchar(25),
@pProducto_Id varchar(25) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkProductosCombo 
WHERE (Combo_Id = dbo.FuncFKstkProductos(@pCombo_Id))
AND (@pProducto_Id is null or Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id))
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkProductosCostoCierreSucursal.sql*/
DROP PROCEDURE stkProductosCostoCierreSucursalGuardar
GO
CREATE PROCEDURE stkProductosCostoCierreSucursalGuardar
(
@pEmpresa_Id int,
@pFecha qFecha,
@pSucursal VarChar(4),
@pProducto_Id VarChar(25),
@pCosto qMonedaD8
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkProductosCostoCierreSucursal WHERE 
	(Empresa_Id = @pEmpresa_Id) AND (Fecha = @pFecha) AND 
	(Sucursal = dbo.FuncFKgenSucursalesEmpr(@pSucursal)) AND 
	(Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id))))
BEGIN 
	UPDATE stkProductosCostoCierreSucursal
	SET		Empresa_Id = @pEmpresa_Id,
		Costo = @pCosto
	WHERE (Empresa_Id = @pEmpresa_Id) AND (Fecha = @pFecha) AND 
		(Sucursal = dbo.FuncFKgenSucursalesEmpr(@pSucursal)) AND 
		(Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id))
END 
ELSE 
BEGIN 
	INSERT INTO stkProductosCostoCierreSucursal
	(
		Empresa_Id,
		Fecha,
		Sucursal,
		Producto_Id,
		Costo
	)
	VALUES 
	(
		@pEmpresa_Id,
		@pFecha,
		dbo.FuncFKgenSucursalesEmpr(@pSucursal),
		dbo.FuncFKstkProductos(@pProducto_Id),
		@pCosto
	)
END 

GO

DROP PROCEDURE stkProductosCostoCierreSucursalDatos
GO
CREATE PROCEDURE stkProductosCostoCierreSucursalDatos
(
@pEmpresa_Id int,
@pFecha qFecha,
@pSucursal VarChar(4),
@pProducto_Id VarChar(25)
)
AS
SET NOCOUNT ON 

SELECT stkProductosCostoCierreSucursal.Empresa_Id, 
	stkProductosCostoCierreSucursal.Fecha, genSucursalesEmpr.Sucursal, genSucursalesEmpr.Descripcion as DescripcionSucursalesEmpr,
	stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos, 
	stkProductosCostoCierreSucursal.Costo
FROM stkProductosCostoCierreSucursal 
INNER JOIN genSucursalesEmpr  ON (genSucursalesEmpr.genSucursalesEmpr = stkProductosCostoCierreSucursal.Sucursal)
INNER JOIN stkProductos  ON (stkProductos.stkProductos = stkProductosCostoCierreSucursal.Producto_Id)
WHERE (stkProductosCostoCierreSucursal.Empresa_Id = @pEmpresa_Id)
AND (stkProductosCostoCierreSucursal.Fecha = @pFecha)
AND (genSucursalesEmpr.Sucursal = @pSucursal)
AND (stkproductos.Producto_Id = @pProducto_Id)
 
RETURN @@Error 

GO

DROP PROCEDURE stkProductosCostoCierreSucursalEliminar
GO
CREATE PROCEDURE stkProductosCostoCierreSucursalEliminar
(
@pEmpresa_Id int,
@pFecha qFecha,
@pSucursal VarChar(4),
@pProducto_Id VarChar(25)
)
AS
SET NOCOUNT ON 

DELETE FROM stkProductosCostoCierreSucursal 
WHERE (Empresa_Id = @pEmpresa_Id)
AND (Fecha = ISNULL(@pFecha, Fecha))
AND (Sucursal = dbo.FuncFKgenSucursalesEmpr(@pSucursal))
AND (Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkProductosCostosSucursal.sql*/
DROP PROCEDURE stkProductosCostosSucursalGuardar
GO
CREATE PROCEDURE stkProductosCostosSucursalGuardar
(
@pSucursal VarChar(4),
@pProducto_Id VarChar(25),
@pEmpresa_Id int,
@pMonedaUltCompra VarChar(5)=null,
@pCostoPromPond qMonedaD8,
@pCostoUltCompra qMonedaD8,
@pCostoStandard qMonedaD8,
@pPrecioUltCompra qMonedaD8,
@pFecha_Ult_Compra qFechaHora,
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkProductosCostosSucursal WHERE 
	(Sucursal = dbo.FuncFKgenSucursalesEmpr(@pSucursal)) AND 
	(Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id)) AND 
	(Empresa_Id = @pEmpresa_Id)))
BEGIN 
	UPDATE stkProductosCostosSucursal
	SET		Empresa_Id = @pEmpresa_Id,
		MonedaUltCompra = dbo.FuncFKgenMonedas(@pMonedaUltCompra),
		CostoPromPond = @pCostoPromPond,
		CostoUltCompra = @pCostoUltCompra,
		CostoStandard = @pCostoStandard,
		FechaUltModif = dbo.FechaActual(),
		PrecioUltCompra = @pPrecioUltCompra,
		Fecha_Ult_Compra = @pFecha_Ult_Compra,
		Usuario_Id = @pUsuario_Id
	WHERE (Sucursal = dbo.FuncFKgenSucursalesEmpr(@pSucursal)) AND 
		(Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id)) AND 
		(Empresa_Id = @pEmpresa_Id)
END 
ELSE 
BEGIN 
	INSERT INTO stkProductosCostosSucursal
	(
		Sucursal,
		Producto_Id,
		Empresa_Id,
		MonedaUltCompra,
		CostoPromPond,
		CostoUltCompra,
		CostoStandard,
		FechaUltModif,
		PrecioUltCompra,
		Fecha_Ult_Compra,
		Usuario_Id
	)
	VALUES 
	(
		dbo.FuncFKgenSucursalesEmpr(@pSucursal),
		dbo.FuncFKstkProductos(@pProducto_Id),
		@pEmpresa_Id,
		dbo.FuncFKgenMonedas(@pMonedaUltCompra),
		@pCostoPromPond,
		@pCostoUltCompra,
		@pCostoStandard,
		dbo.FechaActual(),
		@pPrecioUltCompra,
		@pFecha_Ult_Compra,
		@pUsuario_Id
	)
END 

GO

DROP PROCEDURE stkProductosCostosSucursalDatos
GO
CREATE PROCEDURE stkProductosCostosSucursalDatos
(
@pSucursal VarChar(4),
@pProducto_Id VarChar(25),
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 

SELECT genSucursalesEmpr.Sucursal, genSucursalesEmpr.Descripcion as DescripcionSucursalesEmpr, stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos,
	stkProductosCostosSucursal.Empresa_Id, genMonedas.Moneda_Id, stkProductosCostosSucursal.CostoPromPond, stkProductosCostosSucursal.CostoUltCompra,
	stkProductosCostosSucursal.CostoStandard, stkProductosCostosSucursal.FechaUltModif, stkProductosCostosSucursal.PrecioUltCompra, stkProductosCostosSucursal.Fecha_Ult_Compra,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario
FROM stkProductosCostosSucursal 
INNER JOIN genSucursalesEmpr  ON (genSucursalesEmpr.genSucursalesEmpr = stkProductosCostosSucursal.Sucursal)
INNER JOIN stkProductos  ON (stkProductos.stkProductos = stkProductosCostosSucursal.Producto_Id)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = stkProductosCostosSucursal.Usuario_Id)
LEFT JOIN genMonedas ON genMonedas.genMonedas = stkProductosCostosSucursal.MonedaUltCompra
WHERE (genSucursalesEmpr.Sucursal = @pSucursal)
AND (stkProductos.Producto_Id = @pProducto_Id)
AND (stkProductosCostosSucursal.Empresa_Id = @pEmpresa_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE stkProductosCostosSucursalEliminar
GO
CREATE PROCEDURE stkProductosCostosSucursalEliminar
(
@pSucursal Sucursal,
@pProducto_Id varchar(25),
@pEmpresa_Id Int
)
AS
SET NOCOUNT ON 

DELETE FROM stkProductosCostosSucursal 
WHERE (Sucursal = dbo.FuncFKgenSucursalesEmpr(@pSucursal))
AND (Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id))
AND (Empresa_Id = @pEmpresa_Id)
 
 RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkProductosExistenciaaFecha.sql*/
-- stkProductosExistenciaaFecha 1, '0106829','20210111','20210111', '0502',744216,1
-- stkProductosExistenciaaFecha 1, '0106829','20210111','20210111', '0502',744221,1




drop PROCEDURE stkProductosExistenciaaFecha
go
CREATE PROCEDURE stkProductosExistenciaaFecha(
@Empresa_Id int, 
@Producto_id VarChar(25),
@Fecha DateTime, 
@FechaRegistro DateTime, 
@pSucursal VarChar(4)=NULL,
@pStkMoviCabe Bigint,
@pRenglon Int 
)

AS
-- si es costo por sucursal solo filtro los de la sucursal acutal
DECLARE @pSucursalI int = dbo.funcFkgenSucursalesEmpr(@pSucursal)
PRINT @pSucursalI
SELECT  ISNULL( Sum(stkMoviCuerpo.Cantidad *stkMoviCabe.Signo),0) Cantidad, 
	ISNULL(	Sum(stkMoviCuerpo.Cantidad *stkMoviCabe.Signo* stkMoviCuerpo.CostoUnitario),0) +
		ISNULL((SELECT SUM(stkMoviCuerpoReva.ImporteAjuste) from
			stkMoviCabe INNER JOIN stkMoviCuerpoReva ON
			stkMoviCabe.stkMoviCabe = stkMoviCuerpoReva.stkMoviCabe
			INNER JOIN conAsientos ON
			conAsientos.conAsientos = stkMoviCabe.stkMoviCabe
			Where
				conAsientos.Anulado = 0 AND 	
				conAsientos.Posteado = 1 AND 
				stkMoviCuerpoReva.Producto_Id = stkProductos.stkProductos and 
				(conAsientos.Fecha < @Fecha or  
				(conAsientos.Fecha = @Fecha and  
				conAsientos.FechaRegistro < @FechaRegistro) OR
				(conAsientos.Fecha = @Fecha and  
				conAsientos.FechaRegistro = @FechaRegistro AND 
				conAsientos.conAsientos < @pStkMoviCabe)) and 
				conAsientos.Empresa_Id = @Empresa_Id and 
				conAsientos.Sucursal = ISNULL(@pSucursalI,conAsientos.Sucursal)),0) as 	Costo
from stkMoviCuerpo INNER JOIN stkMoviCabe ON
stkMoviCuerpo.stkMoviCabe = stkMoviCabe.stkMoviCabe
INNER JOIN conAsientos ON
conAsientos.conAsientos = stkMoviCabe.stkMoviCabe 
INNER JOIN stkDepositos ON
stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id
INNER JOIN stkProductos on 
stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
Where
	(conAsientos.Fecha < @Fecha or  
	(conAsientos.Fecha = @Fecha and  conAsientos.FechaRegistro < @FechaRegistro) or
	(conAsientos.Fecha = @Fecha and  conAsientos.FechaRegistro = @FechaRegistro and 
	 stkMoviCuerpo.Renglon < @pRenglon) OR
	 (conAsientos.Fecha = @Fecha and  conAsientos.FechaRegistro = @FechaRegistro and 
	 stkMoviCuerpo.stkMoviCabe < @pStkMoviCabe)) and 
	stkDepositos.Consignacion = 0 and 
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	stkProductos.Producto_Id = @Producto_id  and 
	conAsientos.Sucursal = ISNULL(@pSucursalI,conAsientos.Sucursal)
group by stkProductos.stkProductos


GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkProductosGuardarCosto.sql*/
DROP PROCEDURE stkProductosGuardarCosto
GO
CREATE PROCEDURE stkProductosGuardarCosto(
	@Producto_Id VarChar(25),
	@CostoPromPond Numeric(18,4),
	@CostoUltCompra Numeric(18,4),
	@PrecioUltCompra Numeric(18,4),
	@MonedaUltCompra VarChar(5)
)
as

Update stkProductos set CostoPromPond = @CostoPromPond, CostoUltCompra = @CostoUltCompra, 
	PrecioUltCompra = @PrecioUltCompra, MonedaUltCompra = dbo.FuncFKgenMonedas(@MonedaUltCompra)
	WHERE 
		Producto_Id = @Producto_Id
GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkProductosPlantilla.sql*/
DROP PROCEDURE stkProductosPlantillaGuardar
GO
CREATE PROCEDURE stkProductosPlantillaGuardar
(
@pPlantilla_Id varchar(25),
@pPlantilla_Id_Nuevo varchar(25),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(80),
@pMedida_Id varchar(5) = NULL,
@pMedidaAlterna varchar(5) = NULL,
@pFactorAlterna qCantidadD8,
@pClase char(1),
@pClaseAlterna char(1),
@pTipo_Id varchar(5) = NULL,
@pFamilia_Id varchar(15) = NULL,
@pGrupo_Id varchar(15) = NULL,
@pTrabajaPorLotes Sino,
@pconVencimiento Sino,
@pSerializable Sino,
@pUsaDespachoImportacion Sino,
@pUMVenta_Id varchar(5) = NULL,
@pMonedaUltCompra varchar(3) = NULL,
@pUMCompra_Id varchar(5) = NULL,
@pCtaCompra varchar(25) = NULL,
@pCtaAjuInventario varchar(25) = NULL,
@pCtaVenta varchar(25) = NULL,
@pCtaCredito varchar(25) = NULL,
@pCtaDescuento varchar(25) = NULL,
@pCtaCosto varchar(25) = NULL,
@pCtaVentasExt varchar(25) = NULL,
@pCtaCreditoExt varchar(25) = NULL,
@pCtaDescuentoExt varchar(25) = NULL,
@pCtaCostoExt varchar(25) = NULL,
@pMargenExceso qPorcentaje,
@pTiempoEntrega smallint,
@pAcepta_Ventas Sino,
@pCFVenta_Id varchar(5) = NULL,
@pAcepta_Compras Sino,
@pCFCompra_Id varchar(5) = NULL,
@pAcepta_Comis_Vta Sino,
@pDiasGarantia smallint,
@pCodigoFiscal varchar(20) = NULL,
@pFraccionArancelaria varchar(20) = NULL,
@pInactivo Sino,
@pPosteado Sino,
@pUsuario_Id int = NULL,
@pCtaConsumo varchar(25) = NULL
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM stkProductosPlantilla WHERE (Plantilla_Id = @pPlantilla_Id)))
BEGIN 
	UPDATE stkProductosPlantilla
	SET		@lIdentidad = stkProductosPlantilla,
		Plantilla_Id = @pPlantilla_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Medida_Id = dbo.FuncFKstkUniMed(@pMedida_Id),
		MedidaAlterna = dbo.FuncFKstkUniMed(@pMedidaAlterna),
		FactorAlterna = @pFactorAlterna,
		Clase = @pClase,
		ClaseAlterna = @pClaseAlterna,
		Tipo_Id = dbo.FuncFKstkTipos(@pTipo_Id),
		Familia_Id = dbo.FuncFKstkFamilias(@pFamilia_Id),
		Grupo_Id = dbo.FuncFKstkGrupos(@pGrupo_Id),
		TrabajaPorLotes = @pTrabajaPorLotes,
		conVencimiento = @pconVencimiento,
		Serializable = @pSerializable,
		UsaDespachoImportacion = @pUsaDespachoImportacion,
		UMVenta_Id = dbo.FuncFKstkUniMed(@pUMVenta_Id),
		MonedaUltCompra = dbo.FuncFKgenMonedas(@pMonedaUltCompra),
		UMCompra_Id = dbo.FuncFKstkUniMed(@pUMCompra_Id),
		CtaCompra = dbo.FuncFKconCuentas(@pCtaCompra),
		CtaAjuInventario = dbo.FuncFKconCuentas(@pCtaAjuInventario),
		CtaVenta = dbo.FuncFKconCuentas(@pCtaVenta),
		CtaCredito = dbo.FuncFKconCuentas(@pCtaCredito),
		CtaDescuento = dbo.FuncFKconCuentas(@pCtaDescuento),
		CtaCosto = dbo.FuncFKconCuentas(@pCtaCosto),
		CtaVentasExt = dbo.FuncFKconCuentas(@pCtaVentasExt),
		CtaCreditoExt = dbo.FuncFKconCuentas(@pCtaCreditoExt),
		CtaDescuentoExt = dbo.FuncFKconCuentas(@pCtaDescuentoExt),
		CtaCostoExt = dbo.FuncFKconCuentas(@pCtaCostoExt),
		MargenExceso = @pMargenExceso,
		TiempoEntrega = @pTiempoEntrega,
		Acepta_Ventas = @pAcepta_Ventas,
		CFVenta_Id = dbo.FuncFKstkCondFisVenta(@pCFVenta_Id),
		Acepta_Compras = @pAcepta_Compras,
		CFCompra_Id = dbo.FuncFKstkCondFisCompra(@pCFCompra_Id),
		Acepta_Comis_Vta = @pAcepta_Comis_Vta,
		DiasGarantia = @pDiasGarantia,
		CodigoFiscal = @pCodigoFiscal,
		FraccionArancelaria = @pFraccionArancelaria,
		Inactivo = @pInactivo,
		Posteado = @pPosteado,
		Usuario_Id = @pUsuario_Id,
		CtaConsumo = dbo.FuncFKconCuentas(@pCtaConsumo)
	WHERE (Plantilla_Id = @pPlantilla_Id)
END 
ELSE 
BEGIN 
	INSERT INTO stkProductosPlantilla
	(
		Plantilla_Id,
		Empresa_Id,
		Descripcion,
		Medida_Id,
		MedidaAlterna,
		FactorAlterna,
		Clase,
		ClaseAlterna,
		Tipo_Id,
		Familia_Id,
		Grupo_Id,
		TrabajaPorLotes,
		conVencimiento,
		Serializable,
		UsaDespachoImportacion,
		UMVenta_Id,
		MonedaUltCompra,
		UMCompra_Id,
		CtaCompra,
		CtaAjuInventario,
		CtaVenta,
		CtaCredito,
		CtaDescuento,
		CtaCosto,
		CtaVentasExt,
		CtaCreditoExt,
		CtaDescuentoExt,
		CtaCostoExt,
		MargenExceso,
		TiempoEntrega,
		Acepta_Ventas,
		CFVenta_Id,
		Acepta_Compras,
		CFCompra_Id,
		Acepta_Comis_Vta,
		DiasGarantia,
		CodigoFiscal,
		FraccionArancelaria,
		Inactivo,
		Posteado,
		Usuario_Id,
		CtaConsumo
	)
	VALUES 
	(
		@pPlantilla_Id,
		@pEmpresa_Id,
		@pDescripcion,
		dbo.FuncFKstkUniMed(@pMedida_Id),
		dbo.FuncFKstkUniMed(@pMedidaAlterna),
		@pFactorAlterna,
		@pClase,
		@pClaseAlterna,
		dbo.FuncFKstkTipos(@pTipo_Id),
		dbo.FuncFKstkFamilias(@pFamilia_Id),
		dbo.FuncFKstkGrupos(@pGrupo_Id),
		@pTrabajaPorLotes,
		@pconVencimiento,
		@pSerializable,
		@pUsaDespachoImportacion,
		dbo.FuncFKstkUniMed(@pUMVenta_Id),
		dbo.FuncFKgenMonedas(@pMonedaUltCompra),
		dbo.FuncFKstkUniMed(@pUMCompra_Id),
		dbo.FuncFKconCuentas(@pCtaCompra),
		dbo.FuncFKconCuentas(@pCtaAjuInventario),
		dbo.FuncFKconCuentas(@pCtaVenta),
		dbo.FuncFKconCuentas(@pCtaCredito),
		dbo.FuncFKconCuentas(@pCtaDescuento),
		dbo.FuncFKconCuentas(@pCtaCosto),
		dbo.FuncFKconCuentas(@pCtaVentasExt),
		dbo.FuncFKconCuentas(@pCtaCreditoExt),
		dbo.FuncFKconCuentas(@pCtaDescuentoExt),
		dbo.FuncFKconCuentas(@pCtaCostoExt),
		@pMargenExceso,
		@pTiempoEntrega,
		@pAcepta_Ventas,
		dbo.FuncFKstkCondFisVenta(@pCFVenta_Id),
		@pAcepta_Compras,
		dbo.FuncFKstkCondFisCompra(@pCFCompra_Id),
		@pAcepta_Comis_Vta,
		@pDiasGarantia,
		@pCodigoFiscal,
		@pFraccionArancelaria,
		@pInactivo,
		@pPosteado,
		@pUsuario_Id,
		dbo.FuncFKconCuentas(@pCtaConsumo)
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE stkProductosPlantillaDatos
GO
CREATE PROCEDURE stkProductosPlantillaDatos
(
@pPlantilla_Id varchar(25)
)
AS
SET NOCOUNT ON 

SELECT stkProductosPlantilla.stkProductosPlantilla, stkProductosPlantilla.Plantilla_Id, stkProductosPlantilla.Plantilla_Id Plantilla_Id_Nueva, stkProductosPlantilla.Empresa_Id,
	Cast( Case When stkProductosPlantilla.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, stkProductosPlantilla.Descripcion, stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed,
	MedidaAlterna.Medida_Id as MedidaAlterna, MedidaAlterna.Descripcion as DescripcionMedidaAlterna, stkProductosPlantilla.FactorAlterna, stkProductosPlantilla.Clase,
	stkProductosPlantilla.ClaseAlterna, stkTipos.Tipo_Id, stkTipos.Descripcion as DescripcionTipos, stkFamilias.Familia_Id,
	stkFamilias.Descripcion as DescripcionFamilias, stkGrupos.Grupo_Id, stkGrupos.Descripcion as DescripcionGrupos, stkProductosPlantilla.TrabajaPorLotes,
	stkProductosPlantilla.conVencimiento, stkProductosPlantilla.Serializable, stkProductosPlantilla.UsaDespachoImportacion, UMVenta.Medida_Id as UMVenta_Id,
	UMVenta.Descripcion as DescripcionUMVenta, genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas, UMCompra.Medida_Id as UMCompra_Id,
	UMCompra.Descripcion as DescripcionUMCompra, CtaCompra.Cuenta_Id as CtaCompra, CtaCompra.Descripcion as DescripcionCtaCompra, CtaAjuInventario.Cuenta_Id as CtaAjuInventario,
	CtaAjuInventario.Descripcion as DescripcionCtaAjuInventario, CtaCostoExt.Cuenta_Id as CtaCostoExt, CtaCostoExt.Descripcion as DescripcionCtaCostoExt,
    CtaVenta.Cuenta_Id as CtaVenta,	CtaVenta.Descripcion as DescripcionCtaVenta, CtaCredito.Cuenta_Id as CtaCredito, CtaCredito.Descripcion as DescripcionCtaCredito, CtaDescuento.Cuenta_Id as CtaDescuento,
	CtaDescuento.Descripcion as DescripcionCtaDescuento, CtaCosto.Cuenta_Id as CtaCosto, CtaCosto.Descripcion as DescripcionCtaCosto, CtaVentasExt.Cuenta_Id as CtaVentasExt,
	CtaVentasExt.Descripcion as DescripcionCtaVentasExt, CtaCreditoExt.Cuenta_Id as CtaCreditoExt, CtaCreditoExt.Descripcion as DescripcionCtaCreditoExt, CtaDescuentoExt.Cuenta_Id as CtaDescuentoExt,
	CtaDescuentoExt.Descripcion as DescripcionCtaDescuentoExt, stkProductosPlantilla.MargenExceso, stkProductosPlantilla.TiempoEntrega, stkProductosPlantilla.Acepta_Ventas,
	stkCondFisVenta.CFVenta_Id, stkCondFisVenta.Descripcion as DescripcionCondFisVenta, stkProductosPlantilla.Acepta_Compras, stkCondFisCompra.CFComp_Id,
	stkCondFisCompra.Descripcion as DescripcionCondFisCompra, stkProductosPlantilla.Acepta_Comis_Vta, stkProductosPlantilla.DiasGarantia, stkProductosPlantilla.CodigoFiscal,
	stkProductosPlantilla.FraccionArancelaria, stkProductosPlantilla.Inactivo, stkProductosPlantilla.Posteado, genUsuarios.Usuario_Id,
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario, CtaConsumo.Cuenta_Id as CtaConsumo, CtaConsumo.Descripcion as DescripcionCtaConsumo
FROM stkProductosPlantilla 
LEFT JOIN stkUniMed  ON (stkUniMed.stkUniMed = stkProductosPlantilla.Medida_Id)
LEFT JOIN stkUniMed MedidaAlterna ON (MedidaAlterna.stkUniMed = stkProductosPlantilla.MedidaAlterna)
LEFT JOIN stkTipos  ON (stkTipos.stkTipos = stkProductosPlantilla.Tipo_Id)
LEFT JOIN stkFamilias  ON (stkFamilias.stkFamilias = stkProductosPlantilla.Familia_Id)
LEFT JOIN stkGrupos  ON (stkGrupos.stkGrupos = stkProductosPlantilla.Grupo_Id)
LEFT JOIN stkUniMed UMVenta ON (UMVenta.stkUniMed = stkProductosPlantilla.UMVenta_Id)
LEFT JOIN genMonedas  ON (genMonedas.genMonedas = stkProductosPlantilla.MonedaUltCompra)
LEFT JOIN stkUniMed UMCompra ON (UMCompra.stkUniMed = stkProductosPlantilla.UMCompra_Id)
LEFT JOIN conCuentas CtaCompra ON (CtaCompra.conCuentas = stkProductosPlantilla.CtaCompra)
LEFT JOIN conCuentas CtaAjuInventario ON (CtaAjuInventario.conCuentas = stkProductosPlantilla.CtaAjuInventario)
LEFT JOIN conCuentas CtaVenta ON (CtaVenta.conCuentas = stkProductosPlantilla.CtaVenta)
LEFT JOIN conCuentas CtaCredito ON (CtaCredito.conCuentas = stkProductosPlantilla.CtaCredito)
LEFT JOIN conCuentas CtaDescuento ON (CtaDescuento.conCuentas = stkProductosPlantilla.CtaDescuento)
LEFT JOIN conCuentas CtaCosto ON (CtaCosto.conCuentas = stkProductosPlantilla.CtaCosto)
LEFT JOIN conCuentas CtaVentasExt ON (CtaVentasExt.conCuentas = stkProductosPlantilla.CtaVentasExt)
LEFT JOIN conCuentas CtaCreditoExt ON (CtaCreditoExt.conCuentas = stkProductosPlantilla.CtaCreditoExt)
LEFT JOIN conCuentas CtaDescuentoExt ON (CtaDescuentoExt.conCuentas = stkProductosPlantilla.CtaDescuentoExt)
LEFT JOIN conCuentas CtaCostoExt ON (CtaCostoExt.conCuentas = stkProductosPlantilla.CtaCostoExt)
LEFT JOIN stkCondFisVenta  ON (stkCondFisVenta.stkCondFisVenta = stkProductosPlantilla.CFVenta_Id)
LEFT JOIN stkCondFisCompra  ON (stkCondFisCompra.stkCondFisCompra = stkProductosPlantilla.CFCompra_Id)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = stkProductosPlantilla.Usuario_Id)
LEFT JOIN conCuentas CtaConsumo ON (CtaConsumo.conCuentas = stkProductosPlantilla.CtaConsumo)
WHERE (Plantilla_Id = @pPlantilla_Id)
 


  Declare @pidentity bigint= dbo.FuncFKstkProductosPlantilla(@pPlantilla_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'stkProductosPlantilla'
 RETURN @@Error 

GO

DROP PROCEDURE stkProductosPlantillaEliminar
GO
CREATE PROCEDURE stkProductosPlantillaEliminar
(
@pPlantilla_Id varchar(25) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkProductosPlantilla 
WHERE (Plantilla_Id = @pPlantilla_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKstkProductosPlantilla
GO

CREATE FUNCTION FuncFKstkProductosPlantilla
(
@pPlantilla_Id varchar (25)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = stkProductosPlantilla FROM stkProductosPlantilla WHERE 
	Plantilla_Id = @pPlantilla_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkRemiConforma.sql*/
DROP PROCEDURE stkRemiConformaGuardar
GO
CREATE PROCEDURE stkRemiConformaGuardar
(
@pstkMoviCabe bigint,
@pUsuario_Id int,
@pFechaConforma datetime,
@pObservaciones QMemo = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkRemiConforma WHERE (stkMoviCabe = @pstkMoviCabe)))
BEGIN 
	UPDATE stkRemiConforma
	SET		Usuario_Id = @pUsuario_Id,
		FechaConforma = @pFechaConforma,
		FechaRegistro = getDate() ,
		Observaciones = @pObservaciones
	WHERE (stkMoviCabe = @pstkMoviCabe)
END 
ELSE 
BEGIN 
	INSERT INTO stkRemiConforma
	(
		stkMoviCabe,
		Usuario_Id,
		FechaConforma,
		FechaRegistro,
		Observaciones
	)
	VALUES 
	(
		@pstkMoviCabe,
		@pUsuario_Id,
		@pFechaConforma,
		getDate(),
		@pObservaciones
	)
END 

GO

DROP PROCEDURE stkRemiConformaDatos
GO
CREATE PROCEDURE stkRemiConformaDatos
(
@pSegmento_Id VarChar(10),
@pSegmento1C VarChar(25),
@pSegmento2C VarChar(25),
@pSegmento3C VarChar(25),
@pSegmento4C VarChar(25),
@pSegmento1N Int,
@pSegmento2N Int,
@pSegmento3N Int,
@pSegmento4N Int,
@pEmpresa_Id Int

)
AS
SET NOCOUNT ON 

DECLARE @stkMoviCabe bigint

SELECT @stkMoviCabe=stkRemiConforma.stkMoviCabe
FROM stkRemiConforma 
INNER JOIN stkMoviCabe  ON (stkMoviCabe.stkMoviCabe = stkRemiConforma.stkMoviCabe)
INNER JOIN stkRemitos ON stkRemitos.stkMoviCabe = stkMoviCabe.stkMoviCabe
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = stkRemiConforma.Usuario_Id)
INNER JOIN conAsientos ON conAsientos.conAsientos = stkMoviCabe.stkMoviCabe 
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
INNER JOIN venClientes ON  venClientes.genEntidades = stkRemitos.Cliente_Id
INNER JOIN genSegmentos ON genAsiSegmentos.Segmento_Id = genSegmentos.genSegmentos
WHERE 
genSegmentos.Segmento_Id = @pSegmento_Id and 
genAsiSegmentos.Segmento1C = @pSegmento1C and 
genAsiSegmentos.Segmento2C = @pSegmento2C and 
genAsiSegmentos.Segmento3C = @pSegmento3C and 
genAsiSegmentos.Segmento4C = @pSegmento4C and 
genAsiSegmentos.Segmento1N = @pSegmento1N and 
genAsiSegmentos.Segmento2N = @pSegmento2N and 
genAsiSegmentos.Segmento3N = @pSegmento3N and 
genAsiSegmentos.Segmento4N = @pSegmento4N and 
genAsiSegmentos.Empresa_Id = @pEmpresa_Id


SELECT stkRemiConforma.stkMoviCabe, genSegmentos.Segmento_Id,
genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
conAsientos.Fecha, conAsientos.Anulado, conAsientos.Posteado,
venClientes.Cliente_Id, venClientes.RazonSocial,
genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
	stkRemiConforma.FechaConforma, stkRemiConforma.FechaRegistro, stkRemiConforma.Observaciones
FROM stkRemiConforma 
INNER JOIN stkMoviCabe  ON (stkMoviCabe.stkMoviCabe = stkRemiConforma.stkMoviCabe)
INNER JOIN stkRemitos ON stkRemitos.stkMoviCabe = stkMoviCabe.stkMoviCabe
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = stkRemiConforma.Usuario_Id)
INNER JOIN conAsientos ON conAsientos.conAsientos = stkMoviCabe.stkMoviCabe 
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
INNER JOIN venClientes ON  venClientes.genEntidades = stkRemitos.Cliente_Id
INNER JOIN genSegmentos ON genAsiSegmentos.Segmento_Id = genSegmentos.genSegmentos
WHERE 
genSegmentos.Segmento_Id = @pSegmento_Id and 
genAsiSegmentos.Segmento1C = @pSegmento1C and 
genAsiSegmentos.Segmento2C = @pSegmento2C and 
genAsiSegmentos.Segmento3C = @pSegmento3C and 
genAsiSegmentos.Segmento4C = @pSegmento4C and 
genAsiSegmentos.Segmento1N = @pSegmento1N and 
genAsiSegmentos.Segmento2N = @pSegmento2N and 
genAsiSegmentos.Segmento3N = @pSegmento3N and 
genAsiSegmentos.Segmento4N = @pSegmento4N and 
genAsiSegmentos.Empresa_Id = @pEmpresa_Id
 
 exec genAtributosGeneralesIdentityDatos @stkmovicabe , 'stkRemiConforma'
 exec genAdjuntosIdentityDatos 'stkRemiConforma', 0
 RETURN @@Error 

GO

DROP PROCEDURE stkRemiConformaEliminar
GO
CREATE PROCEDURE stkRemiConformaEliminar
(
@pstkMoviCabe bigint
)
AS
SET NOCOUNT ON 

DELETE FROM stkRemiConforma 
WHERE (stkMoviCabe = @pstkMoviCabe)
 
RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkRemiPendFact.sql*/
DROP PROCEDURE stkRemiPendFactGuardar
GO
CREATE PROCEDURE stkRemiPendFactGuardar
(
@pstkMoviCabe bigint,
@pRenglon int,
@pCantidadPendiente qCantidadD8
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkRemiPendFact WHERE (stkMoviCabe = @pstkMoviCabe) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE stkRemiPendFact
	SET		CantidadPendiente = @pCantidadPendiente
	WHERE (stkMoviCabe = @pstkMoviCabe) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO stkRemiPendFact
	(
		stkMoviCabe,
		Renglon,
		CantidadPendiente
	)
	VALUES 
	(
		@pstkMoviCabe,
		@pRenglon,
		@pCantidadPendiente
	)
END 

GO

DROP PROCEDURE stkRemiPendFactDatos
GO
CREATE PROCEDURE stkRemiPendFactDatos
(
@pstkMoviCabe bigint,
@pRenglon int=NULL
)
AS
SET NOCOUNT ON 

SELECT stkRemiPendFact.stkMoviCabe, stkRemiPendFact.Renglon, 
	stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProducto,
	stkMoviCuerpo.Cantidad,  stkRemiPendFact.CantidadPendiente
FROM stkRemiPendFact 
INNER JOIN stkMoviCuerpo  ON (stkMoviCuerpo.stkMoviCabe = stkRemiPendFact.stkMoviCabe) AND (stkMoviCuerpo.Renglon = stkRemiPendFact.Renglon)
INNER JOIN stkProductos ON  stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
WHERE (stkRemiPendFact.stkMoviCabe = @pstkMoviCabe)
AND (stkRemiPendFact.Renglon = isnull(@pRenglon,stkRemiPendFact.Renglon))
 
 RETURN @@Error 

GO

DROP PROCEDURE stkRemiPendFactEliminar
GO
CREATE PROCEDURE stkRemiPendFactEliminar
(
@pstkMoviCabe bigint,
@pRenglon int=NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkRemiPendFact 
WHERE (stkMoviCabe = @pstkMoviCabe)
AND (stkRemiPendFact.Renglon = isnull(@pRenglon,stkRemiPendFact.Renglon))
 
 RETURN @@Error 

GO

DROP PROCEDURE stkRemiPendFactActualizarPend
GO
CREATE PROCEDURE stkRemiPendFactActualizarPend
(
@pstkMoviCabe bigint,
@pRenglon int,
@pCantidadPendiente qCantidadD8
)
AS
SET NOCOUNT ON 
UPDATE stkRemiPendFact
	SET		CantidadPendiente = CantidadPendiente - @pCantidadPendiente
		WHERE (stkMoviCabe = @pstkMoviCabe) AND (Renglon = @pRenglon)

GO




Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkRemiPendFactPro.sql*/
drop procedure stkRemiPendFactProInsertar
go
create procedure stkRemiPendFactProInsertar
(
@pstkMoviCabe bigint,
@pRenglon int,
@pCantidadPendiente numeric (19,8)
)
as
set nocount on
insert into stkRemiPendFactPro
(
stkMoviCabe,
Renglon,
CantidadPendiente
)
values
(
@pstkMoviCabe,
@pRenglon,
@pCantidadPendiente
)
go
drop procedure stkRemiPendFactProEliminar
go
create procedure stkRemiPendFactProEliminar
(
@pstkMoviCabe bigint,
@pRenglon int=null
)
as
set nocount on
delete from stkRemiPendFactPro
where stkMoviCabe=@pstkMoviCabe and isnull(@pRenglon,Renglon)=Renglon
go
drop Procedure stkRemiPendFactProDatos
go
create Procedure stkRemiPendFactProDatos
(
@pstkMoviCabe bigint, 
@pRenglon Int=NULL
)
as
set nocount on
select stkMoviCabe,Renglon,CantidadPendiente from stkRemiPendFactPro
wHERE
	stkMoviCabe = @pstkMoviCabe and 
	Renglon = ISNULL(@pRenglon,Renglon)
go

drop procedure stkRemiPendFactProActuCant
go
create procedure stkRemiPendFactProActuCant
(
@pstkMoviCabe bigint,
@pRenglon int,
@pCantidad numeric (19,8)
)
as
UPDATE stkRemiPendFactPro SET CantidadPendiente = 
	CantidadPendiente  - @pCantidad 
	Where
		stkMoviCabe = @pstkMoviCabe AND 
		Renglon = @pRenglon
GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkRemitos.sql*/
DROP PROCEDURE stkRemitosGuardar
GO
CREATE PROCEDURE stkRemitosGuardar
(
@pstkMoviCabe bigint,
@pCliente_Id varChar(25) = NULL,
@pSucursal SucursalN = NULL,
@pSegmento_Id varchar(10) = NULL,
@pListaPrecio_Id varChar(5) = Null,
@pHojaRuta_Id int = null, 
@pFormaEntrega_Id VarChar(5) = Null
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkRemitos WHERE (stkMoviCabe = @pstkMoviCabe)))
BEGIN 
	UPDATE stkRemitos
	SET	Cliente_Id = dbo.FuncFKvenClientes(@pCliente_Id),
		Sucursal = @pSucursal,
		Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id),
		ListaPrecio_Id = @pListaPrecio_Id,
		HojaRuta_Id = @pHojaRuta_Id, 
		FormaEntrega_Id = dbo.FuncFKvenFormaEntrega(@pFormaEntrega_Id)
	WHERE (stkMoviCabe = @pstkMoviCabe)
END 
ELSE 
BEGIN 
	INSERT INTO stkRemitos
	(
		stkMoviCabe,
		Cliente_Id,
		Sucursal,
		Segmento_Id,
		ListaPrecio_Id,
		HojaRuta_Id,
		FormaEntrega_Id
	)
	VALUES 
	(
		@pstkMoviCabe,
		dbo.FuncFKvenClientes(@pCliente_Id),
		@pSucursal,
		dbo.FuncFKgenSegmentos(@pSegmento_Id),
		dbo.FuncFKvenListasPrecios(@pListaPrecio_Id),
		@pHojaRuta_Id,
		dbo.FuncFKvenFormaEntrega(@pFormaEntrega_Id)
	)
END 

GO


DROP PROCEDURE stkRemitosEliminar
GO
CREATE PROCEDURE stkRemitosEliminar
(
@pstkMoviCabe bigint
)
AS
SET NOCOUNT ON 

DELETE FROM stkRemitos 
WHERE (stkMoviCabe = @pstkMoviCabe)
 
RETURN @@Error 

GO


DROP PROCEDURE stkRemitosDatos
GO
CREATE PROCEDURE stkRemitosDatos
(
@pstkMoviCabe bigint
)
AS
SELECT stkRemitos.stkMoviCabe, venClientes.Cliente_Id, stkRemitos.Sucursal, 
venClientes.RazonSocial, IsNull(gensegmentos.Segmento_Id, '') Segmento_Id,
venListasPrecios.ListaPrecio_Id, venListasPrecios.Descripcion DescripcionListasPrecios,
genMonedas.Moneda_Id, genMonedas.Descripcion DescripcionMoneda, stkRemitos.HojaRuta_Id,
dbo.Segmento(stkHojaSegmentos.Segmento_Id, stkHojaSegmentos.Segmento1C, stkHojaSegmentos.Segmento2C,
stkHojaSegmentos.Segmento3C, stkHojaSegmentos.Segmento4C, stkHojaSegmentos.Segmento1N, stkHojaSegmentos.Segmento2N, 
stkHojaSegmentos.Segmento3N, stkHojaSegmentos.Segmento4N) HojaRuta, 
venFormaEntrega.FormaEntrega_Id, venFormaEntrega.RazonSocial as DescripcionFormaEntrega, 
venCamiones.Patente_Id Camion_Id, Remolque1.Patente_Id as Remolque1, Remolque2.Patente_Id as Remolque2, 
	(SELECT MIN(FechaHoraSalida) from venCompCartaPorteOrigen 
	where
		venCompCartaPorteOrigen.venmovimientos = stkRemitos.stkMoviCabe) as FechaHoraSalida, 
	(SELECT MAX(FechaHoraProgLlegada) from venCompCartaPorteDestino
	where
		venCompCartaPorteDestino.venmovimientos = stkRemitos.stkMoviCabe) as FechaHoraProgLlegada, 
		venOperadores.Operador_Id, venOperadores.NombreOperador, venCompCartaPorte.TotalDistRec

FROM stkRemitos
Inner Join venClieHabitual On stkRemitos.Cliente_Id = venClieHabitual.genEntidades And
	stkRemitos.Sucursal = venClieHabitual.Sucursal
Inner Join venClientes On venClientes.genEntidades = stkRemitos.Cliente_Id
Inner Join genSegmentos On stkRemitos.Segmento_Id = genSegmentos.genSegmentos
Left Join venListasPrecios On venListasPrecios.venListasPrecios = stkRemitos.ListaPrecio_Id
Left Join genMonedas On genMonedas.genMonedas = venListasPrecios.Moneda_Id
Left Join stkHojaSegmentos On stkHojaSegmentos.stkHojaDeRuta = stkRemitos.HojaRuta_Id
Left Join venFormaEntrega ON  venFormaEntrega.venFormaEntrega = stkRemitos.FormaEntrega_Id
Left join venCompCartaPorte ON venCompCartaPorte.venMovimientos= stkRemitos.stkMoviCabe
left join venCamiones ON  venCamiones.venCamiones = venCompCartaPorte.Camion_Id
left join venCamiones Remolque1 ON  Remolque1.venCamiones = venCompCartaPorte.Remolque1
left join venCamiones Remolque2 ON  Remolque2.venCamiones = venCompCartaPorte.Remolque2
LEFT JOIN  venOperadores ON  venOperadores.venOperadores =venCompCartaPorte.Operador_Id
WHERE (stkMoviCabe = @pstkMoviCabe)
Go


Drop procedure stkRemitosAsignarHR
GO
Create procedure stkRemitosAsignarHR
(
@pstkMoviCabe bigint,
@pstkHojaDeRuta int
)
As
Update stkRemitos Set HojaRuta_Id = @pstkHojaDeRuta Where stkMoviCabe = @pstkMoviCabe
Go

Drop procedure stkRemitosDesasignarHR
Go
Create procedure stkRemitosDesasignarHR
(
@pstkHojaDeRuta int, 
@pstkMoviCabe bigint = null
)
As
Update stkRemitos Set HojaRuta_Id = Null Where HojaRuta_Id = @pstkHojaDeRuta and 
	stkMoviCabe = ISNULL(@pstkMoviCabe,stkMoviCabe)
Go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkRevaCostoManual.sql*/
--stkRevaCostoManual 'STK','RV','0001',' ',' ',0,0,0,0, 'A','AZZZ', ' ',' ', 1, '0204'
DROP PROCEDURE stkRevaCostoManual
GO
CREATE PROCEDURE stkRevaCostoManual
(
	@Segmento_Id VarChar(10),
	@Segmento1C VarChar(20),
	@Segmento2C VarChar(20),
	@Segmento3C VarChar(20),
	@Segmento4C VarChar(20),
	@Segmento1N Int,
	@Segmento2N Int,
	@Segmento3N Int,
	@Segmento4N Int,
	@ProductoDesde VarChar(15),
	@ProductoHasta VarChar(15),
	@Centro1_Id VarChar(8),
	@Centro2_Id VarChar(8),
	@Empresa_Id Int, 
	@pSucursal VarChar(4)

)
AS
DECLARE @pPorSucursal bit = (Select case when TipoCosto='S' THEN 1 ELSE 0 END from genEmpresas Where genEmpresas = @Empresa_Id )


Select stkMoviCabe.stkMoviCabe, 
	genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C, 
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, 
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, 
	conAsientos.Fecha, 
	@Centro1_Id as Centro1_Id, conCentro1.Descripcion as  DescripcionCentro1, 
	@Centro2_Id as Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, 
	MIN(stkProductos.Producto_id) as ProductoDesde,
	MAX(stkProductos.Producto_id) as ProductoHasta, 
	CAST(0 as bit) as ParaTodasLasSuc
	FROM conAsientos 
	INNER JOIN stkMoviCabe ON conAsientos.conAsientos = stkMoviCabe.stkMoviCabe
	INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id =conAsientos.conAsientos
	INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	LEFT JOIN conCentro1 ON conCentro1.Centro1_Id = @Centro1_Id
	LEFT JOIN conCentro2 ON conCentro2.Centro2_Id = @Centro2_Id
	INNER JOIN stkMoviCuerpoReva ON stkMoviCuerpoReva.stkMoviCabe = stkMoviCabe.stkMoviCabe
	INNER JOIN stkProductos ON stkProductos.stkProductos =stkMoviCuerpoReva.Producto_Id
	WHERE
		genSegmentos.Segmento_Id = @Segmento_Id and 
		genAsiSegmentos.Segmento1C = @Segmento1C and
		genAsiSegmentos.Segmento2C = @Segmento2C and
		genAsiSegmentos.Segmento3C = @Segmento3C and
		genAsiSegmentos.Segmento4C = @Segmento4C and
		genAsiSegmentos.Segmento1N = @Segmento1N and
		genAsiSegmentos.Segmento2N = @Segmento2N and
		genAsiSegmentos.Segmento3N = @Segmento3N and
		genAsiSegmentos.Segmento4N = @Segmento4N and 
		genAsiSegmentos.Empresa_Id = @Empresa_Id
	GROUP BY stkMoviCabe.stkMoviCabe, 
	genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C, 
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, 
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, 
	conAsientos.Fecha, conCentro1.Descripcion, conCentro2.Descripcion 


	if @Segmento1N = 0
	begin
		
		IF @pPorSucursal=0

		

		begin 
		
		SELECT stkProductos.Producto_Id, stkProductos.Descripcion, 
			stkUniMed.Medida_Id, 
			CASE WHEN genEmpresas.TipoCosto = 'P' THEN 
				isnull(stkProductosCostos.CostoPromPond, stkProductos.CostoPromPond) else  
				isnull(stkProductosCostos.CostoUltCompra, stkProductos.CostoUltCompra) end as Costo,
				0.00 as CostoNuevo
		FROM stkProductos 
		INNER JOIN genEmpresas ON genEmpresas.genEmpresas = @Empresa_Id
			inner join stkUniMed ON stkUniMed.stkUniMed = stkProductos.Medida_Id
			LEFT JOIN stkProductosCostos ON stkProductosCostos.Producto_Id = stkProductos.stkProductos and 
					stkProductosCostos.Empresa_Id = @Empresa_Id

		where 
			stkProductos.Producto_Id BETWEEN @ProductoDesde And @ProductoHasta and 
			ISNULL(stkProductos.Empresa_Id, @Empresa_id) = @Empresa_id and 
			stkProductos.Clase IN ('E','-') and 
			stkProductos.Inactivo = 0 AND 
			stkProductos.Posteado = 1 
			order by 1
	end
	ELSE
		BEGIN 

		SELECT stkProductos.Producto_Id, stkProductos.Descripcion, 
			stkUniMed.Medida_Id, 
			CASE WHEN genEmpresas.TipoCosto = 'P' THEN 
				isnull(stkProductosCostos.CostoPromPond, stkProductos.CostoPromPond) else  
				isnull(stkProductosCostos.CostoUltCompra, stkProductos.CostoUltCompra) end as Costo,
				0.00 as CostoNuevo
		FROM stkProductos 
		INNER JOIN genEmpresas ON genEmpresas.genEmpresas = @Empresa_Id
			inner join stkUniMed ON stkUniMed.stkUniMed = stkProductos.Medida_Id
			LEFT JOIN (stkProductosCostosSucursal stkProductosCostos 
			inner join genSucursalesEmpr ON genSucursalesEmpr.genSucursalesEmpr = stkProductosCostos.Sucursal and
				genSucursalesEmpr.Sucursal = @pSucursal ) ON stkProductosCostos.Producto_Id = stkProductos.stkProductos and 
					stkProductosCostos.Empresa_Id = @Empresa_Id
			

		where 
			stkProductos.Producto_Id BETWEEN @ProductoDesde And @ProductoHasta and 
			ISNULL(stkProductos.Empresa_Id, @Empresa_id) = @Empresa_id and 
			stkProductos.Clase IN ('E','-') and 
			stkProductos.Inactivo = 0 AND 
			stkProductos.Posteado = 1 
			order by 1
		END
	END
	else
	begin

		SELECT stkProductos.Producto_Id, stkProductos.Descripcion, 
			stkUniMed.Medida_Id, 
			CASE WHEN genEmpresas.TipoCosto IN( 'P','S') THEN 
				stkMoviCuerpoReva.PPP_Anterior else  stkMoviCuerpoReva.PUC_Anterior end as Costo,
				CASE WHEN genEmpresas.TipoCosto IN( 'P','S') THEN 
				stkMoviCuerpoReva.PPP_Actual else  stkMoviCuerpoReva.PUC_Actual end as CostoNuevo
		FROM stkProductos 
		INNER JOIN genEmpresas ON genEmpresas.genEmpresas = @Empresa_Id
			inner join stkUniMed ON stkUniMed.stkUniMed = stkProductos.Medida_Id
			INNER JOIN stkMoviCuerpoReva ON stkMoviCuerpoReva.Producto_Id = stkProductos.stkProductos
			INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = stkMoviCuerpoReva.stkMoviCabe
			INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
		where 
			genSegmentos.Segmento_Id = @Segmento_Id and 
			genAsiSegmentos.Segmento1C = @Segmento1C and
			genAsiSegmentos.Segmento2C = @Segmento2C and
			genAsiSegmentos.Segmento3C = @Segmento3C and
			genAsiSegmentos.Segmento4C = @Segmento4C and
			genAsiSegmentos.Segmento1N = @Segmento1N and
			genAsiSegmentos.Segmento2N = @Segmento2N and
			genAsiSegmentos.Segmento3N = @Segmento3N and
			genAsiSegmentos.Segmento4N = @Segmento4N and
			genAsiSegmentos.Empresa_Id = @Empresa_Id			
		order by 1


	end

GO


	
	







Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkSalidasCD.sql*/
drop procedure stkSalidasCDDatos
go
create procedure stkSalidasCDDatos
(
@pEmpresa_id int, 
@pSegmento_id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
AS
Declare @pstkMoviCabe bigint = (select Asiento_id
 from genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_id = @pEmpresa_id and 
	genAsiSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C )

exec stkMoviCabeDatos @pstkMoviCabe

select stkEnTransito.stkMoviCabe,stkEnTransito.stkMoviCabeEntr,stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDeposito
from stkEnTransito inner join stkDepositos on stkEnTransito.Deposito_Id=stkDepositos.stkDepositos
where stkEnTransito.stkMoviCabe=@pstkMoviCabe

select genSegmentos.Segmento_Id, Segmento1N, Segmento2N, Segmento3N, Segmento4N, Segmento1C, Segmento2C, Segmento3C, Segmento4C from stkSolicitudCDSalida 
inner join stkSolicitudCDSegmento on stkSolicitudCDSegmento.stkSolicitudCD=stkSolicitudCDSalida.stkSolicitudCD
inner join genSegmentos on genSegmentos.genSegmentos=stkSolicitudCDSegmento.Segmento_Id
where stkMoviCabe=@pstkMoviCabe


-- SI USA REMITO TRAIGO LOS DATOS PARA LA CARTA PORTE
SELECT Cast(Case when stkRemitos.stkMoviCabe IS NULL THEN 0 ELSE 1 END as Bit) as GeneraRemito,
venCompCartaPorte.venmovimientos, venCompCartaPorte.TranspInternac, venCompCartaPorte.EntradaSalidaMerc, venCompCartaPorte.ViaEntradaSalida, 
	venCompCartaPorte.TotalDistRec, venCompCartaPorte.PesoBrutoTotal, venCompCartaPorte.UnidadPeso, venCompCartaPorte.PesoNetoTotal, 
	venCompCartaPorte.CargoPorTasacion, venCamiones.Patente_Id as Camion_Id, Remolque1.Patente_Id as Remolque1, 
	Remolque2.Patente_Id as Remolque2, venFormaEntrega.FormaEntrega_Id, venFormaEntrega.RazonSocial as DescripcionFormaEntrega, 
	venOperadores.Operador_Id, venOperadores.NombreOperador, 
	(select min(venCompCartaPorteOrigen.FechaHoraSalida) from venCompCartaPorteOrigen
		where
		venCompCartaPorteOrigen.venmovimientos = venCompCartaPorte.venmovimientos)  FechaHoraSalida,
	(select MAX(venCompCartaPorteDestino.FechaHoraProgLlegada) from venCompCartaPorteDestino
		where
		venCompCartaPorteDestino.venmovimientos = venCompCartaPorte.venmovimientos) FechaHoraProgLlegada

From stkRemitos
	left JOIN (venCompCartaPorte INNER JOIN 
			venCamiones ON venCamiones.venCamiones = venCompCartaPorte.Camion_Id
			LEFT JOIN venCamiones as Remolque1 ON Remolque1.venCamiones = venCompCartaPorte.Remolque1
			LEFT JOIN venCamiones as Remolque2 ON Remolque2.venCamiones = venCompCartaPorte.Remolque2
			LEFT JOIN venOperadores ON  venOperadores.venOperadores =venCompCartaPorte.Operador_Id
			) ON 
	stkRemitos.stkMoviCabe = venCompCartaPorte.venmovimientos
	LEFT JOIN venFormaEntrega ON venFormaEntrega.venFormaEntrega = stkRemitos.FormaEntrega_Id
	where  stkRemitos.stkMoviCabe=@pstkMoviCabe

go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkSalidasRemitoConsultaDrillDown.sql*/
DROP PROCEDURE stkSalidasRemitoConsultaDrillDown
GO
CREATE PROCEDURE stkSalidasRemitoConsultaDrillDown
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
AS
Declare @pstkMoviCabe bigint = (select Asiento_Id
 from genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and 
	genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C )
	
EXEC stkMoviCabeDatos @pstkMoviCabe

EXEC stkRemitosDatos @pstkMoviCabe

Select stkMoviCausa.stkMoviCabe, Cast(0 As bit) SoloRemito, Cast(1 As bit) PendienteFacturacion,
stkCausasMovi.Causa_Id, stkCausasMovi.Descripcion DescripcionCausa,
conCentro1.Centro1_Id, conCentro1.Descripcion DescripcionCentro1,
conCentro2.Centro2_Id, conCentro2.Descripcion DescripcionCentro2
From stkMoviCausa
Inner Join stkCausasMovi On stkCausasMovi.stkCausasMovi = stkMoviCausa.Causa_Id
Left Join conCentro1 On conCentro1.conCentro1 = stkMoviCausa.Centro1_Id
Left Join conCentro2 On conCentro2.conCentro2 = stkMoviCausa.Centro2_Id
Where stkMoviCausa.stkMoviCabe = @pstkMoviCabe

-- Relacionados --
-- Facturas --
SELECT DISTINCT dbo.Segmento(genAsiSegmentos.Segmento_Id, 
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, 
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, 
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as Relacionado, 
	genSegmentos.Segmento_Id, disFormularios.Formulario_Id, disFormularios.Descripcion
From venMovStkHist 
Inner Join genAsiSegmentos ON venMovStkHist.venMovimientos = genAsiSegmentos.Asiento_Id
Inner Join genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
Cross Join (genMenus Inner Join disFormularios On disFormularios.disFormularios = genMenus.Formulario_Id)
WHERE venMovStkHist.stkMoviCabe = @pstkMoviCabe And genMenus.Orden = '539910'
Union All
-- Hoja de ruta --
SELECT dbo.Segmento(stkHojaSegmentos.Segmento_Id, stkHojaSegmentos.Segmento1C, stkHojaSegmentos.Segmento2C,
stkHojaSegmentos.Segmento3C, stkHojaSegmentos.Segmento4C, stkHojaSegmentos.Segmento1N, stkHojaSegmentos.Segmento2N, 
stkHojaSegmentos.Segmento3N, stkHojaSegmentos.Segmento4N) as Relacionado,
genSegmentos.Segmento_Id, disFormularios.Formulario_Id, disFormularios.Descripcion
FROM stkRemitos
Inner Join genSegmentos On stkRemitos.Segmento_Id = genSegmentos.genSegmentos
Inner Join stkHojaSegmentos On stkHojaSegmentos.stkHojaDeRuta = stkRemitos.HojaRuta_Id
Cross Join (genMenus Inner Join disFormularios On disFormularios.disFormularios = genMenus.Formulario_Id)
WHERE stkRemitos.stkMoviCabe = @pstkMoviCabe And genMenus.Orden = '222060'
UNION ALL 
-- REPARTO
SELECT DISTINCT dbo.Segmento(venRepaSegmentos.Segmento_Id, venRepaSegmentos.Segmento1C, venRepaSegmentos.Segmento2C,
venRepaSegmentos.Segmento3C, venRepaSegmentos.Segmento4C, venRepaSegmentos.Segmento1N, venRepaSegmentos.Segmento2N, 
venRepaSegmentos.Segmento3N, venRepaSegmentos.Segmento4N) as Relacionado,
genSegmentos.Segmento_Id, disFormularios.Formulario_Id, disFormularios.Descripcion
FROM stkRemitos
Inner Join venPediRemitidos On stkRemitos.stkMoviCabe =  venPediRemitidos.stkMoviCabe
INNER JOIN venRepaPedi ON  venRepaPedi.venPedidos =venPediRemitidos.venPedidos and 
				venPediRemitidos.stkMoviCabe = stkRemitos.stkMoviCabe and 
				venRepaPedi.venReparto = venPediRemitidos.venReparto
INNER JOIN venRepaSegmentos ON  venRepaSegmentos.venReparto =venRepaPedi.venReparto
INNER JOIN genSegmentos ON  genSegmentos.genSegmentos =venRepaSegmentos.Segmento_Id
INNER Join genMenus  ON genMenus.Orden = '52103020'
Inner Join disFormularios On disFormularios.disFormularios = genMenus.Formulario_Id
WHERE stkRemitos.stkMoviCabe = @pstkMoviCabe 
GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkSalidasRI.sql*/
-- stkSalidasRIDatos 1,'STOCK', 0,0,0,0,' ',' ',' ',' ','REQIN',1,0,0,0,'0001',' ',' ',' '


drop procedure stkSalidasRIDatos
go
create procedure stkSalidasRIDatos
(
@pEmpresa_id int, 
@pSegmento_id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20), 
@pSegmento_id_RI VarChar(10), 
@pSegmento1N_RI int,
@pSegmento2N_RI int,
@pSegmento3N_RI int,
@pSegmento4N_RI int,
@pSegmento1C_RI VarChar(20),
@pSegmento2C_RI VarChar(20),
@pSegmento3C_RI VarChar(20),
@pSegmento4C_RI VarChar(20)
)
AS
SET NOCOUNT ON 

DECLARE @pstkMoviCabe bigint

SET @pstkMoviCabe = (
SELECT Asiento_id from genAsiSegmentos where
	Empresa_Id = @pEmpresa_id and 
	Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_id) and
	Segmento1N =@pSegmento1N and
	Segmento2N = @pSegmento2N and
	Segmento3N = @pSegmento3N and
	Segmento4N = @pSegmento4N and
	Segmento1C = @pSegmento1C and
	Segmento2C = @pSegmento2C and 
	Segmento3C = @pSegmento3C and 
	Segmento4C = @pSegmento4C )

SELECT stkMoviCabe.stkMoviCabe,
	genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C, Cast(0 As Bit) DistribuyeContrapartida,
	conAsientos.Posteado, conAsientos.Fecha, conAsientos.FechaRegistro, 
	conAsientos.Cambio,conAsientos.CambioMonedaOriginal, 
	conAsientos.Anulado, conAsientos.Observaciones,  disFormularios.Formulario_Id Formulario,
	genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas,
	stkSubTipoMov.SubTipoMov_Id, stkSubTipoMov.Descripcion as DescripcionSubTipoMov, 
	stkMoviCabe.ModificaCosto, 	stkMoviCabe.Signo, stkSubTipoMov.Tipomov, ' ' as Proveed_Id
FROM stkMoviCabe 
INNER JOIN conAsientos  ON (conAsientos.conAsientos = stkMoviCabe.stkMoviCabe)
INNER JOIN stkSubTipoMov  ON (stkSubTipoMov.SubTipoMov_Id = stkMoviCabe.SubTipoMov_Id)
INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_id
Inner Join disFormularios On disFormularios.disFormularios = conAsientos.Formulario_Id
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_id = stkMoviCabe.stkMoviCabe
INNER JOIN genSegmentos ON genAsiSegmentos.Segmento_id = genSegmentos.genSegmentos
WHERE (stkMoviCabe = @pstkMoviCabe)


if @pstkMoviCabe is null
BEGIN
-- Traigo el pendiente de Entrega de la RI --
SELECT comRISegmento.Empresa_Id, genSegmentos.Segmento_Id, 
	comRISegmento.Segmento1N, comRISegmento.Segmento2N,
	comRISegmento.Segmento3N, comRISegmento.Segmento4N,
	comRISegmento.Segmento1C, comRISegmento.Segmento2C,
	comRISegmento.Segmento3C, comRISegmento.Segmento4C,
	comReqInterno.Fecha, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres 
	
From comRISegmento 
INNER JOIN comReqInterno on comRISegmento.comReqInterno = comReqInterno.comReqInterno
INNER JOIN genSegmentos	ON genSegmentos.genSegmentos = comRISegmento.Segmento_Id
INNER JOIN genUsuarios ON genUsuarios.genUsuarios = comReqInterno.Usuario_Id
WHERE 
	
	comRISegmento.Empresa_Id =@pEmpresa_id and 
	genSegmentos.Segmento_Id = @pSegmento_id_RI and
	comRISegmento.Segmento1N =@pSegmento1N_RI and
	comRISegmento.Segmento2N = @pSegmento2N_RI and
	comRISegmento.Segmento3N = @pSegmento3N_RI and
	comRISegmento.Segmento4N = @pSegmento4N_RI and
	comRISegmento.Segmento1C = @pSegmento1C_RI and
	comRISegmento.Segmento2C = @pSegmento2C_RI and 
	comRISegmento.Segmento2C = @pSegmento2C_RI and 
	comRISegmento.Segmento3C = @pSegmento3C_RI and 
	comRISegmento.Segmento4C = @pSegmento4C_RI 
ORDER BY 2




SELECT Convert(bigint, 0) AS stkMoviCabe, comRICuerpo.Renglon_RI Renglon, 0 RenglonReferencia, 
	comRICuerpo.FechaNecesidad Fecha,
	stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos, 
	stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos,
	stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, 
	comRIArticulo.Factor, CASE WHEN isnull(stkExistencia.Cantidad,0) >= (comRICuerpo.Cantidad - comRICuerpo.CantidadRecibida) 
	THEN  (comRICuerpo.Cantidad - comRICuerpo.CantidadRecibida)  ELSE 
		 isnull(stkExistencia.Cantidad,0) END as Cantidad,
		CASE WHEN isnull(stkExistencia.Cantidad,0) >= (comRICuerpo.Cantidad - comRICuerpo.CantidadRecibida) 
	THEN  (comRICuerpo.Cantidad - comRICuerpo.CantidadRecibida)  ELSE 
		 isnull(stkExistencia.Cantidad,0) END / ISNULL(stkArtiUM.Factor,1)   as CantidadForm, 
	comRICuerpo.Precio as CostoUnitario, 
	comRIArticulo.PrecioOriginal, stkMedidaAlterna.Medida_Id MedidaAlterna, 
	stkMedidaAlterna.Descripcion DescripcionMedidaAlterna,
	comRICuerpo.Cantidad*0 As CantidadAlternaForm, ' ' Observaciones, 0.00 as Descuento, 0 as conRenglonDebe, 
	conCuentasDebe.Cuenta_Id as CuentaDebe, conCuentasDebe.Descripcion as DescripcionCuentaDebe,
	conCentro1Debe.Centro1_Id as Centro1Debe, conCentro1Debe.Descripcion as DescripcionCentro1Debe,
	conCentro2Debe.Centro2_Id as Centro2Debe, conCentro2Debe.Descripcion as DescripcionCentro2Debe,
	' ' as ClaseDebe, comRICuerpo.Precio*0  as ImporteContableDebe, 
	0 as conRenglonHaber, 
	conCuentasHaber.Cuenta_Id as CuentaHaber, conCuentasHaber.Descripcion as DescripcionCuentaHaber,
	' ' as Centro1Haber, ' ' as DescripcionCentro1Haber,
	' ' as Centro2Haber, ' ' as DescripcionCentro2Haber,
	' '  as ClaseHaber, comRICuerpo.Precio*0 as ImporteContableHaber, 
	comRICuerpo.Renglon_RI, comRIArticulo.CantidadOriginal as CantidadRI, comRICuerpo.CantidadRecibida, 
	comRICuerpo.Precio, '' Despacho_Id
FROM comRISegmento 
INNER JOIN comRICuerpo ON comRISegmento.comReqInterno = comRICuerpo.comReqInterno
INNER JOIN comRIArticulo ON comRICuerpo.comReqInterno = comRIArticulo.comReqInterno and comRICuerpo.Renglon_RI = comRIArticulo.Renglon_RI
INNER JOIN stkDepositos  ON (stkDepositos.stkDepositos = comRIArticulo.Deposito_Id)
INNER JOIN stkProductos  ON (stkProductos.stkProductos = comRIArticulo.Producto_Id)
INNER JOIN stkUniMed  ON (stkUniMed.stkUniMed = comRICuerpo.Medida_Id)
Inner Join comReqInterno On comReqInterno.comReqInterno = comRISegmento.comReqInterno
INNER JOIN conCuentas as conCuentasHaber ON conCuentasHaber.conCuentas = stkProductos.CtaCompra
LEFT OUTER JOIN conCentro1 as conCentro1Debe ON conCentro1Debe.conCentro1 = comRICuerpo.Centro1_id
LEFT OUTER JOIN conCentro2  as conCentro2Debe ON conCentro2Debe.conCentro2 = comRICuerpo.Centro2_id
left outer Join conCuentas as conCuentasDebe ON stkProductos.CtaConsumo = conCuentasDebe.conCuentas
Left Join stkUniMed stkMedidaAlterna On stkMedidaAlterna.stkUniMed = stkProductos.MedidaAlterna
LEFT JOIN stkExistencia ON stkExistencia.Producto_Id = stkProductos.stkProductos and 
	stkExistencia.Deposito_Id = stkDepositos.stkDepositos And stkExistencia.Empresa_Id = @pEmpresa_id
left JOIN stkArtiUM on
stkArtiUM.Producto_Id = stkProductos.stkProductos and 
stkArtiUM.Medida_Id = comRICuerpo.Medida_Id
WHERE 
	comRICuerpo.Cantidad > comRICuerpo.CantidadRecibida and 
	--stkExistencia.Cantidad >= (comRICuerpo.Cantidad - comRICuerpo.CantidadRecibida) and 
	comRICuerpo.Pendiente = 1 and 
	comRISegmento.Empresa_Id = @pEmpresa_id and 
	comRISegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_id_RI) and
	comRISegmento.Segmento1N =@pSegmento1N_RI and
	comRISegmento.Segmento2N = @pSegmento2N_RI and
	comRISegmento.Segmento3N = @pSegmento3N_RI and
	comRISegmento.Segmento4N = @pSegmento4N_RI and
	comRISegmento.Segmento1C = @pSegmento1C_RI and
	comRISegmento.Segmento2C = @pSegmento2C_RI and 
	comRISegmento.Segmento3C = @pSegmento3C_RI and 
	comRISegmento.Segmento4C = @pSegmento4C_RI 
ORDER BY 2


END

ELSE
-- Cuerpo
-- Traigo el comprobante que se est? consultando --
BEGIN

SELECT comRISegmento.Empresa_Id, genSegmentos.Segmento_Id, 
	comRISegmento.Segmento1N, comRISegmento.Segmento2N,
	comRISegmento.Segmento3N, comRISegmento.Segmento4N,
	comRISegmento.Segmento1C, comRISegmento.Segmento2C,
	comRISegmento.Segmento3C, comRISegmento.Segmento4C,
	comReqInterno.Fecha, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres 

From comRISegmento 
INNER JOIN comReqInterno on comRISegmento.comReqInterno = comReqInterno.comReqInterno
INNER JOIN genSegmentos	ON genSegmentos.genSegmentos = comRISegmento.Segmento_Id
INNER JOIN genUsuarios ON genUsuarios.genUsuarios = comReqInterno.Usuario_Id


WHERE 
	Exists(select 1 from stkMoviRi where
		stkMoviRi.stkMoviCabe = @pstkMoviCabe and 
		stkMoviRi.comReqInterno =	comReqInterno.comReqInterno)
ORDER BY 2


SELECT stkMoviCuerpo.stkMoviCabe, stkMoviCuerpo.Renglon, 0 RenglonReferencia, stkMoviCuerpo.Fecha,
	stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos, stkProductos.Producto_Id, 
	stkProductos.Descripcion as DescripcionProductos,
	stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, stkMoviCuerpo.Factor, stkMoviCuerpo.Cantidad,
	stkMoviCuerpo.CantidadForm, stkMoviCuerpo.CostoUnitario, stkMoviCuerpo.PrecioOriginal,
	stkMedidaAlterna.Medida_Id MedidaAlterna, stkMedidaAlterna.Descripcion DescripcionMedidaAlterna,
	stkMoviCuerpo.CantidadalternaForm, stkMoviCuerpo.Observaciones, stkMoviCuerpo.Descuento, 
	stkMoviCuerpo.conRenglonDebe, 
	conCuentasDebe.Cuenta_Id as CuentaDebe, conCuentasDebe.Descripcion as DescripcionCuentaDebe,
	conCentro1Debe.Centro1_Id as Centro1Debe, conCentro1Debe.Descripcion as DescripcionCentro1Debe,
	conCentro2Debe.Centro2_Id as Centro2Debe, conCentro2Debe.Descripcion as DescripcionCentro2Debe,
	conMovContDebe.Clase as ClaseDebe, conMovContDebe.Importe as ImporteContableDebe, 
	stkMoviCuerpo.conRenglonHaber, 
	conCuentasHaber.Cuenta_Id as CuentaHaber, conCuentasHaber.Descripcion as DescripcionCuentaHaber,
	conCentro1Haber.Centro1_id as Centro1Haber, conCentro1Haber.Descripcion as DescripcionCentro1Haber,
	conCentro2Haber.Centro2_id as Centro2Haber, conCentro2Haber.Descripcion as DescripcionCentro2Haber,
	conMovContHaber.Clase as ClaseHaber, conMovContDebe.Importe as ImporteContableHaber , 
	stkMoviRi.Renglon_RI, comRIArticulo.CantidadOriginal as CantidadRI, isNull(comRICuerpo.CantidadRecibida, 0) Cantidad_Recibida, 
	comRICuerpo.Precio, comDespachos.Despacho_Id
FROM stkMoviCabe 
INNER JOIN stkMoviCuerpo ON (stkMoviCabe.stkMoviCabe = stkMoviCuerpo.stkMoviCabe) 
Left JOIN (stkMoviRi
INNER JOIN comRICuerpo ON comRICuerpo.comReqInterno = stkMoviRi.comReqInterno and comRICuerpo.Renglon_RI = stkMoviRi.Renglon_RI
Inner Join comRIArticulo On comRIArticulo.comReqInterno = stkMoviRi.comReqInterno And comRIArticulo.Renglon_RI = stkMoviRi.Renglon_RI)
	  ON stkMoviRi.stkMoviCabe = stkMoviCuerpo.stkMoviCabe and stkMoviRi.Renglon = stkMoviCuerpo.Renglon
LEFT JOIN stkDepositos  ON (stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id)
LEFT JOIN stkProductos  ON (stkProductos.stkProductos = stkMoviCuerpo.Producto_Id)
LEFT JOIN stkUniMed  ON (stkUniMed.stkUniMed = stkMoviCuerpo.Medida_Id)
INNER JOIN conMovCont  ON (conMovCont.conAsientos = stkMoviCuerpo.stkMoviCabe) AND (conMovCont.Renglon = stkMoviCuerpo.conRenglonDebe)
INNER JOIN conMovCont conMovCont2 ON (conMovCont2.conAsientos = stkMoviCuerpo.stkMoviCabe) AND (conMovCont2.Renglon = stkMoviCuerpo.conRenglonHaber)
INNER JOIN conMovCont as conMovContDebe ON conMovContDebe.conAsientos = stkMoviCuerpo.stkMoviCabe And
	conMovContDebe.Renglon = stkMoviCuerpo.conRenglonDebe
INNER JOIN conCuentas as conCuentasDebe ON conCuentasDebe.conCuentas = conMovContDebe.cuenta_id 
LEFT OUTER  JOIN conCentro1 as conCentro1Debe ON conCentro1Debe.conCentro1 = conMovContDebe.Centro1_id
LEFT OUTER  JOIN conCentro2  as conCentro2Debe ON conCentro2Debe.conCentro2 = conMovContDebe.Centro2_id
INNER JOIN conMovCont as conMovContHaber ON conMovContHaber.conAsientos = stkMoviCuerpo.stkMoviCabe And
	conMovContHaber.Renglon = stkMoviCuerpo.conRenglonHaber
INNER JOIN conCuentas as conCuentasHaber ON conCuentasHaber.conCuentas = conMovContHaber.cuenta_id 
LEFT OUTER JOIN conCentro1 as conCentro1Haber ON conCentro1Haber.conCentro1 = conMovContHaber.Centro1_id
LEFT OUTER JOIN conCentro2  as conCentro2Haber ON conCentro2Haber.conCentro2 = conMovContHaber.Centro2_id
Left Join stkUniMed stkMedidaAlterna On stkMedidaAlterna.stkUniMed = stkMoviCuerpo.MedidaAlterna
left join (stkMoviDespa  INNER JOIN comDespachos ON stkMoviDespa.Despacho_Id = comDespachos.comDespachos) ON 
	stkMoviDespa.stkMoviCabe = stkMoviCuerpo.stkMoviCabe AND 
	stkMoviDespa.Renglon = stkMoviCuerpo.Renglon
WHERE (stkMoviCuerpo.stkMoviCabe = @pstkMoviCabe)
ORDER BY 2
END


Exec genAtributosGeneralesIdentityDatos @pstkMoviCabe, 'stkMoviCabe' 

Exec stkMoviSerieDatos @pstkMoviCabe

Exec stkMoviDespaDatos @pstkMoviCabe

Exec stkMoviUbicacionDatos @pstkMoviCabe
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkSerieVencimiento.sql*/
DROP PROCEDURE stkSerieVencimientoGuardar
GO
CREATE PROCEDURE stkSerieVencimientoGuardar
(
@pProducto_Id varChar(25),
@pSerie varchar(25),
@pVencimiento qFecha,
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkSerieVencimiento 
	WHERE Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id) AND Serie = @pSerie AND Empresa_Id = @pEmpresa_Id))
BEGIN 
	UPDATE stkSerieVencimiento
	SET		Vencimiento = @pVencimiento,
		Empresa_Id = @pEmpresa_Id
	WHERE Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id) AND Serie = @pSerie AND Empresa_Id = @pEmpresa_Id
END 
ELSE 
BEGIN 
	INSERT INTO stkSerieVencimiento
	(
		Producto_Id,
		Serie,
		Vencimiento,
		Empresa_Id
	)
	VALUES 
	(
		dbo.FuncFKstkProductos(@pProducto_Id),
		@pSerie,
		@pVencimiento,
		@pEmpresa_Id
	)
END 

GO

DROP PROCEDURE stkSerieVencimientoDatos
GO
CREATE PROCEDURE stkSerieVencimientoDatos
(
@pProducto_Id varChar(25),
@pSerie varchar(25),
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 

SELECT stkProductos.Producto_Id, stkSerieVencimiento.Serie, stkSerieVencimiento.Vencimiento,
	stkSerieVencimiento.Empresa_Id
FROM stkSerieVencimiento 
INNER JOIN stkProductos  ON (stkProductos.stkProductos = stkSerieVencimiento.Producto_Id)
WHERE stkSerieVencimiento.Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id)
AND Serie = @pSerie
AND stkSerieVencimiento.Empresa_Id = @pEmpresa_Id
 
 RETURN @@Error 

GO

DROP PROCEDURE stkSerieVencimientoEliminar
GO
CREATE PROCEDURE stkSerieVencimientoEliminar
(
@pProducto_Id varchar(25),
@pSerie varchar(25),
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 

DELETE FROM stkSerieVencimiento 
WHERE Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id)
AND Serie = @pSerie
AND Empresa_Id = @pEmpresa_Id
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkSolicitudesCD.sql*/
DROP PROCEDURE stkSolicitudCDGuardar
GO
CREATE PROCEDURE stkSolicitudCDGuardar
(
    @pstkSolicitudCD bigint,
@pDepositoDestino varchar(15) = NULL,
@pFecha datetime = NULL,
@pEstado char,
@pPosteado SiNo,
@pUsuario_Id int,
@pObservaciones qMemo
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad bigint
IF (EXISTS (SELECT 1 FROM stkSolicitudCD WHERE stkSolicitudCD=@pstkSolicitudCD))
BEGIN 
	UPDATE stkSolicitudCD
	SET		@lIdentidad = stkSolicitudCD,
		DepositoDestino = dbo.FuncFKstkDepositos(@pDepositoDestino),
		Fecha = @pFecha,
		Estado=@pEstado,
		Posteado=@pPosteado,
		Usuario_Id=@pUsuario_Id,
		Observaciones=@pObservaciones
	WHERE stkSolicitudCD=@pstkSolicitudCD
END 
ELSE 
BEGIN 
	INSERT INTO stkSolicitudCD
	(
		DepositoDestino,
		Fecha,
		Estado,
		Posteado,
		Usuario_Id,
		Observaciones
	)
	VALUES 
	(
		dbo.FuncFKstkDepositos(@pDepositoDestino),
		@pFecha,
		@pEstado,
		@pPosteado,
		@pUsuario_Id,
		@pObservaciones
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as bigint) 
END 
Select @lIdentidad as RetVal 

GO


DROP PROCEDURE stkSolicitudCDDatos
GO
CREATE PROCEDURE stkSolicitudCDDatos
(
@pSegmento_Id varchar(25),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 
declare @pstkSolicitudCD int =(select stkSolicitudCD from stkSolicitudCDSegmento WHERE
Segmento_Id=dbo.FuncFKgenSegmentos(@pSegmento_Id) and Segmento1N=@pSegmento1N and Segmento2N=@pSegmento2N AND Segmento3N=@pSegmento3N and Segmento4N=@pSegmento4N AND
Segmento1C=@pSegmento1C and Segmento2C=@pSegmento2C and Segmento3C=@pSegmento3C and Segmento4C=@pSegmento4C and Empresa_Id=@pEmpresa_Id)

SELECT stkSolicitudCD.stkSolicitudCD, stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos, stkSolicitudCD.Fecha,
genSegmentos.Segmento_Id, stkSolicitudCDSegmento.Segmento1N, stkSolicitudCDSegmento.Segmento2N, stkSolicitudCDSegmento.Segmento3N, stkSolicitudCDSegmento.Segmento4N, 
stkSolicitudCDSegmento.Segmento1C, stkSolicitudCDSegmento.Segmento2C, stkSolicitudCDSegmento.Segmento3C, stkSolicitudCDSegmento.Segmento4C, Estado, stkSolicitudCD.Posteado, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres, Observaciones
FROM stkSolicitudCD 
LEFT JOIN stkDepositos  ON (stkDepositos.stkDepositos = stkSolicitudCD.DepositoDestino)
inner join stkSolicitudCDSegmento on stkSolicitudCDSegmento.stkSolicitudCD=stkSolicitudCD.stkSolicitudCD
inner join genSegmentos on genSegmentos.genSegmentos=stkSolicitudCDSegmento.Segmento_Id
inner join genUsuarios on genUsuarios.genUsuarios=stkSolicitudCD.Usuario_Id
WHERE (stkSolicitudCD.stkSolicitudCD = @pstkSolicitudCD)

select stkSolicitudCD,  stkSolicitudCDCuerpo.Renglon, stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProducto, stkDepositos.Deposito_Id as DepositoOrigen, stkDepositos.Descripcion as DescripcionDeposito,
stkSolicitudCDCuerpo.Observaciones, stkSolicitudCDCuerpo.Cantidad, CantidadPendiente, 0 as CantidadForm, stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionMedida from stkSolicitudCDCuerpo
inner join stkProductos on stkProductos.stkProductos=stkSolicitudCDCuerpo.Producto_Id
inner join stkDepositos on stkDepositos.stkDepositos=stkSolicitudCDCuerpo.DepositoOrigen
inner join stkUniMed on stkUniMed.stkUniMed=stkSolicitudCDCuerpo.Medida_Id
where stkSolicitudCDCuerpo.stkSolicitudCD=@pstkSolicitudCD 
RETURN @@Error 

GO

DROP PROCEDURE stkSolicitudCDEliminar
GO
CREATE PROCEDURE stkSolicitudCDEliminar
(
@pstkSolicitudCD bigint 
)
AS
SET NOCOUNT ON 

DELETE FROM stkSolicitudCD 
WHERE (stkSolicitudCD = @pstkSolicitudCD)
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkSolicitudesCDCuerpo.sql*/
DROP PROCEDURE stkSolicitudCDCuerpoGuardar
GO
CREATE PROCEDURE stkSolicitudCDCuerpoGuardar
(
@pstkSolicitudCD bigint,
@pRenglon Int ,
@pProducto_Id varchar(25) = NULL,
@pDepositoOrigen varchar(15) = NULL,
@pObservaciones varchar(max) = NULL,
@pCantidad qCantidadD8,
@pCantidadPendiente qCantidadD8,
@pMedida_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkSolicitudCDCuerpo WHERE (stkSolicitudCD = @pstkSolicitudCD and Renglon = @pRenglon)))
BEGIN 
	UPDATE stkSolicitudCDCuerpo
	SET		Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id),
		DepositoOrigen = dbo.FuncFKstkDepositos(@pDepositoOrigen),
		Observaciones = @pObservaciones,
		Cantidad = @pCantidad,
		CantidadPendiente = @pCantidadPendiente,
		Medida_Id = dbo.FuncFKstkUniMed(@pMedida_Id)
	WHERE (stkSolicitudCD = @pstkSolicitudCD and 
		Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO stkSolicitudCDCuerpo
	(
		stkSolicitudCD,
		Renglon,
		Producto_Id,
		DepositoOrigen,
		Observaciones,
		Cantidad,
		CantidadPendiente,
		Medida_Id
	)
	VALUES 
	(
		@pstkSolicitudCD,
		@pRenglon,
		dbo.FuncFKstkProductos(@pProducto_Id),
		dbo.FuncFKstkDepositos(@pDepositoOrigen),
		@pObservaciones,
		@pCantidad,
		@pCantidadPendiente,
		dbo.FuncFKstkUniMed(@pMedida_Id)
	)
END 

GO

DROP PROCEDURE stkSolicitudCDCuerpoEliminar
GO
CREATE PROCEDURE stkSolicitudCDCuerpoEliminar
(
@pstkSolicitudCD bigint ,
@pRenglon INT = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkSolicitudCDCuerpo 
WHERE 
	stkSolicitudCD = @pstkSolicitudCD AND 
	Renglon = ISNULL(@pRenglon, Renglon)
 
 RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkSolicitudesCDSegmentos.sql*/
DROP PROCEDURE stkSolicitudCDSegmentoGuardar
GO
CREATE PROCEDURE stkSolicitudCDSegmentoGuardar
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pstkSolicitudCD bigint, 
@pTieneAutomatico bit
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkSolicitudCDSegmento WHERE 
	(Empresa_Id = @pEmpresa_Id) AND 
	(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
	(Segmento1N = @pSegmento1N) AND 
	(Segmento2N = @pSegmento2N) AND 
	(Segmento3N = @pSegmento3N) AND 
	(Segmento4N = @pSegmento4N) AND 
	(Segmento1C = @pSegmento1C) AND 
	(Segmento2C = @pSegmento2C) AND 
	(Segmento3C = @pSegmento3C) AND 
	(Segmento4C = @pSegmento4C)))

BEGIN 
	UPDATE stkSolicitudCDSegmento
	SET	Empresa_Id = @pEmpresa_Id,
		stkSolicitudCD = @pstkSolicitudCD
	WHERE (Empresa_Id = @pEmpresa_Id) AND 
		(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
		(Segmento1N = @pSegmento1N) AND 
		(Segmento2N = @pSegmento2N) AND 
		(Segmento3N = @pSegmento3N) AND 
		(Segmento4N = @pSegmento4N) AND 
		(Segmento1C = @pSegmento1C) AND 
		(Segmento2C = @pSegmento2C) AND 
		(Segmento3C = @pSegmento3C) AND 
		(Segmento4C = @pSegmento4C)
END 
ELSE 
BEGIN 
	
	-- Averiguo el que sigue
	
	If (@pTieneAutomatico=1)
	BEGIN
		SET @pSegmento1N = (SELECT MAX(stkSolicitudCDSegmento.Segmento1N)+1 AS Segmento1N 
				FROM stkSolicitudCDSegmento 
					Where				
					stkSolicitudCDSegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) AND 
					stkSolicitudCDSegmento.Segmento2N = @pSegmento2N AND 
					stkSolicitudCDSegmento.Segmento3N = @pSegmento3N AND 
					stkSolicitudCDSegmento.Segmento4N = @pSegmento4N AND 
					stkSolicitudCDSegmento.Segmento1C = @pSegmento1C AND 
					stkSolicitudCDSegmento.Segmento2C = @pSegmento2C AND 
					stkSolicitudCDSegmento.Segmento3C = @pSegmento3C AND 
					stkSolicitudCDSegmento.Segmento4C = @pSegmento4C And
					stkSolicitudCDSegmento.Empresa_Id = @pEmpresa_Id)
		
		If @pSegmento1N Is Null
			SET @pSegmento1N = (SELECT genContadorSegmento.PrimerNumero AS Segmento1N 
				From genContadorSegmento Where
					genContadorSegmento.Empresa_Id = @pEmpresa_Id And
							(genContadorSegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
							genContadorSegmento.Segmento2N = @pSegmento2N AND 
							genContadorSegmento.Segmento3N = @pSegmento3N AND 
							genContadorSegmento.Segmento4N = @pSegmento4N AND 
							genContadorSegmento.Segmento1C = @pSegmento1C AND 
							genContadorSegmento.Segmento2C = @pSegmento2C AND 
							genContadorSegmento.Segmento3C = @pSegmento3C AND 
							genContadorSegmento.Segmento4C = @pSegmento4C
					)

		-- esto solo pasa si empieza en 1 esta prendido
			if @pSegmento1N is null or @pSegmento1N < 0
			begin
				set @pSegmento1N = 1
			end	
	END

	/* FM 08/06/2020 Corregir el BE para que no pase esto
	if (@pSegmento1N = 0)
		SET @pSegmento1N = 1
	*/
	
	INSERT INTO stkSolicitudCDSegmento
	(
		Empresa_Id,
		Segmento_Id,
		Segmento1N,
		Segmento2N,
		Segmento3N,
		Segmento4N,
		Segmento1C,
		Segmento2C,
		Segmento3C,
		Segmento4C,
		stkSolicitudCD
	)
	VALUES 
	(
		@pEmpresa_Id,
		dbo.FuncFKgenSegmentos(@pSegmento_Id),
		@pSegmento1N,
		@pSegmento2N,
		@pSegmento3N,
		@pSegmento4N,
		@pSegmento1C,
		@pSegmento2C,
		@pSegmento3C,
		@pSegmento4C,
		@pstkSolicitudCD
	)
	
END 
SELECT @pSegmento1N as RetVal

GO

DROP PROCEDURE stkSolicitudCDSegmentoEliminar
GO
CREATE PROCEDURE stkSolicitudCDSegmentoEliminar
(
@pSegmento_Id int = NULL,
@pSegmento1N int = NULL,
@pSegmento2N int = NULL,
@pSegmento3N int = NULL,
@pSegmento4N int = NULL,
@pSegmento1C varchar(20) = NULL,
@pSegmento2C varchar(20) = NULL,
@pSegmento3C varchar(20) = NULL,
@pSegmento4C varchar(20) = NULL,
@pEmpresa_Id varchar(15)
)
AS
SET NOCOUNT ON 

DELETE FROM stkSolicitudCDSegmento 
WHERE (Segmento_Id = ISNULL(@pSegmento_Id, Segmento_Id))
AND (Segmento1N = ISNULL(@pSegmento1N, Segmento1N))
AND (Segmento2N = ISNULL(@pSegmento2N, Segmento2N))
AND (Segmento3N = ISNULL(@pSegmento3N, Segmento3N))
AND (Segmento4N = ISNULL(@pSegmento4N, Segmento4N))
AND (Segmento1C = ISNULL(@pSegmento1C, Segmento1C))
AND (Segmento2C = ISNULL(@pSegmento2C, Segmento2C))
AND (Segmento3C = ISNULL(@pSegmento3C, Segmento3C))
AND (Segmento4C = ISNULL(@pSegmento4C, Segmento4C))
AND (Empresa_Id = dbo.FuncFKgenEmpresas(@pEmpresa_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkSubTipoMov.sql*/
DROP PROCEDURE stkSubTipoMovGuardar
GO
CREATE PROCEDURE stkSubTipoMovGuardar
(
@pSubTipoMov_Id varchar(5),
@pDescripcion varchar(50),
@pConsumo bit,
@pCantCopias smallint,
@pTipoMov varchar(2),
@pReporte_Id VarChar(50)
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM stkSubTipoMov WHERE (SubTipoMov_Id = @pSubTipoMov_Id)))
BEGIN 
	UPDATE stkSubTipoMov
	SET		
		Descripcion = @pDescripcion,
		Consumo = @pConsumo,
		CantCopias = @pCantCopias,
		TipoMov = @pTipoMov, 
		Reporte_Id = dbo.FuncFKgenReportes(@pReporte_Id)
	WHERE (SubTipoMov_Id = @pSubTipoMov_Id)
END 
ELSE 
BEGIN 
	INSERT INTO stkSubTipoMov
	(
		SubTipoMov_Id,
		Descripcion,
		Consumo,
		CantCopias,
		TipoMov, 
		Reporte_Id 
	)
	VALUES 
	(
		@pSubTipoMov_Id,
		@pDescripcion,
		@pConsumo,
		@pCantCopias,
		@pTipoMov,
		dbo.FuncFKgenReportes(@pReporte_Id)
	)
	
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE stkSubTipoMovDatos
GO
CREATE PROCEDURE stkSubTipoMovDatos
(
@pSubTipoMov_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT stkSubTipoMov.SubTipoMov_Id, stkSubTipoMov.Descripcion, stkSubTipoMov.Consumo,
	stkSubTipoMov.CantCopias, stkTiposMov.TipoMov, stkTiposMov.Descripcion as DescripcionTiposMov, 
	genReportes.Reporte_Id, genReportes.Titulo as DescripcionReporte
FROM stkSubTipoMov 
INNER JOIN stkTiposMov  ON 
	stkTiposMov.Tipomov = stkSubTipoMov.TipoMov
LEFT OUTER JOIN genReportes on
genReportes.genReportes = stkSubTipoMov.Reporte_Id
WHERE SubTipoMov_Id = @pSubTipoMov_Id


 
 RETURN @@Error 


GO

DROP PROCEDURE stkSubTipoMovEliminar
GO
CREATE PROCEDURE stkSubTipoMovEliminar
(
@pSubTipoMov_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkSubTipoMov 
WHERE (SubTipoMov_Id = @pSubTipoMov_Id)
 
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkTipos.sql*/
DROP PROCEDURE stkTiposGuardar
GO
CREATE PROCEDURE stkTiposGuardar
(
@pTipo_Id varchar(5),
@pTipo_Id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(50),
@pInactivo bit,
@pUsuario_Id int,
@pPosteado bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM stkTipos WHERE (Tipo_Id = @pTipo_Id)))
BEGIN 
	UPDATE stkTipos
	SET		@lIdentidad = stkTipos,
		Tipo_Id = @pTipo_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (Tipo_Id = @pTipo_Id)
END 
ELSE 
BEGIN 
	INSERT INTO stkTipos
	(
		Tipo_Id,
		Empresa_Id,
		Descripcion,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pTipo_Id,
		@pEmpresa_Id,
		@pDescripcion,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE stkTiposDatos
GO
CREATE PROCEDURE stkTiposDatos
(
@pTipo_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT stkTipos.stkTipos, stkTipos.Tipo_Id, stkTipos.Empresa_Id, Cast( Case When stkTipos.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	stkTipos.Descripcion, stkTipos.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
	stkTipos.Posteado
FROM stkTipos 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = stkTipos.Usuario_Id)
WHERE (Tipo_Id = @pTipo_Id)
 


  Declare @pidentity bigint= dbo.FuncFKstkTipos(@pTipo_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'stkTipos'
 RETURN @@Error 

GO

DROP PROCEDURE stkTiposEliminar
GO
CREATE PROCEDURE stkTiposEliminar
(
@pTipo_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkTipos 
WHERE (Tipo_Id = @pTipo_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKstkTipos
GO

CREATE FUNCTION FuncFKstkTipos
(
@pTipo_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = stkTipos FROM stkTipos WHERE 
	Tipo_Id = @pTipo_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkTiposMov.sql*/
DROP PROCEDURE stkTiposMovGuardar
GO
CREATE PROCEDURE stkTiposMovGuardar
(
@pTipoMov varchar(2),
@pDescripcion varchar(50),
@pSigno smallint
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkTiposMov WHERE (TipoMov = @pTipoMov)))
BEGIN 
	UPDATE stkTiposMov
	SET		Descripcion = @pDescripcion,
		Signo = @pSigno
	WHERE (TipoMov = @pTipoMov)
END 
ELSE 
BEGIN 
	INSERT INTO stkTiposMov
	(
		TipoMov,
		Descripcion,
		Signo
	)
	VALUES 
	(
		@pTipoMov,
		@pDescripcion,
		@pSigno
	)
END 

GO

DROP PROCEDURE stkTiposMovDatos
GO
CREATE PROCEDURE stkTiposMovDatos
(
@pTipoMov varchar(2)
)
AS
SET NOCOUNT ON 

SELECT stkTiposMov.TipoMov, stkTiposMov.Descripcion, stkTiposMov.Signo
FROM stkTiposMov 
WHERE (TipoMov = @pTipoMov)
 
 RETURN @@Error 

GO

DROP PROCEDURE stkTiposMovEliminar
GO
CREATE PROCEDURE stkTiposMovEliminar
(
@pTipoMov varchar(2) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkTiposMov 
WHERE (TipoMov = ISNULL(@pTipoMov, TipoMov))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkUbiAlmacenDefecto.sql*/
DROP PROCEDURE stkUbiAlmacenDefectoGuardar
GO
CREATE PROCEDURE stkUbiAlmacenDefectoGuardar
(
@pEmpresa_Id Int,
@pDeposito_Id VarChar(5),
@pProducto_Id varchar(25),
@pUbicacion_Id varchar(25),
@pUsuario_Id int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkUbiAlmacenDefecto WHERE Empresa_Id = @pEmpresa_Id and  
		Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id) AND 
		Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id)))
BEGIN 
	UPDATE stkUbiAlmacenDefecto
	SET		Ubicacion_Id = dbo.FuncFKstkUbicaciones(@pUbicacion_Id),
			Usuario_Id = @pUsuario_Id
	WHERE Empresa_Id = @pEmpresa_Id and 
	(Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id)) AND 
			(Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id))
END 
ELSE 
BEGIN 
	INSERT INTO stkUbiAlmacenDefecto
	(
		Empresa_Id,
		Deposito_Id,
		Producto_Id,
		Ubicacion_Id,
		Usuario_Id
	)
	VALUES 
	(
		@pEmpresa_Id,
		dbo.FuncFKstkDepositos(@pDeposito_Id),
		dbo.FuncFKstkProductos(@pProducto_Id),
		dbo.FuncFKstkUbicaciones(@pUbicacion_Id),
		@pUsuario_Id
	)
END 

GO

DROP PROCEDURE stkUbiAlmacenDefectoDatos
GO
CREATE PROCEDURE stkUbiAlmacenDefectoDatos
(
@pEmpresa_Id Int,
@pDeposito_Id VarChar(5),
@pProducto_Id VarChar(25) = null
)
AS
SET NOCOUNT ON 

SELECT stkDepositos.Deposito_Id, stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos,
		stkUbicaciones.Ubicacion_Id
FROM stkUbiAlmacenDefecto 
INNER JOIN stkDepositos  ON (stkDepositos.stkDepositos = stkUbiAlmacenDefecto.Deposito_Id)
INNER JOIN stkProductos  ON (stkProductos.stkProductos = stkUbiAlmacenDefecto.Producto_Id)
INNER JOIN stkUbicaciones ON (stkUbicaciones.stkUbicaciones = stkUbiAlmacenDefecto.Ubicacion_Id)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = stkUbiAlmacenDefecto.Usuario_Id)
WHERE 
stkUbiAlmacenDefecto.Empresa_Id = @pEmpresa_Id and 
(stkDepositos.Deposito_Id = @pDeposito_Id)
AND (stkProductos.Producto_Id =ISNULL(@pProducto_Id,stkProductos.Producto_Id))
 
RETURN @@Error 

GO

DROP PROCEDURE stkUbiAlmacenDefectoEliminar
GO
CREATE PROCEDURE stkUbiAlmacenDefectoEliminar
(
@pEmpresa_Id Int,
@pDeposito_Id varchar(15),
@pProducto_Id varchar(25) = null
)
AS
SET NOCOUNT ON 

DELETE FROM stkUbiAlmacenDefecto 
WHERE 
Empresa_Id = @pEmpresa_Id and 
Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id)
AND ( Producto_Id IS NULL OR (Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id)))
 
RETURN @@Error 

GO

DROP PROCEDURE stkUbiAlmacenDatos
GO
CREATE PROCEDURE stkUbiAlmacenDatos
(
	@pEmpresa_Id Int,
	@pDeposito_Id VarChar(5)
)
AS

SELECT stkDepositos.Deposito_Id, stkDepositos.Descripcion,  ' ' ParaPegar
From stkDepositos 
WHERE
	stkDepositos.Deposito_Id= @pDeposito_Id


SELECT stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos,
		stkUbicaciones.Ubicacion_Id
FROM stkUbiAlmacenDefecto 
INNER JOIN stkDepositos  ON (stkDepositos.stkDepositos = stkUbiAlmacenDefecto.Deposito_Id)
INNER JOIN stkProductos  ON (stkProductos.stkProductos = stkUbiAlmacenDefecto.Producto_Id)
INNER JOIN stkUbicaciones ON (stkUbicaciones.stkUbicaciones = stkUbiAlmacenDefecto.Ubicacion_Id)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = stkUbiAlmacenDefecto.Usuario_Id)
WHERE 
stkUbiAlmacenDefecto.Empresa_Id = @pEmpresa_Id and 
(stkDepositos.Deposito_Id = @pDeposito_Id)

ORDER BY 1
GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkUbicaciones.sql*/
DROP PROCEDURE stkUbicacionesGuardar
GO
CREATE PROCEDURE stkUbicacionesGuardar
(
@pUbicacion_Id varchar(25),
@pUbicacion_Id_Nuevo varchar(25),
@pCapacidad QCantidad,
@pUsuario_Id int = NULL,
@pInactivo Sino
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM stkUbicaciones WHERE (Ubicacion_Id = @pUbicacion_Id)))
BEGIN 
	UPDATE stkUbicaciones
	SET		@lIdentidad = stkUbicaciones,
		Ubicacion_Id = @pUbicacion_Id_Nuevo,
		Capacidad = @pCapacidad,
		Usuario_Id = @pUsuario_Id,
		Inactivo = @pInactivo
	WHERE (Ubicacion_Id = @pUbicacion_Id)
END 
ELSE 
BEGIN 
	INSERT INTO stkUbicaciones
	(
		Ubicacion_Id,
		Capacidad,
		Usuario_Id,
		Inactivo
	)
	VALUES 
	(
		@pUbicacion_Id,
		@pCapacidad,
		@pUsuario_Id,
		@pInactivo
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE stkUbicacionesDatos
GO
CREATE PROCEDURE stkUbicacionesDatos
(
@pUbicacion_Id varchar(25)
)
AS
SET NOCOUNT ON 

SELECT stkUbicaciones.stkUbicaciones, stkUbicaciones.Ubicacion_Id, stkUbicaciones.Capacidad, genUsuarios.Usuario_Id,
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario, stkUbicaciones.Inactivo
FROM stkUbicaciones 
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = stkUbicaciones.Usuario_Id)
WHERE (Ubicacion_Id = @pUbicacion_Id)
 


  Declare @pidentity bigint= dbo.FuncFKstkUbicaciones(@pUbicacion_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'stkUbicaciones'
 RETURN @@Error 

GO

DROP PROCEDURE stkUbicacionesEliminar
GO
CREATE PROCEDURE stkUbicacionesEliminar
(
@pUbicacion_Id varchar(25) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkUbicaciones 
WHERE (Ubicacion_Id = @pUbicacion_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKstkUbicaciones
GO

CREATE FUNCTION FuncFKstkUbicaciones
(
@pUbicacion_Id varchar (25)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = stkUbicaciones FROM stkUbicaciones WHERE 
	Ubicacion_Id = @pUbicacion_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkUltimaSalidaDespaDatos.sql*/
-- exec stkUltimaSalidaDespaDatos 'P3240193','03',1


Drop procedure stkUltimaSalidaDespaDatos
GO
create procedure stkUltimaSalidaDespaDatos(
	@pProducto_Id VarChar(25),
	@pDeposito_Id VarChar(5),
	@pEmpresa_Id INT)
AS

select TOP 1 stkMoviCabe.Signo , CASE WHEN stkDepositos.Deposito_Id = @pDeposito_Id THEN 0 ELSE 1 END EsDepo,
	conAsientos.FechaRegistro, comDespachos.Despacho_Id, stkProductos.Producto_Id , stkDepositos.Deposito_Id
from 
	stkMoviDespa 
		INNER JOIN comDespachos ON  comDespachos.comDespachos =stkMoviDespa.Despacho_Id
		inner join stkMoviCabe ON stkMoviCabe.stkMoviCabe =stkMoviDespa.stkMoviCabe
		inner join stkMoviCuerpo ON  stkMoviCuerpo.stkMoviCabe =stkMoviDespa.stkMoviCabe and 
				stkMoviCuerpo.Renglon =stkMoviDespa.Renglon
		inner join conAsientos ON conAsientos.conAsientos =stkMoviDespa.stkMoviCabe
		INNER JOIN stkProductos ON  stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
		INNER JOIN stkDepositos ON stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id
		WHERE
			stkProductos.Producto_Id = @pProducto_Id and 
			conAsientos.Empresa_Id = @pEmpresa_Id and 
			conAsientos.Anulado = 0 and 
			conAsientos.Posteado = 1 

ORDER BY 1,2,3 DESC
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\stkUniMed.sql*/
DROP PROCEDURE stkUniMedGuardar
GO
CREATE PROCEDURE stkUniMedGuardar
(
@pMedida_id varchar(5),
@pMedida_id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(35),
@pDecimales int,
@pMascara varchar(16),
@pCodigoFiscal Varchar(3) = NULL,
@pInactivo bit,
@pUsuario_Id int,
@pPosteado bit, 
@pUniExpor VarChar(5)
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM stkUniMed WHERE (Medida_id = @pMedida_id)))
BEGIN 
	UPDATE stkUniMed
	SET		@lIdentidad = stkUniMed,
		Medida_id = @pMedida_id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Decimales = @pDecimales,
		Mascara = @pMascara,
		CodigoFiscal = @pCodigoFiscal,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado, 
		UniExpor = @pUniExpor
	WHERE (Medida_id = @pMedida_id)
END 
ELSE 
BEGIN 
	INSERT INTO stkUniMed
	(
		Medida_id,
		Empresa_Id,
		Descripcion,
		Decimales,
		Mascara,
		CodigoFiscal,
		Inactivo,
		Usuario_Id,
		Posteado,
		UniExpor
	)
	VALUES 
	(
		@pMedida_id,
		@pEmpresa_Id,
		@pDescripcion,
		@pDecimales,
		@pMascara,
		@pCodigoFiscal,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado, 
		@pUniExpor
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE stkUniMedDatos
GO
CREATE PROCEDURE stkUniMedDatos
(
@pMedida_id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT stkUniMed.stkUniMed, stkUniMed.Medida_id, stkUniMed.Empresa_Id, Cast( Case When stkUniMed.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	stkUniMed.Descripcion, stkUniMed.Decimales, stkUniMed.Mascara, stkUniMed.CodigoFiscal,
		genEntidadesBasicasValor.Descripcion as DescripcionFiscal,
	stkUniMed.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, 
	stkUniMed.Posteado, stkUniMed.UniExpor, genEntidadesBasicasValorExp.Descripcion as DescripcionUniExpor
FROM stkUniMed
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = stkUniMed.Usuario_Id)
CROSS JOIN genInstalacion
LEFT OUTER JOIN genEntidadesBasicasValor ON
	genEntidadesBasicasValor.Entidad_Id = 1 AND 
	genEntidadesBasicasValor.Dominio_Id = genInstalacion.Dominio_Id AND 
	genEntidadesBasicasValor.Clave = stkUniMed.CodigoFiscal 
LEFT OUTER JOIN genEntidadesBasicasValor genEntidadesBasicasValorExp  ON
	genEntidadesBasicasValorExp.Entidad_Id = 2 AND 
	genEntidadesBasicasValorExp.Dominio_Id = genInstalacion.Dominio_Id AND 
	genEntidadesBasicasValorExp.Clave = stkUniMed.UniExpor
WHERE (stkUniMed.Medida_id = @pMedida_id)
 
 
 

 


  Declare @pidentity bigint= dbo.FuncFKstkUniMed(@pMedida_id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'stkUniMed'
 RETURN @@Error 

GO

DROP PROCEDURE stkUniMedEliminar
GO
CREATE PROCEDURE stkUniMedEliminar
(
@pMedida_id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM stkUniMed 
WHERE (Medida_id = @pMedida_id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKstkUniMed
GO

CREATE FUNCTION FuncFKstkUniMed
(
@pMedida_id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = stkUniMed FROM stkUniMed WHERE 
	Medida_id = @pMedida_id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\StockCierre.sql*/
--SELECT * FROM vstkProductosCostoCierre


-- stockInicioCierre '20180430','20180331', 1
-- stockMovimientosCierre '20180531','20180630',1
-- SELECT * FROM stkmovicuerpo where stkmovicabe =20497
-- SELECT * FROM vconmovcont where conasientos =20497
-- stockMovCuerpoCierre 20497
-- stockActuAsientoCierre 20497
---select * from vconMovCont where conAsientos = 20497 
-- select * from stkMoviReva



DROP Procedure StockCerrar
GO
CREATE Procedure StockCerrar
(
@Empresa_Id Int
)
as

SELECT FechaCierreStock as UltimoCierre, 
conPeriodos.Fecha_Hasta as ProximoCierre,
FechaCalculoStock
FROM genEmpresas 
INNER JOIN conPeriodos on
genEmpresas.genEmpresas = conPeriodos.Empresa_Id and 
DATEADD(dd,1,FechaCierreStock) between conPeriodos.Fecha_Desde And conPeriodos.Fecha_Hasta
Where
	genEmpresas.genEmpresas = @Empresa_Id

GO


DROP PROCEDURE stkAsiCierreDatosCierre
GO
CREATE PROCEDURE stkAsiCierreDatosCierre
(
@pFecha DateTime, 
@Empresa_Id Int
)
AS
SET NOCOUNT ON 

SELECT @pFecha as Fecha 



SELECT conAsientos.conAsientos Asiento_Id , conAsientos.Empresa_Id, conAsientos.Fecha, 
	conAsientos.Anulado, genMonedas.Moneda_Id, 
	genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C,
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, 
	genSucursalesEmpr.Sucursal, disFormularios.Formulario_Id
FROM conAsientos INNER JOIN genMonedas  ON 
genMonedas.genMonedas = conAsientos.Moneda_Id
inner join genAsiSegmentos ON
genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
inner join genSegmentos ON
genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
INNER JOIN genSucursalesEmpr ON 
genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
inner join disFormularios ON 
disFormularios.disFormularios = conAsientos.Formulario_Id

WHERE conAsientos.Fecha= @pFecha  and 
conAsientos.Formulario_Id = dbo.FuncFKdisFormularios('frmStockCerrar') and
conAsientos.Anulado = 0 and 
conAsientos.Empresa_Id = @Empresa_Id

 
RETURN @@Error 

GO

DROP PROCEDURE stockInicioCierre
GO

CREATE PROCEDURE stockInicioCierre(@FechaCierre Datetime, 
	@FechaCierreAnt DateTime, @Empresa_Id INT)
AS

-- BORRO EL CIERRE ACTUAL

DELETE FROM stkProductosCostoCierre where Fecha = @FechaCierre  AND Empresa_Id = @Empresa_Id
DELETE FROM stkProductosCostoCierreSucursal where Fecha = @FechaCierre  AND Empresa_Id = @Empresa_Id

Update conAsientos set Anulado = 1
Where
Exists(select 1 From stkMoviCabe , stkMoviCRevaluo, conAsientos conAsientos1
Where
	stkMoviCabe.stkMoviCabe = conAsientos.conAsientos and 
	stkMoviCRevaluo.stkMoviCabeReva = stkMoviCabe.stkMoviCabe and 
	conAsientos1.conasientos = stkMoviCRevaluo.conAsientos and 
	conAsientos1.Anulado = 1) and 
	conAsientos.Anulado = 0 



insert into stkProductosCostoCierre(Producto_Id, Empresa_Id, Fecha, Costo)
Select Producto_Id, Empresa_Id, @FechaCierre, Costo 
from stkProductosCostoCierre
Where
	stkProductosCostoCierre.Empresa_Id =@Empresa_Id and 
	stkProductosCostoCierre.Fecha = @FechaCierreAnt

-- SI NO ESTA EN ESTA TABLA ES PORQUE EL PRODUCTO ES NUEVO CALCULO EL MOVIMIENTO Y COMPLETO

insert into stkProductosCostoCierre(Producto_Id, Empresa_Id, Fecha, Costo)
SELECT stkproductos.stkProductos, @Empresa_Id, @FechaCierre, 
	(SUM(stkMoviCuerpo.Cantidad * stkMoviCuerpo.CostoUnitario* stkMoviCabe.Signo) +
	ISNULL((select sum(stkmovicuerpoReva.importeAjuste) 
		from stkmovicuerpoReva inner join conAsientos ON
			stkmovicuerpoReva.stkMoviCabe = conAsientos.conAsientos AND 
			stkmovicuerpoReva.Producto_Id = stkProductos.stkProductos
			Where
			conAsientos.Empresa_Id = @Empresa_Id and 
			conAsientos.Anulado = 0 and 
			conAsientos.Fecha <= @FechaCierreAnt ),0))
	/ SUM(stkMoviCuerpo.Cantidad * stkMoviCabe.Signo) as COSTO

FROM stkMoviCabe INNER JOIN stkMoviCuerpo ON
stkMoviCabe.stkMoviCabe = stkMoviCuerpo.stkMoviCabe 
INNER JOIN conAsientos ON 
stkMoviCabe.stkMoviCabe = conAsientos.conAsientos
INNER JOIN stkProductos ON
stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
inner join stkDepositos ON
stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id

Where
	stkDepositos.Consignacion = 0 and 
	stkProductos.Clase in ('-','E') AND
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Anulado = 0 and 
	conAsientos.Fecha <= @FechaCierreAnt and 
	not exists(Select 1 from stkProductosCostoCierre Where
		stkProductosCostoCierre.Empresa_Id = @Empresa_Id and 
		stkProductosCostoCierre.Fecha = @FechaCierreAnt and 
		stkProductosCostoCierre.Producto_Id = stkProductos.stkProductos)
GROUP BY stkproductos.stkProductos
having SUM(stkMoviCuerpo.Cantidad * stkMoviCabe.Signo)<> 0

insert into stkProductosCostoCierreSucursal(Sucursal, Producto_Id, Empresa_Id, Fecha, Costo)
Select Sucursal, Producto_Id, Empresa_Id, @FechaCierre, Costo 
from stkProductosCostoCierreSucursal
Where
	stkProductosCostoCierreSucursal.Empresa_Id =@Empresa_Id and 
	stkProductosCostoCierreSucursal.Fecha = @FechaCierreAnt




insert into stkProductosCostoCierreSucursal(Sucursal, Producto_Id, Empresa_Id, Fecha, Costo)
SELECT conAsientos.Sucursal, stkproductos.stkProductos, @Empresa_Id, @FechaCierre, 
	(SUM(stkMoviCuerpo.Cantidad * stkMoviCuerpo.CostoUnitario* stkMoviCabe.Signo) +
	ISNULL((select sum(stkmovicuerpoReva.importeAjuste) 
		from stkmovicuerpoReva inner join conAsientos ON
			stkmovicuerpoReva.stkMoviCabe = conAsientos.conAsientos AND 
			stkmovicuerpoReva.Producto_Id = stkProductos.stkProductos
			Where
			conAsientos.Empresa_Id = @Empresa_Id and 
			conAsientos.Anulado = 0 and 
			conAsientos.Fecha <= @FechaCierreAnt ),0))
	/ SUM(stkMoviCuerpo.Cantidad * stkMoviCabe.Signo) as COSTO

FROM stkMoviCabe INNER JOIN stkMoviCuerpo ON
stkMoviCabe.stkMoviCabe = stkMoviCuerpo.stkMoviCabe 
INNER JOIN conAsientos ON 
stkMoviCabe.stkMoviCabe = conAsientos.conAsientos
INNER JOIN stkProductos ON
stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
inner join stkDepositos ON
stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id
Where
	stkDepositos.Consignacion = 0 and 
	stkProductos.Clase in ('-','E') AND
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Anulado = 0 and 
	conAsientos.Fecha <= @FechaCierreAnt and 
	not exists(Select 1 from stkProductosCostoCierreSucursal Where
		stkProductosCostoCierreSucursal.Sucursal = conAsientos.Sucursal and
		stkProductosCostoCierreSucursal.Empresa_Id = @Empresa_Id and 
		stkProductosCostoCierreSucursal.Fecha = @FechaCierreAnt and 
		stkProductosCostoCierreSucursal.Producto_Id = stkProductos.stkProductos)
GROUP BY stkproductos.stkProductos, conAsientos.Sucursal
having SUM(stkMoviCuerpo.Cantidad * stkMoviCabe.Signo)<> 0



GO


DROP PROCEDURE stockMovimientosCierre
GO
-- stockMovimientosCierre '20190101','20190131',1

CREATE PROCEDURE stockMovimientosCierre(
@FechaCierreAnt Datetime,
@FechaCierre Datetime,
 @Empresa_Id INT)
AS

SELECT conAsientos.Fecha, conAsientos.FechaRegistro,
	stkMoviCabe.stkMoviCabe, stkMoviCabe.SubTipoMov_Id,
	stkMoviCabe.ModificaCosto, genMonedas.Moneda_Id, 
	conAsientos.Cambio,conAsientos.CambioMonedaOriginal,
	stkmovicrevaluo.stkmoviCabeReva, genSucursalesEmpr.Sucursal, 
	disFormularios.Formulario_Id
FROM stkMoviCabe INNER JOIN conAsientos ON 
stkMoviCabe.stkMoviCabe = conAsientos.conAsientos
INNER JOIN genMonedas ON
genMonedas.genMonedas = conAsientos.Moneda_Id
LEFT JOIN stkmovicrevaluo ON
stkmovicrevaluo.conAsientos = stkMoviCabe.stkMoviCabe
INNER JOIN genSucursalesEmpr ON
genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
INNER JOIN disFormularios ON
disFormularios.disFormularios = conAsientos.Formulario_Id
Where
	stkMoviCabe.SubTipoMov_Id != 'RV' AND  
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Anulado = 0 and 
	conAsientos.Fecha between @FechaCierreAnt and @FechaCierre
order by 1,2,3

GO
-- stockMovCuerpoCierre 443702
DROP PROCEDURE stockMovCuerpoCierre
GO

CREATE PROCEDURE stockMovCuerpoCierre(@StkMoviCabe bigint)
AS

SELECT stkMoviCuerpo.Renglon, stkMoviCuerpo.Producto_Id as stkProductos,  
	stkProductos.Producto_Id, 
	stkMoviCuerpo.CostoUnitario , stkMoviCuerpo.Cantidad* stkMoviCabe.Signo AS Cantidad, 
	stkMoviCuerpo.PrecioOriginal,
	stkMoviCuerpo.conRenglonDebe, stkMoviCuerpo.conRenglonHaber, 
	conCuentas.Cuenta_Id as CtaAjuInventario, 
	CtaCompra.Cuenta_Id as CtaCompra, 
	stkDepositos.Deposito_Id, conCentro1.Centro1_Id, conCentro2.Centro2_Id
FROM stkMoviCuerpo INNER JOIN stkProductos ON 
stkMoviCuerpo.Producto_Id = stkProductos.stkProductos
INNER JOIN stkMoviCabe ON  stkMoviCabe.stkMoviCabe = stkMoviCuerpo.stkMoviCabe
LEFT JOIN concuentas ON 
concuentas.concuentas = stkProductos.CtaAjuInventario
inner join  conCuentas as CtaCompra ON 
CtaCompra.conCuentas = stkProductos.CtaCompra
LEFT JOIN stkDepositos ON stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id
LEFT JOIN conCentro1 ON conCentro1.conCentro1 = stkDepositos.Centro1_Id
LEFT JOIN conCentro2 ON conCentro2.conCentro2 = stkDepositos.Centro2_Id
Where
	stkMoviCuerpo.stkMoviCabe = @StkMoviCabe
order by 1

GO


DROP PROCEDURE stockActuAsientoCierre
GO

CREATE PROCEDURE stockActuAsientoCierre(@StkMoviCabe bigint)
AS
SET NOCOUNT ON

UPDATE conMovCont Set Importe =isnull((select SUM(ROUND(stkmoviCuerpo.Cantidad*stkMoviCuerpo.CostoUnitario,2))
	from stkMoviCuerpo 
		inner join stkProductos ON stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
		WHERE
			stkProductos.Clase IN ('E','-') AND 
			stkMoviCuerpo.stkMoviCabe = conMovCont.conAsientos AND 
			stkMoviCuerpo.conRenglonDebe =conMovCont.Renglon),0), 
	ImporteMonedaOriginal = isnull((select SUM(ROUND(stkmoviCuerpo.Cantidad*stkMoviCuerpo.CostoUnitario,2))
	from stkMoviCuerpo 
		inner join stkProductos ON stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
		WHERE
			stkProductos.Clase IN ('E','-') AND 
			stkMoviCuerpo.stkMoviCabe = conMovCont.conAsientos AND 
			stkMoviCuerpo.conRenglonDebe =conMovCont.Renglon),0)
Where
	exists(select 1 from stkMoviCuerpo where
			stkMoviCuerpo.stkMoviCabe = conMovCont.conAsientos AND 
			stkMoviCuerpo.conRenglonDebe =conMovCont.Renglon) and 
conMovCont.conAsientos = @StkMoviCabe

UPDATE conMovCont Set Importe = isnull((select SUM(ROUND(stkmoviCuerpo.Cantidad*stkMoviCuerpo.CostoUnitario,2))
	from stkMoviCuerpo 
		inner join stkProductos ON stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
		WHERE
			stkProductos.Clase IN ('E','-') AND 
			stkMoviCuerpo.stkMoviCabe = conMovCont.conAsientos AND 
			stkMoviCuerpo.conRenglonHaber =conMovCont.Renglon),0), 
	ImporteMonedaOriginal = isnull((select SUM(ROUND(stkmoviCuerpo.Cantidad*stkMoviCuerpo.CostoUnitario,2))
	from stkMoviCuerpo 
	inner join stkProductos ON stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
		WHERE
			stkProductos.Clase IN ('E','-') AND 
			stkMoviCuerpo.stkMoviCabe = conMovCont.conAsientos AND 
			stkMoviCuerpo.conRenglonHaber =conMovCont.Renglon),0)
Where
	exists(select 1 from stkMoviCuerpo where
			stkMoviCuerpo.stkMoviCabe = conMovCont.conAsientos AND 
			stkMoviCuerpo.conRenglonHaber =conMovCont.Renglon) and 
conMovCont.conAsientos = @StkMoviCabe

GO


DROP PROCEDURE stockActuCostoCierre
GO

CREATE PROCEDURE stockActuCostoCierre(@StkMoviCabe bigint, @FechaCierre DateTime, @Empresa_id Int)
AS
SET NOCOUNT ON

UPDATE stkMoviCuerpo Set CostoUnitario = stkProductosCostoCierre.Costo
From stkProductosCostoCierre
Where
	stkProductosCostoCierre.Producto_Id = stkMoviCuerpo.Producto_Id AND 
	stkProductosCostoCierre.Empresa_Id = @Empresa_id AND
	stkProductosCostoCierre.Fecha = @FechaCierre AND
	stkMoviCuerpo.stkMoviCabe =@StkMoviCabe
GO


DROP PROCEDURE stockActuCostoCierreSucursal
GO

CREATE PROCEDURE stockActuCostoCierreSucursal(@StkMoviCabe bigint, @FechaCierre DateTime, @Empresa_id Int)
AS
SET NOCOUNT ON

UPDATE stkMoviCuerpo Set CostoUnitario = stkProductosCostoCierreSucursal.Costo
From stkProductosCostoCierreSucursal, conAsientos
Where
	conAsientos.conAsientos = stkMoviCuerpo.stkMoviCabe and
	stkProductosCostoCierreSucursal.Producto_Id = stkMoviCuerpo.Producto_Id AND 
	stkProductosCostoCierreSucursal.Empresa_Id = @Empresa_id AND
	stkProductosCostoCierreSucursal.Fecha = @FechaCierre AND
	stkProductosCostoCierreSucursal.Sucursal = conAsientos.Sucursal and 
	stkMoviCuerpo.stkMoviCabe =@StkMoviCabe

-- SI no existe lo toma de stkProductosCostosSucursal
UPDATE stkMoviCuerpo Set CostoUnitario = stkProductosCostosSucursal.CostoPromPond
From stkProductosCostosSucursal, conAsientos
Where
	conAsientos.conAsientos = stkMoviCuerpo.stkMoviCabe and
	stkProductosCostosSucursal.Producto_Id = stkMoviCuerpo.Producto_Id AND 
	stkProductosCostosSucursal.Empresa_Id = @Empresa_id AND
	stkProductosCostosSucursal.Sucursal = conAsientos.Sucursal and 
	stkMoviCuerpo.stkMoviCabe =@StkMoviCabe and 
	not exists(select 1 from stkProductosCostoCierreSucursal where
		stkProductosCostoCierreSucursal.Producto_Id = stkMoviCuerpo.Producto_Id AND 
		stkProductosCostoCierreSucursal.Empresa_Id = @Empresa_id AND
		stkProductosCostoCierreSucursal.Fecha = @FechaCierre AND
		stkProductosCostoCierreSucursal.Sucursal = conAsientos.Sucursal )

-- SI no existe lo toma de StkProductos
UPDATE stkMoviCuerpo Set CostoUnitario = stkProductos.CostoPromPond
From stkProductos, conAsientos
Where
	conAsientos.conAsientos = stkMoviCuerpo.stkMoviCabe and
	stkProductos.stkProductos = stkMoviCuerpo.Producto_Id and 
	stkMoviCuerpo.stkMoviCabe = @StkMoviCabe AND 
	not exists(select 1 from stkProductosCostoCierreSucursal where
		stkProductosCostoCierreSucursal.Producto_Id = stkMoviCuerpo.Producto_Id AND 
		stkProductosCostoCierreSucursal.Empresa_Id = @Empresa_id AND
		stkProductosCostoCierreSucursal.Fecha = @FechaCierre AND
		stkProductosCostoCierreSucursal.Sucursal = conAsientos.Sucursal ) and
	not exists(select 1 from stkProductosCostosSucursal
		WHERE
		stkProductosCostosSucursal.Producto_Id = stkMoviCuerpo.Producto_Id AND 
		stkProductosCostosSucursal.Empresa_Id = @Empresa_id AND
		stkProductosCostosSucursal.Sucursal = conAsientos.Sucursal and 
		stkMoviCuerpo.stkMoviCabe =@StkMoviCabe )

GO


DROP PROCEDURE stkProductosCostoCierreGuardar
GO
CREATE PROCEDURE stkProductosCostoCierreGuardar
(
@pProducto_Id VarChar(25),
@pEmpresa_Id int,
@pFecha datetime,
@pCosto numeric(19,8)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM stkProductosCostoCierre WHERE (Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id)) AND 
		(Empresa_Id = @pEmpresa_Id) AND (Fecha = @pFecha)))
BEGIN 
	UPDATE stkProductosCostoCierre
		SET	Costo = @pCosto
	WHERE (Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id)) AND (Empresa_Id = @pEmpresa_Id) AND (Fecha = @pFecha)
END 
ELSE 
BEGIN 
	INSERT INTO stkProductosCostoCierre
	(
		Producto_Id,
		Empresa_Id,
		Fecha,
		Costo
	)
	VALUES 
	(
		dbo.FuncFKstkProductos(@pProducto_Id),
		@pEmpresa_Id,
		@pFecha,
		@pCosto
	)
END 

GO

DROP PROCEDURE stkProductosCostoCierreDatos
GO
CREATE PROCEDURE stkProductosCostoCierreDatos
(
@pProducto_Id VarChar(25),
@pEmpresa_Id int,
@pFecha datetime
)
AS
SET NOCOUNT ON 

SELECT stkProductos.Producto_Id, stkProductosCostoCierre.Empresa_Id, stkProductosCostoCierre.Fecha, stkProductosCostoCierre.Costo
	FROM stkProductosCostoCierre INNER JOIN stkProductos ON
		stkProductosCostoCierre.Producto_Id = stkProductos.stkProductos
		WHERE 
			stkProductos.Producto_Id = @pProducto_Id
	AND stkProductosCostoCierre.Empresa_Id = @pEmpresa_Id
	AND stkProductosCostoCierre.Fecha = @pFecha
 
RETURN @@Error 

GO

DROP PROCEDURE stkProductosCostoCierreEliminar
GO
CREATE PROCEDURE stkProductosCostoCierreEliminar
(
@pProducto_Id VarChar(25),
@pEmpresa_Id int ,
@pFecha datetime 
)
AS
SET NOCOUNT ON 

DELETE FROM stkProductosCostoCierre 
WHERE 
Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id)
AND Empresa_Id = @pEmpresa_Id
AND Fecha = @pFecha
 
RETURN @@Error 

GO


DROP PROCEDURE stkProductosCierreTransito
go
CREATE PROCEDURE stkProductosCierreTransito
(
	@pStkMoviCabeEntr bigint
)
as

Update stkMoviCuerpo SET CostoUnitario = 
	(SELECT stkSalida.CostoUnitario
	from stkMoviCuerpo stkSalida, stkEnTransito 
	Where
		stkSalida.stkMoviCabe = stkEnTransito.stkMoviCabe and 
		stkEnTransito.stkMoviCabeEntr = stkMoviCuerpo.stkMoviCabe and
		stkSalida.Renglon = stkMoviCuerpo.Renglon)
WHERE
	stkMoviCuerpo.stkMoviCabe = @pStkMoviCabeEntr AND 
	EXISTS(SELECT stkSalida.CostoUnitario
	from stkMoviCuerpo stkSalida, stkEnTransito 
	Where
		stkSalida.stkMoviCabe = stkEnTransito.stkMoviCabe and 
		stkEnTransito.stkMoviCabeEntr = stkMoviCuerpo.stkMoviCabe and
		stkSalida.Renglon = stkMoviCuerpo.Renglon)

	-- y el asiento

	Update conMovCont 
		SET Importe = (SELECT SUM(
		ROUND(stkMoviCuerpo.Cantidad * stkMoviCuerpo.CostoUnitario,2))
		from stkMoviCuerpo
			where
				stkMoviCuerpo.stkMoviCabe = conMovCont.conAsientos AND 
				stkMoviCuerpo.conRenglonDebe = conMovCont.Renglon),

		ImporteMonedaOriginal =(SELECT SUM(
		ROUND(stkMoviCuerpo.Cantidad * stkMoviCuerpo.CostoUnitario,2))
		from stkMoviCuerpo
			where
				stkMoviCuerpo.stkMoviCabe = conMovCont.conAsientos AND 
				stkMoviCuerpo.conRenglonDebe = conMovCont.Renglon)
		where
			conMovCont.TipoMov = 1 and
			conMovCont.conAsientos = @pStkMoviCabeEntr

	Update conMovCont 
		SET Importe = (SELECT SUM(
		ROUND(stkMoviCuerpo.Cantidad * stkMoviCuerpo.CostoUnitario,2))
		from stkMoviCuerpo
			where
				stkMoviCuerpo.stkMoviCabe = conMovCont.conAsientos AND 
				stkMoviCuerpo.conRenglonHaber = conMovCont.Renglon), 
		ImporteMonedaOriginal = (SELECT SUM(
		ROUND(stkMoviCuerpo.Cantidad * stkMoviCuerpo.CostoUnitario,2))
		from stkMoviCuerpo
			where
				stkMoviCuerpo.stkMoviCabe = conMovCont.conAsientos AND 
				stkMoviCuerpo.conRenglonHaber = conMovCont.Renglon)
				where
				conMovCont.TipoMov = 2 and
			conMovCont.conAsientos = @pStkMoviCabeEntr

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueArchivosTxt.sql*/
DROP PROCEDURE sueArchivosTxtGuardar
GO
CREATE PROCEDURE sueArchivosTxtGuardar
(
@pArchivo_Id varchar(15),
@pDescripcion varchar(100),
@pResumen1Archivo_Id varchar(15)= NULL,
@pPosicionResumen1 char(1),
@pResumen2Archivo_Id varchar(15) = NULL,
@pPosicionResumen2 char(1),
@pUsuario_Id int,
@pEmpresa_Id int = NULL,
@pInactivo Sino,
@pPosteado Sino
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM sueArchivosTxt WHERE @pArchivo_Id =Archivo_Id ))
BEGIN 
	UPDATE sueArchivosTxt
	SET		@lIdentidad = sueArchivosTxt,
		Archivo_Id = @pArchivo_Id,
		Descripcion = @pDescripcion,
		Resumen1 = dbo.FuncFksueArchivosTxt(@pResumen1Archivo_Id),
		PosicionResumen1 = @pPosicionResumen1,
		Resumen2 =  dbo.FuncFksueArchivosTxt(@pResumen2Archivo_Id),
		PosicionResumen2 = @pPosicionResumen2,
		Usuario_Id = @pUsuario_Id,
		Empresa_Id = @pEmpresa_Id,
		Inactivo = @pInactivo,
		Posteado = @pPosteado
	WHERE 
	@pArchivo_Id =Archivo_Id


	
END 
ELSE 
BEGIN 
	INSERT INTO sueArchivosTxt
	(
		Archivo_Id,
		Descripcion,
		Resumen1,
		PosicionResumen1,
		Resumen2,
		PosicionResumen2,
		Usuario_Id,
		Empresa_Id,
		Inactivo,
		Posteado
	)
	VALUES 
	(
		@pArchivo_Id,
		@pDescripcion,
		dbo.FuncFksueArchivosTxt(@pResumen1Archivo_Id),
		@pPosicionResumen1,
		dbo.FuncFksueArchivosTxt(@pResumen2Archivo_Id),
		@pPosicionResumen2,
		@pUsuario_Id,
		@pEmpresa_Id,
		@pInactivo,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE sueArchivosTxtDatos
GO
CREATE PROCEDURE sueArchivosTxtDatos
(
@pArchivo_Id varchar(15)
)
AS
SET NOCOUNT ON 

SELECT sueArchivosTxt.sueArchivosTxt,
sueArchivosTxt.Archivo_id, sueArchivosTxt.Archivo_Id as Archivo_Id_Nueva, sueArchivosTxt.Descripcion,Res1.Archivo_Id as Res1Archivo_Id,Res1.Descripcion as Res1Descripcion,
sueArchivosTxt.PosicionResumen1,Res2.Archivo_Id as Res2Archivo_Id,Res2.Descripcion as Res2Descripcion,sueArchivosTxt.PosicionResumen2,sueArchivosTxt.Inactivo,sueArchivosTxt.Posteado
From sueArchivosTxt
left join sueArchivosTxt as Res1 on Res1.sueArchivosTxt=sueArchivosTxt.Resumen1
left join sueArchivosTxt as Res2 on Res2.sueArchivosTxt=sueArchivosTxt.Resumen2
	WHERE 
	@pArchivo_Id =sueArchivosTxt.Archivo_Id

	

SELECT sueArchivosTxt.Archivo_Id,sueArchivosTxt.Descripcion as DescripcionCabecera,Columna,Formula,Tipo,Longitud,Decimales,Relleno,sueArchivosTxtCuerpo.Descripcion,Orden,Formato
From sueArchivosTxtCuerpo
inner join sueArchivosTxt on sueArchivosTxt.sueArchivosTxt=sueArchivosTxtCuerpo.sueArchivosTxt 
where
@pArchivo_Id =sueArchivosTxt.Archivo_Id



Declare @pidentity bigint= dbo.FuncFKsueArchivosTxt( @pArchivo_Id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'sueArchivosTxt'




RETURN @@Error 




GO



DROP PROCEDURE sueArchivosTxtEliminar
GO
CREATE PROCEDURE sueArchivosTxtEliminar
(
@pArchivo_Id varchar(15)
)
AS
SET NOCOUNT ON 

DELETE FROM sueArchivosTxt 
WHERE  Archivo_Id = @pArchivo_Id
 RETURN @@Error 








GO







DROP FUNCTION FuncFKsueArchivosTxt
GO

CREATE FUNCTION FuncFKsueArchivosTxt
(
@pArchivo_Id varchar (15)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = sueArchivosTxt FROM sueArchivosTxt WHERE 
	Archivo_Id = @pArchivo_Id
  RETURN @pIdentity
END


GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueArchivosTxtCuerpo.sql*/
DROP PROCEDURE sueArchivosTxtCuerpoGuardar
GO
CREATE PROCEDURE sueArchivosTxtCuerpoGuardar
(
@pArchivo_Id varchar(15),
@pColumna int,
@pFormula QMemo,
@pTipo char(1),
@pLongitud smallint,
@pDecimales smallint,
@pRelleno char(1),
@pDescripcion varchar(60),
@pOrden smallint,
@pFormato varchar(25) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM sueArchivosTxtCuerpo WHERE (sueArchivosTxt =dbo.FuncFKsueArchivosTxt(@pArchivo_Id)) AND (Columna = @pColumna)))
BEGIN 
	UPDATE sueArchivosTxtCuerpo
	SET		Formula = @pFormula,
		Tipo = @pTipo,
		Longitud = @pLongitud,
		Decimales = @pDecimales,
		Relleno = @pRelleno,
		Descripcion = @pDescripcion,
		Orden = @pOrden,
		Formato = @pFormato
	WHERE (sueArchivosTxt = dbo.FuncFKsueArchivosTxt(@pArchivo_Id)) AND (Columna = @pColumna)
END 
ELSE 
BEGIN 
	INSERT INTO sueArchivosTxtCuerpo
	(
		sueArchivosTxt,
		Columna,
		Formula,
		Tipo,
		Longitud,
		Decimales,
		Relleno,
		Descripcion,
		Orden,
		Formato
	)
	VALUES 
	(
		dbo.FuncFKsueArchivosTxt(@pArchivo_Id),
		@pColumna,
		@pFormula,
		@pTipo,
		@pLongitud,
		@pDecimales,
		@pRelleno,
		@pDescripcion,
		@pOrden,
		@pFormato
	)
END 

GO

DROP PROCEDURE sueArchivosTxtCuerpoDatos
GO
CREATE PROCEDURE sueArchivosTxtCuerpoDatos
(
@pArchivo_Id varchar(15),
@pColumna int = null
)
AS
SET NOCOUNT ON 

SELECT sueArchivosTxt.Descripcion as DescripcionCabecera, sueArchivosTxtCuerpo.Columna, sueArchivosTxtCuerpo.Formula, sueArchivosTxtCuerpo.Tipo,
	sueArchivosTxtCuerpo.Longitud, sueArchivosTxtCuerpo.Decimales, sueArchivosTxtCuerpo.Relleno, sueArchivosTxtCuerpo.Descripcion,
	sueArchivosTxtCuerpo.Orden, sueArchivosTxtCuerpo.Formato
FROM sueArchivosTxtCuerpo 
INNER JOIN sueArchivosTxt  ON (sueArchivosTxt.sueArchivosTxt = sueArchivosTxtCuerpo.sueArchivosTxt)
WHERE (sueArchivosTxt.Archivo_Id = @pArchivo_Id)
AND (Columna = ISNULL(@pColumna, Columna))
 
 RETURN @@Error 

GO

DROP PROCEDURE sueArchivosTxtCuerpoEliminar
GO
CREATE PROCEDURE sueArchivosTxtCuerpoEliminar
(
@pArchivo_Id varchar(15),
@pColumna int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM sueArchivosTxtCuerpo 
WHERE (sueArchivosTxt = dbo.FuncFKsueArchivosTxt(@pArchivo_Id))
AND (Columna = ISNULL(@pColumna, Columna))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueArchivoTxtObtenerConceptos.sql*/
DROP PROCEDURE sueArchivoTxtObtenerConceptos
GO
CREATE PROCEDURE sueArchivoTxtObtenerConceptos
(
	@pLegajo int, 
	@pAnio int,
	@pMes int,
	@pQuincena int,
	@pVez int,
	@pSemana int,
	@pDecena int,
	@pEmpresa Int
)
As
Select sueConceptos.Concepto_Id, sueTerminada.Dato Cantidad, sueTerminada.Dato2, sueTerminada.Importe, sueTerminada.Signo
From sueTerminada
Inner Join suePersonal On suePersonal.genEntidades = sueTerminada.Legajo
Inner Join conAsientos On conAsientos.conAsientos = sueTerminada.sueLiquidacion
Inner Join sueLiquidacion On sueLiquidacion.sueLiquidacion = sueTerminada.sueLiquidacion
Inner Join sueConceptos On sueConceptos.sueConceptos = sueTerminada.Concepto_Id
Where conAsientos.Anulado = 0 And conAsientos.Empresa_Id = @pEmpresa And
	suePersonal.Legajo = @pLegajo And
	sueConceptos.Signo != 0 And
	sueLiquidacion.Anio = @pAnio And
	(@pMes = 0 Or sueLiquidacion.Mes = @pMes) And
	(@pQuincena = 0 Or sueLiquidacion.Quincena = @pQuincena) And 
	(@pVez = 0 Or sueLiquidacion.Vez = @pVez) And
	(@pSemana = 0 Or sueLiquidacion.Semana = @pSemana) And
	(@pDecena = 0 Or sueLiquidacion.Decena = @pDecena)
Go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueArchivoTxtObtenerEmple.sql*/

--sueArchivoTxtObtenerEmple 1,9999,'S','20190101','20211031', 1230,' ','zzz', 1,'','5'
--sueArchivoTxtObtenerEmple 1,9999,'A','20190101','20191031', 10626, 1
--sueArchivoTxtObtenerEmple 1,9999,'B','20190101','20191031', 10626, 1



DROP PROCEDURE sueArchivoTxtObtenerEmple
GO
CREATE PROCEDURE sueArchivoTxtObtenerEmple

(
	@LegajoDesde int, 
	@LegajaHasta Int,
	@Tipo Char(1),
	@FechaDesde DateTime,
	@FechaHasta DateTime, 
	@Anio int,
	@Mes int,
	@Quincena int,
	@Vez int,
	@Semana int,
	@Decena int,
	@SucursalDesde VarChar(4),
	@SucursalHasta VarChar(4),
	@TipoPagoDesde Varchar(5),
	@TipoPagoHasta Varchar(5),
	@Empresa Int
	
)
as

if @Tipo = 'S'
BEGIN
	Select distinct suePersonal.Legajo 
	From suePersonal
	Inner join sueTerminada ON sueTerminada.Legajo = suePersonal.genEntidades 
	Inner join sueLiquidacion ON sueTerminada.sueLiquidacion = sueLiquidacion.sueLiquidacion 
	INNER JOIN conAsientos ON conAsientos.conAsientos =sueLiquidacion.sueLiquidacion 
	Inner join suePersSucursal ON suePersSucursal.Legajo = suePersonal.genEntidades And 
			sueLiquidacion.FechaFinal BETWEEN suePersSucursal.FechaDesde And suePersSucursal.FechaHasta
	INNER JOIN genSucursalesEmpr ON genSucursalesEmpr.genSucursalesEmpr = suePersSucursal.Sucursal
	Inner join suePersTipoPago On suePersTipoPago.Legajo=suePersonal.genEntidades And
			sueLiquidacion.FechaFinal BETWEEN suePersTipoPago.FechaDesde And suePersTipoPago.FechaHasta
	Inner join sueTipoPago On suePersTipoPago.TipoPago_Id= sueTipoPago.sueTipoPago
	Where
	conAsientos.Anulado = 0 And 
	--conAsientos.Posteado = 1 AND no pongo el posteado porque se pone recien al habilitar el pago
	--sueLiquidacion.sueLiquidacion = @sueLiquidacion and 
	sueLiquidacion.Anio = @Anio And
	(sueLiquidacion.Mes = @Mes Or @Mes = 0) And
	(sueLiquidacion.Quincena = @Quincena Or @Quincena = 0) And
	(sueLiquidacion.Vez = @Vez Or @Vez = 0) And
	(sueLiquidacion.Semana = @Semana Or @Semana = 0) And
	(sueLiquidacion.Decena = @Decena Or @Decena = 0) And
	suePersonal.Legajo Between @LegajoDesde And @LegajaHasta And 
	conAsientos.Empresa_Id = @Empresa And 
	genSucursalesEmpr.Sucursal BETWEEN @SucursalDesde And @SucursalHasta And
	sueTipoPago.TipoPago_Id BETWEEN @TipoPagoDesde And @TipoPagoHasta

	ORDER BY 1
END

if @Tipo = 'A'
BEGIN
	Select suePersonal.Legajo 
	From suePersonal 
	INNER JOIN suePersSucursal ON suePersSucursal.Legajo = suePersonal.genEntidades And 
			@FechaHasta BETWEEN suePersSucursal.FechaDesde And suePersSucursal.FechaHasta
	INNER JOIN genSucursalesEmpr ON genSucursalesEmpr.genSucursalesEmpr = suePersSucursal.Sucursal
	Inner join suePersTipoPago On suePersTipoPago.Legajo=suePersonal.Legajo And
			@FechaHasta BETWEEN suePersTipoPago.FechaDesde And suePersTipoPago.FechaHasta
	Inner join sueTipoPago On suePersTipoPago.TipoPago_Id = sueTipoPago.sueTipoPago
	WHERE
	suePersonal.Legajo Between @LegajoDesde And @LegajaHasta AND 
	suePersonal.FechaIngreso Between @FechaDesde And @FechaHasta AND 
	ISNULL(suePersonal.Empresa_Id, @Empresa) = @Empresa And 
	genSucursalesEmpr.Sucursal BETWEEN @SucursalDesde And @SucursalHasta And
	sueTipoPago.TipoPago_Id BETWEEN @TipoPagoDesde And @TipoPagoHasta
	ORDER BY 1
END

if @Tipo = 'B'
BEGIN
	Select suePersonal.Legajo 
	From suePersonal
	INNER JOIN suePersSucursal ON suePersSucursal.Legajo = suePersonal.genEntidades And 
			@FechaHasta BETWEEN suePersSucursal.FechaDesde And suePersSucursal.FechaHasta
	INNER JOIN genSucursalesEmpr ON genSucursalesEmpr.genSucursalesEmpr = suePersSucursal.Sucursal
	Inner join suePersTipoPago on suePersTipoPago.Legajo=suePersonal.Legajo and
			@FechaHasta BETWEEN suePersTipoPago.FechaDesde and suePersTipoPago.FechaHasta
	Inner join sueTipoPago on suePersTipoPago.TipoPago_Id= sueTipoPago.sueTipoPago
	WHERE
	suePersonal.Legajo  Between @LegajoDesde And @LegajaHasta And 
	suePersonal.FechaBaja Between @FechaDesde And @FechaHasta And 
	ISNULL(suePersonal.Empresa_id, @Empresa)  = @Empresa And 
	genSucursalesEmpr.Sucursal BETWEEN @SucursalDesde And @SucursalHasta And
	sueTipoPago.TipoPago_Id BETWEEN @TipoPagoDesde And @TipoPagoHasta
	ORDER BY 1
END

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueCategorias.sql*/
DROP PROCEDURE sueCategoriasGuardar
GO
CREATE PROCEDURE sueCategoriasGuardar
(
@pCategoria_Id varchar(5),
@pCategoria_Id_Nuevo varchar(5),
@pDescripcion varchar(100),
@pPeriodo_Id char(1) = NULL,
@pInactivo Sino,
@pPosteado Sino,
@pUsuario_Id int = NULL,
@pEmpresa_Id int=null
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM sueCategorias WHERE (Categoria_Id = @pCategoria_Id)))
BEGIN 
	UPDATE sueCategorias
	SET		@lIdentidad = sueCategorias,
		Categoria_Id = @pCategoria_Id_Nuevo,
		Descripcion = @pDescripcion,
		Periodo_Id = @pPeriodo_Id,
		Inactivo = @pInactivo,
		Posteado = @pPosteado,
		Usuario_Id = @pUsuario_Id,
		Empresa_Id=@pEmpresa_Id
		
	WHERE (Categoria_Id = @pCategoria_Id)
END 
ELSE 
BEGIN 
	INSERT INTO sueCategorias
	(
		Categoria_Id,
		Descripcion,
		Periodo_Id,
		Inactivo,
		Posteado,
		Usuario_Id,
		Empresa_Id
	)
	VALUES 
	(
		@pCategoria_Id,
		@pDescripcion,
		@pPeriodo_Id,
		@pInactivo,
		@pPosteado,
		@pUsuario_Id,
		@pEmpresa_Id
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE sueCategoriasDatos
GO
CREATE PROCEDURE sueCategoriasDatos
(
@pCategoria_Id varchar(5),
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 

SELECT sueCategorias.sueCategorias, sueCategorias.Categoria_Id, sueCategorias.Descripcion, sueCategorias.Periodo_Id,
	suePeriodicidad.Descripcion as DescripcionPeriodicidad, sueCategorias.Inactivo, sueCategorias.Posteado, sueCategorias.Usuario_Id, sueCategorias.Empresa_Id,
	cast(case when sueCategorias.Empresa_Id is null then 1 else 0 end as bit) as PTodasEmpresas, dbo.FechaActual() as Fecha
FROM sueCategorias 
LEFT JOIN suePeriodicidad  ON (suePeriodicidad.Periodo_Id = sueCategorias.Periodo_Id)
WHERE (Categoria_Id = @pCategoria_Id)
 

 select sueCategorias.Categoria_Id, sueCategorias.Descripcion as DescripcionCategoria, sueCateNombre.CateNombre_Id, sueCateNombre.Descripcion as DescripcionCateNombre, 
Fecha_Desde, isnull(Valor,0) as Valor, sueLiqImpCatego.Usuario_Id, 0 as Empresa_Id from sueCateNombre
left join sueLiqImpCatego on sueCateNombre.CateNombre_Id=sueLiqImpCatego.CateNombre_Id and  sueLiqImpCatego.Categoria_Id=dbo.FuncFKsueCategorias(@pCategoria_Id) and
dbo.FechaActual() between sueLiqImpCatego.Fecha_Desde and Fecha_Hasta
left join sueCategorias on sueCategorias.sueCategorias=sueLiqImpCatego.Categoria_Id 
where sueCateNombre.PorEmpresa=0

union all
select sueCategorias.Categoria_Id, sueCategorias.Descripcion as DescripcionCategoria, sueCateNombre.CateNombre_Id, sueCateNombre.Descripcion as DescripcionCateNombre, 
Fecha_Desde, isnull(Valor, 0) as Valor, sueLiqEmpCatego.Usuario_Id, sueLiqEmpCatego.Empresa_Id from sueCateNombre
left join sueLiqEmpCatego on sueCateNombre.CateNombre_Id=sueLiqEmpCatego.CateNombre_Id and
sueLiqEmpCatego.Categoria_Id=dbo.FuncFKsueCategorias(@pCategoria_Id) and
sueLiqEmpCatego.Empresa_Id=@pEmpresa_Id and
dbo.FechaActual() between Fecha_Desde and Fecha_Hasta
left join sueCategorias on sueCategorias.sueCategorias=sueLiqEmpCatego.Categoria_Id
where sueCateNombre.PorEmpresa=1



  Declare @pidentity bigint= dbo.FuncFKsueCategorias(@pCategoria_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'sueCategorias'
 RETURN @@Error 

GO

DROP PROCEDURE sueCategoriasEliminar
GO
CREATE PROCEDURE sueCategoriasEliminar
(
@pCategoria_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM sueCategorias 
WHERE (Categoria_Id = @pCategoria_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKsueCategorias
GO

CREATE FUNCTION FuncFKsueCategorias
(
@pCategoria_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = sueCategorias FROM sueCategorias WHERE 
	Categoria_Id = @pCategoria_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueCateNombre.sql*/
DROP PROCEDURE sueCateNombreGuardar
GO
CREATE PROCEDURE sueCateNombreGuardar
(
@pCateNombre_Id int,
@pDescripcion varchar(60),
@pPorEmpresa Sino,
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM sueCateNombre WHERE (CateNombre_Id = @pCateNombre_Id)))
BEGIN 
	UPDATE sueCateNombre
	SET		Descripcion = @pDescripcion,
		PorEmpresa = @pPorEmpresa,
		Usuario_Id = @pUsuario_Id
	WHERE (CateNombre_Id = @pCateNombre_Id)
END 
ELSE 
BEGIN 
	INSERT INTO sueCateNombre
	(
		CateNombre_Id,
		Descripcion,
		PorEmpresa,
		Usuario_Id
	)
	VALUES 
	(
		@pCateNombre_Id,
		@pDescripcion,
		@pPorEmpresa,
		@pUsuario_Id
	)
END 

GO

DROP PROCEDURE sueCateNombreDatos
GO
CREATE PROCEDURE sueCateNombreDatos
(
@pCateNombre_Id int
)
AS
SET NOCOUNT ON 

SELECT sueCateNombre.CateNombre_Id, sueCateNombre.Descripcion, sueCateNombre.PorEmpresa, genUsuarios.Usuario_Id,
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario
FROM sueCateNombre 
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = sueCateNombre.Usuario_Id)
WHERE (CateNombre_Id = @pCateNombre_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE sueCateNombreEliminar
GO
CREATE PROCEDURE sueCateNombreEliminar
(
@pCateNombre_Id int 
)
AS
SET NOCOUNT ON 

DELETE FROM sueCateNombre 
WHERE (CateNombre_Id = @pCateNombre_Id)
 
 RETURN @@Error 

GO
drop procedure sueCateNombreEditable
go
create procedure sueCateNombreEditable
(
@pCateNombre int
)
as
declare @lEditable bit= case when exists (select 1 from sueLiqImpCatego where CateNombre_Id=@pCateNombre) then 1 else 0 end
set @lEditable= case when @lEditable=1 then 1 else case when exists (select 1 from sueLiqEmpCatego where CateNombre_Id=@pCateNombre) then 1 else 0 end end
select @lEditable
GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueCierre.sql*/
drop PROCEDURE sueCierrePendientes
go
create PROCEDURE sueCierrePendientes
(
@pUltimoCierre DATETIME,
@pProximoCierre DATETIME,
@pEmpresa_Id int
)
as
select @pUltimoCierre as UltimoCierre, @pProximoCierre as ProximoCierre, @pEmpresa_Id as Empresa_Id
select sueLiquidacion.sueLiquidacion, conAsientos.Fecha, conAsientos.Posteado, conAsientos.Anulado,
dbo.Segmento(genSegmentos.genSegmentos,genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C,
genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as Segmento
from sueLiquidacion 
inner join conAsientos on conAsientos.conAsientos=sueLiquidacion.sueLiquidacion 
inner join genAsiSegmentos on genAsiSegmentos.Asiento_Id=conAsientos.conAsientos
inner join genSegmentos on genSegmentos.genSegmentos=genAsiSegmentos.Segmento_Id
where conAsientos.Posteado=0 and conAsientos.Fecha BETWEEN @pUltimoCierre and @pProximoCierre and conAsientos.Empresa_Id=@pEmpresa_Id and not conAsientos.Anulado=1
go

drop Procedure sueCierreDatos
go
create Procedure sueCierreDatos
(
    @pEmpresa_Id int
)
as
SELECT FechaCierreSueldos as UltimoCierre, 
conPeriodos.Fecha_Hasta as ProximoCierre
FROM genEmpresas 
INNER JOIN conPeriodos on
genEmpresas.genEmpresas = conPeriodos.Empresa_Id and 
DATEADD(dd,1,FechaCierreSueldos) between conPeriodos.Fecha_Desde And conPeriodos.Fecha_Hasta
Where
	genEmpresas.genEmpresas = @pEmpresa_Id
    go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueConcAcum.sql*/
DROP PROCEDURE sueConcAcumGuardar
GO
CREATE PROCEDURE sueConcAcumGuardar
(
@psueConcAcum int, 
@pConcepto_Id int,
@pLegajo bigint,
@pFecha datetime,
@pMontoTope qMonedaD2,
@pDescuento qMonedaD2,
@pAcumulado qMonedaD2,
@pUsuario_Id int , 
@pAnulado Bit
)
AS
SET NOCOUNT ON 

IF (EXISTS (SELECT 1 FROM sueConcAcum WHERE sueConcAcum = @psueConcAcum ))
BEGIN 
	UPDATE sueConcAcum
	SET	Concepto_Id = dbo.FuncFKsueConceptos(@pConcepto_Id),
		Legajo = dbo.FuncFKsuePersonal(@pLegajo),
		Fecha = @pFecha,
		MontoTope = @pMontoTope,
		Descuento = @pDescuento,
		Acumulado = @pAcumulado,
		Usuario_Id = @pUsuario_Id, 
		Anulado = @pAnulado
	WHERE 
		sueConcAcum = @psueConcAcum
END 
ELSE 
BEGIN 
	INSERT INTO sueConcAcum
	(
		Concepto_Id,
		Legajo,
		Fecha,
		MontoTope,
		Descuento,
		Acumulado,
		Usuario_Id, 
		Anulado
	)
	VALUES 
	(
		dbo.FuncFKsueConceptos(@pConcepto_Id),
		dbo.FuncFKsuePersonal(@pLegajo),
		@pFecha,
		@pMontoTope,
		@pDescuento,
		@pAcumulado,
		@pUsuario_Id, 
		@pAnulado
	)
	SET @psueConcAcum =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @psueConcAcum as RetVal 

GO

DROP PROCEDURE sueConcAcumDatos
GO
CREATE PROCEDURE sueConcAcumDatos
(
	@pSegmento_Id VarChar(10), 
	@pSegmento1N INT, 
	@pSegmento2N INT, 
	@pSegmento3N INT, 
	@pSegmento4N INT, 
	@pSegmento1C VarChar(20), 
	@pSegmento2C VarChar(20), 
	@pSegmento3C VarChar(20), 
	@pSegmento4C VarChar(20), 
	@pEmpresa_Id int
)
AS
SET NOCOUNT ON 

SELECT sueConcAcum.sueConcAcum, genSegmentos.Segmento_Id, sueConcAcumSegmento.Segmento1N, 
sueConcAcumSegmento.Segmento2N,sueConcAcumSegmento.Segmento3N, 
sueConcAcumSegmento.Segmento4N, sueConcAcumSegmento.Segmento1C, sueConcAcumSegmento.Segmento2C,
	sueConcAcumSegmento.Segmento3C, sueConcAcumSegmento.Segmento4C,
	sueConceptos.Concepto_Id, sueConceptos.Descripcion as DescripcionConceptos, 
	suePersonal.Legajo, suePersonal.ApellidoPaterno+','+ suePersonal.ApellidoMaterno+','+
	suePersonal.Nombres as DescripcionPersonal, 
	sueConcAcum.Fecha, sueConcAcum.MontoTope, sueConcAcum.Descuento,
	sueConcAcum.Acumulado, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, 
	sueConcAcum.Anulado
FROM sueConcAcum 
INNER JOIN sueConcAcumSegmento on sueConcAcumSegmento.sueConcAcum = sueConcAcum.sueConcAcum
INNER JOIN sueConceptos  ON sueConceptos.sueConceptos = sueConcAcum.Concepto_Id
INNER JOIN suePersonal  ON suePersonal.genEntidades = sueConcAcum.Legajo
INNER JOIN genUsuarios  ON genUsuarios.genUsuarios = sueConcAcum.Usuario_Id
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = sueConcAcumSegmento.Segmento_Id
WHERE  
	genSegmentos.Segmento_Id = @pSegmento_Id and 
	sueConcAcumSegmento.Segmento1N = @PSegmento1N AND 
	sueConcAcumSegmento.Segmento2N = @PSegmento2N AND 
	sueConcAcumSegmento.Segmento3N = @PSegmento3N AND 
	sueConcAcumSegmento.Segmento4N = @PSegmento4N AND 
	sueConcAcumSegmento.Segmento1C = @PSegmento1C AND 
	sueConcAcumSegmento.Segmento2C = @PSegmento2C AND 
	sueConcAcumSegmento.Segmento3C = @PSegmento3C AND 
	sueConcAcumSegmento.Segmento4C = @PSegmento4C AND 
	sueConcAcumSegmento.Empresa_Id = @pEmpresa_Id

RETURN @@Error 

GO

DROP PROCEDURE sueConcAcumEliminar
GO
CREATE PROCEDURE sueConcAcumEliminar
(
	@psueConcAcum int 
)
AS
SET NOCOUNT ON 

DELETE FROM sueConcAcum 
WHERE  
	sueConcAcum = @psueConcAcum 
 RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueConcAcumSegmento.sql*/
DROP PROCEDURE sueConcAcumSegmentoGuardar
GO
CREATE PROCEDURE sueConcAcumSegmentoGuardar
(
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pEmpresa_Id int,
@psueConcAcum int, 
@pTieneAutomatico bit
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM sueConcAcumSegmento WHERE (Segmento_Id = dbo.FuncFkgenSegmentos(@pSegmento_Id)) AND 
	(Segmento1N = @pSegmento1N) AND 
	(Segmento2N = @pSegmento2N) AND 
	(Segmento3N = @pSegmento3N) AND 
	(Segmento4N = @pSegmento4N) AND 
	(Segmento1C = @pSegmento1C) AND 
	(Segmento2C = @pSegmento2C) AND 
	(Segmento3C = @pSegmento3C) AND 
	(Segmento4C = @pSegmento4C) AND (Empresa_Id = @pEmpresa_Id)))
BEGIN 
	UPDATE sueConcAcumSegmento
	SET		sueConcAcum = @psueConcAcum
	WHERE 
	(Segmento_Id = dbo.FuncFkgenSegmentos(@pSegmento_Id)) AND 
	(Segmento1N = @pSegmento1N) AND 
	(Segmento2N = @pSegmento2N) AND 
	(Segmento3N = @pSegmento3N) AND 
	(Segmento4N = @pSegmento4N) AND 
	(Segmento1C = @pSegmento1C) AND 
	(Segmento2C = @pSegmento2C) AND 
	(Segmento3C = @pSegmento3C) AND 
	(Segmento4C = @pSegmento4C) AND (Empresa_Id = @pEmpresa_Id)
END 
ELSE 
BEGIN
	if (@pTieneAutomatico=1)
	begin
	SET @pSegmento1N = ISNULL((SELECT MAX(Segmento1N) FROM sueConcAcumSegmento
		Where
		Segmento_Id = dbo.FuncFkgenSegmentos(@pSegmento_Id) AND 
		Segmento2N = @pSegmento2N AND 
		Segmento3N = @pSegmento3N AND 
		Segmento4N = @pSegmento4N AND 
		Segmento1C = @pSegmento1C AND 
		Segmento2C = @pSegmento2C AND 
		Segmento3C = @pSegmento3C AND 
		Segmento4C = @pSegmento4C AND Empresa_Id = @pEmpresa_Id),0) +1
		

	end
 
	INSERT INTO sueConcAcumSegmento
	(
		Segmento_Id,
		Segmento1N,
		Segmento2N,
		Segmento3N,
		Segmento4N,
		Segmento1C,
		Segmento2C,
		Segmento3C,
		Segmento4C,
		Empresa_Id,
		sueConcAcum
	)
	VALUES 
	(
		dbo.FuncFkgenSegmentos(@pSegmento_Id),
		@pSegmento1N,
		@pSegmento2N,
		@pSegmento3N,
		@pSegmento4N,
		@pSegmento1C,
		@pSegmento2C,
		@pSegmento3C,
		@pSegmento4C,
		@pEmpresa_Id,
		@psueConcAcum
	)
END 
SELECT @pSegmento1N as RETVAL
GO

DROP PROCEDURE sueConcAcumSegmentoDatos
GO
CREATE PROCEDURE sueConcAcumSegmentoDatos
(
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 

SELECT genSegmentos.Segmento_Id, sueConcAcumSegmento.Segmento1N, sueConcAcumSegmento.Segmento2N,
	sueConcAcumSegmento.Segmento3N, sueConcAcumSegmento.Segmento4N, 
	sueConcAcumSegmento.Segmento1C, sueConcAcumSegmento.Segmento2C,
	sueConcAcumSegmento.Segmento3C, sueConcAcumSegmento.Segmento4C, 
	sueConcAcumSegmento.Empresa_Id, sueConcAcumSegmento.sueConcAcum, genSegmentos.TieneColumnaAutomatica
FROM sueConcAcumSegmento 
INNER JOIN genSegmentos  ON (genSegmentos.genSegmentos = sueConcAcumSegmento.Segmento_Id)
INNER JOIN sueConcAcum  ON (sueConcAcum.sueConcAcum = sueConcAcumSegmento.sueConcAcum)
WHERE (genSegmentos.Segmento_Id = @pSegmento_Id)
AND (Segmento1N = @pSegmento1N)
AND (Segmento2N = @pSegmento2N)
AND (Segmento3N = @pSegmento3N)
AND (Segmento4N = @pSegmento4N)
AND (Segmento1C = @pSegmento1C)
AND (Segmento2C = @pSegmento2C)
AND (Segmento3C = @pSegmento3C)
AND (Segmento4C = @pSegmento4C)
AND (Empresa_Id = @pEmpresa_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE sueConcAcumSegmentoEliminar
GO
CREATE PROCEDURE sueConcAcumSegmentoEliminar
(
@pSegmento_Id varchar(10),
@pSegmento1N int = NULL,
@pSegmento2N int = NULL,
@pSegmento3N int = NULL,
@pSegmento4N int = NULL,
@pSegmento1C varchar(20) = NULL,
@pSegmento2C varchar(20) = NULL,
@pSegmento3C varchar(20) = NULL,
@pSegmento4C varchar(20) = NULL,
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 

DELETE FROM sueConcAcumSegmento 
WHERE (Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id))
AND (Segmento1N = ISNULL(@pSegmento1N, Segmento1N))
AND (Segmento2N = ISNULL(@pSegmento2N, Segmento2N))
AND (Segmento3N = ISNULL(@pSegmento3N, Segmento3N))
AND (Segmento4N = ISNULL(@pSegmento4N, Segmento4N))
AND (Segmento1C = ISNULL(@pSegmento1C, Segmento1C))
AND (Segmento2C = ISNULL(@pSegmento2C, Segmento2C))
AND (Segmento3C = ISNULL(@pSegmento3C, Segmento3C))
AND (Segmento4C = ISNULL(@pSegmento4C, Segmento4C))
AND Empresa_Id = @pEmpresa_Id
 
RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueConcDescuento.sql*/
DROP PROCEDURE sueConcDescuentoGuardar
GO
CREATE PROCEDURE sueConcDescuentoGuardar
(
@pLegajo int,
@pConcepto_Id int,
@psueLiquidacion bigint,
@psueConcAcum int,
@pMonto qMonedaD2
)
AS
SET NOCOUNT ON 

Update sueConcAcum Set Acumulado = Acumulado + @pMonto 
Where
	sueConcAcum.Legajo = dbo.FuncFksuePersonal(@pLegajo)
AND sueConcAcum.Concepto_Id = dbo.FuncFksueConceptos(@pConcepto_Id) 
AND sueConcAcum.sueConcAcum = @psueConcAcum

	INSERT INTO sueConcDescuento
	(
		Legajo,
		Concepto_Id,
		sueLiquidacion,
		sueConcAcum,
		Monto
	)
	VALUES 
	(
		dbo.FuncFksuePersonal(@pLegajo),
		dbo.FuncFksueConceptos(@pConcepto_Id),
		@psueLiquidacion,
		@psueConcAcum,
		@pMonto
	)


GO

DROP PROCEDURE sueConcDescuentoDatos
GO
CREATE PROCEDURE sueConcDescuentoDatos
(
@pLegajo int,
@pConcepto_Id int,
@psueLiquidacion bigint,
@psueConcAcum int
)
AS
SET NOCOUNT ON 

SELECT sueConcDescuento.sueLiquidacion, suePersonal.Legajo, 
	sueConceptos.Concepto_Id, sueConcDescuento.Monto, sueConcDescuento.sueConcAcum 
FROM sueConcDescuento 
INNER JOIN sueTerminada  ON (sueTerminada.sueLiquidacion = sueConcDescuento.sueLiquidacion) AND (sueTerminada.Legajo = sueConcDescuento.Legajo) AND (sueTerminada.Concepto_Id = sueConcDescuento.Concepto_Id)
INNER JOIN sueConcAcum  ON (sueConcAcum.sueConcAcum = sueConcDescuento.sueConcAcum)
INNER JOIN suePersonal ON suePersonal.genEntidades = sueConcDescuento.Legajo 
INNER JOIN sueConceptos on  sueConceptos.sueConceptos = sueConcDescuento.Concepto_Id
WHERE (suePersonal.Legajo = @pLegajo)
AND (sueConceptos.Concepto_Id = @pConcepto_Id)
AND (sueConcDescuento.sueLiquidacion = @psueLiquidacion)
AND (sueConcDescuento.sueConcAcum = @psueConcAcum)
 
RETURN @@Error 

GO

DROP PROCEDURE sueConcDescuentoEliminar
GO
CREATE PROCEDURE sueConcDescuentoEliminar
(
@pLegajo int,
@pConcepto_Id int = NULL,
@psueLiquidacion bigint,
@psueConcAcum int = NULL
)
AS
SET NOCOUNT ON 

-- Regreso el Saldo

Update sueConcAcum Set Acumulado = Acumulado -sueConcDescuento.Monto 
from sueConcDescuento 
Where
	sueConcDescuento.sueConcAcum = sueConcAcum.sueConcAcum and 
	(sueConcDescuento.Legajo = dbo.FuncFksuePersonal(@pLegajo))
AND (sueConcDescuento.Concepto_Id = CASE WHEN @pConcepto_Id IS NULL THEN  sueConcDescuento.Concepto_Id ELSE dbo.FuncFksueConceptos(@pConcepto_Id) END)
AND (sueConcDescuento.sueLiquidacion = @psueLiquidacion)
AND (sueConcDescuento.sueConcAcum = ISNULL(@psueConcAcum,sueConcDescuento.sueConcAcum))


DELETE FROM sueConcDescuento 
WHERE (Legajo = dbo.FuncFksuePersonal(@pLegajo))
AND (Concepto_Id = CASE WHEN @pConcepto_Id IS NULL THEN  Concepto_Id ELSE dbo.FuncFksueConceptos(@pConcepto_Id) END)
AND (sueLiquidacion = @psueLiquidacion)
AND (sueConcDescuento.sueConcAcum = ISNULL(@psueConcAcum,sueConcDescuento.sueConcAcum))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueConceptos.sql*/
DROP PROCEDURE sueConceptosGuardar
GO
CREATE PROCEDURE sueConceptosGuardar
(
@pConcepto_Id int,
@pConcepto_Id_Nuevo int,
@pDescripcion varchar(60),
@pEmpresa_Id int = NULL,
@pFormula varchar(max),
@pLlevaDato Sino,
@pCuentaDebe varchar(25) = NULL,
@pCuentaHaber varchar(25) = NULL,
@pSubCuentaDebe varchar(14) = NULL,
@pSubCuentaHaber varchar(14) = NULL,
@pRetroactivo Sino,
@pExtraordinario Sino,
@pTipoPercepcion varchar(3) = NULL,
@pTipoDeduccion varchar(3) = NULL,
@pTipoOtro varchar(3) = NULL,
@pTipoHora char(1) = NULL,
@pTipoIncapacidad VarChar(2) = NULL,
@pEsExento Sino,
@pObservacion VarChar(max) = Null,
@pInactivo Sino,
@pPosteado Sino,
@pUsuario_Id int = NULL, 
@pSigno smallInt, 
@pColumnaRecibo smallInt
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM sueConceptos WHERE (Concepto_Id = @pConcepto_Id)))
BEGIN 
	UPDATE sueConceptos
	SET		@lIdentidad = sueConceptos,
		Concepto_Id = @pConcepto_Id_Nuevo,
		Descripcion = @pDescripcion,
		Empresa_Id = @pEmpresa_Id,
		Formula = @pFormula,
		LlevaDato = @pLlevaDato,
		CuentaDebe = dbo.FuncFKconCuentas(@pCuentaDebe),
		CuentaHaber = dbo.FuncFKconCuentas(@pCuentaHaber),
		SubCuentaDebe = dbo.FuncFKconSubCuentas(@pSubCuentaDebe),
		SubCuentaHaber = dbo.FuncFKconSubCuentas(@pSubCuentaHaber),
		Retroactivo = @pRetroactivo,
		Extraordinario = @pExtraordinario,
		TipoPercepcion = @pTipoPercepcion,
		TipoDeduccion = @pTipoDeduccion,
		TipoOtro = @pTipoOtro,
		TipoHora = @pTipoHora,
		TipoIncapacidad = @pTipoIncapacidad,
		EsExento = @pEsExento,
		Observacion = @pObservacion,
		Inactivo = @pInactivo,
		Posteado = @pPosteado,
		Usuario_Id = @pUsuario_Id,
		Signo = @pSigno, 
		ColumnaRecibo = @pColumnaRecibo
	WHERE (Concepto_Id = @pConcepto_Id)
END 
ELSE 
BEGIN 
	INSERT INTO sueConceptos
	(
		Concepto_Id,
		Descripcion,
		Empresa_Id,
		Formula,
		LlevaDato,
		CuentaDebe,
		CuentaHaber,
		SubCuentaDebe,
		SubCuentaHaber,
		Retroactivo,
		Extraordinario,
		TipoPercepcion,
		TipoDeduccion,
		TipoOtro,
		TipoHora,
		TipoIncapacidad,
		EsExento,
		Observacion,
		Inactivo,
		Posteado,
		Usuario_Id, 
		Signo,
		ColumnaRecibo
	)
	VALUES 
	(
		@pConcepto_Id,
		@pDescripcion,
		@pEmpresa_Id,
		@pFormula,
		@pLlevaDato,
		dbo.FuncFKconCuentas(@pCuentaDebe),
		dbo.FuncFKconCuentas(@pCuentaHaber),
		dbo.FuncFKconSubCuentas(@pSubCuentaDebe),
		dbo.FuncFKconSubCuentas(@pSubCuentaHaber),
		@pRetroactivo,
		@pExtraordinario,
		@pTipoPercepcion,
		@pTipoDeduccion,
		@pTipoOtro,
		@pTipoHora,
		@pTipoIncapacidad,
		@pEsExento,
		@pObservacion,
		@pInactivo,
		@pPosteado,
		@pUsuario_Id,
		@pSigno,
		@pColumnaRecibo

	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE sueConceptosDatos
GO
CREATE PROCEDURE sueConceptosDatos
(
@pConcepto_Id int
)
AS
SET NOCOUNT ON 

SELECT sueConceptos.sueConceptos, sueConceptos.Concepto_Id, sueConceptos.Descripcion, 
	sueConceptos.Empresa_Id, Cast( Case When sueConceptos.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, sueConceptos.Formula, sueConceptos.LlevaDato,
	conCuentasDebe.Cuenta_Id as CuentaDebe, conCuentasDebe.Descripcion as DescripcionCuentaDebe, conCuentasHaber.Cuenta_Id as CuentaHaber,
	conCuentasHaber.Descripcion as DescripcionCuentaHaber,
	conSubCuentasDebe.SubCuenta_Id as SubCuentaDebe, conSubCuentasDebe.Descripcion as DescripcionSubCuentasDebe, conSubCuentasHaber.SubCuenta_Id as SubCuentaHaber, 
	conSubCuentasHaber.Descripcion as DescripcionSubCuentasHaber,
	sueConceptos.Retroactivo, sueConceptos.Extraordinario, sueConceptos.TipoPercepcion, DescTipoPercepcion.Descripcion as DescripcionTipoPercepcion, 
	sueConceptos.TipoDeduccion, DescTipoDeduccion.Descripcion as DescripcionTipoDeduccion, sueConceptos.TipoOtro,
	DescTipoOtro.Descripcion as DescripcionTipoOtro, sueConceptos.TipoHora, sueConceptos.TipoIncapacidad as TipoIncapacidad, sueConceptos.EsExento,
	sueConceptos.Inactivo, sueConceptos.Posteado, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, 
	sueConceptos.Signo, sueConceptos.ColumnaRecibo, sueConceptos.Observacion
	
FROM sueConceptos 
cross join genInstalacion
LEFT JOIN conCuentas conCuentasDebe  ON (conCuentasDebe.conCuentas = sueConceptos.CuentaDebe)
LEFT JOIN conCuentas conCuentasHaber ON (conCuentasHaber.conCuentas = sueConceptos.CuentaHaber)
LEFT JOIN conSubCuentas as conSubCuentasDebe  ON (conSubCuentasDebe.conSubCuentas = sueConceptos.SubCuentaDebe)
LEFT JOIN conSubCuentas conSubCuentasHaber ON (conSubCuentasHaber.conSubCuentas = sueConceptos.SubCuentaHaber)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = sueConceptos.Usuario_Id)
left join genEntidadesBasicasValor DescTipoPercepcion on DescTipoPercepcion.Clave=sueConceptos.TipoPercepcion and DescTipoPercepcion.Entidad_Id = 1517  and genInstalacion.Dominio_Id = DescTipoPercepcion.Dominio_Id
left join genEntidadesBasicasValor DescTipoDeduccion on DescTipoDeduccion.Clave=sueConceptos.TipoDeduccion and DescTipoDeduccion.Entidad_Id = 1516 and genInstalacion.Dominio_Id = DescTipoDeduccion.Dominio_Id
left join genEntidadesBasicasValor DescTipoOtro on DescTipoOtro.Clave=sueConceptos.TipoOtro and DescTipoOtro.Entidad_Id = 1518 and genInstalacion.Dominio_Id = DescTipoOtro.Dominio_Id
WHERE (Concepto_Id = @pConcepto_Id)

select sueConceptosProp.Propiedad, sueConceptosProp.Descripcion as DescripcionPropiedad, sueConceptosProp.Orden, sueConceptosProp.Agrupamiento, 
sueConceptosPropValor.SiNo from sueConceptosProp
left join sueConceptos on sueConceptos.Concepto_Id=@pConcepto_Id
left join sueConceptosPropValor on sueConceptosPropValor.Propiedad=sueConceptosProp.sueConceptosProp and sueConceptosPropValor.Concepto_Id=sueConceptos.sueConceptos
 


Declare @pidentity bigint= dbo.FuncFKsueConceptos(@pConcepto_Id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'sueConceptos'
RETURN @@Error 

GO

DROP PROCEDURE sueConceptosEliminar
GO
CREATE PROCEDURE sueConceptosEliminar
(
@pConcepto_Id int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM sueConceptos 
WHERE (Concepto_Id = @pConcepto_Id)
 
RETURN @@Error 

GO

DROP FUNCTION FuncFKsueConceptos
GO

CREATE FUNCTION FuncFKsueConceptos
(
@pConcepto_Id int
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = sueConceptos FROM sueConceptos WHERE 
	Concepto_Id = @pConcepto_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueConceptosProp.sql*/
DROP PROCEDURE sueConceptosPropGuardar
GO
CREATE PROCEDURE sueConceptosPropGuardar
(
@pPropiedad varchar(10),
@pPropiedad_Nuevo varchar(10),
@pOrden int,
@pDescripcion varchar(80),
@pAgrupamiento varchar(20)
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM sueConceptosProp WHERE (Propiedad = @pPropiedad)))
BEGIN 
	UPDATE sueConceptosProp
	SET @lIdentidad = sueConceptosProp,
		Propiedad = @pPropiedad_Nuevo,
		Orden = @pOrden,
		Descripcion = @pDescripcion,
		Agrupamiento = @pAgrupamiento
	WHERE (Propiedad = @pPropiedad)
END 
ELSE 
BEGIN 
	INSERT INTO sueConceptosProp
	(
		Propiedad,
		Orden,
		Descripcion,
		Agrupamiento
	)
	VALUES 
	(
		@pPropiedad,
		@pOrden,
		@pDescripcion,
		@pAgrupamiento
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE sueConceptosPropDatos
GO
CREATE PROCEDURE sueConceptosPropDatos
(
@pPropiedad varchar(10)
)
AS
SET NOCOUNT ON 

SELECT sueConceptosProp.sueConceptosProp, sueConceptosProp.Propiedad, sueConceptosProp.Orden, sueConceptosProp.Descripcion,
	sueConceptosProp.Agrupamiento
FROM sueConceptosProp 
WHERE (Propiedad = @pPropiedad)
 


Declare @pidentity bigint= dbo.FuncFKsueConceptosProp(@pPropiedad)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'sueConceptosProp'
RETURN @@Error 

GO

DROP PROCEDURE sueConceptosPropEliminar
GO
CREATE PROCEDURE sueConceptosPropEliminar
(
@pPropiedad varchar(10) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM sueConceptosProp 
WHERE (Propiedad = @pPropiedad)
 
RETURN @@Error 

GO

DROP FUNCTION FuncFKsueConceptosProp
GO

CREATE FUNCTION FuncFKsueConceptosProp
(
@pPropiedad varchar (10)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = sueConceptosProp FROM sueConceptosProp WHERE 
	Propiedad = @pPropiedad
  RETURN @pIdentity
END

GO

Drop procedure sueConceptosPropTodosDatos
Go
Create procedure sueConceptosPropTodosDatos
As
Select 0 Empresa_Id

Select Propiedad, Orden, Descripcion, Agrupamiento
From sueConceptosProp
Go

Drop procedure sueConceptosPropValorTieneInfo
Go
Create procedure sueConceptosPropValorTieneInfo
(
@pPropiedad varChar(10)
)
As

Select sueConceptos.Concepto_Id, sueConceptos.Descripcion, sueConceptosProp.Propiedad, sueConceptosProp.Descripcion DescPropiedad
From sueConceptosPropValor
Inner Join sueConceptos On sueConceptos.Concepto_Id = sueConceptosPropValor.Concepto_Id
Inner Join sueConceptosProp On sueConceptosProp.sueConceptosProp = sueConceptosPropValor.Propiedad
Where sueConceptosProp.Propiedad = @pPropiedad
Go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueConceptosPropValor.sql*/
DROP PROCEDURE sueConceptosPropValorGuardar
GO
CREATE PROCEDURE sueConceptosPropValorGuardar
(
@pConcepto_Id int,
@pPropiedad varchar(10),
@pSiNo Sino
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM sueConceptosPropValor WHERE (Concepto_Id = dbo.FuncFKsueConceptos(@pConcepto_Id)) AND (Propiedad = dbo.FuncFKsueConceptosProp(@pPropiedad))))
BEGIN 
	UPDATE sueConceptosPropValor
	SET		SiNo = @pSiNo
	WHERE (Concepto_Id = dbo.FuncFKsueConceptos(@pConcepto_Id)) AND (Propiedad =  dbo.FuncFKsueConceptosProp(@pPropiedad))
END 
ELSE 
BEGIN 
	INSERT INTO sueConceptosPropValor
	(
		Concepto_Id,
		Propiedad,
		SiNo
	)
	VALUES 
	(
		dbo.FuncFKsueConceptos(@pConcepto_Id),
		 dbo.FuncFKsueConceptosProp(@pPropiedad),
		@pSiNo
	)
END 

GO

DROP PROCEDURE sueConceptosPropValorDatos
GO
CREATE PROCEDURE sueConceptosPropValorDatos
(
@pConcepto_Id int,
@pPropiedad int
)
AS
SET NOCOUNT ON 

SELECT sueConceptos.Concepto_Id, sueConceptos.Descripcion as DescripcionConceptos, sueConceptosProp.Descripcion as DescripcionConceptosProp, sueConceptosPropValor.SiNo
FROM sueConceptosPropValor 
INNER JOIN sueConceptos  ON (sueConceptos.sueConceptos = sueConceptosPropValor.Concepto_Id)
INNER JOIN sueConceptosProp  ON (sueConceptosProp.sueConceptosProp = sueConceptosPropValor.Propiedad)
WHERE (sueConceptos.Concepto_Id = @pConcepto_Id)
AND (sueConceptosProp.Propiedad = @pPropiedad)
 
 RETURN @@Error 

GO

DROP PROCEDURE sueConceptosPropValorEliminar
GO
CREATE PROCEDURE sueConceptosPropValorEliminar
(
@pConcepto_Id int,
@pPropiedad int=null
)
AS
SET NOCOUNT ON 

DELETE FROM sueConceptosPropValor 
WHERE (Concepto_Id = dbo.FuncFKsueConceptos(@pConcepto_Id))
AND (Propiedad = isnull( dbo.FuncFKsueConceptosProp(@pPropiedad), Propiedad))
 
 RETURN @@Error 

GO
drop FUNCTION FuncFKsueConceptosProp
go
CREATE FUNCTION FuncFKsueConceptosProp
(
@pPropiedad_Id varchar(10)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = sueConceptosProp.sueConceptosProp FROM sueConceptosProp WHERE 
	Propiedad = @pPropiedad_Id
  RETURN @pIdentity
END
--select dbo.FuncFKsueConceptos('BaseSDI')

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueConstantes.sql*/

drop Procedure sueConstantesDatos
go
Create Procedure sueConstantesDatos
as



select distinct sueTabla.Tabla_Id,sueTabla.Ver,Descripcion,sueTabTitulo.Codigo from sueTabla
inner join sueTabTitulo on sueTabTitulo.Tabla_Id=sueTabla.Tabla_Id
where 
Codigo != NULL and Codigo!=''

select distinct sueGanTitulo.TabGan_Id,Descripcion,Codigo,Ver from sueGanTitulo
inner join sueGanancias on sueGanancias.TabGan_Id=sueGanTitulo.TabGan_Id
where 
Codigo != NULL and Codigo!=''

select distinct sueVarGlobales.VarGlobal_Id,Descripcion,PorEmpresa,Codigo,Fecha_Hasta,Fecha_Desde,Ver from sueVarGlobales
inner join sueLiqVarGlobales on sueLiqVarGlobales.VarGlobal_Id=sueVarGlobales.VarGlobal_Id
where 
Codigo != NULL and Codigo!=''
go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueConvenio.sql*/
DROP PROCEDURE sueConvenioGuardar
GO
CREATE PROCEDURE sueConvenioGuardar
(
@pConvenio_Id varchar(5),
@pConvenio_Id_Nueva varchar(5),
@pDescripcion varchar(100),
@pInactivo Sino,
@pPosteado Sino,
@pUsuario_Id int = NULL,
@pEmpresa_Id int =null,
@pTablaVac_Id varchar(5),
@pSindicalizado SiNo
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM sueConvenio WHERE Convenio_Id=@pConvenio_Id))
BEGIN 
	UPDATE sueConvenio
	SET		@lIdentidad = sueConvenio,
		Convenio_Id = @pConvenio_Id_Nueva,
		Descripcion = @pDescripcion,
		Inactivo = @pInactivo,
		Posteado = @pPosteado,
		Usuario_Id = @pUsuario_Id,
		Empresa_Id=@pEmpresa_Id,
		Sindicalizdo=@pSindicalizado,
		TablaVac_Id=dbo.FuncFKsueTablaVacacion(@pTablaVac_Id)
	WHERE Convenio_Id=@pConvenio_Id
END 
ELSE 
BEGIN 
	INSERT INTO sueConvenio
	(
		Convenio_Id,
		Descripcion,
		Inactivo,
		Posteado,
		Usuario_Id,
		Empresa_Id,
		Sindicalizdo,
		TablaVac_Id
	)
	VALUES 
	(
		@pConvenio_Id_Nueva,
		@pDescripcion,
		@pInactivo,
		@pPosteado,
		@pUsuario_Id,
		@pEmpresa_Id,
		@pSindicalizado,
		dbo.FuncFKsueTablaVacacion(@pTablaVac_Id)
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE sueConvenioDatos
GO
CREATE PROCEDURE sueConvenioDatos
(
@pConvenio_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT sueConvenio.sueConvenio, sueConvenio.Convenio_Id, sueConvenio.Convenio_Id as Convenio_Id_Nueva, sueConvenio.Descripcion, sueConvenio.Inactivo,
	sueConvenio.Posteado, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
	cast(case when sueConvenio.Empresa_Id is null then 1 else 0 end as bit) as PTodasEmpresas, sueTablaVacacion.TablaVac_Id,
	sueTablaVacacion.Descripcion as DescripcionVacacion, Sindicalizdo
FROM sueConvenio 
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = sueConvenio.Usuario_Id)
left join sueTablaVacacion on sueTablaVacacion.sueTablaVacacion=sueConvenio.TablaVac_Id
WHERE  
@pConvenio_Id=Convenio_Id

  Declare @pidentity bigint= dbo.FuncFKsueConvenio(@pConvenio_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'sueConvenio'
 RETURN @@Error 

GO

DROP PROCEDURE sueConvenioEliminar
GO
CREATE PROCEDURE sueConvenioEliminar
(
@pConvenio_Id varchar(5)
)
AS
SET NOCOUNT ON 

DELETE FROM sueConvenio 
WHERE  Convenio_Id=@pConvenio_Id
 RETURN @@Error 

GO

DROP FUNCTION FuncFKsueConvenio
GO

CREATE FUNCTION FuncFKsueConvenio
(
@pConvenio_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = sueConvenio FROM sueConvenio WHERE 
	Convenio_Id = @pConvenio_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueDato.sql*/
DROP PROCEDURE sueDatoGuardar
GO
CREATE PROCEDURE sueDatoGuardar
(
@pLegajo bigint,
@pConcepto_Id int,
@pDato QCantidad,
@pDato2 QCantidad,
@pUsuario_Id int = NULL,
@pFechaRegistro qFechaHora,
@pSegmento_Id varchar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 
declare @sueLiquidacion bigint =
(select Asiento_Id from genAsiSegmentos where
Segmento_Id= dbo.FuncFKgenSegmentos(@pSegmento_Id) and
Segmento1N=@pSegmento1N and Segmento2N=@pSegmento2N and
Segmento3N=@pSegmento3N and Segmento4N=@pSegmento4N and
Segmento1C=@pSegmento1C and Segmento2C= @pSegmento2C and
Segmento3C=@pSegmento3C and Segmento4C=@pSegmento4C and
Empresa_Id=@pEmpresa_Id
)
--print @sueliquidacion
IF (EXISTS (SELECT 1 FROM sueDato WHERE (sueLiquidacion = @sueLiquidacion) AND 
	(Legajo = dbo.FuncFKsuePersonal(@pLegajo)) AND 
	(Concepto_Id = dbo.FuncFKsueConceptos(@pConcepto_Id))))
BEGIN 
	UPDATE sueDato
	SET		Dato = @pDato,
		Dato2 = @pDato2,
		Usuario_Id = @pUsuario_Id,
		FechaRegistro = getDate() 
	WHERE sueLiquidacion = @sueLiquidacion AND 
	Legajo = dbo.FuncFKsuePersonal(@pLegajo) AND 
	Concepto_Id = dbo.FuncFKsueConceptos(@pConcepto_Id)

END 
ELSE 
BEGIN 
	INSERT INTO sueDato
	(
		sueLiquidacion,
		Legajo,
		Concepto_Id,
		Dato,
		Dato2,
		Usuario_Id,
		FechaRegistro
	)
	VALUES 
	(
		@sueLiquidacion,
		dbo.FuncFKsuePersonal(@pLegajo),
		dbo.FuncFKsueConceptos(@pConcepto_Id),
		@pDato,
		@pDato2,
		@pUsuario_Id,
		getDate()
	)
END 

GO
-- EXEC sueDatoDatos 1,'SLIQ',2019,9,1,1,' ',' ',' ',' ',1,1

DROP PROCEDURE sueDatoDatos
GO
CREATE PROCEDURE sueDatoDatos
(
@pLegajo int,
@pSegmento_Id varchar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pEmpresa_Id int,
@pGrupo_Id int
)
AS
SET NOCOUNT ON 
declare @sueLiquidacion bigint =
(select Asiento_Id from genAsiSegmentos where
Segmento_Id=dbo.FuncFKgenSegmentos(@pSegmento_Id) and
Segmento1N=@pSegmento1N and Segmento1C=@pSegmento1C and
Segmento2N=@pSegmento2N and Segmento2C=@pSegmento2C and
Segmento3N=@pSegmento3N and Segmento3C=@pSegmento3C and
Segmento4N= @pSegmento4N and Segmento4C= @pSegmento4C and
Empresa_Id=@pEmpresa_Id)

select @pSegmento_Id as Segmento_Id, @pSegmento1N as Segmento1N, @pSegmento2N as Segmento2N, @pSegmento3N as Segmento3N,
@pSegmento4N as Segmento4N, @pSegmento1C as Segmento1C, @pSegmento2C as Segmento2C, @pSegmento3C as Segmento3C,
@pSegmento4C as Segmento4C, suePersonal.Legajo, suePersonal.ApellidoPaterno as DescripcionLegajo, sueLiquidacion.FechaInicial, 
FechaFinal, sueGrupos.Grupo_Id, sueGrupos.Descripcion as DescripcionGrupo, cast(0 as int) as DatoOculto , 
sueLiquidacion.Anio, sueLiquidacion.Mes, sueLiquidacion.Decena, sueLiquidacion.Quincena, sueLiquidacion.Semana, sueLiquidacion.Vez, 
sueLiquidacion.Periodo_Id
from sueLiquidacion 
left join sueGrupos on sueGrupos.sueGrupos= 
	isnull(sueLiquidacion.Grupo_Id, dbo.FuncFKsueGrupos(@pGrupo_Id))
left join suePersonal on suePersonal.Legajo= @pLegajo
where 
sueLiquidacion.sueLiquidacion=@sueLiquidacion

select suePersonal.Legajo, suePersonal.ApellidoPaterno+','+ suePersonal.ApellidoMaterno +','+
suePersonal.Nombres as DescripcionLegajo,
sueConceptos.Concepto_Id, sueConceptos.Descripcion as DescripcionConcepto, 
	sueLiquidacion.sueLiquidacion, sueDato.Dato, sueDato.Dato2, 
	sueDato.FechaRegistro, sueDato.Usuario_Id
from sueVariable
inner join suePersonal on suePersonal.genEntidades=sueVariable.Legajo
inner join sueGrupos on sueGrupos.sueGrupos=sueVariable.Grupo_Id and sueGrupos.Grupo_Id=@pGrupo_Id
inner join sueConceptos on sueConceptos.sueConceptos=sueVariable.Concepto_Id
left join sueLiquidacion on sueLiquidacion.sueLiquidacion=@sueLiquidacion
left join sueDato on sueDato.Concepto_Id=sueConceptos.sueConceptos and sueDato.Legajo=suePersonal.genEntidades and sueDato.sueLiquidacion=sueLiquidacion.sueLiquidacion
where
suePersonal.Legajo=@pLegajo and
sueConceptos.LlevaDato=1
order by 1,3

SELECT sueDatoRetro.sueLiquidacion, suePersonal.Legajo, suePersonal.ApellidoPaterno as DescripcionPersonal, sueConceptos.Concepto_Id, sueConceptos.Descripcion as DescripcionConcepto,
	sueDatoRetro.AnioRetro, sueDatoRetro.MesRetro, sueDatoRetro.Dato, sueDatoRetro.Dato2
FROM sueVariable
inner join suePersonal on sueVariable.Legajo=suePersonal.genEntidades
inner join sueConceptos on sueConceptos.sueConceptos = sueVariable.Concepto_Id 
inner JOIN sueDato  ON (sueDato.sueLiquidacion = @sueLiquidacion) AND (sueDato.Legajo = suePersonal.genEntidades) AND (sueDato.Concepto_Id = sueConceptos.sueConceptos 
and Grupo_Id=dbo.FuncFKsueGrupos(@pGrupo_Id))
inner join sueDatoRetro on sueDato.Concepto_Id=sueDatoRetro.Concepto_Id and sueDato.Legajo= sueDatoRetro.Legajo and sueDatoRetro.sueLiquidacion=@sueLiquidacion
WHERE 
(suePersonal.Legajo = @pLegajo) and
sueConceptos.LlevaDato=1
order by 2,4

RETURN @@Error 

GO

DROP PROCEDURE sueDatoEliminar
GO
CREATE PROCEDURE sueDatoEliminar
(
@pLegajo int,
@pConcepto_Id int,
@pSegmento_Id varchar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 
declare @sueLiquidacion bigint =
(select Asiento_Id from genAsiSegmentos where
Segmento_Id= dbo.FuncFKgenSegmentos(@pSegmento_Id) and
Segmento1N=@pSegmento1N and Segmento2N=@pSegmento2N and
Segmento3N=@pSegmento3N and Segmento4N=@pSegmento4N and
Segmento1C=@pSegmento1C and Segmento2C= @pSegmento2C and
Segmento3C=@pSegmento3C and Segmento4C=@pSegmento4C and
Empresa_Id=@pEmpresa_Id
)

DELETE FROM sueDato 
WHERE (sueLiquidacion = @sueLiquidacion)
AND (Legajo = @pLegajo)
AND (Concepto_Id = dbo.FuncFKsueConceptos(@pConcepto_Id))
 
 RETURN @@Error 

GO

GO


DROP PROCEDURE sueDatoXConceptoDatos
GO
CREATE PROCEDURE sueDatoXConceptoDatos
(
@pGrupo_Id int,
@pSegmento_Id varchar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pEmpresa_Id int,
@pConcepto_Id int
)
AS
SET NOCOUNT ON 
declare @sueLiquidacion bigint =
(select Asiento_Id from genAsiSegmentos where
Segmento_Id=dbo.FuncFKgenSegmentos(@pSegmento_Id) and
Segmento1N=@pSegmento1N and Segmento1C=@pSegmento1C and
Segmento2N=@pSegmento2N and Segmento2C=@pSegmento2C and
Segmento3N=@pSegmento3N and Segmento3C=@pSegmento3C and
Segmento4N= @pSegmento4N and Segmento4C= @pSegmento4C and
Empresa_Id=@pEmpresa_Id)

select @pSegmento_Id as Segmento_Id, @pSegmento1N as Segmento1N, @pSegmento2N as Segmento2N, @pSegmento3N as Segmento3N,
@pSegmento4N as Segmento4N, @pSegmento1C as Segmento1C, @pSegmento2C as Segmento2C, @pSegmento3C as Segmento3C,
@pSegmento4C as Segmento4C, sueConceptos.Concepto_Id, sueConceptos.Descripcion as DescripcionConcepto, sueLiquidacion.FechaInicial, 
FechaFinal, sueGrupos.Grupo_Id, sueGrupos.Descripcion as DescripcionGrupo, cast(0 as int) as DatoOculto,
sueLiquidacion.Anio, sueLiquidacion.Mes, sueLiquidacion.Decena, sueLiquidacion.Quincena, sueLiquidacion.Semana, sueLiquidacion.Vez
from sueLiquidacion 
left join sueGrupos on sueGrupos.sueGrupos= 
	isnull(sueLiquidacion.Grupo_Id, dbo.FuncFKsueGrupos(@pGrupo_Id))
left join sueConceptos on sueConceptos.Concepto_Id=@pConcepto_Id
where 
sueLiquidacion.sueLiquidacion=@sueLiquidacion 
 

select suePersonal.Legajo, suePersonal.ApellidoPaterno+','+ suePersonal.ApellidoMaterno+','+suePersonal.Nombres as DescripcionLegajo,
sueConceptos.Concepto_Id, sueConceptos.Descripcion as DescripcionConcepto, sueLiquidacion.sueLiquidacion, sueDato.Dato, sueDato.Dato2, 
sueDato.FechaRegistro, sueDato.Usuario_Id
from sueVariable
inner join suePersonal on suePersonal.genEntidades=sueVariable.Legajo
inner join sueGrupos on sueGrupos.sueGrupos=sueVariable.Grupo_Id and sueGrupos.Grupo_Id=@pGrupo_Id
inner join sueConceptos on sueConceptos.sueConceptos=sueVariable.Concepto_Id
left join sueLiquidacion on sueLiquidacion.sueLiquidacion=@sueLiquidacion
left join sueDato on sueDato.Concepto_Id=sueConceptos.sueConceptos and sueDato.Legajo=suePersonal.genEntidades and sueDato.sueLiquidacion=sueLiquidacion.sueLiquidacion
where
sueConceptos.Concepto_Id=@pConcepto_Id and
sueConceptos.LlevaDato=1 and 
suePersonal.Empresa_Id = @pEmpresa_Id

SELECT sueDatoRetro.sueLiquidacion, suePersonal.Legajo, suePersonal.ApellidoPaterno+','+ suePersonal.ApellidoMaterno+','+suePersonal.Nombres as DescripcionPersonal, sueConceptos.Concepto_Id, sueConceptos.Descripcion as DescripcionConcepto,
	sueDatoRetro.AnioRetro, sueDatoRetro.MesRetro, sueDato.Dato, sueDato.Dato2, '' as DatoOculto
FROM 
sueLiquidacion inner join sueDato ON sueDato.sueLiquidacion = sueLiquidacion.sueLiquidacion
inner join suePersonal on sueDato.Legajo=suePersonal.genEntidades
inner join sueConceptos on sueConceptos.sueConceptos = sueDato.Concepto_Id 
INNER JOIN sueGrupos ON  sueGrupos.sueGrupos = sueLiquidacion.Grupo_Id
inner join sueDatoRetro on sueDato.Concepto_Id=sueDatoRetro.Concepto_Id and sueDato.Legajo= sueDatoRetro.Legajo and sueDatoRetro.sueLiquidacion=sueDato.sueLiquidacion
WHERE 
sueConceptos.Concepto_Id=@pConcepto_Id  and
sueConceptos.LlevaDato=1 and
sueLiquidacion.sueLiquidacion = @sueLiquidacion and
suePersonal.Empresa_Id = @pEmpresa_Id

RETURN @@Error 

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueDatoRetro.sql*/
DROP PROCEDURE sueDatoRetroGuardar
GO
CREATE PROCEDURE sueDatoRetroGuardar
(
@psueLiquidacion bigint,
@pLegajo int,
@pConcepto_Id int,
@pAnioRetro smallint,
@pMesRetro smallint,
@pDato QCantidad,
@pDato2 QCantidad
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM sueDatoRetro WHERE (sueLiquidacion = @psueLiquidacion) AND (Legajo = dbo.FuncFKsuePersonal(@pLegajo)) AND 
(Concepto_Id = dbo.FuncFKsueConceptos(@pConcepto_Id)) AND (AnioRetro = @pAnioRetro) AND (MesRetro = @pMesRetro)))
BEGIN 
	UPDATE sueDatoRetro
	SET		Dato = @pDato,
		Dato2 = @pDato2
	WHERE (sueLiquidacion = @psueLiquidacion) AND (Legajo = dbo.FuncFKsuePersonal(@pLegajo)) AND (Concepto_Id = dbo.FuncFKsueConceptos(@pConcepto_Id))
	AND (AnioRetro = @pAnioRetro) AND (MesRetro = @pMesRetro)
END 
ELSE 
BEGIN 
	INSERT INTO sueDatoRetro
	(
		sueLiquidacion,
		Legajo,
		Concepto_Id,
		AnioRetro,
		MesRetro,
		Dato,
		Dato2
	)
	VALUES 
	(
		@psueLiquidacion,
		dbo.FuncFKsuePersonal(@pLegajo),
		dbo.FuncFKsueConceptos(@pConcepto_Id),
		@pAnioRetro,
		@pMesRetro,
		@pDato,
		@pDato2
	)
END 

GO


DROP PROCEDURE sueDatoRetroEliminar
GO
CREATE PROCEDURE sueDatoRetroEliminar
(
@psueLiquidacion bigint,
@pLegajo int,
@pConcepto_Id int = NULL,
@pAnioRetro smallint = NULL,
@pMesRetro smallint = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM sueDatoRetro 
WHERE (sueLiquidacion = @psueLiquidacion)
AND (Legajo = dbo.FuncFKsuePersonal(@pLegajo)) AND 
	(Concepto_Id = ISNULL(dbo.FuncFKsueConceptos(@pConcepto_Id),Concepto_Id))
AND (AnioRetro = ISNULL(@pAnioRetro, AnioRetro))
AND (MesRetro = ISNULL(@pMesRetro, MesRetro))
 
 RETURN @@Error 

GO

DROP PROCEDURE sueDatoRetroDatos
GO
CREATE PROCEDURE sueDatoRetroDatos
(
@psueLiquidacion Bigint,
@pLegajo int,
@pConcepto_Id int
)
as
SELECT sueDatoRetro.sueLiquidacion, suePersonal.Legajo, 
	sueConceptos.Concepto_Id, sueDatoRetro.AnioRetro, 
	sueDatoRetro.MesRetro, sueDatoRetro.Dato
From sueDatoRetro 
	INNER JOIN suePersonal ON suePersonal.genEntidades = sueDatoRetro.Legajo
	INNER JOIN sueConceptos ON sueConceptos.sueConceptos = sueDatoRetro.Concepto_Id
	Where
			sueDatoRetro.sueLiquidacion = @pSueLiquidacion and
			suePersonal.Legajo = @pLegajo and 
			sueConceptos.Concepto_Id = @pConcepto_id
order by 4,5
GO	
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueFamiliares.sql*/
DROP PROCEDURE sueFamiliaresGuardar
GO
CREATE PROCEDURE sueFamiliaresGuardar
(
@pLegajo int,
@pTipoDoc char(1),
@pNroDoc varchar(25),
@pRelacion char(1),
@pApellidoyNombre varchar(50),
@pSexo char(1),
@pFechaNacimiento qFecha,
@pACargoDesde qFecha,
@pFechaBaja qFecha = NULL,
@pFechaCarga qFecha,
@pGanancias Sino,
@pIncapacitado Sino,
@pAdhObSocial Sino,
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM sueFamiliares WHERE Legajo = dbo.FuncFKsuePersonal(@pLegajo) AND TipoDoc = @pTipoDoc AND NroDoc = @pNroDoc))
BEGIN 
	UPDATE sueFamiliares
	SET Relacion = @pRelacion,
		ApellidoyNombre = @pApellidoyNombre,
		Sexo = @pSexo,
		FechaNacimiento = @pFechaNacimiento,
		ACargoDesde = @pACargoDesde,
		FechaBaja = @pFechaBaja,
		FechaCarga = GetDate(),
		Ganancias = @pGanancias,
		Incapacitado = @pIncapacitado,
		AdhObSocial = @pAdhObSocial,
		Usuario_Id = @pUsuario_Id
	WHERE Legajo = dbo.FuncFKsuePersonal(@pLegajo) AND TipoDoc = @pTipoDoc AND NroDoc = @pNroDoc
END 
ELSE 
BEGIN 
	INSERT INTO sueFamiliares
	(
		Legajo,
		TipoDoc,
		NroDoc,
		Relacion,
		ApellidoyNombre,
		Sexo,
		FechaNacimiento,
		ACargoDesde,
		FechaBaja,
		FechaCarga,
		Ganancias,
		Incapacitado,
		AdhObSocial,
		Usuario_Id
	)
	VALUES 
	(
		dbo.FuncFKsuePersonal(@pLegajo),
		@pTipoDoc,
		@pNroDoc,
		@pRelacion,
		@pApellidoyNombre,
		@pSexo,
		@pFechaNacimiento,
		@pACargoDesde,
		@pFechaBaja,
		getdate(),
		@pGanancias,
		@pIncapacitado,
		@pAdhObSocial,
		@pUsuario_Id
	)
END 

GO

DROP PROCEDURE sueFamiliaresDatos
GO
CREATE PROCEDURE sueFamiliaresDatos
(
@pLegajo int,
@pTipoDoc char(1) = Null,
@pNroDoc varchar(25) = Null
)
AS
SET NOCOUNT ON 

SELECT suePersonal.Legajo, suePersonal.ApellidoPaterno, sueFamiliares.TipoDoc, genTiposDoc.Descripcion DescripcionTipoDoc, sueFamiliares.NroDoc,
	sueFamiliares.Relacion, sueFamiliares.ApellidoyNombre, sueFamiliares.Sexo, sueFamiliares.FechaNacimiento,
	sueFamiliares.ACargoDesde, sueFamiliares.FechaBaja, sueFamiliares.FechaCarga, sueFamiliares.Ganancias,
	sueFamiliares.Incapacitado, sueFamiliares.AdhObSocial, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario
FROM sueFamiliares
INNER JOIN suePersonal ON (suePersonal.genEntidades = sueFamiliares.Legajo)
LEFT JOIN genUsuarios ON (genUsuarios.genUsuarios = sueFamiliares.Usuario_Id)
Cross Join genInstalacion
Inner Join genTiposDoc On genTiposDoc.TipoDoc = sueFamiliares.TipoDoc And genTiposDoc.Dominio_Id = genInstalacion.Dominio_Id
WHERE suePersonal.Legajo = @pLegajo
AND sueFamiliares.TipoDoc = isNull(@pTipoDoc, sueFamiliares.TipoDoc)
AND NroDoc = isNull(@pNroDoc, NroDoc)

RETURN @@Error 

GO

DROP PROCEDURE sueFamiliaresEliminar
GO
CREATE PROCEDURE sueFamiliaresEliminar
(
@pLegajo int,
@pTipoDoc char(1) = NULL,
@pNroDoc varchar(25) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM sueFamiliares 
WHERE Legajo = dbo.FuncFKsuePersonal(@pLegajo)
AND TipoDoc = ISNULL(@pTipoDoc, TipoDoc)
AND NroDoc = ISNULL(@pNroDoc, NroDoc)
 
RETURN @@Error 

GO

DROP PROCEDURE sueLegajoFamiliaresDatos
GO
CREATE PROCEDURE sueLegajoFamiliaresDatos
(
@pLegajo int
)
AS
SET NOCOUNT ON

Select suePersonal.Legajo, suePersonal.ApellidoPaterno
From suePersonal
Where suePersonal.Legajo = @pLegajo

Exec sueFamiliaresDatos @pLegajo

RETURN @@Error 

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueFormulas.sql*/
DROP PROCEDURE sueFormExisteSemana
GO
CREATE PROCEDURE sueFormExisteSemana(
	@Anio INT, 
	@Semana INT
)
	AS

	IF EXISTS(SELECT 1 FROM sueLiquidacion WHERE
		Anio = @Anio and 
		Semana = @Semana )
		SELECT  1
SELECT 0

GO


	DROP PROCEDURE sueFormHora
	GO
	CREATE PROCEDURE sueFormHora
	(
		@Categoria_Id VarChar(5),
		@Fecha DateTime, 
		@nImporte Int,
		@Empresa_Id Int  
	)
	as
	DECLARE @Valor as Numeric(18,4)
	select @Valor = A.Valor FROM 
		(SELECT Valor from sueliqimpCatego inner join sueCategorias ON 
		sueliqimpCatego.Categoria_Id = sueCategorias.sueCategorias
		Where
			sueCategorias.Categoria_Id = @Categoria_Id and
			@Fecha between sueLiqImpCatego.Fecha_Desde and sueLiqImpCatego.Fecha_Hasta and 
			sueLiqImpCatego.CateNombre_Id = @nImporte
		UNION ALL
		SELECT Valor from sueLiqEmpCatego inner join sueCategorias ON 
		sueLiqEmpCatego.Categoria_Id = sueCategorias.sueCategorias
		Where
			sueCategorias.Categoria_Id = @Categoria_Id and
			@Fecha between sueLiqEmpCatego.Fecha_Desde and sueLiqEmpCatego.Fecha_Hasta and 
			sueLiqEmpCatego.CateNombre_Id = @nImporte AND
			sueLiqEmpCatego.Empresa_Id = @Empresa_Id) A

	SELECT isnull(@Valor, 0)
	GO



DROP PROCEDURE sueFormIMP
GO

CREATE PROCEDURE sueFormIMP
(
	@Legajo int,
	@Fecha DateTime, 
	@nImporte Int
)
as
DECLARE @Valor as Numeric(18,4)
select @Valor = Valor 
	from sueLiqPersImportes inner join suePersonal ON 
	sueLiqPersImportes.Legajo = suePersonal.genEntidades
	Where
		suepersonal.Legajo = @Legajo and
		@Fecha between sueLiqPersImportes.Fecha_Desde and sueLiqPersImportes.Fecha_Hasta and 
		sueLiqPersImportes.Importe_Id = @nImporte

SELECT isnull(@Valor, 0)

GO


DROP PROCEDURE sueFormCOD
GO

CREATE PROCEDURE sueFormCOD
(
	@Legajo int,
	@Concepto INT,
	@Anio INT, 
	@Mes INT, 
	@Quin Int, 
	@Decena Int,
	@Semana Int, 
	@Vez INT
	
)
as
DECLARE @Valor as Numeric(18,4)
select @Valor = SUM(sueTerminada.Importe)
	from sueLiquidacion INNER JOIN sueTerminada ON 
	sueLiquidacion.sueLiquidacion =  sueTerminada.sueLiquidacion
	inner join sueConceptos ON 
	sueConceptos.sueConceptos = sueTerminada.Concepto_Id
	INNER JOIN suePersonal ON 
	suePersonal.genEntidades = sueTerminada.Legajo
	Where
			suePersonal.Legajo = @Legajo and 
			sueConceptos.Concepto_Id = @Concepto and
			sueliquidacion.Anio = @Anio and 
			 (sueliquidacion.Mes = @Mes OR @Mes =0) AND
			 (sueliquidacion.Quincena = @Quin OR @Quin =0) AND
			 (sueliquidacion.Decena = @Decena OR @Decena =0) AND
			 (sueliquidacion.Semana = @Semana OR @Semana =0) AND
			 (sueliquidacion.Vez = @Vez OR @Vez =0)

SELECT isnull(@Valor, 0)

GO



DROP PROCEDURE sueFormVAR
GO

CREATE PROCEDURE sueFormVAR
(
	@nVariable Int,
	@Fecha DateTime, 
	@Empresa_Id Int
)
as
DECLARE @Valor as Numeric(18,4)

if Exists(SELECT 1 FROM sueVarGlobales where
	VarGlobal_Id = @nVariable and 
	PorEmpresa = 1)

begin
select @Valor = Valor 
	from sueVarGlobales INNER JOIN sueLiqVarEmpGlobales on
	sueVarGlobales.VarGlobal_Id = sueLiqVarEmpGlobales.VarGlobal_Id
	Where
		sueVarGlobales.VarGlobal_Id = @nVariable and
		@Fecha between sueLiqVarEmpGlobales.Fecha_Desde and sueLiqVarEmpGlobales.Fecha_Hasta and 
		sueLiqVarEmpGlobales.Empresa_Id = @Empresa_Id
end

Else

begin
select @Valor = Valor 
	from sueVarGlobales INNER JOIN sueLiqVarGlobales on
	sueVarGlobales.VarGlobal_Id = sueLiqVarGlobales.VarGlobal_Id
	Where
		sueVarGlobales.VarGlobal_Id = @nVariable and
		@Fecha between sueLiqVarGlobales.Fecha_Desde and sueLiqVarGlobales.Fecha_Hasta 
end

SELECT isnull(@Valor, 0)

GO



DROP PROCEDURE sueFormACUM
GO

CREATE PROCEDURE sueFormACUM
(
	@Legajo int,
	@ConceptoDesde INT,
	@ConceptoHasta INT,
	@AnioDesde INT, 
	@MesDesde INT, 
	@AnioHasta INT, 
	@MesHasta INT
)
as


DECLARE @Valor as Numeric(18,4)
select @Valor = SUM(sueTerminada.Importe)
	from sueLiquidacion INNER JOIN sueTerminada ON 
	sueLiquidacion.sueLiquidacion =  sueTerminada.sueLiquidacion
	inner join sueConceptos ON 
	sueConceptos.sueConceptos = sueTerminada.Concepto_Id
	INNER JOIN suePersonal ON 
	suePersonal.genEntidades = sueTerminada.Legajo
	left JOIN conAsientos on
	conAsientos.conasientos = sueLiquidacion.sueLiquidacion
	Where
		ISNULL(conAsientos.Anulado,0) = 0 AND 
			suePersonal.Legajo = @Legajo and 
			sueConceptos.Concepto_Id Between @ConceptoDesde and @ConceptoHasta and 
			sueliquidacion.Anio*100 + sueliquidacion.Mes between 
			@AnioDesde * 100 +@MesDesde and 
			@AnioHasta * 100 +@MesHasta
			 

SELECT isnull(@Valor, 0)

GO

DROP PROCEDURE sueFormNETO
GO

CREATE PROCEDURE sueFormNETO
(
	@Legajo int,
	@Anio INT, 
	@Mes INT, 
	@Quin Int, 
	@Decena Int,
	@Semana Int, 
	@Vez INT
	
)
as
DECLARE @Valor as Numeric(18,4)
select @Valor = SUM(sueTerminada.Importe*sueTerminada.Signo)
	from sueLiquidacion INNER JOIN sueTerminada ON 
	sueLiquidacion.sueLiquidacion =  sueTerminada.sueLiquidacion
	inner join sueConceptos ON 
	sueConceptos.sueConceptos = sueTerminada.Concepto_Id
	INNER JOIN suePersonal ON 
	suePersonal.genEntidades = sueTerminada.Legajo
	Where
			suePersonal.Legajo = @Legajo and 
			sueliquidacion.Anio = @Anio and 
			 (sueliquidacion.Mes = @Mes OR @Mes =0) AND
			 (sueliquidacion.Quincena = @Quin OR @Quin =0) AND
			 (sueliquidacion.Decena = @Decena OR @Decena =0) AND
			 (sueliquidacion.Semana = @Semana OR @Semana =0) AND
			 (sueliquidacion.Vez = @Vez OR @Vez =0)

SELECT isnull(@Valor, 0)

GO



DROP PROCEDURE sueFormSCANT
GO

CREATE PROCEDURE sueFormSCANT
(
	@Legajo int,
	@ConceptoDesde INT,
	@ConceptoHasta INT,
	@AnioDesde INT, 
	@MesDesde INT, 
	@AnioHasta INT, 
	@MesHasta INT
)
as

-- Suama las cantidades de SueDato 
DECLARE @Valor as Numeric(18,4)

select @Valor = SUM(sueDato.Dato) 
	from sueLiquidacion INNER JOIN sueDato ON 
	sueLiquidacion.sueLiquidacion =  sueDato.sueLiquidacion
	inner join sueConceptos ON 
	sueConceptos.sueConceptos = sueDato.Concepto_Id
	INNER JOIN suePersonal ON 
	suePersonal.genEntidades = sueDato.Legajo
	Where
			suePersonal.Legajo = @Legajo and 
			sueConceptos.Concepto_Id Between @ConceptoDesde and @ConceptoHasta and 
			sueLiquidacion.FechaFinal >= suePersonal.FechaIngreso and 
			sueliquidacion.Anio*100 + sueliquidacion.Mes between 
			@AnioDesde * 100 +@MesDesde and 
			@AnioHasta * 100 +@MesHasta
			 

SELECT  isnull(@Valor, 0) AS Dato

GO

DROP PROCEDURE sueFormSCANTERMI
GO
CREATE PROCEDURE sueFormSCANTERMI
(
	@Legajo int,
	@ConceptoDesde INT,
	@ConceptoHasta INT,
	@AnioDesde INT, 
	@MesDesde INT, 
	@AnioHasta INT, 
	@MesHasta INT
)
as

-- Suama las cantidades de sueTerminada
DECLARE @Valor as Numeric(18,4)
select @Valor = SUM(sueTerminada.Dato)
	from sueLiquidacion INNER JOIN sueTerminada ON 
	sueLiquidacion.sueLiquidacion =  sueTerminada.sueLiquidacion
	inner join sueConceptos ON 
	sueConceptos.sueConceptos = sueTerminada.Concepto_Id
	INNER JOIN suePersonal ON 
	suePersonal.genEntidades = sueTerminada.Legajo
	Where
			suePersonal.Legajo = @Legajo and 
			sueConceptos.Concepto_Id Between @ConceptoDesde and @ConceptoHasta and 
			sueLiquidacion.FechaFinal >= suePersonal.FechaIngreso and 
			sueliquidacion.Anio*100 + sueliquidacion.Mes between 
			@AnioDesde * 100 +@MesDesde and 
			@AnioHasta * 100 +@MesHasta
			 

SELECT isnull(@Valor, 0)

GO



DROP PROCEDURE sueFormCANT
GO

CREATE PROCEDURE sueFormCANT
(
	@Legajo int,
	@ConceptoDesde INT,
	@ConceptoHasta INT,
	@Anio INT, 
	@Mes INT, 
	@Quin Int, 
	@Decena Int,
	@Semana Int, 
	@Vez INT
	
)
as
DECLARE @Valor as Numeric(18,4)
select @Valor = SUM(sueTerminada.Dato)
	from sueLiquidacion INNER JOIN sueTerminada ON 
	sueLiquidacion.sueLiquidacion =  sueTerminada.sueLiquidacion
	inner join sueConceptos ON 
	sueConceptos.sueConceptos = sueTerminada.Concepto_Id
	INNER JOIN suePersonal ON 
	suePersonal.genEntidades = sueTerminada.Legajo
	LEFT JOIN conAsientos ON 
	conAsientos.conAsientos = sueLiquidacion.sueLiquidacion
	Where
			ISNULL(conAsientos.Anulado,0) = 0 and
			suePersonal.Legajo = @Legajo and 
			sueConceptos.Concepto_Id between @ConceptoDesde and @ConceptoHasta and
			sueliquidacion.Anio = @Anio and 
			 (sueliquidacion.Mes = @Mes OR @Mes =0) AND
			 (sueliquidacion.Quincena = @Quin OR @Quin =0) AND
			 (sueliquidacion.Decena = @Decena OR @Decena =0) AND
			 (sueliquidacion.Semana = @Semana OR @Semana =0) AND
			 (sueliquidacion.Vez = @Vez OR @Vez =0)

SELECT isnull(@Valor, 0)

GO

DROP PROCEDURE sueFormSDATO
GO

CREATE PROCEDURE sueFormSDATO
(
	@Legajo int,
	@ConceptoDesde INT,
	@ConceptoHasta INT,
	@Anio INT, 
	@Mes INT, 
	@Quin Int, 
	@Decena Int,
	@Semana Int, 
	@Vez INT
	
)
as
DECLARE @Valor as Numeric(18,4)
select @Valor = SUM(sueDato.Dato)
	from sueLiquidacion INNER JOIN sueDato ON 
	sueLiquidacion.sueLiquidacion =  sueDato.sueLiquidacion
	inner join sueConceptos ON 
	sueConceptos.sueConceptos = sueDato.Concepto_Id
	INNER JOIN suePersonal ON 
	suePersonal.genEntidades = sueDato.Legajo
	Where
			suePersonal.Legajo = @Legajo and 
			sueConceptos.Concepto_Id between @ConceptoDesde and @ConceptoHasta and
			sueliquidacion.Anio = @Anio and 
			 (sueliquidacion.Mes = @Mes OR @Mes =0) AND
			 (sueliquidacion.Quincena = @Quin OR @Quin =0) AND
			 (sueliquidacion.Decena = @Decena OR @Decena =0) AND
			 (sueliquidacion.Semana = @Semana OR @Semana =0) AND
			 (sueliquidacion.Vez = @Vez OR @Vez =0)

SELECT isnull(@Valor, 0)

GO


DROP PROCEDURE sueFormSUMA
GO

CREATE PROCEDURE sueFormSUMA
(
	@Legajo int,
	@ConceptoDesde INT,
	@ConceptoHasta INT,
	@Anio INT, 
	@Mes INT, 
	@Quin Int, 
	@Decena Int,
	@Semana Int, 
	@Vez INT
	
)
as
DECLARE @Valor as Numeric(18,4)
select @Valor = SUM(sueTerminada.Importe)
	from sueLiquidacion INNER JOIN sueTerminada ON 
	sueLiquidacion.sueLiquidacion =  sueTerminada.sueLiquidacion
	inner join sueConceptos ON 
	sueConceptos.sueConceptos = sueTerminada.Concepto_Id
	INNER JOIN suePersonal ON 
	suePersonal.genEntidades = sueTerminada.Legajo
	LEFT JOIN conAsientos ON 
	conAsientos.conAsientos = sueLiquidacion.sueLiquidacion
	Where
			ISNULL(conAsientos.Anulado,0) = 0 and
			suePersonal.Legajo = @Legajo and 
			sueConceptos.Concepto_Id between @ConceptoDesde and @ConceptoHasta and
			sueliquidacion.Anio = @Anio and 
			 (sueliquidacion.Mes = @Mes OR @Mes =0) AND
			 (sueliquidacion.Quincena = @Quin OR @Quin =0) AND
			 (sueliquidacion.Decena = @Decena OR @Decena =0) AND
			 (sueliquidacion.Semana = @Semana OR @Semana =0) AND
			 (sueliquidacion.Vez = @Vez OR @Vez =0)

SELECT isnull(@Valor, 0)

GO



DROP PROCEDURE sueFormSUMAP
GO
CREATE PROCEDURE sueFormSUMAP
(
	@Legajo int,
	@ConceptoDesde INT,
	@ConceptoHasta INT,
	@Anio INT, 
	@Mes INT, 
	@Quin Int, 
	@Decena Int,
	@Semana Int, 
	@Vez INT
	
)
as
DECLARE @Valor as Numeric(18,4)
DECLARE @Valor2 as Numeric(18,4)
DECLARE @Valor3 as Numeric(18,4)

select @Valor = SUM(sueTerminada.Importe)
from sueLiquidacion 
	INNER JOIN sueTerminada ON sueLiquidacion.sueLiquidacion =  sueTerminada.sueLiquidacion
	inner join sueConceptos ON sueConceptos.sueConceptos = sueTerminada.Concepto_Id
	INNER JOIN suePersonal ON suePersonal.genEntidades = sueTerminada.Legajo
	LEFT JOIN conAsientos ON conAsientos.conAsientos = sueLiquidacion.sueLiquidacion
Where ISNULL(conAsientos.Anulado,0) = 0 and
	suePersonal.Legajo = @Legajo and 
	sueConceptos.Concepto_Id between @ConceptoDesde and @ConceptoHasta and
	sueliquidacion.Anio = @Anio and 
	(sueliquidacion.Mes = @Mes OR @Mes =0) AND
	(sueliquidacion.Quincena = @Quin OR @Quin =0) AND
	(sueliquidacion.Decena = @Decena OR @Decena =0) AND
	(sueliquidacion.Semana = @Semana OR @Semana =0) AND
	(sueliquidacion.Vez = @Vez OR @Vez =0) 

SELECT @Valor2 = SUM(sueTerminadaRetro.Importe)
	from sueLiquidacion INNER JOIN sueTerminadaRetro ON 
	sueLiquidacion.sueLiquidacion = sueTerminadaRetro.sueLiquidacion
	inner join sueConceptos ON 
	sueConceptos.sueConceptos = sueTerminadaRetro.Concepto_Id
	INNER JOIN suePersonal ON 
	suePersonal.genEntidades = sueTerminadaRetro.Legajo
	LEFT JOIN conAsientos ON 
	conAsientos.conAsientos = sueLiquidacion.sueLiquidacion
	Where ISNULL(conAsientos.Anulado,0) = 0 and
			suePersonal.Legajo = @Legajo and 
			sueConceptos.Concepto_Id between @ConceptoDesde and @ConceptoHasta and
			sueliquidacion.Anio = @Anio and 
			 (sueliquidacion.Mes = @Mes OR @Mes =0) AND
			 (sueliquidacion.Quincena = @Quin OR @Quin =0) AND
			 (sueliquidacion.Decena = @Decena OR @Decena =0) AND
			 (sueliquidacion.Semana = @Semana OR @Semana =0) AND
			 (sueliquidacion.Vez = @Vez OR @Vez =0) AND
			 (sueTerminadaRetro.MesRetro <> @Mes OR sueTerminadaRetro.AnioRetro <> @Anio)

SELECT @Valor3 = SUM(sueTerminadaRetro.Importe)
	from sueLiquidacion INNER JOIN sueTerminadaRetro ON 
	sueLiquidacion.sueLiquidacion = sueTerminadaRetro.sueLiquidacion
	inner join sueConceptos ON 
	sueConceptos.sueConceptos = sueTerminadaRetro.Concepto_Id
	INNER JOIN suePersonal ON 
	suePersonal.genEntidades = sueTerminadaRetro.Legajo
	LEFT JOIN conAsientos ON 
	conAsientos.conAsientos = sueLiquidacion.sueLiquidacion
	Where ISNULL(conAsientos.Anulado,0) = 0 and
			suePersonal.Legajo = @Legajo and 
			sueConceptos.Concepto_Id between @ConceptoDesde and @ConceptoHasta and
			sueTerminadaRetro.AnioRetro = @Anio and 
			 (sueTerminadaRetro.MesRetro = @Mes OR @Mes =0) AND
			 (sueLiquidacion.Mes <> @Mes OR sueLiquidacion.Anio <> @Anio)

SELECT isnull(@Valor, 0) - isnull(@Valor2, 0) + isnull(@Valor3, 0)

GO




DROP PROCEDURE sueFormDATO
GO

CREATE PROCEDURE sueFormDATO
(
	@Legajo int,
	@Concepto INT,
	@Anio INT, 
	@Mes INT, 
	@Quin Int, 
	@Decena Int,
	@Semana Int, 
	@Vez INT
	
)
as
DECLARE @Valor as Numeric(18,4)
DECLARE @Valor2 as Numeric(18,4)
select @Valor = sueDato.Dato,
		@Valor2 = sueDato.Dato2
	from sueLiquidacion INNER JOIN sueDato ON 
	sueLiquidacion.sueLiquidacion =  sueDato.sueLiquidacion
	inner join sueConceptos ON 
	sueConceptos.sueConceptos = sueDato.Concepto_Id
	INNER JOIN suePersonal ON 
	suePersonal.genEntidades = sueDato.Legajo
	Where
			suePersonal.Legajo = @Legajo and 
			sueConceptos.Concepto_Id = @Concepto and
			sueliquidacion.Anio = @Anio and 
			 sueliquidacion.Mes = @Mes AND
			 sueliquidacion.Quincena = @Quin  AND
			 sueliquidacion.Decena = @Decena AND
			 sueliquidacion.Semana = @Semana  AND
			 sueliquidacion.Vez = @Vez 

SELECT isnull(@Valor, 0), isnull(@Valor2, 0)

GO



DROP PROCEDURE sueFormSUMAA
GO

CREATE PROCEDURE sueFormSUMAA
(
	@Legajo int,
	@ConceptoDesde INT,
	@ConceptoHasta INT,
	@Anio INT, 
	@Mes INT, 
	@Quin Int, 
	@Decena Int,
	@Semana Int, 
	@Vez INT, 
	@Propiedad VarChar(10)
)
as
-- DEBE TOMAR EN CUENTA EL SIGNO
DECLARE @Valor as Numeric(18,4)
select @Valor = SUM(sueTerminada.Importe*sueTerminada.Signo)
	from sueLiquidacion INNER JOIN sueTerminada ON 
	sueLiquidacion.sueLiquidacion =  sueTerminada.sueLiquidacion
	inner join sueConceptos ON 
	sueConceptos.sueConceptos = sueTerminada.Concepto_Id
	INNER JOIN suePersonal ON 
	suePersonal.genEntidades = sueTerminada.Legajo
	LEFT JOIN conAsientos ON 
	conAsientos.conAsientos = sueLiquidacion.sueLiquidacion
	INNER JOIN sueConceptosPropValor ON 
		sueConceptosPropValor.Concepto_Id = sueConceptos.sueConceptos and 
		sueConceptosPropValor.SiNo = 1 
	INNER JOIN sueConceptosProp ON
	sueConceptosProp.sueConceptosProp = sueConceptosPropValor.Propiedad 
	Where
			sueConceptosProp.Propiedad = @Propiedad and 
			ISNULL(conAsientos.Anulado,0) = 0 and
			suePersonal.Legajo = @Legajo and 
			sueConceptos.Concepto_Id between @ConceptoDesde and @ConceptoHasta and
			sueliquidacion.Anio = @Anio and 
			 (sueliquidacion.Mes = @Mes OR @Mes =0) AND
			 (sueliquidacion.Quincena = @Quin OR @Quin =0) AND
			 (sueliquidacion.Decena = @Decena OR @Decena =0) AND
			 (sueliquidacion.Semana = @Semana OR @Semana =0) AND
			 (sueliquidacion.Vez = @Vez OR @Vez =0)

SELECT isnull(@Valor, 0)

GO

DROP PROCEDURE sueFormTablaGan
GO
CREATE PROCEDURE sueFormTablaGan   
(  
 @Tabla_Id Int,   
 @Valor Numeric(18,4)  
)  
AS
IF @Valor <= 0
	SELECT 0.00 Desde, 0.00 Hasta, 0.00 Porcentaje, 0.00 Minimo
ELSE
	SELECT TOP 1   
		ISNULL((SELECT MAX(Hasta) From sueGanancias sueGananciasD   
	WHERE  
		sueGananciasD.TabGan_Id = sueGanancias.TabGan_Id AND   
		sueGananciasD.Hasta < sueGanancias.Hasta),0) as Desde,  
		 Hasta, Porcentaje, Minimo  
	FROM sueGanancias   
	WHERE  
		sueGanancias.TabGan_Id = @Tabla_Id and   
		sueGanancias.Hasta >= @Valor  
	ORDER BY 1
GO




DROP PROCEDURE sueFormTabla
go
CREATE PROCEDURE sueFormTabla
(
	@Tabla_Id Int, 
	@Valor Numeric(18,4)
)
AS
	SELECT TOP 1 Fila, Valor
	FROM sueTabla
		Where
			sueTabla.Tabla_Id = @Tabla_Id and 
			sueTabla.Fila >= @Valor
			ORDER BY 1
go

	
DROP PROCEDURE sueFormCONCACUM
GO
CREATE PROCEDURE sueFormCONCACUM
(
	@Concepto_Id INT, 
	@Legajo INT, 
	@Fecha DateTime,
	@Empresa_Id int
)

as

SELECT sueConcAcum.sueConcAcum, MontoTope, Descuento, Acumulado
FROM sueConcAcum 
	INNER JOIN suePersonal ON suePersonal.genEntidades = sueConcAcum.Legajo 
	INNER JOIN sueConceptos ON sueConceptos.sueConceptos = sueConcAcum.Concepto_Id
	INNER JOIN sueConcAcumSegmento ON sueConcAcumSegmento.sueConcAcum = sueConcAcum.sueConcAcum
Where
		sueConcAcumSegmento.Empresa_Id = @Empresa_Id and 
		sueConcAcum.Anulado = 0 and 
		sueConcAcum.Fecha <= @Fecha and 
		sueConcAcum.MontoTope >  sueConcAcum.Acumulado and 
		suePersonal.Legajo = @Legajo and 
		sueConceptos.Concepto_Id = @Concepto_Id
GO



DROP PROCEDURE sueFormSUMAAFPago
GO

CREATE PROCEDURE sueFormSUMAAFPago
(
	@Legajo int,
	@ConceptoDesde INT,
	@ConceptoHasta INT,
	@Anio INT, 
	@Mes INT, 
	@Quin Int, 
	@Decena Int,
	@Semana Int, 
	@Vez INT, 
	@Propiedad VarChar(10)
)
as
DECLARE @Valor as Numeric(18,4)
Select @Valor = SUM(sueTerminada.Importe)
	From sueLiquidacion
	Inner Join sueLiquidacion sueLiqFechaPago On sueLiqFechaPago.sueLiquidacion = sueLiquidacion.sueLiquidacion
	Inner Join sueTerminada ON sueLiqFechaPago.sueLiquidacion = sueTerminada.sueLiquidacion --sueLiqFechaPago.FechaPago >= sueLiquidacion.FechaPago And sueLiquidacion.Anio = @Anio  
	Inner Join sueConceptos ON sueConceptos.sueConceptos = sueTerminada.Concepto_Id
	Inner Join suePersonal ON suePersonal.genEntidades = sueTerminada.Legajo
	Left Join conAsientos ON conAsientos.conAsientos = sueLiquidacion.sueLiquidacion
	Inner Join sueConceptosPropValor ON sueConceptosPropValor.Concepto_Id = sueConceptos.sueConceptos and 
		sueConceptosPropValor.SiNo = 1 
	Inner Join sueConceptosProp ON sueConceptosProp.sueConceptosProp = sueConceptosPropValor.Propiedad 
	Where
			sueConceptosProp.Propiedad = @Propiedad and 
			ISNULL(conAsientos.Anulado,0) = 0 and
			suePersonal.Legajo = @Legajo and 
			sueConceptos.Concepto_Id between @ConceptoDesde and @ConceptoHasta and
			sueLiqFechaPago.Anio = @Anio and 
			sueLiqFechaPago.Mes = @Mes AND
			sueLiqFechaPago.Quincena = @Quin AND
			sueLiqFechaPago.Decena = @Decena AND
			sueLiqFechaPago.Semana = @Semana AND
			sueLiqFechaPago.Vez = @Vez And
			sueLiquidacion.FechaPago <= sueLiqFechaPago.FechaPago And
			sueLiquidacion.Anio = @Anio

SELECT isnull(@Valor, 0)

GO

Drop Procedure sueFormEnvac
Go
Create Procedure sueFormEnvac
(
@pLegajo int,
@pFechaDesde datetime,
@pFechaHasta datetime
)
As
Select FechaDesde, FechaHasta 
FROM sueVacTomadas
Inner Join suePersonal On suePersonal.genEntidades = sueVacTomadas.Legajo
WHERE suePersonal.Legajo = @pLegajo AND
	(FechaDesde Between @pFechaDesde And @pFechaHasta Or
	FechaHasta Between @pFechaDesde And @pFechaHasta Or
	FechaDesde <= @pFechaDesde And FechaHasta >= @pFechaDesde Or
	FechaHasta >= @pFechaHasta And @pFechaDesde <= @pFechaHasta)
Go

Drop procedure sueFormGanCony
Go
Create procedure sueFormGanCony
(
@pLegajo int
)
As
Select ACargoDesde, FechaBaja 
From sueFamiliares
Where
Legajo = @pLegajo And Relacion In ('C','O') And Ganancias = 1
Go

Drop procedure sueFormGanOtro
Go
Create procedure sueFormGanOtro
(
@pLegajo int
)
As
Select ACargoDesde, FechaBaja 
From sueFamiliares
Where
Legajo = @pLegajo And Relacion <> 'C' And Relacion <> 'H' And Ganancias = 1
Go



DROP PROCEDURE sueFormSUMSGN
GO

CREATE PROCEDURE sueFormSUMSGN
(
	@Legajo int,
	@ConceptoDesde INT,
	@ConceptoHasta INT,
	@Anio INT, 
	@Mes INT, 
	@Quin Int, 
	@Decena Int,
	@Semana Int, 
	@Vez INT
	
)
as
DECLARE @Valor as Numeric(18,4)
select @Valor = SUM(sueTerminada.Importe* sueConceptos.Signo)
	from sueLiquidacion INNER JOIN sueTerminada ON 
	sueLiquidacion.sueLiquidacion =  sueTerminada.sueLiquidacion
	inner join sueConceptos ON 
	sueConceptos.sueConceptos = sueTerminada.Concepto_Id
	INNER JOIN suePersonal ON 
	suePersonal.genEntidades = sueTerminada.Legajo
	LEFT JOIN conAsientos ON 
	conAsientos.conAsientos = sueLiquidacion.sueLiquidacion
	Where
			ISNULL(conAsientos.Anulado,0) = 0 and
			suePersonal.Legajo = @Legajo and 
			sueConceptos.Concepto_Id between @ConceptoDesde and @ConceptoHasta and
			sueliquidacion.Anio = @Anio and 
			 (sueliquidacion.Mes = @Mes OR @Mes =0) AND
			 (sueliquidacion.Quincena = @Quin OR @Quin =0) AND
			 (sueliquidacion.Decena = @Decena OR @Decena =0) AND
			 (sueliquidacion.Semana = @Semana OR @Semana =0) AND
			 (sueliquidacion.Vez = @Vez OR @Vez =0)

SELECT isnull(@Valor, 0)

GO

DROP PROCEDURE sueFormDVac
GO
CREATE PROCEDURE sueFormDVac
(
	@Legajo Int,
	@FechaDesde DateTime, 
	@FechaHasta DateTime
)
AS
DECLARE @Valor as Numeric(18,4)
SELECT @Valor = SUM(Dias) FROM sueVacTomadas
	INNER JOIN suePersonal ON sueVacTomadas.Legajo = suePersonal.genEntidades
	WHERE suePersonal.Legajo = @Legajo AND
	sueVacTomadas.FechaDesde BETWEEN @FechaDesde AND @FechaHasta
	
SELECT ISNULL(@Valor, 0)
GO


DROP PROCEDURE sueFormGanHijo  
GO
CREATE PROCEDURE sueFormGanHijo  
(  
@pLegajo int  
)  
As  
Select ACargoDesde, FechaBaja, Incapacitado, FechaNacimiento   
From sueFamiliares 
Where Legajo = @pLegajo And Relacion = 'H' And Ganancias = 1 AND
Incapacitado = 1
UNION 
Select ACargoDesde, FechaBaja, Incapacitado, FechaNacimiento   
From sueFamiliares 
Where Legajo = @pLegajo And Relacion = 'H' And Ganancias = 1 
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueGanancias.sql*/
DROP PROCEDURE sueGananciasGuardar
GO
CREATE PROCEDURE sueGananciasGuardar
(
@pTabGan_Id int,
@pHasta qMonedaD2,
@pPorcentaje qPorcentaje,
@pMinimo qMonedaD2,
@pVer int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM sueGanancias WHERE (TabGan_Id = @pTabGan_Id) AND (Hasta = @pHasta)))
BEGIN 
	UPDATE sueGanancias
	SET		Porcentaje = @pPorcentaje,
		Minimo = @pMinimo,
		Ver=@pVer
	WHERE (TabGan_Id = @pTabGan_Id) AND (Hasta = @pHasta)
END 
ELSE 
BEGIN 
	INSERT INTO sueGanancias
	(
		TabGan_Id,
		Hasta,
		Porcentaje,
		Minimo,
		Ver
	)
	VALUES 
	(
		@pTabGan_Id,
		@pHasta,
		@pPorcentaje,
		@pMinimo,
		@pVer
	)
END 

GO



DROP PROCEDURE sueGananciasEliminar
GO
CREATE PROCEDURE sueGananciasEliminar
(
@pTabGan_Id int,
@pHasta qMonedaD2 = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM sueGanancias 
WHERE (TabGan_Id = @pTabGan_Id)
AND (Hasta = ISNULL(@pHasta, Hasta))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueGanTitulo.sql*/
DROP PROCEDURE sueGanTituloGuardar
GO
CREATE PROCEDURE sueGanTituloGuardar
(
@pTabGan_Id int,
@pDescripcion varchar(60),
@pUsuario_Id int = NULL,
@pFechaRegistro qFechaHora,
@pCodigo varchar(20) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM sueGanTitulo WHERE (TabGan_Id = @pTabGan_Id)))
BEGIN 
	UPDATE sueGanTitulo
	SET		Descripcion = @pDescripcion,
		Usuario_Id = @pUsuario_Id,
		FechaRegistro = dbo.FechaActual(),
		Codigo=@pCodigo
	WHERE (TabGan_Id = @pTabGan_Id)
END 
ELSE 
BEGIN 
	INSERT INTO sueGanTitulo
	(
		TabGan_Id,
		Descripcion,
		Usuario_Id,
		FechaRegistro,
		Codigo
	)
	VALUES 
	(
		@pTabGan_Id,
		@pDescripcion,
		@pUsuario_Id,
		getDate(),
		@pCodigo
	)
END 

GO

DROP PROCEDURE sueGanTituloDatos
GO
CREATE PROCEDURE sueGanTituloDatos
(
@pTabGan_Id int
)
AS
SET NOCOUNT ON 

SELECT sueGanTitulo.TabGan_Id, sueGanTitulo.Descripcion, sueGanTitulo.Usuario_Id,
	sueGanTitulo.FechaRegistro,sueGanTitulo.Codigo, GetDate() as FechaCodigo
	
FROM sueGanTitulo 
WHERE (TabGan_Id = @pTabGan_Id)
select TabGan_Id, Hasta, Porcentaje, Minimo,Ver
from sueGanancias
where TabGan_Id=@pTabGan_Id
 
 RETURN @@Error 

GO

DROP PROCEDURE sueGanTituloEliminar
GO
CREATE PROCEDURE sueGanTituloEliminar
(
@pTabGan_Id int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM sueGanTitulo 
WHERE (TabGan_Id = ISNULL(@pTabGan_Id, TabGan_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueGenerarArchivosTxt.sql*/

drop PROCEDURE sueGenerarArchivosTxtDatos
go


CREATE PROCEDURE sueGenerarArchivosTxtDatos(

@pArchivo_Id varchar(15)
)

AS
SET NOCOUNT ON 
DECLARE @Fecha DATETIME


SET @Fecha= (SELECT GETDATE())


SELECT 
sueArchivosTxt.Archivo_Id, sueArchivosTxt.Descripcion,sueArchivosTxt.Inactivo,sueArchivosTxt.Posteado,@Fecha as FechaDesde,@Fecha as FechaHasta,'' as Segmento_Id,
0 AS Segmento1N,0 AS Segmento2N,0 AS Segmento3N,0 AS Segmento4N,
'' as Segmento1C,'' as Segmento2C,'' as Segmento3C,'' as Segmento4C,0 as
LegajoDesde,99999999 as LegajoHasta,' ' as SucursalDesde,'ZZZZ' as SucursalHasta,'S' as GenerarBy,'' as DescripcionGrupos,'' as Txt,'' as Grupo_Id, '' as GrupoDescripcion
, 0 as Anio,0 as Mes,0 as Quincena,0 Semana,0 Decena,0 Vez,' ' as TipoPagoDesde ,'ZZZZZ' as TipoPagoHasta, '' Texto1, '' Texto2, '' Texto3,
GETDATE() Fecha1, GETDATE() Fecha2, GETDATE() Fecha3, 0 LegajoActual

From sueArchivosTxt

WHERE 
	@pArchivo_Id =sueArchivosTxt.Archivo_Id

RETURN @@Error 




GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suegenerarArchivosTxt2.sql*/
drop PROCEDURE sueGenerarArchivosTxtDatos2
go


CREATE PROCEDURE sueGenerarArchivosTxtDatos2(

@pArchivo_Id varchar(15)
)

AS
SET NOCOUNT ON 
DECLARE @Fecha DATETIME

SET @Fecha = (SELECT GETDATE())



--encabezado
exec sueGenerarArchivosTxtDatos @pArchivo_Id
/*
SELECT 
sueArchivosTxt.Archivo_id, sueArchivosTxt.Descripcion,sueArchivosTxt.Inactivo,sueArchivosTxt.Posteado,@Fecha as FechaDesde,@Fecha as FechaHasta,'' as Segmento_Id,
0 AS Segmento1N,0 AS Segmento2N,0 AS Segmento3N,0 AS Segmento4N,
'' as Segmento1C,'' as Segmento2C,'' as Segmento3C,'' as Segmento4C,0 as
LegajoDesde,0 as LegajoHasta,' ' as SucursalDesde,'ZZZZ' as SucursalHasta,'S' as GenerarBy,'' as DescripcionGrupos,'' as Txt,'' as Grupo_id, '' as GrupoDescripcion
, 0 as Anio,0 as Mes,0 as Quincena,0 Semana,0 Decena,0 Vez
from sueArchivosTxt
	WHERE 
	@pArchivo_Id =sueArchivosTxt.Archivo_Id

*/

	--cuerpo

SELECT sueArchivosTxt.Archivo_Id,sueArchivosTxt.Descripcion as DescripcionCabecera,Columna,Formula,Tipo,Longitud,Decimales,Relleno,sueArchivosTxtCuerpo.Descripcion,Orden,Formato
From sueArchivosTxtCuerpo
inner join sueArchivosTxt on sueArchivosTxt.sueArchivosTxt=sueArchivosTxtCuerpo.sueArchivosTxt 
where
@pArchivo_Id =sueArchivosTxt.Archivo_Id

--resumenes
select Res1.Archivo_Id as Res1Archivo_Id,sueArchivosTxt.PosicionResumen1, Res2.Archivo_Id as Res2Archivo_Id ,sueArchivosTxt.PosicionResumen2

From sueArchivosTxt
left join sueArchivosTxt as Res1 on Res1.sueArchivosTxt=sueArchivosTxt.Resumen1
left join sueArchivosTxt as Res2 on Res2.sueArchivosTxt=sueArchivosTxt.Resumen2
where 
@pArchivo_Id =sueArchivosTxt.Archivo_Id

---formulas resumen1
SELECT Res1.Archivo_Id,Res1.Descripcion as DescripcionCabecera,Columna,Formula,Tipo,Longitud,Decimales,Relleno,sueArchivosTxtCuerpo.Descripcion,Orden,Formato
From sueArchivosTxtCuerpo
inner join sueArchivosTxt on sueArchivosTxt.sueArchivosTxt=sueArchivosTxtCuerpo.sueArchivosTxt 
inner join sueArchivosTxt as Res1 on Res1.sueArchivosTxt=sueArchivosTxt.Resumen1
where
@pArchivo_Id =sueArchivosTxt.Archivo_Id

---formulas resumen2
SELECT Res2.Archivo_Id,Res2.Descripcion as DescripcionCabecera,Columna,Formula,Tipo,Longitud,Decimales,Relleno,sueArchivosTxtCuerpo.Descripcion,Orden,Formato
From sueArchivosTxtCuerpo
inner join sueArchivosTxt on sueArchivosTxt.sueArchivosTxt=sueArchivosTxtCuerpo.sueArchivosTxt 
inner join sueArchivosTxt as Res2 on Res2.sueArchivosTxt=sueArchivosTxt.Resumen2
where
@pArchivo_Id =sueArchivosTxt.Archivo_Id

RETURN @@Error 
GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueGenerarInfDefiniblesDatos.sql*/
drop procedure sueGenerarInfDefiniblesDatos
go
create procedure sueGenerarInfDefiniblesDatos
(
@pInforme_Id varchar(15),
@pSegmento_Id varchar(5),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 
select Informe_Id,Descripcion, LegajoDesde,LegajoHasta,SucursalDesde,SucursalHasta,Centro1Desde,Centro1Hasta,Centro2Desde,Centro2Hasta,
ConvenioDesde,ConvenioHasta,Um,AgrupadoPor,TamanioHoja,AgrupadoPor,Horizontal,AnchoNombre,Empresa_Id,Inactivo,'' as NombreArchivo from sueInfDefinibles
WHERE (Informe_Id = @pInforme_Id)

declare @sueLiquidacion bigint 
SET @sueLiquidacion = (select Asiento_Id 
	from  genAsiSegmentos
	where
Segmento_Id=dbo.FuncFKgenSegmentos(@pSegmento_Id) and
Segmento1N=@pSegmento1N and Segmento1C=@pSegmento1C and
Segmento2N=@pSegmento2N and Segmento2C=@pSegmento2C and
Segmento3N=@pSegmento3N and Segmento3C=@pSegmento3C and
Segmento4N= @pSegmento4N and Segmento4C= @pSegmento4C and
Empresa_Id=@pEmpresa_Id
)
SELECT sueLiquidacion.sueLiquidacion, 
	genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, 
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, 
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	sueGrupos.Grupo_Id, sueGrupos.Descripcion as DescripcionGrupos,
	sueLiquidacion.Descripcion,
	 sueLiquidacion.FechaInicial, sueLiquidacion.FechaFinal,
	sueLiquidacion.Periodo_Id, suePeriodicidad.Descripcion as DescripcionPeriodicidad, sueLiquidacion.PorEmpleado, sueLiquidacion.Anio,
	sueLiquidacion.Mes, sueLiquidacion.Quincena, sueLiquidacion.Semana, sueLiquidacion.Decena,
	sueLiquidacion.Vez
FROM sueLiquidacion 
inner join genAsiSegmentos ON 
sueLiquidacion.sueLiquidacion =  genAsiSegmentos.Asiento_Id
inner join genSegmentos ON  genSegmentos.genSegmentos =  genAsiSegmentos.Segmento_Id
LEFT JOIN conAsientos  ON (conAsientos.conAsientos = sueLiquidacion.sueLiquidacion)
INNER JOIN sueGrupos  ON (sueGrupos.sueGrupos = sueLiquidacion.Grupo_Id)
LEFT JOIN suePeriodicidad  ON (suePeriodicidad.Periodo_Id = sueLiquidacion.Periodo_Id)
WHERE  
genSegmentos.Segmento_Id=@pSegmento_Id and
genAsiSegmentos.Segmento1N=@pSegmento1N and 
genAsiSegmentos.Segmento1C=@pSegmento1C and
genAsiSegmentos.Segmento2N=@pSegmento2N and 
genAsiSegmentos.Segmento2C=@pSegmento2C and
genAsiSegmentos.Segmento3N=@pSegmento3N and 
genAsiSegmentos.Segmento3C=@pSegmento3C and
genAsiSegmentos.Segmento4N= @pSegmento4N and 
genAsiSegmentos.Segmento4C= @pSegmento4C and
genAsiSegmentos.Empresa_Id=@pEmpresa_Id

 RETURN @@Error 
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueGrupos.sql*/

-- exec suegruposDatos 1
DROP PROCEDURE sueGruposGuardar
GO
CREATE PROCEDURE sueGruposGuardar
(
@pGrupo_Id int,
@pGrupo_Id_Nuevo int,
@pDescripcion varchar(100),
@pEmpresa_Id int = NULL,
@pSegmento_Id varchar(10) = NULL,
@pPeriodo_Id char(1) = NULL,
@pCtaSueldoAPagar varchar(25) = NULL,
@pInactivo Sino,
@pPosteado Sino,
@pUsuario_Id int
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM sueGrupos WHERE (Grupo_Id = @pGrupo_Id)))
BEGIN 
	UPDATE sueGrupos
	SET		@lIdentidad = sueGrupos,
		Grupo_Id = @pGrupo_Id_Nuevo,
		Descripcion = @pDescripcion,
		Empresa_Id = @pEmpresa_Id,
		Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id),
		Periodo_Id = @pPeriodo_Id,
		CtaSueldoAPagar = dbo.FuncFKconCuentas(@pCtaSueldoAPagar),
		Inactivo = @pInactivo,
		Posteado = @pPosteado,
		Usuario_Id = @pUsuario_Id
	WHERE (Grupo_Id = @pGrupo_Id)
END 
ELSE 
BEGIN 
	INSERT INTO sueGrupos
	(
		Grupo_Id,
		Descripcion,
		Empresa_Id,
		Segmento_Id,
		Periodo_Id,
		CtaSueldoAPagar,
		Inactivo,
		Posteado,
		Usuario_Id
	)
	VALUES 
	(
		@pGrupo_Id,
		@pDescripcion,
		@pEmpresa_Id,
		dbo.FuncFKgenSegmentos(@pSegmento_Id),
		@pPeriodo_Id,
		dbo.FuncFKconCuentas(@pCtaSueldoAPagar),
		@pInactivo,
		@pPosteado,
		@pUsuario_Id
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE sueGruposDatos
GO
CREATE PROCEDURE sueGruposDatos
(
@pGrupo_Id int
)
AS
SET NOCOUNT ON 

SELECT sueGrupos.sueGrupos, sueGrupos.Grupo_Id, sueGrupos.Descripcion, sueGrupos.Grupo_Id Grupo_Id_Nueva,
	sueGrupos.Empresa_Id, Cast( Case When sueGrupos.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, genSegmentos.Segmento_Id, 
	genSegmentos.Descripcion as DescripcionSegmento, suePeriodicidad.Periodo_Id, suePeriodicidad.Descripcion as DescripcionPeriodo,
	conCuentas.Cuenta_Id as CtaSueldoAPagar, conCuentas.Descripcion as DescripcionCtaSueldoAPagar, sueGrupos.Inactivo, sueGrupos.Posteado,
	sueGrupos.Usuario_Id
FROM sueGrupos 
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = sueGrupos.CtaSueldoAPagar)
left join genSegmentos on genSegmentos.genSegmentos=sueGrupos.Segmento_Id
left join suePeriodicidad on suePeriodicidad.Periodo_Id=sueGrupos.Periodo_Id
WHERE (sueGrupos.Grupo_Id = @pGrupo_Id)
 


  Declare @pidentity bigint= dbo.FuncFKsueGrupos(@pGrupo_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'sueGrupos'
 RETURN @@Error 

GO

DROP PROCEDURE sueGruposEliminar
GO
CREATE PROCEDURE sueGruposEliminar
(
@pGrupo_Id int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM sueGrupos 
WHERE (Grupo_Id = @pGrupo_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKsueGrupos
GO

CREATE FUNCTION FuncFKsueGrupos
(
@pGrupo_Id int
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = sueGrupos FROM sueGrupos WHERE 
	Grupo_Id = @pGrupo_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueImpNombre.sql*/
DROP PROCEDURE sueImpNombreGuardar
GO
CREATE PROCEDURE sueImpNombreGuardar
(
@pImporte_Id int,
@pDescripcion varchar(60),
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM sueImpNombre WHERE (Importe_Id = @pImporte_Id)))
BEGIN 
	UPDATE sueImpNombre
	SET		Descripcion = @pDescripcion,
		Usuario_Id = @pUsuario_Id
	WHERE (Importe_Id = @pImporte_Id)
END 
ELSE 
BEGIN 
	INSERT INTO sueImpNombre
	(
		Importe_Id,
		Descripcion,
		Usuario_Id
	)
	VALUES 
	(
		@pImporte_Id,
		@pDescripcion,
		@pUsuario_Id
	)
END 

GO

DROP PROCEDURE sueImpNombreDatos
GO
CREATE PROCEDURE sueImpNombreDatos
(
@pImporte_Id int
)
AS
SET NOCOUNT ON 

SELECT sueImpNombre.Importe_Id, sueImpNombre.Descripcion, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario
FROM sueImpNombre 
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = sueImpNombre.Usuario_Id)
WHERE (Importe_Id = @pImporte_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE sueImpNombreEliminar
GO
CREATE PROCEDURE sueImpNombreEliminar
(
@pImporte_Id int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM sueImpNombre 
WHERE (Importe_Id = ISNULL(@pImporte_Id, Importe_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueInfDefFormula.sql*/
DROP PROCEDURE sueInfDefFormulasGuardar
GO
CREATE PROCEDURE sueInfDefFormulasGuardar
(
@psueInfDefinibles int,
@pColumna int,
@pAlias varchar(10),
@pTitulo varchar(50),
@pFormula varchar(max),
@pFormato varchar(20),
@pAncho numeric(6,2),
@pOrden int,
@pTipo varchar(1),
@pCheckCero sino
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM sueInfDefFormulas WHERE (sueInfDefinibles = @psueInfDefinibles) AND (Columna = @pColumna)))
BEGIN 
	UPDATE sueInfDefFormulas
	SET Alias = @pAlias,
		Titulo = @pTitulo,
		Formula = @pFormula,
		Formato = @pFormato,
		Ancho = @pAncho,
		Orden = @pOrden,
		Tipo = @pTipo,
		CheckCero = @pCheckCero
	WHERE (sueInfDefinibles = @psueInfDefinibles) AND (Columna = @pColumna)
END 
ELSE 
BEGIN 
	INSERT INTO sueInfDefFormulas
	(
		sueInfDefinibles,
		Columna,
		Alias,
		Titulo,
		Formula,
		Formato,
		Ancho,
		Orden,
		Tipo,
		CheckCero
	)
	VALUES 
	(
		@psueInfDefinibles,
		@pColumna,
		@pAlias,
		@pTitulo,
		@pFormula,
		@pFormato,
		@pAncho,
		@pOrden,
		@pTipo,
		@pCheckCero
	)
END 

GO

DROP PROCEDURE sueInfDefFormulasDatos
GO
CREATE PROCEDURE sueInfDefFormulasDatos
(
@psueInfDefinibles varchar(15),
@pColumna int=null
)
AS
SET NOCOUNT ON 

SELECT sueInfDefinibles.Informe_Id, sueInfDefinibles.Descripcion as DescripcionInfDefinibles, sueInfDefFormulas.Columna, sueInfDefFormulas.Alias,
	sueInfDefFormulas.Titulo, sueInfDefFormulas.Formula, sueInfDefFormulas.Formato, sueInfDefFormulas.Ancho,
	sueInfDefFormulas.Orden, sueInfDefFormulas.Tipo, sueInfDefFormulas.CheckCero
FROM sueInfDefFormulas 
INNER JOIN sueInfDefinibles  ON (sueInfDefinibles.sueInfDefinibles = sueInfDefFormulas.sueInfDefinibles)
WHERE sueInfDefinibles.Informe_Id = @psueInfDefinibles
AND Columna = ISNULL(@pColumna,Columna)
 
 RETURN @@Error 

GO

DROP PROCEDURE sueInfDefFormulasEliminar
GO
CREATE PROCEDURE sueInfDefFormulasEliminar
(
@pInforme_Id varchar(15),
@pColumna int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM sueInfDefFormulas 
WHERE (sueInfDefinibles = dbo.FuncFKsueInfDefinibles(@pInforme_Id))
AND (Columna = ISNULL(@pColumna, Columna))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueInfDefinibles.sql*/
DROP PROCEDURE sueInfDefiniblesGuardar
GO
CREATE PROCEDURE sueInfDefiniblesGuardar
(
@pInforme_Id varchar(15),
@pInforme_Id_Nuevo varchar(15),
@pDescripcion varchar(100),
@pAgrupadoPor varchar(3),
@pTamanioHoja varchar(2) = NULL,
@pHorizontal Sino,
@pUm varchar(2),
@pLegajoDesde int,
@pLegajoHasta int,
@pSucursalDesde varchar(4),
@pSucursalHasta varchar(4),
@pConvenioDesde varchar(5),
@pConvenioHasta varchar(5),
@pAnchoNombre int,
@pCentro1Desde varchar(8),
@pCentro1Hasta varchar(8),
@pCentro2Desde varchar(8),
@pCentro2Hasta varchar(8),
@pUsuario_Id int,
@pEmpresa_Id int = NULL,
@pInactivo Sino,
@pPosteado Sino
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM sueInfDefinibles WHERE (Informe_Id = @pInforme_Id)))
BEGIN 
	UPDATE sueInfDefinibles
	SET		@lIdentidad = sueInfDefinibles,
		Informe_Id = @pInforme_Id_Nuevo,
		Descripcion = @pDescripcion,
		AgrupadoPor = @pAgrupadoPor,
		TamanioHoja = @pTamanioHoja,
		Horizontal = @pHorizontal,
		Um = @pUm,
		LegajoDesde = @pLegajoDesde,
		LegajoHasta = @pLegajoHasta,
		SucursalDesde = @pSucursalDesde,
		SucursalHasta = @pSucursalHasta,
		ConvenioDesde = @pConvenioDesde,
		ConvenioHasta = @pConvenioHasta,
		AnchoNombre = @pAnchoNombre,
		Centro1Desde = @pCentro1Desde,
		Centro1Hasta = @pCentro1Hasta,
		Centro2Desde = @pCentro2Desde,
		Centro2Hasta = @pCentro2Hasta,
		Usuario_Id = @pUsuario_Id,
		Empresa_Id = @pEmpresa_Id,
		Inactivo = @pInactivo,
		Posteado = @pPosteado
	WHERE (Informe_Id = @pInforme_Id)
END 
ELSE 
BEGIN 
	INSERT INTO sueInfDefinibles
	(
		Informe_Id,
		Descripcion,
		AgrupadoPor,
		TamanioHoja,
		Horizontal,
		Um,
		LegajoDesde,
		LegajoHasta,
		SucursalDesde,
		SucursalHasta,
		ConvenioDesde,
		ConvenioHasta,
		AnchoNombre,
		Centro1Desde,
		Centro1Hasta,
		Centro2Desde,
		Centro2Hasta,
		Usuario_Id,
		Empresa_Id,
		Inactivo,
		Posteado
	)
	VALUES 
	(
		@pInforme_Id,
		@pDescripcion,
		@pAgrupadoPor,
		@pTamanioHoja,
		@pHorizontal,
		@pUm,
		@pLegajoDesde,
		@pLegajoHasta,
		@pSucursalDesde,
		@pSucursalHasta,
		@pConvenioDesde,
		@pConvenioHasta,
		@pAnchoNombre,
		@pCentro1Desde,
		@pCentro1Hasta,
		@pCentro2Desde,
		@pCentro2Hasta,
		@pUsuario_Id,
		@pEmpresa_Id,
		@pInactivo,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE sueInfDefiniblesDatos
GO
CREATE PROCEDURE sueInfDefiniblesDatos
(
@pInforme_Id varchar(15)
)
AS
SET NOCOUNT ON 

SELECT sueInfDefinibles.sueInfDefinibles, sueInfDefinibles.Informe_Id, sueInfDefinibles.Descripcion, sueInfDefinibles.AgrupadoPor,
	sueInfDefinibles.TamanioHoja, genTamanioHoja.Descripcion as DescripcionTamanioHoja, sueInfDefinibles.Horizontal, sueInfDefinibles.Um,
	sueInfDefinibles.LegajoDesde, sueInfDefinibles.LegajoHasta, sueInfDefinibles.SucursalDesde, sueInfDefinibles.SucursalHasta,
	sueInfDefinibles.ConvenioDesde, sueInfDefinibles.ConvenioHasta, sueInfDefinibles.AnchoNombre, sueInfDefinibles.Centro1Desde,
	sueInfDefinibles.Centro1Hasta, sueInfDefinibles.Centro2Desde, sueInfDefinibles.Centro2Hasta, genUsuarios.Usuario_Id,
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario, sueInfDefinibles.Empresa_Id, Cast( Case When sueInfDefinibles.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	sueInfDefinibles.Inactivo, sueInfDefinibles.Posteado
FROM sueInfDefinibles 
LEFT JOIN genTamanioHoja  ON (genTamanioHoja.TamanioHoja = sueInfDefinibles.TamanioHoja)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = sueInfDefinibles.Usuario_Id)
WHERE (Informe_Id = @pInforme_Id)
 
exec sueInfDefFormulasDatos @pInforme_Id, null
--@pInforme_Id


  Declare @pidentity bigint= dbo.FuncFKsueInfDefinibles(@pInforme_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'sueInfDefinibles'
 RETURN @@Error 

GO

DROP PROCEDURE sueInfDefiniblesEliminar
GO
CREATE PROCEDURE sueInfDefiniblesEliminar
(
@pInforme_Id varchar(15) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM sueInfDefinibles 
WHERE (Informe_Id = @pInforme_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKsueInfDefinibles
GO

CREATE FUNCTION FuncFKsueInfDefinibles
(
@pInforme_Id varchar (15)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = sueInfDefinibles FROM sueInfDefinibles WHERE 
	Informe_Id = @pInforme_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueInfDefiniblesImpresion.sql*/
--select * from sueTerminada

drop procedure sueInfDefiniblesImpresionDatos
go
create procedure sueInfDefiniblesImpresionDatos
(
    @pInforme_Id varchar(15)
)
as

DECLARE @Fecha DATETIME
SET @Fecha= (SELECT GETDATE())

Select Informe_Id, Descripcion as DescripcionInforme, '' as Segmento_Id, 0 as Segmento1N, 0 as Segmento2N, 0 as Segmento3N, 0 as Segmento4N, 
'' as Segmento1C, '' as Segmento2C, '' as Segmento3C, '' as Segmento4C, LegajoDesde, LegajoHasta, SucursalDesde, SucursalHasta, 
ConvenioDesde, ConvenioHasta, Centro1Desde, Centro1Hasta, Centro2Desde, Centro2Hasta,  0 AS Grupo_Id, ' ' as DescripcionGrupo,
0 as Anio, 0 as Mes, 0 as Quincena, 0 Semana, 0 Decena, 0 Vez, 'S' as GenerarBy, @Fecha as FechaDesde, @Fecha as FechaHasta
From sueInfDefinibles
Where Informe_Id = @pInforme_Id
go

-- sueInfDefEmpleadosDatos 'SLIQ',2020,1,1,1,' ',' ',' ',' ',1,999,' ','ZZZ',' ','ZZZ',' ','ZZZ',' ','ZZZ',1

DROP PROCEDURE sueInfDefEmpleadosDatos
GO

CREATE PROCEDURE sueInfDefEmpleadosDatos
(
	@Anio int,
	@Mes int,
	@Quincena int,
	@Vez int,
	@Semana int,
	@Decena int,
	@GeneraBy char(1),
	@FechaDesde datetime,
	@FechaHasta datetime,
	@LegajoDesde Int,
	@LegajoHasta Int,
	@SucursalDesde VarChar(4),
	@SucursalHasta VarChar(4),
	@ConvenioDesde VarChar(5),
	@ConvenioHasta VarChar(5),
	@Centro1Desde VarChar(8),
	@Centro1Hasta VarChar(8),
	@Centro2Desde VarChar(8),
	@Centro2Hasta VarChar(8),
	@Empresa_Id Int
)
AS

If @GeneraBy = 'L'
Begin
	SELECT DISTINCT suePersonal.Legajo, suePersonal.Nombres, suePersonal.ApellidoPaterno, 
		suePersonal.ApellidoMaterno
	From sueLiquidacion
	Inner Join conAsientos ON sueLiquidacion.sueLiquidacion = conAsientos.conAsientos 
	Inner Join genAsiSegmentos ON genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
	Inner Join genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	Inner Join sueTerminada ON sueTerminada.sueLiquidacion = sueLiquidacion.sueLiquidacion
	Inner Join suePersonal ON suePersonal.genEntidades = sueTerminada.Legajo
	Inner Join suePersConvenio ON suePersonal.genEntidades = suePersConvenio.Legajo and 
		sueLiquidacion.FechaFinal between suePersConvenio.FechaDesde and suePersConvenio.FechaHasta
	Inner Join sueConvenio ON sueConvenio.sueConvenio = suePersConvenio.Convenio_id
	Inner Join suePersSucursal ON suePersonal.genEntidades = suePersSucursal.Legajo and 
		sueLiquidacion.FechaFinal between suePersSucursal.FechaDesde and suePersSucursal.FechaHasta
	Inner Join genSucursalesEmpr ON genSucursalesEmpr.genSucursalesEmpr = suePersSucursal.Sucursal
	Where
				--genSegmentos.Segmento_Id = @Segmento_Id and 
				--genAsiSegmentos.Segmento1N = @Segmento1N AND 
				--genAsiSegmentos.Segmento2N = @Segmento2N AND 
				--genAsiSegmentos.Segmento3N = @Segmento3N AND 
				--genAsiSegmentos.Segmento4N = @Segmento4N AND 
				--genAsiSegmentos.Segmento1C = @Segmento1C AND 
				--genAsiSegmentos.Segmento2C = @Segmento2C AND 
				--genAsiSegmentos.Segmento3C = @Segmento3C AND 
				--genAsiSegmentos.Segmento4C = @Segmento4C AND
		sueLiquidacion.Anio = @Anio And
		(sueLiquidacion.Mes = @Mes Or @Mes = 0) And
		(sueLiquidacion.Quincena = @Quincena Or @Quincena = 0) And
		(sueLiquidacion.Vez = @Vez Or @Vez = 0) And
		(sueLiquidacion.Semana = @Semana Or @Semana = 0) And
		(sueLiquidacion.Decena = @Decena Or @Decena = 0) And
		genAsiSegmentos.Empresa_Id = @Empresa_Id and 
		suePersonal.Legajo between @LegajoDesde and @LegajoHasta and 
		sueConvenio.Convenio_id Between @ConvenioDesde and @ConvenioHasta  AND 
		genSucursalesEmpr.Sucursal Between @SucursalDesde and @SucursalHasta  and 
		Exists(SELECT 1 from suePersContable ,suePersContableDatos, conCentro1, conCentro2 Where
				suePersContable.Legajo = suePersonal.genEntidades and 
				sueLiquidacion.FechaFinal Between suePersContable.FechaDesde and suePersContable.FechaHasta and
				suePersContableDatos.Legajo = suePersContable.Legajo AND 
				suePersContableDatos.FechaDesde = suePersContable.FechaDesde and 
				conCentro1.conCentro1 = suePersContableDatos.Centro1_Id and 
				conCentro2.conCentro2 = suePersContableDatos.Centro2_Id and 
				conCentro1.Centro1_Id BETWEEN @Centro1Desde And @Centro1Hasta and
				conCentro2.Centro2_Id BETWEEN @Centro2Desde And @Centro2Hasta )
	ORDER BY 1
End

If @GeneraBy = 'A'
Begin
	SELECT DISTINCT suePersonal.Legajo, suePersonal.Nombres, suePersonal.ApellidoPaterno, 
		suePersonal.ApellidoMaterno
	From suePersonal
	INNER JOIN suePersSucursal ON suePersSucursal.Legajo = suePersonal.genEntidades And 
			@FechaHasta BETWEEN suePersSucursal.FechaDesde And suePersSucursal.FechaHasta
	INNER JOIN genSucursalesEmpr ON genSucursalesEmpr.genSucursalesEmpr = suePersSucursal.Sucursal
	Inner join suePersTipoPago On suePersTipoPago.Legajo=suePersonal.Legajo And
			@FechaHasta BETWEEN suePersTipoPago.FechaDesde And suePersTipoPago.FechaHasta
	Inner join sueTipoPago On suePersTipoPago.TipoPago_Id = sueTipoPago.sueTipoPago
	Where
		suePersonal.Legajo Between @LegajoDesde And @LegajoHasta AND 
		suePersonal.FechaIngreso Between @FechaDesde And @FechaHasta AND 
		ISNULL(suePersonal.Empresa_Id, @Empresa_Id) = @Empresa_Id
	ORDER BY 1
End

If @GeneraBy = 'B'
Begin
	SELECT DISTINCT suePersonal.Legajo, suePersonal.Nombres, suePersonal.ApellidoPaterno, 
		suePersonal.ApellidoMaterno
	From suePersonal
	INNER JOIN suePersSucursal ON suePersSucursal.Legajo = suePersonal.genEntidades And 
			@FechaHasta BETWEEN suePersSucursal.FechaDesde And suePersSucursal.FechaHasta
	INNER JOIN genSucursalesEmpr ON genSucursalesEmpr.genSucursalesEmpr = suePersSucursal.Sucursal
	Inner join suePersTipoPago On suePersTipoPago.Legajo=suePersonal.Legajo And
			@FechaHasta BETWEEN suePersTipoPago.FechaDesde And suePersTipoPago.FechaHasta
	Inner join sueTipoPago On suePersTipoPago.TipoPago_Id = sueTipoPago.sueTipoPago
	Where
		suePersonal.Legajo Between @LegajoDesde And @LegajoHasta AND 
		suePersonal.FechaBaja Between @FechaDesde And @FechaHasta AND 
		ISNULL(suePersonal.Empresa_Id, @Empresa_Id) = @Empresa_Id
	ORDER BY 1
End
GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueLiqAsientoRes.sql*/
-- sueLiqAsientoRes 10626
DROP PROCEDURE sueLiqAsientoResDatos
GO
CREATE PROCEDURE sueLiqAsientoResDatos
(
	@sueLiquidacion bigInt
)
as
SELECT genSucursalesEmpr.Sucursal,  genSucursalesEmpr.Descripcion as DescripcionSuc,
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuenta,
	conCentro1.Centro1_Id, conCentro2.Centro2_Id, 
	CASE WHEN SUM(sueMovCont.Importe) >0 THEN SUM(sueMovCont.Importe) ELSE 0 END AS Debe,
	CASE WHEN SUM(sueMovCont.Importe) <0 THEN -SUM(sueMovCont.Importe) ELSE 0 END AS Haber
from sueMovCont INNER JOIN sueLiquidacion ON 
sueMovCont.sueLiquidacion = sueLiquidacion.sueLiquidacion
inner join  conCuentas ON
conCuentas.conCuentas = sueMovCont.Cuenta_Id 
INNER JOIN conCentro1 ON
conCentro1.conCentro1 = sueMovCont.Centro1_Id 
INNER JOIN conCentro2 ON
conCentro2.conCentro2 = sueMovCont.Centro2_Id 
inner join suePersSucursal ON
suePersSucursal.Legajo = sueMovCont.Legajo and 
sueLiquidacion.FechaFinal between suePersSucursal.FechaDesde and suePersSucursal.FechaHasta
INNER JOIN genSucursalesEmpr ON 
genSucursalesEmpr.genSucursalesEmpr =suePersSucursal.Sucursal
Where
	sueLiquidacion.sueLiquidacion = @sueLiquidacion
GROUP BY genSucursalesEmpr.Sucursal,  genSucursalesEmpr.Descripcion ,
	conCuentas.Cuenta_Id, conCuentas.Descripcion ,
	conCentro1.Centro1_Id, conCentro2.Centro2_Id 
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueLiqCateNombre.sql*/
drop procedure sueLiqCategoDatos
go
create procedure sueLiqCategoDatos
(
@pCategoria_Id varchar(5),
@pEmpresa_Id int,
@pFecha datetime
)
as
select Categoria_Id, Descripcion as DescripcionCate, @pFecha as Fecha from sueCategorias
where Categoria_Id=@pCategoria_Id
select sueCategorias.Categoria_Id, sueCategorias.Descripcion as DescripcionCategoria, sueCateNombre.CateNombre_Id, sueCateNombre.Descripcion as DescripcionCateNombre, 
Fecha_Desde, isnull(Valor,0) as Valor, sueLiqImpCatego.Usuario_Id, 0 as Empresa_Id from sueCateNombre
left join sueLiqImpCatego on sueCateNombre.CateNombre_Id=sueLiqImpCatego.CateNombre_Id and dbo.FuncFKsueCategorias(@pCategoria_Id)=sueLiqImpCatego.Categoria_Id and @pFecha between Fecha_Desde and Fecha_Hasta
left join sueCategorias on sueCategorias.sueCategorias=sueLiqImpCatego.Categoria_Id
where sueCateNombre.PorEmpresa=0
union all
select sueCategorias.Categoria_Id, sueCategorias.Descripcion as DescripcionCategoria, sueCateNombre.CateNombre_Id, sueCateNombre.Descripcion as DescripcionCateNombre, 
Fecha_Desde, isnull(Valor,0), sueLiqEmpCatego.Usuario_Id, sueLiqEmpCatego.Empresa_Id from sueCateNombre
left join sueLiqEmpCatego on sueCateNombre.CateNombre_Id=sueLiqEmpCatego.CateNombre_Id and sueLiqEmpCatego.Categoria_Id=dbo.FuncFKsueCategorias(@pCategoria_Id) and Empresa_Id=@pEmpresa_Id and 
@pFecha between Fecha_Desde and Fecha_Hasta
left join sueCategorias on sueCategorias.sueCategorias=sueLiqEmpCatego.Categoria_Id
where sueCateNombre.PorEmpresa=1
go

drop procedure sueLiqImpCategoGuardar
go
create procedure sueLiqImpCategoGuardar
(
@pCateNombre int,
@pCategoria_Id varchar(5),
@pFecha_Desde datetime,
@pValor qMonedaD4,
@pUsuario_Id int,
@pEmpresa_Id int
)
as
--Si no habia valor para esta variable asigno la fecha de incio de summa
set @pFecha_Desde= case when exists(select 1 from sueLiqImpCatego where CateNombre_Id=@pCateNombre and Categoria_Id=dbo.FuncFKsueCategorias(@pCategoria_Id) and Fecha_Hasta='29990101') then (@pFecha_Desde) else (select FechaInicioSumma from genEmpresas where genEmpresas=@pEmpresa_Id) end
-- si no cambio nada del valor actual no hago nada
if not exists(select 1 from sueLiqImpCatego where Fecha_Hasta='29990101' and CateNombre_Id=@pCateNombre and Valor=@pValor and Categoria_Id=dbo.FuncFKsueCategorias(@pCategoria_Id))
begin
-- si solo camio el valor hago un update
if exists(select 1 from sueLiqImpCatego where Fecha_Hasta='29990101' and Fecha_Desde=@pFecha_Desde and CateNombre_Id=@pCateNombre and Categoria_Id=dbo.FuncFKsueCategorias(@pCategoria_Id))
begin
update sueLiqImpCatego set Valor=@pValor where Fecha_Hasta='29990101' and Fecha_Desde=@pFecha_Desde and CateNombre_Id=@pCateNombre and Categoria_Id=dbo.FuncFKsueCategorias(@pCategoria_Id)
end
else
begin
update sueLiqImpCatego set Fecha_Hasta=DATEADD(dd,-1,@pFecha_Desde) where CateNombre_Id=@pCateNombre and Fecha_Hasta='29990101'
insert into sueLiqImpCatego (CateNombre_Id, Categoria_Id, Valor, Usuario_Id, Fecha_Desde, Fecha_Hasta) values (@pCateNombre, dbo.FuncFKsueCategorias(@pCategoria_Id), @pValor, @pUsuario_Id, @pFecha_Desde, '29990101')
end
end
go

drop procedure sueLiqImpCategoGuardar
go
create procedure sueLiqImpCategoGuardar
(
@pCateNombre int,
@pCategoria_Id varchar(5),
@pFecha_Desde datetime,
@pValor qMonedaD4,
@pUsuario_Id int,
@pEmpresa_Id int
)
as
--Si no habia valor para esta variable asigno la fecha de incio de summa
set @pFecha_Desde= case when exists(select 1 from sueLiqImpCatego where CateNombre_Id=@pCateNombre and Categoria_Id=dbo.FuncFKsueCategorias(@pCategoria_Id) and Fecha_Hasta='29990101') then (@pFecha_Desde) else (select FechaInicioSumma from genEmpresas where genEmpresas=@pEmpresa_Id) end
-- si no cambio nada del valor actual no hago nada
if not exists(select 1 from sueLiqImpCatego where Fecha_Hasta='29990101' and CateNombre_Id=@pCateNombre and Valor=@pValor and Categoria_Id=dbo.FuncFKsueCategorias(@pCategoria_Id))
begin
-- si solo camio el valor hago un update
if exists(select 1 from sueLiqImpCatego where Fecha_Hasta='29990101' and Fecha_Desde = @pFecha_Desde and CateNombre_Id=@pCateNombre and Categoria_Id=dbo.FuncFKsueCategorias(@pCategoria_Id))
begin
update sueLiqImpCatego set Valor=@pValor where Fecha_Hasta='29990101' and Fecha_Desde=@pFecha_Desde and CateNombre_Id=@pCateNombre and Categoria_Id=dbo.FuncFKsueCategorias(@pCategoria_Id)
end
else
begin
update sueLiqImpCatego set Fecha_Hasta=DATEADD(dd,-1,@pFecha_Desde) where CateNombre_Id=@pCateNombre and Categoria_Id=dbo.FuncFKsueCategorias(@pCategoria_Id) and Fecha_Hasta='29990101'
insert into sueLiqImpCatego (CateNombre_Id, Categoria_Id, Valor, Usuario_Id, Fecha_Desde, Fecha_Hasta) values (@pCateNombre, dbo.FuncFKsueCategorias(@pCategoria_Id), @pValor, @pUsuario_Id, @pFecha_Desde, '29990101')
end
end
go

drop procedure sueLiqEmpCategoGuardar
go
create procedure sueLiqEmpCategoGuardar
(
@pCateNombre_Id int,
@pCategoria_Id varchar(5),
@pFecha_Desde datetime,
@pValor qMonedaD4,
@pUsuario_Id int,
@pEmpresa_Id int
)
as
--Si no habia valor para esta variable asigno la fecha de incio de summa
set @pFecha_Desde= case when exists(select 1 from sueLiqEmpCatego where CateNombre_Id=@pCateNombre_Id and Categoria_Id=dbo.FuncFKsueCategorias(@pCategoria_Id) and Fecha_Hasta='29990101' and Empresa_Id=@pEmpresa_Id) then (@pFecha_Desde) else (select FechaInicioSumma from genEmpresas where genEmpresas=@pEmpresa_Id) end
-- si no cambio nada del valor actual no hago nada
if not exists(select 1 from sueLiqEmpCatego where Fecha_Hasta='29990101' and CateNombre_Id=@pCateNombre_Id and Valor=@pValor and Empresa_Id= @pEmpresa_Id and dbo.FuncFKsueCategorias(@pCategoria_Id)=Categoria_Id)
begin
-- si solo camio el valor hago un update
if exists(select 1 from sueLiqEmpCatego where Fecha_Hasta='29990101' and Fecha_Desde = @pFecha_Desde and CateNombre_Id=@pCateNombre_Id and Categoria_Id=dbo.FuncFKsueCategorias(@pCategoria_Id) and Empresa_Id=@pEmpresa_Id)
begin
update sueLiqEmpCatego set Valor=@pValor where Fecha_Hasta='29990101' and CateNombre_Id=@pCateNombre_Id and Categoria_Id=dbo.FuncFKsueCategorias(@pCategoria_Id) and Empresa_Id=@pEmpresa_Id
end
else
begin
update sueLiqEmpCatego set Fecha_Hasta=DATEADD(dd,-1,@pFecha_Desde) where CateNombre_Id=@pCateNombre_Id and Categoria_Id=dbo.FuncFKsueCategorias(@pCategoria_Id) and  Fecha_Hasta='29990101' and Empresa_Id=@pEmpresa_Id
insert into sueLiqEmpCatego (CateNombre_Id, Categoria_Id, Valor, Usuario_Id, Fecha_Desde, Fecha_Hasta, Empresa_Id) values (@pCateNombre_Id, dbo.FuncFKsueCategorias(@pCategoria_Id), @pValor, @pUsuario_Id, @pFecha_Desde, '29990101', @pEmpresa_Id)
end
end
go 

drop procedure sueLiqImpCategoEliminar
go
create procedure sueLiqImpCategoEliminar
(
@pCategoria_Id varchar(5),
@pCateNombre int
)
as
delete sueLiqImpCatego where dbo.FuncFKsueCategorias(@pCategoria_Id)=CateNombre_Id and sueLiqImpCatego.CateNombre_Id=@pCateNombre
go

drop procedure sueLiqEmpCategoEliminar
go
create procedure sueLiqEmpCategoEliminar
(
@pCateNombre_Id int,
@pCategoria_Id varchar(5),
@pEmpresa_Id int
)
as
delete sueLiqEmpCatego where @pCateNombre_Id=CateNombre_Id and Empresa_Id=@pEmpresa_Id and Categoria_Id=dbo.FuncFKsueCategorias(@pCategoria_Id)
go

drop procedure sueLiqCateNombreHistorico
go
create procedure sueLiqCateNombreHistorico
(
@pCategoria_Id varchar(5),
@pCateNombre int,
@pEmpresa_Id int
)
as
select Categoria_Id, sueCategorias.Descripcion as DescripcionCate, sueCateNombre.CateNombre_Id, sueCateNombre.Descripcion as DescripcionCateNombre from sueCategorias
inner join sueCateNombre on sueCateNombre.CateNombre_Id=@pCateNombre
where Categoria_Id=@pCategoria_Id
select sueCategorias.Categoria_Id, sueCategorias.Descripcion as DescripcionCategoria, sueCateNombre.CateNombre_Id, sueCateNombre.Descripcion as DescripcionCateNombre, 
Fecha_Desde, Valor, sueLiqImpCatego.Usuario_Id, 0 as Empresa_Id from sueLiqImpCatego
inner join sueCategorias on sueCategorias.sueCategorias=sueLiqImpCatego.Categoria_Id
inner join sueCateNombre on sueCateNombre.CateNombre_Id=sueLiqImpCatego.CateNombre_Id
where sueCategorias.Categoria_Id=@pCategoria_Id and
sueCateNombre.CateNombre_Id=@pCateNombre

union all
select sueCategorias.Categoria_Id, sueCategorias.Descripcion as DescripcionCategoria, sueCateNombre.CateNombre_Id, sueCateNombre.Descripcion as DescripcionCateNombre, 
Fecha_Desde, Valor, sueLiqEmpCatego.Usuario_Id, sueLiqEmpCatego.Empresa_Id from sueLiqEmpCatego
inner join sueCategorias on sueCategorias.sueCategorias=sueLiqEmpCatego.Categoria_Id
inner join sueCateNombre on sueCateNombre.CateNombre_Id=sueLiqEmpCatego.CateNombre_Id
where sueCategorias.Categoria_Id=@pCategoria_Id and
sueLiqEmpCatego.Empresa_Id=@pEmpresa_Id and
sueCateNombre.CateNombre_Id=@pCateNombre
go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueLiqEmpleados.sql*/
-- sueLiqEmpleados 'SLIQ',2020,1,1,1,' ',' ',' ',' ',1, 1,1,' ','ZZZ',1
DROP Procedure sueLiqEmpleados
GO
CREATE Procedure sueLiqEmpleados
(
@pSegmento_Id varchar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pEmpresa_Id int,
@LegajoDesde Int, 
@LegajoHasta Int, 
@SucursalDesde VarChar(4),
@SucursalHasta VarChar(4),
@TipoLiq char(1)
)
AS

SELECT sueLiquidacion.sueLiquidacion, 
	genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, 
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, 
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	sueGrupos.Grupo_Id, sueGrupos.Descripcion as DescripcionGrupos,
	sueLiquidacion.Descripcion, sueLiquidacion.FechaPago, 
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuentas, 
	sueLiquidacion.FechaInicial, sueLiquidacion.FechaFinal,
	sueLiquidacion.Periodo_Id, suePeriodicidad.Descripcion as DescripcionPeriodicidad, 
	sueLiquidacion.Anio, sueLiquidacion.Mes, sueLiquidacion.Quincena, sueLiquidacion.Semana, sueLiquidacion.Decena,
	sueLiquidacion.Vez, 
	@LegajoDesde LegajoDesde , @LegajoHasta LegajoHasta, 
	@SucursalDesde SucursalDesde, @SucursalHasta SucursalHasta , @TipoLiq  as TipoLiq 
FROM sueLiquidacion 
inner join genAsiSegmentos ON 
sueLiquidacion.sueLiquidacion =  genAsiSegmentos.Asiento_Id
inner join genSegmentos ON  genSegmentos.genSegmentos =  genAsiSegmentos.Segmento_Id
LEFT JOIN conAsientos  ON (conAsientos.conAsientos = sueLiquidacion.sueLiquidacion)
INNER JOIN sueGrupos  ON (sueGrupos.sueGrupos = sueLiquidacion.Grupo_Id)
INNER JOIN conCuentas  ON (conCuentas.conCuentas = sueLiquidacion.CtaSueldosAPagar)
LEFT JOIN suePeriodicidad  ON (suePeriodicidad.Periodo_Id = sueLiquidacion.Periodo_Id)
WHERE  
genSegmentos.Segmento_Id=@pSegmento_Id and
genAsiSegmentos.Segmento1N=@pSegmento1N and 
genAsiSegmentos.Segmento1C=@pSegmento1C and
genAsiSegmentos.Segmento2N=@pSegmento2N and 
genAsiSegmentos.Segmento2C=@pSegmento2C and
genAsiSegmentos.Segmento3N=@pSegmento3N and 
genAsiSegmentos.Segmento3C=@pSegmento3C and
genAsiSegmentos.Segmento4N= @pSegmento4N and 
genAsiSegmentos.Segmento4C= @pSegmento4C and
genAsiSegmentos.Empresa_Id=@pEmpresa_Id


SELECT suePersonal.Legajo, suePersonal.ApellidoPaterno, suePersonal.FechaIngreso
from sueLiquidacion inner join sueGrupos ON
sueLiquidacion.Grupo_Id = sueGrupos.sueGrupos
INNER JOIN sueCategorias ON
sueCategorias.Periodo_Id = sueGrupos.Periodo_Id
INNER JOIN suePersCatego ON
	suePersCatego.Categoria_Id = sueCategorias.sueCategorias and 
	sueLiquidacion.FechaFinal BETWEEN suePersCatego.FechaDesde and suePersCatego.FechaHasta
INNER JOIN suePersonal ON
suePersonal.genEntidades =	suePersCatego.Legajo
INNER JOIN suePersSucursal on 
suePersSucursal.Legajo = suePersonal.genEntidades  and 
sueLiquidacion.FechaFinal BETWEEN suePersSucursal.FechaDesde and suePersSucursal.FechaHasta
INNER JOIN genSucursalesEmpr ON 
genSucursalesEmpr.genSucursalesEmpr = suePersSucursal.Sucursal
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = sueLiquidacion.sueLiquidacion 
inner join genSegmentos on genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
Where
	genSegmentos.Segmento_Id=@pSegmento_Id and
	genAsiSegmentos.Segmento1N=@pSegmento1N and 
	genAsiSegmentos.Segmento1C=@pSegmento1C and
	genAsiSegmentos.Segmento2N=@pSegmento2N and 
	genAsiSegmentos.Segmento2C=@pSegmento2C and
	genAsiSegmentos.Segmento3N=@pSegmento3N and 
	genAsiSegmentos.Segmento3C=@pSegmento3C and
	genAsiSegmentos.Segmento4N= @pSegmento4N and 
	genAsiSegmentos.Segmento4C= @pSegmento4C and
	genAsiSegmentos.Empresa_Id=@pEmpresa_Id and 
	suePersonal.Empresa_Id = @pEmpresa_Id and 
	suePersonal.Inactivo = 0 and 
	suePersonal.Posteado = 1 and
	suePersonal.Legajo between @LegajoDesde and @LegajoHasta and 
	genSucursalesEmpr.Sucursal between @SucursalDesde and @SucursalHasta and 
	((@TipoLiq= 'N' and  suePersonal.FechaIngreso <= sueLiquidacion.FechaFinal and 
		( suePersonal.FechaBaja Is null or  suePersonal.FechaBaja > sueLiquidacion.FechaFinal)) or
		(@TipoLiq= 'F' and suePersonal.FechaBaja between sueLiquidacion.FechaInicial and sueLiquidacion.FechaFinal))
order by 1
GO

-- sueLiqEmpleadosEliminarDatos 'SLIQ',2021,9,36,1,' ',' ',' ',' ',4, 3002,3002,' ','ZZZ','N'
DROP Procedure sueLiqEmpleadosEliminarDatos
GO
CREATE Procedure sueLiqEmpleadosEliminarDatos
(
@pSegmento_Id varchar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pEmpresa_Id int,
@LegajoDesde Int, 
@LegajoHasta Int, 
@SucursalDesde VarChar(4),
@SucursalHasta VarChar(4),
@TipoLiq CHAR(1)
)
AS

SELECT sueLiquidacion.sueLiquidacion, 
	genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, 
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, 
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	sueGrupos.Grupo_Id, sueGrupos.Descripcion as DescripcionGrupos,
	sueLiquidacion.Descripcion, sueLiquidacion.FechaPago, 
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuentas, 
	sueLiquidacion.FechaInicial, sueLiquidacion.FechaFinal,
	sueLiquidacion.Periodo_Id, suePeriodicidad.Descripcion as DescripcionPeriodicidad, 
	sueLiquidacion.Anio, sueLiquidacion.Mes, sueLiquidacion.Quincena, sueLiquidacion.Semana, sueLiquidacion.Decena,
	sueLiquidacion.Vez, 
	@LegajoDesde LegajoDesde , @LegajoHasta LegajoHasta, 
	@SucursalDesde SucursalDesde, @SucursalHasta SucursalHasta , @TipoLiq  as TipoLiq 
FROM sueLiquidacion 
inner join genAsiSegmentos ON 
sueLiquidacion.sueLiquidacion =  genAsiSegmentos.Asiento_Id
inner join genSegmentos ON  genSegmentos.genSegmentos =  genAsiSegmentos.Segmento_Id
LEFT JOIN conAsientos  ON (conAsientos.conAsientos = sueLiquidacion.sueLiquidacion)
INNER JOIN sueGrupos  ON (sueGrupos.sueGrupos = sueLiquidacion.Grupo_Id)
INNER JOIN conCuentas  ON (conCuentas.conCuentas = sueLiquidacion.CtaSueldosAPagar)
LEFT JOIN suePeriodicidad  ON (suePeriodicidad.Periodo_Id = sueLiquidacion.Periodo_Id)
WHERE  
genSegmentos.Segmento_Id=@pSegmento_Id and
genAsiSegmentos.Segmento1N=@pSegmento1N and 
genAsiSegmentos.Segmento1C=@pSegmento1C and
genAsiSegmentos.Segmento2N=@pSegmento2N and 
genAsiSegmentos.Segmento2C=@pSegmento2C and
genAsiSegmentos.Segmento3N=@pSegmento3N and 
genAsiSegmentos.Segmento3C=@pSegmento3C and
genAsiSegmentos.Segmento4N= @pSegmento4N and 
genAsiSegmentos.Segmento4C= @pSegmento4C and
genAsiSegmentos.Empresa_Id=@pEmpresa_Id

SELECT DISTINCT suePersonal.Legajo, suePersonal.ApellidoPaterno, suePersonal.FechaIngreso 
FROM sueLiquidacion
INNER JOIN sueTerminada ON sueLiquidacion.sueLiquidacion = sueTerminada.sueLiquidacion
INNER JOIN suePersonal ON sueTerminada.Legajo = suePersonal.genEntidades
INNER JOIN suePersSucursal ON suePersSucursal.Legajo = suePersonal.genEntidades  and 
	sueLiquidacion.FechaFinal BETWEEN suePersSucursal.FechaDesde and suePersSucursal.FechaHasta
INNER JOIN genSucursalesEmpr ON genSucursalesEmpr.genSucursalesEmpr = suePersSucursal.Sucursal
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = sueLiquidacion.sueLiquidacion 
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
WHERE genSegmentos.Segmento_Id=@pSegmento_Id and
	genAsiSegmentos.Segmento1N=@pSegmento1N and 
	genAsiSegmentos.Segmento1C=@pSegmento1C and
	genAsiSegmentos.Segmento2N=@pSegmento2N and 
	genAsiSegmentos.Segmento2C=@pSegmento2C and
	genAsiSegmentos.Segmento3N=@pSegmento3N and 
	genAsiSegmentos.Segmento3C=@pSegmento3C and
	genAsiSegmentos.Segmento4N= @pSegmento4N and 
	genAsiSegmentos.Segmento4C= @pSegmento4C and
	genAsiSegmentos.Empresa_Id=@pEmpresa_Id and 
	suePersonal.Legajo between @LegajoDesde and @LegajoHasta and 
	genSucursalesEmpr.Sucursal between @SucursalDesde and @SucursalHasta 
ORDER BY 1
GO

/*SELECT suePersonal.Legajo, suePersonal.ApellidoPaterno, suePersonal.FechaIngreso
from sueLiquidacion inner join sueGrupos ON
sueLiquidacion.Grupo_Id = sueGrupos.sueGrupos
INNER JOIN sueCategorias ON
sueCategorias.Periodo_Id = sueGrupos.Periodo_Id
INNER JOIN suePersCatego ON
	suePersCatego.Categoria_Id = sueCategorias.sueCategorias and 
	sueLiquidacion.FechaFinal BETWEEN suePersCatego.FechaDesde and suePersCatego.FechaHasta
INNER JOIN suePersonal ON
suePersonal.genEntidades =	suePersCatego.Legajo
INNER JOIN suePersSucursal on 
suePersSucursal.Legajo = suePersonal.genEntidades  and 
sueLiquidacion.FechaFinal BETWEEN suePersSucursal.FechaDesde and suePersSucursal.FechaHasta
INNER JOIN genSucursalesEmpr ON 
genSucursalesEmpr.genSucursalesEmpr = suePersSucursal.Sucursal
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = sueLiquidacion.sueLiquidacion 
inner join genSegmentos on genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
Where
	Exists(select 1 from sueTerminada where
		sueTerminada.sueLiquidacion = sueLiquidacion.sueLiquidacion and 
		sueTerminada.Legajo = suePersonal.genEntidades) and 
	genSegmentos.Segmento_Id=@pSegmento_Id and
	genAsiSegmentos.Segmento1N=@pSegmento1N and 
	genAsiSegmentos.Segmento1C=@pSegmento1C and
	genAsiSegmentos.Segmento2N=@pSegmento2N and 
	genAsiSegmentos.Segmento2C=@pSegmento2C and
	genAsiSegmentos.Segmento3N=@pSegmento3N and 
	genAsiSegmentos.Segmento3C=@pSegmento3C and
	genAsiSegmentos.Segmento4N= @pSegmento4N and 
	genAsiSegmentos.Segmento4C= @pSegmento4C and
	genAsiSegmentos.Empresa_Id=@pEmpresa_Id and 
	suePersonal.Legajo between @LegajoDesde and @LegajoHasta and 
	genSucursalesEmpr.Sucursal between @SucursalDesde and @SucursalHasta 
order by 1
GO*/







Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueLiqPersImportes.sql*/
DROP PROCEDURE sueLiqPersImportesGuardar
GO
CREATE PROCEDURE sueLiqPersImportesGuardar
(
@pLegajo int,
@pImporte_Id int,
@pFecha_Hasta qFecha,
@pFecha_Desde qFecha,
@pValor qMonedaD4,
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
--si no cambio nada del valor actual no hago nada
IF (not EXISTS (SELECT 1 FROM sueLiqPersImportes WHERE (Legajo = dbo.FuncFKsuePersonal(@pLegajo)) AND (Importe_Id = @pImporte_Id) And 
	Fecha_Hasta = @pFecha_Hasta and (Valor=@pValor)))
 begin
-- si no existe un valor para este importe asigno la fecha de ingreso del legajo a fecha desde
set @pFecha_Desde = case when exists(select 1 from sueLiqPersImportes where Legajo=dbo.FuncFKsuePersonal(@pLegajo) and Importe_Id=@pImporte_Id) then @pFecha_Desde else (select FechaIngreso from suePersonal where Legajo=@pLegajo)end
 -- si solo cambio el valor hago un update
 if exists(select 1 from sueLiqPersImportes where Fecha_Hasta='29990101' and Fecha_Desde=@pFecha_Desde and Legajo=dbo.FuncFKsuePersonal(@pLegajo) and Importe_Id=@pImporte_Id)
 begin
 update sueLiqPersImportes set Valor=@pValor where Fecha_Hasta='29990101' and Fecha_Desde=@pFecha_Desde and Legajo=dbo.FuncFKsuePersonal(@pLegajo) and Importe_Id=@pImporte_Id
 end
 else
 begin
 update sueLiqPersImportes set Fecha_Hasta=DATEADD(dd,-1,@pFecha_Desde) where Legajo=dbo.FuncFKsuePersonal(@pLegajo) and Fecha_Hasta='29990101' and Importe_Id=@pImporte_Id
	INSERT INTO sueLiqPersImportes
	(
		Legajo,
		Importe_Id,
		Fecha_Hasta,
		Fecha_Desde,
		Valor,
		Usuario_Id
	)
	VALUES 
	(
		dbo.FuncFKsuePersonal(@pLegajo),
		@pImporte_Id,
		@pFecha_Hasta,
		@pFecha_Desde,
		@pValor,
		@pUsuario_Id
	)
 end
 end
GO

-- sueLiqPersImportesDatos 373, '20201024'
DROP PROCEDURE sueLiqPersImportesDatos
GO
CREATE PROCEDURE sueLiqPersImportesDatos
(
@pLegajo int,
@pFecha qFecha
)
AS
SET NOCOUNT ON 

select Legajo, ApellidoPaterno as DescripcionLegajo, @pFecha as Fecha from suePersonal
where Legajo=@pLegajo
select suePersonal.Legajo, suePersonal.ApellidoPaterno as DescripcionLegajo, 
	sueImpNombre.Importe_Id, sueImpNombre.Descripcion as DescripcionImporte, 
	Fecha_Desde, isnull(sueLiqPersImportes.Valor,0) as Valor, sueLiqPersImportes.Usuario_Id, 0 as Empresa_Id 
from sueImpNombre 
left join suePersonal on suePersonal.Legajo= @pLegajo
left join sueLiqPersImportes on 
	sueImpNombre.Importe_Id=sueLiqPersImportes.Importe_Id and 
	@pFecha between sueLiqPersImportes.Fecha_Desde and sueLiqPersImportes.Fecha_Hasta and 
	sueLiqPersImportes.Legajo= suePersonal.genEntidades
Order By sueImpNombre.Importe_Id

 RETURN @@Error 

GO


DROP PROCEDURE sueLiqPersImportesEliminar
GO
CREATE PROCEDURE sueLiqPersImportesEliminar
(
@pLegajo bigint,
@pImporte_Id int
)
AS
SET NOCOUNT ON 

DELETE FROM sueLiqPersImportes 
WHERE (Legajo = dbo.funcfksuePersonal(@pLegajo))
AND (Importe_Id = @pImporte_Id)	
 
 RETURN @@Error 

GO
drop procedure sueLiqPersImportesHistorico
go
create procedure sueLiqPersImportesHistorico
(
@pLegajo int,
@pImporte_Id int
)
as
select Legajo, ApellidoPaterno as DescripcionLegajo, sueImpNombre.Importe_Id, sueImpNombre.Descripcion as DescripcionImporte from suePersonal
inner join sueImpNombre on sueImpNombre.Importe_Id=@pImporte_Id
where Legajo=@pLegajo
select suePersonal.Legajo, suePersonal.ApellidoPaterno as DescripcionLegajo, sueImpNombre.Importe_Id, sueImpNombre.Descripcion as DescripcionImporte, 
Fecha_Desde, Valor, sueLiqPersImportes.Usuario_Id, 0 as Empresa_Id from sueLiqPersImportes
inner join suePersonal on suePersonal.genEntidades=sueLiqPersImportes.Legajo
inner join sueImpNombre on sueImpNombre.Importe_Id=sueLiqPersImportes.Importe_Id
where suePersonal.Legajo=@pLegajo and
sueImpNombre.Importe_Id=@pImporte_Id
GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueLiquidacion.sql*/

DROP PROCEDURE sueLiquidacionGuardar
GO
CREATE PROCEDURE sueLiquidacionGuardar
(
@psueLiquidacion Bigint,
@pGrupo_Id int,
@pDescripcion varchar(100),
@pFechaPago qFecha =null,
@pFechaDeposito qFecha = NULL,
@pPeriodoDeposito varchar(20) = NULL,
@pCtaSueldosAPagar varchar(25),
@pFechaInicial qFecha = NULL,
@pFechaFinal qFecha = NULL,
@pPeriodo_Id char(1) = NULL,
@pPorEmpleado Sino,
@pAnio int,
@pMes int,
@pQuincena int,
@pSemana int,
@pDecena int,
@pVez int,
@pFechaContabilizacion qFecha=null
)
AS
SET NOCOUNT ON 

IF (EXISTS (SELECT 1 FROM sueLiquidacion WHERE sueLiquidacion.sueLiquidacion=@psueLiquidacion))
BEGIN 
	UPDATE sueLiquidacion
	SET	
		Grupo_Id = dbo.FuncFKsueGrupos(@pGrupo_Id),
		Descripcion = @pDescripcion,
		FechaPago = @pFechaPago,
		FechaDeposito = @pFechaDeposito,
		PeriodoDeposito = @pPeriodoDeposito,
		CtaSueldosAPagar = dbo.FuncFKconCuentas(@pCtaSueldosAPagar),
		FechaInicial = @pFechaInicial,
		FechaFinal = @pFechaFinal,
		Periodo_Id = @pPeriodo_Id,
		PorEmpleado = @pPorEmpleado,
		Anio = @pAnio,
		Mes = @pMes,
		Quincena = @pQuincena,
		Semana = @pSemana,
		Decena = @pDecena,
		Vez = @pVez,
		FechaContabilizacion = @pFechaContabilizacion
	WHERE 
	sueLiquidacion=@psueLiquidacion
END 
ELSE 
BEGIN 
	INSERT INTO sueLiquidacion
	(
		sueLiquidacion,
		Grupo_Id,
		Descripcion,
		FechaPago,
		FechaDeposito,
		PeriodoDeposito,
		CtaSueldosAPagar,
		FechaInicial,
		FechaFinal,
		Periodo_Id,
		PorEmpleado,
		Anio,
		Mes,
		Quincena,
		Semana,
		Decena,
		Vez,
		FechaContabilizacion
	)
	VALUES 
	(
		@psueLiquidacion,
		dbo.FuncFKsueGrupos(@pGrupo_Id),
		@pDescripcion,
		@pFechaPago,
		@pFechaDeposito,
		@pPeriodoDeposito,
		dbo.FuncFKconCuentas(@pCtaSueldosAPagar),
		@pFechaInicial,
		@pFechaFinal,
		@pPeriodo_Id,
		@pPorEmpleado,
		@pAnio,
		@pMes,
		@pQuincena,
		@pSemana,
		@pDecena,
		@pVez,
		@pFechaContabilizacion
	)
	
END 
Select @psueLiquidacion as RetVal 

GO

DROP PROCEDURE sueLiquidacionDatos
GO
CREATE PROCEDURE sueLiquidacionDatos
(
@pSegmento_Id varchar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pFechaDesde DateTime = null,
@pFechaHasta DateTime = null,
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 
declare @sueLiquidacion bigint 
SET @sueLiquidacion = (select Asiento_Id 
	from  genAsiSegmentos
	where
Segmento_Id=dbo.FuncFKgenSegmentos(@pSegmento_Id) and
Segmento1N=@pSegmento1N and Segmento1C=@pSegmento1C and
Segmento2N=@pSegmento2N and Segmento2C=@pSegmento2C and
Segmento3N=@pSegmento3N and Segmento3C=@pSegmento3C and
Segmento4N= @pSegmento4N and Segmento4C= @pSegmento4C and
Empresa_Id=@pEmpresa_Id
)
SELECT sueLiquidacion.sueLiquidacion, 
	genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, 
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, 
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	sueGrupos.Grupo_Id, sueGrupos.Descripcion as DescripcionGrupos,
	sueLiquidacion.Descripcion, sueLiquidacion.FechaPago, sueLiquidacion.FechaDeposito, sueLiquidacion.PeriodoDeposito,
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuentas, sueLiquidacion.FechaInicial, sueLiquidacion.FechaFinal,
	sueLiquidacion.Periodo_Id, suePeriodicidad.Descripcion as DescripcionPeriodicidad, sueLiquidacion.PorEmpleado, sueLiquidacion.Anio,
	sueLiquidacion.Mes, sueLiquidacion.Quincena, sueLiquidacion.Semana, sueLiquidacion.Decena,
	sueLiquidacion.Vez, sueLiquidacion.FechaContabilizacion, ' ' SegundoPlano, 
	@pFechaDesde FechaDesde, @pFechaHasta FechaHasta
FROM sueLiquidacion 
inner join genAsiSegmentos ON 
sueLiquidacion.sueLiquidacion =  genAsiSegmentos.Asiento_Id
inner join genSegmentos ON  genSegmentos.genSegmentos =  genAsiSegmentos.Segmento_Id
LEFT JOIN conAsientos  ON (conAsientos.conAsientos = sueLiquidacion.sueLiquidacion)
INNER JOIN sueGrupos  ON (sueGrupos.sueGrupos = sueLiquidacion.Grupo_Id)
INNER JOIN conCuentas  ON (conCuentas.conCuentas = sueLiquidacion.CtaSueldosAPagar)
LEFT JOIN suePeriodicidad  ON (suePeriodicidad.Periodo_Id = sueLiquidacion.Periodo_Id)
WHERE  
genSegmentos.Segmento_Id=@pSegmento_Id and
genAsiSegmentos.Segmento1N=@pSegmento1N and 
genAsiSegmentos.Segmento1C=@pSegmento1C and
genAsiSegmentos.Segmento2N=@pSegmento2N and 
genAsiSegmentos.Segmento2C=@pSegmento2C and
genAsiSegmentos.Segmento3N=@pSegmento3N and 
genAsiSegmentos.Segmento3C=@pSegmento3C and
genAsiSegmentos.Segmento4N= @pSegmento4N and 
genAsiSegmentos.Segmento4C= @pSegmento4C and
genAsiSegmentos.Empresa_Id=@pEmpresa_Id

  
 Exec genAtributosGeneralesIdentityDatos @sueLiquidacion, 'sueLiquidacion'
 RETURN @@Error 

GO

DROP PROCEDURE sueLiquidacionEliminar
GO
CREATE PROCEDURE sueLiquidacionEliminar
(
@psueLiquidacion bigint
)
AS
SET NOCOUNT ON 

DELETE FROM sueLiquidacion 
WHERE  sueLiquidacion=@psueLiquidacion
 RETURN @@Error 

GO


-- sueLiquidacionGenerarDatos 'NQ',0,0,0,0,' ',' ',' ',' ',1
DROP PROCEDURE sueLiquidacionGenerarDatos
GO
CREATE PROCEDURE sueLiquidacionGenerarDatos
(
@pSegmento_Id varchar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pEmpresa_Id int,
@LegajoDesde Int, 
@LegajoHasta Int, 
@SucursalDesde VarChar(4),
@SucursalHasta VarChar(4),
@TipoLiq char(1),
@pPeriodo_Id char(1) = Null,
@pFechaDesde DateTime,
@pFechaHasta DateTime
)
AS
SET NOCOUNT ON 
declare @sueLiquidacion bigint 
SET @sueLiquidacion = (select Asiento_Id
	from  genAsiSegmentos
	where
Segmento_Id=dbo.FuncFKgenSegmentos(@pSegmento_Id) and
Segmento1N=@pSegmento1N and Segmento1C=@pSegmento1C and
Segmento2N=@pSegmento2N and Segmento2C=@pSegmento2C and
Segmento3N=@pSegmento3N and Segmento3C=@pSegmento3C and
Segmento4N= @pSegmento4N and Segmento4C= @pSegmento4C and
Empresa_Id=@pEmpresa_Id
)
SELECT sueLiquidacion.sueLiquidacion, 
	genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, 
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, 
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	sueGrupos.Grupo_Id, sueGrupos.Descripcion as DescripcionGrupos,
	sueLiquidacion.Descripcion, sueLiquidacion.FechaPago, sueLiquidacion.FechaDeposito, sueLiquidacion.PeriodoDeposito,
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuentas, sueLiquidacion.FechaInicial, sueLiquidacion.FechaFinal, Cast(1 as bit) TodosLosPeriodos,
	sueLiquidacion.Periodo_Id, suePeriodicidad.Descripcion as DescripcionPeriodicidad, sueLiquidacion.PorEmpleado, sueLiquidacion.Anio,
	sueLiquidacion.Mes, sueLiquidacion.Quincena, sueLiquidacion.Semana, sueLiquidacion.Decena,
	sueLiquidacion.Vez, sueLiquidacion.FechaContabilizacion, 
	@LegajoDesde LegajoDesde , @LegajoHasta LegajoHasta, 
	@SucursalDesde SucursalDesde, @SucursalHasta  SucursalHasta , @TipoLiq as TipoLiq, 
	0 as RegistroActual, ' ' Mensaje, ' ' Condicion,(cast( 1 as bit)) as DescargarWS,
	sueLiquidacion.FechaInicial FechaDesde, sueLiquidacion.FechaFinal FechaHasta
FROM sueLiquidacion 
Inner join genAsiSegmentos ON sueLiquidacion.sueLiquidacion =  genAsiSegmentos.Asiento_Id
Inner join genSegmentos ON  genSegmentos.genSegmentos =  genAsiSegmentos.Segmento_Id
LEFT JOIN conAsientos ON (conAsientos.conAsientos = sueLiquidacion.sueLiquidacion)
INNER JOIN sueGrupos ON (sueGrupos.sueGrupos = sueLiquidacion.Grupo_Id)
INNER JOIN conCuentas ON (conCuentas.conCuentas = sueLiquidacion.CtaSueldosAPagar)
LEFT JOIN suePeriodicidad ON (suePeriodicidad.Periodo_Id = sueLiquidacion.Periodo_Id)
WHERE  
genSegmentos.Segmento_Id=@pSegmento_Id and
genAsiSegmentos.Segmento1N=@pSegmento1N and 
genAsiSegmentos.Segmento1C=@pSegmento1C and
genAsiSegmentos.Segmento2N=@pSegmento2N and 
genAsiSegmentos.Segmento2C=@pSegmento2C and
genAsiSegmentos.Segmento3N=@pSegmento3N and 
genAsiSegmentos.Segmento3C=@pSegmento3C and
genAsiSegmentos.Segmento4N= @pSegmento4N and 
genAsiSegmentos.Segmento4C= @pSegmento4C and
genAsiSegmentos.Empresa_Id=@pEmpresa_Id

  
Exec genAtributosGeneralesIdentityDatos @sueLiquidacion, 'sueLiquidacion'


SELECT suePersonal.Legajo, suePersonal.ApellidoPaterno+
	case when suePersonal.ApellidoMaterno =' ' then '' else	
		',' +suePersonal.ApellidoMaterno end +
		' ,'+ suePersonal.Nombres as ApellidoPaterno
, suePersonal.FechaIngreso
From sueLiquidacion 
Inner join sueGrupos ON sueLiquidacion.Grupo_Id = sueGrupos.sueGrupos
INNER JOIN sueCategorias ON sueCategorias.Periodo_Id = IsNull(@pPeriodo_Id, sueCategorias.Periodo_Id)
INNER JOIN suePersCatego ON suePersCatego.Categoria_Id = sueCategorias.sueCategorias and 
	sueLiquidacion.FechaFinal BETWEEN suePersCatego.FechaDesde and suePersCatego.FechaHasta
INNER JOIN suePersonal ON suePersonal.genEntidades = suePersCatego.Legajo
INNER JOIN suePersSucursal on suePersSucursal.Legajo = suePersonal.genEntidades and 
	sueLiquidacion.FechaFinal BETWEEN suePersSucursal.FechaDesde and suePersSucursal.FechaHasta
INNER JOIN genSucursalesEmpr ON genSucursalesEmpr.genSucursalesEmpr = suePersSucursal.Sucursal
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = sueLiquidacion.sueLiquidacion 
Inner join genSegmentos on genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
Where
	genSegmentos.Segmento_Id=@pSegmento_Id and
	genAsiSegmentos.Segmento1N=@pSegmento1N and 
	genAsiSegmentos.Segmento1C=@pSegmento1C and
	genAsiSegmentos.Segmento2N=@pSegmento2N and 
	genAsiSegmentos.Segmento2C=@pSegmento2C and
	genAsiSegmentos.Segmento3N=@pSegmento3N and 
	genAsiSegmentos.Segmento3C=@pSegmento3C and
	genAsiSegmentos.Segmento4N= @pSegmento4N and 
	genAsiSegmentos.Segmento4C= @pSegmento4C and
	genAsiSegmentos.Empresa_Id=@pEmpresa_Id and 
	suePersonal.Empresa_Id=@pEmpresa_Id and
	suePersonal.Inactivo = 0 and 
	suePersonal.Posteado = 1 and
	suePersonal.Legajo between @LegajoDesde and @LegajoHasta and 
	genSucursalesEmpr.Sucursal between @SucursalDesde and @SucursalHasta and 
	((@TipoLiq = 'N' and  suePersonal.FechaIngreso <= sueLiquidacion.FechaFinal and 
		( suePersonal.FechaBaja Is null or  suePersonal.FechaBaja > sueLiquidacion.FechaFinal)) or
		(@TipoLiq = 'F' and suePersonal.FechaBaja between @pFechaDesde and @pFechaHasta) or
		@TipoLiq = 'V' and EXISTS(SELECT 1 FROM sueVacTomadas WHERE sueVacTomadas.Legajo = suePersonal.genEntidades AND
			sueVacTomadas.FechaDesde BETWEEN @pFechaDesde and @pFechaHasta))
ORDER BY 1


 RETURN @@Error 

GO



DROP PROCEDURE sueLiquidacionNeto
GO
CREATE PROCEDURE sueLiquidacionNeto
(
	@pSueLiquidacion bigint
)
AS

SELECT SUM(sueTerminada.Importe*sueTerminada.Signo) as Monto
From sueTerminada 
Where
	sueTerminada.sueLiquidacion = @pSueLiquidacion
GO

DROP PROCEDURE sueLiquidacionMarcaPorEmple
GO

CREATE PROCEDURE sueLiquidacionMarcaPorEmple
(
	@pSueLiquidacion BigInt, 
	@pPorEmpleado Bit
)
as

Update sueLiquidacion SET PorEmpleado = @pPorEmpleado 
	Where sueLiquidacion = @pSueLiquidacion
GO




DROP PROCEDURE sueLiquidacionIntDatos
GO
CREATE PROCEDURE sueLiquidacionIntDatos
(
	@sueLiquidacion bigint 
)
AS

DECLARE @pSegmento_Id varchar(10)
DECLARE @pSegmento1N int
DECLARE  @pSegmento2N int
DECLARE @pSegmento3N int
DECLARE @pSegmento4N int
DECLARE @pSegmento1C varchar(20)
DECLARE @pSegmento2C varchar(20)
DECLARE @pSegmento3C varchar(20)
DECLARE @pSegmento4C varchar(20)
DECLARE  @pEmpresa_Id int

SELECT @pSegmento_Id = genSegmentos.Segmento_Id,
	@pSegmento1N = genAsiSegmentos.Segmento1N,
	@pSegmento2N = genAsiSegmentos.Segmento2N,
	@pSegmento3N = genAsiSegmentos.Segmento3N,
	@pSegmento4N = genAsiSegmentos.Segmento4N,
	@pSegmento1C = genAsiSegmentos.Segmento1C,
	@pSegmento2C = genAsiSegmentos.Segmento2C,
	@pSegmento3C = genAsiSegmentos.Segmento3C,
	@pSegmento4C = genAsiSegmentos.Segmento4C,
	@pEmpresa_Id = genAsiSegmentos.Empresa_Id
FROM genAsiSegmentos inner join genSegmentos ON
genAsiSegmentos.Segmento_Id = genSegmentos.genSegmentos
INNER JOIN sueLiquidacion ON
sueLiquidacion.sueLiquidacion = genAsiSegmentos.Asiento_Id
where
sueLiquidacion.sueLiquidacion  = @sueLiquidacion

exec sueLiquidacionDatos @pSegmento_Id, @pSegmento1N,@pSegmento2N,@pSegmento3N,@pSegmento4N,
	@pSegmento1C,@pSegmento2C,@pSegmento3C,@pSegmento4C,NULL, NULL, @pEmpresa_Id

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueLiquidacionSegmento.sql*/
DROP PROCEDURE sueLiquidacionSegmentoGuardar
GO
CREATE PROCEDURE sueLiquidacionSegmentoGuardar
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@psueLiquidacion int, 
@pTieneAutomatico bit
)
AS
SET NOCOUNT ON 


IF (EXISTS (SELECT 1 FROM sueLiquidacionSegmento WHERE 
	(Empresa_Id = @pEmpresa_Id) AND 
	(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
	(Segmento1N = @pSegmento1N) AND 
	(Segmento2N = @pSegmento2N) AND 
	(Segmento3N = @pSegmento3N) AND 
	(Segmento4N = @pSegmento4N) AND 
	(Segmento1C = @pSegmento1C) AND 
	(Segmento2C = @pSegmento2C) AND 
	(Segmento3C = @pSegmento3C) AND 
	(Segmento4C = @pSegmento4C)))

		

		
			UPDATE sueLiquidacionSegmento
			SET	Empresa_Id = @pEmpresa_Id,
				sueLiquidacion = @psueLiquidacion
			WHERE (Empresa_Id = @pEmpresa_Id) AND 
				(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
				(Segmento1N = @pSegmento1N) AND 
				(Segmento2N = @pSegmento2N) AND 
				(Segmento3N = @pSegmento3N) AND 
				(Segmento4N = @pSegmento4N) AND 
				(Segmento1C = @pSegmento1C) AND 
				(Segmento2C = @pSegmento2C) AND 
				(Segmento3C = @pSegmento3C) AND 
				(Segmento4C = @pSegmento4C)
		
	
ELSE 
BEGIN 
	
	-- Averiguo el que sigue
	
	if (@pTieneAutomatico=1)
	BEGIN
		
		
			SET @pSegmento1N = (SELECT MAX(sueLiquidacionSegmento.Segmento1N)+1 AS Segmento1N 
					FROM sueLiquidacionSegmento 
					Where
						sueLiquidacionSegmento.Empresa_id = @pEmpresa_Id and 
						sueLiquidacionSegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) And
						sueLiquidacionSegmento.Segmento2N = @pSegmento2N And
						sueLiquidacionSegmento.Segmento3N = @pSegmento3N And
						sueLiquidacionSegmento.Segmento4N = @pSegmento4N And
						sueLiquidacionSegmento.Segmento1C = @pSegmento1C And
						sueLiquidacionSegmento.Segmento2C = @pSegmento2C And
						sueLiquidacionSegmento.Segmento3C = @pSegmento3C And
						sueLiquidacionSegmento.Segmento4C = @pSegmento4C)
						
						
			IF (@pSegmento1N IS NULL) 
			begin
				SET @pSegmento1N = (SELECT PrimerNumero
					FROM genContadorSegmento Where
						(genContadorSegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
						(genContadorSegmento.Segmento2N = @pSegmento2N) AND 
						(genContadorSegmento.Segmento3N = @pSegmento3N) AND 
						(genContadorSegmento.Segmento4N = @pSegmento4N) AND 
						(genContadorSegmento.Segmento1C = @pSegmento1C) AND 
						(genContadorSegmento.Segmento2C = @pSegmento2C) AND 
						(genContadorSegmento.Segmento3C = @pSegmento3C) AND 
						(genContadorSegmento.Segmento4C = @pSegmento4C) and 
						genContadorSegmento.Empresa_id = @pEmpresa_id and 
						genContadorSegmento.Segmento_Id =dbo.FuncFKgenSegmentos(@pSegmento_Id))

			-- esto solo pasa si empieza en 1 esta prendido
			if @pSegmento1N is null or @pSegmento1N < 0
			begin
				set @pSegmento1N = 1
			end		
			end
		
			
	END
	
	INSERT INTO sueLiquidacionSegmento
	(
		Empresa_Id,
		Segmento_Id,
		Segmento1N,
		Segmento2N,
		Segmento3N,
		Segmento4N,
		Segmento1C,
		Segmento2C,
		Segmento3C,
		Segmento4C,
		sueLiquidacion
	)
	VALUES 
	(
		@pEmpresa_Id,
		dbo.FuncFKgenSegmentos(@pSegmento_Id),
		@pSegmento1N,
		@pSegmento2N,
		@pSegmento3N,
		@pSegmento4N,
		@pSegmento1C,
		@pSegmento2C,
		@pSegmento3C,
		@pSegmento4C,
		@psueLiquidacion
	)
	
END 
SELECT @pSegmento1N as RetVal

GO
DROP PROCEDURE sueLiquidacionSegmentoDatos
GO
CREATE PROCEDURE sueLiquidacionSegmentoDatos
(
@pSegmento_Id varchar(10),
@pEmpresa_Id int,
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20)
)
AS
SET NOCOUNT ON 

SELECT genSegmentos.Segmento_Id, sueLiquidacionSegmento.Empresa_Id, sueLiquidacionSegmento.Segmento1N, sueLiquidacionSegmento.Segmento2N,
	sueLiquidacionSegmento.Segmento3N, sueLiquidacionSegmento.Segmento4N, sueLiquidacionSegmento.Segmento1C, sueLiquidacionSegmento.Segmento2C,
	sueLiquidacionSegmento.Segmento3C, sueLiquidacionSegmento.Segmento4C, sueLiquidacionSegmento.sueLiquidacion
FROM sueLiquidacionSegmento
inner join genSegmentos on genSegmentos=sueLiquidacionSegmento.Segmento_Id
WHERE (genSegmentos.Segmento_Id = @pSegmento_Id)
AND (Empresa_Id = @pEmpresa_Id)
AND (Segmento1N = @pSegmento1N)
AND (Segmento2N = @pSegmento2N)
AND (Segmento3N = @pSegmento3N)
AND (Segmento4N = @pSegmento4N)
AND (Segmento1C = @pSegmento1C)
AND (Segmento2C = @pSegmento2C)
AND (Segmento3C = @pSegmento3C)
AND (Segmento4C = @pSegmento4C)
 
 RETURN @@Error 

GO

DROP PROCEDURE sueLiquidacionSegmentoEliminar
GO
CREATE PROCEDURE sueLiquidacionSegmentoEliminar
(
@pSegmento_Id varchar(10),
@pEmpresa_Id int,
@pSegmento1N int = NULL,
@pSegmento2N int = NULL,
@pSegmento3N int = NULL,
@pSegmento4N int = NULL,
@pSegmento1C varchar(20) = NULL,
@pSegmento2C varchar(20) = NULL,
@pSegmento3C varchar(20) = NULL,
@pSegmento4C varchar(20) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM sueLiquidacionSegmento 
WHERE (Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id))
AND (Empresa_Id = @pEmpresa_Id)
AND (Segmento1N = ISNULL(@pSegmento1N, Segmento1N))
AND (Segmento2N = ISNULL(@pSegmento2N, Segmento2N))
AND (Segmento3N = ISNULL(@pSegmento3N, Segmento3N))
AND (Segmento4N = ISNULL(@pSegmento4N, Segmento4N))
AND (Segmento1C = ISNULL(@pSegmento1C, Segmento1C))
AND (Segmento2C = ISNULL(@pSegmento2C, Segmento2C))
AND (Segmento3C = ISNULL(@pSegmento3C, Segmento3C))
AND (Segmento4C = ISNULL(@pSegmento4C, Segmento4C))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueLiqVarGlobales.sql*/
drop procedure sueLiqVarGlobalesDatos
go
create procedure sueLiqVarGlobalesDatos
(
@pFecha datetime,
@pEmpresa_Id int
)
as
select @pFecha as Fecha

select sueVarGlobales.VarGlobal_Id, sueVarGlobales.Descripcion as DescripcionVarGlobal, 
Fecha_Desde, isnull(Valor,0) as Valor, sueLiqVarGlobales.Usuario_Id, 0 as Empresa_Id,sueLiqVarGlobales.Ver from sueVarGlobales
left join sueLiqVarGlobales on sueVarGlobales.VarGlobal_Id=sueLiqVarGlobales.VarGlobal_Id and @pFecha between Fecha_Desde and Fecha_Hasta
where sueVarGlobales.PorEmpresa=0
union all
select sueVarGlobales.VarGlobal_Id, sueVarGlobales.Descripcion as DescripcionVarGlobal,
Fecha_Desde, isnull(Valor,0) as Valor, sueLiqVarEmpGlobales.Usuario_Id, sueLiqVarEmpGlobales.Empresa_Id,null as Ver from sueVarGlobales
left join sueLiqVarEmpGlobales on sueVarGlobales.VarGlobal_Id=sueLiqVarEmpGlobales.VarGlobal_Id and
sueLiqVarEmpGlobales.Empresa_Id=@pEmpresa_Id and
@pFecha between Fecha_Desde and Fecha_Hasta
where sueVarGlobales.PorEmpresa=1
order by 1
go

drop procedure sueLiqVarGlobalesGuardar
go
create procedure sueLiqVarGlobalesGuardar
(
@pVarGlobal_Id int,
@pFecha_Desde datetime,
@pValor qMonedaD4,
@pUsuario_Id int,
@pEmpresa_Id int,
@pVer int
)
as
--Si no habia valor para esta variable asigno la fecha de incio de summa
set @pFecha_Desde= case when exists(select 1 from sueLiqVarGlobales where VarGlobal_Id=@pVarGlobal_Id and Fecha_Hasta='29990101') then (@pFecha_Desde) else (select FechaInicioSumma from genEmpresas where genEmpresas=@pEmpresa_Id) end
-- si no cambio nada del valor actual no hago nada
if not exists(select 1 from sueLiqVarGlobales where Fecha_Hasta='29990101' and VarGlobal_Id=@pVarGlobal_Id and Valor=@pValor)
begin
-- si el valor actual tiene la misma fecha desde solo cambio el valor
if exists (select 1 from sueLiqVarEmpGlobales where Fecha_Desde=@pFecha_Desde and Fecha_Hasta='29990101' and VarGlobal_Id=@pVarGlobal_Id)
begin
update sueLiqVarEmpGlobales set Valor=@pValor where Fecha_Desde=@pFecha_Desde and Fecha_Hasta='29990101' and VarGlobal_Id=@pVarGlobal_Id
end
else
begin
update sueLiqVarGlobales set Fecha_Hasta=DATEADD(dd,-1,@pFecha_Desde) where VarGlobal_Id=@pVarGlobal_Id and Fecha_Hasta='29990101'
insert into sueLiqVarGlobales (VarGlobal_Id, Valor, Usuario_Id, Fecha_Desde, Fecha_Hasta,Ver) values (@pVarGlobal_Id, @pValor, @pUsuario_Id, @pFecha_Desde, '29990101',@pVer)
end
end
go

drop procedure sueLiqVarEmpGlobalesGuardar
go
create procedure sueLiqVarEmpGlobalesGuardar
(
@pVarGlobal_Id int,
@pFecha_Desde datetime,
@pValor qMonedaD4,
@pUsuario_Id int,
@pEmpresa_Id int
)
as
--Si no habia valor para esta variable asigno la fecha de incio de summa
set @pFecha_Desde= case when exists(select 1 from sueLiqVarEmpGlobales where VarGlobal_Id=@pVarGlobal_Id and Empresa_Id=@pEmpresa_Id and Fecha_Hasta='29990101') then (@pFecha_Desde) else (select FechaInicioSumma from genEmpresas where genEmpresas=@pEmpresa_Id) end
--Si no Cambio ningun dato del valor actual no hago nada
if not exists(select 1 from sueLiqVarEmpGlobales where Fecha_Hasta='29990101' and VarGlobal_Id=@pVarGlobal_Id and Valor=@pValor and Empresa_Id= @pEmpresa_Id)
begin
-- si la el valor actual tiene la misma fecha desde solo actualizo el valor
if exists (select 1 from sueLiqVarEmpGlobales where Fecha_Desde=@pFecha_Desde and Fecha_Hasta='29990101' and VarGlobal_Id=@pVarGlobal_Id and Empresa_Id= @pEmpresa_Id)
begin
update sueLiqVarEmpGlobales set Valor=@pValor where Fecha_Desde=@pFecha_Desde and Fecha_Hasta='29990101' and VarGlobal_Id=@pVarGlobal_Id and Empresa_Id= @pEmpresa_Id
end
else
begin
update sueLiqVarEmpGlobales set Fecha_Hasta=DATEADD(dd,-1,@pFecha_Desde) where VarGlobal_Id=@pVarGlobal_Id and Fecha_Hasta='29990101' and Empresa_Id=@pEmpresa_Id
insert into sueLiqVarEmpGlobales (VarGlobal_Id, Valor, Usuario_Id, Fecha_Desde, Fecha_Hasta, Empresa_Id) values (@pVarGlobal_Id, @pValor, @pUsuario_Id, @pFecha_Desde, '29990101', @pEmpresa_Id)
end
end
go

drop procedure sueLiqVarGlobalesEliminar
go
create procedure sueLiqVarGlobalesEliminar
(
@pVarGlobal_Id int
)
as
delete sueLiqVarGlobales where @pVarGlobal_Id=VarGlobal_Id
go

drop procedure sueLiqVarEmpGlobalesEliminar
go
create procedure sueLiqVarEmpGlobalesEliminar
(
@pVarGlobal_Id int,
@pEmpresa_Id int
)
as
delete sueLiqVarEmpGlobales where @pVarGlobal_Id=VarGlobal_Id and Empresa_Id=@pEmpresa_Id
go

drop procedure sueLiqVarGlobalHistorico
go
create procedure sueLiqVarGlobalHistorico
(
@pVarGlobal_Id int,
@pEmpresa_Id int
)
as
select @pVarGlobal_Id as VarGlobal_Id
select sueVarGlobales.VarGlobal_Id, sueVarGlobales.Descripcion as DescripcionVarGlobal, 
Fecha_Desde, Valor, sueLiqVarGlobales.Usuario_Id, 0 as Empresa_Id,Ver from sueLiqVarGlobales
inner join sueVarGlobales on sueVarGlobales.VarGlobal_Id=sueLiqVarGlobales.VarGlobal_Id
where 
sueVarGlobales.VarGlobal_Id=@pVarGlobal_Id
union all
select sueVarGlobales.VarGlobal_Id, sueVarGlobales.Descripcion as DescripcionVarGlobal,
Fecha_Desde, Valor, sueLiqVarEmpGlobales.Usuario_Id, sueLiqVarEmpGlobales.Empresa_Id,Null as Ver from sueLiqVarEmpGlobales
inner join sueVarGlobales on sueVarGlobales.VarGlobal_Id=sueLiqVarEmpGlobales.VarGlobal_Id

where 
sueLiqVarEmpGlobales.Empresa_Id=@pEmpresa_Id and
sueVarGlobales.VarGlobal_Id=@pVarGlobal_Id
go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueMovCont.sql*/
DROP PROCEDURE sueMovContGuardar
GO
CREATE PROCEDURE sueMovContGuardar
(
@psueLiquidacion bigint,
@pLegajo int,
@pConcepto_Id int,
@pCuenta_Id varchar(25),
@pCentro1_Id varchar(8),
@pCentro2_Id varchar(8),
@pImporte qMonedaD2
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM sueMovCont WHERE 
	(Legajo = dbo.FuncFKsuePersonal(@pLegajo)) AND 
	(Concepto_Id = dbo.FuncFKsueConceptos(@pConcepto_Id)) AND
	(Cuenta_Id =  dbo.FuncFKconCuentas(@pCuenta_Id)) AND 
	(Centro1_Id = dbo.FuncFkConCentro1(@pCentro1_Id)) AND 
	(Centro2_Id = dbo.FuncFkConCentro2(@pCentro2_Id)) AND 
	(sueLiquidacion = @psueLiquidacion)))

BEGIN 
	UPDATE sueMovCont
	SET		Importe = Importe+ @pImporte
	WHERE 
	(Legajo = dbo.FuncFKsuePersonal(@pLegajo)) AND 
	(Concepto_Id = dbo.FuncFKsueConceptos(@pConcepto_Id)) AND
	(Cuenta_Id =  dbo.FuncFKconCuentas(@pCuenta_Id)) AND 
	(Centro1_Id = dbo.FuncFkConCentro1(@pCentro1_Id)) AND 
	(Centro2_Id = dbo.FuncFkConCentro2(@pCentro2_Id)) AND 
	(sueLiquidacion = @psueLiquidacion)
END 
ELSE 
BEGIN 
	INSERT INTO sueMovCont
	(
		Legajo,
		Concepto_Id,
		Cuenta_Id,
		Centro1_Id,
		Centro2_Id,
		sueLiquidacion,
		Importe
	)
	VALUES 
	(
		dbo.FuncFKsuePersonal(@pLegajo),
		dbo.FuncFKsueConceptos(@pConcepto_Id),
		dbo.FuncFKconCuentas(@pCuenta_Id),
		dbo.FuncFKconCentro1(@pCentro1_Id),
		dbo.FuncFKconCentro2(@pCentro2_Id),
		@psueLiquidacion,
		@pImporte
	)
END 

GO

DROP PROCEDURE sueMovContDatos
GO
CREATE PROCEDURE sueMovContDatos
(
@psueLiquidacion bigint,
@pLegajo int = null,
@pConcepto_Id int = null,
@pCuenta_Id varchar(25) = null,
@pCentro1_Id varchar(8) = null,
@pCentro2_Id varchar(8) = null
)
AS
SET NOCOUNT ON 

SELECT sueMovCont.sueLiquidacion ,
	suePersonal.Legajo, suePersonal.ApellidoPaterno+','+suePersonal.ApellidoMaterno+','+
		suePersonal.Nombres as DescripcionLegajo,
	sueConceptos.Concepto_Id, sueConceptos.Descripcion as DescripcionConcepto, 
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuentas, 
	conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1,
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, 
	sueMovCont.Importe
FROM sueMovCont 
INNER JOIN conCuentas  ON (conCuentas.conCuentas = sueMovCont.Cuenta_Id)
INNER JOIN conCentro1  ON (conCentro1.conCentro1 = sueMovCont.Centro1_Id)
INNER JOIN conCentro2  ON (conCentro2.conCentro2 = sueMovCont.Centro2_Id)
INNER JOIN suePersonal ON (suePersonal.genEntidades = sueMovCont.Legajo)
INNER JOIN sueConceptos ON (sueConceptos.sueConceptos = sueMovCont.Concepto_Id)
WHERE 
(sueMovCont.sueLiquidacion = @psueLiquidacion)
and (suePersonal.Legajo = ISNULL(@pLegajo,suePersonal.Legajo))
AND (sueConceptos.Concepto_Id = ISNULL(@pConcepto_Id,sueConceptos.Concepto_Id))
AND (concuentas.Cuenta_Id = ISNULL(@pCuenta_Id,concuentas.Cuenta_Id))
AND (conCentro1.Centro1_Id = ISNULL(@pCentro1_Id,conCentro1.Centro1_Id))
AND (conCentro2.Centro2_Id = ISNULL(@pCentro2_Id,conCentro2.Centro2_Id))
ORDER BY 1,2,4
 
RETURN @@Error 

GO

DROP PROCEDURE sueMovContEliminar
GO
CREATE PROCEDURE sueMovContEliminar
(
@psueLiquidacion bigint,
@pLegajo int = null,
@pConcepto_Id int = null,
@pCuenta_Id varchar(25) = null,
@pCentro1_Id varchar(8) = null,
@pCentro2_Id varchar(8) = null
)
AS
SET NOCOUNT ON 

DELETE FROM sueMovCont 
WHERE 
sueLiquidacion = @psueLiquidacion and
Exists(select 1 from suePersonal where
	suePersonal.genEntidades = sueMovCont.Legajo and 
	suePersonal.Legajo = ISNULL(@pLegajo,suePersonal.Legajo)) AND 
Exists(SELECT 1 from sueConceptos WHERE 
	sueConceptos.sueConceptos = sueMovCont.Concepto_id and 
	sueConceptos.Concepto_Id = ISNULL(@pConcepto_Id, sueConceptos.Concepto_Id)) AND 
Exists(SELECT 1 FROM conCuentas WHERE
	conCuentas.conCuentas= sueMovCont.Cuenta_Id and 
	conCuentas.Cuenta_Id = ISNULL(@pCuenta_Id, conCuentas.Cuenta_Id)) AND
Exists(SELECT 1 from conCentro1 WHERE
	conCentro1.conCentro1= sueMovCont.Centro1_Id AND
	conCentro1.Centro1_Id = ISNULL(@pCentro1_Id,conCentro1.Centro1_Id)) AND 
Exists(SELECT 1 from conCentro2 WHERE
	conCentro2.conCentro2= sueMovCont.Centro2_Id AND
	conCentro2.Centro2_Id = ISNULL(@pCentro2_Id,conCentro2.Centro2_Id))

 RETURN @@Error 

 GO


GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueNominaCfdi.sql*/
DROP PROCEDURE sueNominaCfdiGuardar
GO
CREATE PROCEDURE sueNominaCfdiGuardar
(
@pFolio int,
@psueLiquidacion bigint,
@pLegajo int,
@pSelloDigital varchar(max) = NULL,
@pXml varchar(max) = NULL,
@pNoCertificado varchar(20),
@pUUID varchar(36) = NULL,
@pFechaTimbrado varchar(19) = NULL,
@pSelloSat varchar(max) = NULL,
@pnoCertificadoSAT varchar(20) = NULL,
@pFecha varchar(20),
@pAnulada Sino,
@pRfcProvCertif varchar(12) = NULL,
@pLeyenda varchar(150) = NULL
)
AS
SET NOCOUNT ON 
if (@pFolio != 0)

BEGIN 
	UPDATE sueNominaCfdi
	SET		sueLiquidacion = @psueLiquidacion,
		Legajo = dbo.FuncFKsuePersonal(@pLegajo),
		SelloDigital = @pSelloDigital,
		Xml = @pXml,
		NoCertificado = @pNoCertificado,
		UUID = @pUUID,
		FechaTimbrado = @pFechaTimbrado,
		SelloSat = @pSelloSat,
		noCertificadoSAT = @pnoCertificadoSAT,
		Fecha = @pFecha,
		Anulada = @pAnulada,
		RfcProvCertif = @pRfcProvCertif,
		Leyenda = @pLeyenda
	WHERE (Folio = @pFolio)
END 
ELSE 
BEGIN 
	SELECT @pFolio= ISNULL(MAX(Folio),0)+1 from sueNominaCfdi

	INSERT INTO sueNominaCfdi
	(
		Folio,
		sueLiquidacion,
		Legajo,
		SelloDigital,
		Xml,
		NoCertificado,
		UUID,
		FechaTimbrado,
		SelloSat,
		noCertificadoSAT,
		Fecha,
		Anulada,
		RfcProvCertif,
		Leyenda
	)
	VALUES 
	(
		@pFolio,
		@psueLiquidacion,
		dbo.FuncFKsuePersonal(@pLegajo),
		@pSelloDigital,
		@pXml,
		@pNoCertificado,
		@pUUID,
		@pFechaTimbrado,
		@pSelloSat,
		@pnoCertificadoSAT,
		@pFecha,
		@pAnulada,
		@pRfcProvCertif,
		@pLeyenda
	)
END 
SELECT @pFolio as RetVal
GO

DROP PROCEDURE sueNominaCfdiDatos
GO
CREATE PROCEDURE sueNominaCfdiDatos
(
@pFolio int
)
AS
SET NOCOUNT ON 

SELECT sueNominaCfdi.Folio, sueNominaCfdi.sueLiquidacion, sueLiquidacion.Descripcion as DescripcionLiquidacion, 
	suePersonal.Legajo, suePersonal.ApellidoPaterno+' '+suePersonal.ApellidoPaterno+' '+suePersonal.Nombres  as Nombre, 
	sueNominaCfdi.SelloDigital, sueNominaCfdi.Xml, sueNominaCfdi.NoCertificado,
	sueNominaCfdi.UUID, sueNominaCfdi.FechaTimbrado, sueNominaCfdi.SelloSat, sueNominaCfdi.noCertificadoSAT,
	sueNominaCfdi.Fecha, sueNominaCfdi.Anulada, sueNominaCfdi.RfcProvCertif, sueNominaCfdi.Leyenda
FROM sueNominaCfdi 
INNER JOIN sueLiquidacion  ON (sueLiquidacion.sueLiquidacion = sueNominaCfdi.sueLiquidacion)
INNER JOIN suePersonal  ON (suePersonal.genEntidades = sueNominaCfdi.Legajo)
WHERE (sueNominaCfdi.Folio = @pFolio)
 
 RETURN @@Error 

GO

DROP PROCEDURE sueNominaCfdiCancelar
GO
CREATE PROCEDURE sueNominaCfdiCancelar
(
@pFolio int 
)
AS
SET NOCOUNT ON 

Update sueNominaCfdi  set Anulada = 1 , FechaCancelacion = dbo.FechaActual()
	WHERE (Folio = @pFolio)
 
 RETURN @@Error 

GO
-- sueNominasQueEmpleadosDatos 10626,0,9999


DROP PROCEDURE sueNominasQueEmpleadosDatos
GO

CREATE PROCEDURE sueNominasQueEmpleadosDatos(
	@sueLiquidacion bigint, 
	@LegajoDesde int, 
	@LegajoHasta int
)
as

	SELECT suePersonal.Legajo
	from sueliquidacion inner join suePersonal ON 
		EXISTS(SELECT 1 From sueTerminada WHERE
			sueTerminada.sueLiquidacion = sueLiquidacion.sueLiquidacion And
			sueTerminada.Legajo = suePersonal.genEntidades)
	where
		sueliquidacion.sueliquidacion = @sueLiquidacion AND 
		suePersonal.Legajo Between @LegajoDesde And @LegajoHasta and
		not exists(select 1 from sueNominaCfdi where
			sueNominaCfdi.sueLiquidacion = sueLiquidacion.sueLiquidacion and 
			sueNominaCfdi.Legajo = suePersonal.genEntidades and 
			sueNominaCfdi.Anulada = 0)
			ORDER BY 1
GO

DROP PROCEDURE sueNominasQueEmpleadosDescargarDatos
go
CREATE PROCEDURE sueNominasQueEmpleadosDescargarDatos(
	@sueLiquidacion bigint, 
	@LegajoDesde int, 
	@LegajoHasta int
)
as

	SELECT suePersonal.Legajo, sueNominaCfdi.Folio, suePersonal.eMail
	from sueliquidacion inner join sueNominaCfdi on sueNominaCfdi.sueLiquidacion = sueLiquidacion.sueLiquidacion 
			inner join suePersonal ON  sueNominaCfdi.Legajo = suePersonal.genEntidades 
	where
		sueliquidacion.sueliquidacion = @sueLiquidacion AND 
		suePersonal.Legajo Between @LegajoDesde And @LegajoHasta and
		sueNominaCfdi.Anulada = 0
			
GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePagosHabi.sql*/
DROP PROCEDURE suePagosHabiGuardar
GO
CREATE PROCEDURE suePagosHabiGuardar
(
@psueLiquidacion bigint,
@ptesMovimientos bigint = NULL,
@pFechaHabilitacion qFecha= NULL,
@pImporte qMonedaD2,
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM suePagosHabi WHERE (sueLiquidacion = @psueLiquidacion)))
BEGIN 
	UPDATE suePagosHabi
	SET		tesMovimientos = @ptesMovimientos,
		FechaHabilitacion = @pFechaHabilitacion,
		Importe = @pImporte,
		Usuario_Id = @pUsuario_Id
	WHERE (sueLiquidacion = @psueLiquidacion)
END 
ELSE 
BEGIN 
	INSERT INTO suePagosHabi
	(
		sueLiquidacion,
		tesMovimientos,
		FechaHabilitacion,
		Importe,
		Usuario_Id
	)
	VALUES 
	(
		@psueLiquidacion,
		@ptesMovimientos,
		@pFechaHabilitacion,
		@pImporte,
		@pUsuario_Id
	)
END 

GO

DROP PROCEDURE suePagosHabiDatos
GO
CREATE PROCEDURE suePagosHabiDatos
(
@psueLiquidacion bigint
)
AS
SET NOCOUNT ON 

SELECT suePagosHabi.sueLiquidacion, sueLiquidacion.Descripcion as DescripcionLiquidacion, 
	suePagosHabi.tesMovimientos, 
	suePagosHabi.FechaHabilitacion as FechaHabilitacion, 
	suePagosHabi.Importe, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, 
	sueLiquidacion.Anio, sueLiquidacion.Mes, sueLiquidacion.Quincena, sueLiquidacion.Decena, 
	sueLiquidacion.Semana, sueLiquidacion.Vez
FROM suePagosHabi 
INNER JOIN sueLiquidacion  ON (sueLiquidacion.sueLiquidacion = suePagosHabi.sueLiquidacion)
LEFT JOIN tesMovimientos  ON (tesMovimientos.tesMovimientos = suePagosHabi.tesMovimientos)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = suePagosHabi.Usuario_Id)
WHERE (sueLiquidacion.sueLiquidacion = @psueLiquidacion)
 
 RETURN @@Error 

GO

DROP PROCEDURE suePagosHabiEliminar
GO
CREATE PROCEDURE suePagosHabiEliminar
(
@psueLiquidacion bigint
)
AS
SET NOCOUNT ON 

DELETE FROM suePagosHabi 
WHERE (sueLiquidacion = @psueLiquidacion)
 
 RETURN @@Error 

GO

GO


DROP PROCEDURE suePagosHabiPendDatos
GO
CREATE PROCEDURE suePagosHabiPendDatos
(
	@Empresa_Id int
)
AS
SET NOCOUNT ON 

SELECT @Empresa_Id as Empresa_Id

SELECT sueLiquidacion.sueLiquidacion, sueLiquidacion.Descripcion as DescripcionLiquidacion, 
	sueLiquidacion.PorEmpleado,
	ISNULL(suePagosHabi.FechaHabilitacion, sueLiquidacion.FechaPago) as FechaHabilitacion, 
	suePagosHabi.Importe, 	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, 
	Cast(case when suePagosHabi.FechaHabilitacion IS NULL THEN 0 ELSE 1 END as Bit) as Marca, 
	dbo.Segmento(genAsiSegmentos.Segmento_Id,  genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, 
	genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) AS Segmento,
	sueLiquidacion.Anio, sueLiquidacion.Mes, sueLiquidacion.Quincena, sueLiquidacion.Decena, 
	sueLiquidacion.Semana, sueLiquidacion.Vez
FROM suePagosHabi 
INNER JOIN sueLiquidacion  ON (sueLiquidacion.sueLiquidacion = suePagosHabi.sueLiquidacion)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = suePagosHabi.Usuario_Id)
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id =sueLiquidacion.sueLiquidacion
WHERE 
	suePagosHabi.tesMovimientos IS NULL and 
	genAsiSegmentos.Empresa_Id = @Empresa_Id
	

-- por empleado
exec suePagosHabiPorEmpleadoDatos 0,0,0

 
RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePagosHabiPorEmpleado.sql*/
DROP PROCEDURE suePagosHabiPorEmpleadoGuardar
GO
CREATE PROCEDURE suePagosHabiPorEmpleadoGuardar
(
@pSecuencia int,
@pLegajo int,
@psueLiquidacion bigint,
@ptesMovimientos bigint = NULL,
@pFechaHabilitacion qFecha = NULL,
@pImporte qMonedaD2,
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM suePagosHabiPorEmpleado WHERE (Secuencia = @pSecuencia) AND 
	(Legajo = dbo.FuncFksuePersonal(@pLegajo)) AND (sueLiquidacion = @psueLiquidacion)))
BEGIN 
	UPDATE suePagosHabiPorEmpleado
	SET		tesMovimientos = @ptesMovimientos,
		FechaHabilitacion = @pFechaHabilitacion,
		Importe = @pImporte,
		Usuario_Id = @pUsuario_Id
	WHERE (Secuencia = @pSecuencia) AND (Legajo = 
	dbo.FuncFksuePersonal(@pLegajo)) AND (sueLiquidacion = @psueLiquidacion)
END 
ELSE 
BEGIN 
	INSERT INTO suePagosHabiPorEmpleado
	(
		Secuencia,
		Legajo,
		sueLiquidacion,
		tesMovimientos,
		FechaHabilitacion,
		Importe,
		Usuario_Id
	)
	VALUES 
	(
		@pSecuencia,
		dbo.FuncFksuePersonal(@pLegajo),
		@psueLiquidacion,
		@ptesMovimientos,
		@pFechaHabilitacion,
		@pImporte,
		@pUsuario_Id
	)
END 

GO

DROP PROCEDURE suePagosHabiPorEmpleadoDatos
GO
CREATE PROCEDURE suePagosHabiPorEmpleadoDatos
(
@psueLiquidacion bigint,
@pSecuencia int = NULL,
@pLegajo int = NULL

)
AS
SET NOCOUNT ON 

SELECT Cast(1 as Bit) as Marca, suePagosHabiPorEmpleado.Secuencia, suePersonal.Legajo, 
	suePersonal.Nombres+','+suePersonal.ApellidoPaterno+','+suePersonal.ApellidoMaterno as DescripcionPersonal, 
	suePagosHabiPorEmpleado.sueLiquidacion, 
	suePagosHabiPorEmpleado.tesMovimientos, 
	ISNULL(suePagosHabiPorEmpleado.FechaHabilitacion, sueLiquidacion.FechaPago) as FechaHabilitacion,
	suePagosHabiPorEmpleado.Importe, 
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, 
	sueLiquidacion.Anio, sueLiquidacion.Mes, sueLiquidacion.Quincena, sueLiquidacion.Decena, 
	sueLiquidacion.Semana, sueLiquidacion.Vez
FROM suePagosHabiPorEmpleado 
INNER JOIN suePersonal  ON (suePersonal.genEntidades = suePagosHabiPorEmpleado.Legajo)
INNER JOIN sueLiquidacion  ON (sueLiquidacion.sueLiquidacion = suePagosHabiPorEmpleado.sueLiquidacion)
LEFT JOIN tesMovimientos  ON (tesMovimientos.tesMovimientos = suePagosHabiPorEmpleado.tesMovimientos)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = suePagosHabiPorEmpleado.Usuario_Id)
WHERE (sueLiquidacion.sueLiquidacion = @psueLiquidacion) 
AND (suePagosHabiPorEmpleado.Secuencia = ISNULL(@pSecuencia,suePagosHabiPorEmpleado.Secuencia))
AND (suePersonal.Legajo = ISNULL(@pLegajo,suePersonal.Legajo))


 
RETURN @@Error 

GO

DROP PROCEDURE suePagosHabiPorEmpleadoEliminar
GO
CREATE PROCEDURE suePagosHabiPorEmpleadoEliminar
(
@psueLiquidacion bigint,
@pSecuencia int = NULL ,
@pLegajo int = NULL

)
AS
SET NOCOUNT ON 

DELETE FROM suePagosHabiPorEmpleado 
WHERE 
(sueLiquidacion = @psueLiquidacion) 
AND (Secuencia = ISNULL(@pSecuencia, Secuencia))
AND (Legajo = CASE WHEN   @pLegajo IS NULL THEN Legajo ELSE dbo.FuncFksuePersonal(@pLegajo) END)

 
 RETURN @@Error 

GO

DROP PROCEDURE suePagosHabiPorEmpleadoPendDatos
GO
CREATE PROCEDURE suePagosHabiPorEmpleadoPendDatos
(
	@psueLiquidacion bigint
)
AS
SET NOCOUNT ON 

SELECT sueLiquidacion
from sueLiquidacion where sueLiquidacion = @psueLiquidacion

SELECT Cast(1 as Bit) as Marca, suePagosHabiPorEmpleado.Secuencia, suePersonal.Legajo, 
	suePersonal.Nombres+','+suePersonal.ApellidoPaterno+','+suePersonal.ApellidoMaterno as DescripcionPersonal, 
	suePagosHabiPorEmpleado.sueLiquidacion, 
	ISNULL(suePagosHabiPorEmpleado.FechaHabilitacion, sueLiquidacion.FechaPago) as FechaHabilitacion,
	suePagosHabiPorEmpleado.Importe, 
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, 
	sueLiquidacion.Anio, sueLiquidacion.Mes, sueLiquidacion.Quincena, sueLiquidacion.Decena, 
	sueLiquidacion.Semana, sueLiquidacion.Vez
FROM suePagosHabiPorEmpleado 
INNER JOIN suePersonal  ON (suePersonal.genEntidades = suePagosHabiPorEmpleado.Legajo)
INNER JOIN sueLiquidacion  ON (sueLiquidacion.sueLiquidacion = suePagosHabiPorEmpleado.sueLiquidacion)
LEFT JOIN tesMovimientos  ON (tesMovimientos.tesMovimientos = suePagosHabiPorEmpleado.tesMovimientos)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = suePagosHabiPorEmpleado.Usuario_Id)
WHERE 
	(sueLiquidacion.sueLiquidacion = @psueLiquidacion) AND 
	(suePagosHabiPorEmpleado.tesMovimientos IS NULL)
UNION ALL
SELECT Cast(0 as Bit) as Marca, 1 Secuencia, suePersonal.Legajo, 
	suePersonal.Nombres+','+suePersonal.ApellidoPaterno+','+suePersonal.ApellidoMaterno as DescripcionPersonal, 
	sueLiquidacion.sueLiquidacion, 
	sueLiquidacion.FechaPago AS FechaHabilitacion,
	SUM(sueTerminada.Importe*sueTerminada.Signo) as Importe, 
	' ' Usuario_Id, ' ' as DescripcionUsuario, sueLiquidacion.Anio, sueLiquidacion.Mes, sueLiquidacion.Quincena, sueLiquidacion.Decena, 
	sueLiquidacion.Semana, sueLiquidacion.Vez
FROM 
sueLiquidacion 
INNER JOIN sueTerminada ON sueLiquidacion.sueLiquidacion = sueTerminada.sueLiquidacion
inner join suePersonal ON (suePersonal.genEntidades = sueTerminada.Legajo)
WHERE
	sueTerminada.sueLiquidacion = @psueLiquidacion And
	NOT EXISTS(SELECT 1 FROM suePagosHabiPorEmpleado  
	WHERE
		sueTerminada.sueLiquidacion = suePagosHabiPorEmpleado.sueLiquidacion And 
		sueTerminada.Legajo =suePagosHabiPorEmpleado.legajo) 
GROUP BY suePersonal.Legajo, 
	suePersonal.Nombres,suePersonal.ApellidoPaterno,suePersonal.ApellidoMaterno , 
	sueLiquidacion.sueLiquidacion, sueLiquidacion.FechaPago, 
	sueLiquidacion.Anio, sueLiquidacion.Mes, sueLiquidacion.Quincena, sueLiquidacion.Decena, 
	sueLiquidacion.Semana, sueLiquidacion.Vez
ORDER BY 2
 
 RETURN @@Error 

GO



DROP PROCEDURE suePagosHabiAsignarTesMovimientos
GO
CREATE PROCEDURE suePagosHabiAsignarTesMovimientos
(

	@psueLiquidacion bigint, 
	@pTesmMovimientos bigint = NULL

)
AS
SET NOCOUNT ON 

UPDATE suePagosHabiPorEmpleado SET tesMovimientos = @pTesmMovimientos
WHERE 
	sueLiquidacion = @psueLiquidacion

UPDATE suePagosHabi SET tesMovimientos = @pTesmMovimientos
WHERE 
	sueLiquidacion = @psueLiquidacion
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePeriodicidad.sql*/
DROP PROCEDURE suePeriodicidadGuardar
GO
CREATE PROCEDURE suePeriodicidadGuardar
(
@pPeriodo_Id char(1),
@pPeriodo_Id_Nueva char(1),
@pDescripcion varchar(30),
@pDias qMonedaD4,
@pCodFiscal VarChar(2) = NULL,
@pEmpresa_Id int =null
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM suePeriodicidad WHERE (Periodo_Id = @pPeriodo_Id)))
BEGIN 
	UPDATE suePeriodicidad
	SET		Periodo_Id=@pPeriodo_Id_Nueva,
	Descripcion = @pDescripcion,
		Dias = @pDias, 
		CodFiscal = @pCodFiscal,
		Empresa_Id=@pEmpresa_Id
	WHERE (Periodo_Id = @pPeriodo_Id)
END 
ELSE 
BEGIN 
	INSERT INTO suePeriodicidad
	(
		Periodo_Id,
		Descripcion,
		Dias,
		FechaActiva,
		CodFiscal,
		Empresa_Id
	)
	VALUES 
	(
		@pPeriodo_Id_Nueva,
		@pDescripcion,
		@pDias,
		dbo.FechaActual(),
		@pCodFiscal,
		@pEmpresa_Id
	)
END 

GO

DROP PROCEDURE suePeriodicidadDatos
GO
CREATE PROCEDURE suePeriodicidadDatos
(
@pPeriodo_Id char(1)
)
AS
SET NOCOUNT ON 

SELECT suePeriodicidad.Periodo_Id, suePeriodicidad.Periodo_Id as Periodo_Id_Nueva, suePeriodicidad.Descripcion, suePeriodicidad.Dias, suePeriodicidad.FechaActiva,
Empresa_Id, cast(case when suePeriodicidad.Empresa_Id is null then 1 else 0 end as bit) as PTodasEmpresas, CodFiscal
FROM suePeriodicidad 
WHERE (Periodo_Id = @pPeriodo_Id)

RETURN @@Error 
GO

DROP PROCEDURE suePeriodicidadEliminar
GO
CREATE PROCEDURE suePeriodicidadEliminar
(
@pPeriodo_Id char(1) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM suePeriodicidad 
WHERE (Periodo_Id = ISNULL(@pPeriodo_Id, Periodo_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersActividad.sql*/
DROP PROCEDURE suePersActividadGuardar
GO
CREATE PROCEDURE suePersActividadGuardar
(
@pLegajo bigint,
@pFechaDesde qFechaHora,
@pFechaHasta qFechaHora,
@pActividad_Id varchar(3),
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
set @pLegajo=(select genEntidades from suePersonal where Legajo=@pLegajo)
IF (EXISTS (SELECT 1 FROM suePersActividad WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)))
BEGIN 
	UPDATE suePersActividad
	SET		FechaHasta = isnull((select min(Catego2.FechaDesde) 
		from suePersActividad Catego2 where 
			Catego2.Legajo = suePersActividad.Legajo and 
			Catego2.FechaDesde>suePersActividad.FechaDesde),@pFechaHasta),
		Actividad_Id = @pActividad_Id,
		Usuario_Id = @pUsuario_Id
	WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)
END 
ELSE 
BEGIN 
if(exists (select Actividad_Id from  suePersActividad where (Legajo = (@pLegajo))))
begin
set TRANSACTION ISOLATION level READ UNCOMMITTED
set @pFechaDesde=(select FechaIngreso from suePersonal where genEntidades=@pLegajo)
end
if (not exists(select Actividad_Id from suePersActividad where (Legajo = @pLegajo) AND (FechaHasta = '29990101')and Actividad_Id=@pActividad_Id))
begin
update suePersActividad set FechaHasta= DATEADD(dd,-1,@pFechaDesde) where FechaHasta='29990101' and 	Legajo = @pLegajo
	INSERT INTO suePersActividad
	(
		Legajo,
		FechaDesde,
		FechaHasta,
		Actividad_Id,
		Usuario_Id
	)
	VALUES 
	(
		@pLegajo,
		@pFechaDesde,
		@pFechaHasta,
		@pActividad_Id,
		@pUsuario_Id
	) 
end
end
GO

DROP PROCEDURE suePersActividadDatos
GO
CREATE PROCEDURE suePersActividadDatos
(
@pLegajo bigint
)
AS
SET NOCOUNT ON 

SELECT suePersActividad.Legajo, suePersonal.Nombres as DescripcionPersonal, suePersActividad.FechaDesde, suePersActividad.FechaHasta,
	suePersActividad.Actividad_Id, genEntidadesBasicasValor.Descripcion as DescripcionActividad, suePersActividad.Usuario_Id
FROM suePersActividad 
INNER JOIN suePersonal  ON (suePersonal.genEntidades = suePersActividad.Legajo)
left join genEntidadesBasicasValor on genEntidadesBasicasValor.Entidad_Id=1501 and genEntidadesBasicasValor.Clave=suePersActividad.Actividad_Id
WHERE (suePersonal.Legajo = @pLegajo)
 
 RETURN @@Error 

GO

DROP PROCEDURE suePersActividadEliminar
GO
CREATE PROCEDURE suePersActividadEliminar
(
@pLegajo bigint,
@pFechaDesde qFechaHora = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM suePersActividad 
WHERE (Legajo = dbo.FuncFKsuePersonal(@pLegajo))
AND (FechaDesde = ISNULL(@pFechaDesde, FechaDesde))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersAfore.sql*/
DROP PROCEDURE suePersAforeGuardar
GO
CREATE PROCEDURE suePersAforeGuardar
(
@pLegajo bigint,
@pFechaDesde qFechaHora,
@pFechaHasta qFechaHora,
@pAfore_Id varchar(5),
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
set @pLegajo=(select genEntidades from suePersonal where Legajo=@pLegajo)
IF (EXISTS (SELECT 1 FROM suePersAfore WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)))
BEGIN 
	UPDATE suePersAfore
	SET		FechaHasta = isnull((select min(Catego2.FechaDesde) 
		from suePersAfore Catego2 
			where 
			Catego2.Legajo = suePersAfore.Legajo and 
			Catego2.FechaDesde>suePersAfore.FechaDesde),@pFechaHasta),
		Afore_Id = @pAfore_Id,
		Usuario_Id = @pUsuario_Id
	WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)
END 
ELSE 
BEGIN 
if not exists (select 1 from suePersAfore where suePersAfore.Legajo=@pLegajo)
begin
set transaction isolation level read UNCOMMITTED
set @pFechaDesde=(select FechaIngreso from suePersonal where @pLegajo=genEntidades)
end
if (not exists(select Afore_Id from suePersAfore where (Legajo = @pLegajo) AND (FechaHasta = '29990101')and @pAfore_Id=@pAfore_Id))
begin
update suePersAfore set FechaHasta=DATEADD(dd,-1, @pFechaDesde) where FechaHasta='29990101' and 	Legajo = @pLegajo
	INSERT INTO suePersAfore
	(
		Legajo,
		FechaDesde,
		FechaHasta,
		Afore_Id,
		Usuario_Id
	)
	VALUES 
	(
		@pLegajo,
		@pFechaDesde,
		@pFechaHasta,
		@pAfore_Id,
		@pUsuario_Id
	)
END 
end
GO

DROP PROCEDURE suePersAforeDatos
GO
CREATE PROCEDURE suePersAforeDatos
(
@pLegajo bigint
)
AS
SET NOCOUNT ON 

SELECT suePersAfore.Legajo, suePersonal.Nombres as DescripcionPersonal, suePersAfore.FechaDesde, suePersAfore.FechaHasta,
	suePersAfore.Afore_Id, genEntidadesBasicasValor.Descripcion as DescripcionAfore, suePersAfore.Usuario_Id
FROM suePersAfore 
INNER JOIN suePersonal  ON (suePersonal.genEntidades = suePersAfore.Legajo)
left join genEntidadesBasicasValor on genEntidadesBasicasValor.Entidad_Id=1502 and genEntidadesBasicasValor.Clave = suePersAfore.Afore_Id
WHERE (suePersonal.Legajo = @pLegajo)
 
 RETURN @@Error 

GO

DROP PROCEDURE suePersAforeEliminar
GO
CREATE PROCEDURE suePersAforeEliminar
(
@pLegajo bigint,
@pFechaDesde qFechaHora = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM suePersAfore 
WHERE (Legajo = dbo.FuncFKsuePersonal(@pLegajo))
AND (FechaDesde = ISNULL(@pFechaDesde, FechaDesde))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersAporteAdic.sql*/
DROP PROCEDURE suePersAporteAdicGuardar
GO
CREATE PROCEDURE suePersAporteAdicGuardar
(
@pLegajo bigint,
@pFechaDesde qFechaHora,
@pFechaHasta qFechaHora,
@pAdicional qMonedaD2,
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
Set @pLegajo = (Select genEntidades From suePersonal Where Legajo = @pLegajo)
IF (EXISTS (SELECT 1 FROM suePersAporteAdic WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)))
BEGIN 
	UPDATE suePersAporteAdic
	SET FechaHasta = isNull((Select Min(Tabla2.FechaDesde) 
		From suePersAporteAdic Tabla2 
		Where 
		Tabla2.Legajo = suePersAporteAdic.Legajo And 
		Tabla2.FechaDesde>suePersAporteAdic.FechaDesde), @pFechaHasta),
		Adicional = @pAdicional,
		Usuario_Id = @pUsuario_Id
	Where (Legajo = @pLegajo) And (FechaDesde = @pFechaDesde)
END 
ELSE 
BEGIN 
	If (Not Exists(Select Adicional From suePersAporteAdic Where (Legajo = @pLegajo) And (FechaHasta = '29990101') And Adicional = @pAdicional))
	Begin
		If Not Exists (Select 1 From suePersAporteAdic Where Legajo = @pLegajo)
		BEGIN
			Set @pFechaDesde = (Select FechaIngreso From suePersonal Where genEntidades = @pLegajo)
		End
		Update suePersAporteAdic set FechaHasta = DATEADD(dd,-1, @pFechaDesde) Where FechaHasta='29990101' And Legajo = @pLegajo
		INSERT INTO suePersAporteAdic
		(
			Legajo,
			FechaDesde,
			FechaHasta,
			Adicional,
			Usuario_Id
		)
		VALUES 
		(
			@pLegajo,
			@pFechaDesde,
			@pFechaHasta,
			@pAdicional,
			@pUsuario_Id
		)
	End
End
GO

DROP PROCEDURE suePersAporteAdicDatos
GO
CREATE PROCEDURE suePersAporteAdicDatos
(
@pLegajo bigint
)
AS
SET NOCOUNT ON 

Select suePersAporteAdic.Legajo, suePersonal.Nombres as DescripcionPersonal, suePersAporteAdic.FechaDesde, suePersAporteAdic.FechaHasta,
	suePersAporteAdic.Adicional, --genEntidadesBasicasValor.Descripcion as DescripcionTipoSDI, 
	suePersAporteAdic.Usuario_Id
From suePersAporteAdic 
Inner Join suePersonal  ON (suePersonal.genEntidades = suePersAporteAdic.Legajo)
--left join genEntidadesBasicasValor on genEntidadesBasicasValor.Entidad_Id=1513 and genEntidadesBasicasValor.Clave=suePersTipoSDI.TipoSDI
Where (suePersonal.Legajo = @pLegajo)
 
Return @@Error 

GO

DROP PROCEDURE suePersAporteAdicEliminar
GO
CREATE PROCEDURE suePersAporteAdicEliminar
(
@pLegajo bigint,
@pFechaDesde qFechaHora = NULL
)
AS
SET NOCOUNT ON 

Delete From suePersAporteAdic 
Where (Legajo = dbo.FuncFKsuePersonal(@pLegajo))
And (FechaDesde = ISNULL(@pFechaDesde, FechaDesde))
 
Return @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersAporteVoluntario.sql*/
DROP PROCEDURE suePersAporteVoluntarioGuardar
GO
CREATE PROCEDURE suePersAporteVoluntarioGuardar
(
@pLegajo bigint,
@pFechaDesde qFechaHora,
@pFechaHasta qFechaHora,
@pVoluntario qMonedaD2,
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
Set @pLegajo = (Select genEntidades From suePersonal Where Legajo = @pLegajo)
IF (EXISTS (SELECT 1 FROM suePersAporteVoluntario WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)))
BEGIN 
	UPDATE suePersAporteVoluntario
	SET FechaHasta = isNull((Select Min(Tabla2.FechaDesde) 
		From suePersAporteVoluntario Tabla2 
		Where 
		Tabla2.Legajo = suePersAporteVoluntario.Legajo And 
		Tabla2.FechaDesde>suePersAporteVoluntario.FechaDesde), @pFechaHasta),
		Voluntario = @pVoluntario,
		Usuario_Id = @pUsuario_Id
	Where (Legajo = @pLegajo) And (FechaDesde = @pFechaDesde)
END 
ELSE 
BEGIN 
	If (Not Exists(Select Voluntario From suePersAporteVoluntario Where (Legajo = @pLegajo) And (FechaHasta = '29990101') And Voluntario = @pVoluntario))
	Begin
		If Not Exists (Select 1 From suePersAporteVoluntario Where Legajo = @pLegajo)
		BEGIN
			Set @pFechaDesde = (Select FechaIngreso From suePersonal Where genEntidades = @pLegajo)
		End
		Update suePersAporteVoluntario set FechaHasta = DATEADD(dd,-1, @pFechaDesde) Where FechaHasta='29990101' And Legajo = @pLegajo
		INSERT INTO suePersAporteVoluntario
		(
			Legajo,
			FechaDesde,
			FechaHasta,
			Voluntario,
			Usuario_Id
		)
		VALUES 
		(
			@pLegajo,
			@pFechaDesde,
			@pFechaHasta,
			@pVoluntario,
			@pUsuario_Id
		)
	End
End
GO

DROP PROCEDURE suePersAporteVoluntarioDatos
GO
CREATE PROCEDURE suePersAporteVoluntarioDatos
(
@pLegajo bigint
)
AS
SET NOCOUNT ON 

Select suePersAporteVoluntario.Legajo, suePersonal.Nombres as DescripcionPersonal, suePersAporteVoluntario.FechaDesde, suePersAporteVoluntario.FechaHasta,
	suePersAporteVoluntario.Voluntario, --genEntidadesBasicasValor.Descripcion as DescripcionTipoSDI, 
	suePersAporteVoluntario.Usuario_Id
From suePersAporteVoluntario 
Inner Join suePersonal  ON (suePersonal.genEntidades = suePersAporteVoluntario.Legajo)
--left join genEntidadesBasicasValor on genEntidadesBasicasValor.Entidad_Id=1513 and genEntidadesBasicasValor.Clave=suePersTipoSDI.TipoSDI
Where (suePersonal.Legajo = @pLegajo)
 
Return @@Error 

GO

DROP PROCEDURE suePersAporteVoluntarioEliminar
GO
CREATE PROCEDURE suePersAporteVoluntarioEliminar
(
@pLegajo bigint,
@pFechaDesde qFechaHora = NULL
)
AS
SET NOCOUNT ON 

Delete From suePersAporteVoluntario 
Where (Legajo = dbo.FuncFKsuePersonal(@pLegajo))
And (FechaDesde = ISNULL(@pFechaDesde, FechaDesde))
 
Return @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersCatego.sql*/
DROP PROCEDURE suePersCategoGuardar
GO
CREATE PROCEDURE suePersCategoGuardar
(
@pLegajo bigint,
@pFechaDesde qFechaHora,
@pFechaHasta qFechaHora,
@pCategoria_Id varchar(5) = NULL,
@pUsuario_Id int
)
AS
SET NOCOUNT ON 
set @pLegajo=(select genEntidades from suePersonal where Legajo=@pLegajo)
IF (EXISTS (SELECT 1 FROM suePersCatego WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)))
BEGIN 
	UPDATE suePersCatego
	SET		FechaHasta = isnull((select min(Catego2.FechaDesde) 
		from suePersCatego Catego2 
		where 
		Catego2.Legajo = suePersCatego.Legajo and 
		Catego2.FechaDesde>suePersCatego.FechaDesde),@pFechaHasta),
		Categoria_Id = dbo.FuncFKsueCategorias(@pCategoria_Id),
		Usuario_Id = @pUsuario_Id
	WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)
END 
ELSE 
BEGIN 
if not exists (select 1 from suePersCatego where suePersCatego.Legajo=@pLegajo)
BEGIN
set @pFechaDesde= (select FechaIngreso from suePersonal where suePersonal.genEntidades=@pLegajo)
end
if (not exists(select Categoria_Id from suePersCatego where (Legajo = @pLegajo) AND (FechaHasta = '29990101')and Categoria_Id= dbo.FuncFKsueCategorias(@pCategoria_Id)))
begin
update suePersCatego set FechaHasta=DATEADD(dd,-1, @pFechaDesde) where FechaHasta='29990101' and 	Legajo = @pLegajo
	INSERT INTO suePersCatego
	(
		Legajo,
		FechaDesde,
		FechaHasta,
		Categoria_Id,
		Usuario_Id
	)
	VALUES 
	(
		@pLegajo,
		@pFechaDesde,
		@pFechaHasta,
		dbo.FuncFKsueCategorias(@pCategoria_Id),
		@pUsuario_Id
	)
END 
end
GO

DROP PROCEDURE suePersCategoDatos
GO
CREATE PROCEDURE suePersCategoDatos
(
@pLegajo int
)
AS
SET NOCOUNT ON 

SELECT suePersCatego.Legajo, suePersCatego.FechaDesde, suePersCatego.FechaHasta, sueCategorias.Categoria_Id,
	sueCategorias.Descripcion as DescripcionCategorias, suePersCatego.Usuario_Id
FROM suePersCatego 
LEFT JOIN sueCategorias  ON (sueCategorias.sueCategorias = suePersCatego.Categoria_Id)
inner join suePersonal on suePersonal.genEntidades=suePersCatego.Legajo
WHERE (suePersonal.Legajo = @pLegajo)
 
 RETURN @@Error 

GO

DROP PROCEDURE suePersCategoEliminar
GO
CREATE PROCEDURE suePersCategoEliminar
(
@pLegajo bigint,
@pFechaDesde qFechaHora = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM suePersCatego 
WHERE (Legajo = dbo.FuncFKsuePersonal(@pLegajo))
AND (FechaDesde = ISNULL(@pFechaDesde, FechaDesde))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersCondServicio.sql*/
DROP PROCEDURE suePersCondServicioGuardar
GO
CREATE PROCEDURE suePersCondServicioGuardar
(
@pLegajo bigint,
@pFechaDesde qFechaHora,
@pFechaHasta qFechaHora,
@pCondServicio_Id varchar(2),
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
set @pLegajo=(select genEntidades from suePersonal where Legajo=@pLegajo)
IF (EXISTS (SELECT 1 FROM suePersCondServicio WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)))
BEGIN 
	UPDATE suePersCondServicio
	SET		FechaHasta = isnull((select min(Catego2.FechaDesde) 
		from suePersCondServicio Catego2 
		where 
		Catego2.Legajo = suePersCondServicio.Legajo and 
		Catego2.FechaDesde>suePersCondServicio.FechaDesde),@pFechaHasta),
		CondServicio_Id = @pCondServicio_Id,
		Usuario_Id = @pUsuario_Id
	WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)
END 
ELSE 
BEGIN 
if not exists (select 1 from suePersCondServicio where suePersCondServicio.Legajo = @pLegajo)
BEGIN
set @pFechaDesde=(select FechaIngreso from suePersonal where suePersonal.genEntidades=@pLegajo)
end
if (not exists(select CondServicio_Id from suePersCondServicio where (Legajo = @pLegajo) AND (FechaHasta = '29990101')and CondServicio_Id=@pCondServicio_Id))
begin
update suePersCondServicio set FechaHasta=DATEADD(dd,-1, @pFechaDesde) where FechaHasta='29990101' and 	Legajo = @pLegajo
	INSERT INTO suePersCondServicio
	(
		Legajo,
		FechaDesde,
		FechaHasta,
		CondServicio_Id,
		Usuario_Id
	)
	VALUES 
	(
		@pLegajo,
		@pFechaDesde,
		@pFechaHasta,
		@pCondServicio_Id,
		@pUsuario_Id
	)
END 
end
GO

DROP PROCEDURE suePersCondServicioDatos
GO
CREATE PROCEDURE suePersCondServicioDatos
(
@pLegajo bigint
)
AS
SET NOCOUNT ON 

SELECT suePersCondServicio.Legajo, suePersonal.Nombres as DescripcionPersonal, suePersCondServicio.FechaDesde, suePersCondServicio.FechaHasta,
	suePersCondServicio.CondServicio_Id, genEntidadesBasicasValor.Descripcion as DescripcionCondServicio, suePersCondServicio.Usuario_Id
FROM suePersCondServicio 
INNER JOIN suePersonal  ON (suePersonal.genEntidades = suePersCondServicio.Legajo)
left join genEntidadesBasicasValor on genEntidadesBasicasValor.Entidad_Id=1503 and genEntidadesBasicasValor.Clave=suePersCondServicio.CondServicio_Id
WHERE (suePersonal.Legajo = @pLegajo)
 
 RETURN @@Error 

GO

DROP PROCEDURE suePersCondServicioEliminar
GO
CREATE PROCEDURE suePersCondServicioEliminar
(
@pLegajo bigint,
@pFechaDesde qFechaHora = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM suePersCondServicio 
WHERE (Legajo = dbo.FuncFKsuePersonal(@pLegajo))
AND (FechaDesde = ISNULL(@pFechaDesde, FechaDesde))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersContable.sql*/
DROP PROCEDURE suePersContableGuardar
GO
CREATE PROCEDURE suePersContableGuardar
(
@pLegajo bigint,
@pFechaDesde qFechaHora,
@pFechaHasta qFechaHora,
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
set @pLegajo=(select genEntidades from suePersonal where Legajo=@pLegajo)
IF (EXISTS (SELECT 1 FROM suePersContable WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)))
BEGIN 
	UPDATE suePersContable
	SET		FechaHasta = isnull((select min(Catego2.FechaDesde) 
		from suePersContable Catego2 
		where 
		Catego2.Legajo = suePersContable.Legajo and 
		Catego2.FechaDesde>suePersContable.FechaDesde),@pFechaHasta),
		Usuario_Id = @pUsuario_Id
	WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)
END 
ELSE 
BEGIN 
if (not exists(select FechaDesde from suePersContable where (Legajo = @pLegajo) AND (FechaHasta = '29990101')and FechaDesde>=@pFechaDesde))
begin
if not exists (select 1 from suePersContable where Legajo=@pLegajo)
BEGIN
set @pFechaDesde =(select FechaIngreso from suePersonal where suePersonal.genEntidades=@pLegajo)
end
update suePersContable set FechaHasta=DATEADD(dd,-1, @pFechaDesde) where FechaHasta='29990101' and 	Legajo = @pLegajo
	INSERT INTO suePersContable
	(
		Legajo,
		FechaDesde,
		FechaHasta,
		Usuario_Id
	)
	VALUES 
	(
		@pLegajo,
		@pFechaDesde,
		@pFechaHasta,
		@pUsuario_Id
	)
END 
end
GO

DROP PROCEDURE suePersContableDatosSP
GO
CREATE PROCEDURE suePersContableDatosSP
(
@pLegajo bigint
)
AS
SET NOCOUNT ON 

SELECT suePersContable.Legajo, suePersonal.Nombres as DescripcionPersonal, suePersContable.FechaDesde, suePersContable.FechaHasta,
	suePersContable.Usuario_Id, Cast(0 as int) Renglon
FROM suePersContable 
INNER JOIN suePersonal  ON (suePersonal.genEntidades = suePersContable.Legajo)
WHERE (suePersonal.Legajo = @pLegajo)
 
 RETURN @@Error 

GO

DROP PROCEDURE suePersContableEliminar
GO
CREATE PROCEDURE suePersContableEliminar
(
@pLegajo bigint,
@pFechaDesde qFechaHora = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM suePersContable 
WHERE (Legajo = dbo.FuncFKsuePersonal(@pLegajo))
AND (FechaDesde = ISNULL(@pFechaDesde, FechaDesde))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersContableDatos.sql*/
DROP PROCEDURE suePersContableDatosGuardar
GO
CREATE PROCEDURE suePersContableDatosGuardar
(
@pLegajo bigint,
@pFechaDesde qFechaHora,
@pCuenta_Id varchar(25),
@pCentro1_Id varchar(8),
@pCentro2_Id varchar(8),
@pPorcentaje qPorcentaje
)
AS
SET NOCOUNT ON 
set @pLegajo=(select genEntidades from suePersonal where Legajo=@pLegajo)
if (exists(select 1 from suePersContable where (Legajo = @pLegajo)  and FechaDesde=@pFechaDesde) and 
not exists (select 1 from suePersContableDatos where FechaDesde=@pFechaDesde and Legajo=@pLegajo and Centro1_Id=dbo.FuncFKconCentro1( @pCentro1_Id )and Centro2_Id=dbo.FuncFKconCentro2( @pCentro2_Id )and Cuenta_Id=dbo.FuncFKconCuentas(@pCuenta_Id)))
begin
	INSERT INTO suePersContableDatos
	(
		Legajo,
		FechaDesde,
		Cuenta_Id,
		Centro1_Id,
		Centro2_Id,
		Porcentaje
	)
	VALUES 
	(
		@pLegajo,
		@pFechaDesde,
		dbo.FuncFKconCuentas(@pCuenta_Id),
		dbo.FuncFKconCentro1(@pCentro1_Id),
		dbo.FuncFKconCentro2(@pCentro2_Id),
		@pPorcentaje
	)
	
END 
update suePersContableDatos set Porcentaje=@pPorcentaje where FechaDesde=@pFechaDesde and Legajo=@pLegajo and Centro1_Id=dbo.FuncFKconCentro1( @pCentro1_Id )and Centro2_Id=dbo.FuncFKconCentro2( @pCentro2_Id )and Cuenta_Id=dbo.FuncFKconCuentas(@pCuenta_Id)
GO

DROP PROCEDURE suePersContableDatosDatos
GO
CREATE PROCEDURE suePersContableDatosDatos
(
@pLegajo bigint,
@pFechaDesde datetime=NULL
)
AS
SET NOCOUNT ON 

SELECT suePersContableDatos.Legajo, suePersContableDatos.FechaDesde, conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuentas, conCentro1.Centro1_Id,
	conCentro1.Descripcion as DescripcionCentro1, conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, suePersContableDatos.Porcentaje, 
		Cast(0 as int) Renglon
FROM suePersContableDatos 
INNER JOIN conCentro1  ON (conCentro1.conCentro1 = suePersContableDatos.Centro1_Id)
inner join conCentro2 on conCentro2.conCentro2= suePersContableDatos.Centro2_Id
left join conCuentas on conCuentas.conCuentas =suePersContableDatos.Cuenta_Id
inner join suePersonal on suePersonal.genEntidades=suePersContableDatos.Legajo
WHERE (suePersonal.Legajo = @pLegajo and suePersContableDatos.FechaDesde=isnull(@pFechaDesde, suePersContableDatos.FechaDesde))
 
 RETURN @@Error 

GO

DROP PROCEDURE suePersContableDatosEliminar
GO
CREATE PROCEDURE suePersContableDatosEliminar
(
@pLegajo bigint,
@pFechaDesde qFechaHora = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM suePersContableDatos 
WHERE (Legajo = dbo.FuncFKsuePersonal(@pLegajo))
AND (FechaDesde = ISNULL(@pFechaDesde,FechaDesde))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersConvenio.sql*/
DROP PROCEDURE suePersConvenioGuardar
GO
CREATE PROCEDURE suePersConvenioGuardar
(
@pLegajo bigint,
@pFechaDesde qFechaHora,
@pFechaHasta qFechaHora,
@pConvenio_Id varchar(5),
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
set @pLegajo=(select genEntidades from suePersonal where Legajo=@pLegajo)
IF (EXISTS (SELECT 1 FROM suePersConvenio WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)))
BEGIN 
	UPDATE suePersConvenio
	SET		FechaHasta = isnull((select min(Catego2.FechaDesde) 
			from suePersConvenio Catego2 
			where 
			Catego2.Legajo = suePersConvenio.Legajo and
			Catego2.FechaDesde>suePersConvenio.FechaDesde),@pFechaHasta),
		Convenio_Id = dbo.FuncFKsueConvenio(@pConvenio_Id),
		Usuario_Id = @pUsuario_Id
	WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)
END 
ELSE 
BEGIN 
if (not exists(select Convenio_Id from suePersConvenio where (Legajo = @pLegajo) AND (FechaHasta = '29990101')and Convenio_Id=dbo.FuncFKsueConvenio(@pConvenio_Id)))
begin
if not exists (select 1 from suePersConvenio where Legajo=@pLegajo)
BEGIN
set @pFechaDesde =(select FechaIngreso from suePersonal where genEntidades=@pLegajo)
end
update suePersConvenio set FechaHasta=DATEADD(dd,-1, @pFechaDesde) where FechaHasta='29990101' and 	Legajo = @pLegajo
	INSERT INTO suePersConvenio
	(
		Legajo,
		FechaDesde,
		FechaHasta,
		Convenio_Id,
		Usuario_Id
	)
	VALUES 
	(
		@pLegajo,
		@pFechaDesde,
		@pFechaHasta,
		dbo.FuncFKsueConvenio(@pConvenio_Id),
		@pUsuario_Id
	)
END 
end
GO

DROP PROCEDURE suePersConvenioDatos
GO
CREATE PROCEDURE suePersConvenioDatos
(
@pLegajo bigint
)
AS
SET NOCOUNT ON 

SELECT suePersConvenio.Legajo, suePersConvenio.FechaDesde, suePersConvenio.FechaHasta, sueConvenio.Convenio_Id, sueConvenio.Descripcion as DescripcionConvenio,
	suePersConvenio.Usuario_Id
FROM suePersConvenio 
inner join suePersonal on suePersConvenio.Legajo=suePersonal.genEntidades
LEFT JOIN sueConvenio  ON (sueConvenio.sueConvenio = suePersConvenio.Convenio_Id)
WHERE (suePersonal.Legajo = @pLegajo)
 
 RETURN @@Error 

GO

DROP PROCEDURE suePersConvenioEliminar
GO
CREATE PROCEDURE suePersConvenioEliminar
(
@pLegajo bigint,
@pFechaDesde qFechaHora = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM suePersConvenio 
WHERE (Legajo = dbo.FuncFKsuePersonal(@pLegajo))
AND (FechaDesde = ISNULL(@pFechaDesde, FechaDesde))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersDomicilio.sql*/
DROP PROCEDURE suePersDomicilioGuardar
GO
CREATE PROCEDURE suePersDomicilioGuardar
(
@pLegajo bigint,
@pFechaDesde qFechaHora,
@pFechaHasta qFechaHora,
@pDireccion1 varchar(100),
@pDireccion2 varchar(100),
@pNroExterior varchar(10),
@pNroInterior varchar(10),
@pLocalidad varchar(100),
@pCodigoPostal varchar(40),
@pEntreCalle1 varchar(60),
@pEntreCalle2 varchar(60),
@pProvincia_Id varchar(5) = NULL,
@pUsuario_Id int
)
AS
SET NOCOUNT ON 
set @pLegajo=(select genEntidades from suePersonal where Legajo=@pLegajo)
IF (EXISTS (SELECT 1 FROM suePersDomicilio WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)))
BEGIN 
	UPDATE suePersDomicilio
	SET		FechaHasta = isnull((select min(Catego2.FechaDesde) 
			from suePersDomicilio Catego2 where 
				catego2.Legajo = suePersDomicilio.Legajo and 
				Catego2.FechaDesde>suePersDomicilio.FechaDesde),@pFechaHasta),
		Direccion1 = @pDireccion1,
		Direccion2 = @pDireccion2,
		NroExterior = @pNroExterior,
		NroInterior = @pNroInterior,
		Localidad = @pLocalidad,
		CodigoPostal = @pCodigoPostal,
		EntreCalle1 = @pEntreCalle1,
		EntreCalle2 = @pEntreCalle2,
		Provincia_Id = dbo.FuncFKgenProvincias(@pProvincia_Id),
		Usuario_Id = @pUsuario_Id
	WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)
END 
ELSE 
BEGIN 
if (not exists(select 1 from suePersDomicilio where (Legajo = @pLegajo) AND (FechaHasta = '29990101') and Direccion1=@pDireccion1 and Direccion2=@pDireccion2 and NroExterior=@pNroExterior and
NroInterior=@pNroInterior and Localidad=@pLocalidad and CodigoPostal=@pCodigoPostal and EntreCalle1=@pEntreCalle1 and @pEntreCalle2=EntreCalle2 and Provincia_Id= dbo.FuncFKgenProvincias(@pProvincia_Id)))
begin
	if not exists (select 1 from suePersDomicilio where Legajo=@pLegajo)
	BEGIN
		set @pFechaDesde =(select FechaIngreso from suePersonal where genEntidades=@pLegajo)
	end
	update suePersDomicilio set FechaHasta=DATEADD(dd,-1, @pFechaDesde) where FechaHasta='29990101' and 	Legajo = @pLegajo
	INSERT INTO suePersDomicilio
	(
		Legajo,
		FechaDesde,
		FechaHasta,
		Direccion1,
		Direccion2,
		NroExterior,
		NroInterior,
		Localidad,
		CodigoPostal,
		EntreCalle1,
		EntreCalle2,
		Provincia_Id,
		Usuario_Id
	)
	VALUES 
	(
		@pLegajo,
		@pFechaDesde,
		@pFechaHasta,
		@pDireccion1,
		@pDireccion2,
		@pNroExterior,
		@pNroInterior,
		@pLocalidad,
		@pCodigoPostal,
		@pEntreCalle1,
		@pEntreCalle2,
		dbo.FuncFKgenProvincias(@pProvincia_Id),
		@pUsuario_Id
	)
	END 
end
GO

DROP PROCEDURE suePersDomicilioDatos
GO
CREATE PROCEDURE suePersDomicilioDatos
(
@pLegajo bigint
)
AS
SET NOCOUNT ON 

SELECT suePersDomicilio.Legajo, suePersonal.Nombres as DescripcionPersonal, suePersDomicilio.FechaDesde, suePersDomicilio.FechaHasta,
	suePersDomicilio.Direccion1, suePersDomicilio.Direccion2, suePersDomicilio.NroExterior, suePersDomicilio.NroInterior,
	suePersDomicilio.Localidad, suePersDomicilio.CodigoPostal, suePersDomicilio.EntreCalle1, suePersDomicilio.EntreCalle2,
	genProvincias.Provincia_Id, genProvincias.Descripcion as DescripcionProvincia, suePersDomicilio.Usuario_Id
FROM suePersDomicilio 
INNER JOIN suePersonal  ON (suePersonal.genEntidades = suePersDomicilio.Legajo)
left join genProvincias on genProvincias.genProvincias=suePersDomicilio.Provincia_Id
WHERE (suePersonal.Legajo = @pLegajo)
 
 RETURN @@Error 

GO

DROP PROCEDURE suePersDomicilioEliminar
GO
CREATE PROCEDURE suePersDomicilioEliminar
(
@pLegajo bigint,
@pFechaDesde qFechaHora = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM suePersDomicilio 
WHERE (Legajo = dbo.FuncFKsuePersonal(@pLegajo)
AND (FechaDesde = ISNULL(@pFechaDesde, FechaDesde)))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersEstadoCivil.sql*/
DROP PROCEDURE suePersEstadoCivilGuardar
GO
CREATE PROCEDURE suePersEstadoCivilGuardar
(
@pLegajo bigint,
@pFechaDesde qFechaHora,
@pFechaHasta qFechaHora,
@pEstadoCivil_Id varchar(3),
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
set @pLegajo=(select genEntidades from suePersonal where Legajo=@pLegajo)
IF (EXISTS (SELECT 1 FROM suePersEstadoCivil WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)))
BEGIN 
	UPDATE suePersEstadoCivil
	SET		FechaHasta = isnull((select min(Catego2.FechaDesde) 
		from suePersEstadoCivil Catego2 
		where 
		Catego2.Legajo = suePersEstadoCivil.Legajo and
		Catego2.FechaDesde>suePersEstadoCivil.FechaDesde),@pFechaHasta),
		EstadoCivil_Id = @pEstadoCivil_Id,
		Usuario_Id = @pUsuario_Id
	WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)
END 
ELSE 
BEGIN 
if (not exists(select EstadoCivil_Id from suePersEstadoCivil where (Legajo = @pLegajo) AND (FechaHasta = '29990101')and EstadoCivil_Id=@pEstadoCivil_Id))
begin
if not EXISTS (select 1 from suePersEstadoCivil where Legajo=@pLegajo)
BEGIN
set @pFechaDesde=(select FechaIngreso from suePersonal where genEntidades=@pLegajo)
end
update suePersEstadoCivil set FechaHasta=DATEADD(dd,-1, @pFechaDesde) where FechaHasta='29990101' and 	Legajo = @pLegajo
	INSERT INTO suePersEstadoCivil
	(
		Legajo,
		FechaDesde,
		FechaHasta,
		EstadoCivil_Id,
		Usuario_Id
	)
	VALUES 
	(
		@pLegajo,
		@pFechaDesde,
		@pFechaHasta,
		@pEstadoCivil_Id,
		@pUsuario_Id
	)
END 
end
GO

DROP PROCEDURE suePersEstadoCivilDatos
GO
CREATE PROCEDURE suePersEstadoCivilDatos
(
@pLegajo bigint
)
AS
SET NOCOUNT ON 

SELECT suePersEstadoCivil.Legajo, suePersonal.Nombres as DescripcionPersonal, suePersEstadoCivil.FechaDesde, suePersEstadoCivil.FechaHasta,
	suePersEstadoCivil.EstadoCivil_Id, genEntidadesBasicasValor.Descripcion as DescripcionEstadoCivil, suePersEstadoCivil.Usuario_Id
FROM suePersEstadoCivil 
INNER JOIN suePersonal  ON (suePersonal.genEntidades = suePersEstadoCivil.Legajo)
left join genEntidadesBasicasValor on genEntidadesBasicasValor.Entidad_Id=1504 and genEntidadesBasicasValor.Clave=suePersEstadoCivil.EstadoCivil_Id
WHERE (suePersonal.Legajo = @pLegajo)
 
 RETURN @@Error 

GO

DROP PROCEDURE suePersEstadoCivilEliminar
GO
CREATE PROCEDURE suePersEstadoCivilEliminar
(
@pLegajo bigint,
@pFechaDesde qFechaHora = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM suePersEstadoCivil 
WHERE (Legajo = dbo.FuncFKsuePersonal(@pLegajo))
AND (FechaDesde = ISNULL(@pFechaDesde, FechaDesde))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersLocalidad.sql*/
DROP PROCEDURE suePersLocalidadGuardar
GO
CREATE PROCEDURE suePersLocalidadGuardar
(
@pLegajo bigint,
@pFechaDesde qFechaHora,
@pFechaHasta qFechaHora,
@pLocalidad_Id varchar(2),
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
set @pLegajo=(select genEntidades from suePersonal where Legajo=@pLegajo)
IF (EXISTS (SELECT 1 FROM suePersLocalidad WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)))
BEGIN 
	UPDATE suePersLocalidad
	SET		FechaHasta = isnull((select min(Catego2.FechaDesde) 
		from suePersLocalidad Catego2 
		where 
		Catego2.Legajo = suePersLocalidad.Legajo and
		Catego2.FechaDesde>suePersLocalidad.FechaDesde),@pFechaHasta),
		Localidad_Id = @pLocalidad_Id,
		Usuario_Id = @pUsuario_Id
	WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)
END 
ELSE 
BEGIN 
if (not exists(select Localidad_Id from suePersLocalidad where (Legajo = @pLegajo) AND (FechaHasta = '29990101')and Localidad_Id=@pLocalidad_Id))
begin
if not exists (select 1 from suePersLocalidad where Legajo=@pLegajo)
BEGIN
set @pFechaDesde=(select FechaIngreso from suePersonal where genEntidades=@pLegajo)
end
update suePersLocalidad set FechaHasta=DATEADD(dd,-1, @pFechaDesde) where FechaHasta='29990101' and 	Legajo = @pLegajo
	INSERT INTO suePersLocalidad
	(
		Legajo,
		FechaDesde,
		FechaHasta,
		Localidad_Id,
		Usuario_Id
	)
	VALUES 
	(
		@pLegajo,
		@pFechaDesde,
		@pFechaHasta,
		@pLocalidad_Id,
		@pUsuario_Id
	)
END 
end
GO

DROP PROCEDURE suePersLocalidadDatos
GO
CREATE PROCEDURE suePersLocalidadDatos
(
@pLegajo bigint
)
AS
SET NOCOUNT ON 

SELECT suePersLocalidad.Legajo, suePersonal.Nombres as DescripcionPersonal, suePersLocalidad.FechaDesde, suePersLocalidad.FechaHasta,
	suePersLocalidad.Localidad_Id, genEntidadesBasicasValor.Descripcion as DescripcionLocalidad, suePersLocalidad.Usuario_Id
FROM suePersLocalidad 
INNER JOIN suePersonal  ON (suePersonal.genEntidades = suePersLocalidad.Legajo)
left join genEntidadesBasicasValor on genEntidadesBasicasValor.Entidad_Id=1505 and genEntidadesBasicasValor.Clave=suePersLocalidad.Localidad_Id
WHERE (suePersonal.Legajo = @pLegajo)
 
 RETURN @@Error 

GO

DROP PROCEDURE suePersLocalidadEliminar
GO
CREATE PROCEDURE suePersLocalidadEliminar
(
@pLegajo bigint,
@pFechaDesde qFechaHora = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM suePersLocalidad 
WHERE (Legajo = dbo.FuncFKsuePersonal(@pLegajo))
AND (FechaDesde = ISNULL(@pFechaDesde, FechaDesde))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersModContrata.sql*/
DROP PROCEDURE suePersModContrataGuardar
GO
CREATE PROCEDURE suePersModContrataGuardar
(
@pLegajo bigint,
@pFechaDesde qFechaHora,
@pFechaHasta qFechaHora,
@pModalidad_Id varchar(3),
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
set @pLegajo=(select genEntidades from suePersonal where Legajo=@pLegajo)
IF (EXISTS (SELECT 1 FROM suePersModContrata WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)))
BEGIN 
	UPDATE suePersModContrata
	SET		FechaHasta = isnull((select min(Catego2.FechaDesde) 
		from suePersModContrata Catego2 
		where 
		Catego2.Legajo = suePersModContrata.Legajo and
		Catego2.FechaDesde>suePersModContrata.FechaDesde),@pFechaHasta),
		Modalidad_Id = @pModalidad_Id,
		Usuario_Id = @pUsuario_Id
	WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)
END 
ELSE 
BEGIN 
if (not exists(select Modalidad_Id from suePersModContrata where (Legajo = @pLegajo) AND (FechaHasta = '29990101')and Modalidad_Id=@pModalidad_Id))
begin
if not exists (select 1 from suePersModContrata where Legajo=@pLegajo)
BEGIN
set @pFechaDesde =(select FechaIngreso from suePersonal where genEntidades=@pLegajo)
end
update suePersModContrata set FechaHasta=DATEADD(dd,-1, @pFechaDesde) where FechaHasta='29990101' and 	Legajo = @pLegajo

	INSERT INTO suePersModContrata
	(
		Legajo,
		FechaDesde,
		FechaHasta,
		Modalidad_Id,
		Usuario_Id
	)
	VALUES 
	(
		@pLegajo,
		@pFechaDesde,
		@pFechaHasta,
		@pModalidad_Id,
		@pUsuario_Id
	)
END 
end
GO

DROP PROCEDURE suePersModContrataDatos
GO
CREATE PROCEDURE suePersModContrataDatos
(
@pLegajo bigint
)
AS
SET NOCOUNT ON 

SELECT suePersModContrata.Legajo, suePersonal.Nombres as DescripcionPersonal, suePersModContrata.FechaDesde, suePersModContrata.FechaHasta,
	suePersModContrata.Modalidad_Id, genEntidadesBasicasValor.Descripcion as DescripcionModalidad_Id, suePersModContrata.Usuario_Id
FROM suePersModContrata 
INNER JOIN suePersonal  ON (suePersonal.genEntidades = suePersModContrata.Legajo)
left join genEntidadesBasicasValor on genEntidadesBasicasValor.Entidad_Id=1506 and genEntidadesBasicasValor.Clave=suePersModContrata.Modalidad_Id
WHERE (suePersonal.Legajo = @pLegajo)
 
 RETURN @@Error 

GO

DROP PROCEDURE suePersModContrataEliminar
GO
CREATE PROCEDURE suePersModContrataEliminar
(
@pLegajo bigint,
@pFechaDesde qFechaHora = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM suePersModContrata 
WHERE (Legajo = dbo.FuncFKsuePersonal(@pLegajo))
AND (FechaDesde = ISNULL(@pFechaDesde, FechaDesde))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersObraSocial.sql*/
DROP PROCEDURE suePersObraSocialGuardar
GO
CREATE PROCEDURE suePersObraSocialGuardar
(
@pLegajo bigint,
@pFechaDesde qFechaHora,
@pFechaHasta qFechaHora,
@pObraSocial varChar(6),
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
Set @pLegajo = (Select genEntidades From suePersonal Where Legajo = @pLegajo)
IF (EXISTS (SELECT 1 FROM suePersObraSocial WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)))
BEGIN 
	UPDATE suePersObraSocial
	SET FechaHasta = isNull((Select Min(Tabla2.FechaDesde) 
		From suePersObraSocial Tabla2 
		Where 
		Tabla2.Legajo = suePersObraSocial.Legajo And 
		Tabla2.FechaDesde>suePersObraSocial.FechaDesde), @pFechaHasta),
		ObraSocial = @pObraSocial,
		Usuario_Id = @pUsuario_Id
	Where (Legajo = @pLegajo) And (FechaDesde = @pFechaDesde)
END 
ELSE 
BEGIN 
	If (Not Exists(Select ObraSocial From suePersObraSocial Where (Legajo = @pLegajo) And (FechaHasta = '29990101') And ObraSocial = @pObraSocial))
	Begin
		If Not Exists (Select 1 From suePersObraSocial Where Legajo = @pLegajo)
		BEGIN
			Set @pFechaDesde = (Select FechaIngreso From suePersonal Where genEntidades = @pLegajo)
		End
		Update suePersObraSocial set FechaHasta = DATEADD(dd,-1, @pFechaDesde) Where FechaHasta='29990101' And Legajo = @pLegajo
		INSERT INTO suePersObraSocial
		(
			Legajo,
			FechaDesde,
			FechaHasta,
			ObraSocial,
			Usuario_Id
		)
		VALUES 
		(
			@pLegajo,
			@pFechaDesde,
			@pFechaHasta,
			@pObraSocial,
			@pUsuario_Id
		)
	End
End
GO

DROP PROCEDURE suePersObraSocialDatos
GO
CREATE PROCEDURE suePersObraSocialDatos
(
@pLegajo bigint
)
AS
SET NOCOUNT ON 

Select suePersObraSocial.Legajo, suePersonal.Nombres as DescripcionPersonal, suePersObraSocial.FechaDesde, suePersObraSocial.FechaHasta,
	suePersObraSocial.ObraSocial, genEntidadesBasicasValor.Descripcion as DescripcionObraSocial, 
	suePersObraSocial.Usuario_Id
From suePersObraSocial 
Inner Join suePersonal  ON (suePersonal.genEntidades = suePersObraSocial.Legajo)
Left Join genEntidadesBasicasValor on genEntidadesBasicasValor.Entidad_Id=1607 And genEntidadesBasicasValor.Clave = suePersObraSocial.ObraSocial
Where (suePersonal.Legajo = @pLegajo)
 
Return @@Error 

GO

DROP PROCEDURE suePersObraSocialEliminar
GO
CREATE PROCEDURE suePersObraSocialEliminar
(
@pLegajo bigint,
@pFechaDesde qFechaHora = NULL
)
AS
SET NOCOUNT ON 

Delete From suePersObraSocial 
Where (Legajo = dbo.FuncFKsuePersonal(@pLegajo))
And (FechaDesde = ISNULL(@pFechaDesde, FechaDesde))
 
Return @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersonal.sql*/
DROP PROCEDURE suePersonalGuardar
GO
CREATE PROCEDURE suePersonalGuardar
(
@pgenEntidades bigint,
@pLegajo int,
@pLegajo_Nuevo int,
@pEmpresa_Id int = NULL,
@pNombres varchar(40),
@pApellidoPaterno varchar(30),
@pApellidoMaterno varchar(30),
@pNumeroDoc varchar(20),
@pNroSegSocial varchar(20),
@pTelefonos varchar(120),
@pCelular varchar(60),
@pFechaNacimiento qFecha,
@pSexo char(1),
@pNacionalidad_Id smallint = NULL,
@pCodigoNatural char(1) = NULL,
@peMail varchar(100),
@pFechaIngreso qFecha,
@pFechaBaja qFecha = NULL,
@pAniosReconocidos int,
@pMesesReconocidos int,
@pGrupoSanguineo char(2),
@pRH char(1),
@pBancoSucursal char(5),
@pBancoCuenta char(15),
@pBancoTipoCta char(3),
@pCuentaInactiva Sino,
@pClaveBancaria varchar(25),
@pObservaciones varchar(max) = NULL,
@pUMF varchar(3),
@pAvisarA varchar(max) = NULL,
@pInactivo Sino,
@pPosteado Sino,
@pFecha datetime,
@pUsuario_Id int = NULL,
@pActividad_Id varchar(3)= NULL,
@pAfore_Id varchar(5)= NULL,
@pCategoria_Id varchar(5)= NULL,
@pCondServicio varchar(2)= NULL,
@pConvenio_Id varchar(5)= NULL,
@pDireccion1 varchar(100),
@pDireccion2 varchar(100),
@pNroExterior varchar(10),
@pNroInterior varchar(10),
@pLocalidad varchar(100) ,
@pCodigoPostal varchar(40),
@pEntreCalle1 varchar(60),
@pEntreCalle2 varchar(60),
@pProvincia_Id varchar(5)= NULL,
@pEstadoCivil_Id varchar(3),
@pLocalidad_Id varchar(2) = NULL,
@pModContrata_Id varchar(3)= NULL,
@pPuesto_Id varchar(5)= NULL,
@pSiniestro_Id varchar(2)= NULL,
@pSituacionRevi varchar(2)= NULL,
@pSucursal Sucursal= NULL,
@pTipoContrato varchar(2)= NULL,
@pTipoEmpleador_Id varchar(2)= NULL,
@pTipoJornada varchar(2)= NULL,
@pTipoPago_Id varchar(5)= NULL,
@pTipoRegimen varchar(2)= NULL,
@pTipoSDI char= NULL,
@pRebaja qPorcentaje = Null,
@pReduccion qMonedaD2 = Null,
@pAdicional qMonedaD2 = Null,
@pVoluntario qMonedaD2 = Null,
@pObraSocial varChar(6) = Null
)
AS
DECLARE @FechaIng DateTime

SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM suePersonal WHERE (suePersonal.Legajo = @pLegajo)))
BEGIN 

	--- AJ MAY 2020 SI cambio la fecha de Ingreso la fecha debe ser la de ingreso
	SET @FechaIng = (select FechaIngreso from suePersonal where Legajo = @pLegajo)
	if @FechaIng != @pFechaIngreso
		begin
		SET @pFecha = @pFechaIngreso
		end

	UPDATE suePersonal
	SET		Legajo = @pLegajo_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Nombres = @pNombres,
		ApellidoPaterno = @pApellidoPaterno,
		ApellidoMaterno = @pApellidoMaterno,
		NumeroDoc = @pNumeroDoc,
		NroSegSocial = @pNroSegSocial,
		Telefonos = @pTelefonos,
		Celular = @pCelular,
		FechaNacimiento = @pFechaNacimiento,
		Sexo = @pSexo,
		Nacionalidad_Id = dbo.FuncFKgenPaises(@pNacionalidad_Id),
		CodigoNatural = @pCodigoNatural,
		eMail = @peMail,
		FechaIngreso = @pFechaIngreso,
		FechaBaja = @pFechaBaja,
		AniosReconocidos = @pAniosReconocidos,
		MesesReconocidos = @pMesesReconocidos,
		GrupoSanguineo = @pGrupoSanguineo,
		RH = @pRH,
		BancoSucursal = @pBancoSucursal,
		BancoCuenta = @pBancoCuenta,
		BancoTipoCta = @pBancoTipoCta,
		CuentaInactiva = @pCuentaInactiva,
		ClaveBancaria = @pClaveBancaria,
		Observaciones = @pObservaciones,
		UMF = @pUMF,
		AvisarA = @pAvisarA,
		Inactivo = @pInactivo,
		Posteado = @pPosteado,
		Usuario_Id = @pUsuario_Id
	WHERE (suePersonal.Legajo = @pLegajo)
END 
ELSE 
BEGIN 
	-- es nuevo la fehca es la de ingreso
	SET @pFecha = @pFechaIngreso
	INSERT INTO suePersonal
	(
		genEntidades,
		Legajo,
		Empresa_Id,
		Nombres,
		ApellidoPaterno,
		ApellidoMaterno,
		NumeroDoc,
		NroSegSocial,
		Telefonos,
		Celular,
		FechaNacimiento,
		Sexo,
		Nacionalidad_Id,
		CodigoNatural,
		eMail,
		FechaIngreso,
		FechaBaja,
		AniosReconocidos,
		MesesReconocidos,
		GrupoSanguineo,
		RH,
		BancoSucursal,
		BancoCuenta,
		BancoTipoCta,
		CuentaInactiva,
		ClaveBancaria,
		Observaciones,
		UMF,
		AvisarA,
		Inactivo,
		Posteado,
		Usuario_Id
	)
	VALUES 
	(
		@pgenEntidades,
		@pLegajo,
		@pEmpresa_Id,
		@pNombres,
		@pApellidoPaterno,
		@pApellidoMaterno,
		@pNumeroDoc,
		@pNroSegSocial,
		@pTelefonos,
		@pCelular,
		@pFechaNacimiento,
		@pSexo,
		dbo.FuncFKgenPaises(@pNacionalidad_Id),
		@pCodigoNatural,
		@peMail,
		@pFechaIngreso,
		@pFechaBaja,
		@pAniosReconocidos,
		@pMesesReconocidos,
		@pGrupoSanguineo,
		@pRH,
		@pBancoSucursal,
		@pBancoCuenta,
		@pBancoTipoCta,
		@pCuentaInactiva,
		@pClaveBancaria,
		@pObservaciones,
		@pUMF,
		@pAvisarA,
		@pInactivo,
		@pPosteado,
		@pUsuario_Id
	)
END 

set @pLegajo = @pLegajo_Nuevo
if not @pActividad_Id is null
begin exec suePersActividadGuardar @pLegajo, @pFecha, '29990101', @pActividad_Id, @pUsuario_Id end



if not @pAfore_Id is null
begin exec suePersAforeGuardar @pLegajo, @pFecha, '29990101',@pAfore_Id, @pUsuario_Id end

if not @pCategoria_Id is null
begin exec suePersCategoGuardar @pLegajo, @pFecha,'29990101' ,@pCategoria_Id, @pUsuario_Id end

if not @pCondServicio is null
begin exec suePersCondServicioGuardar @pLegajo, @pFecha, '29990101',@pCondServicio, @pUsuario_Id end 

if not @pConvenio_Id is null
begin exec suePersConvenioGuardar @pLegajo, @pFecha, '29990101',@pConvenio_Id,@pUsuario_Id end

exec suePersDomicilioGuardar @pLegajo, @pFecha, '29990101',@pDireccion1, @pDireccion2, @pNroExterior, @pNroInterior, @pLocalidad, @pCodigoPostal, @pEntreCalle1, @pEntreCalle2, @pProvincia_Id, @pUsuario_Id

if not @pEstadoCivil_Id is null
begin exec suePersEstadoCivilGuardar @pLegajo, @pFecha, '29990101', @pEstadoCivil_Id, @pUsuario_Id end
if not @pLocalidad_Id is null
begin exec suePersLocalidadGuardar @pLegajo, @pFecha, '29990101', @pLocalidad_Id, @pUsuario_Id end

if not @pModContrata_Id is null
begin exec suePersModContrataGuardar @pLegajo, @pFecha, '29990101', @pModContrata_Id, @pUsuario_Id end
if not @pPuesto_Id is null
begin exec suePersPuestosGuardar @pLegajo, @pFecha, '29990101', @pPuesto_Id, @pUsuario_Id end
if not @pSiniestro_Id is null
begin exec suePersSiniestradoGuardar @pLegajo, @pFecha, '29990101', @pSiniestro_Id, @pUsuario_Id end 
if not @pSituacionRevi is null
begin exec suePersSituacionReviGuardar @pLegajo, @pFecha, '29990101', @pSituacionRevi, @pUsuario_Id end
if not @pSucursal is null
begin exec suePersSucursalGuardar @pLegajo, @pFecha, '29990101', @pSucursal, @pUsuario_Id end

if not @pTipoContrato is null
begin exec suePersTipoContratoGuardar @pLegajo, @pFecha, '29990101', @pTipoContrato, @pUsuario_Id end

if not @pTipoEmpleador_Id is null
begin exec suePersTipoEmpleadorGuardar @pLegajo, @pFecha, '29990101', @pTipoEmpleador_Id, @pUsuario_Id end

if not @pTipoJornada is null
begin exec suePersTipoJornadaGuardar @pLegajo, @pFecha, '29990101', @pTipoJornada, @pUsuario_Id end
--print 8
if not @pTipoPago_Id is null
begin exec suePersTipoPagoGuardar @pLegajo, @pFecha, '29990101', @pTipoPago_Id, @pUsuario_Id end
if not @pTipoRegimen is null
begin exec suePersTipoRegimenGuardar @pLegajo, @pFecha, '29990101', @pTipoRegimen, @pUsuario_Id end

if not @pTipoSDI is null
begin exec suePersTipoSDIGuardar @pLegajo, @pFecha, '29990101', @pTipoSDI, @pUsuario_Id end

If Not @pRebaja Is Null
Begin Exec suePersRebPromoGuardar @pLegajo, @pFecha, '29990101', @pRebaja, @pUsuario_Id End

If Not @pReduccion Is Null
Begin Exec suePersRedZonalGuardar @pLegajo, @pFecha, '29990101', @pReduccion, @pUsuario_Id End

If Not @pAdicional Is Null
Begin Exec suePersAporteAdicGuardar @pLegajo, @pFecha, '29990101', @pAdicional, @pUsuario_Id End

If Not @pVoluntario Is Null
Begin Exec suePersAporteVoluntarioGuardar @pLegajo, @pFecha, '29990101', @pVoluntario, @pUsuario_Id End

If Not @pObraSocial Is Null
Begin Exec suePersObraSocialGuardar @pLegajo, @pFecha, '29990101', @pObraSocial, @pUsuario_Id End

GO


drop procedure suePersonalDatos
go
create procedure suePersonalDatos
(
@pLegajo int,
@pFecha datetime
)
as
select genEntidades.genEntidades, suePersonal.Legajo, suePersonal.Empresa_Id, Nombres, ApellidoPaterno, ApellidoMaterno, NumeroDoc, NroSegSocial, Telefonos, Celular, FechaNacimiento, 
Sexo, genPaises.Pais_Id as Nacionalidad, genPaises.Descripcion as DescripcionNacionalidad, CodigoNatural, DescCodNatural.Descripcion as DescripcionCodigoNatural, suePersonal.eMail, FechaIngreso, FechaBaja, AniosReconocidos, 
MesesReconocidos, GrupoSanguineo, RH, BancoSucursal, BancoCuenta, BancoTipoCta, CuentaInactiva, ClaveBancaria, Observaciones, UMF, AvisarA, suePersonal.Inactivo,
suePersonal.Posteado, suePersonal.Usuario_Id, suePersActividad.Actividad_Id, DescActividades.Descripcion as DescripcionActividad, suePersAfore.Afore_Id,
DescAfore.Descripcion as DescripcionAfore, sueCategorias.Categoria_Id, sueCategorias.Descripcion as DescripcionCategoria, suePersCondServicio.CondServicio_Id,
DescCondServicio.Descripcion as DescripcionCondServicio, conCuentas.Cuenta_Id,conCuentas.Descripcion as DescripcionCuenta, sueConvenio.Convenio_Id, 
sueConvenio.Descripcion as Descripcionconvenio, suePersDomicilio.Direccion1, suePersDomicilio.CodigoPostal, suePersDomicilio.Direccion2, suePersDomicilio.EntreCalle1,
suePersDomicilio.EntreCalle2, suePersDomicilio.Localidad, suePersDomicilio.NroExterior, suePersDomicilio.NroInterior, DomicilioProvincia.Provincia_Id, 
DomicilioProvincia.Descripcion as DescripcionProvincia, suePersEstadoCivil.EstadoCivil_Id, DescEdoCivil.Descripcion as DescripcionEdoCivil, suePersLocalidad.Localidad_Id,
DescLocalidad.Descripcion as DescripcionLocalidad, suePersModContrata.Modalidad_Id as ModContrata_Id, DescModContrata.Descripcion as DescripcionModContrata, 
suePuestos.Puesto_Id, suePuestos.Descripcion as DescripcionPuesto, suePersSiniestrado.Siniestro_Id, DescSinestrado.Descripcion as DescripcionSiniestro,
suePersSituacionRevi.Situacion_Id as SituacionRevi_Id, DescSituacionRevi.Descripcion as DescripcionSituacionRevi, genSucursalesEmpr.Sucursal, 
genSucursalesEmpr.Descripcion as DescripcionSucursal, suePersTipoContrato.TipoContrato,
DescTipoContrato.Descripcion as DescripcionTipoContrato, suePersTipoEmpleador.TipoEmpleador_Id, DescTipoEmpleador.Descripcion as DescripcionTipoEmpleador, 
suePersTipoJornada.TipoJornada, DescTipoJornada.Descripcion as DescripcionTipoJornada, sueTipoPago.TipoPago_Id, sueTipoPago.Descripcion as DescripcionTipoPago, 
suePersTipoRegimen.TipoRegimen, DescTipoRegimen.Descripcion as DescripcionTipoRegimen, suePersTipoSDI.TipoSDI, DescTipoSDI.Descripcion as DescripcionTipoSDI, 
conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, conCentro2.Centro2_Id, 
conCentro2.Descripcion as DescripcionCentro2, suePersContableDatos.Porcentaje, @pFecha as Fecha,
genEntidades.Cuit, genEntidades.IdFiscal, genEntidades.TipoDoc, cast('20190717' as datetime) as FechaOculta,
suePersRebPromo.Rebaja, suePersRedZonal.Reduccion, suePersAporteAdic.Adicional, suePersAporteVoluntario.Voluntario,
suePersObraSocial.ObraSocial, DescObraSocial.Descripcion DescObraSocial
From suePersonal
left join genPaises on genPaises.genPaises=suePersonal.Nacionalidad_Id
left join suePersActividad on suePersActividad.Legajo=suePersonal.genEntidades and @pFecha between suePersActividad.FechaDesde and suePersActividad.FechaHasta
left join suePersAfore on suePersAfore.Legajo=suePersonal.genEntidades and @pFecha between suePersAfore.FechaDesde and suePersAfore.FechaHasta
left join suePersCatego on suePersCatego.Legajo=suePersonal.genEntidades and @pFecha between suePersCatego.FechaDesde and suePersCatego.FechaHasta
left join sueCategorias on sueCategorias.sueCategorias=suePersCatego.Categoria_Id
left join suePersCondServicio on suePersCondServicio.Legajo=suePersonal.genEntidades and @pFecha between suePersCondServicio.FechaDesde and suePersCondServicio.FechaHasta
left join suePersContable on suePersContable.Legajo=suePersonal.genEntidades and @pFecha between suePersContable.FechaDesde and suePersContable.FechaHasta
left join suePersConvenio on suePersConvenio.Legajo=suePersonal.genEntidades and @pFecha between suePersConvenio.FechaDesde and suePersConvenio.FechaHasta
left join sueConvenio on sueConvenio.sueConvenio=suePersConvenio.Convenio_Id
left join suePersDomicilio on suePersDomicilio.Legajo=suePersonal.genEntidades and @pFecha between suePersDomicilio.FechaDesde and suePersDomicilio.FechaHasta
left join suePersEstadoCivil on suePersEstadoCivil.Legajo=suePersonal.genEntidades and @pFecha between suePersEstadoCivil.FechaDesde and suePersEstadoCivil.FechaHasta
left join suePersLocalidad on suePersLocalidad.Legajo=suePersonal.genEntidades and @pFecha between suePersLocalidad.FechaDesde and suePersLocalidad.FechaHasta
left join suePersModContrata on suePersModContrata.Legajo=suePersonal.genEntidades and @pFecha between suePersModContrata.FechaDesde and suePersModContrata.FechaHasta
left join suePersPuestos on suePersPuestos.Legajo=suePersonal.genEntidades and @pFecha between suePersPuestos.FechaDesde and suePersPuestos.FechaHasta
left join suePuestos on suePuestos.suePuestos= suePersPuestos.Puesto_Id
left join suePersSiniestrado on suePersSiniestrado.Legajo=suePersonal.genEntidades and @pFecha between suePersSiniestrado.FechaDesde and suePersSiniestrado.FechaHasta
left join suePersSituacionRevi on suePersSituacionRevi.Legajo=suePersonal.genEntidades and @pFecha between suePersSituacionRevi.FechaDesde and suePersSituacionRevi.FechaHasta
left join suePersSucursal on suePersSucursal.Legajo=suePersonal.genEntidades and @pFecha between suePersSucursal.FechaDesde and suePersSucursal.FechaHasta
left join genSucursalesEmpr on genSucursalesEmpr.genSucursalesEmpr=suePersSucursal.Sucursal
left join suePersTipoContrato on suePersTipoContrato.Legajo=suePersonal.genEntidades and @pFecha between suePersTipoContrato.FechaDesde and suePersTipoContrato.FechaHasta
left join suePersTipoEmpleador on suePersTipoEmpleador.Legajo=suePersonal.genEntidades and @pFecha between suePersTipoEmpleador.FechaDesde and suePersTipoEmpleador.FechaHasta
left join suePersTipoJornada on suePersTipoJornada.Legajo=suePersonal.genEntidades and @pFecha between suePersTipoJornada.FechaDesde and suePersTipoJornada.FechaHasta
left join suePersTipoPago on suePersTipoPago.Legajo=suePersonal.genEntidades and @pFecha between suePersTipoPago.FechaDesde and suePersTipoPago.FechaHasta
left join sueTipoPago on suePersTipoPago.TipoPago_Id=sueTipoPago.sueTipoPago
left join suePersTipoRegimen on suePersTipoRegimen.Legajo=suePersonal.genEntidades and @pFecha between suePersTipoRegimen.FechaDesde and suePersTipoRegimen.FechaHasta
left join suePersTipoSDI on suePersTipoSDI.Legajo=suePersonal.genEntidades and @pFecha between suePersTipoSDI.FechaDesde and suePersTipoSDI.FechaHasta
left join suePersContableDatos on suePersContable.Legajo=suePersContableDatos.Legajo and suePersContable.FechaDesde=suePersContableDatos.FechaDesde
left join genProvincias DomicilioProvincia on DomicilioProvincia.genProvincias= suePersDomicilio.Provincia_Id
left join conCuentas on conCuentas.conCuentas= suePersContableDatos.Cuenta_Id
left join conCentro1 on conCentro1.conCentro1=suePersContableDatos.Centro1_Id
left join concentro2 on conCentro2.conCentro2=suePersContableDatos.Centro2_Id
left join genEntidadesBasicasValor DescActividades on DescActividades.Entidad_Id=1501 and DescActividades.Clave=suePersActividad.Actividad_Id
left join genEntidadesBasicasValor DescAfore on DescAfore.Entidad_Id=1502 and DescAfore.Clave=suePersAfore.Afore_Id
left join genEntidadesBasicasValor DescCondServicio on DescCondServicio.Entidad_Id=1503 and DescCondServicio.Clave=suePersCondServicio.CondServicio_Id
left join genEntidadesBasicasValor DescEdoCivil on DescEdoCivil.Entidad_Id=1504 and DescEdoCivil.Clave=suePersEstadoCivil.EstadoCivil_Id
left join genEntidadesBasicasValor DescLocalidad on DescLocalidad.Entidad_Id=1505 and DescLocalidad.Clave=suePersLocalidad.Localidad_Id
left join genEntidadesBasicasValor DescModContrata on DescModContrata.Entidad_Id=1506 and DescModContrata.Clave=suePersModContrata.Modalidad_Id
left join genEntidadesBasicasValor DescSinestrado on DescSinestrado.Entidad_Id=1507 and DescSinestrado.Clave=suePersSiniestrado.Siniestro_Id
left join genEntidadesBasicasValor DescSituacionRevi on DescSituacionRevi.Entidad_Id=1508 and DescSituacionRevi.Clave=suePersSituacionRevi.Situacion_Id
left join genEntidadesBasicasValor DescTipoContrato on DescTipoContrato.Entidad_Id=1509 and DescTipoContrato.Clave=suePersTipoContrato.TipoContrato
left join genEntidadesBasicasValor DescTipoEmpleador on DescTipoEmpleador.Entidad_Id=1510 and DescTipoEmpleador.Clave=suePersTipoEmpleador.TipoEmpleador_Id
left join genEntidadesBasicasValor DescTipoJornada on DescTipoJornada.Entidad_Id=1511 and DescTipoJornada.Clave=suePersTipoJornada.TipoJornada
left join genEntidadesBasicasValor DescTipoRegimen on DescTipoRegimen.Entidad_Id=1512 and DescTipoRegimen.Clave=suePersTipoRegimen.TipoRegimen
left join genEntidadesBasicasValor DescTipoSDI on DescTipoSDI.Entidad_Id=1513 and DescTipoSDI.Clave=suePersTipoSDI.TipoSDI
Left Join suePersRebPromo On suePersRebPromo.Legajo = suePersonal.genEntidades And @pFecha Between suePersRebPromo.FechaDesde And suePersRebPromo.FechaHasta
Left Join suePersRedZonal On suePersRedZonal.Legajo = suePersonal.genEntidades And @pFecha Between suePersRedZonal.FechaDesde And suePersRedZonal.FechaHasta
Left Join suePersAporteAdic On suePersAporteAdic.Legajo = suePersonal.genEntidades And @pFecha Between suePersAporteAdic.FechaDesde And suePersAporteAdic.FechaHasta
Left Join suePersAporteVoluntario On suePersAporteVoluntario.Legajo = suePersonal.genEntidades And @pFecha Between suePersAporteVoluntario.FechaDesde And suePersAporteVoluntario.FechaHasta
Left Join suePersObraSocial On suePersObraSocial.Legajo = suePersonal.genEntidades And @pFecha Between suePersObraSocial.FechaDesde And suePersObraSocial.FechaHasta
Left Join genEntidadesBasicasValor DescObraSocial on DescObraSocial.Entidad_Id=1607 and DescObraSocial.Clave = suePersObraSocial.ObraSocial
inner join genEntidades on genEntidades.genEntidades=suePersonal.genEntidades
left join genEntidadesBasicasValor DescCodNatural on DescCodNatural.Entidad_Id=1514 and DescCodNatural.Clave=suePersonal.CodigoNatural
Where
	suePersonal.Legajo = @pLegajo

exec suePersActividadDatos @pLegajo
exec suePersAforeDatos @pLegajo
exec suePersCategoDatos @pLegajo
exec suePersCondServicioDatos @pLegajo
exec suePersContableDatosSP @pLegajo
exec suePersContableDatosDatos @pLegajo, null
exec suePersConvenioDatos @pLegajo
exec suePersDomicilioDatos @pLegajo
exec suePersEstadoCivilDatos @pLegajo
exec suePersLocalidadDatos @pLegajo
exec suePersModContrataDatos @pLegajo
exec suePersPuestosDatos @pLegajo
exec suePersSiniestradoDatos @pLegajo
exec suePersSituacionReviDatos @pLegajo
exec suePersSucursalDatos @pLegajo
exec suePersTipoContratoDatos @pLegajo
exec suePersTipoEmpleadorDatos @pLegajo
exec suePersTipoJornadaDatos @pLegajo
exec suePersTipoPagoDatos @pLegajo
exec suePersTipoRegimenDatos @pLegajo
exec suePersTipoSDIDatos @pLegajo
Exec suePersRebPromoDatos @pLegajo
Exec suePersRedZonalDatos @pLegajo
Exec suePersAporteAdicDatos @pLegajo
Exec suePersAporteVoluntarioDatos @pLegajo
Exec suePersObraSocialDatos @pLegajo

Select conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuentas, conCentro1.Centro1_Id, conCentro1.Descripcion as
DescripcionCentro1, conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, Porcentaje
From 
	suePersContableDatos INNER join suePersContable on 
		suePersContableDatos.Legajo=suePersContable.Legajo and 
		suePersContable.FechaDesde=suePersContableDatos.FechaDesde
		left join conCuentas on 
			conCuentas.conCuentas=suePersContableDatos.Cuenta_Id
		left join conCentro1 on 
			conCentro1.conCentro1=suePersContableDatos.Centro1_Id
	left join conCentro2 on 
			conCentro2.conCentro2=suePersContableDatos.Centro2_Id
Where 
	@pFecha between suePersContable.FechaDesde  and suePersContable.FechaHasta and 
			suePersContable.Legajo= dbo.FuncFKsuePersonal(@pLegajo)

Declare @pidentity bigint= dbo.FuncFKsuePersonal(@pLegajo)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'suePersonal'

go


DROP PROCEDURE suePersonalEliminar
GO
CREATE PROCEDURE suePersonalEliminar
(
@pgenEntidades bigint
)
AS
SET NOCOUNT ON 

DELETE FROM suePersonal 
WHERE (genEntidades = @pgenEntidades)
 
 RETURN @@Error 

GO

-- exec suePersEditable 1, '20190901'



drop procedure suePersEditable
go
create procedure suePersEditable
(
@pLegajo int,
@pFecha datetime
)
as

SET @pLegajo = (SELECT genEntidades FROM suePersonal where Legajo = @pLegajo)

select case when exists(select 1 from suePersActividad where FechaDesde>=@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then cast(0  as bit)
when exists(select 1 from suePersAfore where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then cast(0  as bit)
when exists(select 1 from suePersActividad where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then cast(0  as bit)
when exists(select 1 from suePersCatego where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then cast(0  as bit)
when exists(select 1 from suePersCondServicio where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then cast(0  as bit)
when exists(select 1 from suePersContable where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then cast(0  as bit)
when exists(select 1 from suePersConvenio where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then cast(0  as bit)
when exists(select 1 from suePersDomicilio where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then cast(0  as bit)
when exists(select 1 from suePersEstadoCivil where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then cast(0  as bit)
when exists(select 1 from suePersLocalidad where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then cast(0  as bit)
when exists(select 1 from suePersModContrata where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then cast(0  as bit)
when exists(select 1 from suePersPuestos where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then cast(0  as bit)
when exists(select 1 from suePersSiniestrado where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then cast(0  as bit)
when exists(select 1 from suePersSituacionRevi where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then cast(0  as bit)
when exists(select 1 from suePersSucursal where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then cast(0  as bit)
when exists(select 1 from suePersTipoContrato where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then cast(0  as bit)
when exists(select 1 from suePersTipoEmpleador where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then cast(0  as bit)
when exists(select 1 from suePersTipoJornada where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then cast(0  as bit)
when exists(select 1 from suePersTipoPago where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then cast(0  as bit)
when exists(select 1 from suePersTipoRegimen where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then cast(0  as bit)
when exists(select 1 from suePersTipoSDI where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then cast(0  as bit)
When Exists(Select 1 From suePersRebPromo Where FechaDesde > @pFecha And FechaHasta = '29990101' And Legajo = @pLegajo) Then Cast(0  as bit)
When Exists(Select 1 From suePersRedZonal Where FechaDesde > @pFecha And FechaHasta = '29990101' And Legajo = @pLegajo) Then Cast(0  as bit)
When Exists(Select 1 From suePersAporteAdic Where FechaDesde > @pFecha And FechaHasta = '29990101' And Legajo = @pLegajo) Then Cast(0  as bit)
When Exists(Select 1 From suePersAporteVoluntario Where FechaDesde > @pFecha And FechaHasta = '29990101' And Legajo = @pLegajo) Then Cast(0  as bit)
When Exists(Select 1 From suePersObraSocial Where FechaDesde > @pFecha And FechaHasta = '29990101' And Legajo = @pLegajo) Then Cast(0  as bit)
else cast(1 as bit) end as Editable, 
case when exists(select 1 from suePersActividad where FechaDesde>=@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then 'Actividad'
when exists(select 1 from suePersAfore where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then 'Afore'
when exists(select 1 from suePersActividad where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then 'Actividad'
when exists(select 1 from suePersCatego where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then 'Categoria'
when exists(select 1 from suePersCondServicio where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then 'Condicion_Servicio'
when exists(select 1 from suePersContable where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then 'Contable'
when exists(select 1 from suePersConvenio where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then 'Convenio'
when exists(select 1 from suePersDomicilio where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then 'Domicilio'
when exists(select 1 from suePersEstadoCivil where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then 'Estado_Civil'
when exists(select 1 from suePersLocalidad where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then 'Localidad'
when exists(select 1 from suePersModContrata where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then 'Modalidad_Contratacion'
when exists(select 1 from suePersPuestos where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then 'Puestos'
when exists(select 1 from suePersSiniestrado where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then 'Siniestrado'
when exists(select 1 from suePersSituacionRevi where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then 'Situacion_Revista'
when exists(select 1 from suePersSucursal where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then 'Sucursal'
when exists(select 1 from suePersTipoContrato where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then 'Tipo_Contrato'
when exists(select 1 from suePersTipoEmpleador where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then 'Tipo_Empleador'
when exists(select 1 from suePersTipoJornada where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then 'Tipo_Jornada'
when exists(select 1 from suePersTipoPago where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then 'Tipo_Pago'
when exists(select 1 from suePersTipoRegimen where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then 'Tipo_Regimen'
when exists(select 1 from suePersTipoSDI where FechaDesde>@pFecha and FechaHasta='29990101' and Legajo = @pLegajo) then 'Tipo_SDI'
When Exists(Select 1 From suePersRebPromo Where FechaDesde > @pFecha And FechaHasta = '29990101' And Legajo = @pLegajo) Then 'RebPromo'
When Exists(Select 1 From suePersRedZonal Where FechaDesde > @pFecha And FechaHasta = '29990101' And Legajo = @pLegajo) Then 'RedZonal'
When Exists(Select 1 From suePersAporteAdic Where FechaDesde > @pFecha And FechaHasta = '29990101' And Legajo = @pLegajo) Then 'AporteAdic'
When Exists(Select 1 From suePersAporteVoluntario Where FechaDesde > @pFecha And FechaHasta = '29990101' And Legajo = @pLegajo) Then 'AporteVoluntario'
When Exists(Select 1 From suePersObraSocial Where FechaDesde > @pFecha And FechaHasta = '29990101' And Legajo = @pLegajo) Then 'ObraSocial'
else '' end as Tabla 
go

drop function dbo.FuncFKsuePersonal
go
create function dbo.FuncFKsuePersonal
(
@pLegajo_Id int
)
returns int
as
begin
declare @Identity bigint = (select suePersonal.genEntidades from suePersonal where suePersonal.Legajo=@pLegajo_Id) 
return @Identity
end
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersPuestos.sql*/
DROP PROCEDURE suePersPuestosGuardar
GO
CREATE PROCEDURE suePersPuestosGuardar
(
@pLegajo bigint,
@pFechaDesde qFechaHora,
@pFechaHasta qFechaHora,
@pPuesto_Id varchar(5),
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
set @pLegajo=(select genEntidades from suePersonal where Legajo=@pLegajo)
IF (EXISTS (SELECT 1 FROM suePersPuestos WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)))
BEGIN 
	UPDATE suePersPuestos
	SET		FechaHasta = isnull((select min(Catego2.FechaDesde) 
		from suePersPuestos Catego2 
		where 
		Catego2.Legajo = suePersPuestos.Legajo and
		Catego2.FechaDesde>suePersPuestos.FechaDesde),@pFechaHasta),
		Puesto_Id =dbo.FuncFKsuePuestos(@pPuesto_Id),
		Usuario_Id = @pUsuario_Id
	WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)
END 
ELSE 
BEGIN 
if (not exists(select Puesto_Id from suePersPuestos where (Legajo = @pLegajo) AND (FechaHasta = '29990101')and Puesto_Id=dbo.FuncFKsuePuestos(@pPuesto_Id)))
begin
if not exists (select 1 from suePersPuestos where Legajo=@pLegajo)
begin
set @pFechaDesde=(select FechaIngreso from suePersonal where genEntidades=@pLegajo)
end
update suePersPuestos set FechaHasta=DATEADD(dd,-1, @pFechaDesde) where FechaHasta='29990101' and 	Legajo = @pLegajo
	INSERT INTO suePersPuestos
	(
		Legajo,
		FechaDesde,
		FechaHasta,
		Puesto_Id,
		Usuario_Id
	)
	VALUES 
	(
		@pLegajo,
		@pFechaDesde,
		@pFechaHasta,
		dbo.FuncFKsuePuestos(@pPuesto_Id),
		@pUsuario_Id
	)
END 
end
GO

DROP PROCEDURE suePersPuestosDatos
GO
CREATE PROCEDURE suePersPuestosDatos
(
@pLegajo bigint
)
AS
SET NOCOUNT ON 

SELECT suePersPuestos.Legajo, suePersPuestos.FechaDesde, suePersPuestos.FechaHasta,
	suePuestos.Puesto_Id, suePuestos.Descripcion as DescripcionPuesto, suePersPuestos.Usuario_Id
FROM suePersPuestos 
INNER JOIN suePersonal  ON (suePersonal.genEntidades = suePersPuestos.Legajo)
left join suePuestos on suePuestos.suePuestos=suePersPuestos.Puesto_Id
WHERE (suePersonal.Legajo = @pLegajo)
 
 RETURN @@Error 

GO

DROP PROCEDURE suePersPuestosEliminar
GO
CREATE PROCEDURE suePersPuestosEliminar
(
@pLegajo bigint,
@pFechaDesde qFechaHora = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM suePersPuestos 
WHERE (Legajo = dbo.FuncFKsuePersonal(@pLegajo))
AND (FechaDesde = ISNULL(@pFechaDesde, FechaDesde))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersRebPromo.sql*/
DROP PROCEDURE suePersRebPromoGuardar
GO
CREATE PROCEDURE suePersRebPromoGuardar
(
@pLegajo bigint,
@pFechaDesde qFechaHora,
@pFechaHasta qFechaHora,
@pRebaja qPorcentaje,
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
Set @pLegajo = (Select genEntidades From suePersonal Where Legajo = @pLegajo)
IF (EXISTS (SELECT 1 FROM suePersRebPromo WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)))
BEGIN 
	UPDATE suePersRebPromo
	SET FechaHasta = isNull((Select Min(Tabla2.FechaDesde) 
		From suePersRebPromo Tabla2 
		Where 
		Tabla2.Legajo = suePersRebPromo.Legajo And 
		Tabla2.FechaDesde>suePersRebPromo.FechaDesde), @pFechaHasta),
		Rebaja = @pRebaja,
		Usuario_Id = @pUsuario_Id
	Where (Legajo = @pLegajo) And (FechaDesde = @pFechaDesde)
END 
ELSE 
BEGIN 
	If (Not Exists(Select Rebaja From suePersRebPromo Where (Legajo = @pLegajo) And (FechaHasta = '29990101') And Rebaja = @pRebaja))
	Begin
		If Not Exists (Select 1 From suePersRebPromo Where Legajo = @pLegajo)
		BEGIN
			Set @pFechaDesde = (Select FechaIngreso From suePersonal Where genEntidades = @pLegajo)
		End
		Update suePersRebPromo set FechaHasta = DATEADD(dd,-1, @pFechaDesde) Where FechaHasta='29990101' And Legajo = @pLegajo
		INSERT INTO suePersRebPromo
		(
			Legajo,
			FechaDesde,
			FechaHasta,
			Rebaja,
			Usuario_Id
		)
		VALUES 
		(
			@pLegajo,
			@pFechaDesde,
			@pFechaHasta,
			@pRebaja,
			@pUsuario_Id
		)
	End
End
GO

DROP PROCEDURE suePersRebPromoDatos
GO
CREATE PROCEDURE suePersRebPromoDatos
(
@pLegajo bigint
)
AS
SET NOCOUNT ON 

Select suePersRebPromo.Legajo, suePersonal.Nombres as DescripcionPersonal, suePersRebPromo.FechaDesde, suePersRebPromo.FechaHasta,
	suePersRebPromo.Rebaja, --genEntidadesBasicasValor.Descripcion as DescripcionTipoSDI, 
	suePersRebPromo.Usuario_Id
From suePersRebPromo 
Inner Join suePersonal  ON (suePersonal.genEntidades = suePersRebPromo.Legajo)
--left join genEntidadesBasicasValor on genEntidadesBasicasValor.Entidad_Id=1513 and genEntidadesBasicasValor.Clave=suePersTipoSDI.TipoSDI
Where (suePersonal.Legajo = @pLegajo)
 
Return @@Error 

GO

DROP PROCEDURE suePersRebPromoEliminar
GO
CREATE PROCEDURE suePersRebPromoEliminar
(
@pLegajo bigint,
@pFechaDesde qFechaHora = NULL
)
AS
SET NOCOUNT ON 

Delete From suePersRebPromo 
Where (Legajo = dbo.FuncFKsuePersonal(@pLegajo))
And (FechaDesde = ISNULL(@pFechaDesde, FechaDesde))
 
Return @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersRedZonal.sql*/
DROP PROCEDURE suePersRedZonalGuardar
GO
CREATE PROCEDURE suePersRedZonalGuardar
(
@pLegajo bigint,
@pFechaDesde qFechaHora,
@pFechaHasta qFechaHora,
@pReduccion qMonedaD2,
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
Set @pLegajo = (Select genEntidades From suePersonal Where Legajo = @pLegajo)
IF (EXISTS (SELECT 1 FROM suePersRedZonal WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)))
BEGIN 
	UPDATE suePersRedZonal
	SET FechaHasta = isNull((Select Min(Tabla2.FechaDesde) 
		From suePersRedZonal Tabla2 
		Where 
		Tabla2.Legajo = suePersRedZonal.Legajo And 
		Tabla2.FechaDesde>suePersRedZonal.FechaDesde), @pFechaHasta),
		Reduccion = @pReduccion,
		Usuario_Id = @pUsuario_Id
	Where (Legajo = @pLegajo) And (FechaDesde = @pFechaDesde)
END 
ELSE 
BEGIN 
	If (Not Exists(Select Reduccion From suePersRedZonal Where (Legajo = @pLegajo) And (FechaHasta = '29990101') And Reduccion = @pReduccion))
	Begin
		If Not Exists (Select 1 From suePersRedZonal Where Legajo = @pLegajo)
		BEGIN
			Set @pFechaDesde = (Select FechaIngreso From suePersonal Where genEntidades = @pLegajo)
		End
		Update suePersRedZonal set FechaHasta = DATEADD(dd,-1, @pFechaDesde) Where FechaHasta='29990101' And Legajo = @pLegajo
		INSERT INTO suePersRedZonal
		(
			Legajo,
			FechaDesde,
			FechaHasta,
			Reduccion,
			Usuario_Id
		)
		VALUES 
		(
			@pLegajo,
			@pFechaDesde,
			@pFechaHasta,
			@pReduccion,
			@pUsuario_Id
		)
	End
End
GO

DROP PROCEDURE suePersRedZonalDatos
GO
CREATE PROCEDURE suePersRedZonalDatos
(
@pLegajo bigint
)
AS
SET NOCOUNT ON 

Select suePersRedZonal.Legajo, suePersonal.Nombres as DescripcionPersonal, suePersRedZonal.FechaDesde, suePersRedZonal.FechaHasta,
	suePersRedZonal.Reduccion, --genEntidadesBasicasValor.Descripcion as DescripcionTipoSDI, 
	suePersRedZonal.Usuario_Id
From suePersRedZonal 
Inner Join suePersonal  ON (suePersonal.genEntidades = suePersRedZonal.Legajo)
--left join genEntidadesBasicasValor on genEntidadesBasicasValor.Entidad_Id=1513 and genEntidadesBasicasValor.Clave=suePersTipoSDI.TipoSDI
Where (suePersonal.Legajo = @pLegajo)
 
Return @@Error 

GO

DROP PROCEDURE suePersRedZonalEliminar
GO
CREATE PROCEDURE suePersRedZonalEliminar
(
@pLegajo bigint,
@pFechaDesde qFechaHora = NULL
)
AS
SET NOCOUNT ON 

Delete From suePersRedZonal 
Where (Legajo = dbo.FuncFKsuePersonal(@pLegajo))
And (FechaDesde = ISNULL(@pFechaDesde, FechaDesde))
 
Return @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersSinestrado.sql*/
DROP PROCEDURE suePersSiniestradoGuardar
GO
CREATE PROCEDURE suePersSiniestradoGuardar
(
@pLegajo bigint,
@pFechaDesde qFechaHora,
@pFechaHasta qFechaHora,
@pSiniestro_Id varchar(2),
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
set @pLegajo=(select genEntidades from suePersonal where Legajo=@pLegajo)
IF (EXISTS (SELECT 1 FROM suePersSiniestrado WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)))
BEGIN 
	UPDATE suePersSiniestrado
	SET		FechaHasta = isnull((select min(Catego2.FechaDesde) 
		from suePersSiniestrado Catego2 
		where 
		Catego2.Legajo = suePersSiniestrado.Legajo and
		Catego2.FechaDesde>suePersSiniestrado.FechaDesde),@pFechaHasta),
		Siniestro_Id = @pSiniestro_Id,
		Usuario_Id = @pUsuario_Id
	WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)
END 
ELSE 
BEGIN
if (not exists(select Siniestro_Id from suePersSiniestrado where (Legajo = @pLegajo) AND (FechaHasta = '29990101')and Siniestro_Id=@pSiniestro_Id))
begin
if not exists (select 1 from suePersSiniestrado where Legajo=@pLegajo)
begin 
set @pFechaDesde=(select FechaIngreso from suePersonal where genEntidades=@pLegajo)
end
update suePersSiniestrado set FechaHasta=DATEADD(dd,-1, @pFechaDesde) where FechaHasta='29990101' and 	Legajo = @pLegajo
	INSERT INTO suePersSiniestrado
	(
		Legajo,
		FechaDesde,
		FechaHasta,
		Siniestro_Id,
		Usuario_Id
	)
	VALUES 
	(
		@pLegajo,
		@pFechaDesde,
		@pFechaHasta,
		@pSiniestro_Id,
		@pUsuario_Id
	)
END 
end
GO

DROP PROCEDURE suePersSiniestradoDatos
GO
CREATE PROCEDURE suePersSiniestradoDatos
(
@pLegajo bigint
)
AS
SET NOCOUNT ON 

SELECT suePersSiniestrado.Legajo, suePersonal.Nombres as DescripcionPersonal, suePersSiniestrado.FechaDesde, suePersSiniestrado.FechaHasta,
	suePersSiniestrado.Siniestro_Id, genEntidadesBasicasValor.Descripcion as DescripcionSiniestro, suePersSiniestrado.Usuario_Id
FROM suePersSiniestrado 
INNER JOIN suePersonal  ON (suePersonal.genEntidades = suePersSiniestrado.Legajo)
left join genEntidadesBasicasValor on genEntidadesBasicasValor.Entidad_Id=1507 and genEntidadesBasicasValor.Clave=suePersSiniestrado.Siniestro_Id
WHERE (suePersonal.Legajo = @pLegajo)
 
 RETURN @@Error 

GO

DROP PROCEDURE suePersSiniestradoEliminar
GO
CREATE PROCEDURE suePersSiniestradoEliminar
(
@pLegajo bigint,
@pFechaDesde qFechaHora = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM suePersSiniestrado 
WHERE (Legajo = dbo.FuncFKsuePersonal(@pLegajo))
AND (FechaDesde = ISNULL(@pFechaDesde, FechaDesde))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersSituacionRevi.sql*/
DROP PROCEDURE suePersSituacionReviGuardar
GO
CREATE PROCEDURE suePersSituacionReviGuardar
(
@pLegajo bigint,
@pFechaDesde qFechaHora,
@pFechaHasta qFechaHora,
@pSituacion_Id varchar(2),
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
set @pLegajo=(select genEntidades from suePersonal where Legajo=@pLegajo)
IF (EXISTS (SELECT 1 FROM suePersSituacionRevi WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)))
BEGIN 
	UPDATE suePersSituacionRevi
	SET		FechaHasta = isnull((select min(Catego2.FechaDesde) 
		from suePersSituacionRevi Catego2 
		where 
		Catego2.Legajo = suePersSituacionRevi.Legajo and
		Catego2.FechaDesde>suePersSituacionRevi.FechaDesde),@pFechaHasta),
		Situacion_Id = @pSituacion_Id,
		Usuario_Id = @pUsuario_Id
	WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)
END 
ELSE 
BEGIN 
if (not exists(select Situacion_Id from suePersSituacionRevi where (Legajo = @pLegajo) AND (FechaDesde = '29990101')and Situacion_Id=@pSituacion_Id))
begin
if not exists (select 1 from suePersSituacionRevi where Legajo=@pLegajo)
begin
set @pFechaDesde=(select FechaIngreso from suePersonal where genEntidades=@pLegajo)
end
update suePersSituacionRevi set FechaHasta=DATEADD(dd,-1, @pFechaDesde) where FechaHasta='29990101' and 	Legajo = @pLegajo
	INSERT INTO suePersSituacionRevi
	(
		Legajo,
		FechaDesde,
		FechaHasta,
		Situacion_Id,
		Usuario_Id
	)
	VALUES 
	(
		@pLegajo,
		@pFechaDesde,
		@pFechaHasta,
		@pSituacion_Id,
		@pUsuario_Id
	)
END 
end
GO

DROP PROCEDURE suePersSituacionReviDatos
GO
CREATE PROCEDURE suePersSituacionReviDatos
(
@pLegajo bigint
)
AS
SET NOCOUNT ON 

SELECT suePersSituacionRevi.Legajo, suePersonal.Nombres as DescripcionPersonal, suePersSituacionRevi.FechaDesde, suePersSituacionRevi.FechaHasta,
	suePersSituacionRevi.Situacion_Id, genEntidadesBasicasValor.Descripcion as DescripcionSituacion, suePersSituacionRevi.Usuario_Id
FROM suePersSituacionRevi 
INNER JOIN suePersonal  ON (suePersonal.genEntidades = suePersSituacionRevi.Legajo)
left join genEntidadesBasicasValor on genEntidadesBasicasValor.Entidad_Id=1508 and genEntidadesBasicasValor.Clave=suePersSituacionRevi.Situacion_Id
WHERE (suePersonal.Legajo = @pLegajo)
 
 RETURN @@Error 

GO

DROP PROCEDURE suePersSituacionReviEliminar
GO
CREATE PROCEDURE suePersSituacionReviEliminar
(
@pLegajo bigint,
@pFechaDesde qFechaHora = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM suePersSituacionRevi 
WHERE (Legajo = dbo.FuncFKsuePersonal(@pLegajo))
AND (FechaDesde = ISNULL(@pFechaDesde, FechaDesde))
 
 RETURN @@Error 

GO

Drop procedure suePersSituaRevisHistoria
Go
Create procedure suePersSituaRevisHistoria
(
@pLegajo int,
@pFechaDesde Datetime,
@pFechaHasta Datetime
)
As

Select Situacion_Id 
From suePersSituacionRevi
Inner Join suePersonal On suePersonal.genEntidades = suePersSituacionRevi.Legajo
Where suePersonal.Legajo = @pLegajo And
(FechaDesde Between @pFechaDesde And @pFechaHasta Or
FechaHasta Between @pFechaDesde And @pFechaHasta Or
FechaDesde >= @pFechaDesde AND FechaHasta <= @pFechaHasta Or
FechaDesde <= @pFechaDesde AND FechaHasta >= @pFechaHasta)
Order by FechaDesde
Go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersSucursal.sql*/
DROP PROCEDURE suePersSucursalGuardar
GO
CREATE PROCEDURE suePersSucursalGuardar
(
@pLegajo bigint,
@pFechaDesde qFechaHora,
@pFechaHasta qFechaHora,
@pSucursal Sucursal = NULL,
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
set @pLegajo=(select genEntidades from suePersonal where Legajo=@pLegajo)
IF (EXISTS (SELECT 1 FROM suePersSucursal WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)))
BEGIN 
	UPDATE suePersSucursal
	SET		FechaHasta = isnull((select min(Catego2.FechaDesde) 
		from suePersSucursal Catego2 
		where 
		Catego2.Legajo = suePersSucursal.Legajo and 
		Catego2.FechaDesde>suePersSucursal.FechaDesde),@pFechaHasta),
		Sucursal = dbo.FuncFKgenSucursalesEmpr(@pSucursal),
		Usuario_Id = @pUsuario_Id
	WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)
END 
ELSE 
BEGIN 
if (not exists(select Sucursal from suePersSucursal where (Legajo = @pLegajo) AND (FechaHasta = '29990101') and Sucursal= dbo.FuncFKgenSucursalesEmpr( @pSucursal)))
begin
if not EXISTS (select 1 from suePersSucursal where Legajo=@pLegajo)
BEGIN
set @pFechaDesde=(select FechaIngreso from suePersonal where genEntidades=@pLegajo)
end
update suePersSucursal set FechaHasta=DATEADD(dd,-1, @pFechaDesde) where FechaHasta='29990101' and 	Legajo = @pLegajo
	INSERT INTO suePersSucursal
	(
		Legajo,
		FechaDesde,
		FechaHasta,
		Sucursal,
		Usuario_Id
	)
	VALUES 
	(
		@pLegajo,
		@pFechaDesde,
		@pFechaHasta,
		dbo.FuncFKgenSucursalesEmpr(@pSucursal),
		@pUsuario_Id
	)
END 
end
GO

DROP PROCEDURE suePersSucursalDatos
GO
CREATE PROCEDURE suePersSucursalDatos
(
@pLegajo bigint
)
AS
SET NOCOUNT ON 

SELECT suePersSucursal.Legajo, suePersonal.Nombres as DescripcionPersonal, suePersSucursal.FechaDesde, suePersSucursal.FechaHasta,
	genSucursalesEmpr.Sucursal, genSucursalesEmpr.Descripcion as DescripcionSucursal, suePersSucursal.Usuario_Id
FROM suePersSucursal 
INNER JOIN suePersonal  ON (suePersonal.genEntidades = suePersSucursal.Legajo)
left join genSucursalesEmpr on genSucursalesEmpr.genSucursalesEmpr=suePersSucursal.Sucursal
WHERE (suePersonal.Legajo = @pLegajo)
 
 RETURN @@Error 

GO

DROP PROCEDURE suePersSucursalEliminar
GO
CREATE PROCEDURE suePersSucursalEliminar
(
@pLegajo bigint,
@pFechaDesde qFechaHora = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM suePersSucursal 
WHERE (Legajo = dbo.FuncFKsuePersonal(@pLegajo))
AND (FechaDesde = ISNULL(@pFechaDesde, FechaDesde))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersTipoContrato.sql*/
DROP PROCEDURE suePersTipoContratoGuardar
GO
CREATE PROCEDURE suePersTipoContratoGuardar
(
@pLegajo bigint,
@pFechaDesde qFechaHora,
@pFechaHasta qFechaHora,
@pTipoContrato varchar(2),
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
set @pLegajo=(select genEntidades from suePersonal where Legajo=@pLegajo)
IF (EXISTS (SELECT 1 FROM suePersTipoContrato WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)))
BEGIN 
	UPDATE suePersTipoContrato
	SET		FechaHasta = isnull((select min(Catego2.FechaDesde) 
		from suePersTipoContrato Catego2 
		where 
		Catego2.Legajo = suePersTipoContrato.Legajo and
		Catego2.FechaDesde>suePersTipoContrato.FechaDesde),@pFechaHasta),
		TipoContrato = @pTipoContrato,
		Usuario_Id = @pUsuario_Id
	WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)
END 
ELSE 
BEGIN 
if (not exists(select TipoContrato from suePersTipoContrato where (Legajo = @pLegajo) AND (FechaHasta = '29990101')and TipoContrato=@pTipoContrato))
begin
if not exists (select 1 from suePersTipoContrato where Legajo=@pLegajo)
begin
set @pFechaDesde=(select FechaIngreso from suePersonal where genEntidades=@pLegajo)
end
update suePersTipoContrato set FechaHasta=DATEADD(dd,-1,@pFechaDesde) where FechaHasta='29990101' and 	Legajo = @pLegajo
	INSERT INTO suePersTipoContrato
	(
		Legajo,
		FechaDesde,
		FechaHasta,
		TipoContrato,
		Usuario_Id
	)
	VALUES 
	(
		@pLegajo,
		@pFechaDesde,
		@pFechaHasta,
		@pTipoContrato,
		@pUsuario_Id
	)
END 
end
GO

DROP PROCEDURE suePersTipoContratoDatos
GO
CREATE PROCEDURE suePersTipoContratoDatos
(
@pLegajo bigint
)
AS
SET NOCOUNT ON 

SELECT suePersTipoContrato.Legajo, suePersonal.Nombres as DescripcionPersonal, suePersTipoContrato.FechaDesde, suePersTipoContrato.FechaHasta,
	suePersTipoContrato.TipoContrato, genEntidadesBasicasValor.Descripcion as DescripcionTipoContrato, suePersTipoContrato.Usuario_Id
FROM suePersTipoContrato 
INNER JOIN suePersonal  ON (suePersonal.genEntidades = suePersTipoContrato.Legajo)
left join genEntidadesBasicasValor on genEntidadesBasicasValor.Entidad_Id=1509 and genEntidadesBasicasValor.Clave=suePersTipoContrato.TipoContrato
WHERE (suePersonal.Legajo = @pLegajo)
 
 RETURN @@Error 

GO

DROP PROCEDURE suePersTipoContratoEliminar
GO
CREATE PROCEDURE suePersTipoContratoEliminar
(
@pLegajo bigint,
@pFechaDesde qFechaHora = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM suePersTipoContrato 
WHERE (Legajo = dbo.FuncFKsuePersonal(@pLegajo))
AND (FechaDesde = ISNULL(@pFechaDesde, FechaDesde))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersTipoEmpleador.sql*/
DROP PROCEDURE suePersTipoEmpleadorGuardar
GO
CREATE PROCEDURE suePersTipoEmpleadorGuardar
(
@pLegajo bigint,
@pFechaDesde qFechaHora,
@pFechaHasta qFechaHora,
@pTipoEmpleador_Id varchar(2),
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
set @pLegajo=(select genEntidades from suePersonal where Legajo=@pLegajo)
IF (EXISTS (SELECT 1 FROM suePersTipoEmpleador WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)))
BEGIN 
	UPDATE suePersTipoEmpleador
	SET		FechaHasta = isnull((select min(Catego2.FechaDesde) 
		from suePersTipoEmpleador Catego2 
		where 
		Catego2.Legajo = suePersTipoEmpleador.Legajo and 
		Catego2.FechaDesde>suePersTipoEmpleador.FechaDesde),@pFechaHasta),
		TipoEmpleador_Id = @pTipoEmpleador_Id,
		Usuario_Id = @pUsuario_Id
	WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)
END 
ELSE 
BEGIN 
if (not exists(select TipoEmpleador_Id from suePersTipoEmpleador where (Legajo = @pLegajo) AND (FechaHasta = '29990101')and @pTipoEmpleador_Id=@pTipoEmpleador_Id))
begin
if not exists (select 1 from suePersTipoEmpleador where Legajo=@pLegajo)
BEGIN
set @pFechaDesde=(select FechaIngreso from suePersonal where genEntidades=@pLegajo)
end
update suePersTipoEmpleador set FechaHasta=DATEADD(dd,-1, @pFechaDesde) where FechaHasta='29990101' and 	Legajo = @pLegajo
	INSERT INTO suePersTipoEmpleador
	(
		Legajo,
		FechaDesde,
		FechaHasta,
		TipoEmpleador_Id,
		Usuario_Id
	)
	VALUES 
	(
		@pLegajo,
		@pFechaDesde,
		@pFechaHasta,
		@pTipoEmpleador_Id,
		@pUsuario_Id
	)
END 
end
GO

DROP PROCEDURE suePersTipoEmpleadorDatos
GO
CREATE PROCEDURE suePersTipoEmpleadorDatos
(
@pLegajo bigint
)
AS
SET NOCOUNT ON 

SELECT suePersTipoEmpleador.Legajo, suePersonal.Nombres as DescripcionPersonal, suePersTipoEmpleador.FechaDesde, suePersTipoEmpleador.FechaHasta,
	suePersTipoEmpleador.TipoEmpleador_Id, genEntidadesBasicasValor.Descripcion as DescripcionTipoEmpleador, suePersTipoEmpleador.Usuario_Id
FROM suePersTipoEmpleador 
INNER JOIN suePersonal  ON (suePersonal.genEntidades = suePersTipoEmpleador.Legajo)
left join genEntidadesBasicasValor on genEntidadesBasicasValor.Entidad_Id=1510 and genEntidadesBasicasValor.Clave=suePersTipoEmpleador.TipoEmpleador_Id
WHERE (suePersonal.Legajo = @pLegajo)
 
 RETURN @@Error 

GO

DROP PROCEDURE suePersTipoEmpleadorEliminar
GO
CREATE PROCEDURE suePersTipoEmpleadorEliminar
(
@pLegajo bigint,
@pFechaDesde qFechaHora = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM suePersTipoEmpleador 
WHERE (Legajo = dbo.FuncFKsuePersonal(@pLegajo))
AND (FechaDesde = ISNULL(@pFechaDesde, FechaDesde))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersTipoJornada.sql*/
DROP PROCEDURE suePersTipoJornadaGuardar
GO
CREATE PROCEDURE suePersTipoJornadaGuardar
(
@pLegajo bigint,
@pFechaDesde qFechaHora,
@pFechaHasta qFechaHora,
@pTipoJornada varchar(2),
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON
set @pLegajo=(select genEntidades from suePersonal where Legajo=@pLegajo)
IF (EXISTS (SELECT 1 FROM suePersTipoJornada WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)))
BEGIN 
	UPDATE suePersTipoJornada
	SET		FechaHasta = isnull((select min(Catego2.FechaDesde) 
			from suePersTipoJornada Catego2 
			where 
			Catego2.Legajo = suePersTipoJornada.Legajo and 
			Catego2.FechaDesde>suePersTipoJornada.FechaDesde),@pFechaHasta),
		TipoJornada = @pTipoJornada,
		Usuario_Id = @pUsuario_Id
	WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)
END 
ELSE 
BEGIN 
if (not exists(select TipoJornada from suePersTipoJornada where (Legajo = @pLegajo) AND (FechaHasta = '29990101')and TipoJornada=@pTipoJornada))
begin
if not EXISTS (select 1 from suePersTipoJornada where Legajo=@pLegajo)
begin
set @pFechaDesde=(select FechaIngreso from suePersonal where genEntidades=@pLegajo)
end
update suePersTipoJornada set FechaHasta=DATEADD(dd,-1, @pFechaDesde) where FechaHasta='29990101' and 	Legajo = @pLegajo
	INSERT INTO suePersTipoJornada 
	(
		Legajo,
		FechaDesde,
		FechaHasta,
		TipoJornada,
		Usuario_Id
	)
	VALUES 
	(
		@pLegajo,
		@pFechaDesde,
		@pFechaHasta,
		@pTipoJornada,
		@pUsuario_Id
	)
END 
end
GO

DROP PROCEDURE suePersTipoJornadaDatos
GO
CREATE PROCEDURE suePersTipoJornadaDatos
(
@pLegajo bigint
)
AS
SET NOCOUNT ON 

SELECT suePersTipoJornada.Legajo, suePersonal.Nombres as DescripcionPersonal, suePersTipoJornada.FechaDesde, suePersTipoJornada.FechaHasta,
	suePersTipoJornada.TipoJornada, genEntidadesBasicasValor.Descripcion as DescripcionTipoJornada, suePersTipoJornada.Usuario_Id
FROM suePersTipoJornada 
INNER JOIN suePersonal  ON (suePersonal.genEntidades = suePersTipoJornada.Legajo)
left join genEntidadesBasicasValor on genEntidadesBasicasValor.Entidad_Id=1511 and genEntidadesBasicasValor.Clave=suePersTipoJornada.TipoJornada
WHERE (suePersonal.Legajo = @pLegajo)
 
 RETURN @@Error 

GO

DROP PROCEDURE suePersTipoJornadaEliminar
GO
CREATE PROCEDURE suePersTipoJornadaEliminar
(
@pLegajo bigint,
@pFechaDesde qFechaHora = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM suePersTipoJornada 
WHERE (Legajo = dbo.FuncFKsuePersonal(@pLegajo))
AND (FechaDesde = ISNULL(@pFechaDesde, FechaDesde))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersTipoPago.sql*/
DROP PROCEDURE suePersTipoPagoGuardar
GO
CREATE PROCEDURE suePersTipoPagoGuardar
(
@pLegajo bigint,
@pFechaDesde qFechaHora,
@pFechaHasta qFechaHora,
@pTipoPago_Id varchar(5) = NULL,
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
set @pLegajo=(select genEntidades from suePersonal where Legajo=@pLegajo)
IF (EXISTS (SELECT 1 FROM suePersTipoPago WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)))
BEGIN 
	UPDATE suePersTipoPago
	SET		FechaHasta = isnull((select min(Catego2.FechaDesde) 
		from suePersTipoPago Catego2 
		where 
		Catego2.Legajo = suePersTipoPago.Legajo and 
		Catego2.FechaDesde>suePersTipoPago.FechaDesde),@pFechaHasta),
		TipoPago_Id =dbo.FuncFKsueTipoPago( @pTipoPago_Id),
		Usuario_Id = @pUsuario_Id
	WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)
END 
ELSE 
BEGIN 
if (not exists(select TipoPago_Id from suePersTipoPago where (Legajo = @pLegajo) AND (FechaHasta = '29990101')and TipoPago_Id= dbo.FuncFKsueTipoPago(@pTipoPago_Id)))
begin
if not exists (select 1 from suePersTipoPago where Legajo=@pLegajo)
BEGIN
set @pFechaDesde =(select FechaIngreso from suePersonal where genEntidades=@pLegajo)
end
update suePersTipoPago set FechaHasta=DATEADD(dd,-1, @pFechaDesde) where FechaHasta='29990101' and 	Legajo = @pLegajo
	INSERT INTO suePersTipoPago
	(
		Legajo,
		FechaDesde,
		FechaHasta,
		TipoPago_Id,
		Usuario_Id
	)
	VALUES 
	(
		@pLegajo,
		@pFechaDesde,
		@pFechaHasta,
		dbo.FuncFKsueTipoPago(@pTipoPago_Id),
		@pUsuario_Id
	)
END 
end
GO

DROP PROCEDURE suePersTipoPagoDatos
GO
CREATE PROCEDURE suePersTipoPagoDatos
(
@pLegajo bigint
)
AS
SET NOCOUNT ON 

SELECT suePersTipoPago.Legajo, suePersonal.Nombres as DescripcionPersonal, suePersTipoPago.FechaDesde, suePersTipoPago.FechaHasta,
	sueTipoPago.TipoPago_Id, sueTipoPago.Descripcion, suePersTipoPago.Usuario_Id
FROM suePersTipoPago 
INNER JOIN suePersonal  ON (suePersonal.genEntidades = suePersTipoPago.Legajo)
inner join sueTipoPago on suePersTipoPago.TipoPago_Id= sueTipoPago.sueTipoPago
WHERE (suePersonal.Legajo = @pLegajo)
 
 RETURN @@Error 

GO

DROP PROCEDURE suePersTipoPagoEliminar
GO
CREATE PROCEDURE suePersTipoPagoEliminar
(
@pLegajo bigint,
@pFechaDesde qFechaHora = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM suePersTipoPago 
WHERE (Legajo = dbo.FuncFKsuePersonal(@pLegajo))
AND (FechaDesde = ISNULL(@pFechaDesde, FechaDesde))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersTipoRegimen.sql*/
DROP PROCEDURE suePersTipoRegimenGuardar
GO
CREATE PROCEDURE suePersTipoRegimenGuardar
(
@pLegajo bigint,
@pFechaDesde qFechaHora,
@pFechaHasta qFechaHora,
@pTipoRegimen varchar(2),
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
set @pLegajo=(select genEntidades from suePersonal where Legajo=@pLegajo)
IF (EXISTS (SELECT 1 FROM suePersTipoRegimen WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)))
BEGIN 
	UPDATE suePersTipoRegimen
	SET		FechaHasta = isnull((select min(Catego2.FechaDesde) 
		from suePersTipoRegimen Catego2 
		where 
		Catego2.Legajo = suePersTipoRegimen.Legajo and 
		Catego2.FechaDesde>suePersTipoRegimen.FechaDesde),@pFechaHasta),

		TipoRegimen = @pTipoRegimen,
		Usuario_Id = @pUsuario_Id
	WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)
END 
ELSE 
BEGIN 
if (not exists(select TipoRegimen from suePersTipoRegimen where (Legajo = @pLegajo) AND (FechaHasta = '29990101')and TipoRegimen=@pTipoRegimen))
begin
if not EXISTS (select 1 from suePersTipoRegimen where Legajo=@pLegajo)
BEGIN
set @pFechaDesde=(select FechaIngreso from suePersonal where genEntidades=@pLegajo)
end
update suePersTipoRegimen set FechaHasta=DATEADD(dd,-1, @pFechaDesde) where FechaHasta='29990101' and 	Legajo = @pLegajo
	INSERT INTO suePersTipoRegimen
	(
		Legajo,
		FechaDesde,
		FechaHasta,
		TipoRegimen,
		Usuario_Id
	)
	VALUES 
	(
		@pLegajo,
		@pFechaDesde,
		@pFechaHasta,
		@pTipoRegimen,
		@pUsuario_Id
	)
END 
end
GO

DROP PROCEDURE suePersTipoRegimenDatos
GO
CREATE PROCEDURE suePersTipoRegimenDatos
(
@pLegajo bigint
)
AS
SET NOCOUNT ON 

SELECT suePersTipoRegimen.Legajo, suePersonal.Nombres as DescripcionPersonal, suePersTipoRegimen.FechaDesde, suePersTipoRegimen.FechaHasta,
	suePersTipoRegimen.TipoRegimen, genEntidadesBasicasValor.Descripcion as DescripcionTipoRegimen, suePersTipoRegimen.Usuario_Id
FROM suePersTipoRegimen 
INNER JOIN suePersonal  ON (suePersonal.genEntidades = suePersTipoRegimen.Legajo)
left join genEntidadesBasicasValor on genEntidadesBasicasValor.Entidad_Id=1512 and genEntidadesBasicasValor.Clave=suePersTipoRegimen.TipoRegimen
WHERE (suePersonal.Legajo = @pLegajo)
 
 RETURN @@Error 

GO

DROP PROCEDURE suePersTipoRegimenEliminar
GO
CREATE PROCEDURE suePersTipoRegimenEliminar
(
@pLegajo bigint,
@pFechaDesde qFechaHora = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM suePersTipoRegimen 
WHERE (Legajo = dbo.FuncFKsuePersonal(@pLegajo))
AND (FechaDesde = ISNULL(@pFechaDesde, FechaDesde))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePersTipoSDI.sql*/
DROP PROCEDURE suePersTipoSDIGuardar
GO
CREATE PROCEDURE suePersTipoSDIGuardar
(
@pLegajo bigint,
@pFechaDesde qFechaHora,
@pFechaHasta qFechaHora,
@pTipoSDI char(1),
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
set @pLegajo=(select genEntidades from suePersonal where Legajo=@pLegajo)
IF (EXISTS (SELECT 1 FROM suePersTipoSDI WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)))
BEGIN 
	UPDATE suePersTipoSDI
	SET		FechaHasta = isnull((select min(Catego2.FechaDesde) 
		from suePersTipoSDI Catego2 
		where 
		Catego2.Legajo = suePersTipoSDI.Legajo and 
		Catego2.FechaDesde>suePersTipoSDI.FechaDesde),@pFechaHasta),
		TipoSDI = @pTipoSDI,
		Usuario_Id = @pUsuario_Id
	WHERE (Legajo = @pLegajo) AND (FechaDesde = @pFechaDesde)
END 
ELSE 
BEGIN 
if (not exists(select TipoSDI from suePersTipoSDI where (Legajo = @pLegajo) AND (FechaHasta = '29990101') and TipoSDI=@pTipoSDI))
begin
if not exists (select 1 from suePersTipoSDI where Legajo=@pLegajo)
BEGIN
set @pFechaDesde =(select FechaIngreso from suePersonal where genEntidades=@pLegajo)
end
update suePersTipoSDI set FechaHasta=DATEADD(dd,-1, @pFechaDesde) where FechaHasta='29990101' and 	Legajo = @pLegajo
	INSERT INTO suePersTipoSDI
	(
		Legajo,
		FechaDesde,
		FechaHasta,
		TipoSDI,
		Usuario_Id
	)
	VALUES 
	(
		@pLegajo,
		@pFechaDesde,
		@pFechaHasta,
		@pTipoSDI,
		@pUsuario_Id
	)
END 
end
GO

DROP PROCEDURE suePersTipoSDIDatos
GO
CREATE PROCEDURE suePersTipoSDIDatos
(
@pLegajo bigint
)
AS
SET NOCOUNT ON 

SELECT suePersTipoSDI.Legajo, suePersonal.Nombres as DescripcionPersonal, suePersTipoSDI.FechaDesde, suePersTipoSDI.FechaHasta,
	suePersTipoSDI.TipoSDI, genEntidadesBasicasValor.Descripcion as DescripcionTipoSDI, suePersTipoSDI.Usuario_Id
FROM suePersTipoSDI 
INNER JOIN suePersonal  ON (suePersonal.genEntidades = suePersTipoSDI.Legajo)
left join genEntidadesBasicasValor on genEntidadesBasicasValor.Entidad_Id=1513 and genEntidadesBasicasValor.Clave=suePersTipoSDI.TipoSDI
WHERE (suePersonal.Legajo = @pLegajo)
 
 RETURN @@Error 

GO

DROP PROCEDURE suePersTipoSDIEliminar
GO
CREATE PROCEDURE suePersTipoSDIEliminar
(
@pLegajo bigint,
@pFechaDesde qFechaHora = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM suePersTipoSDI 
WHERE (Legajo = dbo.FuncFKsuePersonal(@pLegajo))
AND (FechaDesde = ISNULL(@pFechaDesde, FechaDesde))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePlantilla.sql*/
DROP PROCEDURE suePlantillaGuardar
GO
CREATE PROCEDURE suePlantillaGuardar
(
@pCentro1_Id varchar(8),
@pPuesto_Id varchar(5),
@pCantidad qMonedaD2
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM suePlantilla WHERE (Centro1_Id = 	dbo.FuncFKconCentro1( @pCentro1_Id)) AND (Puesto_Id = dbo.FuncFKsuePuestos( @pPuesto_Id))))
BEGIN 
	UPDATE suePlantilla
	SET		Cantidad = @pCantidad
	WHERE (Centro1_Id = dbo.FuncFKconCentro1( @pCentro1_Id)) AND (Puesto_Id = dbo.FuncFKsuePuestos( @pPuesto_Id))
END 
ELSE 
BEGIN 
	INSERT INTO suePlantilla
	(
		Centro1_Id,
		Puesto_Id,
		Cantidad
	)
	VALUES 
	(
		dbo.FuncFKconCentro1( @pCentro1_Id),
	dbo.FuncFKsuePuestos( @pPuesto_Id),
		@pCantidad
	)
END 


GO

DROP PROCEDURE suePlantillaDatos
GO
CREATE PROCEDURE suePlantillaDatos
(
@pCentro1_Id varchar(8),
@pPuesto_Id varchar(5)=null
)
AS
SET NOCOUNT ON 
select conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1
from conCentro1 where conCentro1.Centro1_Id=@pCentro1_Id

SELECT suePuestos.Puesto_Id, suePuestos.Descripcion as DescripcionPuestos, suePlantilla.Cantidad
FROM suePlantilla 
INNER JOIN conCentro1  ON (conCentro1.conCentro1 = suePlantilla.Centro1_Id)
INNER JOIN suePuestos  ON (suePuestos.suePuestos = suePlantilla.Puesto_Id)
WHERE (conCentro1.Centro1_Id = @pCentro1_Id)
AND (suePuestos.Puesto_Id = isnull(@pPuesto_Id,suePuestos.Puesto_Id))
 
 RETURN @@Error 


GO

DROP PROCEDURE suePlantillaEliminar
GO
CREATE PROCEDURE suePlantillaEliminar
(
@pCentro1_Id varchar(8),
@pPuesto_Id int=null
)
AS
SET NOCOUNT ON 

DELETE FROM suePlantilla 
WHERE (Centro1_Id = dbo.FuncFKconCentro1(@pCentro1_Id))
AND (Puesto_Id = isnull(@pPuesto_Id,Puesto_id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\suePuesto.sql*/
DROP PROCEDURE suePuestosGuardar
GO
CREATE PROCEDURE suePuestosGuardar
(
@pPuesto_Id varchar(5),
@pPuesto_Id_Nueva varchar(5),
@pDescripcion varchar(20),
@pInactivo Sino,
@pPosteado Sino,
@pUsuario_Id int = NULL,
@pEmpresa_Id int =null,
@pRiesgoPuesto VarChar(2) = NULL
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM suePuestos WHERE Puesto_Id=@pPuesto_Id))
BEGIN 
	UPDATE suePuestos
	SET		@lIdentidad = suePuestos,
		Puesto_Id = @pPuesto_Id_Nueva,
		Descripcion = @pDescripcion,
		Inactivo = @pInactivo,
		Posteado = @pPosteado,
		Usuario_Id = @pUsuario_Id,
		Empresa_Id=@pEmpresa_Id, 
		RiesgoPuesto = @pRiesgoPuesto
	WHERE 
	Puesto_Id=@pPuesto_Id
END 
ELSE 
BEGIN 
	INSERT INTO suePuestos
	(
		Puesto_Id,
		Descripcion,
		Inactivo,
		Posteado,
		Usuario_Id,
		Empresa_Id, 
		RiesgoPuesto
	)
	VALUES 
	(
		@pPuesto_Id_Nueva,
		@pDescripcion,
		@pInactivo,
		@pPosteado,
		@pUsuario_Id,
		@pEmpresa_Id, 
		@pRiesgoPuesto
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE suePuestosDatos
GO
CREATE PROCEDURE suePuestosDatos
(
@pPuesto_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT suePuestos.suePuestos, suePuestos.Puesto_Id, suePuestos.Descripcion, suePuestos.Inactivo,
	suePuestos.Posteado, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, suePuestos.Empresa_Id,
	cast(case when suePuestos.Empresa_Id is null then 1 else 0 end as bit) as PTodasEmpresas, 
	RiesgoPuesto
FROM suePuestos 
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = suePuestos.Usuario_Id)
WHERE  
Puesto_Id=@pPuesto_Id

  Declare @pidentity bigint= dbo.FuncFKsuePuestos(@pPuesto_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'suePuestos'
 RETURN @@Error 

GO

DROP PROCEDURE suePuestosEliminar
GO
CREATE PROCEDURE suePuestosEliminar
(
@pPuesto_Id varchar(5)
)
AS
SET NOCOUNT ON 

DELETE FROM suePuestos 
WHERE  
Puesto_Id=@pPuesto_Id
 RETURN @@Error 

GO

DROP FUNCTION FuncFKsuePuestos
GO

CREATE FUNCTION FuncFKsuePuestos
(
@pPuestos_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = suePuestos FROM suePuestos WHERE 
	Puesto_Id = @pPuestos_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueRecibosDatos.sql*/
-- sueRecibosDatos 'SLIQ',2019,9,1,1,' ',' ',' ',' ',1,1
DROP PROCEDURE sueRecibosDatos
GO
CREATE PROCEDURE sueRecibosDatos
(
	@pSegmento_Id VarChar(10),
	@pSegmento1N INT, 
	@pSegmento2N INT, 
	@pSegmento3N INT, 
	@pSegmento4N INT, 
	@pSegmento1C VarChar(25), 
	@pSegmento2C VarChar(25), 
	@pSegmento3C VarChar(25), 
	@pSegmento4C VarChar(25), 
	@Legajo Int ,
	@Empresa_Id Int

)

as

select genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, genAsiSegmentos.Segmento1C,
genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
sueLiquidacion.Descripcion as DescripcionNomina , sueLiquidacion.Anio, sueLiquidacion.Mes, 
sueLiquidacion.Decena, sueLiquidacion.Quincena, sueLiquidacion.Semana, sueLiquidacion.Vez,
sueGrupos.Grupo_Id, sueGrupos.Descripcion as DescripcionGrupo, 
sueLiquidacion.FechaPago, 
suePersonal.Legajo, suePersonal.ApellidoPaterno +','+ suePersonal.ApellidoMaterno +','+ suePersonal.Nombres as Nombre, 
suePersonal.FechaIngreso, ISNULL(SDI.Valor,0) AS SDI, 
ISNULL(SD.VALOR,0) AS SD, DateDiff(dd, sueLiquidacion.FechaInicial, sueLiquidacion.FechaFinal)+1 as DiasPagados, 
SUM(sueTerminada.Importe* sueTerminada.Signo) as Neto
from sueLiquidacion INNER JOIN conAsientos on 
sueLiquidacion.sueLiquidacion = conAsientos.conAsientos
inner join sueTerminada ON sueTerminada.sueLiquidacion = sueLiquidacion.sueLiquidacion
inner join genAsiSegmentos ON
genAsiSegmentos.Asiento_Id  = conAsientos.conAsientos
inner join genSegmentos ON 
genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
inner join suePersonal ON 
suePersonal.genEntidades = sueTerminada.legajo
inner join sueGrupos on sueGrupos.sueGrupos = sueLiquidacion.Grupo_Id
LEFT JOIN sueLiqPersImportes SDI ON 
	SDI.Legajo = suePersonal.genEntidades and 
	SDI.Importe_Id = 2 and 
	sueLiquidacion.FechaFinal Between SDI.Fecha_Desde AND SDI.Fecha_Hasta
LEFT JOIN sueLiqPersImportes SD ON 
	SD.Legajo = suePersonal.genEntidades and 
	SD.Importe_Id = 1 and 
	sueLiquidacion.FechaFinal Between SD.Fecha_Desde AND SD.Fecha_Hasta

Where
	conAsientos.Anulado = 0 and 
	genSegmentos.Segmento_Id = @pSegmento_Id and 
	genAsiSegmentos.Segmento1N = @pSegmento1N AND
	genAsiSegmentos.Segmento2N = @pSegmento2N AND
	genAsiSegmentos.Segmento3N = @pSegmento3N AND
	genAsiSegmentos.Segmento4N = @pSegmento4N AND
	genAsiSegmentos.Segmento1C = @pSegmento1C AND
	genAsiSegmentos.Segmento2C = @pSegmento2C AND
	genAsiSegmentos.Segmento3C = @pSegmento3C AND
	genAsiSegmentos.Segmento4C = @pSegmento4C AND
	genAsiSegmentos.Empresa_Id = @Empresa_Id  and 
	suePersonal.Legajo =  @Legajo 
GROUP BY sueLiquidacion.Descripcion , sueLiquidacion.Anio, sueLiquidacion.Mes, 
sueLiquidacion.Decena, sueLiquidacion.Quincena, sueLiquidacion.Semana, sueLiquidacion.Vez,
sueLiquidacion.FechaPago,  suePersonal.Legajo, suePersonal.ApellidoPaterno , suePersonal.ApellidoMaterno , suePersonal.Nombres , 
suePersonal.FechaIngreso, SDI.Valor,SD.VALOR,sueLiquidacion.FechaInicial, sueLiquidacion.FechaFinal, 	
genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, genAsiSegmentos.Segmento1C,
genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
sueGrupos.Grupo_Id, sueGrupos.Descripcion 




SELECT 	sueConceptos.Concepto_Id, 	sueConceptos.Descripcion, 
		sueTerminada.Dato, sueTerminada.Dato2,
		Case when sueTerminada.IMPORTE*sueTerminada.SIGNO > 0 then sueTerminada.IMPORTE*sueTerminada.SIGNO else 0 end as Percepciones,
		Case when sueTerminada.IMPORTE*sueTerminada.SIGNO < 0 then -sueTerminada.IMPORTE*sueTerminada.SIGNO else 0 end as Deducciones
from sueLiquidacion INNER JOIN conAsientos on 
sueLiquidacion.sueLiquidacion = conAsientos.conAsientos
inner join genAsiSegmentos ON
genAsiSegmentos.Asiento_Id  = conAsientos.conAsientos
inner join genSegmentos ON 
genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
INNER JOIN sueTerminada ON
sueTerminada.sueLiquidacion = sueLiquidacion.sueLiquidacion 
inner join suePersonal ON 
suePersonal.genEntidades = sueTerminada.Legajo 
inner join sueConceptos ON
sueConceptos.sueConceptos = sueTerminada.Concepto_Id
Where
	conAsientos.Anulado = 0 and 
	sueTerminada.Signo != 0 and
	genSegmentos.Segmento_Id = @pSegmento_Id and 
	genAsiSegmentos.Segmento1N = @pSegmento1N AND
	genAsiSegmentos.Segmento2N = @pSegmento2N AND
	genAsiSegmentos.Segmento3N = @pSegmento3N AND
	genAsiSegmentos.Segmento4N = @pSegmento4N AND
	genAsiSegmentos.Segmento1C = @pSegmento1C AND
	genAsiSegmentos.Segmento2C = @pSegmento2C AND
	genAsiSegmentos.Segmento3C = @pSegmento3C AND
	genAsiSegmentos.Segmento4C = @pSegmento4C AND
	genAsiSegmentos.Empresa_Id = @Empresa_Id AND
	suePersonal.Legajo  =@Legajo
Order By sueConceptos.Concepto_Id
go

	
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueTabla.sql*/
DROP PROCEDURE sueTablaGuardar
GO
CREATE PROCEDURE sueTablaGuardar
(
@pTabla_Id int,
@pFila qMonedaD2,
@pValor qMonedaD2,
@pVer int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM sueTabla WHERE (Tabla_Id = @pTabla_Id and Fila = @pFila)))
BEGIN 
	UPDATE sueTabla
	SET	Valor = @pValor, Ver=@pVer
	WHERE (Tabla_Id = @pTabla_Id and Fila = @pFila)
END 
ELSE 
BEGIN 
	INSERT INTO sueTabla
	(
		Tabla_Id,
		Fila,
		Valor,
		Ver
	)
	VALUES 
	(
		@pTabla_Id,
		@pFila,
		@pValor,
		@pVer
	)
END 

GO


DROP PROCEDURE sueTablaEliminar
GO
CREATE PROCEDURE sueTablaEliminar
(
@pTabla_Id int
)
AS
SET NOCOUNT ON 

DELETE FROM sueTabla 
WHERE (Tabla_Id = @pTabla_Id)
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueTablaVacacion.sql*/
DROP PROCEDURE sueTablaVacacionGuardar
GO
CREATE PROCEDURE sueTablaVacacionGuardar
(
@pTablaVac_Id varchar(5),
@pTablaVac_Id_Nuevo varchar(5),
@pDescripcion varchar(100),
@pDias int,
@pEmpresa_Id int = NULL,
@pUsuario_Id int,
@pInactivo Sino,
@pPosteado Sino
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM sueTablaVacacion WHERE (TablaVac_Id = @pTablaVac_Id)))
BEGIN 
	UPDATE sueTablaVacacion
	SET		@lIdentidad = sueTablaVacacion,
		TablaVac_Id = @pTablaVac_Id_Nuevo,
		Descripcion = @pDescripcion,
		Dias = @pDias,
		Empresa_Id = @pEmpresa_Id,
		Usuario_Id = @pUsuario_Id,
		Inactivo = @pInactivo,
		Posteado = @pPosteado
	WHERE (TablaVac_Id = @pTablaVac_Id)
END 
ELSE 
BEGIN 
	INSERT INTO sueTablaVacacion
	(
		TablaVac_Id,
		Descripcion,
		Dias,
		Empresa_Id,
		Usuario_Id,
		Inactivo,
		Posteado
	)
	VALUES 
	(
		@pTablaVac_Id,
		@pDescripcion,
		@pDias,
		@pEmpresa_Id,
		@pUsuario_Id,
		@pInactivo,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE sueTablaVacacionDatos
GO
CREATE PROCEDURE sueTablaVacacionDatos
(
@pTablaVac_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT sueTablaVacacion.sueTablaVacacion, sueTablaVacacion.TablaVac_Id, sueTablaVacacion.Descripcion, sueTablaVacacion.Dias,
	sueTablaVacacion.Empresa_Id, Cast( Case When sueTablaVacacion.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, genUsuarios.Usuario_Id,
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario, sueTablaVacacion.Inactivo, sueTablaVacacion.Posteado
FROM sueTablaVacacion 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = sueTablaVacacion.Usuario_Id)
WHERE (TablaVac_Id = @pTablaVac_Id)
 

 exec sueTablaVacRengDatos @pTablaVac_Id, null

  Declare @pidentity bigint= dbo.FuncFKsueTablaVacacion(@pTablaVac_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'sueTablaVacacion'
 RETURN @@Error 

GO

DROP PROCEDURE sueTablaVacacionEliminar
GO
CREATE PROCEDURE sueTablaVacacionEliminar
(
@pTablaVac_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM sueTablaVacacion 
WHERE (TablaVac_Id = @pTablaVac_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKsueTablaVacacion
GO

CREATE FUNCTION FuncFKsueTablaVacacion
(
@pTablaVac_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = sueTablaVacacion FROM sueTablaVacacion WHERE 
	TablaVac_Id = @pTablaVac_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueTablaVacReng.sql*/
DROP PROCEDURE sueTablaVacRengGuardar
GO
CREATE PROCEDURE sueTablaVacRengGuardar
(
@pTablaVac_Id VarChar(5),
@pAntiguedad int,
@pDias int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM sueTablaVacReng WHERE (TablaVac_Id = dbo.FuncFKsueTablaVacacion(@pTablaVac_Id)) AND 
		(Antiguedad = @pAntiguedad)))
BEGIN 
	UPDATE sueTablaVacReng
	SET		Dias = @pDias
	WHERE (TablaVac_Id = dbo.FuncFKsueTablaVacacion(@pTablaVac_Id)) AND (Antiguedad = @pAntiguedad)
END 
ELSE 
BEGIN 
	INSERT INTO sueTablaVacReng
	(
		TablaVac_Id,
		Antiguedad,
		Dias
	)
	VALUES 
	(
		dbo.FuncFKsueTablaVacacion(@pTablaVac_Id),
		@pAntiguedad,
		@pDias
	)
END 

GO

DROP PROCEDURE sueTablaVacRengDatos
GO
CREATE PROCEDURE sueTablaVacRengDatos
(
@pTablaVac_Id VarChar(5),
@pAntiguedad int = NULL
)
AS
SET NOCOUNT ON 

SELECT sueTablaVacacion.TablaVac_Id, sueTablaVacacion.Descripcion as DescripcionTablaVacacion, sueTablaVacReng.Antiguedad, sueTablaVacReng.Dias
FROM sueTablaVacReng 
INNER JOIN sueTablaVacacion  ON (sueTablaVacacion.sueTablaVacacion = sueTablaVacReng.TablaVac_Id)
WHERE (sueTablaVacacion.TablaVac_Id = @pTablaVac_Id)
AND (Antiguedad = ISNULL(@pAntiguedad,Antiguedad))
 
 RETURN @@Error 

GO

DROP PROCEDURE sueTablaVacRengEliminar
GO
CREATE PROCEDURE sueTablaVacRengEliminar
(
@pTablaVac_Id varchar(5),
@pAntiguedad int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM sueTablaVacReng 
WHERE (TablaVac_Id = dbo.FuncFKsueTablaVacacion(@pTablaVac_Id))
AND (Antiguedad = ISNULL(@pAntiguedad, Antiguedad))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueTabTitulo.sql*/
DROP PROCEDURE sueTabTituloGuardar
GO
CREATE PROCEDURE sueTabTituloGuardar
(
@pTabla_Id int,
@pDescripcion varchar(60),
@pUsuario_Id int = NULL,
@pFechaRegistro qFechaHora,
@pCodigo varchar(20) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM sueTabTitulo WHERE (Tabla_Id = @pTabla_Id)))
BEGIN 
	UPDATE sueTabTitulo
	SET		Descripcion = @pDescripcion,
		Usuario_Id = @pUsuario_Id,
		FechaRegistro = dbo.FechaActual(),
		Codigo =@pCodigo
	WHERE (Tabla_Id = @pTabla_Id)
END 
ELSE 
BEGIN 
	INSERT INTO sueTabTitulo
	(
		Tabla_Id,
		Descripcion,
		Usuario_Id,
		FechaRegistro,
		Codigo
	)
	VALUES 
	(
		@pTabla_Id,
		@pDescripcion,
		@pUsuario_Id,
		dbo.FechaActual(),
		@pCodigo 
	)
END 

GO

DROP PROCEDURE sueTabTituloDatos
GO
CREATE PROCEDURE sueTabTituloDatos
(
@pTabla_Id int
)
AS
SET NOCOUNT ON 

SELECT sueTabTitulo.Tabla_Id, sueTabTitulo.Descripcion, sueTabTitulo.Usuario_Id,
	sueTabTitulo.FechaRegistro,sueTabTitulo.Codigo,GETDATE() as FechaCodigo
FROM sueTabTitulo 
WHERE (Tabla_Id = @pTabla_Id)
select Tabla_Id, Fila, Valor,Ver from sueTabla
where Tabla_Id=@pTabla_Id
 RETURN @@Error 

GO

DROP PROCEDURE sueTabTituloEliminar
GO
CREATE PROCEDURE sueTabTituloEliminar
(
@pTabla_Id int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM sueTabTitulo 
WHERE (Tabla_Id = ISNULL(@pTabla_Id, Tabla_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueTareas.sql*/
DROP PROCEDURE sueTareasGuardar
GO
CREATE PROCEDURE sueTareasGuardar
(
@pTarea_Id varchar(5),
@pTarea_Id_Nuevo varchar(5),
@pDescripcion varchar(100),
@pInactivo Sino,
@pPosteado Sino,
@pUsuario_Id int = NULL,
@pEmpresas int =null
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM sueTareas WHERE (Tarea_Id = @pTarea_Id)))
BEGIN 
	UPDATE sueTareas
	SET		@lIdentidad = sueTareas,
		Tarea_Id = @pTarea_Id_Nuevo,
		Descripcion = @pDescripcion,
		Inactivo = @pInactivo,
		Posteado = @pPosteado,
		Usuario_Id = @pUsuario_Id,
		Empresa_Id = @pEmpresas
	WHERE (Tarea_Id = @pTarea_Id)
END 
ELSE 
BEGIN 
	INSERT INTO sueTareas
	(
		Tarea_Id,
		Descripcion,
		Inactivo,
		Posteado,
		Usuario_Id,
		Empresa_Id
	)
	VALUES 
	(
		@pTarea_Id,
		@pDescripcion,
		@pInactivo,
		@pPosteado,
		@pUsuario_Id,
		@pEmpresas
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE sueTareasDatos
GO
CREATE PROCEDURE sueTareasDatos
(
@pTarea_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT sueTareas.sueTareas, sueTareas.Tarea_Id, sueTareas.Descripcion, sueTareas.Inactivo,
	sueTareas.Posteado, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, sueTareas.Empresa_Id,
	cast(case when sueTareas.Empresa_Id is null then 1 else 0 end as bit) as PTodasEmpresas
FROM sueTareas 
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = sueTareas.Usuario_Id)
WHERE (Tarea_Id = @pTarea_Id)
 


  Declare @pidentity bigint= dbo.FuncFKsueTareas(@pTarea_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'sueTareas'
 RETURN @@Error 

GO

DROP PROCEDURE sueTareasEliminar
GO
CREATE PROCEDURE sueTareasEliminar
(
@pTarea_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM sueTareas 
WHERE (Tarea_Id = @pTarea_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKsueTareas
GO

CREATE FUNCTION FuncFKsueTareas
(
@pTarea_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = sueTareas FROM sueTareas WHERE 
	Tarea_Id = @pTarea_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueTerminada.sql*/
DROP PROCEDURE sueTerminadaGuardar
GO
CREATE PROCEDURE sueTerminadaGuardar
(
@psueLiquidacion bigint,
@pLegajo int,
@pConcepto_Id int,
@pDato QCantidad,
@pDato2 QCantidad,
@pImporte qMonedaD2,
@pSigno smallint
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM sueTerminada WHERE (sueLiquidacion = @psueLiquidacion) AND 
	(Legajo = dbo.FuncFKsuePersonal(@pLegajo)) AND (Concepto_Id = dbo.FuncFKsueConceptos(@pConcepto_Id))))
BEGIN 
	UPDATE sueTerminada
	SET		Dato = @pDato,
		Dato2 = @pDato2,
		Importe = @pImporte,
		Signo = @pSigno
	WHERE (sueLiquidacion = @psueLiquidacion) AND (Legajo = dbo.FuncFKsuePersonal(@pLegajo)) AND 
		(Concepto_Id = dbo.FuncFKsueConceptos(@pConcepto_Id))
END 
ELSE 
BEGIN 
	INSERT INTO sueTerminada
	(
		sueLiquidacion,
		Legajo,
		Concepto_Id,
		Dato,
		Dato2,
		Importe,
		Signo
	)
	VALUES 
	(
		@psueLiquidacion,
		dbo.FuncFKsuePersonal(@pLegajo),
		dbo.FuncFKsueConceptos(@pConcepto_Id),
		@pDato,
		@pDato2,
		@pImporte,
		@pSigno
	)
END 

GO

DROP PROCEDURE sueTerminadaDatos
GO
CREATE PROCEDURE sueTerminadaDatos
(
@psueLiquidacion bigint,
@pLegajo int = NULL ,
@pConcepto_Id int = NULL
)
AS
SET NOCOUNT ON 

SELECT sueTerminada.sueLiquidacion, suePersonal.Legajo, suePersonal.ApellidoPaterno + ',' +
	suePersonal.ApellidoMaterno +','+ suePersonal.Nombres as DescripcionPersonal, 
	sueConceptos.Concepto_Id, 	sueConceptos.Descripcion as DescripcionConceptos, 
	sueTerminada.Dato, sueTerminada.Dato2, sueTerminada.Importe,
	sueTerminada.Signo
FROM sueTerminada 
INNER JOIN sueLiquidacion  ON (sueLiquidacion.sueLiquidacion = sueTerminada.sueLiquidacion)
INNER JOIN suePersonal  ON (suePersonal.genEntidades = sueTerminada.Legajo)
INNER JOIN sueConceptos  ON (sueConceptos.sueConceptos = sueTerminada.Concepto_Id)
WHERE 
sueLiquidacion.sueLiquidacion = @psueLiquidacion
AND suePersonal.Legajo = ISNULL(@pLegajo,suePersonal.Legajo) 
AND sueConceptos.Concepto_Id = ISNULL(@pConcepto_Id,sueConceptos.Concepto_Id)
 
RETURN @@Error 

GO

DROP PROCEDURE sueTerminadaEliminar
GO
CREATE PROCEDURE sueTerminadaEliminar
(
@psueLiquidacion bigint,
@pLegajo int = NULL,
@pConcepto_Id int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM sueTerminada 
WHERE 
sueLiquidacion = @psueLiquidacion 
AND Legajo = case when @pLegajo is null then Legajo else dbo.FuncFKsuePersonal(@pLegajo) end
AND Concepto_Id = case when @pConcepto_Id IS NULL THEN Concepto_Id ELSE dbo.FuncFKsueConceptos(@pConcepto_Id) END
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueTerminadaRetro.sql*/
DROP PROCEDURE sueTerminadaRetroGuardar
GO
CREATE PROCEDURE sueTerminadaRetroGuardar
(
@psueLiquidacion bigint,
@pLegajo int,
@pConcepto_Id int,
@pAnioRetro int,
@pMesRetro int,
@pImporte qMonedaD2
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM sueTerminadaRetro WHERE (sueLiquidacion = @psueLiquidacion) AND 
	(Legajo = dbo.FuncFKsuePersonal(@pLegajo)) AND 
	(Concepto_Id = dbo.FuncFKsueConceptos(@pConcepto_Id)) AND 
	(AnioRetro = @pAnioRetro) AND 
	(MesRetro = @pMesRetro)))
BEGIN 
	UPDATE sueTerminadaRetro
	SET		Importe = @pImporte
	WHERE (sueLiquidacion = @psueLiquidacion) AND 
		(Legajo =  dbo.FuncFKsuePersonal(@pLegajo)) AND 
		(Concepto_Id = dbo.FuncFKsueConceptos(@pConcepto_Id)) AND 
		(AnioRetro = @pAnioRetro) AND 
		(MesRetro = @pMesRetro)
END 
ELSE 
BEGIN 
	INSERT INTO sueTerminadaRetro
	(
		sueLiquidacion,
		Legajo,
		Concepto_Id,
		AnioRetro,
		MesRetro,
		Importe
	)
	VALUES 
	(
		@psueLiquidacion,
		dbo.FuncFKsuePersonal(@pLegajo),
		dbo.FuncFKsueConceptos(@pConcepto_Id),
		@pAnioRetro,
		@pMesRetro,
		@pImporte
	)
END 

GO

DROP PROCEDURE sueTerminadaRetroDatos
GO
CREATE PROCEDURE sueTerminadaRetroDatos
(
@psueLiquidacion bigint,
@pLegajo int,
@pConcepto_Id int,
@pAnioRetro int,
@pMesRetro int
)
AS
SET NOCOUNT ON 

SELECT sueTerminada.sueLiquidacion, suePersonal.Legajo, sueConceptos.Concepto_Id, 
	sueTerminadaRetro.AnioRetro, sueTerminadaRetro.MesRetro, sueTerminadaRetro.Importe
FROM sueTerminadaRetro 
INNER JOIN sueTerminada  ON (sueTerminada.sueLiquidacion = sueTerminadaRetro.sueLiquidacion) AND 
	(sueTerminada.Legajo = sueTerminadaRetro.Legajo) AND 
	(sueTerminada.Concepto_Id = sueTerminadaRetro.Concepto_Id)
INNER JOIN suePersonal ON  suePersonal.genEntidades = sueTerminada.Legajo 
INNER JOIN sueConceptos ON  sueConceptos.sueConceptos = sueTerminada.Concepto_Id
WHERE (sueTerminada.sueLiquidacion = @psueLiquidacion)
AND (suePersonal.Legajo = @pLegajo)
AND (sueConceptos.Concepto_Id = @pConcepto_Id)
AND (AnioRetro = @pAnioRetro)
AND (MesRetro = @pMesRetro)
 
 RETURN @@Error 

GO

DROP PROCEDURE sueTerminadaRetroEliminar
GO
CREATE PROCEDURE sueTerminadaRetroEliminar
(
@psueLiquidacion bigint,
@pLegajo INT = NULL,
@pConcepto_Id int = NULL,
@pAnioRetro int = NULL,
@pMesRetro int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM sueTerminadaRetro 
WHERE 
(sueLiquidacion = @psueLiquidacion)
AND Legajo = case when @pLegajo is null then Legajo else dbo.FuncFKsuePersonal(@pLegajo) end
AND Concepto_Id = case when @pConcepto_Id IS NULL THEN Concepto_Id ELSE dbo.FuncFKsueConceptos(@pConcepto_Id) END
AND (AnioRetro = ISNULL(@pAnioRetro, AnioRetro))
AND (MesRetro = ISNULL(@pMesRetro, MesRetro))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueTipoPago.sql*/
DROP PROCEDURE sueTipoPagoGuardar
GO
CREATE PROCEDURE sueTipoPagoGuardar
(
@pTipoPago_Id varchar(5),
@pTipoPago_Id_Nueva varchar(5),
@pDescripcion varchar(60),
@pEmpresa_Id int = NULL,
@pInactivo Sino,
@pPosteado Sino,
@pUsuario_Id int
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM sueTipoPago WHERE @pTipoPago_Id=TipoPago_Id))
BEGIN 
	UPDATE sueTipoPago
	SET		@lIdentidad = sueTipoPago,
		TipoPago_Id = @pTipoPago_Id_Nueva,
		Descripcion = @pDescripcion,
		Empresa_Id = @pEmpresa_Id,
		Inactivo = @pInactivo,
		Posteado = @pPosteado,
		Usuario_Id = @pUsuario_Id
	WHERE 
	TipoPago_Id=@pTipoPago_Id
END 
ELSE 
BEGIN 
	INSERT INTO sueTipoPago
	(
		TipoPago_Id,
		Descripcion,
		Empresa_Id,
		Inactivo,
		Posteado,
		Usuario_Id
	)
	VALUES 
	(
		@pTipoPago_Id,
		@pDescripcion,
		@pEmpresa_Id,
		@pInactivo,
		@pPosteado,
		@pUsuario_Id
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE sueTipoPagoDatos
GO
create procedure sueTipoPagoDatos
(
@pTipoPago_Id varchar(5)
)
as
select sueTipoPago, TipoPago_Id, Descripcion, Empresa_Id, Inactivo, Posteado, Usuario_Id ,
cast(case when sueTipoPago.Empresa_Id is null then 1 else 0 end as bit) as PTodasEmpresas
from sueTipoPago
where TipoPago_Id=@pTipoPago_Id
 Declare @pidentity bigint= dbo.FuncFKsueTipoPago(@pTipoPago_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'sueTipoPago'
 RETURN @@Error 
 go

 drop procedure sueTipoPagoEliminar
 go
 create procedure sueTipoPagoEliminar
 (
 @pTipoPago_Id varchar(5)
 )
 as
 delete sueTipoPago where TipoPago_Id=@pTipoPago_Id
 return @@Error
 go

 DROP FUNCTION FuncFKsueTipoPago
GO

CREATE FUNCTION FuncFKsueTipoPago
(
@pTipoPago_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = sueTipoPago FROM sueTipoPago WHERE 
	TipoPago_Id = @pTipoPago_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueVacCorresponden.sql*/
DROP PROCEDURE sueVacCorrespondenGuardar
GO
CREATE PROCEDURE sueVacCorrespondenGuardar
(
@pLegajo int,
@pAnio int,
@pDias int,
@pSaldo int=null
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM sueVacCorresponden WHERE (Legajo = dbo.FuncFksuePersonal(@pLegajo)) AND (Anio = @pAnio)))
BEGIN 
	UPDATE sueVacCorresponden
	SET		Dias = @pDias, Saldo=isnull(@pSaldo,Saldo)
	WHERE (Legajo = dbo.FuncFksuePersonal(@pLegajo)) AND (Anio = @pAnio)
END 
ELSE 
BEGIN 
	INSERT INTO sueVacCorresponden
	(
		Legajo,
		Anio,
		Dias,
		Saldo
	)
	VALUES 
	(
		dbo.FuncFksuePersonal(@pLegajo),
		@pAnio,
		@pDias,
		ISNULL(@pSaldo,@pDias)
	)
END 

GO

DROP PROCEDURE sueVacCorrespondenDatos
GO
CREATE PROCEDURE sueVacCorrespondenDatos
(
@pLegajo int,
@pAnio int,
@pEmpresa_Id Int
)
AS
SET NOCOUNT ON 

SELECT suePersonal.Legajo, suePersonal.ApellidoPaterno+','+ suePersonal.ApellidoMaterno+','+
	suePersonal.Nombres as DescripcionPersonal, 
	sueVacCorresponden.Anio, sueVacCorresponden.Dias,Saldo
FROM sueVacCorresponden 
INNER JOIN suePersonal  ON (suePersonal.genEntidades = sueVacCorresponden.Legajo)
WHERE (suePersonal.Legajo = @pLegajo)
AND (Anio = @pAnio) and 
suePersonal.Empresa_Id = @pEmpresa_Id
 
 RETURN @@Error 

GO

DROP PROCEDURE sueVacCorrespondenEliminar
GO
CREATE PROCEDURE sueVacCorrespondenEliminar
(
@pAnio int ,
@pLegajo int = NULL, 
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 

DELETE FROM sueVacCorresponden 
WHERE (@pLegajo is null or Legajo =  dbo.FuncFksuePersonal(@pLegajo))
AND (Anio = @pAnio) and 
Exists(select 1 from suePersonal where suePersonal.genEntidades = sueVacCorresponden.Legajo and 
suePersonal.Empresa_Id =  @pEmpresa_Id)
 
 RETURN @@Error 

GO

-- sueVacCorrespondenDatosRango 2021,373,1000,1
drop procedure sueVacCorrespondenDatosRango
go
create procedure sueVacCorrespondenDatosRango
(
@pAnio int,
@pLegajoDesde int,
@pLegajoHasta int, 
@pEmpresa_Id Int
)
as
if not LEN(cast(@pAnio as char(4)))=4
BEGIN
	set @pAnio=year(getdate())
end
select @pAnio as Anio, @pLegajoDesde as LegajoDesde, @pLegajoHasta as LegajoHasta

select suePersonal.Legajo, suePersonal.ApellidoPaterno+','+suePersonal.ApellidoMaterno+','+suePersonal.Nombres as DescripcionLegajo, 
isnull(sueVacCorresponden.Anio,@pAnio) as Anio,
isnull(sueVacCorresponden.Dias, (SELECT Dias FROM sueTablaVacReng  
		WHERE 
		Antiguedad = (
			SELECT MIN(Antiguedad) Ant FROM sueTablaVacReng
			INNER JOIN sueTablaVacacion ON sueTablaVacacion.sueTablaVacacion = sueTablaVacReng.TablaVac_Id
			WHERE Antiguedad >= (DATEDIFF(YEAR,DATEADD(MONTH,-suePersonal.MesesReconocidos, DATEADD(YY,-suePersonal.AniosReconocidos,suePersonal.FechaIngreso)), 
				cast(@pAnio as char(4))+'1231'))))) as Dias,
isnull(sueVacCorresponden.Saldo, (SELECT Dias FROM sueTablaVacReng  
		WHERE Antiguedad = (
			SELECT MIN(Antiguedad) Ant FROM sueTablaVacReng
			INNER JOIN sueTablaVacacion ON sueTablaVacacion.sueTablaVacacion = sueTablaVacReng.TablaVac_Id
			WHERE Antiguedad >= (DATEDIFF(YEAR,DATEADD(MONTH,-suePersonal.MesesReconocidos,DATEADD(YY,-suePersonal.AniosReconocidos,suePersonal.FechaIngreso)),
				cast(@pAnio as char(4))+'1231'))))) as Saldo 
From suePersonal
inner join suePersConvenio on suePersConvenio.Legajo=suePersonal.genEntidades and 
	cast(@pAnio as char(4))+'1231' BETWEEN suePersConvenio.FechaDesde and suePersConvenio.FechaHasta
inner join sueConvenio on sueConvenio.sueConvenio=suePersConvenio.Convenio_Id
inner join sueTablaVacacion on sueTablaVacacion=sueConvenio.TablaVac_Id
left join sueVacCorresponden on suePersonal.genEntidades=sueVacCorresponden.Legajo And sueVacCorresponden.Anio = @pAnio
--left join sueVacTomadas on sueVacTomadas.Anio=@pAnio and sueVacTomadas.Legajo=suePersonal.genEntidades
WHERE
	suePersonal.Legajo Between @pLegajoDesde And @pLegajoHasta And
	(suePersonal.FechaBaja IS NULL OR 
	YEAR(suePersonal.FechaBaja)>= @pAnio) and 
	YEAR(suePersonal.FechaIngreso) <= @pAnio and 
	suePersonal.Empresa_Id = @pEmpresa_Id 
	--And isNull(sueVacCorresponden.Saldo, 0) > 0
	ORDER BY 1
go



/*create procedure sueVacCorrespondenDatosRango
(
@pAnio int,
@pLegajoDesde int,
@pLegajoHasta int
)
as
if not LEN(cast(@pAnio as char(4)))=4
BEGIN
set @pAnio=year(getdate())
end
select @pAnio as Anio, @pLegajoDesde as LegajoDesde, @pLegajoHasta as LegajoHasta
select suePersonal.Legajo, suePersonal.ApellidoPaterno+','+suePersonal.ApellidoMaterno+','+suePersonal.Nombres as DescripcionLegajo, 
isnull(sueVacCorresponden.Anio,@pAnio) as Anio,
 isnull(sueVacCorresponden.Dias,sueTablaVacReng.Dias) as Dias, isnull(Saldo,sueTablaVacReng.Dias) as Saldo from suePersonal
left join sueVacCorresponden on suePersonal.genEntidades=sueVacCorresponden.Legajo
inner join suePersConvenio on suePersConvenio.Legajo=suePersonal.genEntidades and 
cast(@pAnio as char(4))+'1231' BETWEEN suePersConvenio.FechaDesde and suePersConvenio.FechaHasta
inner join sueConvenio on sueConvenio.sueConvenio=suePersConvenio.Convenio_Id
inner join sueTablaVacacion on sueTablaVacacion=sueConvenio.TablaVac_Id
inner join sueTablaVacReng 
on @pAnio-sueTablaVacReng.Antiguedad=
YEAR(DATEADD(MONTH,-suePersonal.MesesReconocidos,DATEADD(YY,-suePersonal.AniosReconocidos,suePersonal.FechaIngreso)))
and sueTablaVacacion.sueTablaVacacion=sueTablaVacReng.TablaVac_Id
left join sueVacTomadas on sueVacTomadas.Anio=@pAnio and sueVacTomadas.Legajo=suePersonal.genEntidades
go*/


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueVacTomadas.sql*/
DROP PROCEDURE sueVacTomadasGuardar
GO
CREATE PROCEDURE sueVacTomadasGuardar
(
@pLegajo INT,
@pAnio int,
@pFechaDesde qFecha,
@pDias int,
@pFechaHasta qFecha,
@pUsuario_Id int
)
AS
SET NOCOUNT ON 

IF (EXISTS (SELECT 1 FROM sueVacTomadas WHERE (Legajo = dbo.FuncFksuePersonal(@pLegajo)) AND (Anio = @pAnio) AND (FechaDesde = @pFechaDesde)))
BEGIN 

	UPDATE sueVacTomadas 
	SET		
		Dias = @pDias,
		FechaHasta = @pFechaHasta,
		Usuario_Id = @pUsuario_Id
	WHERE (Legajo = dbo.FuncFksuePersonal(@pLegajo)) AND (Anio = @pAnio) AND (FechaDesde = @pFechaDesde)
END 
ELSE 
BEGIN 
	INSERT INTO sueVacTomadas
	(
		Legajo,
		Anio,
		FechaDesde,
		Dias,
		FechaHasta,
		Usuario_Id
	)
	VALUES 
	(
		dbo.FuncFksuePersonal(@pLegajo),
		@pAnio,
		@pFechaDesde,
		@pDias,
		@pFechaHasta,
		@pUsuario_Id
	)

	update sueVacCorresponden set Saldo=Dias-(select sum(Dias) from sueVacTomadas  where sueVacTomadas.Legajo=dbo.FuncFKsuePersonal(@pLegajo) and Anio=@pAnio) where sueVacCorresponden.Legajo=dbo.FuncFKsuePersonal(@pLegajo) and Anio=@pAnio
END 

GO

DROP PROCEDURE sueVacTomadasDatos
GO
CREATE PROCEDURE sueVacTomadasDatos
(
@pLegajo INT,
@pAnio int,
@pFechaDesde qFecha = null
)
AS
SET NOCOUNT ON 

SELECT suePersonal.Legajo, suePersonal.ApellidoPaterno+','+ suePersonal.ApellidoMaterno+','+
	suePersonal.Nombres as DescripcionPersonal, @pAnio as Anio
From suePersonal 
WHERE
	suePersonal.Legajo = @pLegajo

SELECT sueVacTomadas.FechaDesde, sueVacTomadas.Dias, sueVacTomadas.FechaHasta, 
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario
FROM sueVacTomadas 
INNER JOIN suePersonal  ON (suePersonal.genEntidades = sueVacTomadas.Legajo)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = sueVacTomadas.Usuario_Id)
WHERE (suePersonal.Legajo = @pLegajo)
AND (sueVacTomadas.Anio = @pAnio)
AND (sueVacTomadas.FechaDesde = ISNULL(@pFechaDesde,sueVacTomadas.FechaDesde))
 
RETURN @@Error 

GO

drop  procedure sueVacTomadasDatosDetallado
go
create procedure sueVacTomadasDatosDetallado
(
    @pLegajo int,
    @pAnio int
)
AS
if not len(cast(@pAnio as char(4)))=4
BEGIN
set @pAnio=year(getdate())
end
select suePersonal.Legajo, ApellidoPaterno+'; '+ApellidoMaterno+'; '+Nombres as DescripcionLegajo, @pAnio as Anio,
@pAnio-Year(DATEADD(MONTH,suePersonal.MesesReconocidos,DATEADD(YY,suePersonal.AniosReconocidos,suePersonal.FechaIngreso))) as Antiguedad,
suePersonal.FechaIngreso, sueConvenio.Convenio_Id, sueConvenio.Descripcion as DescripcionConvenio, sueVacCorresponden.Dias, sueVacCorresponden.Saldo
from suePersonal
left join sueVacCorresponden on suePersonal.genEntidades=sueVacCorresponden.Legajo and sueVacCorresponden.Anio=@pAnio
left join suePersConvenio on suePersConvenio.Legajo=suePersonal.genEntidades and 
cast(Anio as char(4))+'1231'between suePersConvenio.FechaDesde and suePersConvenio.FechaHasta
left join sueConvenio on sueConvenio.sueConvenio=suePersConvenio.Convenio_Id
 where suePersonal.Legajo=@pLegajo
 select FechaDesde, Dias, FechaHasta from sueVacTomadas where Legajo=dbo.FuncFKsuePersonal(@pLegajo) and sueVacTomadas.Anio=@pAnio
 GO



DROP PROCEDURE sueVacTomadasEliminar
GO
CREATE PROCEDURE sueVacTomadasEliminar
(
@pLegajo INT,
@pAnio int ,
@pFechaDesde qFecha = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM sueVacTomadas 
WHERE (Legajo = dbo.FuncFksuePersonal(@pLegajo))
AND (Anio = @pAnio)
AND (FechaDesde = ISNULL(@pFechaDesde, FechaDesde))
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueVarGlobales.sql*/
DROP PROCEDURE sueVarGlobalesGuardar
GO
CREATE PROCEDURE sueVarGlobalesGuardar
(
@pVarGlobal_Id int,
@pDescripcion varchar(60),
@pPorEmpresa Sino,
@pUsuario_Id int = NULL,
@pCodigo varchar(20)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM sueVarGlobales WHERE (VarGlobal_Id = @pVarGlobal_Id)))
BEGIN 
	UPDATE sueVarGlobales
	SET		Descripcion = @pDescripcion,
		PorEmpresa = @pPorEmpresa,
		Usuario_Id = @pUsuario_Id,
		Codigo=@pCodigo
	WHERE (VarGlobal_Id = @pVarGlobal_Id)
END 
ELSE 
BEGIN 
	INSERT INTO sueVarGlobales
	(
		VarGlobal_Id,
		Descripcion,
		PorEmpresa,
		Usuario_Id,
		Codigo
	)
	VALUES 
	(
		@pVarGlobal_Id,
		@pDescripcion,
		@pPorEmpresa,
		@pUsuario_Id,
		@pCodigo
	)
END 

GO

DROP PROCEDURE sueVarGlobalesDatos
GO
CREATE PROCEDURE sueVarGlobalesDatos
(
@pVarGlobal_Id int
)
AS
SET NOCOUNT ON 

SELECT sueVarGlobales.VarGlobal_Id, sueVarGlobales.Descripcion, sueVarGlobales.PorEmpresa, genUsuarios.Usuario_Id,
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario,sueVarGlobales.Codigo, GETDATE() as FechaCodigo
FROM sueVarGlobales 
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = sueVarGlobales.Usuario_Id)
WHERE (VarGlobal_Id = @pVarGlobal_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE sueVarGlobalesEliminar
GO
CREATE PROCEDURE sueVarGlobalesEliminar
(
@pVarGlobal_Id int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM sueVarGlobales 
WHERE (VarGlobal_Id = ISNULL(@pVarGlobal_Id, VarGlobal_Id))
 
 RETURN @@Error 

GO
drop procedure sueVarGlobalesEditable
go
create procedure sueVarGlobalesEditable
(
@pVarGlobal int
)
as
declare @lEditable bit= case when exists (select 1 from sueLiqVarEmpGlobales where VarGlobal_Id=@pVarGlobal) then 1 else 0 end
set @lEditable= case when @lEditable=1 then 1 else case when exists (select 1 from sueLiqVarGlobales where VarGlobal_Id=@pVarGlobal) then 1 else 0 end end
select @lEditable
GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueVariableGrupoDatos.sql*/

Drop Procedure sueVariableGrupoDatos  
GO
Create Procedure sueVariableGrupoDatos  
(
	@Legajo Int, 
	@Grupo_Id Int
)
AS

Select @Legajo as Legajo, @Grupo_Id as Grupo_Id


SELECT sueConceptos.Concepto_Id
	from suevariable inner join suePersonal ON 
		suevariable.Legajo = suePersonal.genEntidades 
		inner join sueGrupos ON 
		sueGrupos.sueGrupos = suevariable.Grupo_Id
		INNER JOIN sueConceptos ON 
		sueConceptos.sueConceptos = suevariable.Concepto_Id
WHERE
		sueGrupos.Grupo_Id = @Grupo_Id and
		suePersonal.Legajo = @Legajo AND 
		sueConceptos.Inactivo = 0 AND 
		sueConceptos.Posteado = 1
ORDER BY 1

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueVariables.sql*/
DROP PROCEDURE sueVariableGuardar
GO
CREATE PROCEDURE sueVariableGuardar
(
@pLegajo int,
@pGrupo_Id int,
@pConcepto_Id int,
@pUsuario_Id int = NULL,
@pFechaRegistro qFechaHora
)
AS
SET NOCOUNT ON 

	INSERT INTO sueVariable
	(
		Legajo,
		Grupo_Id,
		Concepto_Id,
		Usuario_Id,
		FechaRegistro
	)
	VALUES 
	(
		dbo.FuncFKsuePersonal(@pLegajo),
		dbo.FuncFKsueGrupos( @pGrupo_Id),
		dbo.FuncFKsueConceptos( @pConcepto_Id),
		@pUsuario_Id,
		dbo.FechaActual()
	)

GO

DROP PROCEDURE sueVariableDatos
GO
CREATE PROCEDURE sueVariableDatos
(
@pLegajo int
)
AS
SET NOCOUNT ON 
Select suePersonal.Legajo, suePersonal.Nombres as DescripcionLegajo 
From suePersonal 
Where suePersonal.Legajo = @pLegajo

SELECT sueVariable.Legajo, sueGrupos.Grupo_Id, sueGrupos.Descripcion as DescripcionGrupos, 
sueConceptos.Concepto_Id, sueConceptos.Descripcion as DescripcionConceptos,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, sueVariable.FechaRegistro
FROM sueVariable 
INNER JOIN suePersonal  ON (suePersonal.genEntidades = sueVariable.Legajo)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = sueVariable.Usuario_Id)
left join sueGrupos on sueGrupos.sueGrupos=sueVariable.Grupo_Id
left join sueConceptos on sueConceptos.sueConceptos=sueVariable.Concepto_Id
WHERE (suePersonal.Legajo = @pLegajo)
Order By sueGrupos.Grupo_Id, sueConceptos.Concepto_Id

RETURN @@Error 

GO

DROP PROCEDURE sueVariableEliminar
GO
CREATE PROCEDURE sueVariableEliminar
(
@pLegajo int,
@pGrupo_Id int = NULL,
@pConcepto_Id int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM sueVariable 
WHERE (Legajo = dbo.funcfksuePersonal(@pLegajo))
AND (Grupo_Id = ISNULL(dbo.FuncFKsueGrupos(@pGrupo_Id), Grupo_Id))
AND (Concepto_Id = ISNULL(dbo.FuncFKsueConceptos(@pConcepto_Id), Concepto_Id))
 
 RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueVariablesMasivas.sql*/
drop procedure sueVariablesMasivoDatos
go
create procedure sueVariablesMasivoDatos
(
@pLegajoDesde int,
@pLegajoHasta int,
@pConceptoDesde int,
@pConceptoHasta int,
@pGrupoFuente int=null,
@pGrupoDestino int,
@pEmpresa_Id INT
)
as
select @pLegajoDesde as Legajo_Desde, @pLegajoHasta as Legajo_Hasta, @pConceptoDesde as Concepto_Desde, @pConceptoHasta as Concepto_Hasta,
@pGrupoFuente as Grupo_Fuente, @pGrupoDestino as Grupo_Destino
go

drop procedure sueVariablesMasivoEliminarDatos
go
create procedure sueVariablesMasivoEliminarDatos
(
@pLegajoDesde int,
@pLegajoHasta int,
@pConceptoDesde int,
@pConceptoHasta int,
@pGrupoDesde int,
@pGrupoHasta int
)
as
select @pLegajoDesde as Legajo_Desde, @pLegajoHasta as Legajo_Hasta, @pConceptoDesde as Concepto_Desde, @pConceptoHasta as Concepto_Hasta,
@pGrupoDesde as Grupo_Desde, @pGrupoHasta as Grupo_Hasta
go

drop procedure sueVariableCopiar
go
create procedure sueVariableCopiar
(
@pLegajoOrigen int,
@pLegajoDesde int,
@pLegajoHasta int,
@pConceptoDesde int,
@pConceptoHasta int,
@pGrupoDesde int,
@pGrupoHasta int
)
as
select @pLegajoOrigen as Legajo_Origen, @pLegajoDesde as Legajo_Desde, @pLegajoHasta as Legajo_Hasta, @pConceptoDesde as Concepto_Desde, @pConceptoHasta as Concepto_Hasta,
@pGrupoDesde as Grupo_Desde, @pGrupoHasta as Grupo_Hasta

go

drop procedure sueVariableCopiarGuardar
go
create procedure sueVariableCopiarGuardar
(
@pLegajoOrigen int,
@pLegajoDesde int,
@pLegajoHasta int,
@pConceptoDesde int,
@pConceptoHasta int,
@pGrupoDesde int,
@pGrupoHasta int,
@pUsuario_Id bigint,
@pEmpresa_Id Int
)
as
insert into sueVariable (Legajo, Concepto_Id, Grupo_Id, Usuario_Id, FechaRegistro) (
select suePersonal.genEntidades,sueConceptos.sueConceptos, sueGrupos.sueGrupos, @pUsuario_Id, dbo.FechaActual() from sueConceptos
inner join sueGrupos on sueGrupos.Grupo_Id between @pGrupoDesde and @pGrupoHasta
inner join suePersonal on suePersonal.Legajo between @pLegajoDesde and @pLegajoHasta 
where 
suePersonal.Empresa_Id =  @pEmpresa_Id and 
not exists (select 1 from sueVariable where sueConceptos.sueConceptos=sueVariable.Concepto_Id and
suePersonal.genEntidades=sueVariable.Legajo and sueGrupos.sueGrupos=sueVariable.Grupo_Id) and
sueConceptos.Concepto_Id between @pConceptoDesde and @pConceptoHasta
and exists (select 1 from sueVariable 
inner join suePersonal veripers on veripers.genEntidades=sueVariable.Legajo
inner join sueConceptos veriConce on veriConce.sueConceptos=sueVariable.Concepto_Id
inner join sueGrupos veriGrupo on veriGrupo.sueGrupos=sueVariable.Grupo_Id
where veripers.Legajo=@pLegajoOrigen and 
veriConce.sueConceptos =sueConceptos.sueConceptos and 
veriGrupo.sueGrupos =sueGrupos.sueGrupos)
)
go

drop procedure sueVariablesMasivoGuardar
go
create procedure sueVariablesMasivoGuardar
(
@pLegajoDesde int,
@pLegajoHasta int,
@pConceptoDesde int,
@pConceptoHasta int,
@pGrupoFuente int=null,
@pGrupoDestino int,
@pUsuario_Id bigint,
@pEmpresa_Id Int
)
as
insert into sueVariable (Legajo, Grupo_Id, Concepto_Id, Usuario_Id, FechaRegistro)
select suePersonal.genEntidades, dbo.FuncFKsueGrupos(@pGrupoDestino) , sueConceptos.sueConceptos, @pUsuario_Id, dbo.FechaActual() from suePersonal
inner join sueConceptos on sueConceptos.Concepto_Id between @pConceptoDesde and @pConceptoHasta

where 
Legajo between @pLegajoDesde and @pLegajoHasta and 
suePersonal.Empresa_Id = @pEmpresa_Id and 
not exists (select 1 from sueVariable where sueVariable.Legajo=suePersonal.genEntidades and sueConceptos.sueConceptos=sueVariable.Concepto_Id and dbo.FuncFKsueGrupos(@pGrupoDestino)=sueVariable.Grupo_Id) 
go


drop procedure sueVariablesMasivoEliminar
go
create procedure sueVariablesMasivoEliminar
(
@pLegajoDesde int,
@pLegajoHasta int,
@pConceptoDesde int,
@pConceptoHasta int,
@pGrupoDesde int,
@pGrupoHasta int,
@pEmpresa_Id Int
)
as
delete Variable from sueVariable Variable 
inner join suePersonal on suePersonal.genEntidades=Variable.Legajo 
inner join sueGrupos on sueGrupos.sueGrupos=Variable.Grupo_Id
inner join sueConceptos on sueConceptos.sueConceptos=Variable.Concepto_Id
where suePersonal.Legajo between @pLegajoDesde and @pLegajoHasta and
sueGrupos.Grupo_Id between @pGrupoDesde and @pGrupoHasta and
sueConceptos.Concepto_Id between @pConceptoDesde and @pConceptoHasta and 
suePersonal.Empresa_Id = @pEmpresa_Id
go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueVezActiva.sql*/
DROP PROCEDURE sueVezActivaGuardar
GO
CREATE PROCEDURE sueVezActivaGuardar
(
@pEmpresa_Id int,
@pAnio int,
@pMes int,
@pQuin int,
@pDecena int,
@pSemana int,
@pVez int, 
@pGrupo_Id Int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM sueVezActiva WHERE (Empresa_Id = @pEmpresa_Id)))
BEGIN 
	UPDATE sueVezActiva
	SET	Anio = @pAnio,
		Mes = @pMes,
		Quin = @pQuin,
		Decena = @pDecena,
		Semana = @pSemana,
		Vez = @pVez, 
		Grupo_Id = dbo.FuncFKsueGrupos(@pGrupo_Id)
	WHERE (Empresa_Id = @pEmpresa_Id)
END 
ELSE 
BEGIN 
	INSERT INTO sueVezActiva
	(
		Empresa_Id,
		Anio,
		Mes,
		Quin,
		Decena,
		Semana,
		Vez, 
		Grupo_Id
	)
	VALUES 
	(
		@pEmpresa_Id,
		@pAnio,
		@pMes,
		@pQuin,
		@pDecena,
		@pSemana,
		@pVez, 
		dbo.FuncFKsueGrupos(@pGrupo_Id)
	)
END 

GO

DROP PROCEDURE sueVezActivaDatos
GO
CREATE PROCEDURE sueVezActivaDatos
(
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 

SELECT sueVezActiva.Empresa_Id, sueVezActiva.Anio, sueVezActiva.Mes, sueVezActiva.Quin,
	sueVezActiva.Decena, sueVezActiva.Semana, sueVezActiva.Vez, 
		sueGrupos.Grupo_Id, sueGrupos.Descripcion, isnull(sueGrupos.Periodo_Id,'') Periodo_Id
FROM sueVezActiva 
	inner join sueGrupos ON  sueGrupos.sueGrupos = sueVezActiva.Grupo_Id
WHERE (sueVezActiva.Empresa_Id = @pEmpresa_Id)
 
RETURN @@Error 

GO

DROP PROCEDURE sueVezActivaEliminar
GO
CREATE PROCEDURE sueVezActivaEliminar
(
@pEmpresa_Id int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM sueVezActiva 
WHERE (Empresa_Id = ISNULL(@pEmpresa_Id, Empresa_Id))
 
 RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\sueXmlRecibo.sql*/

-- sueXmlReciboDatos  12744,40, 'E'

DROP PROCEDURE sueXmlReciboDatos 
GO
CREATE PROCEDURE sueXmlReciboDatos 
(
	@pSueliquidacion bigint,
	@Legajo Int ,
	@pTipoNomina Char(1)
)

as

DECLARE @Empresa_Id int

SET @Empresa_Id = (Select Empresa_Id from conAsientos Where conAsientos.conAsientos= @pSueLiquidacion)

-- Comprobante
SELECT '3.3' as Version, conAsientos.conAsientos Asiento_Id, 
		sueNominaCfdi.Folio, 'NOM' Serie,
		 dbo.FechaActual() as Fecha , conAsientos.FechaRegistro ,
		'PUE' MetodoPago, 
		ISNULL(sueNominaCfdi.noCertificado,(SELECT cValor FROM genGlobales WHERE NOMBRE_VAR = 'VENNOCERTIFICADO' and Empresa_Id=@Empresa_Id)) AS NoCertificado, 
		convert(VarChar(max),(SELECT mValor FROM genGlobales where Nombre_var = 'GENWSAAPUBLICKEY' and Empresa_Id=@Empresa_Id)) AS Certificado,
		SUM(case when sueTerminada.Importe*sueTerminada.Signo < 0 then 0 else  sueTerminada.Importe*sueTerminada.Signo end)  as SubTotal,
		SUM(case when sueTerminada.Importe*sueTerminada.Signo > 0 then 0 else  -sueTerminada.Importe*sueTerminada.Signo end)   as Descuento, 		
		genMonedas.CodigoFiscal as Moneda, genMonedas.Descripcion as DescripcionMoneda, 
		genMonedas.Moneda_Id,
		SUM(sueTerminada.Importe*sueTerminada.Signo) as Total,
		1 as TipoCambio,
		'N' as TipoDeComprobante, 
		'99' as  FormaPago, 
		genSucursalesEmpr.CodigoPostal as LugarExpedicion, ' ' Confirmacion
from sueLiquidacion INNER JOIN conAsientos ON
sueLiquidacion.sueLiquidacion = conAsientos.conAsientos
inner join genAsiSegmentos ON
genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
INNER JOIN sueTerminada ON 
sueTerminada.sueLiquidacion = sueLiquidacion.sueLiquidacion
INNER JOIN suePersonal ON
suePersonal.genEntidades = sueTerminada.Legajo 
left OUTER JOIN sueNominaCfdi ON 
sueNominaCfdi.sueLiquidacion =  sueLiquidacion.sueLiquidacion AND 
sueNominaCfdi.Legajo =  suePersonal.genEntidades
INNER JOIN genMonedas ON 
genMonedas.genMonedas = conAsientos.Moneda_Id
LEFT OUTER JOIN genSucursalesEmpr ON
conAsientos.Sucursal = genSucursalesEmpr.genSucursalesEmpr
Where
sueTerminada.sueLiquidacion = @pSueliquidacion and 
suePersonal.Legajo = @Legajo
GROUP BY conAsientos.conAsientos , sueNominaCfdi.Folio,	 conAsientos.FechaRegistro , sueNominaCfdi.noCertificado,
		genMonedas.CodigoFiscal , genMonedas.Descripcion , 		genMonedas.Moneda_Id,	genSucursalesEmpr.CodigoPostal 

-- CFDI Relacionados
SELECT '04' as TipoRelacion
	where Exists(select 1 from sueNominaCfdi where
		sueNominaCfdi.sueLiquidacion = @pSueliquidacion and 
		sueNominaCfdi.Legajo = @Legajo and 
		sueNominaCfdi.Anulada = 1)
	

-- CFDI RELACIONADO
SELECT '04' TipoRelacion, MAX(sueNominaCfdi.UUID) AS UUID
FROM sueNominaCfdi
	Where 
		sueNominaCfdi.sueLiquidacion = @pSueliquidacion and 
		sueNominaCfdi.Legajo = @Legajo and 
		sueNominaCfdi.Anulada = 1 
HAVING 	MAX(sueNominaCfdi.UUID) IS NOT NULL	

-- Emisor

SELECT 
genEmpresas.Cuit AS Rfc,
genEmpresas.RazonSocial AS Nombre,
genEmpresas.Regimen AS RegimenFiscal,
Convert(VarChar(max),(select mValor from genGlobales where Nombre_var = 'GENWSAAPRIVATEKEY' and Empresa_Id=@Empresa_Id)) AS EmpPrivateKey,
genEmpresas.Calle,
genEmpresas.NoExterior,
genEmpresas.NoInterior,
genEmpresas.Colonia,
genEmpresas.Localidad,
genEmpresas. Municipio,
genProvincias.CodFiscal AS Provincia,
genPaises.CodFiscal AS Pais,
genEmpresas.CodigoPostal, 
genEmpresas.CodLocalidad, 
genEmpresas.CodColonia, 
genEmpresas.CodMunicipio
from genEmpresas inner join conAsientos ON 
genEmpresas.genEmpresas = conAsientos.Empresa_Id 
LEFT OUTER JOIN genProvincias ON 
genEmpresas.Provincia_Id =genProvincias.genProvincias
LEFT OUTER JOIN genPaises ON 
genPaises.genPaises = genEmpresas.Pais_Id
Where
conAsientos.conAsientos = @pSueLiquidacion


--- receptor
SELECT genEntidades.CUIT AS Rfc, 
	suePersonal.ApellidoPaterno + ' '+suePersonal.ApellidoMaterno+' '+
	suePersonal.Nombres  as Nombre, 
	genPaises.CodFiscal AS ResidenciaFiscal,
	' ' AS NumRegIdTrib,
	'P01' as UsoCfdi, 
	suePersDomicilio.Direccion1 Calle , suePersDomicilio.NroExterior NroExterior, 
	suePersDomicilio.NroInterior NroInterior, suePersDomicilio.Direccion2 Colonia,
	suePersDomicilio.Localidad AS Localidad,
	genProvincias.CodFiscal as Provincia, genPaises.CodFiscal as Pais, 
	suePersDomicilio.CodigoPostal as CodigoPostal
from sueLiquidacion INNER JOIN
	suePersonal ON
		EXISTS(SELECT 1 FROM sueTerminada where
			sueTerminada.sueLiquidacion = sueLiquidacion.sueLiquidacion and 
			sueTerminada.Legajo = suePersonal.genEntidades)
INNER JOIN suePersDomicilio ON
suePersonal.genEntidades = suePersDomicilio.Legajo AND 
sueLiquidacion.FechaFinal between suePersDomicilio.FechaDesde AND suePersDomicilio.FechaHasta
INNER JOIN genEntidades ON
genEntidades.genEntidades = suePersonal.genEntidades
CROSS JOIN genInstalacion
INNER JOIN genPaises ON 
genInstalacion.Dominio_Id = genPaises.Dominio_Id
INNER JOIN genProvincias ON
genProvincias.genProvincias = suePersDomicilio.Provincia_id
Where
sueLiquidacion.sueLiquidacion = @psueLiquidacion AND 
suePersonal.Legajo = @Legajo


SELECT 1 as Renglon, 
	'84111505' as ClaveProdServ,
	'' as NoIdentificacion, 
	1 AS Cantidad,
	'ACT' AS ClaveUnidad,
    ' ' Descripcion, 			
	SUM(case when sueTerminada.Importe*sueTerminada.Signo < 0 then 0 else  sueTerminada.Importe*sueTerminada.Signo end)   AS ValorUnitario,
	SUM(case when sueTerminada.Importe*sueTerminada.Signo > 0 then 0 else  -sueTerminada.Importe*sueTerminada.Signo end)   as Descuento, 		
	SUM(case when sueTerminada.Importe*sueTerminada.Signo < 0 then 0 else  sueTerminada.Importe*sueTerminada.Signo end)   AS Importe 
from sueLiquidacion INNER JOIN conAsientos ON
sueLiquidacion.sueLiquidacion = conAsientos.conAsientos
inner join genAsiSegmentos ON
genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
INNER JOIN sueTerminada ON 
sueTerminada.sueLiquidacion = sueLiquidacion.sueLiquidacion
INNER JOIN genMonedas ON 
genMonedas.genMonedas = conAsientos.Moneda_Id
INNER JOIN suePersonal ON
suePersonal.genEntidades = sueTerminada.Legajo
LEFT OUTER JOIN genSucursalesEmpr ON
conAsientos.Sucursal = genSucursalesEmpr.genSucursalesEmpr
Where
sueTerminada.sueLiquidacion = @pSueliquidacion and 
suePersonal.Legajo = @Legajo


-- Complemento
SELECT '1.2' as Version, @pTipoNomina as TipoNomina, sueLiquidacion.FechaPago, 
sueliquidacion.FechaInicial, sueliquidacion.FechaFinal, 
 Convert(int, case when 
ISNULL((select sum(sueTerminada.Dato * sueTerminada.Signo)
	from sueConceptos , sueConceptosPropValor , sueTerminada
	where 
		sueTerminada.Concepto_Id = sueConceptos.sueConceptos and 
		sueConceptosPropValor.Concepto_Id = sueConceptos.sueConceptos and 
		sueConceptosPropValor.Propiedad = 3 and 
		sueConceptosPropValor.SiNo = 1 and 
		sueTerminada.sueLiquidacion = sueLiquidacion.sueLiquidacion and
		sueTerminada.Legajo = suePersonal.genEntidades),0) = 0 
	then 
	DateDiff(dd, sueLiquidacion.FechaInicial, sueLiquidacion.FechaFinal)+1 else
	ISNULL((select sum(sueTerminada.Dato* sueTerminada.Signo)
	from sueConceptos , sueConceptosPropValor , sueTerminada
	where 
		sueTerminada.Concepto_Id = sueConceptos.sueConceptos and 
		sueConceptosPropValor.Concepto_Id = sueConceptos.sueConceptos and 
		sueConceptosPropValor.Propiedad = 3 and 
		sueConceptosPropValor.SiNo = 1 and 
		sueTerminada.sueLiquidacion = sueLiquidacion.sueLiquidacion and
		sueTerminada.Legajo = suePersonal.genEntidades),0) end) 	as NumDiasPagado, 
sum(case when sueTerminada.Importe*sueTerminada.signo > 0 And sueConceptos.TipoOtro IS NULL then sueTerminada.Importe*sueTerminada.signo else 0 end ) TotalPercepciones,
sum(case when sueTerminada.Importe*sueTerminada.signo < 0 then -sueTerminada.Importe*sueTerminada.signo else 0 end ) TotalDeducciones,
sum(case when sueTerminada.Importe*sueTerminada.signo > 0 And sueConceptos.TipoOtro IS NOT NULL then sueTerminada.Importe*sueTerminada.signo else 0 end ) TotalOtros
FROM sueliquidacion INNER JOIN sueTerminada ON 
sueTerminada.sueliquidacion = sueliquidacion.sueliquidacion
INNER JOIN sueConceptos ON
sueConceptos.sueConceptos = sueTerminada.Concepto_Id
INNER JOIN suePersonal ON suePersonal.genEntidades = sueTerminada.Legajo
inner join conAsientos ON 
	conAsientos.conAsientos =  sueliquidacion.sueliquidacion
Where
	conAsientos.Anulado = 0 AND 
	sueliquidacion.sueliquidacion = @psueliquidacion and 
	suePersonal.Legajo = @Legajo
GROUP BY sueLiquidacion.FechaPago, sueliquidacion.FechaInicial, sueliquidacion.FechaFinal,
sueLiquidacion.sueLiquidacion, suePersonal.genEntidades

-- Emisor

SELECT genSucursalesEmpr.RegPatronal , genEmpresas.NumeroIIBB Curp, ' ' RFCPatronOrigen
from sueLiquidacion inner join suePersonal on
suePersonal.Legajo = @Legajo 
inner join suePersSucursal ON suePersSucursal.Legajo = suePersonal.genEntidades and 
	sueLiquidacion.FechaFinal between suePersSucursal.FechaDesde And suePersSucursal.FechaHasta
INNER JOIN genSucursalesEmpr on 
	genSucursalesEmpr.genSucursalesEmpr =  suePersSucursal.Sucursal
inner join genEmpresas ON genEmpresas.genEmpresas = @Empresa_Id
Where
	sueliquidacion.sueliquidacion = @psueliquidacion 

--  EntidadSNCF 
SELECT ' ' OrigenRecurso, 0.00 MontoRecursoPropio
Where 1 = 2

-- Receptor
-- TODO  SINDICALIZADO FALTA

SELECT suePersonal.NumeroDoc AS CURP, suePersonal.NroSegSocial as NumSeguridadSocial , 
suePersonal.FechaIngreso as FechaInicioRelLaboral, 
Convert(Int,(DateDiff(dd, suePersonal.FechaIngreso, sueliquidacion.FechaFinal)+1)/7) as Antig,
suePersTipoContrato.TipoContrato , 0 Sindicalizado ,
suePersTipoJornada.TipoJornada , suePersTipoRegimen.TipoRegimen, 
suePersonal.Legajo as NumEmpleado, conCentro1.Descripcion as Departamento,
suePuestos.Descripcion as Puesto, suePuestos.RiesgoPuesto , 
CASE WHEN @pTipoNomina = 'E' THEN '99' ELSE sueperiodicidad.CodFiscal END as PeriodicidadPago, 
sueTipoPago.Descripcion as Banco, 
suePersonal.ClaveBancaria as CuentaBancaria, ISNULL(SD.Valor,0) as SalarioBaseCotApor ,
ISNULL(sdi.Valor,0) SalarioDiarioIntegrado, genProvincias.CodFiscal as ClaveEntFed

From sueLiquidacion inner join suePersonal on
suePersonal.Legajo = @Legajo 
inner join suePersTipoContrato ON suePersTipoContrato.Legajo = suePersonal.genEntidades and 
	sueLiquidacion.FechaFinal between suePersTipoContrato.FechaDesde And suePersTipoContrato.FechaHasta
inner join suePersTipoJornada ON suePersTipoJornada.Legajo = suePersonal.genEntidades and 
	sueLiquidacion.FechaFinal between suePersTipoJornada.FechaDesde And suePersTipoJornada.FechaHasta
inner join suePersTipoRegimen ON suePersTipoRegimen.Legajo = suePersonal.genEntidades and 
	sueLiquidacion.FechaFinal between suePersTipoRegimen.FechaDesde And suePersTipoRegimen.FechaHasta
inner join (SELECT suePersContableDatos.Legajo, MAX(suePersContableDatos.Centro1_id) AS Centro1_id 
FROM suePersContableDatos INNER JOIN  suePersContable ON
suePersContableDatos.Legajo = suePersContable.Legajo and 
suePersContableDatos.FechaDesde = suePersContable.FechaDesde
GROUP BY suePersContableDatos.Legajo ) as suePersContableDatos ON
suePersContableDatos.Legajo = suePersonal.genEntidades
inner join conCentro1 ON conCentro1.conCentro1 = suePersContableDatos.Centro1_id
inner join suePersPuestos ON suePersPuestos.Legajo = suePersonal.genEntidades and 
	sueLiquidacion.FechaFinal between suePersPuestos.FechaDesde And suePersPuestos.FechaHasta
INNER JOIN suePuestos ON 
suePuestos.suePuestos = suePersPuestos.Puesto_Id
inner join suePersCatego ON  suePersCatego.Legajo = suePersonal.genEntidades and 
	sueLiquidacion.FechaFinal between suePersCatego.FechaDesde And suePersCatego.FechaHasta
inner join sueCategorias ON sueCategorias.sueCategorias = suePersCatego.Categoria_Id
inner join sueperiodicidad ON sueperiodicidad.Periodo_Id = sueCategorias.Periodo_Id
inner join suePersTipoPago ON  suePersTipoPago.Legajo = suePersonal.genEntidades and 
	sueLiquidacion.FechaFinal between suePersTipoPago.FechaDesde And suePersTipoPago.FechaHasta
inner join sueTipoPago ON sueTipoPago.sueTipoPago = suePersTipoPago.TipoPago_Id
left join sueLiqPersImportes  AS SDI ON SDI.Legajo = suePersonal.genEntidades and 
			SDI.Importe_Id = 2 and 
			sueLiquidacion.FechaFinal between  SDI.Fecha_Desde and SDI.Fecha_Hasta
left join sueLiqPersImportes  AS SD ON SD.Legajo = suePersonal.genEntidades and 
			SD.Importe_Id = 1 and 
			sueLiquidacion.FechaFinal between  SD.Fecha_Desde and SD.Fecha_Hasta

inner join suePersSucursal ON suePersSucursal.Legajo = suePersonal.genEntidades and 
	sueLiquidacion.FechaFinal between suePersSucursal.FechaDesde And suePersSucursal.FechaHasta
INNER JOIN genSucursalesEmpr on 
	genSucursalesEmpr.genSucursalesEmpr =  suePersSucursal.Sucursal
INNER JOIN genProvincias on genProvincias.genProvincias = genSucursalesEmpr.Provincia_Id
Where
	sueliquidacion.sueliquidacion = @psueliquidacion 


-- Percepciones

SELECT 
	sum(case when sueTerminada.Importe*sueTerminada.signo > 0  and 
		sueConceptos.TipoPercepcion not in ('022','023','025', '039','044')
		then sueTerminada.Importe*sueTerminada.signo else 0 end ) TotalSueldos,
	sum(case when sueTerminada.Importe*sueTerminada.signo > 0 And  
		sueConceptos.TipoPercepcion in ('022','023','025')
		then sueTerminada.Importe*sueTerminada.signo else 0 end ) TotalSeparacionIndemnizacion ,
	sum(case when sueTerminada.Importe*sueTerminada.signo > 0 And  
		sueConceptos.TipoPercepcion in ('039','044')
		then sueTerminada.Importe*sueTerminada.signo else 0 end ) TotalJubilacionPensionRetiro ,
sum(case when sueTerminada.Importe*sueTerminada.signo > 0 And  
		sueConceptos.EsExento = 0 
		then sueTerminada.Importe*sueTerminada.signo else 0 end ) 	TotalGravado ,
sum(case when sueTerminada.Importe*sueTerminada.signo > 0 And  
		sueConceptos.EsExento = 1 
		then sueTerminada.Importe*sueTerminada.signo else 0 end ) 	TotalExento

FROM sueliquidacion INNER JOIN sueTerminada ON 
sueTerminada.sueliquidacion = sueliquidacion.sueliquidacion
INNER JOIN sueConceptos ON
sueConceptos.sueConceptos = sueTerminada.Concepto_Id
INNER JOIN suePersonal ON suePersonal.genEntidades = sueTerminada.Legajo
inner join conAsientos ON 
	conAsientos.conAsientos =  sueliquidacion.sueliquidacion
Where
	sueConceptos.TipoPercepcion IS NOT NULL  and
	conAsientos.Anulado = 0 AND 
	sueliquidacion.sueliquidacion = @psueliquidacion and 
	suePersonal.Legajo = @Legajo

-- Percepcion

SELECT sueConceptos.TipoPercepcion, sueConceptos.Concepto_id, 
	sueConceptos.Descripcion as Concepto, 
	case when sueConceptos.EsExento = 0 then sueTerminada.Importe*sueTerminada.Signo else 0 end ImporteGravado ,
	case when sueConceptos.EsExento = 1 then sueTerminada.Importe*sueTerminada.Signo else 0 end ImporteExento 
FROM sueliquidacion INNER JOIN sueTerminada ON 
sueTerminada.sueliquidacion = sueliquidacion.sueliquidacion
INNER JOIN sueConceptos ON
sueConceptos.sueConceptos = sueTerminada.Concepto_Id
INNER JOIN suePersonal ON suePersonal.genEntidades = sueTerminada.Legajo
inner join conAsientos ON 
	conAsientos.conAsientos =  sueliquidacion.sueliquidacion
Where
	sueTerminada.Importe*sueTerminada.Signo >0 and 
	sueConceptos.TipoPercepcion IS NOT NULL AND 
	conAsientos.Anulado = 0 AND 
	sueliquidacion.sueliquidacion = @psueliquidacion and 
	suePersonal.Legajo = @Legajo


-- Horas Extas

SELECT sueConceptos.Concepto_id, 
		sueTerminada.Dato2 Dias,
		sueConceptos.TipoHora TipoHoras,
		sueTerminada.Dato HorasExtras,
		sueTerminada.Importe ImportePagado
	
FROM sueliquidacion INNER JOIN sueTerminada ON 
sueTerminada.sueliquidacion = sueliquidacion.sueliquidacion
INNER JOIN sueConceptos ON
sueConceptos.sueConceptos = sueTerminada.Concepto_Id
INNER JOIN suePersonal ON suePersonal.genEntidades = sueTerminada.Legajo
Where
	sueConceptos.TipoPercepcion = '019' AND 
	sueliquidacion.sueliquidacion = @psueliquidacion and 
	suePersonal.Legajo = @Legajo


-- TODO jUBILACION PENSION Y RETIRO
SELECT 0 AS TotalUnaExhibicion , 0 as TotalParcialidad , 0 as MontoDiario,
	0 as IngresoAcumulable , 0 as IngresoNoAcumulable 
	WHERE 1 = 2

-- EL SUELDO MENSUAL PARA KLOEME ES DIRECTO LOS OTROS SERIA POR 30?
-- SEPARACIONES E INDEMNIZACION
SELECT SUM(sueTerminada.Importe*sueTerminada.Signo)  TotalPagado , 
	datediff(yy, suePersonal.FechaIngreso, sueLiquidacion.FechaFinal) AS NumAnosServicio, 
	ISNULL(SD.Valor,0) as UltimoSueldoMensOrd , 
	SUM(case when sueConceptos.EsExento = 0 then sueTerminada.Importe*sueTerminada.Signo else 0 end) as IngresoAcumulable,
	SUM(case when sueConceptos.EsExento = 1 then sueTerminada.Importe*sueTerminada.Signo else 0 end) as IngresoNoAcumulable
	FROM sueliquidacion INNER JOIN sueTerminada ON 
	sueTerminada.sueliquidacion = sueliquidacion.sueliquidacion
	INNER JOIN sueConceptos ON
	sueConceptos.sueConceptos = sueTerminada.Concepto_Id
	INNER JOIN suePersonal ON suePersonal.genEntidades = sueTerminada.Legajo
	inner join conAsientos ON 
	conAsientos.conAsientos =  sueliquidacion.sueliquidacion
	left join sueLiqPersImportes  AS SD ON SD.Legajo = suePersonal.genEntidades and 
			SD.Importe_Id = 1 and 
			sueLiquidacion.FechaFinal between  SD.Fecha_Desde and SD.Fecha_Hasta

Where
	sueTerminada.Importe*sueTerminada.Signo >0 and 
	sueConceptos.TipoPercepcion  in ('022','023','025') AND
	conAsientos.Anulado = 0 AND 
	sueliquidacion.sueliquidacion = @psueliquidacion and 
	suePersonal.Legajo = @Legajo
group by SD.Valor	, suePersonal.FechaIngreso, sueLiquidacion.FechaFinal

	


-- Deducciones
SELECT 
	sum(case when sueTerminada.Importe*sueTerminada.signo < 0  and
		sueConceptos.TipoDeduccion != '002' 
		then -sueTerminada.Importe*sueTerminada.signo else 0 end ) TotalOtrasDeducciones ,
	sum(case when sueTerminada.Importe*sueTerminada.signo < 0  and
		sueConceptos.TipoDeduccion = '002' 
		then -sueTerminada.Importe*sueTerminada.signo else 0 end ) TotalImpuestosRetenidos

FROM sueliquidacion INNER JOIN sueTerminada ON 
sueTerminada.sueliquidacion = sueliquidacion.sueliquidacion
INNER JOIN sueConceptos ON
sueConceptos.sueConceptos = sueTerminada.Concepto_Id
INNER JOIN suePersonal ON suePersonal.genEntidades = sueTerminada.Legajo
inner join conAsientos ON 
	conAsientos.conAsientos =  sueliquidacion.sueliquidacion
Where
	sueConceptos.TipoDeduccion IS NOT NULL  and
	conAsientos.Anulado = 0 AND 
	sueliquidacion.sueliquidacion = @psueliquidacion and 
	suePersonal.Legajo = @Legajo



-- Deduccion

SELECT sueConceptos.TipoDeduccion , sueConceptos.Concepto_id, 
	sueConceptos.Descripcion as Concepto, 
	-sueTerminada.Importe*sueTerminada.Signo Importe
FROM sueliquidacion INNER JOIN sueTerminada ON 
sueTerminada.sueliquidacion = sueliquidacion.sueliquidacion
INNER JOIN sueConceptos ON
sueConceptos.sueConceptos = sueTerminada.Concepto_Id
INNER JOIN suePersonal ON suePersonal.genEntidades = sueTerminada.Legajo
inner join conAsientos ON 
	conAsientos.conAsientos =  sueliquidacion.sueliquidacion
Where
	sueTerminada.Importe*sueTerminada.Signo < 0 AND
	sueConceptos.TipoDeduccion IS NOT NULL AND 
	conAsientos.Anulado = 0 AND 
	sueliquidacion.sueliquidacion = @psueliquidacion and 
	suePersonal.Legajo = @Legajo


-- INCAPACIDADES

SELECT sueConceptos.TipoIncapacidad , sueConceptos.Concepto_id, 
	sueConceptos.Descripcion as Concepto, 
	sueTerminada.Dato as DiasIncapacidad ,
	Abs(sueTerminada.Importe*sueTerminada.Signo) ImporteMonetario 
FROM sueliquidacion INNER JOIN sueTerminada ON 
sueTerminada.sueliquidacion = sueliquidacion.sueliquidacion
INNER JOIN sueConceptos ON
sueConceptos.sueConceptos = sueTerminada.Concepto_Id
INNER JOIN suePersonal ON suePersonal.genEntidades = sueTerminada.Legajo
inner join conAsientos ON 
	conAsientos.conAsientos =  sueliquidacion.sueliquidacion
Where
	sueConceptos.TipoIncapacidad IS NOT NULL AND 
	sueConceptos.TipoIncapacidad != 0 and 
	sueliquidacion.sueliquidacion = @psueliquidacion and 
	suePersonal.Legajo = @Legajo

-- Otros Pagos

SELECT 
	sum(sueTerminada.Importe*sueTerminada.signo) TotalOtros
FROM sueliquidacion INNER JOIN sueTerminada ON 
sueTerminada.sueliquidacion = sueliquidacion.sueliquidacion
INNER JOIN sueConceptos ON
sueConceptos.sueConceptos = sueTerminada.Concepto_Id
INNER JOIN suePersonal ON suePersonal.genEntidades = sueTerminada.Legajo
inner join conAsientos ON 
	conAsientos.conAsientos =  sueliquidacion.sueliquidacion
Where
	sueConceptos.signo != 0 and 
	sueConceptos.TipoOtro IS NOT NULL  and
	conAsientos.Anulado = 0 AND 
	sueliquidacion.sueliquidacion = @psueliquidacion and 
	suePersonal.Legajo = @Legajo

-- Otros Pago
SELECT sueConceptos.TipoOtro TipoOtroPago  , sueConceptos.Concepto_id, 
	sueConceptos.Descripcion as Concepto, 
	sueTerminada.Importe*sueTerminada.Signo Importe
FROM sueliquidacion INNER JOIN sueTerminada ON 
sueTerminada.sueliquidacion = sueliquidacion.sueliquidacion
INNER JOIN sueConceptos ON
sueConceptos.sueConceptos = sueTerminada.Concepto_Id
INNER JOIN suePersonal ON suePersonal.genEntidades = sueTerminada.Legajo
inner join conAsientos ON 
	conAsientos.conAsientos =  sueliquidacion.sueliquidacion
Where
	sueConceptos.signo != 0 and 
	sueConceptos.TipoOtro IS NOT NULL AND 
	sueliquidacion.sueliquidacion = @psueliquidacion and 
	suePersonal.Legajo = @Legajo

-- SubSidio al Empleo
SELECT 	sum(sueTerminada.Importe) SubsidioCausado
FROM sueliquidacion INNER JOIN sueTerminada ON 
sueTerminada.sueliquidacion = sueliquidacion.sueliquidacion
INNER JOIN sueConceptos ON
sueConceptos.sueConceptos = sueTerminada.Concepto_Id
INNER JOIN suePersonal ON suePersonal.genEntidades = sueTerminada.Legajo
inner join conAsientos ON 
	conAsientos.conAsientos =  sueliquidacion.sueliquidacion
Where
	sueConceptos.signo = 0 and 
	sueConceptos.TipoOtro = '002'  and
	conAsientos.Anulado = 0 AND 
	sueliquidacion.sueliquidacion = @psueliquidacion and 
	suePersonal.Legajo = @Legajo


-- compensacion Saldo a Favor
select sueConceptos.Concepto_Id, 
	sueTerminada.Importe  as SaldoAFavor, 
	ISNULL(sueTerminadaRetro.AnioRetro , CASE WHEN sueLiquidacion.MES=12 THEN sueLiquidacion.Anio else
		sueLiquidacion.Anio-1 end) as AnioRetro,
	sueTerminada.Importe*0 as RemanenteSalFav
from sueTerminada 
	INNER JOIN sueLiquidacion ON sueLiquidacion.sueLiquidacion = sueTerminada.sueLiquidacion
	LEFT JOIN  sueTerminadaRetro ON 
	sueTerminadaRetro.sueliquidacion =sueTerminada.sueLiquidacion and 
	sueTerminadaRetro.Concepto_Id = sueTerminada.Concepto_Id and 
	sueTerminadaRetro.Legajo = sueTerminada.Legajo
	INNER JOIN suePersonal ON  suePersonal.genEntidades = sueTerminada.sueLiquidacion 
	INNER JOIN sueConceptos ON sueConceptos.sueConceptos = sueTerminada.Concepto_Id
	Where
		suePersonal.Legajo = @Legajo and 
		sueTerminada.sueLiquidacion = @pSueliquidacion and 
		sueConceptos.TipoOtro = '004'

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\swsAcciones.sql*/
drop procedure swsAccionesGuardar
go
create procedure swsAccionesGuardar
(
    @pAccion_Id varchar(200)
)
as
if not exists(select 1 from swsAcciones where Accion_Id=@pAccion_Id)
begin
insert into swsAcciones(Accion_Id) VALUEs (@pAccion_Id)
end
go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\swsPermisos.sql*/
drop procedure swsPermisosDatos
go
create procedure swsPermisosDatos
(
    @pUsuario_Id varchar(25)
)
as
select genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres from genUsuarios where genUsuarios.Usuario_Id=@pUsuario_Id
select genUsuarios.genUsuarios, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres, sisAccionesConfig.Accion_Id, sisAccionesConfig.Descripcion, cast(case when swsPermisos.Accion_Id is null then 0 else 1 end as bit) as Marca from genUsuarios
cross join swsAcciones
inner join sisAccionesConfig on sisAccionesConfig.Accion_Id=swsAcciones.Accion_Id
left join swsPermisos on swsPermisos.Accion_Id=swsAcciones.Accion_Id and swsPermisos.Usuario_Id=genUsuarios.genUsuarios
where genUsuarios.Usuario_Id=@pUsuario_Id
go

drop procedure swsPermisosGuardar
go
create procedure swsPermisosGuardar
(
    @pUsuario_Id varchar(25),
    @pAccion_Id varchar(200)
)
as
insert into swsPermisos (Usuario_Id, Accion_Id) VALUES(dbo.FuncFKgenUsuarios(@pUsuario_Id), @pAccion_Id)
go

drop procedure swsPermisosEliminar
go
create procedure swsPermisosEliminar
(
    @pUsuario_Id varchar(25)
)
as
delete swsPermisos where Usuario_Id=dbo.FuncFKgenUsuarios(@pUsuario_Id)
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\swsTokens.sql*/
drop procedure swsTokenDatos
go
create procedure swsTokenDatos
(
    @pToken varchar(40),
    @pAccion varchar(200)
)
as
select genUsuarios.genUsuarios, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres, genEmpresas.genEmpresas, genEmpresas.Empresa_Id, swsTokens.ValidThru, swsTokens.Token, genInstalacion.Dominio_Id, genMonedas.Moneda_Id, swsPermisos.Accion_Id from swsTokens
inner join genUsuarios on genUsuarios.genUsuarios=swsTokens.Usuario_Id
inner join genEmpresas on genEmpresas.genEmpresas=swsTokens.Empresa_Id
inner join genMonedas on genMonedas.genMonedas=genEmpresas.Moneda_Id
cross join genInstalacion
left join swsPermisos on swsPermisos.Usuario_Id=genUsuarios.genUsuarios and swsPermisos.Accion_Id=@pAccion
where swsTokens.Token=@pToken
GO

drop procedure swsTokenGenerar
go
create procedure swsTokenGenerar
(
    @pEmpresa_Id varchar(15),
    @pUsuario_Id varchar(25)
)
as
select genEmpresas.genEmpresas, genEmpresas.Empresa_Id, genEmpresas.RazonSocial as DescripcionEmpresa, genUsuarios.genUsuarios, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
swsUsuarios.Password, '' as Token, '' as Base64Key from swsUsuarios 
inner join genUsuarios on genUsuarios.genUsuarios=swsUsuarios.Usuario_Id
inner join genEmpresas on genEmpresas.genEmpresas=isnull(genUsuarios.Empresa_Id, genEmpresas.genEmpresas)
where genEmpresas.Empresa_Id=@pEmpresa_Id and genUsuarios.Usuario_Id=@pUsuario_Id
go

DROP procedure swsTokenGuardar
go
create procedure swsTokenGuardar
(
    @pToken varchar(50),
    @pUsuario_Id varchar(25),
    @pValidThru datetime,
    @pEmpresa_Id varchar(15)
)
as
insert into swsTokens (Token, Empresa_Id, Usuario_Id, ValidThru)
VALUES
(
    @pToken,
    dbo.FuncFKgenEmpresas(@pEmpresa_Id),
    dbo.FuncFKgenUsuarios(@pUsuario_Id),
    @pValidThru
)
go

drop procedure swsTokenEliminarVencidos
go
create procedure swsTokenEliminarVencidos
(
    @pFecha datetime
)
AS
delete swsTokens where ValidThru<@pFecha
go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\swsUsuarios.sql*/
drop procedure swsUsuariosDatos
go
create procedure swsUsuariosDatos
(
    @pTodos SiNo
)
as
select @pTodos as Todos
select genUsuarios.genUsuarios, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres, cast(case when swsUsuarios.Usuario_Id is null then 0 else 1 end as bit) as Marca from genUsuarios
left join swsUsuarios on swsUsuarios.Usuario_Id=genUsuarios.genUsuarios
where swsUsuarios.Usuario_Id is not null or @pTodos=1
go

drop procedure swsUsuariosGuardar
go
create procedure swsUsuariosGuardar
(
    @pUsuario_Id varchar(25)
)
as
insert into swsUsuarios(Usuario_Id, PASSWORD) values (dbo.FuncFKgenUsuarios(@pUsuario_Id),'')
go

drop procedure swsUsuariosEliminar
go
create procedure swsUsuariosEliminar
(
    @pUsuario_Id varchar(25) =null
)
as
delete swsUsuarios where swsUsuarios.Usuario_Id=ISNULL(dbo.FuncFKgenUsuarios(@pUsuario_Id), Usuario_Id)
GO


drop procedure swsUsuariosActuPassword
go
create procedure swsUsuariosActuPassword
(
    @pUsuario_Id varchar(25),
    @pPassword varchar(50)
)
as
update swsUsuarios set Password=@pPassword from swsUsuarios inner join genUsuarios on genUsuarios.genUsuarios=swsUsuarios.Usuario_Id
where genUsuarios.Usuario_Id=@pUsuario_Id
go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesAICheques.sql*/
DROP PROCEDURE tesAIChequesGuardar
GO
CREATE PROCEDURE tesAIChequesGuardar
(
@pCartera_Id VarChar(5),
@pEmpresa_Id int,
@pRenglon int,
@pFechaVencimiento datetime,
@pChequera_Id int,
@pnumCheque int,
@pAlaOrden varchar(120),
@pImporte qMonedaD2
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesAICheques WHERE (Cartera_Id =dbo.FuncFKtesIdentifica(@pCartera_Id)) AND (Empresa_Id = @pEmpresa_Id) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE tesAICheques
	SET		Empresa_Id = @pEmpresa_Id,
		FechaVencimiento = @pFechaVencimiento,
		Chequera_Id = @pChequera_Id,
		numCheque = @pnumCheque,
		AlaOrden = @pAlaOrden,
		Importe = @pImporte
	WHERE (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id)) AND (Empresa_Id = @pEmpresa_Id) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO tesAICheques
	(
		Cartera_Id,
		Empresa_Id,
		Renglon,
		FechaVencimiento,
		Chequera_Id,
		numCheque,
		AlaOrden,
		Importe
	)
	VALUES 
	(
		dbo.FuncFKtesIdentifica(@pCartera_Id),
		@pEmpresa_Id,
		@pRenglon,
		@pFechaVencimiento,
		@pChequera_Id,
		@pnumCheque,
		@pAlaOrden,
		@pImporte
	)
END 

GO

DROP PROCEDURE tesAIChequesDatos
GO
CREATE PROCEDURE tesAIChequesDatos
(
@pCartera_Id VarChar(5),
@pEmpresa_Id int,
@pRenglon int=null
)
AS
SET NOCOUNT ON 

SELECT 
	tesAICheques.Empresa_Id, tesIdentifica.Cartera_Id, tesAICheques.Renglon, tesAICheques.FechaVencimiento, 
	tesAICheques.Chequera_Id, tesAICheques.numCheque,	
	tesAICheques.AlaOrden, tesAICheques.Importe
FROM tesAICheques 
INNER JOIN tesChequeras  ON (tesChequeras.Chequera_Id = tesAICheques.Chequera_Id) AND 
			(tesChequeras.Cartera_Id = tesAICheques.Cartera_Id) AND 
			(tesChequeras.Empresa_Id = tesAICheques.Empresa_Id)
inner join tesIdentifica ON
tesIdentifica.tesIdentifica = tesAICheques.Cartera_Id
WHERE tesIdentifica.Cartera_Id = @pCartera_Id AND 
	  tesAICheques.Empresa_Id = @pEmpresa_Id AND 
	  tesAICheques.Renglon = isnull(@pRenglon,tesAICheques.Renglon)
 
RETURN @@Error 

GO

DROP PROCEDURE tesAIChequesEliminar
GO
CREATE PROCEDURE tesAIChequesEliminar
(
@pCartera_Id VarChar(5),
@pEmpresa_Id int,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM tesAICheques 
WHERE (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id))
AND (Empresa_Id = @pEmpresa_Id)
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesAIDepositos.sql*/
DROP PROCEDURE tesAIDepositosGuardar
GO
CREATE PROCEDURE tesAIDepositosGuardar
(
@pCartera_Id VarChar(5),
@pEmpresa_Id int,
@pRenglon int,
@pCarteraCheq_Id VarChar(5),
@pnumCheque int,
@pFechaVencimiento datetime,
@pImporte qMonedaD2,
@pClearing varchar(3),
@pBanco_Id varchar(3),
@pCliente_Id VarChar(15) = NULL,
@pcuentaBanco varchar(15),
@psucBanco varchar(15)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesAIDepositos WHERE (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id)) AND 
		(Empresa_Id = @pEmpresa_Id) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE tesAIDepositos
	SET		Empresa_Id = @pEmpresa_Id,
		CarteraCheq_Id = dbo.FuncFKtesIdentifica(@pCarteraCheq_Id),
		FechaVencimiento = @pFechaVencimiento,
		Importe = @pImporte,
		Clearing = @pClearing,
		Banco_Id = dbo.FuncFKtesBancos(@pBanco_Id),
		Cliente_Id = dbo.FuncFKvenClientes(@pCliente_Id),
		cuentaBanco = @pcuentaBanco,
		sucBanco = @psucBanco, 
		numCheque = @pnumCheque
	WHERE (Cartera_Id =dbo.FuncFKtesIdentifica(@pCartera_Id)) AND (Empresa_Id = @pEmpresa_Id) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO tesAIDepositos
	(
		Cartera_Id,
		Empresa_Id,
		Renglon,
		CarteraCheq_Id,
		numCheque,
		FechaVencimiento,
		Importe,
		Clearing,
		Banco_Id,
		Cliente_Id,
		cuentaBanco,
		sucBanco
	)
	VALUES 
	(
		dbo.FuncFKtesIdentifica(@pCartera_Id),
		@pEmpresa_Id,
		@pRenglon,
		dbo.FuncFKtesIdentifica(@pCarteraCheq_Id),
		@pnumCheque,
		@pFechaVencimiento,
		@pImporte,
		@pClearing,
		dbo.FuncFKtesBancos(@pBanco_Id),
		dbo.FuncFKvenClientes(@pCliente_Id),
		@pcuentaBanco,
		@psucBanco
	)
END 

GO

DROP PROCEDURE tesAIDepositosDatos
GO
CREATE PROCEDURE tesAIDepositosDatos
(
@pCartera_Id VarChar(5),
@pEmpresa_Id int,
@pRenglon int=NULL
)
AS
SET NOCOUNT ON 

SELECT tesIdentifica.Cartera_Id, 
	tesAIDepositos.Empresa_Id, tesAIDepositos.Renglon, 
	tesIdCheqTerceros.Cartera_Id CarteraCheq_Id, 
	tesIdCheqTerceros.Descripcion as DescripcionIdCheqTerceros,
	tesAIDepositos.numCheque, 
	tesAIDepositos.FechaVencimiento, tesAIDepositos.Importe, 
	tesClearing.Clearing, tesClearing.Descripcion as DescripcionClearing,
	tesBancos.Banco_Id, tesBancos.Descripcion as DescripcionBancos, 
	venClientes.Cliente_Id, venClientes.RazonSocial as DescripcionClientes,
	tesAIDepositos.cuentaBanco, tesAIDepositos.sucBanco
FROM tesAIDepositos 
INNER JOIN tesIdentifica ON tesIdentifica.tesIdentifica = tesAIDepositos.Cartera_Id
INNER JOIN tesIdentifica as tesIdCheqTerceros ON tesIdCheqTerceros.tesIdentifica = tesAIDepositos.CarteraCheq_Id
INNER JOIN tesClearing  ON (tesClearing.Clearing = tesAIDepositos.Clearing)
INNER JOIN tesBancos  ON (tesBancos.tesBancos = tesAIDepositos.Banco_Id)
LEFT JOIN venClientes  ON (venClientes.genEntidades = tesAIDepositos.Cliente_Id)
WHERE (tesIdentifica.Cartera_Id = @pCartera_Id)
AND (tesAIDepositos.Empresa_Id = @pEmpresa_Id)
AND (tesAIDepositos.Renglon = ISNULL(@pRenglon,tesAIDepositos.Renglon))
 
 RETURN @@Error 

GO

DROP PROCEDURE tesAIDepositosEliminar
GO
CREATE PROCEDURE tesAIDepositosEliminar
(
@pCartera_Id VarChar(5),
@pEmpresa_Id int,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM tesAIDepositos 
WHERE (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id))
AND (Empresa_Id = @pEmpresa_Id)
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesAISaldos.sql*/
DROP PROCEDURE tesAISaldosGuardar
GO
CREATE PROCEDURE tesAISaldosGuardar
(
@pCartera_Id VarChar(5),
@pEmpresa_Id int,
@pSaldoInicial qMonedaD2,
@pCambio qMonedaD4,
@pUsuario_Id int ,
@pConfirmado SiNo
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesAISaldos WHERE (Cartera_Id =dbo.FuncFKtesIdentifica(@pCartera_Id)) AND (Empresa_Id = @pEmpresa_Id)))
BEGIN 
	UPDATE tesAISaldos
	SET		Empresa_Id = @pEmpresa_Id,
		SaldoInicial = @pSaldoInicial,
		Cambio = @pCambio,
		Usuario_Id = @pUsuario_Id,
		FechaRegistro = getDate() , 
		Confirmado = @pConfirmado
	WHERE (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id)) AND (Empresa_Id = @pEmpresa_Id)
END 
ELSE 
BEGIN 
	INSERT INTO tesAISaldos
	(
		Cartera_Id,
		Empresa_Id,
		SaldoInicial,
		Cambio,
		Usuario_Id,
		FechaRegistro,
		Confirmado
	)
	VALUES 
	(
		dbo.FuncFKtesIdentifica(@pCartera_Id),
		@pEmpresa_Id,
		@pSaldoInicial,
		@pCambio,
		@pUsuario_Id,
		getDate(), 
		@pConfirmado
	)
END 

GO

DROP PROCEDURE tesAISaldosDatos
GO
CREATE PROCEDURE tesAISaldosDatos
(
@pCartera_Id VarChar(5),
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 

SELECT tesIdentifica.Cartera_Id, tesIdentifica.Descripcion as DescripcionIdentifica, 
	tesAISaldos.Empresa_Id, tesAISaldos.SaldoInicial, genMonedas.Moneda_Id, 
	genMonedas.Descripcion as DescripcionMoneda, 
	tesAISaldos.Cambio, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, 
	tesAISaldos.FechaRegistro, tesAISaldos.Confirmado
FROM tesAISaldos 
INNER JOIN tesIdentifica  ON (tesIdentifica.tesIdentifica = tesAISaldos.Cartera_Id)
INNER JOIN genMonedas on genMonedas.genMonedas = tesIdentifica.Moneda_Id
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = tesAISaldos.Usuario_Id)
WHERE (tesAISALDOS.Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id))
AND (tesAISALDOS.Empresa_Id = @pEmpresa_Id)

exec tesAIChequesDatos @pCartera_id, @pEmpresa_id, null
exec tesAIDepositosDatos @pCartera_id, @pEmpresa_id, null
 
RETURN @@Error 

GO

DROP PROCEDURE tesAISaldosEliminar
GO
CREATE PROCEDURE tesAISaldosEliminar
(
@pCartera_Id varchar(5),
@pEmpresa_Id int
)
AS
SET NOCOUNT ON 

DELETE FROM tesAISaldos 
WHERE (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id))
AND (Empresa_Id = @pEmpresa_Id)
 
RETURN @@Error 

GO


DROP PROCEDURE tesAISaldosEliminarCheques
GO
CREATE PROCEDURE tesAISaldosEliminarCheques
(
@ptesMovimientos bigint
)
AS
SET NOCOUNT ON 

SELECT tesBPlink.tesCheqProp into #c1
	from tesBPlink
	WHERE tesMovimientos = @ptesMovimientos

DELETE FROM tesBPlink WHERE tesMovimientos = @ptesMovimientos
DELETE FROM tesCheqProp WHERE tesCheqProp IN (SELECT tesCheqProp from #c1)
DROP TABLE #c1

SELECT tesCTlink.tesCheqTerceros into #c2
	from tesCTlink
	WHERE tesMovimientos = @ptesMovimientos

DELETE FROM tesCTlink WHERE tesMovimientos = @ptesMovimientos
DELETE FROM tesCheqTerceros WHERE tesCheqTerceros IN (SELECT tesCheqTerceros from #c2)
DROP TABLE #c2

RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesAperturaCajaMonedas.sql*/
--tesAperturaCajaMonedasDatos 1, '20180925', '0204'
Drop Procedure tesAperturaCajaMonedasDatos
GO
Create Procedure tesAperturaCajaMonedasDatos
(
@pEmpresa_Id int,
@pFecha DateTime, 
@pSucursal VarChar(4)
)
As

Select genSucursalesEmpr.FechaCaja FechaActual, @pFecha FechaNueva,  
	Cast( case when genEmpresas.SucursalCentral =genSucursalesEmpr.genSucursalesEmpr then 1 else 0 end  as bit) as EsCentral, 
	genSucursalesEmpr.Sucursal, genSucursalesEmpr.Descripcion DescripcionSucursal
from genSucursalesEmpr inner join genEmpresas ON 
genEmpresas.genEmpresas = @pEmpresa_Id
Where
	genSucursalesEmpr.Sucursal = @pSucursal



Select genMonedas.Moneda_Id, genMonedas.Descripcion, genTipoCambio.CambioCompra, genTipoCambio.CambioVenta 
From genMonedas
Inner Join genEmpresas On genEmpresas.genEmpresas = IsNull(genMonedas.Empresa_Id, genEmpresas.genEmpresas)
Left Join genTipoCambio On genTipoCambio.Moneda_Id = genMonedas.genMonedas And genTipoCambio.Fecha = @pFecha and 
	genTipoCambio.Empresa_Id = genEmpresas.genEmpresas
Where genMonedas.genMonedas <> genEmpresas.Moneda_Id And
genEmpresas.genEmpresas = @pEmpresa_Id
Go



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesAsiCierreCalculo.sql*/
-- tesAsiCierreCalculo '20180331', 1

DROP PROCEDURE tesAsiCierreCalculo
GO
CREATE PROCEDURE tesAsiCierreCalculo
(
@pFecha DateTime, 
@Empresa_Id Int
)
AS
SET NOCOUNT ON 

SELECT @pFecha as Fecha 

SELECT genMonedas.Moneda_Id, 
	tesIdentifica.Cartera_Id, tesIdentifica.Descripcion as DescripcionCartera,
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuenta, 
	SUM(conMovCont.Importe *(-2*conMovCont.TipoMov+3)) as Importe, 
	SUM(conMovCont.ImporteMonedaOriginal *(-2*conMovCont.Tipomov+3)) as ImporteMonedaOriginal
from tesMovimientos 
INNER JOIN tesRengMovi on tesMovimientos.tesMovimientos = tesRengMovi.tesMovimientos
INNER JOIN conMovCont ON conMovCont.conAsientos = tesRengMovi.tesMovimientos AND conMovCont.Renglon = tesRengMovi.conRenglon
INNER JOIN tesIdentifica on tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id
INNER Join conCuentas ON conCuentas.conCuentas = tesIdentifica.Cuenta_Id
INNER JOIN conAsientos ON conAsientos.conAsientos = tesMovimientos.tesMovimientos
INNER JOIN genEmpresas ON genEmpresas.genEmpresas =conAsientos.Empresa_Id
INNER JOIN genMonedas ON genMonedas.genMonedas = tesIdentifica.Moneda_Id
Where
conAsientos.Anulado = 0 and 
genMonedas.genMonedas != genEmpresas.Moneda_Id and 
conAsientos.Fecha <= @pFecha  and
conAsientos.Empresa_Id = @Empresa_Id
GROUP BY genMonedas.Moneda_Id, tesIdentifica.Cartera_Id, tesIdentifica.Descripcion, conCuentas.Cuenta_Id, conCuentas.Descripcion 
ORDER BY 1,2
RETURN @@Error 

GO


DROP PROCEDURE tesAsiCierreDatosCierre
GO
CREATE PROCEDURE tesAsiCierreDatosCierre
(
@pFecha DateTime, 
@Empresa_Id Int
)
AS
SET NOCOUNT ON 

SELECT @pFecha as Fecha 



SELECT conAsientos.conAsientos Asiento_Id , conAsientos.Empresa_Id, conAsientos.Fecha, 
	conAsientos.Anulado, genMonedas.Moneda_Id, 
	genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C,
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C
FROM conAsientos 
INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
inner join genAsiSegmentos ON genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
inner join genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
WHERE conAsientos.Fecha = @pFecha  and 
conAsientos.Formulario_Id = dbo.FuncFKdisFormularios('frmtesoreriaCierre') and
conAsientos.Anulado = 0 and 
conAsientos.Empresa_Id = @Empresa_Id

 
RETURN @@Error 

GO





Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesAsiCierreDatos.sql*/
DROP PROCEDURE tesAsiCierreDatosCierre
GO
CREATE PROCEDURE tesAsiCierreDatosCierre
(
@pFecha DateTime, 
@Empresa_Id Int
)
AS
SET NOCOUNT ON 

SELECT @pFecha as Fecha 



SELECT conAsientos.conAsientos Asiento_Id , conAsientos.Empresa_Id, conAsientos.Fecha, 
	conAsientos.Anulado, genMonedas.Moneda_Id, 
	genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C,
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C
FROM conAsientos INNER JOIN genMonedas  ON 
genMonedas.genMonedas = conAsientos.Moneda_Id
inner join genAsiSegmentos ON
genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
inner join genSegmentos ON
genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
WHERE conAsientos.Fecha= @pFecha  and 
conAsientos.Formulario_Id = dbo.FuncFKdisFormularios('frmtesoreriaCerrar') and
conAsientos.Anulado = 0 and 
conAsientos.Empresa_Id = @Empresa_Id

 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesBancos.sql*/
DROP PROCEDURE tesBancosGuardar
GO
CREATE PROCEDURE tesBancosGuardar
(
@pBanco_Id varchar(3),
@pBanco_Id_Nuevo varchar(3),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(60),
@pInactivo bit,
@pUsuario_Id int,
@pPosteado bit, 
@pRFC Varchar(14)
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM tesBancos WHERE (Banco_Id = @pBanco_Id)))
BEGIN 
	UPDATE tesBancos
	SET		@lIdentidad = tesBancos,
		Banco_Id = @pBanco_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado, 
		RFC = @pRFC
	WHERE (Banco_Id = @pBanco_Id)
END 
ELSE 
BEGIN 
	INSERT INTO tesBancos
	(
		Banco_Id,
		Empresa_Id,
		Descripcion,
		Inactivo,
		Usuario_Id,
		Posteado, 
		RFC
	)
	VALUES 
	(
		@pBanco_Id,
		@pEmpresa_Id,
		@pDescripcion,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado,
		@pRFC
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE tesBancosDatos
GO
CREATE PROCEDURE tesBancosDatos
(
@pBanco_Id varchar(3)
)
AS
SET NOCOUNT ON 

SELECT tesBancos.tesBancos, tesBancos.Banco_Id, tesBancos.Empresa_Id, Cast( Case When tesBancos.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpreas,
	tesBancos.Descripcion, tesBancos.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
	tesBancos.Posteado, tesBancos.RFC 
FROM tesBancos 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = tesBancos.Usuario_Id)
WHERE (Banco_Id = @pBanco_Id)
 


  Declare @pidentity bigint= dbo.FuncFKtesBancos(@pBanco_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'tesBancos'
 RETURN @@Error 

GO

DROP PROCEDURE tesBancosEliminar
GO
CREATE PROCEDURE tesBancosEliminar
(
@pBanco_Id varchar(3) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM tesBancos 
WHERE (Banco_Id = @pBanco_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKtesBancos
GO

CREATE FUNCTION FuncFKtesBancos
(
@pBanco_Id varchar (3)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = tesBancos FROM tesBancos WHERE 
	Banco_Id = @pBanco_Id
  RETURN @pIdentity
END


GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesBPLink.sql*/
DROP PROCEDURE tesBPlinkGuardar
GO
CREATE PROCEDURE tesBPlinkGuardar
(
@ptesMovimientos bigint,
@pconRenglon int,
@pEstado_Id char(1),
@pSecuencia smallint,
@ptesCheqProp int 
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesBPlink WHERE 
(tesMovimientos = @ptesMovimientos) AND (conRenglon = @pconRenglon)))
BEGIN 
	UPDATE tesBPlink
	SET	Estado_Id = @pEstado_Id,
		Secuencia = @pSecuencia,
		tesCheqProp = @ptesCheqProp
	WHERE (tesMovimientos = @ptesMovimientos) AND (conRenglon = @pconRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO tesBPlink
	(
		tesMovimientos,
		conRenglon,
		Estado_Id,
		Secuencia,
		tesCheqProp
	)
	VALUES 
	(
		@ptesMovimientos,
		@pconRenglon,
		@pEstado_Id,
		@pSecuencia,
		@ptesCheqProp
	)
END 

GO

DROP PROCEDURE tesBPlinkDatos
GO
CREATE PROCEDURE tesBPlinkDatos
(
@ptesMovimientos bigint,
@pconRenglon int= NULL
)
AS
SET NOCOUNT ON 

SELECT tesBPlink.tesMovimientos, tesBPlink.conRenglon, 
	tesCheqPropEstado.Estado_Id,
	tesCheqPropEstado.Descripcion as DescripcionCheqPropEstado, 
	tesBPlink.Secuencia, tesCheqProp.Empresa_Id, tesIdentifica.Cartera_Id,
	tesCheqProp.Chequera_Id, tesCheqProp.numCheque, tesCheqProp.tesCheqProp
FROM tesBPlink 
INNER JOIN tesRengMovi  ON (tesRengMovi.tesMovimientos = tesBPlink.tesMovimientos) AND (tesRengMovi.conRenglon = tesBPlink.conRenglon)
INNER JOIN tesCheqPropEstado  ON (tesCheqPropEstado.Estado_Id = tesBPlink.Estado_Id)
INNER JOIN  tesCheqProp  ON (tesCheqProp.tesCheqProp = tesBPlink.tesCheqProp)
INNER JOIN tesIdentifica ON tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id
WHERE (tesBPlink.tesMovimientos = @ptesMovimientos)
AND (tesBPlink.conRenglon = ISNULL( @pconRenglon, tesBPlink.conRenglon))
 
 RETURN @@Error 

GO

DROP PROCEDURE tesBPlinkEliminar
GO
CREATE PROCEDURE tesBPlinkEliminar
(
@ptesMovimientos bigint,
@pconRenglon int= null
)
AS
SET NOCOUNT ON 

DELETE FROM tesBPlink 
WHERE (tesBPlink.tesMovimientos = @ptesMovimientos)
AND (tesBPlink.conRenglon = ISNULL( @pconRenglon, tesBPlink.conRenglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesCauasasRechazo.sql*/
DROP PROCEDURE tesCausasRechazoGuardar
GO
CREATE PROCEDURE tesCausasRechazoGuardar
(
@pCausa_Id varchar(5),
@pCausa_Id_Nueva varchar(5),
@pDescripcion varchar(150), 
@pEmpresa_Id int=NULL,
@pUsuario_Id int, 
@pPosteado bit,
@pInactivo bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM tesCausasRechazo WHERE Causa_Id = @pCausa_Id))
BEGIN 
	UPDATE tesCausasRechazo
	SET		@lIdentidad = tesCausasRechazo,
		Causa_Id = @pCausa_Id_Nueva,
		Descripcion = @pDescripcion, 
		Empresa_Id = @pEmpresa_Id,
		Usuario_Id = @pUsuario_Id, 
		Posteado = @pUsuario_Id,
		Inactivo = @pInactivo,
		FechaModificacion = dbo.FechaActual()
	WHERE 
		Causa_Id = @pCausa_Id
END 
ELSE 
BEGIN 
	INSERT INTO tesCausasRechazo
	(
		Causa_Id,
		Descripcion,
		Empresa_Id,
		Usuario_Id,
		Posteado,
		Inactivo, 
		FechaModificacion
	)
	VALUES 
	(
		@pCausa_Id_Nueva,
		@pDescripcion,
		@pEmpresa_id,
		@pUsuario_Id,
		@pPosteado,
		@pInactivo,
		dbo.FechaActual()
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE tesCausasRechazoDatos
GO
CREATE PROCEDURE tesCausasRechazoDatos
(
	@pCausa_Id VarChar(5)
)
AS
SET NOCOUNT ON 

SELECT tesCausasRechazo.tesCausasRechazo, tesCausasRechazo.Causa_Id, tesCausasRechazo.Causa_Id as Causa_Id_Nueva,
	tesCausasRechazo.Descripcion, tesCausasRechazo.Empresa_Id, 
		Cast(Case when tesCausasRechazo.Empresa_Id is NULL THEN 1 ELSE 0 END as bit) as ParaTodasEmpresas,
		tesCausasRechazo.Posteado, tesCausasRechazo.Inactivo, 
		genUsuarios.Usuario_Id, tesCausasRechazo.FechaModificacion
FROM tesCausasRechazo inner join genUsuarios on genUsuarios.genUsuarios = tesCausasRechazo.Usuario_Id

WHERE  
	tesCausasRechazo.Causa_Id = @pCausa_Id


 Declare @pidentity int= dbo.FuncFKtesCausasRechazo(@pCausa_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'tesCausasRechazo'
 RETURN @@Error 

GO

DROP PROCEDURE tesCausasRechazoEliminar
GO
CREATE PROCEDURE tesCausasRechazoEliminar
(
	@pCausa_Id VarChar(5)
)
AS
SET NOCOUNT ON 

DELETE FROM tesCausasRechazo 
WHERE  Causa_Id = 	@pCausa_Id 
RETURN @@Error 

GO

DROP FUNCTION FuncFKtesCausasRechazo
GO

CREATE FUNCTION FuncFKtesCausasRechazo
(
	@pCausa_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = tesCausasRechazo FROM tesCausasRechazo WHERE 
		Causa_Id = @pCausa_Id

  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesCFDICobranza.sql*/
DROP PROCEDURE tesCFDICobranzaGuardar
GO
CREATE PROCEDURE tesCFDICobranzaGuardar
(
@ptesCFDICobranza INT, 
@pCliente_Id varchar(25),
@pMoneda_Id varchar(3),
@pFecha datetime,
@pSelloDigital varchar(max),
@pXml varchar(max),
@pCadena varchar(max),
@pNoCertificado varchar(20),
@pUUID varchar(36),
@pFechaTimbrado varchar(19),
@pSelloSat varchar(max),
@pNoCertificadoSat varchar(20),
@pRfcProvCertif varchar(13) = NULL,
@pLeyenda varchar(max) = NULL,
@pAnulada char(1),
@pSucursal VarChar(25)
)
AS
SET NOCOUNT ON 

IF (EXISTS (SELECT 1 FROM tesCFDICobranza WHERE tesCFDICobranza = @ptesCFDICobranza ))
BEGIN 
	UPDATE tesCFDICobranza
	SET		
		Cliente_Id = dbo.FuncFKvenClientes(@pCliente_Id),
		Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id),
		Fecha = @pFecha,
		SelloDigital = @pSelloDigital,
		Xml = @pXml,
		Cadena = @pCadena,
		NoCertificado = @pNoCertificado,
		UUID = @pUUID,
		FechaTimbrado = @pFechaTimbrado,
		SelloSat = @pSelloSat,
		NoCertificadoSat = @pNoCertificadoSat,
		RfcProvCertif = @pRfcProvCertif,
		Leyenda = @pLeyenda,
		Anulada = @pAnulada,
		Sucursal = dbo.FuncFKgenSucursalesEmpr(@pSucursal)
	WHERE 
		tesCFDICobranza = @ptesCFDICobranza
END  
ELSE 
BEGIN 
	INSERT INTO tesCFDICobranza
	(
		Cliente_Id,
		Moneda_Id,
		Fecha,
		SelloDigital,
		Xml,
		Cadena,
		NoCertificado,
		UUID,
		FechaTimbrado,
		SelloSat,
		NoCertificadoSat,
		RfcProvCertif,
		Leyenda,
		Anulada,
		Sucursal
	)
	VALUES 
	(
		dbo.FuncFKvenClientes(@pCliente_Id),
		dbo.FuncFKgenMonedas(@pMoneda_Id),
		@pFecha,
		@pSelloDigital,
		@pXml,
		@pCadena,
		@pNoCertificado,
		@pUUID,
		@pFechaTimbrado,
		@pSelloSat,
		@pNoCertificadoSat,
		@pRfcProvCertif,
		@pLeyenda,
		@pAnulada,
		dbo.FuncFKgenSucursalesEmpr(@pSucursal)
	)
	SET @ptesCFDICobranza =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @ptesCFDICobranza as RetVal 

GO

DROP PROCEDURE tesCFDICobranzaDatos
GO
CREATE PROCEDURE tesCFDICobranzaDatos
(
	@pEmpresa_Id int, 
	@pSegmento_Id VarChar(10),
	@pSegmento1N INT, 
	@pSegmento2N INT, 
	@pSegmento3N INT, 
	@pSegmento4N INT, 
	@pSegmento1C VarChar(20), 
	@pSegmento2C VarChar(20),
	@pSegmento3C VarChar(20),
	@pSegmento4C VarChar(20)
)
AS
SET NOCOUNT ON 

SELECT tesCFDICobranza.tesCFDICobranza, 
	genSegmentos.Segmento_Id,  TesCFDICobranzaSegmentos.Segmento1N, TesCFDICobranzaSegmentos.Segmento2N,
	TesCFDICobranzaSegmentos.Segmento3N, TesCFDICobranzaSegmentos.Segmento4N,
	TesCFDICobranzaSegmentos.Segmento1C, TesCFDICobranzaSegmentos.Segmento2C,
	TesCFDICobranzaSegmentos.Segmento3C, TesCFDICobranzaSegmentos.Segmento4C,
	venClientes.Cliente_Id, venClientes.RazonSocial, 
	genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas, 
	tesCFDICobranza.Fecha,	tesCFDICobranza.SelloDigital, tesCFDICobranza.Xml, 
	tesCFDICobranza.Cadena, tesCFDICobranza.NoCertificado,
	tesCFDICobranza.UUID, tesCFDICobranza.FechaTimbrado, tesCFDICobranza.SelloSat, 
	tesCFDICobranza.NoCertificadoSat,
	tesCFDICobranza.RfcProvCertif, tesCFDICobranza.Leyenda, tesCFDICobranza.Anulada, genSucursalesEmpr.Sucursal
FROM tesCFDICobranza 
INNER JOIN venClientes  ON (venClientes.genEntidades = tesCFDICobranza.Cliente_Id)
INNER JOIN genMonedas  ON (genMonedas.genMonedas = tesCFDICobranza.Moneda_Id)
INNER JOIN TesCFDICobranzaSegmentos ON
TesCFDICobranzaSegmentos.TesCFDICobranza =tesCFDICobranza.tesCFDICobranza 
INNER JOIN genSegmentos ON 
genSegmentos.genSegmentos =  TesCFDICobranzaSegmentos.Segmento_Id
INNER JOIN genSucursalesEmpr ON genSucursalesEmpr.genSucursalesEmpr = tesCFDICobranza.Sucursal
WHERE  
	genSegmentos.Segmento_Id = @pSegmento_Id and 
	TesCFDICobranzaSegmentos.Segmento1N = @pSegmento1N and 
	TesCFDICobranzaSegmentos.Segmento2N = @pSegmento2N and 
	TesCFDICobranzaSegmentos.Segmento3N = @pSegmento3N and 
	TesCFDICobranzaSegmentos.Segmento4N = @pSegmento4N and 
	TesCFDICobranzaSegmentos.Segmento1C = @pSegmento1C and 
	TesCFDICobranzaSegmentos.Segmento2C = @pSegmento2C and 
	TesCFDICobranzaSegmentos.Segmento3C = @pSegmento3C and 
	TesCFDICobranzaSegmentos.Segmento4C = @pSegmento4C 


 RETURN @@Error 

GO

DROP PROCEDURE tesCFDICobranzaEliminar
GO
CREATE PROCEDURE tesCFDICobranzaEliminar
(
	@ptesCFDICobranza INT, 
	@pAnulada Char(1)
)
AS
SET NOCOUNT ON 

UPDATE tesCFDICobranza  SET Anulada = @pAnulada WHERE tesCFDICobranza =  @ptesCFDICobranza 

RETURN @@Error 

GO

GO



DROP PROCEDURE tesCFDICobranzaDatosInt
GO
CREATE PROCEDURE tesCFDICobranzaDatosInt
(
	@ptesCFDICobranza Int
)
AS
SET NOCOUNT ON 

SELECT tesCFDICobranza.tesCFDICobranza, 
	genSegmentos.Segmento_Id,  TesCFDICobranzaSegmentos.Segmento1N, TesCFDICobranzaSegmentos.Segmento2N,
	TesCFDICobranzaSegmentos.Segmento3N, TesCFDICobranzaSegmentos.Segmento4N,
	TesCFDICobranzaSegmentos.Segmento1C, TesCFDICobranzaSegmentos.Segmento2C,
	TesCFDICobranzaSegmentos.Segmento3C, TesCFDICobranzaSegmentos.Segmento4C,
	venClientes.Cliente_Id, venClientes.RazonSocial, 
	genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas, 
	tesCFDICobranza.Fecha,	tesCFDICobranza.SelloDigital, tesCFDICobranza.Xml, 
	tesCFDICobranza.Cadena, tesCFDICobranza.NoCertificado,
	tesCFDICobranza.UUID, tesCFDICobranza.FechaTimbrado, tesCFDICobranza.SelloSat, 
	tesCFDICobranza.NoCertificadoSat,
	tesCFDICobranza.RfcProvCertif, tesCFDICobranza.Leyenda, tesCFDICobranza.Anulada, genSucursalesEmpr.Sucursal
FROM tesCFDICobranza 
INNER JOIN venClientes  ON (venClientes.genEntidades = tesCFDICobranza.Cliente_Id)
INNER JOIN genMonedas  ON (genMonedas.genMonedas = tesCFDICobranza.Moneda_Id)
INNER JOIN TesCFDICobranzaSegmentos ON
TesCFDICobranzaSegmentos.TesCFDICobranza =tesCFDICobranza.tesCFDICobranza 
INNER JOIN genSegmentos ON 
genSegmentos.genSegmentos =  TesCFDICobranzaSegmentos.Segmento_Id
INNER JOIN genSucursalesEmpr ON genSucursalesEmpr.genSucursalesEmpr = tesCFDICobranza.Sucursal
WHERE  
	tesCFDICobranza.tesCFDICobranza = @ptesCFDICobranza


 RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\TesCFDICobranzaCuerpo.sql*/
DROP PROCEDURE TesCFDICobranzaCuerpoGuardar
GO
CREATE PROCEDURE TesCFDICobranzaCuerpoGuardar
(
@pTesCFDICobranza int,
@ptesMovimientos bigint
)
AS
	INSERT INTO TesCFDICobranzaCuerpo
	(
		TesCFDICobranza,
		tesMovimientos
	)
	VALUES 
	(
		@pTesCFDICobranza,
		@ptesMovimientos
	)

GO

DROP PROCEDURE TesCFDICobranzaCuerpoDatos
GO
CREATE PROCEDURE TesCFDICobranzaCuerpoDatos
(
@pTesCFDICobranza int=NULL,
@ptesMovimientos bigint=NULL
)
AS
SET NOCOUNT ON 

SELECT TesCFDICobranzaCuerpo.TesCFDICobranza, TesCFDICobranzaCuerpo.tesMovimientos 
FROM TesCFDICobranzaCuerpo 
INNER JOIN tesCFDICobranza  ON (tesCFDICobranza.tesCFDICobranza = TesCFDICobranzaCuerpo.TesCFDICobranza)
INNER JOIN tesMovimientos  ON (tesMovimientos.tesMovimientos = TesCFDICobranzaCuerpo.tesMovimientos)
INNER JOIN conAsientos ON 
conAsientos.conAsientos =TesCFDICobranzaCuerpo.tesMovimientos
WHERE (TesCFDICobranzaCuerpo.TesCFDICobranza = isnull(@pTesCFDICobranza,TesCFDICobranzaCuerpo.TesCFDICobranza))
AND (TesCFDICobranzaCuerpo.tesMovimientos = ISNULL(@ptesMovimientos,TesCFDICobranzaCuerpo.tesMovimientos)) AND 
conAsientos.Anulado = 0 AND 
 tesCFDICobranza.Anulada = ' '
RETURN @@Error 

GO

DROP PROCEDURE TesCFDICobranzaCuerpoEliminar
GO
CREATE PROCEDURE TesCFDICobranzaCuerpoEliminar
(
@pTesCFDICobranza int,
@ptesMovimientos bigint
)
AS
SET NOCOUNT ON 

DELETE FROM TesCFDICobranzaCuerpo 
WHERE (TesCFDICobranza = @pTesCFDICobranza)
AND (tesMovimientos = @ptesMovimientos)
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesCFDICobranzaRel.sql*/
DROP PROCEDURE tesCFDICobranzaRelGuardar
GO
CREATE PROCEDURE tesCFDICobranzaRelGuardar
(
@ptesCFDICobranza int,
@ptesCFDICobranzaR int
)
AS
SET NOCOUNT ON 
	INSERT INTO tesCFDICobranzaRel
	(
		tesCFDICobranza,
		tesCFDICobranzaR
	)
	VALUES 
	(
		@ptesCFDICobranza,
		@ptesCFDICobranzaR
	)

GO

DROP PROCEDURE tesCFDICobranzaRelDatos
GO
CREATE PROCEDURE tesCFDICobranzaRelDatos
(
@ptesCFDICobranza int,
@ptesCFDICobranzaR int=NULL
)
AS
SET NOCOUNT ON 

SELECT  tesCFDICobranzaRel.tesCFDICobranza, tesCFDICobranzaRel.tesCFDICobranzaR
FROM tesCFDICobranzaRel 
WHERE tesCFDICobranza = @ptesCFDICobranza AND 
ISNULL(@ptesCFDICobranzaR,tesCFDICobranzaR) = @ptesCFDICobranzaR
 
RETURN @@Error 

GO

DROP PROCEDURE tesCFDICobranzaRelEliminar
GO
CREATE PROCEDURE tesCFDICobranzaRelEliminar
(
@ptesCFDICobranza int,
@ptesCFDICobranzaR int
)
AS
SET NOCOUNT ON 

DELETE FROM tesCFDICobranzaRel 
WHERE (tesCFDICobranza = @ptesCFDICobranza)
AND (tesCFDICobranzaR = @ptesCFDICobranzaR)
 
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\TesCFDICobranzaSegmentos.sql*/
DROP PROCEDURE TesCFDICobranzaSegmentosGuardar
GO
CREATE PROCEDURE TesCFDICobranzaSegmentosGuardar
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pTesCFDICobranza int,
@pTieneAutomatico bit
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM TesCFDICobranzaSegmentos WHERE (Empresa_Id = @pEmpresa_Id) AND 
	(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
		(Segmento1N = @pSegmento1N) AND (Segmento2N = @pSegmento2N) AND (Segmento3N = @pSegmento3N) AND (Segmento4N = @pSegmento4N) AND 
		(Segmento1C = @pSegmento1C) AND (Segmento2C = @pSegmento2C) AND (Segmento3C = @pSegmento3C) AND (Segmento4C = @pSegmento4C)))
BEGIN 
	UPDATE TesCFDICobranzaSegmentos
	SET		Empresa_Id = @pEmpresa_Id,
		TesCFDICobranza = @pTesCFDICobranza
	WHERE (Empresa_Id = @pEmpresa_Id) AND 
	(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
	(Segmento1N = @pSegmento1N) AND 
	(Segmento2N = @pSegmento2N) AND 
	(Segmento3N = @pSegmento3N) AND 
	(Segmento4N = @pSegmento4N) AND 
	(Segmento1C = @pSegmento1C) AND 
	(Segmento2C = @pSegmento2C) AND 
	(Segmento3C = @pSegmento3C) AND 
	(Segmento4C = @pSegmento4C)
END 
ELSE 
BEGIN 

	if (@pTieneAutomatico=1)
		BEGIN
		
			SET @pSegmento1N = (SELECT MAX(TesCFDICobranzaSegmentos.Segmento1N)+1 AS Segmento1N 
					FROM TesCFDICobranzaSegmentos 
					Where
						TesCFDICobranzaSegmentos.Empresa_id = @pEmpresa_Id and 
						TesCFDICobranzaSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) And
						TesCFDICobranzaSegmentos.Segmento2N = @pSegmento2N And
						TesCFDICobranzaSegmentos.Segmento3N = @pSegmento3N And
						TesCFDICobranzaSegmentos.Segmento4N = @pSegmento4N And
						TesCFDICobranzaSegmentos.Segmento1C = @pSegmento1C And
						TesCFDICobranzaSegmentos.Segmento2C = @pSegmento2C And
						TesCFDICobranzaSegmentos.Segmento3C = @pSegmento3C And
						TesCFDICobranzaSegmentos.Segmento4C = @pSegmento4C)
						
						
			IF (@pSegmento1N IS NULL) 
			begin
				SET @pSegmento1N = (SELECT PrimerNumero
					FROM genContadorSegmento Where
						(genContadorSegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
						(genContadorSegmento.Segmento2N = @pSegmento2N) AND 
						(genContadorSegmento.Segmento3N = @pSegmento3N) AND 
						(genContadorSegmento.Segmento4N = @pSegmento4N) AND 
						(genContadorSegmento.Segmento1C = @pSegmento1C) AND 
						(genContadorSegmento.Segmento2C = @pSegmento2C) AND 
						(genContadorSegmento.Segmento3C = @pSegmento3C) AND 
						(genContadorSegmento.Segmento4C = @pSegmento4C) and 
						genContadorSegmento.Empresa_id = @pEmpresa_id and 
						genContadorSegmento.Segmento_Id =dbo.FuncFKgenSegmentos(@pSegmento_Id))
								
			end

	end

	INSERT INTO TesCFDICobranzaSegmentos
	(
		Empresa_Id,
		Segmento_Id,
		Segmento1N,
		Segmento2N,
		Segmento3N,
		Segmento4N,
		Segmento1C,
		Segmento2C,
		Segmento3C,
		Segmento4C,
		TesCFDICobranza
	)
	VALUES 
	(
		@pEmpresa_Id,
		dbo.FuncFKgenSegmentos(@pSegmento_Id),
		@pSegmento1N,
		@pSegmento2N,
		@pSegmento3N,
		@pSegmento4N,
		@pSegmento1C,
		@pSegmento2C,
		@pSegmento3C,
		@pSegmento4C,
		@pTesCFDICobranza
	)

end
SELECT @pSegmento1N as RetVal
GO

DROP PROCEDURE TesCFDICobranzaSegmentosDatos
GO
CREATE PROCEDURE TesCFDICobranzaSegmentosDatos
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20)
)
AS
SET NOCOUNT ON 

SELECT TesCFDICobranzaSegmentos.Empresa_Id, genSegmentos.Segmento_Id, genSegmentos.Descripcion as DescripcionSegmentos, 
	TesCFDICobranzaSegmentos.Segmento1N,
	TesCFDICobranzaSegmentos.Segmento2N, TesCFDICobranzaSegmentos.Segmento3N, TesCFDICobranzaSegmentos.Segmento4N, 
	TesCFDICobranzaSegmentos.Segmento1C, tesCFDICobranzaSegmentos.Segmento2C, TesCFDICobranzaSegmentos.Segmento3C, 
	TesCFDICobranzaSegmentos.Segmento4C, TesCFDICobranzaSegmentos.TesCFDICobranza, genSegmentos.TieneColumnaAutomatica TieneAutomatico
FROM TesCFDICobranzaSegmentos 
INNER JOIN genSegmentos  ON (genSegmentos.genSegmentos = TesCFDICobranzaSegmentos.Segmento_Id)
INNER JOIN tesCFDICobranza  ON (tesCFDICobranza.tesCFDICobranza = TesCFDICobranzaSegmentos.TesCFDICobranza)
WHERE (TesCFDICobranzaSegmentos.Empresa_Id = @pEmpresa_Id)
AND (genSegmentos.Segmento_Id = @pSegmento_Id)
AND (TesCFDICobranzaSegmentos.Segmento1N = @pSegmento1N)
AND (TesCFDICobranzaSegmentos.Segmento2N = @pSegmento2N)
AND (TesCFDICobranzaSegmentos.Segmento3N = @pSegmento3N)
AND (TesCFDICobranzaSegmentos.Segmento4N = @pSegmento4N)
AND (TesCFDICobranzaSegmentos.Segmento1C = @pSegmento1C)
AND (TesCFDICobranzaSegmentos.Segmento2C = @pSegmento2C)
AND (TesCFDICobranzaSegmentos.Segmento3C = @pSegmento3C)
AND (TesCFDICobranzaSegmentos.Segmento4C = @pSegmento4C)
 
 RETURN @@Error 

GO

DROP PROCEDURE TesCFDICobranzaSegmentosEliminar
GO
CREATE PROCEDURE TesCFDICobranzaSegmentosEliminar
(
@pEmpresa_Id int,
@pSegmento_Id varchar(10),
@pSegmento1N int = NULL,
@pSegmento2N int = NULL,
@pSegmento3N int = NULL,
@pSegmento4N int = NULL,
@pSegmento1C varchar(20) = NULL,
@pSegmento2C varchar(20) = NULL,
@pSegmento3C varchar(20) = NULL,
@pSegmento4C varchar(20) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM TesCFDICobranzaSegmentos 
WHERE (Empresa_Id = @pEmpresa_Id)
AND (Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id))
AND (Segmento1N = ISNULL(@pSegmento1N, Segmento1N))
AND (Segmento2N = ISNULL(@pSegmento2N, Segmento2N))
AND (Segmento3N = ISNULL(@pSegmento3N, Segmento3N))
AND (Segmento4N = ISNULL(@pSegmento4N, Segmento4N))
AND (Segmento1C = ISNULL(@pSegmento1C, Segmento1C))
AND (Segmento2C = ISNULL(@pSegmento2C, Segmento2C))
AND (Segmento3C = ISNULL(@pSegmento3C, Segmento3C))
AND (Segmento4C = ISNULL(@pSegmento4C, Segmento4C))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesCheqProp.sql*/
DROP PROCEDURE tesCheqPropGuardar
GO
CREATE PROCEDURE tesCheqPropGuardar
(
@pEmpresa_Id int,
@pCartera_Id VarChar(5),
@pChequera_Id int,
@pnumCheque int,
@pnumCheque_Nuevo int,
@pFechaVencimiento datetime,
@pFechaDebito datetime = NULL,
@paLaOrden varchar(120),
@pEstado_Id char(1),
@pSecuenciaActual smallint,
@pCuit qCuit = NULL,
@pCuentaDestino varchar(50) = NULL,
@pBancoDestino varchar(3) = NULL,
@pBancoDestinoExt varchar(150) = NULL
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM tesCheqProp WHERE (Empresa_Id = @pEmpresa_Id) AND
 (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id)) AND 
 (Chequera_Id = @pChequera_Id) AND (numCheque = @pnumCheque)))
BEGIN 
	UPDATE tesCheqProp
	SET	@lIdentidad = tesCheqProp,
		Empresa_Id = @pEmpresa_Id,
		Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id),
		Chequera_Id = @pChequera_Id,
		numCheque = @pnumCheque_Nuevo,
		FechaVencimiento = @pFechaVencimiento,
		FechaDebito = @pFechaDebito,
		aLaOrden = @paLaOrden,
		Estado_Id = @pEstado_Id,
		SecuenciaActual = @pSecuenciaActual,
		Cuit = @pCuit,
		CuentaDestino = @pCuentaDestino,
		BancoDestino = dbo.FuncFKtesBancos(@pBancoDestino),
		BancoDestinoExt = @pBancoDestinoExt
	WHERE (Empresa_Id = @pEmpresa_Id) 
		AND (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id)) AND 
		(Chequera_Id = @pChequera_Id) AND (numCheque = @pnumCheque)
END 
ELSE 
BEGIN 
	INSERT INTO tesCheqProp
	(
		Empresa_Id,
		Cartera_Id,
		Chequera_Id,
		numCheque,
		FechaVencimiento,
		FechaDebito,
		aLaOrden,
		Estado_Id,
		SecuenciaActual,
		Cuit,
		CuentaDestino,
		BancoDestino,
		BancoDestinoExt
	)
	VALUES 
	(
		@pEmpresa_Id,
		dbo.FuncFKtesIdentifica(@pCartera_Id),
		@pChequera_Id,
		@pnumCheque,
		@pFechaVencimiento,
		@pFechaDebito,
		@paLaOrden,
		@pEstado_Id,
		@pSecuenciaActual,
		@pCuit,
		@pCuentaDestino,
		dbo.FuncFKtesBancos(@pBancoDestino),
		@pBancoDestinoExt
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE tesCheqPropDatos
GO
CREATE PROCEDURE tesCheqPropDatos
(
@pEmpresa_Id int,
@pCartera_Id VarChar(5),
@pChequera_Id int,
@pnumCheque int
)
AS
SET NOCOUNT ON 

SELECT tesCheqProp.tesCheqProp, tesCheqProp.Empresa_Id, tesIdentifica.Cartera_Id, 
	tesIdentifica.Descripcion as DescripcionIdBancoPropio,
	tesCheqProp.Chequera_Id, 
	tesCheqProp.numCheque, tesCheqProp.FechaVencimiento, tesCheqProp.FechaDebito, tesCheqProp.aLaOrden,
	tesCheqProp.Estado_Id, tesCheqPropEstado.Descripcion as DescripcionCheqPropEstado, tesCheqProp.SecuenciaActual, tesCheqProp.Cuit,
	tesCheqProp.CuentaDestino, tesBancos.Banco_Id, tesBancos.Descripcion as DescripcionBancos, tesCheqProp.BancoDestinoExt
FROM tesCheqProp 
INNER JOIN tesIdentifica ON (tesIdentifica.tesIdentifica = tesCheqProp.Cartera_Id)
INNER JOIN tesIdBancoPropio  ON (tesIdBancoPropio.Cartera_Id = tesCheqProp.Cartera_Id)
INNER JOIN tesChequeras  ON (tesChequeras.Chequera_Id = tesCheqProp.Chequera_Id) AND (tesChequeras.Cartera_Id = tesCheqProp.Cartera_Id) AND (tesChequeras.Empresa_Id = tesCheqProp.Empresa_Id)
INNER JOIN tesCheqPropEstado  ON (tesCheqPropEstado.Estado_Id = tesCheqProp.Estado_Id)
LEFT JOIN tesBancos  ON (tesBancos.tesBancos = tesCheqProp.BancoDestino)
WHERE (tesCheqProp.Empresa_Id = @pEmpresa_Id)
AND (tesCheqProp.Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id))
AND (tesCheqProp.Chequera_Id = @pChequera_Id)
AND (tesCheqProp.numCheque = @pnumCheque)
 


 Declare @pidentity bigint= dbo.FuncFKtesCheqProp(@pEmpresa_Id,@pCartera_Id,@pChequera_Id,@pnumCheque)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'tesCheqProp'
 RETURN @@Error 

GO

DROP PROCEDURE tesCheqPropEliminar
GO
CREATE PROCEDURE tesCheqPropEliminar
(
@pEmpresa_Id int,
@pCartera_Id VarChar(5),
@pChequera_Id int,
@pnumCheque int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM tesCheqProp 
WHERE (Empresa_Id = @pEmpresa_Id)
AND (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id))
AND (Chequera_Id = @pChequera_Id)
AND (numCheque = @pnumCheque)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKtesCheqProp
GO

CREATE FUNCTION FuncFKtesCheqProp
(
@pEmpresa_Id int,
@pCartera_Id varChar(5),
@pChequera_Id int,
@pnumCheque int
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = tesCheqProp FROM tesCheqProp WHERE 
	Empresa_Id = @pEmpresa_Id AND 
	Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id) AND 
	Chequera_Id = @pChequera_Id AND 
	numCheque = @pnumCheque
  RETURN @pIdentity
END

GO

Drop Procedure tesBPLinkDatosXSecuencia
Go
Create Procedure tesBPLinkDatosXSecuencia
(
@pEmpresa_Id int,
@pCartera_Id varChar(5),
@pChequera_Id int,
@pnumCheque int,
@pSecuencia smallint
)
As

Declare @ltesCheqProp int
Declare @ltesMovimientos bigint
Declare @lconRenglon int

Set @ltesCheqProp = dbo.FuncFKtesCheqProp(@pEmpresa_Id, @pCartera_Id, @pChequera_Id, @pnumCheque)

Select @ltesMovimientos = tesMovimientos, @lconRenglon = conRenglon
From tesBPlink
Where tesCheqProp = @ltesCheqProp And Secuencia = @pSecuencia

Exec tesBPlinkDatos @ltesMovimientos, @lconRenglon
Go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesCheqPropAnul.sql*/
DROP PROCEDURE tesCheqPropAnulGuardar
GO
CREATE PROCEDURE tesCheqPropAnulGuardar
(
@ptesCheqProp int,
@pFecha_Anul datetime,
@pObservaciones varchar(15),
@pImporte qMonedaD2,
@pFechaOriginal qFecha,
@pUsuario_Id int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesCheqPropAnul WHERE (tesCheqProp = @ptesCheqProp)))
BEGIN 
	UPDATE tesCheqPropAnul
	SET		Fecha_Anul = @pFecha_Anul,
		Observaciones = @pObservaciones,
		Importe = @pImporte,
		FechaOriginal = @pFechaOriginal,
		Usuario_Id = @pUsuario_Id
	WHERE (tesCheqProp = @ptesCheqProp)
END 
ELSE 
BEGIN 
	INSERT INTO tesCheqPropAnul
	(
		tesCheqProp,
		Fecha_Anul,
		Observaciones,
		Importe,
		FechaOriginal,
		Usuario_Id
	)
	VALUES 
	(
		@ptesCheqProp,
		@pFecha_Anul,
		@pObservaciones,
		@pImporte,
		@pFechaOriginal,
		@pUsuario_Id
	)
END 

GO

DROP PROCEDURE tesCheqPropAnulDatos
GO
CREATE PROCEDURE tesCheqPropAnulDatos
(
@pEmpresa_Id int,
@pCartera_Id VarChar(5),
@pChequera_Id int,
@pnumCheque int
)
AS
SET NOCOUNT ON 

SELECT tesCheqProp.Empresa_Id, tesIdentifica.Cartera_Id, 
	tesCheqProp.Chequera_Id, tesCheqProp.numCheque,
	tesCheqPropAnul.Fecha_Anul, tesCheqPropAnul.Observaciones, tesCheqPropAnul.Importe,
	tesCheqPropAnul.FechaOriginal, 
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario
FROM tesCheqPropAnul 
INNER JOIN tesCheqProp  ON (tesCheqProp.tesCheqProp = tesCheqPropAnul.tesCheqProp)
INNER JOIN tesIdentifica ON tesIdentifica.tesIdentifica = tesCheqProp.Cartera_Id
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = tesCheqPropAnul.Usuario_Id)
WHERE (tesCheqProp.Empresa_Id = @pEmpresa_Id)
AND (tesCheqProp.Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id))
AND (tesCheqProp.Chequera_Id = @pChequera_Id)
AND (tesCheqProp.numCheque = @pnumCheque)
 
RETURN @@Error 

GO

DROP PROCEDURE tesCheqPropAnulEliminar
GO
CREATE PROCEDURE tesCheqPropAnulEliminar
(
@ptesCheqProp int
)
AS
SET NOCOUNT ON 

DELETE FROM tesCheqPropAnul 
WHERE (tesCheqProp = @ptesCheqProp)
 
 RETURN @@Error 

GO

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesCheqPropDiferidos.sql*/
Drop procedure tesCheqPropDiferidosDatos
Go
Create procedure tesCheqPropDiferidosDatos
(
@pFechaHasta Datetime,
@pEmpresa_Id Int
)
As

Select @pFechaHasta FechaHasta

Select tesCheqProp.tesCheqProp, tesIdentifica.Cartera_Id, tesIdentifica.Descripcion DescripcionCartera, tesCheqProp.Chequera_Id,
tesCheqProp.FechaVencimiento, tesCheqProp.aLaOrden, tesCheqProp.numCheque, tesCheqProp.Estado_Id, tesCheqProp.SecuenciaActual,
conMovCont.Importe, conMovCont.ImporteMonedaOriginal, conMovCont.TipoMov, tesRengMovi.tesMovimientos, tesRengMovi.conRenglon,
conCentro1.Centro1_Id, conCentro2.Centro2_Id, genMonedas.Moneda_Id
From tesCheqProp
Inner Join tesIdentifica On tesIdentifica.tesIdentifica = tesCheqProp.Cartera_Id
Inner Join tesBPlink On tesBPlink.tesCheqProp = tesCheqProp.tesCheqProp
Inner Join tesRengMovi On tesRengMovi.tesMovimientos = tesBPlink.tesMovimientos And
	tesRengMovi.conRenglon = tesBPlink.conRenglon
Inner Join conMovCont On conMovCont.conAsientos = tesRengMovi.tesMovimientos And
	conMovCont.Renglon = tesRengMovi.conRenglon
Inner Join conAsientos On conAsientos.conAsientos = tesRengMovi.tesMovimientos
Inner Join conCuentas On conCuentas.conCuentas = conMovCont.Cuenta_Id
Left Join conCentro1 On conCentro1.conCentro1 = conMovCont.Centro1_Id
Left Join conCentro2 On conCentro2.conCentro2 = conMovCont.Centro2_Id
Inner Join genMonedas On genMonedas.genMonedas = tesIdentifica.Moneda_Id
Where conAsientos.Empresa_Id = @pEmpresa_Id And tesCheqProp.Estado_Id = 'I' And
tesCheqProp.FechaVencimiento <= @pFechaHasta
Order By genMonedas.Moneda_Id, tesIdentifica.Cartera_Id
Go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesCheqPropEstado.sql*/
DROP PROCEDURE tesCheqPropEstadoGuardar
GO
CREATE PROCEDURE tesCheqPropEstadoGuardar
(
@pEstado_Id char(1),
@pDescripcion varchar(60)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesCheqPropEstado WHERE (Estado_Id = @pEstado_Id)))
BEGIN 
	UPDATE tesCheqPropEstado
	SET		Descripcion = @pDescripcion
	WHERE (Estado_Id = @pEstado_Id)
END 
ELSE 
BEGIN 
	INSERT INTO tesCheqPropEstado
	(
		Estado_Id,
		Descripcion
	)
	VALUES 
	(
		@pEstado_Id,
		@pDescripcion
	)
END 

GO

DROP PROCEDURE tesCheqPropEstadoDatos
GO
CREATE PROCEDURE tesCheqPropEstadoDatos
(
@pEstado_Id char(1)
)
AS
SET NOCOUNT ON 

SELECT tesCheqPropEstado.Estado_Id, tesCheqPropEstado.Descripcion
FROM tesCheqPropEstado 
WHERE (Estado_Id = @pEstado_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE tesCheqPropEstadoEliminar
GO
CREATE PROCEDURE tesCheqPropEstadoEliminar
(
@pEstado_Id char(1) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM tesCheqPropEstado 
WHERE (Estado_Id = ISNULL(@pEstado_Id, Estado_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesCheqPropImpresion.sql*/
Drop procedure tesCheqPropImpresion
Go

Create procedure tesCheqPropImpresion
(
@pEmpresa_Id int,
@pCartera_Id varChar(5),
@pChequera_Id int,
@pNumChequeDesde int,
@pNumChequeHasta int = Null
)
As

Select @pCartera_Id Cartera_Id, '' DescripcionCartera, @pChequera_Id Chequera_Id,
@pNumChequeDesde NumChequeDesde, isNull(@pNumChequeHasta, 0) NumChequeHasta


Select conAsientos.Fecha, tesCheqProp.FechaVencimiento, tesCheqProp.tesCheqProp, conMovCont.ImporteMonedaOriginal Importe, tesCheqProp.aLaOrden
From tesCheqProp
Inner Join tesBPlink On tesBPlink.tesCheqProp = tesCheqProp.tesCheqProp
Inner Join tesRengMovi On tesRengMovi.tesMovimientos = tesBPlink.tesMovimientos And tesRengMovi.conRenglon = tesBPlink.conRenglon
Inner Join tesIdentifica On tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id
Inner Join conMovCont On conMovCont.conAsientos = tesBPlink.tesMovimientos And conMovCont.Renglon = tesBPlink.conRenglon
Inner Join conAsientos On conAsientos.conAsientos = conMovCont.conAsientos
Where tesBPlink.Secuencia = 1 And conAsientos.Empresa_Id = @pEmpresa_Id And
tesIdentifica.Cartera_Id = @pCartera_Id And tesCheqProp.Chequera_Id = @pChequera_Id And
tesCheqProp.numCheque Between @pNumChequeDesde And IsNull(@pNumChequeHasta, 999999999)
Go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesCheqTerceros.sql*/
DROP PROCEDURE tesCheqTercerosGuardar
GO
CREATE PROCEDURE tesCheqTercerosGuardar
(
@ptesCheqTerceros int,
@pCartera_Id VarChar(5),
@pBanco_Id varchar(3),
@pClearing varchar(3),
@pSecuenciaActual smallint,
@pClearingDias smallint,
@pFechaVencimiento datetime,
@pFechaAcreditacion datetime = NULL,
@pFechaConciliacion datetime = NULL,
@psucBanco varchar(15),
@pnumCheque int,
@pEstado_Id char(1),
@pCliente_Id VarChar(15) = NULL,
@pcuentaBanco varchar(15),
@pBancoConc char(5) = NULL,
@pNumeroConc int = NULL,
@pEmpresa_Id int = NULL,
@pBancoConcVta char(5) = NULL,
@pNumeroConcVta int = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesCheqTerceros WHERE (tesCheqTerceros = @ptesCheqTerceros)))
BEGIN 
	UPDATE tesCheqTerceros
	SET		Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id),
		Banco_Id = dbo.FuncFKtesBancos(@pBanco_Id),
		Clearing = @pClearing,
		SecuenciaActual = @pSecuenciaActual,
		ClearingDias = @pClearingDias,
		FechaVencimiento = @pFechaVencimiento,
		FechaAcreditacion = @pFechaAcreditacion,
		FechaConciliacion = @pFechaConciliacion,
		sucBanco = @psucBanco,
		numCheque = @pnumCheque,
		Estado_Id = @pEstado_Id,
		Cliente_Id = dbo.FuncFKvenClientes(@pCliente_Id),
		cuentaBanco = @pcuentaBanco,
		BancoConc = dbo.FuncFKtesIdentifica(@pBancoConc),
		NumeroConc = @pNumeroConc,
		BancoConcVta = dbo.FuncFKtesIdentifica(@pBancoConcVta),
		NumeroConcVta = @pNumeroConcVta, 
		Empresa_Id = @pEmpresa_Id
	WHERE (tesCheqTerceros = @ptesCheqTerceros)
END 
ELSE 
BEGIN 
	INSERT INTO tesCheqTerceros
	(
		Cartera_Id,
		Banco_Id,
		Clearing,
		SecuenciaActual,
		ClearingDias,
		FechaVencimiento,
		FechaAcreditacion,
		FechaConciliacion,
		sucBanco,
		numCheque,
		Estado_Id,
		Cliente_Id,
		cuentaBanco,
		BancoConc,
		NumeroConc,
		Empresa_Id,
		BancoConcVta,
		NumeroConcVta
	)
	VALUES 
	(
		dbo.FuncFKtesIdentifica(@pCartera_Id),
		dbo.FuncFKtesBancos(@pBanco_Id),
		@pClearing,
		@pSecuenciaActual,
		@pClearingDias,
		@pFechaVencimiento,
		@pFechaAcreditacion,
		@pFechaConciliacion,
		@psucBanco,
		@pnumCheque,
		@pEstado_Id,
		dbo.FuncFKvenClientes(@pCliente_Id),
		@pcuentaBanco,
		dbo.FuncFKtesIdentifica(@pBancoConc),
		@pNumeroConc,
		@pEmpresa_Id,
		dbo.FuncFKtesIdentifica(@pBancoConcVta),
		@pNumeroConcVta
	)

SET @ptesCheqTerceros =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @ptesCheqTerceros as RetVal 

GO


DROP PROCEDURE tesCheqTercerosDatos
GO
CREATE PROCEDURE tesCheqTercerosDatos
(
@ptesCheqTerceros int
)
AS
SET NOCOUNT ON 

SELECT tesCheqTerceros.tesCheqTerceros, tesIdentifica.Cartera_Id, 
	tesIdentifica.Descripcion as DescripcionIdentifica, 
	tesBancos.Banco_Id,	tesBancos.Descripcion as DescripcionBancos, 
	tesCheqTerceros.Clearing, tesClearing.Descripcion as DescripcionClearing, 
	tesCheqTerceros.SecuenciaActual, tesCheqTerceros.ClearingDias, 
	tesCheqTerceros.FechaVencimiento, tesCheqTerceros.FechaAcreditacion, 
	tesCheqTerceros.FechaConciliacion,	tesCheqTerceros.sucBanco, tesCheqTerceros.numCheque, 
	tesCheqTerEstado.Estado_Id, tesCheqTerEstado.Descripcion as DescripcionCheqTerEstado,
	venClientes.Cliente_Id, venClientes.RazonSocial as DescripcionClientes, 
	tesCheqTerceros.cuentaBanco, BancoConc.Cartera_Id BancoConc,
	tesCheqTerceros.NumeroConc,  BancoConcVta.Cartera_Id BancoConcVta, tesCheqTerceros.NumeroConcVta,
	tesCheqTerceros.Empresa_Id
FROM tesCheqTerceros 
INNER JOIN tesIdentifica ON tesIdentifica.tesIdentifica = tesCheqTerceros.Cartera_Id
INNER JOIN tesIdCheqTerceros  ON (tesIdCheqTerceros.Cartera_Id = tesCheqTerceros.Cartera_Id)
INNER JOIN tesBancos  ON (tesBancos.tesBancos = tesCheqTerceros.Banco_Id)
INNER JOIN tesClearing  ON (tesClearing.Clearing = tesCheqTerceros.Clearing)
INNER JOIN tesCheqTerEstado  ON (tesCheqTerEstado.Estado_Id = tesCheqTerceros.Estado_Id)
LEFT JOIN venClientes  ON (venClientes.genEntidades = tesCheqTerceros.Cliente_Id)
LEFT JOIN tesIdentifica BancoConc ON BancoConc.tesIdentifica = tesCheqTerceros.BancoConc
LEFT JOIN tesIdentifica BancoConcVta ON BancoConcVta.tesIdentifica = tesCheqTerceros.BancoConcVta
WHERE (tesCheqTerceros = @ptesCheqTerceros)
 
 RETURN @@Error 

GO

DROP PROCEDURE tesCheqTercerosEliminar
GO
CREATE PROCEDURE tesCheqTercerosEliminar
(
@ptesCheqTerceros int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM tesCheqTerceros 
WHERE (tesCheqTerceros = ISNULL(@ptesCheqTerceros, tesCheqTerceros))
 
 RETURN @@Error 

GO



DROP PROCEDURE tesCheqTercerosConciliar
GO
CREATE PROCEDURE tesCheqTercerosConciliar
(
@ptesCheqTerceros int,
@pBancoConc char(5), 
@pNumeroConc int , 
@pEmpresa_Id int
)
AS
	UPDATE tesCheqTerceros
		SET BancoConc = dbo.FuncFKtesIdentifica(@pBancoConc),
		NumeroConc = @pNumeroConc, Empresa_Id = @pEmpresa_Id
	WHERE (tesCheqTerceros = @ptesCheqTerceros)
GO


DROP PROCEDURE tesCheqTercerosBancoDepo
GO
CREATE PROCEDURE tesCheqTercerosBancoDepo
(
	@pTesCheqterceros int
)
AS

SELECT tesIdentifica.Cartera_Id, tesIdentifica.Descripcion
 FROM tesCTlink INNER JOIN tesRengMovi on
	tesCTlink.tesMovimientos = tesRengMovi.tesMovimientos 
	INNER JOIN conMovCont ON 
	conMovCont.conAsientos = tesRengMovi.tesMovimientos  AND 
	conMovCont.Renglon = tesRengMovi.conRenglon AND
	conMovCont.TipoMov = 1
	INNER JOIN tesIdentifica ON
	tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id
	where tesCTlink.Estado_Id = 'N' AND 
		tesCTlink.tesCheqTerceros = @pTesCheqterceros
GO



DROP PROCEDURE tesCheqTercerosModificar
GO
CREATE PROCEDURE tesCheqTercerosModificar
(
@ptesCheqTerceros int,
@pBanco_Id varchar(3),
@pClearing varchar(3),
@pFechaVencimiento datetime,
@psucBanco varchar(15),
@pnumCheque int,
@pEmpresa_Id int = NULL,
@pcuentaBanco varchar(15)
)
AS
SET NOCOUNT ON 
BEGIN 
	UPDATE tesCheqTerceros
	SET	Banco_Id = dbo.FuncFKtesBancos(@pBanco_Id),
		Clearing = @pClearing,
		FechaVencimiento = @pFechaVencimiento,
		sucBanco = @psucBanco,
		numCheque = @pnumCheque,
		cuentaBanco = @pcuentaBanco,
		Empresa_Id = @pEmpresa_Id
	WHERE (tesCheqTerceros = @ptesCheqTerceros)
END 
GO

DROP PROCEDURE tesCheqTercerosProveedor
GO
CREATE PROCEDURE tesCheqTercerosProveedor
(
	@pTesCheqterceros int
)
AS

SELECT comProveedores.Proveed_Id, comProveedores.RazonSocial, genMonedas.Moneda_Id, genMonedas.Descripcion DescripcionMoneda,
conAsientos.Cambio, conAsientos.CambioMonedaOriginal, conCuentas.Cuenta_Id, conCuentas.Descripcion DescripcionCuenta, comMovProv.TipoCtaProv
FROM tesCTlink 
INNER JOIN tesRengMovi On tesCTlink.tesMovimientos = tesRengMovi.tesMovimientos 
INNER JOIN conMovCont ON conMovCont.conAsientos = tesRengMovi.tesMovimientos  AND 
	conMovCont.Renglon = tesRengMovi.conRenglon AND
	conMovCont.TipoMov = 1
INNER JOIN comMovProv ON comMovProv.comMovProv = tesCTlink.tesMovimientos
Inner Join comProveedores On comProveedores.genEntidades = comMovProv.Proveed_Id
Inner Join conAsientos On conAsientos.conAsientos = comMovProv.comMovProv
Inner Join genMonedas On genMonedas.genMonedas = conAsientos.Moneda_Id
Inner Join conCuentas On conCuentas.conCuentas = conMovCont.Cuenta_Id
Where tesCTlink.Estado_Id = 'P' AND tesCTlink.tesCheqTerceros = @pTesCheqterceros
GO

DROP PROCEDURE tesCheqTercerosEgresosVarios
GO
CREATE PROCEDURE tesCheqTercerosEgresosVarios
(
	@pTesCheqterceros int
)
AS

SELECT genMonedas.Moneda_Id, genMonedas.Descripcion DescripcionMoneda, tesIdentifica.Cartera_Id, tesIdentifica.Descripcion DescripcionIdentifica,
conAsientos.Cambio, conAsientos.CambioMonedaOriginal, conCuentas.Cuenta_Id, conCuentas.Descripcion DescripcionCuenta,
conCentro1.Centro1_Id, conCentro1.Descripcion DescripcionCentro1, conCentro2.Centro2_Id, conCentro2.Descripcion DescripcionCentro2
FROM tesCTlink
Inner Join tesCheqTerceros On tesCheqTerceros.tesCheqTerceros = tesCTLink.tesCheqTerceros
INNER JOIN tesRengMovi On tesCTlink.tesMovimientos = tesRengMovi.tesMovimientos 
INNER JOIN conMovCont ON conMovCont.conAsientos = tesRengMovi.tesMovimientos  AND 
	conMovCont.Renglon = tesRengMovi.conRenglon AND
	conMovCont.TipoMov = 1
Inner Join conAsientos On conAsientos.conAsientos = tesCTlink.tesMovimientos
Inner Join genMonedas On genMonedas.genMonedas = conAsientos.Moneda_Id
Inner Join tesIdentifica On tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id
Inner Join conCuentas On conCuentas.conCuentas = conMovCont.Cuenta_Id
Left Join conCentro1 On conCentro1.conCentro1 = conMovCont.Centro1_Id
Left Join conCentro2 On conCentro2.conCentro2 = conMovCont.Centro2_Id
Inner Join genMenus On genMenus.Formulario_Id = conAsientos.Formulario_Id
Where genMenus.Orden = '622020' And tesCTlink.Secuencia = tesCheqTerceros.SecuenciaActual And tesCTlink.tesCheqTerceros = @pTesCheqterceros
GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesCheqTercerosCambios.sql*/
DROP PROCEDURE tesCheqTercerosCambioDatos
GO
CREATE PROCEDURE tesCheqTercerosCambioDatos
(
@FechaVencimiento DATETIME = NULL,
@Banco_Id VARCHAR(3) = NULL,
@numCheque INT = NULL,
@Importe qMonedaD2 = NULL
)
AS
SELECT @FechaVencimiento FechaVencimiento, @Banco_Id Banco_Id, '' DescBanco, @numCheque numCheque, @Importe Importe 

SELECT tesCheqTerceros.FechaVencimiento, tesCheqTerceros.tesCheqTerceros,
dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, 
genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Segmento, 
tesIdentifica.Cartera_Id, tesIdentifica.Cartera_Id DescCartera, 
tesBancos.Banco_Id, tesBancos.Descripcion DescBanco, tesCheqTerceros.numCheque,
tesCheqTerceros.sucBanco, tesCheqTerceros.Estado_Id, tesCheqTerEstado.Descripcion DescEstado,
conMovCont.Importe, tesCheqTerceros.Empresa_Id, 
tesCheqTerceros.Clearing, tesClearing.Descripcion as DescripcionClearing, 
tesCheqTerceros.SecuenciaActual, tesCheqTerceros.ClearingDias,
tesCheqTerceros.cuentaBanco, CAST(0 AS BIT) Marca
FROM tesCheqTerceros
INNER JOIN tesBancos ON tesCheqTerceros.Banco_Id = tesBancos.tesBancos
INNER JOIN tesCTlink ON tesCheqTerceros.tesCheqTerceros = tesCTlink.tesCheqTerceros
INNER JOIN tesMovimientos ON tesCTlink.tesMovimientos = tesMovimientos.tesMovimientos
INNER JOIN tesRengMovi ON tesMovimientos.tesMovimientos = tesRengMovi.tesMovimientos AND
	tesCTlink.conRenglon = tesRengMovi.conRenglon
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = tesMovimientos.tesMovimientos
INNER JOIN conAsientos ON tesRengMovi.tesMovimientos = conAsientos.conAsientos 
INNER JOIN tesIdentifica ON tesCheqTerceros.Cartera_Id = tesIdentifica.tesIdentifica
INNER JOIN conMovCont ON conMovCont.conAsientos = conAsientos.conAsientos AND
conMovCont.Renglon = tesRengMovi.conRenglon
INNER JOIN tesCheqTerEstado  ON tesCheqTerEstado.Estado_Id = tesCheqTerceros.Estado_Id
INNER JOIN tesClearing  ON tesClearing.Clearing = tesCheqTerceros.Clearing
WHERE tesBancos.Banco_Id = ISNULL(@Banco_Id,tesBancos.Banco_Id) AND
tesCheqTerceros.FechaVencimiento = ISNULL(@FechaVencimiento,tesCheqTerceros.FechaVencimiento) AND
conMovCont.Importe = ISNULL(@Importe,conMovCont.Importe) AND
tesCheqTerceros.numCheque = ISNULL(@numCheque,tesCheqTerceros.numCheque) AND
tesCheqTerceros.SecuenciaActual = 1
ORDER BY tesCheqTerceros.FechaVencimiento



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesCheqTercerosXEstad.sql*/
-- FM 19/08/2021 No ten?a Order by. Ahora Order by tesCheqTerceros.FechaVencimiento
-- tesCheqTercerosXEstadoDatos 1, 'CHMX', 'C', NULL
DROP PROCEDURE tesCheqTercerosXEstadoDatos
GO
CREATE PROCEDURE tesCheqTercerosXEstadoDatos (
	@Empresa_Id int, 
	@Cartera_Id Char(5), 
	@Estado_Id Char(1),
	@FechaHasta DateTime=NULL)
AS

SELECT @Empresa_Id as Empresa_id, @Cartera_Id as Cartera_Id, @Estado_Id as Estado_id, 
	@FechaHasta as FechaDesde, @FechaHasta as FechaHasta


SELECT CAST(0 as bit) as Marca ,
	tesIdentifica.Cartera_Id, tesIdentifica.Descripcion as DescripcionCartera, 
	tesBancos.Banco_Id, tesBancos.Descripcion AS DescripcionBanco,
	tesCheqTerceros.FechaVencimiento, tesCheqTerceros.sucBanco, 
	tesCheqTerceros.numCheque, tesCheqTerceros.Estado_id,
	venClientes.Cliente_Id, venClientes.RazonSocial, 
	tesCheqTerceros.tesCheqTerceros, conMovCont.Importe, 
	conMovCont.ImporteMonedaOriginal 
FROM tesCheqTerceros 
INNER JOIN tesIdentifica ON tesCheqTerceros.Cartera_Id = tesIdentifica.tesIdentifica
INNER JOIN tesBancos ON tesBancos.tesBancos = tesCheqTerceros.Banco_Id
INNER JOIN tesCTlink ON tesCTlink.tesCheqTerceros = tesCheqTerceros.tesCheqTerceros AND
	tesCTlink.Secuencia = tesCheqTerceros.SecuenciaActual
INNER JOIN tesRengMovi ON tesRengMovi.tesMovimientos = tesCTlink.tesMovimientos and 
	tesRengMovi.conRenglon = tesCTlink.conRenglon
INNER JOIN conMovCont ON conMovCont.conAsientos = tesRengMovi.tesMovimientos AND 
	conMovCont.Renglon =tesRengMovi.conRenglon
inner join conAsientos ON conAsientos.conAsientos = conMovCont.conAsientos
LEFT OUTER JOIN  venClientes ON venClientes.genEntidades = tesCheqTerceros.Cliente_Id
WHERE
	conAsientos.Empresa_Id = @Empresa_Id and conAsientos.Anulado = 0 And
	tesIdentifica.Cartera_Id = @Cartera_Id and
	tesCheqTerceros.Estado_Id = @Estado_Id and 
	tesCheqTerceros.FechaVencimiento <= ISNULL(@FechaHasta, tesCheqTerceros.FechaVencimiento)
Order by tesCheqTerceros.FechaVencimiento
GO


-- tesCheqTercerosXEstadoDatos 1, 'CHMX', 'C', NULL
DROP PROCEDURE tesCheqTercerosXEstado2Datos
GO
CREATE PROCEDURE tesCheqTercerosXEstado2Datos (
	@Empresa_Id int, 
	@Cartera_Id Char(5), 
	@Estado_Id Char(1),
	@FechaDesde DateTime,
	@FechaHasta DateTime
	)
AS

SELECT @Empresa_Id as Empresa_id, @Cartera_Id as Cartera_Id, @Estado_Id as Estado_id, 
	@FechaDesde FechaDesde,  @FechaHasta as FechaHasta


SELECT CAST(0 as bit) as Marca ,
	tesIdentifica.Cartera_Id, tesIdentifica.Descripcion as DescripcionCartera, 
	tesBancos.Banco_Id, tesBancos.Descripcion AS DescripcionBanco,
	tesCheqTerceros.FechaVencimiento, tesCheqTerceros.sucBanco, 
	tesCheqTerceros.numCheque, tesCheqTerceros.Estado_id,
	venClientes.Cliente_Id, venClientes.RazonSocial, 
	tesCheqTerceros.tesCheqTerceros, conMovCont.Importe, 
	conMovCont.ImporteMonedaOriginal 
FROM tesCheqTerceros 
INNER JOIN tesIdentifica ON tesCheqTerceros.Cartera_Id = tesIdentifica.tesIdentifica
INNER JOIN tesBancos ON tesBancos.tesBancos = tesCheqTerceros.Banco_Id
INNER JOIN tesCTlink ON tesCTlink.tesCheqTerceros = tesCheqTerceros.tesCheqTerceros AND
	tesCTlink.Secuencia = tesCheqTerceros.SecuenciaActual
INNER JOIN tesRengMovi ON tesRengMovi.tesMovimientos = tesCTlink.tesMovimientos and 
	tesRengMovi.conRenglon = tesCTlink.conRenglon
	INNER JOIN conMovCont ON conMovCont.conAsientos = tesRengMovi.tesMovimientos AND 
	conMovCont.Renglon =tesRengMovi.conRenglon
inner join conAsientos ON conAsientos.conAsientos = conMovCont.conAsientos
LEFT OUTER JOIN  venClientes ON venClientes.genEntidades = tesCheqTerceros.Cliente_Id
WHERE
	conAsientos.Empresa_Id = @Empresa_Id and conAsientos.Anulado = 0 And
	tesIdentifica.Cartera_Id = @Cartera_Id and
	tesCheqTerceros.Estado_Id = @Estado_Id and 
	tesCheqTerceros.FechaVencimiento Between @FechaDesde and @FechaHasta
Order by tesCheqTerceros.FechaVencimiento
GO


-- tesCheqTercerosRechazadosClieDatos 1,'A0005'

DROP PROCEDURE tesCheqTercerosRechazadosClieDatos
GO
CREATE PROCEDURE tesCheqTercerosRechazadosClieDatos (
	@Empresa_Id int, 
	@pCliente_Id VarChar(15), 
	@pCartera_Id VarChar(5)
)
AS

SELECT CAST(0 as bit) as Marca ,
	tesIdentifica.Cartera_Id, tesIdentifica.Descripcion as DescripcionCartera, 
	tesBancos.Banco_Id, tesBancos.Descripcion AS DescripcionBanco,
	tesCheqTerceros.FechaVencimiento, tesCheqTerceros.sucBanco, 
	tesCheqTerceros.numCheque, tesCheqTerceros.Estado_id,
	venClientes.Cliente_Id, venClientes.RazonSocial, 
	tesCheqTerceros.tesCheqTerceros, conMovCont.Importe, 
	conMovCont.ImporteMonedaOriginal 
FROM tesCheqTerceros 
INNER JOIN tesIdentifica ON tesCheqTerceros.Cartera_Id = tesIdentifica.tesIdentifica
INNER JOIN tesBancos ON tesBancos.tesBancos = tesCheqTerceros.Banco_Id
INNER JOIN tesCTlink ON tesCTlink.tesCheqTerceros = tesCheqTerceros.tesCheqTerceros AND
	tesCTlink.Secuencia = tesCheqTerceros.SecuenciaActual
INNER JOIN tesRengMovi ON tesRengMovi.tesMovimientos = tesCTlink.tesMovimientos and 
	tesRengMovi.conRenglon = tesCTlink.conRenglon
INNER JOIN conMovCont ON conMovCont.conAsientos = tesRengMovi.tesMovimientos AND 
	conMovCont.Renglon =tesRengMovi.conRenglon
inner join conAsientos ON conAsientos.conAsientos = conMovCont.conAsientos
LEFT OUTER JOIN  venClientes ON venClientes.genEntidades = tesCheqTerceros.Cliente_Id
WHERE
	conAsientos.Empresa_Id = @Empresa_Id and conAsientos.Anulado = 0 And
	venClientes.Cliente_Id = @pCliente_Id and 
	tesIdentifica.Cartera_Id = @pCartera_Id and 
	tesCheqTerceros.Estado_Id = 'R'
Order by tesCheqTerceros.FechaVencimiento
GO	
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesCheqTerEstado.sql*/
DROP PROCEDURE tesCheqTerEstadoGuardar
GO
CREATE PROCEDURE tesCheqTerEstadoGuardar
(
@pEstado_Id char(1),
@pDescripcion char(35)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesCheqTerEstado WHERE (Estado_Id = @pEstado_Id)))
BEGIN 
	UPDATE tesCheqTerEstado
	SET		Descripcion = @pDescripcion
	WHERE (Estado_Id = @pEstado_Id)
END 
ELSE 
BEGIN 
	INSERT INTO tesCheqTerEstado
	(
		Estado_Id,
		Descripcion
	)
	VALUES 
	(
		@pEstado_Id,
		@pDescripcion
	)
END 

GO

DROP PROCEDURE tesCheqTerEstadoDatos
GO
CREATE PROCEDURE tesCheqTerEstadoDatos
(
@pEstado_Id char(1)
)
AS
SET NOCOUNT ON 

SELECT tesCheqTerEstado.Estado_Id, tesCheqTerEstado.Descripcion
FROM tesCheqTerEstado 
WHERE (Estado_Id = @pEstado_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE tesCheqTerEstadoEliminar
GO
CREATE PROCEDURE tesCheqTerEstadoEliminar
(
@pEstado_Id char(1) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM tesCheqTerEstado 
WHERE (Estado_Id = ISNULL(@pEstado_Id, Estado_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesChequeras.sql*/
--ALTER TABLE tesChequeras add Empresa_id Int NOT NULL

DROP PROCEDURE tesChequerasGuardar
GO
CREATE PROCEDURE tesChequerasGuardar
(
@pChequera_id int,
@pCartera_Id VarChar(5),
@pEmpresa_id Int, 
@pTipoChequera char(1),
@pEstado_id char(1),
@pDesde int,
@pHasta int,
@pProximo int,
@pFechaAlta datetime,
@pFechaBaja datetime = NULL,
@pMotivoBaja varchar(15),
@pInactivo Sino,
@pUsuario_Id int,
@pPosteado Sino
)
AS
SET NOCOUNT ON 
if (@pChequera_id<> 0) 
BEGIN 
	UPDATE tesChequeras
	SET		TipoChequera = @pTipoChequera,
		Empresa_id = @pEmpresa_id,
		Estado_id = @pEstado_id,
		Desde = @pDesde,
		Hasta = @pHasta,
		Proximo = @pProximo,
		FechaAlta = GETDATE(),
		FechaBaja = @pFechaBaja,
		MotivoBaja = @pMotivoBaja,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (Chequera_id = @pChequera_id) AND (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id) And Empresa_Id = @pEmpresa_id)
END 
ELSE 
BEGIN 
	set @pChequera_id = isNull((SELECT MAX(Chequera_id) from tesChequeras where Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id) And Empresa_Id = @pEmpresa_Id),0)+1
	
	INSERT INTO tesChequeras
	(
		Chequera_id,
		Cartera_Id,
		Empresa_id,
		TipoChequera,
		Estado_id,
		Desde,
		Hasta,
		Proximo,
		FechaAlta,
		FechaBaja,
		MotivoBaja,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pChequera_id,
		dbo.FuncFKtesIdentifica(@pCartera_Id),
		@pEmpresa_id,
		@pTipoChequera,
		@pEstado_id,
		@pDesde,
		@pHasta,
		@pProximo,
		GETDATE(),
		@pFechaBaja,
		@pMotivoBaja,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
END 

SELECT @pChequera_id AS RetVal 

GO

DROP PROCEDURE tesChequerasDatos
GO
CREATE PROCEDURE tesChequerasDatos
(
@pChequera_id int,
@pCartera_Id VarChar(5)
)
AS
SET NOCOUNT ON 

SELECT tesChequeras.Chequera_id, tesIdentifica.Cartera_Id, tesIdentifica.Descripcion as DescripcionCartera,
	tesChequeras.Empresa_id, tesChequeras.TipoChequera,
	tesChequeras.Estado_id, tesChequerasEstado.Descripcion as DescripcionChequerasEstado, 
	tesChequeras.Desde, tesChequeras.Hasta,
	tesChequeras.Proximo, tesChequeras.FechaAlta, tesChequeras.FechaBaja, tesChequeras.MotivoBaja,
	tesChequeras.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, tesChequeras.Posteado,
	Cast(0 As Bit) FueUsada
FROM tesChequeras 
INNER JOIN tesIdBancoPropio  ON (tesIdBancoPropio.Cartera_Id = tesChequeras.Cartera_Id)
INNER JOIN tesChequerasEstado  ON (tesChequerasEstado.Estado_Id = tesChequeras.Estado_id)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = tesChequeras.Usuario_Id)
INNER JOIN tesIdentifica ON tesIdentifica.tesIdentifica =TesChequeras.Cartera_Id
LEFT OUTER JOIN tesBancos ON tesBancos.tesBancos = tesIdBancoPropio.Banco_Id
WHERE (Chequera_id = @pChequera_id)
AND (tesChequeras.Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id))
 
 RETURN @@Error 

GO

DROP PROCEDURE tesChequerasEliminar
GO
CREATE PROCEDURE tesChequerasEliminar
(
@pChequera_id int = NULL,
@pCartera_Id VarChar(5)
)
AS
SET NOCOUNT ON 

DELETE FROM tesChequeras 
WHERE (Chequera_id = ISNULL(@pChequera_id, Chequera_id))
AND (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id))
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesChequerasCheques.sql*/
Drop procedure tesChequerasChequesDatos
Go
Create procedure tesChequerasChequesDatos
(
@pEmpresa_Id int,
@pCartera_Id varChar(5),
@pChequera_Id int,
@pnumCheque int = Null
)
As
Select @pCartera_Id Cartera_Id, @pChequera_Id Chequera_Id, @pnumCheque numCheque

Select tesCheqProp.numCheque, conAsientos.Fecha, disFormularios.Formulario_Id, disFormularios.Descripcion DescripcionFormulario,
tesChequeras.TipoChequera, conAsientos.Moneda_Id, conMovCont.ImporteMonedaOriginal, genMonedas.Moneda_Id, genMonedas.Descripcion DescripcionMoneda,
genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Segmento
From tesChequeras
Inner Join tesCheqProp On tesCheqProp.Chequera_Id = tesChequeras.Chequera_Id And tesCheqProp.Cartera_Id = tesChequeras.Cartera_Id
Inner Join tesIdentifica On tesIdentifica.tesIdentifica = tesCheqProp.Cartera_Id
Inner Join tesBPlink On tesBPlink.tesCheqProp = tesCheqProp.tesCheqProp
Inner Join tesRengMovi On tesRengMovi.tesMovimientos = tesBPlink.tesMovimientos And tesRengMovi.conRenglon = tesBPlink.conRenglon
Inner Join conMovCont On conMovCont.conAsientos = tesRengMovi.tesMovimientos And conMovCont.Renglon = tesBPlink.conRenglon
Inner Join conAsientos On conAsientos.conAsientos = tesBPlink.tesMovimientos And conAsientos.Empresa_Id = tesChequeras.Empresa_Id
Inner Join disFormularios On disFormularios.disFormularios = conAsientos.Formulario_Id
Inner Join tesChequerasEstado On tesChequerasEstado.Estado_Id = tesChequeras.Estado_Id
Inner Join genMonedas On genMonedas.genMonedas = conAsientos.Moneda_Id
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
Inner Join genSegmentos On genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
Where conAsientos.Anulado = 0 And tesChequeras.Empresa_Id = @pEmpresa_Id And tesChequeras.Chequera_Id = @pChequera_Id And
tesCheqProp.numCheque = isNull(@pnumCheque, tesCheqProp.numCheque)
Go





Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesChequerasEstado.sql*/
DROP PROCEDURE tesChequerasEstadoGuardar
GO
CREATE PROCEDURE tesChequerasEstadoGuardar
(
@pEstado_Id char(1),
@pDescripcion varchar(35)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesChequerasEstado WHERE (Estado_Id = @pEstado_Id)))
BEGIN 
	UPDATE tesChequerasEstado
	SET		Descripcion = @pDescripcion
	WHERE (Estado_Id = @pEstado_Id)
END 
ELSE 
BEGIN 
	INSERT INTO tesChequerasEstado
	(
		Estado_Id,
		Descripcion
	)
	VALUES 
	(
		@pEstado_Id,
		@pDescripcion
	)
END 

GO

DROP PROCEDURE tesChequerasEstadoDatos
GO
CREATE PROCEDURE tesChequerasEstadoDatos
(
@pEstado_Id char(1)
)
AS
SET NOCOUNT ON 

SELECT tesChequerasEstado.Estado_Id, tesChequerasEstado.Descripcion
FROM tesChequerasEstado 
WHERE (Estado_Id = @pEstado_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE tesChequerasEstadoEliminar
GO
CREATE PROCEDURE tesChequerasEstadoEliminar
(
@pEstado_Id char(1) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM tesChequerasEstado 
WHERE (Estado_Id = ISNULL(@pEstado_Id, Estado_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesClearing.sql*/
DROP PROCEDURE tesClearingGuardar
GO
CREATE PROCEDURE tesClearingGuardar
(
@pClearing varchar(3),
@pDescripcion varchar(35),
@pDias int,
@pcVariable char(1)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesClearing WHERE (Clearing = @pClearing)))
BEGIN 
	UPDATE tesClearing
	SET		Descripcion = @pDescripcion,
		Dias = @pDias,
		cVariable = @pcVariable
	WHERE (Clearing = @pClearing)
END 
ELSE 
BEGIN 
	INSERT INTO tesClearing
	(
		Clearing,
		Descripcion,
		Dias,
		cVariable
	)
	VALUES 
	(
		@pClearing,
		@pDescripcion,
		@pDias,
		@pcVariable
	)
END 

GO

DROP PROCEDURE tesClearingDatos
GO
CREATE PROCEDURE tesClearingDatos
(
@pClearing varchar(3)
)
AS
SET NOCOUNT ON 

SELECT tesClearing.Clearing, tesClearing.Descripcion, tesClearing.Dias, tesClearing.cVariable
FROM tesClearing 
WHERE (Clearing = @pClearing)
 
 RETURN @@Error 

GO

DROP PROCEDURE tesClearingEliminar
GO
CREATE PROCEDURE tesClearingEliminar
(
@pClearing varchar(3) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM tesClearing 
WHERE (Clearing = ISNULL(@pClearing, Clearing))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesCobranzas.sql*/
-- tesCobranzasDatos 1, 'TES',1,0,0,0,'I','0001',' ',' ','A0006'
DROP PROCEDURE tesCobranzasDatos
GO
-- tesCobranzasDatos 1
CREATE PROCEDURE tesCobranzasDatos
(
	@Empresa_Id int, 
	@Segmento_Id VarChar(10),
	@Segmento1N Int,
	@Segmento2N Int,
	@Segmento3N Int,
	@Segmento4N Int,
	@Segmento1C VarChar(20),
	@Segmento2C VarChar(20),
	@Segmento3C VarChar(20),
	@Segmento4C VarChar(20), 
	@pCliente_id VarChar(15)=null, 
	@pMoneda_Id VarChar(5)=NULL

)
AS
SET NOCOUNT ON 

Declare @ptesMovimientos as BigInt
SET @ptesMovimientos = (Select tesMovimientos.tesMovimientos 
From tesMovimientos 
INNER JOIN genAsiSegmentos ON tesMovimientos.tesMovimientos = genAsiSegmentos.Asiento_Id
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	WHERE
	genSegmentos.Segmento_Id = @Segmento_Id and 
	genAsiSegmentos.Empresa_Id = @Empresa_id and 
	genAsiSegmentos.Segmento1N = @Segmento1N and 
	genAsiSegmentos.Segmento2N = @Segmento2N and 
	genAsiSegmentos.Segmento3N = @Segmento3N and 
	genAsiSegmentos.Segmento4N = @Segmento4N and 
	genAsiSegmentos.Segmento1C = @Segmento1C and 
	genAsiSegmentos.Segmento2C = @Segmento2C and 
	genAsiSegmentos.Segmento3C = @Segmento3C and 
	genAsiSegmentos.Segmento4C = @Segmento4C )


EXECUTE tesMovimientosDatos @ptesMovimientos

Exec tesRengMoviDHDatos @ptesMovimientos, 1, NULL
Exec tesRengMoviDHDatos @ptesMovimientos, 2, NULL

Exec tesRengConciliacDatos @ptesMovimientos, NULL, 1
Exec tesRengConciliacDatos @ptesMovimientos, NULL, 2


-- Solo traigo las facturas que intervinieron en la cobranza pasada como par?metro --
SELECT dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoSTR,
	conAsientos.Fecha as Fecha, 
	genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMoneda, conAsientos.Cambio as Cambio,
	genMovCuotas.Importe, genMovCuotas.Saldo, Convert(Numeric(18,2),genMovCuotas.Saldo*conAsientos.Cambio) as SaldoOri, 
	conAsientos.conAsientos, conCuentas.Cuenta_Id, genCancMov.Importe as MontoACobrar, 
	isnull((select max(tesRengMovi.Cambio) from tesRengMovi, conMovCont conMovCont1 WHERE
		tesRengMovi.TesMovimientos =genCancMov.Asiento_Id_Ap and 
		tesRengMovi.TesMovimientos = conMovCont1.conAsientos AND 
		tesRengMovi.conRenglon  = 	conMovCont1.Renglon and 
		conMovCont.Cuenta_id =conMovCont1.Cuenta_id),1)  as CambioCobra, 
		genMovCuotas.CuotaNro, genCancMov.EsVentaContado, 
		venMovimientosMetodoPago.NMetodoPago
From genAsiSegmentos 
INNER JOIN venMovimientos ON genAsiSegmentos.Asiento_Id = venMovimientos.venMovimientos
INNER JOIN conAsientos ON conAsientos.conAsientos = venMovimientos.venMovimientos
inner JOIN genMovCuotas ON genMovCuotas.Asiento_id = conAsientos.conAsientos
INNER JOIN conMovCont ON conMovCont.conAsientos = conAsientos.conAsientos  AND
	conMovCont.Clase =	'CLI'
INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
INNER JOIN venSubTipoMov ON venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
INNER JOIN venTipoMov ON venTipoMov.venTipomov = venMovimientos.venTipomov
INNER JOIN genCancMov ON genCancMov.Asiento_Id = conAsientos.conAsientos and 
	genCancMov.CuotaNro = genMovCuotas.CuotaNro and
	genCancMov.Asiento_Id_Ap = @ptesMovimientos and 
	genCancMov.CuotaNro_ap = 1
LEFT JOIN venMovimientosMetodoPago ON venMovimientosMetodoPago.venMovimientos = venMovimientos.venMovimientos
Where
	conAsientos.Anulado = 0
	ORDER BY 2,1



-- AntClientes
-- Anticipos de Clientes 
SELECT genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMoneda, tesRengMovi.Cambio,
	conMovCont.Importe, conMovCont.ImporteMonedaOriginal,
	conAsientos.conAsientos, conCuentas.Cuenta_id as Cuenta_Id, 
		conCuentas.Descripcion as DescripcionCuenta
From tesRengMovi 
INNER JOIN conAsientos ON conAsientos.conAsientos = tesRengMovi.tesMovimientos 
INNER JOIN conMovCont ON conMovCont.conAsientos = tesRengMovi.tesMovimientos and 
	conMovCont.Renglon = tesRengMovi.conRenglon and 
	conMovCont.Clase = 'ANTCL'
INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
INNER JOIN genMonedas ON genMonedas.genMonedas = conCuentas.Moneda_Id
Where 
tesRengMovi.TesMovimientos =  @pTesMovimientos

-- TIPOS DE CAMBIO
Exec tesMovimientosCambio @ptesMovimientos

Exec genAtributosGeneralesIdentityDatos @ptesMovimientos, 'tesMovimientos'


select cast(case when Exists(select 1 from tesCFDICobranzaCuerpo inner join tesCFDICobranza ON
	tesCFDICobranzaCuerpo.tesCFDICobranza = tesCFDICobranza.tesCFDICobranza  AND
	tesCFDICobranzaCuerpo.tesMovimientos = @ptesMovimientos
	Where	
	tesCFDICobranza.Anulada = ' ') THEN 1 ELSE 0 END as Bit) AS ReqCompPago

RETURN @@Error 

GO

------------------------------------------------------------------------------
-- tesCobranzasDatosPendientes 1, '02020010000001', 'PES'
GO 
DROP PROCEDURE tesCobranzasDatosPendientes
GO
-- tesCobranzasDatos 1
CREATE PROCEDURE tesCobranzasDatosPendientes
(
	@Empresa_Id int, 
	@pCliente_id VarChar(15), 
	@pMoneda_Id VarChar(5)

)
AS
SET NOCOUNT ON 

Declare @ptesMovimientos as BigInt
SET @ptesMovimientos = 0

EXECUTE tesMovimientosDatos @ptesMovimientos

Exec tesRengMoviDHDatos @ptesMovimientos, 1, NULL
Exec tesRengMoviDHDatos @ptesMovimientos, 2, NULL

Exec tesRengConciliacDatos @ptesMovimientos, NULL,1
Exec tesRengConciliacDatos @ptesMovimientos, NULL,2


-- TODO SALDOS INICIALES
-- Cobranzas y/o Pagos a Clientes
SELECT dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoSTR,
	conAsientos.Fecha as Fecha, 
	genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMoneda, conAsientos.Cambio as Cambio,
	genMovCuotas.Importe, genMovCuotas.Saldo, 
	--Convert(Numeric(18,2),genMovCuotas.Saldo*conAsientos.Cambio) as SaldoOri, 
	genMovCuotas.Importe*0 as SaldoOri,
	conAsientos.conAsientos, conCuentas.Cuenta_Id, genMovCuotas.Importe*0 as MontoACobrar, 
	dbo.func_TipoCambio(conCuentas.Moneda_Id, dbo.FechaActual(), @Empresa_Id) as CambioCobra, 
	genMovCuotas.CuotaNro, cast(0 as bit) as EsVentaContado, venMovimientosMetodoPago.NMetodoPago
From genAsiSegmentos 
INNER JOIN venMovimientos ON genAsiSegmentos.Asiento_Id = venMovimientos.venMovimientos
INNER JOIN conAsientos ON conAsientos.conAsientos = venMovimientos.venMovimientos
INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
INNER JOIN venSubTipoMov ON venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
INNER JOIN venTipoMov ON venTipoMov.venTipomov = venMovimientos.venTipomov
INNER JOIN conMovCont ON conMovCont.conAsientos = conAsientos.conAsientos  AND
	conMovCont.Clase =	'CLI'
INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
INNER JOIN genMovCuotas ON genMovCuotas.Asiento_Id = venmovimientos.venMovimientos
LEFT JOIN venMovimientosMetodoPago ON venMovimientosMetodoPago.venMovimientos = venMovimientos.venMovimientos
Where 
conAsientos.Anulado = 0 and 
venMovimientos.Cliente_id = dbo.FuncFKvenClientes(@pCliente_Id) and 
conAsientos.Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id) and 
genMovCuotas.Saldo > 0 and 
venTipoMov.Signo = 1 And
conAsientos.Empresa_Id = @Empresa_Id
ORDER BY 2,1
-- AntClientes
-- Anticipos de Clientes 
SELECT genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMoneda, tesRengMovi.Cambio,
	conMovCont.Importe, conMovCont.ImporteMonedaOriginal,
	conAsientos.conAsientos, conCuentas.Cuenta_id as Cuenta_Id, 
		conCuentas.Descripcion as DescripcionCuenta
From tesRengMovi 
INNER JOIN conAsientos ON conAsientos.conAsientos = tesRengMovi.tesMovimientos 
INNER JOIN conMovCont ON conMovCont.conAsientos = tesRengMovi.tesMovimientos and 
	conMovCont.Renglon = tesRengMovi.conRenglon and 
	conMovCont.Clase = 'ANTCL'
INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
INNER JOIN genMonedas ON genMonedas.genMonedas = conCuentas.Moneda_Id
Where 
tesRengMovi.TesMovimientos =  @pTesMovimientos

-- TIPOS DE CAMBIO
Exec tesMovimientosCambio @ptesMovimientos

Exec genAtributosGeneralesIdentityDatos @ptesMovimientos, 'tesMovimientos'

select cast(case when Exists(select 1 from tesCFDICobranzaCuerpo inner join tesCFDICobranza ON
	tesCFDICobranzaCuerpo.tesCFDICobranza = tesCFDICobranza.tesCFDICobranza  AND
	tesCFDICobranzaCuerpo.tesMovimientos = @ptesMovimientos
	Where	
	tesCFDICobranza.Anulada = ' ') THEN 1 ELSE 0 END as Bit) AS ReqCompPago

RETURN @@Error 

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesCobraProv.sql*/
-- tesCobraProvDatos 1, 'TES',0,0,0,0,'I','0001',' ',' ','ABB', 'PES'

DROP PROCEDURE tesCobraProvDatos
GO

CREATE PROCEDURE tesCobraProvDatos
(
	@Empresa_Id int, 
	@Segmento_Id VarChar(10),
	@Segmento1N Int,
	@Segmento2N Int,
	@Segmento3N Int,
	@Segmento4N Int,
	@Segmento1C VarChar(20),
	@Segmento2C VarChar(20),
	@Segmento3C VarChar(20),
	@Segmento4C VarChar(20), 
	@pProveed_Id VarChar(15)=null,
	@pMoneda_Id varChar(3) = NULL

)
AS
SET NOCOUNT ON 

	
Declare @ptesMovimientos as BigInt
SET @ptesMovimientos = (Select tesMovimientos.tesMovimientos from 
	tesMovimientos INNER JOIN genAsiSegmentos ON
	tesMovimientos.tesMovimientos = genAsiSegmentos.Asiento_Id
	INNER JOIN genSegmentos ON
	genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	WHERE
	genSegmentos.Segmento_Id = @Segmento_Id and 
	genAsiSegmentos.Empresa_Id = @Empresa_id and 
	genAsiSegmentos.Segmento1N = @Segmento1N and 
	genAsiSegmentos.Segmento2N = @Segmento2N and 
	genAsiSegmentos.Segmento3N = @Segmento3N and 
	genAsiSegmentos.Segmento4N = @Segmento4N and 
	genAsiSegmentos.Segmento1C = @Segmento1C and 
	genAsiSegmentos.Segmento2C = @Segmento2C and 
	genAsiSegmentos.Segmento3C = @Segmento3C and 
	genAsiSegmentos.Segmento4C = @Segmento4C )


EXECUTE tesMovimientosDatos @ptesMovimientos

Exec tesRengMoviDHDatos @ptesMovimientos, 1, NULL

Exec tesRengConciliacDatos @ptesMovimientos, NULL,1


IF (@ptesMovimientos IS NULL)
Begin

	--  Pagos a Proveedores

	SELECT dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoSTR,
	genMonedas.Moneda_Id, genMonedas.Descripcion DescripcionMoneda, conAsientos.Cambio, genMovCuotas.CuotaNro,
	genMovCuotas.Importe, genMovCuotas.Saldo,
	Convert(Numeric(18,2), genMovCuotas.Saldo*conAsientos.Cambio) As SaldoOri,
	conAsientos.conAsientos comMovProv, conCuentas.Cuenta_Id, 0.00 as ImporteHabilitado, 
	dbo.func_TipoCambio(conCuentas.Moneda_Id, dbo.FechaActual(), @Empresa_Id) As CambioPago,
	comMovProv.Fecha_CCP
	FROM comMovProv
	INNER JOIN comMovTipos ON comMovTipos.TipoMov = comMovprov.TipoMov
	Inner Join conAsientos On conAsientos.conAsientos = comMovProv.comMovProv
	Inner Join genMonedas On genMonedas.genMonedas = conAsientos.Moneda_Id
	INNER JOIN conMovCont ON conMovCont.conAsientos = conAsientos.conAsientos And conMovCont.Clase = 'ANTPR'
	INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
	Inner Join genAsiSegmentos ON genAsiSegmentos.Asiento_Id = comMovprov.comMovprov
	Inner Join genMovCuotas On genMovCuotas.Asiento_Id = comMovProv.comMovProv
	WHERE comMovProv.Proveed_Id = dbo.FuncFKcomProveedores(@pProveed_Id) And 
	comMovTipos.Signo = 1 and 
	genMovCuotas.Saldo > 0 	And 
	conAsientos.Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id) AND 
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1
	union all

	SELECT dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoSTR,
	genMonedas.Moneda_Id, genMonedas.Descripcion DescripcionMoneda, conAsientos.Cambio, genMovCuotas.CuotaNro,
	genMovCuotas.Importe, genMovCuotas.Saldo,
	Convert(Numeric(18,2), genMovCuotas.Saldo*conAsientos.Cambio) As SaldoOri,
	conAsientos.conAsientos comMovProv, conCuentas.Cuenta_Id, 0.00 as ImporteHabilitado, 
	dbo.func_TipoCambio(conCuentas.Moneda_Id, dbo.FechaActual(), @Empresa_Id) As CambioPago,
	comMovProv.Fecha_CCP
	FROM comMovProv
	INNER JOIN comMovTipos ON comMovTipos.TipoMov = comMovprov.TipoMov
	Inner Join conAsientos On conAsientos.conAsientos = comMovProv.comMovProv
	Inner Join genMonedas On genMonedas.genMonedas = conAsientos.Moneda_Id
	INNER JOIN conMovCont ON conMovCont.conAsientos = conAsientos.conAsientos And conMovCont.Clase = 'PRO'
	INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
	Inner Join genAsiSegmentos ON genAsiSegmentos.Asiento_Id = comMovprov.comMovprov
	Inner Join genMovCuotas On genMovCuotas.Asiento_Id = comMovProv.comMovProv
	WHERE comMovProv.Proveed_Id = dbo.FuncFKcomProveedores(@pProveed_Id) And 
	comMovTipos.Signo = 1 and 
	genMovCuotas.Saldo > 0 	And 
	conAsientos.Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id) AND 
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 AND 
		Not EXISTS(SELECT 1 FROM conMovCont c1 where 
		c1.conAsientos = conAsientos.conAsientos AND 
		c1.Clase = 'ANTPR')

end

else
Begin

	SELECT dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
		genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
		genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoSTR,
		genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMoneda, conAsientos.Cambio as Cambio, 
		genMovCuotas.CuotaNro,	genMovCuotas.Importe, genMovCuotas.Saldo, 
		Convert(Numeric(18,2),genMovCuotas.Saldo*conAsientos.Cambio) as SaldoOri,
		conAsientos.conAsientos comMovProv, conCuentas.Cuenta_Id as Cuenta_Id, genCancMov.Importe ImporteHabilitado,
		isnull((select max(tesRengMovi.Cambio) from tesRengMovi, conMovCont conMovCont1 WHERE
			tesRengMovi.TesMovimientos = genCancMov.Asiento_Id_Ap and 
			tesRengMovi.TesMovimientos = conMovCont1.conAsientos AND 
			tesRengMovi.conRenglon = conMovCont1.Renglon and 
			conMovCont.Cuenta_id = conMovCont1.Cuenta_id),1)  as CambioPago,
			comMovProv.Fecha_CCP, conMovCont.Clase
	From genAsiSegmentos 
	INNER JOIN comMovprov ON genAsiSegmentos.Asiento_Id = comMovprov.comMovprov
	INNER JOIN conAsientos ON conAsientos.conAsientos = comMovprov.comMovprov
	inner JOIN genMovCuotas ON genMovCuotas.Asiento_id = conAsientos.conAsientos
	INNER JOIN conMovCont ON conMovCont.conAsientos = conAsientos.conAsientos  AND
		conMovCont.Clase IN('ANTPR')
	INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
	INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
	INNER JOIN comMovTipos ON
	comMovTipos.Tipomov = comMovprov.Tipomov
	INNER JOIN genCancMov ON genCancMov.Asiento_Id = conAsientos.conAsientos and 
		genCancMov.CuotaNro = genMovCuotas.CuotaNro and
		genCancMov.Asiento_Id_Ap = @ptesMovimientos and 
		genCancMov.CuotaNro_ap = 1
	UNION ALL
	SELECT dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
		genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
		genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoSTR,
		genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMoneda, conAsientos.Cambio as Cambio, 
		genMovCuotas.CuotaNro,	genMovCuotas.Importe, genMovCuotas.Saldo, 
		Convert(Numeric(18,2),genMovCuotas.Saldo*conAsientos.Cambio) as SaldoOri,
		conAsientos.conAsientos comMovProv, conCuentas.Cuenta_Id as Cuenta_Id, genCancMov.Importe ImporteHabilitado,
		isnull((select max(tesRengMovi.Cambio) from tesRengMovi, conMovCont conMovCont1 WHERE
			tesRengMovi.TesMovimientos = genCancMov.Asiento_Id_Ap and 
			tesRengMovi.TesMovimientos = conMovCont1.conAsientos AND 
			tesRengMovi.conRenglon = conMovCont1.Renglon and 
			conMovCont.Cuenta_id = conMovCont1.Cuenta_id),1)  as CambioPago,
			comMovProv.Fecha_CCP, conMovCont.Clase
	From genAsiSegmentos 
	INNER JOIN comMovprov ON genAsiSegmentos.Asiento_Id = comMovprov.comMovprov
	INNER JOIN conAsientos ON conAsientos.conAsientos = comMovprov.comMovprov
	inner JOIN genMovCuotas ON genMovCuotas.Asiento_id = conAsientos.conAsientos
	INNER JOIN conMovCont ON conMovCont.conAsientos = conAsientos.conAsientos  AND
		conMovCont.Clase = 'PRO'
	INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
	INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
	INNER JOIN comMovTipos ON
	comMovTipos.Tipomov = comMovprov.Tipomov
	INNER JOIN genCancMov ON genCancMov.Asiento_Id = conAsientos.conAsientos and 
		genCancMov.CuotaNro = genMovCuotas.CuotaNro and
		genCancMov.Asiento_Id_Ap = @ptesMovimientos and 
		genCancMov.CuotaNro_ap = 1
	WHERE
		Not EXISTS(SELECT 1 FROM conMovCont c1 where 
		c1.conAsientos = conAsientos.conAsientos AND 
		c1.Clase = 'ANTPR')
			


end

-- TODO PUEDO COBRAR A UN PROVEEDOR QUE NO TENGA SALDO A FAVOR?
-- AntProveedores
-- Anticipos a Proveedores

SELECT genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMoneda, tesRengMovi.Cambio,
	conMovCont.Importe, conMovCont.ImporteMonedaOriginal,
	conAsientos.conAsientos, conCuentas.Cuenta_id as Cuenta_Id, 
		conCuentas.Descripcion as DescripcionCuenta
From tesRengMovi 
INNER JOIN conAsientos ON conAsientos.conAsientos = tesRengMovi.tesMovimientos 
INNER JOIN conMovCont ON conMovCont.conAsientos = tesRengMovi.tesMovimientos and 
	conMovCont.Renglon = tesRengMovi.conRenglon and 
	conMovCont.Clase = 'ANTPR'
INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
INNER JOIN genMonedas ON genMonedas.genMonedas = conCuentas.Moneda_Id
Where 
tesRengMovi.TesMovimientos =  @pTesMovimientos and 
conAsientos.Anulado = 0 and 
conAsientos.Posteado = 1

-- TIPOS DE CAMBIO
Exec tesMovimientosCambio @ptesMovimientos

Exec genAtributosGeneralesIdentityDatos @ptesMovimientos, 'tesMovimientos'

Exec tesMoviGravadoDatos @ptesMovimientos

RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesConciliacionDatos.sql*/

-- tesConciliacionDatos 1, '20210331','HS414', 1
DROP PROCEDURE tesConciliacionDatos
GO
CREATE PROCEDURE tesConciliacionDatos
(
	@Empresa_Id Int,
	@FechaHasta DateTime,
	@Cartera_Id VarChar(5),
	@NumeroConc Int
	
)
as
IF Exists(Select 1 from tesConciliacion INNER JOIN tesIdentifica ON 
		tesConciliacion.tesIdentifica = tesIdentifica.tesIdentifica
where
		tesIdentifica.Cartera_Id = @Cartera_Id and 
		tesConciliacion.NumeroConc = @NumeroConc and
		tesConciliacion.Empresa_Id = @Empresa_Id )


Begin

SELECT tesConciliacion.Empresa_Id, tesConciliacion.FechaConciliacion FechaHasta, tesIdentifica.Cartera_id ,
	tesIdentifica.Descripcion as Descripcion , tesConciliacion.NumeroConc, 
		' ' ArchivoXls
From tesConciliacion INNER JOIN tesIdentifica ON 
		tesConciliacion.tesIdentifica = tesIdentifica.tesIdentifica
		Where
		tesIdentifica.Cartera_Id = @Cartera_Id and 
		tesConciliacion.NumeroConc = @NumeroConc and 
		tesConciliacion.Empresa_Id = @Empresa_Id 
end

ELSE
begin

	SELECT @Empresa_Id Empresa_Id, @FechaHasta FechaHasta, tesIdentifica.Cartera_id ,
		tesIdentifica.Descripcion as Descripcion , @NumeroConc NumeroConc,
		' ' ArchivoXls
	From tesIdentifica 
		Where
		tesIdentifica.Cartera_Id = @Cartera_Id 
		

END
		


SELECT 
	dbo.Segmento(genAsiSegmentos.Segmento_Id, 
	genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C,
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as Segmento_Str, 
	conAsientos.Fecha,
	tesMovimientos.tesMovimientos, tesRengMovi.conRenglon, 
	tesMovimientos.tesMovimientos*1000 + tesRengMovi.conRenglon as Renglon,
	tesSubTiposMov.SubTipo_Id, 
	tesSubTiposMov.Descripcion as DescripcionSubTipo, 
	case when conMovCont.TipoMov= 1 then 
	conMovCont.ImporteMonedaOriginal else 0 end Debe,
	case when conMovCont.TipoMov= 2 then 
	conMovCont.ImporteMonedaOriginal else 0 end Haber,
	conMovCont.ImporteMonedaOriginal * (-2*conMovCont.TipoMov+3) as Monto, 
	tesRengConciliac.Saldo * (-2*conMovCont.TipoMov+3) as Saldo, 
		tesCheqProp.Chequera_Id, tesCheqProp.numCheque, 
		tesCheqProp.FechaVencimiento, tesChequeras.TipoChequera, 
		conAsientos.Observaciones, tesCheqProp.aLaOrden, 
			cast(case when tesRengConcilEsp.NumeroConc is null then 0 else 1 end as bit) Marca, 
			cast( CASE WHEN (SELECT count(1) from tesCheqTerceros inner join tesCTlink ON
						tesCheqTerceros.tesCheqTerceros = tesCTlink.tesCheqTerceros and
						tesCTlink.tesMovimientos = tesMovimientos.tesMovimientos 
						LEFT JOIN tesIdentifica ON 
						tesIdentifica.tesIdentifica = tesCheqTerceros.BancoConc
						Where
						(ISNULL(tesIdentifica.Cartera_Id, ' ') !=   @Cartera_Id OR
					     ISNULL(tesCheqTerceros.NumeroConc, ' ') !=   @NumeroConc)) > 0  AND 
						 (SELECT count(1) from tesCheqTerceros inner join tesCTlink ON
						tesCheqTerceros.tesCheqTerceros = tesCTlink.tesCheqTerceros and
						tesCTlink.tesMovimientos = tesMovimientos.tesMovimientos 
						inner JOIN tesIdentifica ON 
						tesIdentifica.tesIdentifica = tesCheqTerceros.BancoConc
						Where
						tesIdentifica.Cartera_Id =   @Cartera_Id and 
						 tesCheqTerceros.Empresa_Id = @Empresa_Id and 
					     tesCheqTerceros.NumeroConc =   @NumeroConc )> 0 THEN 1 ELSE 0 END as bit) PorCheque , 
						 @Cartera_Id as Cartera_Id
						 
	From tesRengMovi 
	inner join tesMovimientos ON tesRengMovi.tesMovimientos = tesMovimientos.tesMovimientos
	inner join tesRengConciliac ON tesRengConciliac.tesMovimientos = tesRengMovi.tesMovimientos AND tesRengConciliac.conRenglon = tesRengMovi.conRenglon
	inner join conAsientos ON conAsientos.conAsientos = tesMovimientos.tesMovimientos
	INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
	INNER JOIN tesSubTiposMov ON tesSubTiposMov.tesSubTiposMov =tesMovimientos.SubTipo_Id
	INNER JOIN conMovCont ON conMovCont.conAsientos = tesRengMovi.tesMovimientos and conMovCont.Renglon = tesRengMovi.conRenglon
	INNER JOIN conCuentas on conMovCont.Cuenta_Id = conCuentas.conCuentas
	INNER JOIN tesIdentifica ON tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id
	LEFT JOIN (tesBPlink INNER JOIN tesCheqProp ON
		tesBPlink.tesCheqProp = tesCheqProp.tesCheqProp
		inner join tesChequeras ON
		tesChequeras.Cartera_Id = tesCheqProp.Cartera_Id and
		tesChequeras.Chequera_Id = tesCheqProp.Chequera_Id And tesChequeras.Empresa_Id = @Empresa_Id) ON
		tesBPlink.tesMovimientos = tesRengMovi.tesMovimientos AND 
		tesBPlink.conRenglon = tesRengMovi.conRenglon
	LEFT join tesRengConcilEsp ON
		tesRengConcilEsp.tesMovimientos = tesRengMovi.tesMovimientos and
		tesRengConcilEsp.conRenglon = tesRengMovi.conRenglon


Where

	conAsientos.Anulado = 0  and 
	genAsiSegmentos.Empresa_Id = @Empresa_Id and 
	tesIdentifica.Cartera_Id = @Cartera_Id and 
	case when tesCheqProp.FechaVencimiento IS NULL THEN  conAsientos.Fecha  ELSE tesCheqProp.FechaVencimiento END <= @FechaHasta and
	(tesRengConcilEsp.NumeroConc IS NOT NULL OR tesRengConciliac.Saldo != 0 ) and
	ISNULL(tesRengConcilEsp.NumeroConc, @NumeroConc)  = @NumeroConc and conCuentas.Tipo_Id ='BANCO'
	order by 2,1
	
-- PARA DEPOSITOS TRAIGO LOS CHEQUES INCLUIDOS

SELECT tesRengMovi.tesMovimientos, tesRengMovi.conRenglon, 
	tesRengMovi1.tesMovimientos*1000+tesRengMovi1.conRenglon as Renglon, 
	tesCheqTerceros.tesCheqTerceros, 
		tesCheqTerceros.numCheque, tesCheqTerceros.FechaVencimiento,
		tesCheqTerceros.cuentaBanco, conMovCont.ImporteMonedaOriginal as Monto, 
		CASE WHEN tesCheqTerceros.NumeroConc IS NULL THEN conMovCont.ImporteMonedaOriginal ELSE	0 END AS Saldo, 
		venClientes.Cliente_Id, venClientes.RazonSocial,
		cast(case when tesCheqTerceros.NumeroConc is null then 0 else 1 end as bit) Marca
FROM tesCheqTerceros 
INNER JOIN tesCTlink ON tesCheqTerceros.tesCheqTerceros =tesCTlink.tesCheqTerceros
INNER JOIN tesRengMovi ON tesRengMovi.tesMovimientos = tesCTlink.tesMovimientos and 
	tesRengMovi.conRenglon = tesCTlink.conRenglon
INNER JOIN conMovCont ON conMovCont.conAsientos = tesRengMovi.tesMovimientos AND 
	conMovCont.Renglon = tesRengMovi.conRenglon
INNER JOIN conCuentas on conMovCont.Cuenta_Id = conCuentas.conCuentas	
INNER JOIN conAsientos ON conAsientos.conAsientos = tesRengMovi.tesMovimientos
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
inner join tesMovimientos ON tesMovimientos.tesMovimientos = tesRengMovi.tesMovimientos
INNER JOIN tesSubTiposMov ON tesSubTiposMov.tesSubTiposMov = tesMovimientos.SubTipo_Id
INNER JOIN tesRengMovi as tesRengMovi1 ON tesRengMovi1.tesMovimientos = tesRengMovi.tesMovimientos And tesRengMovi1.TipomovCont = 1
INNER JOIN tesIdentifica ON tesIdentifica.tesIdentifica = tesRengMovi1.Cartera_Id 
LEFT JOIN tesRengConcilEsp ON tesRengConcilEsp.tesMovimientos = tesRengMovi1.tesMovimientos and
	tesRengConcilEsp.conRenglon = tesRengMovi1.conRenglon
LEFT JOIN venClientes ON venClientes.genEntidades = tesCheqTerceros.Cliente_Id
Where
		tesIdentifica.Cartera_Id = @Cartera_Id  AND 
		conAsientos.Anulado = 0  and 
		genAsiSegmentos.Empresa_Id = @Empresa_Id And
		tesSubTiposMov.SubTipo_Id In ('DE3', 'AIB') and
		ISNULL(tesRengConcilEsp.NumeroConc, @NumeroConc) = @NumeroConc and 
		conAsientos.Fecha <= @FechaHasta -- AND conCuentas.Tipo_Id ='BANCO'

-- tABLA PARA LOS QUE NO ESTAN

Select cast(0 as bit) Marca ,
	conAsientos.Fecha , conAsientos.Fecha as FechaValor, Cast(0 as Int) as Cheque, 
	conAsientos.Cambio as Importe, ' ' as RefBanco, ' ' as Referencia
From conAsientos where 1 = 2

GO


				

DROP PROCEDURE tesConciliacionGuardar
GO
CREATE PROCEDURE tesConciliacionGuardar
(
@pEmpresa_Id int,
@pCartera_Id VarChar(5),
@pNumeroConc int,
@pFechaConciliacion qFecha,
@pExtractoCierre qMonedaD2,
@pExtractoApertura qMonedaD2,
@pContableApertura qMonedaD2,
@pContableCierre qMonedaD2,
@pPosteado Sino,
@pUsuario_Id int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesConciliacion WHERE (Empresa_Id = @pEmpresa_Id) AND (tesIdentifica = dbo.FuncFKtesIdentifica(@pCartera_Id)) AND (NumeroConc = @pNumeroConc)))
BEGIN 
	UPDATE tesConciliacion
	SET		Empresa_Id = @pEmpresa_Id,
		FechaConciliacion = @pFechaConciliacion,
		ExtractoCierre = @pExtractoCierre,
		ExtractoApertura = @pExtractoApertura,
		ContableApertura = @pContableApertura,
		ContableCierre = @pContableCierre,
		Posteado = @pPosteado,
		Usuario_Id = @pUsuario_Id
	WHERE (Empresa_Id = @pEmpresa_Id) AND (tesIdentifica = dbo.FuncFKtesIdentifica(@pCartera_Id)) AND (NumeroConc = @pNumeroConc)
END 
ELSE 
BEGIN 

	SET @pNumeroConc = ISNULL((SELECT MAX(NumeroConc) from tesConciliacion where
		Empresa_Id = @pEmpresa_Id AND 
		tesIdentifica = dbo.FuncFKtesIdentifica(@pCartera_Id)),0)+1

	INSERT INTO tesConciliacion
	(
		Empresa_Id,
		tesIdentifica,
		NumeroConc,
		FechaConciliacion,
		ExtractoCierre,
		ExtractoApertura,
		ContableApertura,
		ContableCierre,
		Posteado,
		Usuario_Id
	)
	VALUES 
	(
		@pEmpresa_Id,
		dbo.FuncFKtesIdentifica(@pCartera_Id),
		@pNumeroConc,
		@pFechaConciliacion,
		@pExtractoCierre,
		@pExtractoApertura,
		@pContableApertura,
		@pContableCierre,
		@pPosteado,
		@pUsuario_Id
	)


END 
SELECT @pNumeroConc as NumeroConc

GO

DROP PROCEDURE tesConciliacionEliminar
GO
CREATE PROCEDURE tesConciliacionEliminar
(
@pEmpresa_Id int,
@pCartera_Id varchar(5),
@pNumeroConc int 
)
AS
SET NOCOUNT ON 

DELETE FROM tesConciliacion 
WHERE Empresa_Id = @pEmpresa_Id
AND tesIdentifica = dbo.FuncFKtesIdentifica(@pCartera_Id)
AND NumeroConc = @pNumeroConc
 
 RETURN @@Error 

GO
DROP PROCEDURE tesConciliacionDesmarcar
GO
CREATE PROCEDURE tesConciliacionDesmarcar(
@pEmpresa_Id int,
@pCartera_Id varchar(5),
@pNumeroConc int 
)

AS

Update tesRengConciliac SET Saldo = Saldo + tesRengConcilEsp.Importe
from tesRengConcilEsp
Where  tesRengConcilEsp.tesMovimientos = tesRengConciliac.tesMovimientos and 
	tesRengConcilEsp.conRenglon = tesRengConciliac.conRenglon and 
	tesRengConcilEsp.tesIdentifica = dbo.FuncFKtesIdentifica(@pCartera_Id) and 
	tesRengConcilEsp.Empresa_Id = @pEmpresa_Id and
	tesRengConcilEsp.NumeroConc = @pNumeroConc


Update tesCheqTerceros SET NumeroConc = null, BancoConc = null , Empresa_Id = null
Where
	tesCheqTerceros.BancoConc = dbo.FuncFKtesIdentifica(@pCartera_Id) and 
	tesCheqTerceros.NumeroConc = @pNumeroConc and 
	tesCheqTerceros.Empresa_Id = @pEmpresa_Id
	

delete from tesRengConcilEsp Where
	tesRengConcilEsp.tesIdentifica = dbo.FuncFKtesIdentifica(@pCartera_Id) and 
	tesRengConcilEsp.Empresa_Id = @pEmpresa_Id and
	tesRengConcilEsp.NumeroConc = @pNumeroConc

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesCreditosBancarios.sql*/
DROP PROCEDURE tesCreditosBancariosDatos
GO
-- tesCobranzasDatos 1
CREATE PROCEDURE tesCreditosBancariosDatos
(
	@Empresa_Id int, 
	@Segmento_Id VarChar(10),
	@Segmento1N Int,
	@Segmento2N Int,
	@Segmento3N Int,
	@Segmento4N Int,
	@Segmento1C VarChar(20),
	@Segmento2C VarChar(20),
	@Segmento3C VarChar(20),
	@Segmento4C VarChar(20), 
	@pCliente_id VarChar(15)=null, 
	@pMoneda_Id VarChar(5)=NULL

)
AS
SET NOCOUNT ON 

Declare @ptesMovimientos as BigInt
SET @ptesMovimientos = (Select tesMovimientos.tesMovimientos from 
	tesMovimientos INNER JOIN genAsiSegmentos ON
	tesMovimientos.tesMovimientos = genAsiSegmentos.Asiento_Id
	INNER JOIN genSegmentos ON
	genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	WHERE
	genSegmentos.Segmento_Id = @Segmento_Id and 
	genAsiSegmentos.Empresa_Id = @Empresa_id and 
	genAsiSegmentos.Segmento1N = @Segmento1N and 
	genAsiSegmentos.Segmento2N = @Segmento2N and 
	genAsiSegmentos.Segmento3N = @Segmento3N and 
	genAsiSegmentos.Segmento4N = @Segmento4N and 
	genAsiSegmentos.Segmento1C = @Segmento1C and 
	genAsiSegmentos.Segmento2C = @Segmento2C and 
	genAsiSegmentos.Segmento3C = @Segmento3C and 
	genAsiSegmentos.Segmento4C = @Segmento4C )
	
	EXECUTE tesMovimientosDatos @ptesMovimientos

Exec tesRengMoviDHDatos @ptesMovimientos, 1, NULL
Exec tesRengMoviDHDatos @ptesMovimientos, 2, NULL

Exec tesRengConciliacDatos @ptesMovimientos, NULL,1
Exec tesRengConciliacDatos @ptesMovimientos, NULL,2
Exec tesMovimientosCambio @ptesMovimientos

	SELECT tesIdentifica.Cartera_Id, tesIdentifica.Descripcion, conMovCont.ImporteMonedaOriginal as ImporteOrig, conMovCont.Importe, 
	' ' as Estado_Id, CAST(null as datetime) as FechaHasta
From tesIdentifica
inner join tesRengMovi on tesRengMovi.Cartera_Id=tesIdentifica.tesIdentifica
inner join conMovCont on tesRengMovi.tesMovimientos = conMovCont.conAsientos and tesRengMovi.conRenglon=conMovCont.Renglon
WHERE tesRengMovi.tesMovimientos=@ptesMovimientos and conmovcont.TipoMov=1

Exec genAtributosGeneralesIdentityDatos @ptesMovimientos, 'tesMovimientos'

go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesCTLink.sql*/
DROP PROCEDURE tesCTlinkGuardar
GO
CREATE PROCEDURE tesCTlinkGuardar
(
@ptesMovimientos bigint,
@pconRenglon int,
@pEstado_Id char(1),
@pSecuencia smallint,
@ptesCheqTerceros int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesCTlink WHERE (tesMovimientos = @ptesMovimientos) AND (conRenglon = @pconRenglon)))
BEGIN 
	UPDATE tesCTlink
	SET	 Estado_Id = @pEstado_Id,
		Secuencia = @pSecuencia,
		tesCheqTerceros = @ptesCheqTerceros
	WHERE (tesMovimientos = @ptesMovimientos) AND (conRenglon = @pconRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO tesCTlink
	(
		tesMovimientos,
		conRenglon,
		Estado_Id,
		Secuencia,
		tesCheqTerceros
	)
	VALUES 
	(
		@ptesMovimientos,
		@pconRenglon,
		@pEstado_Id,
		@pSecuencia,
		@ptesCheqTerceros
	)
END 

GO

DROP PROCEDURE tesCTlinkDatos
GO
CREATE PROCEDURE tesCTlinkDatos
(
@ptesMovimientos bigint,
@pconRenglon int= NULL
)
AS
SET NOCOUNT ON 

SELECT tesCTlink.tesMovimientos, tesCTlink.conRenglon, tesCTlink.Estado_Id,
	tesCheqTerEstado.Descripcion as DescripcionCheqTerEstado, tesCTlink.Secuencia, tesCTlink.tesCheqTerceros, tesCheqTerceros.numCheque 
FROM tesCTlink 
INNER JOIN tesRengMovi  ON (tesRengMovi.tesMovimientos = tesCTlink.tesMovimientos) AND (tesRengMovi.conRenglon = tesCTlink.conRenglon)
INNER JOIN tesCheqTerEstado  ON (tesCheqTerEstado.Estado_Id = tesCTlink.Estado_Id)
LEFT JOIN tesCheqTerceros  ON (tesCheqTerceros.tesCheqTerceros = tesCTlink.tesCheqTerceros)
WHERE (tesCTlink.tesMovimientos = @ptesMovimientos)
AND (tesCTlink.conRenglon = ISNULL(@pconRenglon, tesCTlink.conRenglon))
 
 RETURN @@Error 

GO

DROP PROCEDURE tesCTlinkEliminar
GO
CREATE PROCEDURE tesCTlinkEliminar
(
@ptesMovimientos bigint,
@pconRenglon int= null
)
AS
SET NOCOUNT ON 

DELETE FROM tesCTlink 
WHERE (tesMovimientos = @ptesMovimientos)
AND (tesCTlink.conRenglon = ISNULL(@pconRenglon, tesCTlink.conRenglon))
 
 RETURN @@Error 

GO


Drop Procedure tesCTLinkDatosXSecuencia
Go
Create Procedure tesCTLinkDatosXSecuencia
(
@pTesCheqTerceros int,
@pSecuencia smallint
)
As

Declare @ltesMovimientos bigint
Declare @lconRenglon int

Select @ltesMovimientos = tesMovimientos, @lconRenglon = conRenglon
From tesCTlink
Where tesCheqTerceros = @pTesCheqTerceros And Secuencia = @pSecuencia

exec tesCTlinkDatos @ltesMovimientos, @lconRenglon
Go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesDebitosBancarios.sql*/
DROP PROCEDURE tesDebitosBancariosDatos
GO
-- tesCobranzasDatos 1
CREATE PROCEDURE tesDebitosBancariosDatos
(
	@Empresa_Id int, 
	@Segmento_Id VarChar(10),
	@Segmento1N Int,
	@Segmento2N Int,
	@Segmento3N Int,
	@Segmento4N Int,
	@Segmento1C VarChar(20),
	@Segmento2C VarChar(20),
	@Segmento3C VarChar(20),
	@Segmento4C VarChar(20), 
	@pCliente_id VarChar(15)=null, 
	@pMoneda_Id VarChar(5)=NULL

)
AS
SET NOCOUNT ON 

Declare @ptesMovimientos as BigInt
SET @ptesMovimientos = (Select tesMovimientos.tesMovimientos from 
	tesMovimientos INNER JOIN genAsiSegmentos ON
	tesMovimientos.tesMovimientos = genAsiSegmentos.Asiento_Id
	INNER JOIN genSegmentos ON
	genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	WHERE
	genSegmentos.Segmento_Id = @Segmento_Id and 
	genAsiSegmentos.Empresa_Id = @Empresa_id and 
	genAsiSegmentos.Segmento1N = @Segmento1N and 
	genAsiSegmentos.Segmento2N = @Segmento2N and 
	genAsiSegmentos.Segmento3N = @Segmento3N and 
	genAsiSegmentos.Segmento4N = @Segmento4N and 
	genAsiSegmentos.Segmento1C = @Segmento1C and 
	genAsiSegmentos.Segmento2C = @Segmento2C and 
	genAsiSegmentos.Segmento3C = @Segmento3C and 
	genAsiSegmentos.Segmento4C = @Segmento4C )
	
	EXECUTE tesMovimientosDatos @ptesMovimientos

Exec tesRengMoviDHDatos @ptesMovimientos, 1, NULL
Exec tesRengMoviDHDatos @ptesMovimientos, 2, NULL

Exec tesRengConciliacDatos @ptesMovimientos, NULL,1
Exec tesRengConciliacDatos @ptesMovimientos, NULL,2
Exec tesMovimientosCambio @ptesMovimientos

	SELECT tesIdentifica.Cartera_Id, tesIdentifica.Descripcion, conMovCont.ImporteMonedaOriginal as ImporteOrig, conMovCont.Importe, 
	' ' as Estado_Id, CAST(null as datetime) as FechaHasta
From tesIdentifica
inner join tesRengMovi on tesRengMovi.Cartera_Id=tesIdentifica.tesIdentifica
inner join conMovCont on tesRengMovi.tesMovimientos = conMovCont.conAsientos and tesRengMovi.conRenglon=conMovCont.Renglon
WHERE conmovcont.TipoMov=2 and tesRengMovi.tesMovimientos=@ptesMovimientos 

Exec genAtributosGeneralesIdentityDatos @ptesMovimientos, 'tesMovimientos'

go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesDepIdentificacion.sql*/
DROP PROCEDURE tesDepIdentificacionDatos
go

CREATE PROCEDURE tesDepIdentificacionDatos(
	@Empresa_Id Int, 
	@Cartera_id VarChar(5)
)
as

SELECT tesIdentifica.Cartera_Id, tesIdentifica.Descripcion, 
	dbo.FechaActual() as Fecha, CAST(0 as bit) as TimbraAhora
from tesIdentifica 
WHERE
tesIdentifica.Cartera_Id = @Cartera_id

SELECT conAsientos.Fecha, 
	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, 
	genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as Comprobante, 
	tesIdentifica.Cartera_Id, conMovCont.ImporteMonedaOriginal, genMonedas.Moneda_Id, ' ' AS Cliente_Id, 
	tesMovimientos.tesMovimientos, tesRengMovi.Cambio, 
	genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, 
	genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, conMovCont.ImporteMonedaOriginal as Saldo
from tesDepoPorIdent 
	inner join  conAsientos ON  conAsientos.conAsientos =tesDepoPorIdent.tesMovimientos
	inner join tesMovimientos ON  tesMovimientos.tesMovimientos = conAsientos.conAsientos
	inner join tesRengMovi ON  tesRengMovi.tesMovimientos = tesMovimientos.tesMovimientos
	INNER JOIN tesIdentifica ON  tesIdentifica.tesIdentifica =tesRengMovi.Cartera_Id
	INNER JOIN  genAsiSegmentos ON  genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
	INNER JOIN genSegmentos ON genSegmentos.genSegmentos =genAsiSegmentos.Segmento_Id
	inner join genMonedas ON  genMonedas.genMonedas = tesIdentifica.Moneda_Id
	INNER JOIN conMovCont ON conMovCont.conAsientos = tesRengMovi.tesMovimientos and 
				conMovCont.Renglon = tesRengMovi.conRenglon
	LEFT JOIN conAsientos Factura ON  Factura.conAsientos =tesDepoPorIdent.venMovimientos and 
		Factura.Anulado = 0 and 
		Factura.Posteado = 1 

WHERE
	conAsientos.Posteado = 1 AND 
	conAsientos.Anulado= 0 AND 
	conAsientos.Empresa_Id = @Empresa_Id and 
	tesIdentifica.Cartera_Id = @Cartera_id and 
	Factura.conAsientos IS NULL
ORDER BY 1,2


--aplicaciones
select cast (0 as bigint) as tesMovimientos, cast(0 as bigint) as venMovimientos, ' ' as Segmento, 
	convert(datetime,null) as Fecha, 0.00 as Importe, 0.00 as Saldo, cast(0 as smallint) as NroCuota, 0.00 as ImporteAplicado, 
		convert(datetime, null) as FechaVencimiento


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesDepoPorIdent.sql*/
DROP PROCEDURE tesDepoPorIdentGuardar
GO
CREATE PROCEDURE tesDepoPorIdentGuardar
(
@ptesMovimientos bigint,
@pvenMovimientos bigint = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesDepoPorIdent WHERE (tesMovimientos = @ptesMovimientos)))
BEGIN 
	UPDATE tesDepoPorIdent
	SET		venMovimientos = @pvenMovimientos
	WHERE (tesMovimientos = @ptesMovimientos)
END 
ELSE 
BEGIN 
	INSERT INTO tesDepoPorIdent
	(
		tesMovimientos,
		venMovimientos
	)
	VALUES 
	(
		@ptesMovimientos,
		@pvenMovimientos
	)
END 

GO

DROP PROCEDURE tesDepoPorIdentDatos
GO
CREATE PROCEDURE tesDepoPorIdentDatos
(
@ptesMovimientos bigint
)
AS
SET NOCOUNT ON 

SELECT tesDepoPorIdent.tesMovimientos, tesDepoPorIdent.venMovimientos
FROM tesDepoPorIdent 
WHERE (tesMovimientos = @ptesMovimientos)
 
EXEC tesDepoPorIdentImpDatos @ptesMovimientos
RETURN @@Error 

GO

DROP PROCEDURE tesDepoPorIdentEliminar
GO
CREATE PROCEDURE tesDepoPorIdentEliminar
(
@ptesMovimientos bigint
)
AS
SET NOCOUNT ON 

DELETE FROM tesDepoPorIdent 
WHERE (tesMovimientos = @ptesMovimientos)
 
 RETURN @@Error 

GO


DROP PROCEDURE tesDepoPorIdentVenDatos
GO
CREATE PROCEDURE tesDepoPorIdentVenDatos
(
@pVenMovimientos bigint
)
AS
SET NOCOUNT ON 

SELECT tesDepoPorIdent.tesMovimientos, tesDepoPorIdent.venMovimientos
FROM tesDepoPorIdent 
WHERE (venMovimientos = @pVenMovimientos)


RETURN @@Error 

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesDepoPorIdentImp.sql*/
DROP PROCEDURE tesDepoPorIdentImpGuardar
GO
CREATE PROCEDURE tesDepoPorIdentImpGuardar
(
@ptesMovimientos bigint,
@pImpuesto_Id varchar(5),
@pBaseImponible numeric(18,2),
@pImporte numeric(18,2)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesDepoPorIdentImp WHERE (tesMovimientos = @ptesMovimientos) AND (Impuesto_Id = dbo.FuncFKvenImpuestos(@pImpuesto_Id))))
BEGIN 
	UPDATE tesDepoPorIdentImp
	SET		BaseImponible = @pBaseImponible,
			Importe = @pImporte
	WHERE (tesMovimientos = @ptesMovimientos) AND (Impuesto_Id = dbo.FuncFKvenImpuestos(@pImpuesto_Id))
END 
ELSE 
BEGIN 
	INSERT INTO tesDepoPorIdentImp
	(
		tesMovimientos,
		Impuesto_Id,
		BaseImponible,
		Importe
	)
	VALUES 
	(
		@ptesMovimientos,
		dbo.FuncFKvenImpuestos(@pImpuesto_Id),
		@pBaseImponible,
		@pImporte
	)
END 

GO

DROP PROCEDURE tesDepoPorIdentImpDatos
GO
CREATE PROCEDURE tesDepoPorIdentImpDatos
(
@ptesMovimientos bigint,
@pImpuesto_Id VarChar(5) = NULL
)
AS
SET NOCOUNT ON 

SELECT tesDepoPorIdentImp.tesMovimientos, venImpuestos.Impuesto_Id, venImpuestos.Descripcion as DescripcionImpuestos,
		tesDepoPorIdentImp.BaseImponible, tesDepoPorIdentImp.Importe
FROM tesDepoPorIdentImp 
INNER JOIN tesMovimientos  ON (tesMovimientos.tesMovimientos = tesDepoPorIdentImp.tesMovimientos)
INNER JOIN venImpuestos  ON (venImpuestos.venImpuestos = tesDepoPorIdentImp.Impuesto_Id)
WHERE (tesDepoPorIdentImp.tesMovimientos = @ptesMovimientos)
AND (venImpuestos.Impuesto_Id = ISNULL(@pImpuesto_Id,venImpuestos.Impuesto_Id))
 
RETURN @@Error 

GO

DROP PROCEDURE tesDepoPorIdentImpEliminar
GO
CREATE PROCEDURE tesDepoPorIdentImpEliminar
(
@ptesMovimientos bigint,
@pImpuesto_Id varchar(5) = null
)
AS
SET NOCOUNT ON 

DELETE FROM tesDepoPorIdentImp 
WHERE (tesMovimientos = @ptesMovimientos)
AND (@pImpuesto_Id IS NULL OR Impuesto_Id = dbo.FuncFKvenImpuestos(@pImpuesto_Id))
 
RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesDeposito.sql*/
DROP PROCEDURE tesDepositoGuardar
GO
CREATE PROCEDURE tesDepositoGuardar
(
@ptesMovimientos bigint,
@pRenglon int,
@pFormaDePagoP char(2),
@pNumOperacion varchar(100) = NULL,
@pNomBancoOrdExt varchar(300) = NULL,
@pCtaOrdenante varchar(50) = NULL,
@pTipoCadPago varchar(2) = NULL,
@pCertPago varchar(max) = NULL,
@pCadPago varchar(max) = NULL,
@pSelloPago varchar(max) = NULL,
@pRfcEmisorCtaOrd varchar(13) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM TesDeposito WHERE (tesMovimientos = @ptesMovimientos) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE TesDeposito
	SET		FormaDePagoP = @pFormaDePagoP,
		NumOperacion = @pNumOperacion,
		NomBancoOrdExt = @pNomBancoOrdExt,
		CtaOrdenante = @pCtaOrdenante,
		TipoCadPago = @pTipoCadPago,
		CertPago = @pCertPago,
		CadPago = @pCadPago,
		SelloPago = @pSelloPago,
		RfcEmisorCtaOrd = @pRfcEmisorCtaOrd
	WHERE (tesMovimientos = @ptesMovimientos) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO TesDeposito
	(
		tesMovimientos,
		Renglon,
		FormaDePagoP,
		NumOperacion,
		NomBancoOrdExt,
		CtaOrdenante,
		TipoCadPago,
		CertPago,
		CadPago,
		SelloPago,
		RfcEmisorCtaOrd
	)
	VALUES 
	(
		@ptesMovimientos,
		@pRenglon,
		@pFormaDePagoP,
		@pNumOperacion,
		@pNomBancoOrdExt,
		@pCtaOrdenante,
		@pTipoCadPago,
		@pCertPago,
		@pCadPago,
		@pSelloPago,
		@pRfcEmisorCtaOrd
	)
END 

GO

DROP PROCEDURE tesDepositoDatos
GO
CREATE PROCEDURE tesDepositoDatos
(
@ptesMovimientos bigint,
@pRenglon int
)
AS
SET NOCOUNT ON 

SELECT TesDeposito.tesMovimientos, TesDeposito.Renglon, TesDeposito.FormaDePagoP, TesDeposito.NumOperacion,
	TesDeposito.NomBancoOrdExt, TesDeposito.CtaOrdenante, TesDeposito.TipoCadPago, TesDeposito.CertPago,
	TesDeposito.CadPago, TesDeposito.SelloPago, TesDeposito.RfcEmisorCtaOrd
FROM TesDeposito 
WHERE (tesMovimientos = @ptesMovimientos)
AND (Renglon = @pRenglon)
 
 RETURN @@Error 

GO

DROP PROCEDURE tesDepositoEliminar
GO
CREATE PROCEDURE tesDepositoEliminar
(
@ptesMovimientos bigint = NULL,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM TesDeposito 
WHERE (tesMovimientos = ISNULL(@ptesMovimientos, tesMovimientos))
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesDepositosXBancos.sql*/
DROP PROCEDURE tesDepositosXBancosDatos
GO
-- tesCobranzasDatos 1
CREATE PROCEDURE tesDepositosXBancosDatos
(
	@Empresa_Id int,  
	@pFechaDesde datetime,
	@pFechaHasta datetime,
	@pCartera varchar(5)
)
AS
SET NOCOUNT ON 


	Select @pFechaDesde as FechaDesde, @pFechaHasta as FechaHasta,
	 @pCartera as Cartera_Id, Descripcion as DescripcionCartera from tesIdentifica 
	 where Cartera_Id=@pCartera
select dbo.Segmento(genAsiSegmentos.Segmento_Id,genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,
genAsiSegmentos.Segmento4C,genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N) as SegmentoSTR
, TesDeposito.tesMovimientos, tesRengMovi.conRenglon as Renglon, TesDeposito.FormaDePagoP, TesDeposito.NumOperacion, TesDeposito.NomBancoOrdExt,
TesDeposito.CtaOrdenante, TesDeposito.TipoCadPago, TesDeposito.CertPago,TesDeposito.CadPago,TesDeposito.SelloPago,
TesDeposito.RfcEmisorCtaOrd, conAsientos.Fecha,  conMovCont.Importe, venClientes.RazonSocial as Cliente
from TesDeposito inner join venMovimientos on venMovimientos.venMovimientos=TesDeposito.tesMovimientos
inner join conAsientos on conAsientos.conAsientos=venMovimientos.venMovimientos
inner join tesRengMovi on tesRengMovi.tesMovimientos=venMovimientos.venMovimientos
inner join venClientes on venClientes.genEntidades=venMovimientos.Cliente_Id
inner join conMovCont on (conMovCont.conAsientos=tesRengMovi.tesMovimientos and tesRengMovi.conRenglon=conMovCont.Renglon)
inner join genAsiSegmentos on genAsiSegmentos.Asiento_Id=TesDeposito.tesMovimientos
inner join tesIdentifica on tesRengMovi.Cartera_Id=tesIdentifica.tesIdentifica
where
genAsiSegmentos.Empresa_Id=@Empresa_Id and conAsientos.Fecha between @pFechaDesde and @pFechaHasta and tesIdentifica.Cartera_Id=@pCartera
order by 1
GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesFFCobClientes.sql*/
DROP PROCEDURE tesFFCobClientesGuardar
GO
CREATE PROCEDURE tesFFCobClientesGuardar
(
@ptesFlujoFondo bigint,
@pFecha datetime,
@pCliente_Id VarChar(15),
@pMoneda_Id varchar(3),
@pMonto numeric(18,2)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesFFCobClientes WHERE 
	(tesFlujoFondo = @ptesFlujoFondo) AND 
	(Fecha = @pFecha) AND 
	(Cliente_Id = dbo.FuncFKvenClientes(@pCliente_Id)) AND 
	(Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id))))
BEGIN 
	UPDATE tesFFCobClientes
	SET		Monto = @pMonto
	WHERE (tesFlujoFondo = @ptesFlujoFondo) AND 
		(Fecha = @pFecha) AND 
		(Cliente_Id = dbo.FuncFKvenClientes(@pCliente_Id)) AND 
		(Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id))
END 
ELSE 
BEGIN 
	INSERT INTO tesFFCobClientes
	(
		tesFlujoFondo,
		Fecha,
		Cliente_Id,
		Moneda_Id,
		Monto
	)
	VALUES 
	(
		@ptesFlujoFondo,
		@pFecha,
		dbo.FuncFKvenClientes(@pCliente_Id),
		dbo.FuncFKgenMonedas(@pMoneda_Id),
		@pMonto
	)
END 

GO

DROP PROCEDURE tesFFCobClientesDatos
GO
CREATE PROCEDURE tesFFCobClientesDatos
(
@ptesFlujoFondo bigint,
@pFecha datetime,
@pCliente_Id VarChar(15),
@pMoneda_Id VarChar(3)
)
AS
SET NOCOUNT ON 

SELECT  tesFFCobClientes.tesFlujoFondo, 
	tesFFCobClientes.Fecha, venClientes.Cliente_Id, venClientes.RazonSocial,
	genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas, 
		tesFFCobClientes.Monto, tesFlujoFondo.FechaDesde, tesFlujoFondo.FechaHasta
FROM tesFFCobClientes 
INNER JOIN tesFlujoFondo  ON (tesFlujoFondo.tesFlujoFondo = tesFFCobClientes.tesFlujoFondo)
INNER JOIN venClientes  ON (venClientes.genEntidades = tesFFCobClientes.Cliente_Id)
INNER JOIN genMonedas  ON (genMonedas.genMonedas = tesFFCobClientes.Moneda_Id)
WHERE (tesFFCobClientes.tesFlujoFondo = @ptesFlujoFondo)
AND (tesFFCobClientes.Fecha = @pFecha)
AND (venClientes.Cliente_Id = @pCliente_Id)
AND (genMonedas.Moneda_Id = @pMoneda_Id)
 
RETURN @@Error 

GO

DROP PROCEDURE tesFFCobClientesEliminar
GO
CREATE PROCEDURE tesFFCobClientesEliminar
(
@ptesFlujoFondo bigint,
@pFechaDesde datetime ,
@pFechaHasta datetime 
)
AS
SET NOCOUNT ON 

DELETE FROM tesFFCobClientes 
WHERE (tesFlujoFondo = @ptesFlujoFondo)
AND (Fecha Between @pFechaDesde AND @pFechaHasta)
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesFFCobranzaOtros.sql*/
DROP PROCEDURE tesFFCobranzaOtrosGuardar
GO
CREATE PROCEDURE tesFFCobranzaOtrosGuardar
(
@ptesFlujoFondo bigint,
@pFecha datetime,
@pRenglon int,
@pDescripcion varchar(200),
@pMoneda_Id varchar(3),
@pMonto numeric(18,2)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesFFCobranzaOtros WHERE 
	(tesFlujoFondo = @ptesFlujoFondo) AND 
	(Fecha = @pFecha) AND 
	(Renglon = @pRenglon)))
BEGIN 
	UPDATE tesFFCobranzaOtros
	SET		Descripcion = @pDescripcion,
		Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id),
		Monto = @pMonto
	WHERE (tesFlujoFondo = @ptesFlujoFondo) AND (Fecha = @pFecha) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO tesFFCobranzaOtros
	(
		tesFlujoFondo,
		Fecha,
		Renglon,
		Descripcion,
		Moneda_Id,
		Monto
	)
	VALUES 
	(
		@ptesFlujoFondo,
		@pFecha,
		@pRenglon,
		@pDescripcion,
		dbo.FuncFKgenMonedas(@pMoneda_Id),
		@pMonto
	)
END 

GO

DROP PROCEDURE tesFFCobranzaOtrosDatos
GO
CREATE PROCEDURE tesFFCobranzaOtrosDatos
(
@ptesFlujoFondo bigint,
@pFecha datetime,
@pRenglon int
)
AS
SET NOCOUNT ON 

SELECT tesFlujoFondo.tesFlujoFondo, tesFFCobranzaOtros.Fecha, tesFFCobranzaOtros.Renglon, 
	tesFFCobranzaOtros.Descripcion, genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas, 
	tesFFCobranzaOtros.Monto, tesFlujoFondo.FechaDesde, tesFlujoFondo.FechaHasta
FROM tesFFCobranzaOtros 
INNER JOIN tesFlujoFondo  ON (tesFlujoFondo.tesFlujoFondo = tesFFCobranzaOtros.tesFlujoFondo)
INNER JOIN genMonedas  ON (genMonedas.genMonedas = tesFFCobranzaOtros.Moneda_Id)
WHERE (tesFFCobranzaOtros.tesFlujoFondo = @ptesFlujoFondo)
AND (tesFFCobranzaOtros.Fecha = @pFecha)
AND (tesFFCobranzaOtros.Renglon = @pRenglon)
 
RETURN @@Error 

GO

DROP PROCEDURE tesFFCobranzaOtrosEliminar
GO
CREATE PROCEDURE tesFFCobranzaOtrosEliminar
(
@ptesFlujoFondo bigint,
@pFechaDesde datetime ,
@pFechaHasta datetime 
)
AS
SET NOCOUNT ON 

DELETE FROM tesFFCobranzaOtros 
WHERE 
tesFlujoFondo = @ptesFlujoFondo AND 
Fecha between @pFechaDesde and @pFechaHasta
 
RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesFFDepositos.sql*/
DROP PROCEDURE tesFFDepositosGuardar
GO
CREATE PROCEDURE tesFFDepositosGuardar
(
@ptesFlujoFondo bigint,
@pFecha datetime,
@pCliente_Id VarChar(15),
@pMoneda_Id varchar(3),
@pMonto numeric(18,2)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesFFDepositos 
WHERE (tesFlujoFondo = @ptesFlujoFondo) 
AND (Fecha = @pFecha) AND 
(Cliente_Id = dbo.FuncFKvenClientes(@pCliente_Id))))

BEGIN 
	UPDATE tesFFDepositos
	SET		Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id),
		Monto = @pMonto
	WHERE (tesFlujoFondo = @ptesFlujoFondo) AND (Fecha = @pFecha) AND 
		(Cliente_Id = dbo.FuncFKvenClientes(@pCliente_Id))
END 
ELSE 
BEGIN 
	INSERT INTO tesFFDepositos
	(
		tesFlujoFondo,
		Fecha,
		Cliente_Id,
		Moneda_Id,
		Monto
	)
	VALUES 
	(
		@ptesFlujoFondo,
		@pFecha,
		dbo.FuncFKvenClientes(@pCliente_Id),
		dbo.FuncFKgenMonedas(@pMoneda_Id),
		@pMonto
	)
END 

GO

DROP PROCEDURE tesFFDepositosDatos
GO
CREATE PROCEDURE tesFFDepositosDatos
(
@ptesFlujoFondo bigint,
@pFecha datetime,
@pCliente_Id VarChar(15)
)
AS
SET NOCOUNT ON 

SELECT tesFlujoFondo.tesFlujoFondo ,tesFFDepositos.Fecha, 
	venClientes.Cliente_Id, venClientes.RazonSocial,
	genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas, 
	tesFFDepositos.Monto, tesFlujoFondo.FechaDesde, tesFlujoFondo.FechaHasta 
FROM tesFFDepositos 
INNER JOIN tesFlujoFondo  ON (tesFlujoFondo.tesFlujoFondo = tesFFDepositos.tesFlujoFondo)
INNER JOIN venClientes  ON (venClientes.genEntidades = tesFFDepositos.Cliente_Id)
INNER JOIN genMonedas  ON (genMonedas.genMonedas = tesFFDepositos.Moneda_Id)
WHERE (tesFFDepositos.tesFlujoFondo = @ptesFlujoFondo)
AND (tesFFDepositos.Fecha = @pFecha)
AND (venClientes.Cliente_Id = @pCliente_Id)
 
RETURN @@Error 

GO

DROP PROCEDURE tesFFDepositosEliminar
GO
CREATE PROCEDURE tesFFDepositosEliminar
(
@ptesFlujoFondo bigint,
@pFechaDesde DateTime,
@pFechaHasta DateTime
)
AS
SET NOCOUNT ON 

DELETE FROM tesFFDepositos 
WHERE (tesFlujoFondo = @ptesFlujoFondo) AND 
(Fecha between @pFechaDesde and @pFechaHasta)
 
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesFFPagosOtros.sql*/
DROP PROCEDURE tesFFPagosOtrosGuardar
GO
CREATE PROCEDURE tesFFPagosOtrosGuardar
(
@ptesFlujoFondo bigint,
@pFecha datetime,
@pRenglon int,
@pDescripcion varchar(200),
@pTipo char(1),
@pImpuesto_Id VarChar(5) = NULL,
@pMoneda_Id varchar(3),
@pMonto numeric(18,2)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesFFPagosOtros WHERE 
	(tesFlujoFondo = @ptesFlujoFondo) AND 
	(Fecha = @pFecha) AND 
	(Renglon = @pRenglon)))
BEGIN 
	UPDATE tesFFPagosOtros
	SET		Descripcion = @pDescripcion,
		Tipo = @pTipo,
		Impuesto_Id = dbo.FuncFKimpImpuestos(@pImpuesto_Id),
		Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id),
		Monto = @pMonto
	WHERE (tesFlujoFondo = @ptesFlujoFondo) AND 
		(Fecha = @pFecha) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO tesFFPagosOtros
	(
		tesFlujoFondo,
		Fecha,
		Renglon,
		Descripcion,
		Tipo,
		Impuesto_Id,
		Moneda_Id,
		Monto
	)
	VALUES 
	(
		@ptesFlujoFondo,
		@pFecha,
		@pRenglon,
		@pDescripcion,
		@pTipo,
		dbo.FuncFKimpImpuestos(@pImpuesto_Id),
		dbo.FuncFKgenMonedas(@pMoneda_Id),
		@pMonto
	)
END 

GO

DROP PROCEDURE tesFFPagosOtrosDatos
GO
CREATE PROCEDURE tesFFPagosOtrosDatos
(
@ptesFlujoFondo bigint,
@pFecha datetime,
@pRenglon int
)
AS
SET NOCOUNT ON 

SELECT tesFlujoFondo.tesFlujoFondo , tesFFPagosOtros.Fecha, tesFFPagosOtros.Renglon, 
	tesFFPagosOtros.Descripcion, tesFFPagosOtros.Tipo, 
	impImpuestos.Impuesto_Id, impImpuestos.Descripcion as DescripcionImpuesto,
	genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas,
	tesFFPagosOtros.Monto
FROM tesFFPagosOtros 
INNER JOIN tesFlujoFondo  ON (tesFlujoFondo.tesFlujoFondo = tesFFPagosOtros.tesFlujoFondo)
INNER JOIN genMonedas  ON (genMonedas.genMonedas = tesFFPagosOtros.Moneda_Id)
LEFT JOIN impImpuestos ON impImpuestos.impImpuestos = tesFFPagosOtros.Impuesto_Id
WHERE (tesFFPagosOtros.tesFlujoFondo = @ptesFlujoFondo)
AND (tesFFPagosOtros.Fecha = @pFecha)
AND (tesFFPagosOtros.Renglon = @pRenglon)
 
RETURN @@Error 

GO

DROP PROCEDURE tesFFPagosOtrosEliminar
GO
CREATE PROCEDURE tesFFPagosOtrosEliminar
(
@ptesFlujoFondo bigint,
@pFechaDesde datetime ,
@pFechaHasta datetime
)
AS
SET NOCOUNT ON 

DELETE FROM tesFFPagosOtros 
WHERE (tesFlujoFondo = @ptesFlujoFondo)
AND (Fecha Between @pFechaDesde and @pFechaHasta)
 
RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesFFPagosProvedores.sql*/
DROP PROCEDURE tesFFPagosProvedoresGuardar
GO
CREATE PROCEDURE tesFFPagosProvedoresGuardar
(
@ptesFlujoFondo bigint,
@pFecha datetime,
@pProveed_Id VarChar(15),
@pMoneda_Id varchar(3),
@pMonto numeric(18,2)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesFFPagosProvedores WHERE 
	(tesFlujoFondo = @ptesFlujoFondo) AND 
	(Fecha = @pFecha) AND 
	(Proveed_Id = dbo.FuncFKcomProveedores(@pProveed_Id)) AND 
	(Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id))))
BEGIN 
	UPDATE tesFFPagosProvedores
	SET		Monto = @pMonto
	WHERE (tesFlujoFondo = @ptesFlujoFondo) AND (Fecha = @pFecha) AND 
		(Proveed_Id = dbo.FuncFKcomProveedores(@pProveed_Id)) AND 
		(Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id))
END 
ELSE 
BEGIN 
	INSERT INTO tesFFPagosProvedores
	(
		tesFlujoFondo,
		Fecha,
		Proveed_Id,
		Moneda_Id,
		Monto
	)
	VALUES 
	(
		@ptesFlujoFondo,
		@pFecha,
		dbo.FuncFKcomProveedores(@pProveed_Id),
		dbo.FuncFKgenMonedas(@pMoneda_Id),
		@pMonto
	)
END 

GO

DROP PROCEDURE tesFFPagosProvedoresDatos
GO
CREATE PROCEDURE tesFFPagosProvedoresDatos
(
@ptesFlujoFondo bigint,
@pFecha datetime,
@pProveed_Id VarChar(15),
@pMoneda_Id VarChar(3)
)
AS
SET NOCOUNT ON 

SELECT tesFlujoFondo.tesFlujoFondo , tesFFPagosProvedores.Fecha, 
	comProveedores.Proveed_Id, comProveedores.RazonSocial,
	genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas, 
	tesFFPagosProvedores.Monto, tesFlujoFondo.FechaDesde, tesFlujoFondo.FechaHasta
FROM tesFFPagosProvedores 
INNER JOIN tesFlujoFondo  ON (tesFlujoFondo.tesFlujoFondo = tesFFPagosProvedores.tesFlujoFondo)
INNER JOIN comProveedores  ON (comProveedores.genEntidades = tesFFPagosProvedores.Proveed_Id)
INNER JOIN genMonedas  ON (genMonedas.genMonedas = tesFFPagosProvedores.Moneda_Id)
WHERE (tesFFPagosProvedores.tesFlujoFondo = @ptesFlujoFondo)
AND (tesFFPagosProvedores.Fecha = @pFecha)
AND (comProveedores.Proveed_Id = @pProveed_Id)
AND (genMonedas.Moneda_Id = @pMoneda_Id)
 
RETURN @@Error 

GO

DROP PROCEDURE tesFFPagosProvedoresEliminar
GO
CREATE PROCEDURE tesFFPagosProvedoresEliminar
(
@ptesFlujoFondo bigint,
@pFechaDesde datetime ,
@pFechaHasta datetime 
)
AS
SET NOCOUNT ON 

DELETE FROM tesFFPagosProvedores 
WHERE 
(tesFlujoFondo = @ptesFlujoFondo) AND 
(Fecha between @pFechaDesde and @pFechaHasta)
 
RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesFFSegmentos.sql*/
DROP PROCEDURE tesFFSegmentosGuardar
GO
CREATE PROCEDURE tesFFSegmentosGuardar
(
@pEmpresa_Id int,
@pSegmento_Id varchar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@ptesFlujoFondo bigint,
@pTieneAutomatico bit
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesFFSegmentos WHERE 
	tesFlujoFondo = @ptesFlujoFondo))

BEGIN 
	UPDATE tesFFSegmentos
	SET		Empresa_Id = @pEmpresa_Id,
			Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id), 
			Segmento1N = @pSegmento1N,
			Segmento2N = @pSegmento2N,
			Segmento3N = @pSegmento3N,
			Segmento4N = @pSegmento4N,
			Segmento1C = @pSegmento1C,
			Segmento2C = @pSegmento2C,
			Segmento3C = @pSegmento3C,
			Segmento4C = @pSegmento4C
	WHERE 
		tesFlujoFondo = @ptesFlujoFondo
END 
ELSE 
-- Averiguo el que sigue
	
	If (@pTieneAutomatico=1)
		BEGIN
		SET @pSegmento1N = (SELECT MAX(tesFFSegmentos.Segmento1N)+1 AS Segmento1N 
				FROM tesFFSegmentos 
					Where				
					tesFFSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) AND 
					tesFFSegmentos.Segmento2N = @pSegmento2N AND 
					tesFFSegmentos.Segmento3N = @pSegmento3N AND 
					tesFFSegmentos.Segmento4N = @pSegmento4N AND 
					tesFFSegmentos.Segmento1C = @pSegmento1C AND 
					tesFFSegmentos.Segmento2C = @pSegmento2C AND 
					tesFFSegmentos.Segmento3C = @pSegmento3C AND 
					tesFFSegmentos.Segmento4C = @pSegmento4C And
					tesFFSegmentos.Empresa_Id = @pEmpresa_Id)
		
		If @pSegmento1N Is Null
			SET @pSegmento1N = (SELECT genContadorSegmento.PrimerNumero AS Segmento1N 
				From genContadorSegmento Where
					genContadorSegmento.Empresa_Id = @pEmpresa_Id And
							(genContadorSegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
							genContadorSegmento.Segmento2N = @pSegmento2N AND 
							genContadorSegmento.Segmento3N = @pSegmento3N AND 
							genContadorSegmento.Segmento4N = @pSegmento4N AND 
							genContadorSegmento.Segmento1C = @pSegmento1C AND 
							genContadorSegmento.Segmento2C = @pSegmento2C AND 
							genContadorSegmento.Segmento3C = @pSegmento3C AND 
							genContadorSegmento.Segmento4C = @pSegmento4C
					)

		-- esto solo pasa si empieza en 1 esta prendido
			if @pSegmento1N is null or @pSegmento1N < 0
			begin
				set @pSegmento1N = 1
			end	
	END



BEGIN 
	INSERT INTO tesFFSegmentos
	(
		Empresa_Id,
		Segmento_Id,
		Segmento1N,
		Segmento2N,
		Segmento3N,
		Segmento4N,
		Segmento1C,
		Segmento2C,
		Segmento3C,
		Segmento4C,
		tesFlujoFondo
	)
	VALUES 
	(
		@pEmpresa_Id,
		dbo.FuncFKgenSegmentos(@pSegmento_Id),
		@pSegmento1N,
		@pSegmento2N,
		@pSegmento3N,
		@pSegmento4N,
		@pSegmento1C,
		@pSegmento2C,
		@pSegmento3C,
		@pSegmento4C,
		@ptesFlujoFondo
	)
END 
SELECT @pSegmento1N as RetVal
GO

DROP PROCEDURE tesFFSegmentosDatos
GO
CREATE PROCEDURE tesFFSegmentosDatos
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20)
)
AS
SET NOCOUNT ON 

SELECT tesFFSegmentos.Empresa_Id, genSegmentos.Segmento_Id, tesFFSegmentos.Segmento1N,
	tesFFSegmentos.Segmento2N, tesFFSegmentos.Segmento3N, tesFFSegmentos.Segmento4N, tesFFSegmentos.Segmento1C,
	tesFFSegmentos.Segmento2C, tesFFSegmentos.Segmento3C, tesFFSegmentos.Segmento4C, tesFFSegmentos.tesFlujoFondo, 
		genSegmentos.TieneColumnaAutomatica
FROM tesFFSegmentos 
INNER JOIN genSegmentos  ON (genSegmentos.genSegmentos = tesFFSegmentos.Segmento_Id)
INNER JOIN tesFlujoFondo  ON (tesFlujoFondo.tesFlujoFondo = tesFFSegmentos.tesFlujoFondo)
WHERE (Empresa_Id = @pEmpresa_Id)
AND (genSegmentos.Segmento_Id = @pSegmento_Id)
AND (Segmento1N = @pSegmento1N)
AND (Segmento2N = @pSegmento2N)
AND (Segmento3N = @pSegmento3N)
AND (Segmento4N = @pSegmento4N)
AND (Segmento1C = @pSegmento1C)
AND (Segmento2C = @pSegmento2C)
AND (Segmento3C = @pSegmento3C)
AND (Segmento4C = @pSegmento4C)
 
RETURN @@Error 

GO

DROP PROCEDURE tesFFSegmentosEliminar
GO
CREATE PROCEDURE tesFFSegmentosEliminar
(
@pEmpresa_Id int,
@pSegmento_Id varchar(10),
@pSegmento1N int ,
@pSegmento2N int ,
@pSegmento3N int ,
@pSegmento4N int ,
@pSegmento1C varchar(20) ,
@pSegmento2C varchar(20) ,
@pSegmento3C varchar(20) ,
@pSegmento4C varchar(20) 
)
AS
SET NOCOUNT ON 

DELETE FROM tesFFSegmentos 
WHERE (Empresa_Id = @pEmpresa_Id)
AND (Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id))
AND (Segmento1N = @pSegmento1N)
AND (Segmento2N = @pSegmento2N)
AND (Segmento3N = @pSegmento3N)
AND (Segmento4N = @pSegmento4N)
AND (Segmento1C = @pSegmento1C)
AND (Segmento2C = @pSegmento2C)
AND (Segmento3C = @pSegmento3C)
AND (Segmento4C = @pSegmento4C)
 
RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesFlujo.sql*/
-- tesFuljoDatosINT 1, '20200928','20201004',1

DROP PROCEDURE tesFuljoDatosINT
GO
CREATE PROCEDURE tesFuljoDatosINT(
@tesFlujoFondo bigint, 
@FechaDesde DateTime, 
@FechaHasta DateTime, 
@Empresa_Id Int
)

AS
SET DATEFIRST 1

Select tesFlujoFondo.tesFlujoFondo, 
	genSegmentos.Segmento_Id, tesFFSegmentos.Segmento1N, tesFFSegmentos.Segmento2N,
	tesFFSegmentos.Segmento3N, tesFFSegmentos.Segmento4N, tesFFSegmentos.Segmento1C,
	tesFFSegmentos.Segmento2C, tesFFSegmentos.Segmento3C, tesFFSegmentos.Segmento4C,
	tesFlujoFondo.FechaDesde, tesFlujoFondo.FechaHasta, tesFlujoFondo.DetallaClientes, 
	tesFlujoFondo.DetallaProveedores, tesFlujoFondo.Periodo, 
	tesFlujoFondo.FechaRegistro, genUsuarios.Usuario_Id, tesFFSegmentos.Empresa_Id
From tesFlujoFondo 
INNER JOIN tesFFSegmentos ON tesFFSegmentos.tesFlujoFondo =tesFlujoFondo.tesFlujoFondo
INNER JOIN genSegmentos ON genSegmentos.genSegmentos =tesFFSegmentos.Segmento_Id
INNER JOIN genUsuarios ON genUsuarios.genUsuarios = tesFlujoFondo.Usuario_Id
Where
	tesFlujoFondo.tesFlujoFondo = @tesFlujoFondo

-- DIAS
SELECT TOP (DATEDIFF(DD, @FechaDesde, @FechaHasta)+1) IDENTITY(INT,1,1) AS id
INTO #Tempnumeros
FROM master.sys.columns a
 CROSS JOIN master.sys.columns b

 SELECT DATEADD(DD, #Tempnumeros.Id-1,@FechaDesde) as Fecha, 
 DATEPART(DW, DATEADD(DD, #Tempnumeros.Id-1,@FechaDesde)) Dia
 from #Tempnumeros
 WHERE
	DATEPART(DW, DATEADD(DD, #Tempnumeros.Id-1,@FechaDesde)) <> 7 AND
	NOT EXISTS(SELECT 1 FROM genDiasFestivos where
		genDiasFestivos.Fecha= DATEADD(DD, #Tempnumeros.Id-1,@FechaDesde))

-- Saldos Inicial por Cartera
SELECT tesIdentifica.Cartera_Id, tesIdentifica.Descripcion , 
	@FechaDesde as Fecha, 
	genMonedas.Moneda_Id,
	SUM(conMovCont.ImporteMonedaOriginal * (-2*conMovCont.TipoMov+3)) AS Monto
From tesIdentifica 
INNER JOIN  genMonedas ON genMonedas.genMonedas =tesIdentifica.Moneda_Id
INNER JOIN tesTiposId ON tesTiposId.tesTiposId = tesIdentifica.TipoCartera
INNER JOIN tesRengMovi ON tesRengMovi.Cartera_Id = tesIdentifica.tesIdentifica
INNER JOIN conMovCont ON 
		tesRengMovi.tesMovimientos = conMovCont.conAsientos AND 
		tesRengMovi.conRenglon = conMovCont.Renglon and 
		tesRengMovi.Cartera_Id = tesIdentifica.tesIdentifica
INNER JOIN conAsientos ON conAsientos.conAsientos = conMovCont.conAsientos 
LEFT JOIN (tesBPlink INNER JOIN tesCheqProp ON 
		tesBPlink.tesCheqProp = tesCheqProp.tesCheqProp) ON 
		tesBPlink.tesMovimientos = tesRengMovi.tesMovimientos and
		tesBPlink.conRenglon = tesRengMovi.conRenglon
WHERE
	tesTiposId.TipoCartera != 'CT' AND 
	tesIdentifica.VaAlCashFlow = 1 and 
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	isnull(tesIdentifica.Empresa_Id,@Empresa_Id) = @Empresa_Id AND 
	ISNULL(tesCheqProp.FechaVencimiento, conAsientos.Fecha) <= @FechaDesde 
GROUP BY tesIdentifica.Cartera_Id, tesIdentifica.Descripcion , 
	genMonedas.Moneda_Id
HAVING SUM(conMovCont.ImporteMonedaOriginal * (-2*conMovCont.TipoMov+3)) <> 0
order by 1

-- Movimientos Diarios por Cartera
SELECT tesIdentifica.Cartera_Id, tesIdentifica.Descripcion , 
	ISNULL(tesCheqProp.FechaVencimiento, conAsientos.Fecha) Fecha, 
	genMonedas.Moneda_Id,
	SUM(conMovCont.ImporteMonedaOriginal * (-2*conMovCont.TipoMov+3)) Monto
From tesIdentifica 
INNER JOIN  genMonedas ON genMonedas.genMonedas =tesIdentifica.Moneda_Id
INNER JOIN tesTiposId ON tesTiposId.tesTiposId = tesIdentifica.TipoCartera
INNER JOIN tesRengMovi ON tesRengMovi.Cartera_Id = tesIdentifica.tesIdentifica
INNER JOIN conMovCont ON 
		tesRengMovi.tesMovimientos = conMovCont.conAsientos AND 
		tesRengMovi.conRenglon = conMovCont.Renglon and 
		tesRengMovi.Cartera_Id = tesIdentifica.tesIdentifica
INNER JOIN conAsientos ON conAsientos.conAsientos = conMovCont.conAsientos 
LEFT JOIN (tesBPlink INNER JOIN tesCheqProp ON 
		tesBPlink.tesCheqProp = tesCheqProp.tesCheqProp) ON 
		tesBPlink.tesMovimientos = tesRengMovi.tesMovimientos and
		tesBPlink.conRenglon = tesRengMovi.conRenglon
WHERE
	tesTiposId.TipoCartera != 'CT' AND 
	tesIdentifica.VaAlCashFlow = 1 and 
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	isnull(tesIdentifica.Empresa_Id,@Empresa_Id) = @Empresa_Id AND 
	ISNULL(tesCheqProp.FechaVencimiento, conAsientos.Fecha) >  @FechaDesde  AND 
	ISNULL(tesCheqProp.FechaVencimiento, conAsientos.Fecha) <=  @FechaHasta 
GROUP BY tesIdentifica.Cartera_Id, tesIdentifica.Descripcion , 
	ISNULL(tesCheqProp.FechaVencimiento, conAsientos.Fecha), 	genMonedas.Moneda_Id
HAVING SUM(conMovCont.ImporteMonedaOriginal * (-2*conMovCont.TipoMov+3)) <> 0  
order by 1,3


-- Saldos Inciales de Clientes

select venClientes.Cliente_Id, venClientes.RazonSocial, 
@FechaDesde as Fecha,
genMonedas.Moneda_Id, 
SUM(genMovCuotas.Saldo*venTipomov.Signo) as Monto
from conAsientos 
	INNER JOIN venMovimientos ON venMovimientos.venMovimientos = conAsientos.conAsientos
	INNER JOIN venTipoMov ON venTipoMov.venTipoMov = venMovimientos.venTipoMov
	INNER JOIN genMovCuotas ON genMovCuotas.Asiento_Id = venMovimientos.venMovimientos
	INNER JOIN venClientes ON venClientes.genEntidades = venMovimientos.Cliente_Id
	INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
WHERE
	conAsientos.Posteado= 1 and 
	conAsientos.Anulado = 0 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	genMovCuotas.FechaVencimiento <= @FechaDesde
group by venClientes.Cliente_Id, venClientes.RazonSocial, 
	genMonedas.Moneda_Id
HAVING SUM(genMovCuotas.Saldo*venTipomov.Signo) <>0
ORDER BY 1

-- Clientes Vencimientos Periodo

select venClientes.Cliente_Id, venClientes.RazonSocial, 
genMovCuotas.FechaVencimiento as Fecha,
genMonedas.Moneda_Id, 
SUM(genMovCuotas.Saldo*venTipomov.Signo) as Monto
from conAsientos 
	INNER JOIN venMovimientos ON venMovimientos.venMovimientos = conAsientos.conAsientos
	INNER JOIN venTipoMov ON venTipoMov.venTipoMov = venMovimientos.venTipoMov
	INNER JOIN genMovCuotas ON genMovCuotas.Asiento_Id = venMovimientos.venMovimientos
	INNER JOIN venClientes ON venClientes.genEntidades = venMovimientos.Cliente_Id
	INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
WHERE
	conAsientos.Posteado= 1 and 
	conAsientos.Anulado = 0 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	genMovCuotas.FechaVencimiento between @FechaDesde and @FechaHasta
group by venClientes.Cliente_Id, venClientes.RazonSocial, 
	genMonedas.Moneda_Id, genMovCuotas.FechaVencimiento
HAVING SUM(genMovCuotas.Saldo*venTipomov.Signo) <>0
ORDER BY 1

-- Clientes Ajustes Manuales Saldo Inicial
select venClientes.Cliente_Id, venClientes.RazonSocial, 
@FechaDesde as Fecha,
genMonedas.Moneda_Id, 
SUM(tesFFCobClientes.Monto) as Monto
from tesFFCobClientes 
	INNER JOIN venClientes ON venClientes.genEntidades = tesFFCobClientes.Cliente_Id
	INNER JOIN genMonedas ON genMonedas.genMonedas = tesFFCobClientes.Moneda_Id
WHERE
	tesFFCobClientes.Fecha <= @FechaDesde and 
	tesFFCobClientes.tesFlujoFondo = @tesFlujoFondo
group by venClientes.Cliente_Id, venClientes.RazonSocial, 
	genMonedas.Moneda_Id
ORDER BY 1

-- Clientes Ajustes Manuales Movimientos

select venClientes.Cliente_Id, venClientes.RazonSocial, 
tesFFCobClientes.Fecha,
genMonedas.Moneda_Id, 
SUM(tesFFCobClientes.Monto) as Monto
from tesFFCobClientes 
	INNER JOIN venClientes ON venClientes.genEntidades = tesFFCobClientes.Cliente_Id
	INNER JOIN genMonedas ON genMonedas.genMonedas = tesFFCobClientes.Moneda_Id
WHERE
	tesFFCobClientes.tesFlujoFondo = @tesFlujoFondo and
	tesFFCobClientes.Fecha > @FechaDesde and 
	tesFFCobClientes.Fecha  <= 	@FechaHasta
group by venClientes.Cliente_Id, venClientes.RazonSocial, 
	genMonedas.Moneda_Id, tesFFCobClientes.Fecha
ORDER BY 1


-- Saldos Inciales de Proveedores

select comProveedores.Proveed_Id, comProveedores.RazonSocial, 
@FechaDesde as Fecha,
genMonedas.Moneda_Id, 
SUM(-genMovCuotas.Saldo*comMovTipos.Signo) as Monto
from conAsientos 
	INNER JOIN comMovProv ON comMovProv.comMovProv = conAsientos.conAsientos
	INNER JOIN comMovTipos ON comMovTipos.Tipomov = comMovprov.Tipomov
	INNER JOIN genMovCuotas ON genMovCuotas.Asiento_Id = comMovProv.comMovProv
	INNER JOIN comProveedores ON comProveedores.genEntidades = comMovprov.Proveed_Id
	INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
WHERE
	comMovProv.FacturaTesoreria = 0 and
	conAsientos.Posteado= 1 and 
	conAsientos.Anulado = 0 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	genMovCuotas.FechaVencimiento <= @FechaDesde
group by comProveedores.Proveed_Id, comProveedores.RazonSocial, 
	genMonedas.Moneda_Id
HAVING SUM(genMovCuotas.Saldo*comMovTipos.Signo) <>0
ORDER BY 1

-- Proveedores Vencimientos Periodo

select comProveedores.Proveed_Id, comProveedores.RazonSocial, 
genMovCuotas.FechaVencimiento Fecha,
genMonedas.Moneda_Id, 
SUM(-genMovCuotas.Saldo*comMovTipos.Signo) as Monto
from conAsientos 
	INNER JOIN comMovProv ON comMovProv.comMovProv = conAsientos.conAsientos
	INNER JOIN comMovTipos ON comMovTipos.Tipomov = comMovprov.Tipomov
	INNER JOIN genMovCuotas ON genMovCuotas.Asiento_Id = comMovprov.comMovprov
	INNER JOIN comProveedores ON comProveedores.genEntidades = comMovprov.Proveed_Id
	INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
WHERE
	comMovProv.FacturaTesoreria = 0 and
	conAsientos.Posteado= 1 and 
	conAsientos.Anulado = 0 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	genMovCuotas.FechaVencimiento > @FechaDesde and 
	genMovCuotas.FechaVencimiento <= @FechaHasta
group by comProveedores.Proveed_Id, comProveedores.RazonSocial, 
	genMonedas.Moneda_Id, genMovCuotas.FechaVencimiento 
HAVING SUM(genMovCuotas.Saldo*comMovTipos.Signo) <>0
ORDER BY 1

-- Ajustes a Proveedores Saldo Inicial

Select comProveedores.Proveed_Id, comProveedores.RazonSocial, 
tesFFPagosProvedores.Fecha,
genMonedas.Moneda_Id, 
SUM(tesFFPagosProvedores.Monto) as Monto
from tesFFPagosProvedores 
	INNER JOIN comProveedores ON comProveedores.genEntidades = tesFFPagosProvedores.Proveed_Id
	INNER JOIN genMonedas ON genMonedas.genMonedas = tesFFPagosProvedores.Moneda_Id
WHERE
	tesFFPagosProvedores.tesFlujoFondo = @tesFlujoFondo and
	tesFFPagosProvedores.Fecha <= @FechaDesde 
group by comProveedores.Proveed_Id, comProveedores.RazonSocial, 
	genMonedas.Moneda_Id, tesFFPagosProvedores.Fecha
ORDER BY 1


-- Ajustes a Proveedores Del Periodo

Select comProveedores.Proveed_Id, comProveedores.RazonSocial, 
tesFFPagosProvedores.Fecha,
genMonedas.Moneda_Id, 
SUM(tesFFPagosProvedores.Monto) as Monto
from tesFFPagosProvedores 
	INNER JOIN comProveedores ON comProveedores.genEntidades = tesFFPagosProvedores.Proveed_Id
	INNER JOIN genMonedas ON genMonedas.genMonedas = tesFFPagosProvedores.Moneda_Id
WHERE
	tesFFPagosProvedores.tesFlujoFondo = @tesFlujoFondo and
	tesFFPagosProvedores.Fecha > @FechaDesde and 
	tesFFPagosProvedores.Fecha  <= 	@FechaHasta
group by comProveedores.Proveed_Id, comProveedores.RazonSocial, 
	genMonedas.Moneda_Id, tesFFPagosProvedores.Fecha
ORDER BY 1

-- Otros Ingresos del Periodo Unicamente
Select tesFFCobranzaOtros.Renglon, tesFFCobranzaOtros.Descripcion, 
	genMonedas.Moneda_Id, tesFFCobranzaOtros.Monto, tesFFCobranzaOtros.Fecha
FROM tesFFCobranzaOtros
	INNER JOIN genMonedas ON tesFFCobranzaOtros.Moneda_Id = genMonedas.genMonedas 
	WHERE
		tesFFCobranzaOtros.tesFlujoFondo = @tesFlujoFondo and
		tesFFCobranzaOtros.Fecha BETWEEN @FechaDesde AND @FechaHasta
ORDER BY 1


-- Otros Egresos del Periodo Unicamente
Select tesFFPagosOtros.Renglon, tesFFPagosOtros.Descripcion, 
	genMonedas.Moneda_Id, tesFFPagosOtros.Monto, 
	tesFFPagosOtros.Tipo, impImpuestos.Impuesto_Id, tesFFPagosOtros.Fecha
FROM tesFFPagosOtros
	INNER JOIN genMonedas ON tesFFPagosOtros.Moneda_Id = genMonedas.genMonedas 
	left join impImpuestos ON impImpuestos.impImpuestos = tesFFPagosOtros.Impuesto_Id
	WHERE
		tesFFPagosOtros.tesFlujoFondo = @tesFlujoFondo and
		tesFFPagosOtros.Fecha BETWEEN @FechaDesde AND @FechaHasta
ORDER BY 1

-- Traigo los Cheques en Catera Saldo Inicial y del Periodo 

SELECT genMonedas.Moneda_Id, SUM(conMovCont.ImporteMonedaOriginal) AS MontoSI
FROM tesCheqTerceros
INNER JOIN tesCTlink ON tesCTlink.tesCheqTerceros =tesCheqTerceros.tesCheqTerceros
inner join tesRengMovi ON  tesRengMovi.tesMovimientos =tesCTlink.tesMovimientos and
tesRengMovi.conRenglon = tesCTlink.conRenglon
Inner join conAsientos ON  conAsientos.conAsientos =tesRengMovi.tesMovimientos
Inner join tesIdentifica ON  tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id
Inner join genMonedas ON  genMonedas.genMonedas  =tesIdentifica.Moneda_Id
INNER JOIN conMovCont ON conMovCont.conAsientos = tesRengMovi.tesMovimientos and 
			conMovCont.Renglon = tesRengMovi.conRenglon
WHERE
tesIdentifica.VaAlCashFlow = 1 and 
conAsientos.Anulado = 0 AND 
conAsientos.Posteado = 1 AND 
tesCheqTerceros.Estado_Id = 'C' AND
tesCTlink.Secuencia = 1 AND
DATEADD(DD, tesCheqTerceros.ClearingDias, FechaVencimiento) < @FechaDesde
GROUP BY genMonedas.Moneda_Id
--LEFT JOIN venClientes ON tesCheqTerceros.Cliente_Id = venClientes.genEntidades


SELECT genMonedas.Moneda_Id, DATEADD(DD, tesCheqTerceros.ClearingDias, FechaVencimiento) Fecha,
SUM(conMovCont.ImporteMonedaOriginal) AS Monto
FROM tesCheqTerceros
INNER JOIN tesCTlink ON tesCTlink.tesCheqTerceros =tesCheqTerceros.tesCheqTerceros
inner join tesRengMovi ON  tesRengMovi.tesMovimientos =tesCTlink.tesMovimientos and
tesRengMovi.conRenglon = tesCTlink.conRenglon
Inner join conAsientos ON  conAsientos.conAsientos =tesRengMovi.tesMovimientos
Inner join tesIdentifica ON  tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id
Inner join genMonedas ON  genMonedas.genMonedas  =tesIdentifica.Moneda_Id
INNER JOIN conMovCont ON conMovCont.conAsientos = tesRengMovi.tesMovimientos and 
			conMovCont.Renglon = tesRengMovi.conRenglon
WHERE
tesIdentifica.VaAlCashFlow = 1 and 
conAsientos.Anulado = 0 AND 
conAsientos.Posteado = 1 AND 
tesCheqTerceros.Estado_Id = 'C' AND
tesCTlink.Secuencia = 1 AND
DATEADD(DD, tesCheqTerceros.ClearingDias, FechaVencimiento) Between @FechaDesde and @FechaHasta
GROUP BY genMonedas.Moneda_Id, DATEADD(DD, tesCheqTerceros.ClearingDias, FechaVencimiento)

-- Ajuste
SELECT tesFFDepositos.Fecha, genMonedas.Moneda_Id, venClientes.Cliente_Id, 
	venClientes.RazonSocial, tesFFDepositos.Monto
FROM tesFFDepositos
	left join venClientes ON venClientes.genEntidades = tesFFDepositos.Cliente_Id 
	INNER JOIN genMonedas ON genMonedas.genMonedas =tesFFDepositos.Moneda_Id
where
	tesFFDepositos.tesFlujoFondo = @tesFlujoFondo and
	tesFFDepositos.Fecha <= @FechaHasta

-- Detalle Por Cliente
SELECT genMonedas.Moneda_Id, venClientes.Cliente_Id, venClientes.RazonSocial,
DATEADD(DD, tesCheqTerceros.ClearingDias, FechaVencimiento) Fecha,
SUM(conMovCont.ImporteMonedaOriginal) AS Monto
FROM tesCheqTerceros
INNER JOIN tesCTlink ON tesCTlink.tesCheqTerceros =tesCheqTerceros.tesCheqTerceros
inner join tesRengMovi ON  tesRengMovi.tesMovimientos =tesCTlink.tesMovimientos and
tesRengMovi.conRenglon = tesCTlink.conRenglon
Inner join conAsientos ON  conAsientos.conAsientos =tesRengMovi.tesMovimientos
Inner join tesIdentifica ON  tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id
Inner join genMonedas ON  genMonedas.genMonedas  =tesIdentifica.Moneda_Id
LEFT JOIN venClientes ON venClientes.genEntidades = tesCheqTerceros.Cliente_Id
INNER JOIN conMovCont ON conMovCont.conAsientos = tesRengMovi.tesMovimientos and 
			conMovCont.Renglon = tesRengMovi.conRenglon

WHERE
tesIdentifica.VaAlCashFlow = 1 and 
conAsientos.Anulado = 0 AND 
conAsientos.Posteado = 1 AND 
tesCheqTerceros.Estado_Id = 'C' AND
tesCTlink.Secuencia = 1 AND
DATEADD(DD, tesCheqTerceros.ClearingDias, FechaVencimiento) <= @FechaHasta
GROUP BY genMonedas.Moneda_Id, venClientes.Cliente_Id, venClientes.RazonSocial,
DATEADD(DD, tesCheqTerceros.ClearingDias, FechaVencimiento)


go


DROP PROCEDURE tesFlujoDatos
GO
CREATE PROCEDURE tesFlujoDatos(
	@Empresa_Id INT, 
	@Segmento_Id Char(5),
	@Segmento1C Char(25),
	@Segmento2C Char(25),
	@Segmento3C Char(25),
	@Segmento4C Char(25),
	@Segmento1N int,
	@Segmento2N int,
	@Segmento3N int,
	@Segmento4N int, 
	@FechaDesde DateTime = null, 
	@FechaHasta DateTime = null
)
as

DECLARE @tesFluFondo bigint

SELECT @tesFluFondo = tesFFSegmentos.tesFlujoFondo
from tesFFSegmentos inner join genSegmentos ON 
	tesFFSegmentos.Segmento_Id = genSegmentos.genSegmentos
	Where
		genSegmentos.Segmento_Id = @Segmento_Id and 
		tesFFSegmentos.Empresa_Id = @Empresa_Id and 
		tesFFSegmentos.Segmento1N = @Segmento1N and 
		tesFFSegmentos.Segmento2N = @Segmento2N and 
		tesFFSegmentos.Segmento3N = @Segmento3N and 
		tesFFSegmentos.Segmento4N = @Segmento4N and 
		tesFFSegmentos.Segmento1C = @Segmento1C and 
		tesFFSegmentos.Segmento2C = @Segmento2C and 
		tesFFSegmentos.Segmento3C = @Segmento3C and 
		tesFFSegmentos.Segmento4C = @Segmento4C 

EXEC tesFuljoDatosINT @tesFluFondo, @FechaDesde, @FechaHasta, @Empresa_Id
GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesFlujoFondo.sql*/
DROP PROCEDURE tesFlujoFondoGuardar
GO
CREATE PROCEDURE tesFlujoFondoGuardar
(
@tesFlujoFondo bigint = NULL,
@pFechaDesde datetime,
@pFechaHasta datetime,
@pDetallaClientes bit,
@pDetallaProveedores bit,
@pUsuario_Id int,
@pFechaRegistro datetime,
@pPeriodo char(1)
)
AS
SET NOCOUNT ON 

IF (EXISTS (SELECT 1 FROM tesFlujoFondo WHERE tesFlujoFondo = @tesFlujoFondo))
BEGIN 
	UPDATE tesFlujoFondo
	SET	FechaDesde = @pFechaDesde,
		FechaHasta = @pFechaHasta,
		DetallaClientes = @pDetallaClientes,
		DetallaProveedores = @pDetallaProveedores,
		Usuario_Id = @pUsuario_Id,
		FechaRegistro = dbo.FechaActual() ,
		Periodo = @pPeriodo
	WHERE 
		tesFlujoFondo = @tesFlujoFondo
END 
ELSE 
BEGIN 
	INSERT INTO tesFlujoFondo
	(
		FechaDesde,
		FechaHasta,
		DetallaClientes,
		DetallaProveedores,
		Usuario_Id,
		FechaRegistro,
		Periodo
	)
	VALUES 
	(
		@pFechaDesde,
		@pFechaHasta,
		@pDetallaClientes,
		@pDetallaProveedores,
		@pUsuario_Id,
		getDate(),
		@pPeriodo
	)
	SET @tesFlujoFondo =  Cast(SCOPE_IDENTITY() as bigint) 
END 
Select @tesFlujoFondo as RetVal 

GO

DROP PROCEDURE tesFlujoFondoDatos
GO
CREATE PROCEDURE tesFlujoFondoDatos
(
	@Empresa_Id INT, 
	@Segmento_Id Char(5),
	@Segmento1C Char(25),
	@Segmento2C Char(25),
	@Segmento3C Char(25),
	@Segmento4C Char(25),
	@Segmento1N int,
	@Segmento2N int,
	@Segmento3N int,
	@Segmento4N int 
)
AS
SET NOCOUNT ON 

SELECT tesFlujoFondo.tesFlujoFondo, 
	genSegmentos.Segmento_Id, tesFFSegmentos.Segmento1N, tesFFSegmentos.Segmento2N,
	tesFFSegmentos.Segmento3N, tesFFSegmentos.Segmento4N, tesFFSegmentos.Segmento1C,
	tesFFSegmentos.Segmento2C, tesFFSegmentos.Segmento3C, tesFFSegmentos.Segmento4C,
	tesFlujoFondo.FechaDesde, tesFlujoFondo.FechaHasta, tesFlujoFondo.DetallaClientes,
	tesFlujoFondo.DetallaProveedores, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, tesFlujoFondo.FechaRegistro,
	tesFlujoFondo.Periodo, tesFFSegmentos.Empresa_Id, 
		tesFlujoFondo.FechaDesde as Fecha
FROM tesFlujoFondo 
INNER JOIN tesFFSegmentos ON tesFFSegmentos.tesFlujoFondo =tesFlujoFondo.tesFlujoFondo
INNER JOIN genSegmentos ON genSegmentos.genSegmentos =tesFFSegmentos.Segmento_Id
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = tesFlujoFondo.Usuario_Id)
WHERE  
	genSegmentos.Segmento_Id = @Segmento_Id and 
	tesFFSegmentos.Empresa_Id = @Empresa_Id and 
	tesFFSegmentos.Segmento1N = @Segmento1N and 
	tesFFSegmentos.Segmento2N = @Segmento2N and 
	tesFFSegmentos.Segmento3N = @Segmento3N and 
	tesFFSegmentos.Segmento4N = @Segmento4N and 
	tesFFSegmentos.Segmento1C = @Segmento1C and 
	tesFFSegmentos.Segmento2C = @Segmento2C and 
	tesFFSegmentos.Segmento3C = @Segmento3C and 
	tesFFSegmentos.Segmento4C = @Segmento4C 

declare  @tesFlujoFondo bigint
SELECT @tesFlujoFondo = tesFFSegmentos.tesFlujoFondo
from tesFFSegmentos inner join genSegmentos ON 
	tesFFSegmentos.Segmento_Id = genSegmentos.genSegmentos
	Where
		genSegmentos.Segmento_Id = @Segmento_Id and 
		tesFFSegmentos.Empresa_Id = @Empresa_Id and 
		tesFFSegmentos.Segmento1N = @Segmento1N and 
		tesFFSegmentos.Segmento2N = @Segmento2N and 
		tesFFSegmentos.Segmento3N = @Segmento3N and 
		tesFFSegmentos.Segmento4N = @Segmento4N and 
		tesFFSegmentos.Segmento1C = @Segmento1C and 
		tesFFSegmentos.Segmento2C = @Segmento2C and 
		tesFFSegmentos.Segmento3C = @Segmento3C and 
		tesFFSegmentos.Segmento4C = @Segmento4C 

Exec genAtributosGeneralesIdentityDatos @tesFlujoFondo, 'tesFlujoFondo'
RETURN @@Error 

GO

DROP PROCEDURE tesFlujoFondoEliminar
GO
CREATE PROCEDURE tesFlujoFondoEliminar
(
	@tesFlujoFondo bigInt
)
AS
SET NOCOUNT ON 

DELETE FROM tesFlujoFondo 
WHERE  
	tesFlujoFondo = @tesFlujoFondo
RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesGanancias.sql*/
DROP PROCEDURE tesGananciasGuardar
GO
CREATE PROCEDURE tesGananciasGuardar
(
@pTabla_Id int,
@pTabla_Id_Nuevo int,
@pEmpresa_Id int = NULL,
@pDescripcion varchar(35),
@pInactivo bit,
@pUsuario_Id int,
@pPosteado bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM tesGanancias WHERE (Tabla_Id = @pTabla_Id)))
BEGIN 
	UPDATE tesGanancias
	SET		@lIdentidad = tesGanancias,
		Tabla_Id = @pTabla_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (Tabla_Id = @pTabla_Id)
END 
ELSE 
BEGIN 
	INSERT INTO tesGanancias
	(
		Tabla_Id,
		Empresa_Id,
		Descripcion,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pTabla_Id,
		@pEmpresa_Id,
		@pDescripcion,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE tesGananciasDatos
GO
CREATE PROCEDURE tesGananciasDatos
(
@pTabla_Id int
)
AS
SET NOCOUNT ON 

SELECT tesGanancias.tesGanancias, tesGanancias.Tabla_Id, tesGanancias.Empresa_Id, Cast( Case When tesGanancias.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpreas,
	tesGanancias.Descripcion, tesGanancias.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
	tesGanancias.Posteado
FROM tesGanancias 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = tesGanancias.Usuario_Id)
WHERE (Tabla_Id = @pTabla_Id)
 

 Declare @pidentity bigint= dbo.FuncFKtesGanancias(@pTabla_Id)

 Exec tesGanCuerpoDatos @pidentity

 Exec genAtributosGeneralesIdentityDatos @pidentity, 'tesGanancias'
 RETURN @@Error 

GO

DROP PROCEDURE tesGananciasEliminar
GO
CREATE PROCEDURE tesGananciasEliminar
(
@pTabla_Id int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM tesGanancias 
WHERE (Tabla_Id = @pTabla_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKtesGanancias
GO

CREATE FUNCTION FuncFKtesGanancias
(
@pTabla_Id int
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = tesGanancias FROM tesGanancias WHERE 
	Tabla_Id = @pTabla_Id
  RETURN @pIdentity
END


GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesGanCuerpo.sql*/
DROP PROCEDURE tesGanCuerpoGuardar
GO
CREATE PROCEDURE tesGanCuerpoGuardar
(
@pTabla_Id int,
@pHasta qMonedaD2,
@pPorcentaje qPorcentaje,
@pMinimo qMonedaD2
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesGanCuerpo WHERE (Tabla_Id = @pTabla_Id) AND (Hasta = @pHasta)))
BEGIN 
	UPDATE tesGanCuerpo
	SET		Porcentaje = @pPorcentaje,
		Minimo = @pMinimo
	WHERE (Tabla_Id = @pTabla_Id) AND (Hasta = @pHasta)
END 
ELSE 
BEGIN 
	INSERT INTO tesGanCuerpo
	(
		Tabla_Id,
		Hasta,
		Porcentaje,
		Minimo
	)
	VALUES 
	(
		@pTabla_Id,
		@pHasta,
		@pPorcentaje,
		@pMinimo
	)
END 

GO

DROP PROCEDURE tesGanCuerpoDatos
GO
CREATE PROCEDURE tesGanCuerpoDatos
(
@pTabla_Id int,
@pHasta qMonedaD2 = Null
)
AS
SET NOCOUNT ON 

SELECT tesGanancias.Tabla_Id, tesGanancias.Descripcion as DescripcionGanancias, tesGanCuerpo.Hasta, tesGanCuerpo.Porcentaje,
	tesGanCuerpo.Minimo
FROM tesGanCuerpo 
INNER JOIN tesGanancias  ON (tesGanancias.tesGanancias = tesGanCuerpo.Tabla_Id)
WHERE tesGanCuerpo.Tabla_Id = @pTabla_Id
AND Hasta = IsNull(@pHasta, Hasta)
 
 RETURN @@Error 

GO

DROP PROCEDURE tesGanCuerpoEliminar
GO
CREATE PROCEDURE tesGanCuerpoEliminar
(
@pTabla_Id int,
@pHasta qMonedaD2 = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM tesGanCuerpo 
WHERE (Tabla_Id = @pTabla_Id)
AND (Hasta = ISNULL(@pHasta, Hasta))
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesIdBancoPropio.sql*/
DROP PROCEDURE tesIdBancoPropioGuardar
GO
CREATE PROCEDURE tesIdBancoPropioGuardar
(
@pCartera_Id VarChar(5),
@pChequeraPredeter int = NULL,
@pBanco_Id varchar(3),
@pCantRenglones int,
@pnumCuenta varchar(35),
@pCtaContDiferido varchar(25) = NULL,
@pMaximoLibrado numeric(9),
@pValorComision numeric(5),
@pLimCredVtaCheques numeric(9),
@pCtaCorto numeric(5),
@pFormulario_Id int,
@pReferencia varchar(150),
@pRepoCheq_Id varchar(50) = NULL, 
@pRepoCheq_IdDif varchar(50) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesIdBancoPropio WHERE (Cartera_Id = dbo.FuncFKtesIdentifica( @pCartera_Id))))
BEGIN 
	UPDATE tesIdBancoPropio
	SET		ChequeraPredeter = @pChequeraPredeter,
		Banco_Id = dbo.FuncFKtesBancos(@pBanco_Id),
		CantRenglones = @pCantRenglones,
		numCuenta = @pnumCuenta,
		CtaContDiferido = dbo.FuncFKconCuentas(@pCtaContDiferido),
		MaximoLibrado = @pMaximoLibrado,
		ValorComision = @pValorComision,
		LimCredVtaCheques = @pLimCredVtaCheques,
		CtaCorto = @pCtaCorto,
		Formulario_Id = @pFormulario_Id,
		Referencia = @pReferencia,
		RepoCheq_Id =dbo.FuncFKgenReportes(@pRepoCheq_Id),
		RepoCheqDif_Id = dbo.FuncFKgenReportes(@pRepoCheq_IdDif) 
	WHERE (Cartera_Id = dbo.FuncFKtesIdentifica( @pCartera_Id))
END 
ELSE 
BEGIN 
	INSERT INTO tesIdBancoPropio
	(
		Cartera_Id,
		ChequeraPredeter,
		Banco_Id,
		CantRenglones,
		numCuenta,
		CtaContDiferido,
		MaximoLibrado,
		ValorComision,
		LimCredVtaCheques,
		CtaCorto,
		Formulario_Id,
		Referencia,
		RepoCheq_Id,
		RepoCheqDif_Id
	)
	VALUES 
	(
		dbo.FuncFKtesIdentifica( @pCartera_Id),
		@pChequeraPredeter,
		dbo.FuncFKtesBancos(@pBanco_Id),
		@pCantRenglones,
		@pnumCuenta,
		dbo.FuncFKconCuentas(@pCtaContDiferido),
		@pMaximoLibrado,
		@pValorComision,
		@pLimCredVtaCheques,
		@pCtaCorto,
		@pFormulario_Id,
		@pReferencia,
		dbo.FuncFKgenReportes(@pRepoCheq_Id),
		dbo.FuncFKgenReportes(@pRepoCheq_IdDif)
	)
END 

GO

DROP PROCEDURE tesIdBancoPropioDatos
GO
CREATE PROCEDURE tesIdBancoPropioDatos
(
@pCartera_Id VarChar(5), 
@pEmpresa_Id Int = NULL
)
AS
SET NOCOUNT ON 


SELECT tesIdentifica.tesIdentifica, tesIdentifica.Cartera_Id, tesIdentifica.Empresa_Id, Cast( Case When tesIdentifica.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpreas,
	tesTiposId.TipoCartera, tesTiposId.Descripcion as DescripcionTiposId, tesIdentifica.Descripcion, conCuentas.Cuenta_Id,
	conCuentas.Descripcion as DescripcionCuentas, conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, conCentro2.Centro2_Id,
	conCentro2.Descripcion as DescripcionCentro2, genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas, 
	genUsuarios.Usuario_Id as UsuarioAmo, 	genUsuarios.Apellido_y_Nombres as DescripcionUsuarioAmo, 
	tesIdentifica.ModiCent1, tesIdentifica.ModiCent2, 
	conCuentas2.Cuenta_Id as CtaValEnTransito,
	conCuentas2.Descripcion as DescripcionCtaValEnTransito, 
	tesIdentifica.Reservado, tesIdentifica.VaAlCashFlow, tesIdentifica.Inactivo,
	genUsuarios2.Usuario_Id, genUsuarios2.Apellido_y_Nombres as DescripcionUsuario, tesIdentifica.Posteado, 

	(select max(Chequera_Id) from tesChequeras 
	where
		tesChequeras.Cartera_Id = tesIdentifica.tesIdentifica and
		tesChequeras.Empresa_Id = @pEmpresa_Id and 
		tesChequeras.Estado_Id = 'P') AS ChequeraPredeter, tesBancos.Banco_Id,
	tesBancos.Descripcion as DescripcionBancos, tesIdBancoPropio.CantRenglones, 
	tesIdBancoPropio.numCuenta, 
	CtaContDiferido.Cuenta_Id as CtaContDiferido, CtaContDiferido.Descripcion as DescripcionCtaContDiferido, 
	tesIdBancoPropio.MaximoLibrado, tesIdBancoPropio.ValorComision, tesIdBancoPropio.LimCredVtaCheques,
	tesIdBancoPropio.CtaCorto, tesIdBancoPropio.Formulario_Id, tesIdBancoPropio.Referencia, 
	genReportes.Reporte_Id RepoCheq_Id, genReportes.Titulo TituloRepoCheq, genRepo2.Reporte_Id RepoCheqDif_Id, 
	genRepo2.Titulo TituloRepoCheqDif, tesIdentifica.FormaDePagoP, tesIdentifica.OrdenPtoVta
FROM tesIdentifica
inner join tesIdBancoPropio ON
tesIdBancoPropio.Cartera_id = tesIdentifica.tesIdentifica  
INNER JOIN tesTiposId  ON (tesTiposId.tesTiposId = tesIdentifica.TipoCartera)
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = tesIdentifica.Cuenta_Id)
INNER JOIN conCentro1  ON (conCentro1.conCentro1 = tesIdentifica.Centro1_Id)
INNER JOIN conCentro2  ON (conCentro2.conCentro2 = tesIdentifica.Centro2_Id)
LEFT JOIN genMonedas  ON (genMonedas.genMonedas = tesIdentifica.Moneda_Id)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = tesIdentifica.UsuarioAmo)
LEFT JOIN conCuentas conCuentas2 ON (conCuentas2.conCuentas = tesIdentifica.CtaValEnTransito)
INNER JOIN genUsuarios genUsuarios2 ON (genUsuarios2.genUsuarios = tesIdentifica.Usuario_Id)
INNER JOIN tesBancos  ON (tesBancos.tesBancos = tesIdBancoPropio.Banco_Id)
LEFT JOIN conCuentas  as CtaContDiferido ON (CtaContDiferido.conCuentas = tesIdBancoPropio.CtaContDiferido)
LEFT JOIN genReportes ON genReportes.genReportes = tesIdBancoPropio.RepoCheq_Id
LEFT JOIN genReportes as genRepo2 ON genRepo2.genReportes = tesIdBancoPropio.RepoCheqDif_Id
WHERE (tesIdentifica.Cartera_id = @pCartera_id)

Declare @pidentity bigint= dbo.FuncFKtesIdentifica(@pCartera_id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'tesIdentifica'
RETURN @@Error 
GO


DROP PROCEDURE tesIdBancoPropioEliminar
GO
CREATE PROCEDURE tesIdBancoPropioEliminar
(
@pCartera_id varchar(5)
)
AS
SET NOCOUNT ON 

DELETE FROM tesIdBancoPropio 
WHERE (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_id))
 
RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesIdCajaAhorro.sql*/
DROP PROCEDURE tesIdCajaAhorroGuardar
GO
CREATE PROCEDURE tesIdCajaAhorroGuardar
(
@pCartera_Id VarChar(5),
@pnumCuenta varchar(35),
@ptopeExtraccion int,
@pInteresPorc numeric(5)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesIdCajaAhorro WHERE (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id))))
BEGIN 
	UPDATE tesIdCajaAhorro
	SET		numCuenta = @pnumCuenta,
		topeExtraccion = @ptopeExtraccion,
		InteresPorc = @pInteresPorc
	WHERE (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id))
END 
ELSE 
BEGIN 
	INSERT INTO tesIdCajaAhorro
	(
		Cartera_Id,
		numCuenta,
		topeExtraccion,
		InteresPorc
	)
	VALUES 
	(
		dbo.FuncFKtesIdentifica(@pCartera_Id),
		@pnumCuenta,
		@ptopeExtraccion,
		@pInteresPorc
	)
END 

GO

DROP PROCEDURE tesIdCajaAhorroDatos
GO
CREATE PROCEDURE tesIdCajaAhorroDatos
(
@pCartera_Id VarChar(5)
)
AS
SET NOCOUNT ON 


SELECT tesIdentifica.tesIdentifica, tesIdentifica.Cartera_id, tesIdentifica.Empresa_Id, Cast( Case When tesIdentifica.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpreas,
	tesTiposId.TipoCartera, tesTiposId.Descripcion as DescripcionTiposId, tesIdentifica.Descripcion, conCuentas.Cuenta_Id,
	conCuentas.Descripcion as DescripcionCuentas, conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, conCentro2.Centro2_Id,
	conCentro2.Descripcion as DescripcionCentro2, genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas, 
	genUsuarios.Usuario_Id as UsuarioAmo, 	genUsuarios.Apellido_y_Nombres as DescripcionUsuarioAmo, 
	tesIdentifica.ModiCent1, tesIdentifica.ModiCent2, 
	conCuentas2.Cuenta_Id as CtaValEnTransito,
	conCuentas2.Descripcion as DescripcionCtaValEnTransito, 
	tesIdentifica.Reservado, tesIdentifica.VaAlCashFlow, tesIdentifica.Inactivo,
	genUsuarios2.Usuario_Id, genUsuarios2.Apellido_y_Nombres as DescripcionUsuario, tesIdentifica.Posteado, 
    tesIdCajaAhorro.numCuenta, tesIdCajaAhorro.topeExtraccion,
	tesIdCajaAhorro.InteresPorc, tesIdentifica.FormaDePagoP, tesIdentifica.OrdenPtoVta

FROM tesIdentifica 
INNER JOIN tesIdCajaAhorro ON tesIdentifica.tesIdentifica = tesIdCajaAhorro.Cartera_Id
INNER JOIN tesTiposId  ON (tesTiposId.tesTiposId = tesIdentifica.TipoCartera)
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = tesIdentifica.Cuenta_Id)
INNER JOIN conCentro1  ON (conCentro1.conCentro1 = tesIdentifica.Centro1_Id)
INNER JOIN conCentro2  ON (conCentro2.conCentro2 = tesIdentifica.Centro2_Id)
LEFT JOIN genMonedas  ON (genMonedas.genMonedas = tesIdentifica.Moneda_Id)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = tesIdentifica.UsuarioAmo)
LEFT JOIN conCuentas conCuentas2 ON (conCuentas2.conCuentas = tesIdentifica.CtaValEnTransito)
INNER JOIN genUsuarios genUsuarios2 ON (genUsuarios2.genUsuarios = tesIdentifica.Usuario_Id)
WHERE (tesIdentifica.Cartera_id = @pCartera_id)
 


Declare @pidentity bigint= dbo.FuncFKtesIdentifica(@pCartera_id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'tesIdentifica'
RETURN @@Error 

GO

DROP PROCEDURE tesIdCajaAhorroEliminar
GO
CREATE PROCEDURE tesIdCajaAhorroEliminar
(
@pCartera_id varchar(5)
)
AS
SET NOCOUNT ON 

DELETE FROM tesIdCajaAhorro 
WHERE (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_id))
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesIdCheqTerceros.sql*/
DROP PROCEDURE tesIdCheqTercerosGuardar
GO
CREATE PROCEDURE tesIdCheqTercerosGuardar
(
@pCartera_Id VarChar(5),
@pCtaChqRechazado varchar(25)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesIdCheqTerceros WHERE (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id))))
BEGIN 
	UPDATE tesIdCheqTerceros
	SET		CtaChqRechazado = dbo.FuncFKconCuentas(@pCtaChqRechazado)
	WHERE (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id))
END 
ELSE 
BEGIN 
	INSERT INTO tesIdCheqTerceros
	(
		Cartera_Id,
		CtaChqRechazado
	)
	VALUES 
	(
		dbo.FuncFKtesIdentifica(@pCartera_Id),
		dbo.FuncFKconCuentas(@pCtaChqRechazado)
	)
END 

GO

DROP PROCEDURE tesIdCheqTercerosDatos
GO
CREATE PROCEDURE tesIdCheqTercerosDatos
(
@pCartera_Id VarChar(5)
)
AS
SET NOCOUNT ON 

SELECT tesIdentifica.tesIdentifica, tesIdentifica.Cartera_id, tesIdentifica.Empresa_Id, Cast( Case When tesIdentifica.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpreas,
	tesTiposId.TipoCartera, tesTiposId.Descripcion as DescripcionTiposId, tesIdentifica.Descripcion, conCuentas.Cuenta_Id,
	conCuentas.Descripcion as DescripcionCuentas, conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, conCentro2.Centro2_Id,
	conCentro2.Descripcion as DescripcionCentro2, genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas, 
	genUsuarios.Usuario_Id as UsuarioAmo, 	genUsuarios.Apellido_y_Nombres as DescripcionUsuarioAmo, 
	tesIdentifica.ModiCent1, tesIdentifica.ModiCent2, 
	conCuentas2.Cuenta_Id as CtaValEnTransito,
	conCuentas2.Descripcion as DescripcionCtaValEnTransito, 
	tesIdentifica.Reservado, tesIdentifica.VaAlCashFlow, tesIdentifica.Inactivo,
	genUsuarios2.Usuario_Id, genUsuarios2.Apellido_y_Nombres as DescripcionUsuario, tesIdentifica.Posteado, 
	CtaChqRechazado.Cuenta_Id AS CtaChqRechazado, CtaChqRechazado.Descripcion as DescripcionCtaChqRechazado, 
	tesIdentifica.FormaDePagoP, tesIdentifica.OrdenPtoVta
FROM 
tesIdentifica inner join tesIdCheqTerceros ON tesIdentifica.tesIdentifica = tesIdCheqTerceros.Cartera_Id
INNER JOIN tesTiposId  ON (tesTiposId.tesTiposId = tesIdentifica.TipoCartera)
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = tesIdentifica.Cuenta_Id)
INNER JOIN conCentro1  ON (conCentro1.conCentro1 = tesIdentifica.Centro1_Id)
INNER JOIN conCentro2  ON (conCentro2.conCentro2 = tesIdentifica.Centro2_Id)
LEFT JOIN genMonedas  ON (genMonedas.genMonedas = tesIdentifica.Moneda_Id)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = tesIdentifica.UsuarioAmo)
LEFT JOIN conCuentas conCuentas2 ON (conCuentas2.conCuentas = tesIdentifica.CtaValEnTransito)
INNER JOIN genUsuarios genUsuarios2 ON (genUsuarios2.genUsuarios = tesIdentifica.Usuario_Id)
LEFT OUTER JOIN conCuentas  CtaChqRechazado ON (CtaChqRechazado.conCuentas = tesIdCheqTerceros.CtaChqRechazado)
WHERE (tesIdentifica.Cartera_Id = @pCartera_Id)
 

Declare @pidentity bigint= dbo.FuncFKtesIdentifica(@pCartera_id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'tesIdentifica'
RETURN @@Error 

 

GO

DROP PROCEDURE tesIdCheqTercerosEliminar
GO
CREATE PROCEDURE tesIdCheqTercerosEliminar
(
@pCartera_id varchar(5)
)
AS
SET NOCOUNT ON 

DELETE FROM tesIdCheqTerceros 
WHERE (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesIdentifica.sql*/

DROP PROCEDURE tesIdentificaGuardar
GO
CREATE PROCEDURE tesIdentificaGuardar
(
@pCartera_Id varchar(5),
@pCartera_Id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pTipoCartera varChar(2),
@pDescripcion varchar(35),
@pCuenta_Id varchar(25) = NULL,
@pCentro1_Id varchar(8),
@pCentro2_Id varchar(8),
@pMoneda_Id varchar(3) = NULL,
@pUsuarioAmo varchar(25) = NULL,
@pModiCent1 bit,
@pModiCent2 bit,
@pCtaValEnTransito varchar(25) = NULL,
@pReservado numeric(5),
@pVaAlCashFlow bit,
@pInactivo bit,
@pUsuario_Id int,
@pPosteado bit, 
@pFormaDePagoP VarChar(2),
@pOrdenPtoVta int = Null
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM tesIdentifica WHERE (Cartera_Id = @pCartera_Id)))
BEGIN 
	UPDATE tesIdentifica
	SET @lIdentidad = tesIdentifica,
		Cartera_Id = @pCartera_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		TipoCartera = dbo.FuncFKtesTiposId(@pTipoCartera),
		Descripcion = @pDescripcion,
		Cuenta_Id = dbo.FuncFKconCuentas(@pCuenta_Id),
		Centro1_Id = dbo.FuncFKconCentro1(@pCentro1_Id),
		Centro2_Id = dbo.FuncFKconCentro2(@pCentro2_Id),
		Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id),
		UsuarioAmo = dbo.FuncFKgenUsuarios(@pUsuarioAmo),
		ModiCent1 = @pModiCent1,
		ModiCent2 = @pModiCent2,
		CtaValEnTransito = dbo.FuncFKconCuentas(@pCtaValEnTransito),
		Reservado = @pReservado,
		VaAlCashFlow = @pVaAlCashFlow,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado, 
		FormaDePagoP = @pFormaDePagoP,
		OrdenPtoVta = @pOrdenPtoVta
	WHERE (Cartera_Id = @pCartera_Id)
END 
ELSE 
BEGIN 
	INSERT INTO tesIdentifica
	(
		Cartera_Id,
		Empresa_Id,
		TipoCartera,
		Descripcion,
		Cuenta_Id,
		Centro1_Id,
		Centro2_Id,
		Moneda_Id,
		UsuarioAmo,
		ModiCent1,
		ModiCent2,
		CtaValEnTransito,
		Reservado,
		VaAlCashFlow,
		Inactivo,
		Usuario_Id,
		Posteado,
		FormaDePagoP,
		OrdenPtoVta
	)
	VALUES 
	(
		@pCartera_Id,
		@pEmpresa_Id,
		dbo.FuncFKtesTiposId(@pTipoCartera),
		@pDescripcion,
		dbo.FuncFKconCuentas(@pCuenta_Id),
		dbo.FuncFKconCentro1(@pCentro1_Id),
		dbo.FuncFKconCentro2(@pCentro2_Id),
		dbo.FuncFKgenMonedas(@pMoneda_Id),
		dbo.FuncFKgenUsuarios(@pUsuarioAmo),
		@pModiCent1,
		@pModiCent2,
		dbo.FuncFKconCuentas(@pCtaValEnTransito),
		@pReservado,
		@pVaAlCashFlow,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado,
		@pFormaDePagoP,
		@pOrdenPtoVta
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE tesIdentificaDatos
GO
CREATE PROCEDURE tesIdentificaDatos
(
@pCartera_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT tesIdentifica.tesIdentifica, tesIdentifica.Cartera_Id, tesIdentifica.Empresa_Id, Cast( Case When tesIdentifica.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpreas,
	tesTiposId.TipoCartera, tesTiposId.Descripcion as DescripcionTiposId, tesIdentifica.Descripcion, conCuentas.Cuenta_Id,
	conCuentas.Descripcion as DescripcionCuentas, conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, conCentro2.Centro2_Id,
	conCentro2.Descripcion as DescripcionCentro2, genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas, 
	genUsuarios.Usuario_Id as UsuarioAmo, 	genUsuarios.Apellido_y_Nombres as DescripcionUsuarioAmo, 
	tesIdentifica.ModiCent1, tesIdentifica.ModiCent2, 
	conCuentas2.Cuenta_Id as CtaValEnTransito,
	conCuentas2.Descripcion as DescripcionCtaValEnTransito, 
	tesIdentifica.Reservado, tesIdentifica.VaAlCashFlow, tesIdentifica.Inactivo,
	genUsuarios2.Usuario_Id, genUsuarios2.Apellido_y_Nombres as DescripcionUsuario, tesIdentifica.Posteado,
	tesIdentifica.FormaDePagoP, tesIdentifica.OrdenPtoVta
FROM tesIdentifica 
INNER JOIN tesTiposId  ON (tesTiposId.tesTiposId = tesIdentifica.TipoCartera)
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = tesIdentifica.Cuenta_Id)
INNER JOIN conCentro1  ON (conCentro1.conCentro1 = tesIdentifica.Centro1_Id)
INNER JOIN conCentro2  ON (conCentro2.conCentro2 = tesIdentifica.Centro2_Id)
LEFT JOIN genMonedas  ON (genMonedas.genMonedas = tesIdentifica.Moneda_Id)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = tesIdentifica.UsuarioAmo)
LEFT JOIN conCuentas conCuentas2 ON (conCuentas2.conCuentas = tesIdentifica.CtaValEnTransito)
INNER JOIN genUsuarios genUsuarios2 ON (genUsuarios2.genUsuarios = tesIdentifica.Usuario_Id)
WHERE (Cartera_Id = @pCartera_Id)
 


 Declare @pidentity bigint= dbo.FuncFKtesIdentifica(@pCartera_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'tesIdentifica'
 RETURN @@Error 

GO

DROP PROCEDURE tesIdentificaEliminar
GO
CREATE PROCEDURE tesIdentificaEliminar
(
@pCartera_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM tesIdentifica 
WHERE (Cartera_Id = @pCartera_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKtesIdentifica
GO

CREATE FUNCTION FuncFKtesIdentifica
(
@pCartera_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = tesIdentifica FROM tesIdentifica WHERE 
	Cartera_Id = @pCartera_Id
  RETURN @pIdentity
END


GO

Drop procedure tesIdentificaPV
Go
Create procedure tesIdentificaPV
(
@pEmpresa_Id int
)
As
Select Cartera_Id, tesIdentifica.Descripcion, tesTiposId.TipoCartera, Cast(0 As Numeric(15,2)) Importe
From tesIdentifica
Inner Join tesTiposId On tesTiposId.tesTiposId = tesIdentifica.TipoCartera
Where OrdenPtoVta <> 0 And isNull(tesIdentifica.Empresa_Id, @pEmpresa_Id) = @pEmpresa_Id
Order by tesIdentifica.OrdenPtoVta
Go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesIdentificaSaldo.sql*/
-- tesIdentificaSaldo 'BN772',1
drop procedure tesIdentificaSaldo
go
create procedure tesIdentificaSaldo
(
@pCartera_Id varchar(5),
@pEmpresa INT
)
as

--Saldos
select tesIdentifica.Cartera_Id, sum(conMovCont.Importe*(-2*conMovCont.TipoMov+3)) as SaldoContable, sum(conMovCont.Importe*(-2*conMovCont.TipoMov+3)) as SaldoBanco from tesMovimientos 
inner join conAsientos on conAsientos.conAsientos=tesMovimientos.tesMovimientos
inner join conMovCont on conMovCont.conAsientos=conAsientos.conAsientos
inner join tesRengMovi on tesRengMovi.tesMovimientos=conAsientos.conAsientos and tesrengmovi.conRenglon=conMovCont.Renglon
inner join tesIdentifica on tesRengMovi.Cartera_Id=tesIdentifica.tesIdentifica
where 
	tesIdentifica.Cartera_Id=@pCartera_Id and
	conAsientos.Anulado = 0 AND
	conAsientos.Posteado = 1 and
	conAsientos.Empresa_Id = @pEmpresa
group by tesIdentifica.Cartera_Id
declare @Fecha DateTime

Set @Fecha = dbo.fechasinhora(Getdate())

--Debitos
select tesIdentifica.Cartera_Id, 
	sum(case when tesCheqProp.FechaVencimiento = dateadd(dd,1,@Fecha) then Importe else 0 end) as Importe24, 
	sum(case when tesCheqProp.FechaVencimiento = dateadd(dd,2,@Fecha) then Importe else 0 end) as Importe48, 
	sum(case when tesCheqProp.FechaVencimiento > dateadd(dd,2,@Fecha) then Importe else 0 end) as Importe72
from tesIdentifica inner join tesRengMovi on tesRengMovi.Cartera_Id= tesIdentifica.tesIdentifica
inner join conAsientos on tesRengMovi.tesMovimientos = conAsientos.conAsientos
inner join conMovCont on conMovCont.conAsientos=tesRengMovi.tesMovimientos and tesRengMovi.conRenglon=conMovCont.Renglon
inner join tesBPlink on  tesBPlink.tesMovimientos = tesRengMovi.tesMovimientos and  tesBPlink.conRenglon = tesRengMovi.conRenglon
inner join tesCheqProp on tesBPlink.tesCheqProp=tesCheqProp.tesCheqProp
Where
	tesCheqProp.FechaVencimiento > GETDATE() and
	tesRengMovi.TipomovCont = 2 and 
	tesIdentifica.Cartera_Id=@pCartera_Id and
	conAsientos.Anulado = 0 AND
	conAsientos.Posteado = 1 and
	conAsientos.Empresa_Id = @pEmpresa
	GROUP BY tesIdentifica.Cartera_Id

--Creditos

select tesIdentifica.Cartera_Id, 
	sum(case when DATEADD(dd,tesCheqTerceros.ClearingDias, conAsientos.Fecha) = dateadd(dd,1,@Fecha) then Importe else 0 end) as Importe24, 
	sum(case when DATEADD(dd,tesCheqTerceros.ClearingDias, conAsientos.Fecha) = dateadd(dd,2,@Fecha) then Importe else 0 end) as Importe48, 
	sum(case when DATEADD(dd,tesCheqTerceros.ClearingDias, conAsientos.Fecha) > dateadd(dd,2,@Fecha) then Importe else 0 end) as Importe72
from tesIdentifica inner join tesRengMovi on tesRengMovi.Cartera_Id= tesIdentifica.tesIdentifica
inner join tesRengmovi tesRengmovi2 on tesRengmovi2.tesMovimientos = tesRengmovi.tesMovimientos and tesRengmovi.conRenglon != tesRengmovi2.conRenglon
inner join conAsientos on tesRengMovi.tesMovimientos = conAsientos.conAsientos
inner join conMovCont on conMovCont.conAsientos=tesRengMovi2.tesMovimientos and tesRengMovi2.conRenglon=conMovCont.Renglon
inner join tesCTlink on  tesCTlink.tesMovimientos = tesRengMovi2.tesMovimientos and  tesCTlink.conRenglon = tesRengMovi2.conRenglon
inner join tesCheqTerceros on tesCheqTerceros.tesCheqTerceros=tesCTlink.tesCheqTerceros
inner join tesMovimientos ON tesMovimientos.tesMovimientos = tesRengMovi.tesMovimientos
inner join tesSubTiposMov on tesSubTiposMov.tesSubTiposMov = tesMovimientos.SubTipo_Id
Where
	tesSubTiposMov.SubTipo_Id = 'DE3' AND 
	tesIdentifica.Cartera_Id=@pCartera_Id and
	conAsientos.Anulado = 0 AND
	conAsientos.Posteado = 1 and
	conAsientos.Empresa_Id = @pEmpresa and
	tesRengMovi.TipomovCont = 1
	GROUP BY tesIdentifica.Cartera_Id



go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesIdRetClien.sql*/
DROP PROCEDURE tesIdRetClienGuardar
GO
CREATE PROCEDURE tesIdRetClienGuardar
(
@pCartera_Id VarChar(5),
@pvaSubDiarioVta bit,
@pTipoImpuesto int,
@pNroResSicore Numeric(5)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesIdRetClien WHERE (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id))))
BEGIN 
	UPDATE tesIdRetClien
	SET vaSubDiarioVta = @pvaSubDiarioVta,
	TipoImpuesto = @pTipoImpuesto,
	NroResSicore = @pNroResSicore
	WHERE (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id))
END 
ELSE 
BEGIN 
	INSERT INTO tesIdRetClien
	(
		Cartera_Id,
		vaSubDiarioVta,
		TipoImpuesto,
		NroResSicore
		
	)
	VALUES 
	(
		dbo.FuncFKtesIdentifica(@pCartera_Id),
		@pvaSubDiarioVta,
		@pTipoImpuesto,
		@pNroResSicore
	)
END 

GO

DROP PROCEDURE tesIdRetClienDatos
GO
CREATE PROCEDURE tesIdRetClienDatos
(
@pCartera_Id VarChar(5)
)
AS
SET NOCOUNT ON 

SELECT tesIdentifica.tesIdentifica, tesIdentifica.Cartera_Id, tesIdentifica.Empresa_Id, 
Cast( Case When tesIdentifica.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpreas,
	tesTiposId.TipoCartera, tesTiposId.Descripcion as DescripcionTiposId, tesIdentifica.Descripcion, conCuentas.Cuenta_Id,
	conCuentas.Descripcion as DescripcionCuentas, conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, conCentro2.Centro2_Id,
	conCentro2.Descripcion as DescripcionCentro2, genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas, 
	genUsuarios.Usuario_Id as UsuarioAmo, genUsuarios.Apellido_y_Nombres as DescripcionUsuarioAmo, 
	tesIdentifica.ModiCent1, tesIdentifica.ModiCent2, 
	conCuentas2.Cuenta_Id as CtaValEnTransito,
	conCuentas2.Descripcion as DescripcionCtaValEnTransito, 
	tesIdentifica.Reservado, tesIdentifica.VaAlCashFlow, tesIdentifica.Inactivo,
	genUsuarios2.Usuario_Id, genUsuarios2.Apellido_y_Nombres as DescripcionUsuario, tesIdentifica.Posteado, 
	tesIdRetClien.vaSubDiarioVta, tesIdRetClien.TipoImpuesto, impTipoImpuesto.Descripcion DescripcionTipoImpuesto, tesIdRetClien.NroResSicore, 
	tesidentifica.FormaDePagoP
FROM tesIdentifica 
INNER JOIN tesIdRetClien ON tesIdentifica.tesIdentifica = tesIdRetClien.Cartera_Id
INNER JOIN tesTiposId  ON (tesTiposId.tesTiposId = tesIdentifica.TipoCartera)
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = tesIdentifica.Cuenta_Id)
INNER JOIN conCentro1  ON (conCentro1.conCentro1 = tesIdentifica.Centro1_Id)
INNER JOIN conCentro2  ON (conCentro2.conCentro2 = tesIdentifica.Centro2_Id)
LEFT JOIN genMonedas  ON (genMonedas.genMonedas = tesIdentifica.Moneda_Id)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = tesIdentifica.UsuarioAmo)
LEFT JOIN conCuentas conCuentas2 ON (conCuentas2.conCuentas = tesIdentifica.CtaValEnTransito)
INNER JOIN genUsuarios genUsuarios2 ON (genUsuarios2.genUsuarios = tesIdentifica.Usuario_Id)
Left Join impTipoImpuesto On impTipoImpuesto.TipoImpuesto = tesIdRetClien.TipoImpuesto
WHERE (tesIdentifica.Cartera_Id = @pCartera_Id)



Declare @pidentity bigint= dbo.FuncFKtesIdentifica(@pCartera_id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'tesIdentifica'
 
RETURN @@Error 

GO

DROP PROCEDURE tesIdRetClienEliminar
GO
CREATE PROCEDURE tesIdRetClienEliminar
(
@pCartera_Id varchar(5)
)
AS
SET NOCOUNT ON 

DELETE FROM tesIdRetClien 
WHERE (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id))
 
RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesIdRetProv.sql*/
DROP PROCEDURE tesIdRetProvGuardar
GO
CREATE PROCEDURE tesIdRetProvGuardar
(
@pCartera_Id VarChar(5),
@pFormula varchar(300),
@pSegmento_Id varchar(10),
@pTipoImpuesto int,
@pNroResSicore numeric(5),
@pTipoCtaProv int,
@pConcepto varchar(max) = NULL,
@pPorcentaje numeric(5,2),
@pUsuarioFirmante varchar(30),
@pMinimo numeric(9),
@pGenRetxFact bit,
@pReporte_Id varChar(50)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesIdRetProv WHERE (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_id))))
BEGIN 
	UPDATE tesIdRetProv
	SET	
		Formula = @pFormula,
		Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id),
		TipoImpuesto = @pTipoImpuesto,
		NroResSicore = @pNroResSicore,
		TipoCtaProv = @pTipoCtaProv,
		Concepto = @pConcepto,
		Porcentaje = @pPorcentaje,
		UsuarioFirmante = @pUsuarioFirmante,
		Minimo = @pMinimo,
		GenRetxFact = @pGenRetxFact,
		Reporte_Id = dbo.FuncFKgenReportes(@pReporte_Id)
	WHERE (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_id))
END 
ELSE 
BEGIN 
	INSERT INTO tesIdRetProv
	(
		Cartera_Id,
		Formula,
		Segmento_Id,
		TipoImpuesto,
		NroResSicore,
		TipoCtaProv,
		Concepto,
		Porcentaje,
		UsuarioFirmante,
		Minimo,
		GenRetxFact,
		Reporte_Id
	)
	VALUES 
	(
		dbo.FuncFKtesIdentifica(@pCartera_Id),
		@pFormula,
		dbo.FuncFKgenSegmentos(@pSegmento_Id),
		@pTipoImpuesto,
		@pNroResSicore,
		@pTipoCtaProv,
		@pConcepto,
		@pPorcentaje,
		@pUsuarioFirmante,
		@pMinimo,
		@pGenRetxFact,
		dbo.FuncFKgenReportes(@pReporte_Id)
	)
END 

GO

DROP PROCEDURE tesIdRetProvDatos
GO
CREATE PROCEDURE tesIdRetProvDatos
(
@pCartera_Id VarChar(5)
)
AS
SET NOCOUNT ON 

SELECT tesIdentifica.tesIdentifica, tesIdentifica.Cartera_Id, tesIdentifica.Empresa_Id, 
	Cast( Case When tesIdentifica.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpreas,
	tesTiposId.TipoCartera, tesTiposId.Descripcion as DescripcionTiposId, tesIdentifica.Descripcion, conCuentas.Cuenta_Id,
	conCuentas.Descripcion as DescripcionCuentas, conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, conCentro2.Centro2_Id,
	conCentro2.Descripcion as DescripcionCentro2, genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas, 
	genUsuarios.Usuario_Id as UsuarioAmo, genUsuarios.Apellido_y_Nombres as DescripcionUsuarioAmo, 
	tesIdentifica.ModiCent1, tesIdentifica.ModiCent2, 
	conCuentas2.Cuenta_Id as CtaValEnTransito,
	conCuentas2.Descripcion as DescripcionCtaValEnTransito, 
	tesIdentifica.Reservado, tesIdentifica.VaAlCashFlow, tesIdentifica.Inactivo,
	genUsuarios2.Usuario_Id, genUsuarios2.Apellido_y_Nombres as DescripcionUsuario, tesIdentifica.Posteado, 
	genSegmentos.Segmento_Id, genSegmentos.Descripcion DescripcionSegmento, tesIdRetProv.Formula, 
	impTipoImpuesto.TipoImpuesto, impTipoImpuesto.Descripcion DescripcionTipoImpuesto,
	tesIdRetProv.NroResSicore, tesIdRetProv.TipoCtaProv, comProveedoresTipoPasivo.Descripcion DescripcionTipoPasivo,
	tesIdRetProv.Concepto, tesIdRetProv.Porcentaje, tesIdRetProv.UsuarioFirmante, tesIdRetProv.Minimo, tesIdRetProv.GenRetxFact,
	genReportes.Reporte_Id, genReportes.Titulo, tesIdentifica.FormaDePagoP
FROM tesIdentifica 
INNER JOIN tesIdRetProv ON tesIdentifica.tesIdentifica = tesIdRetProv.Cartera_Id
INNER JOIN tesTiposId  ON (tesTiposId.tesTiposId = tesIdentifica.TipoCartera)
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = tesIdentifica.Cuenta_Id)
INNER JOIN conCentro1  ON (conCentro1.conCentro1 = tesIdentifica.Centro1_Id)
INNER JOIN conCentro2  ON (conCentro2.conCentro2 = tesIdentifica.Centro2_Id)
LEFT JOIN genMonedas  ON (genMonedas.genMonedas = tesIdentifica.Moneda_Id)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = tesIdentifica.UsuarioAmo)
LEFT JOIN conCuentas conCuentas2 ON (conCuentas2.conCuentas = tesIdentifica.CtaValEnTransito)
INNER JOIN genUsuarios genUsuarios2 ON (genUsuarios2.genUsuarios = tesIdentifica.Usuario_Id)
Left Join genSegmentos On genSegmentos.genSegmentos = tesIdRetProv.Segmento_Id
Left Join comProveedoresTipoPasivo On comProveedoresTipoPasivo.TipoCtaProv = tesIdRetProv.TipoCtaProv
Left Join impTipoImpuesto On impTipoImpuesto.TipoImpuesto = tesIdRetProv.TipoImpuesto
Left Join genReportes On genReportes.genReportes = tesIdRetProv.Reporte_Id
WHERE (tesIdentifica.Cartera_id = @pCartera_id)


Declare @pidentity bigint= dbo.FuncFKtesIdentifica(@pCartera_id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'tesIdentifica'

RETURN @@Error 

GO

DROP PROCEDURE tesIdRetProvEliminar
GO
CREATE PROCEDURE tesIdRetProvEliminar
(
@pCartera_id varchar(5)
)
AS
SET NOCOUNT ON 

DELETE FROM tesIdRetProv 
WHERE (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_id))
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesIdTarjetas3.sql*/
DROP PROCEDURE tesIdTarjetas3Guardar
GO
CREATE PROCEDURE tesIdTarjetas3Guardar
(
@pCartera_Id VarChar(5),
@pMaxCuotas int,
@pBanco_Id varchar(3),
@pTipoTarjeta varchar(15)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesIdTarjetas3 WHERE (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_id))))
BEGIN 
	UPDATE tesIdTarjetas3
	SET MaxCuotas = @pMaxCuotas,
	Banco_Id  = dbo.FuncFKtesBancos(@pBanco_Id),
	TipoTarjeta = dbo.FuncFKtesIdTarjetasTipo(@pTipoTarjeta)
	WHERE (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id))
END 
ELSE 
BEGIN 
	INSERT INTO tesIdTarjetas3
	(
		Cartera_Id,
		MaxCuotas,
		Banco_Id,
		TipoTarjeta
	)
	VALUES 
	(
		dbo.FuncFKtesIdentifica(@pCartera_Id),
		@pMaxCuotas,
		dbo.FuncFKtesBancos(@pBanco_Id),
		dbo.FuncFKtesIdTarjetasTipo(@pTipoTarjeta)
	)
END 

GO

DROP PROCEDURE tesIdTarjetas3Datos
GO
CREATE PROCEDURE tesIdTarjetas3Datos
(
@pCartera_Id VarChar(5)
)
AS
SET NOCOUNT ON 

SELECT tesIdentifica.tesIdentifica, tesIdentifica.Cartera_Id, tesIdentifica.Empresa_Id, Cast( Case When tesIdentifica.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpreas,
	tesTiposId.TipoCartera, tesTiposId.Descripcion as DescripcionTiposId, tesIdentifica.Descripcion, conCuentas.Cuenta_Id,
	conCuentas.Descripcion as DescripcionCuentas, conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, conCentro2.Centro2_Id,
	conCentro2.Descripcion as DescripcionCentro2, genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas, 
	genUsuarios.Usuario_Id as UsuarioAmo, 	genUsuarios.Apellido_y_Nombres as DescripcionUsuarioAmo, 
	tesIdentifica.ModiCent1, tesIdentifica.ModiCent2, 
	conCuentas2.Cuenta_Id as CtaValEnTransito,
	conCuentas2.Descripcion as DescripcionCtaValEnTransito, 
	tesIdentifica.Reservado, tesIdentifica.VaAlCashFlow, tesIdentifica.Inactivo,
	genUsuarios2.Usuario_Id, genUsuarios2.Apellido_y_Nombres as DescripcionUsuario, tesIdentifica.Posteado, 
	tesIdentifica.FormaDePagoP, tesIdentifica.OrdenPtoVta, tesIdTarjetas3.MaxCuotas, tesBancos.Banco_Id, tesIdTarjetasTipo.TipoTarjeta
FROM tesIdentifica 
INNER JOIN tesIdTarjetas3 ON tesIdentifica.tesIdentifica = tesIdTarjetas3.Cartera_Id
INNER JOIN tesTiposId  ON (tesTiposId.tesTiposId = tesIdentifica.TipoCartera)
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = tesIdentifica.Cuenta_Id)
INNER JOIN conCentro1  ON (conCentro1.conCentro1 = tesIdentifica.Centro1_Id)
INNER JOIN conCentro2  ON (conCentro2.conCentro2 = tesIdentifica.Centro2_Id)
LEFT JOIN genMonedas  ON (genMonedas.genMonedas = tesIdentifica.Moneda_Id)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = tesIdentifica.UsuarioAmo)
LEFT JOIN conCuentas conCuentas2 ON (conCuentas2.conCuentas = tesIdentifica.CtaValEnTransito)
INNER JOIN genUsuarios genUsuarios2 ON (genUsuarios2.genUsuarios = tesIdentifica.Usuario_Id)
Inner Join tesBancos On tesBancos.tesBancos = tesIdTarjetas3.Banco_Id
Inner Join tesIdTarjetasTipo On tesIdTarjetasTipo.tesIdTarjetasTipo = tesIdTarjetas3.TipoTarjeta
WHERE (tesIdentifica.Cartera_Id = @pCartera_Id)
 


Declare @pidentity bigint= dbo.FuncFKtesIdentifica(@pCartera_Id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'tesIdentifica'
 
RETURN @@Error 

GO

DROP PROCEDURE tesIdTarjetas3Eliminar
GO
CREATE PROCEDURE tesIdTarjetas3Eliminar
(
@pCartera_Id varchar(5)
)
AS
SET NOCOUNT ON 

DELETE FROM tesIdTarjetas3 
WHERE (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id))
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesIdTarjetasTipo.sql*/
DROP PROCEDURE tesIdTarjetasTipoGuardar
GO
CREATE PROCEDURE tesIdTarjetasTipoGuardar
(
@pTipoTarjeta varchar(15),
@pTipoTarjeta_Nuevo varchar(15),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(60),
@pClase varchar(20),
@pUsuario_Id int = NULL,
@pInactivo Sino,
@pPosteado Sino
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM tesIdTarjetasTipo WHERE (TipoTarjeta = @pTipoTarjeta)))
BEGIN 
	UPDATE tesIdTarjetasTipo
	SET @lIdentidad = tesIdTarjetasTipo,
		TipoTarjeta = @pTipoTarjeta_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Clase = @pClase,
		Usuario_Id = @pUsuario_Id,
		Inactivo = @pInactivo,
		Posteado = @pPosteado
	WHERE (TipoTarjeta = @pTipoTarjeta)
END 
ELSE 
BEGIN 
	INSERT INTO tesIdTarjetasTipo
	(
		TipoTarjeta,
		Empresa_Id,
		Descripcion,
		Clase,
		Usuario_Id,
		Inactivo,
		Posteado
	)
	VALUES 
	(
		@pTipoTarjeta,
		@pEmpresa_Id,
		@pDescripcion,
		@pClase,
		@pUsuario_Id,
		@pInactivo,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE tesIdTarjetasTipoDatos
GO
CREATE PROCEDURE tesIdTarjetasTipoDatos
(
@pTipoTarjeta varchar(15)
)
AS
SET NOCOUNT ON 

SELECT tesIdTarjetasTipo.tesIdTarjetasTipo, tesIdTarjetasTipo.TipoTarjeta, tesIdTarjetasTipo.TipoTarjeta TipoTarjeta_Nueva, tesIdTarjetasTipo.Empresa_Id,
	Cast( Case When tesIdTarjetasTipo.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, tesIdTarjetasTipo.Descripcion, tesIdTarjetasTipo.Clase,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, tesIdTarjetasTipo.Inactivo, tesIdTarjetasTipo.Posteado
FROM tesIdTarjetasTipo 
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = tesIdTarjetasTipo.Usuario_Id)
WHERE (TipoTarjeta = @pTipoTarjeta)
 

Declare @pidentity bigint= dbo.FuncFKtesIdTarjetasTipo(@pTipoTarjeta)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'tesIdTarjetasTipo'
RETURN @@Error 

GO

DROP PROCEDURE tesIdTarjetasTipoEliminar
GO
CREATE PROCEDURE tesIdTarjetasTipoEliminar
(
@pTipoTarjeta varchar(15)
)
AS
SET NOCOUNT ON 

DELETE FROM tesIdTarjetasTipo 
WHERE (TipoTarjeta = @pTipoTarjeta)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKtesIdTarjetasTipo
GO

CREATE FUNCTION FuncFKtesIdTarjetasTipo
(
@pTipoTarjeta varchar (15)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = tesIdTarjetasTipo FROM tesIdTarjetasTipo WHERE 
	TipoTarjeta = @pTipoTarjeta
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesIdVarios.sql*/
DROP PROCEDURE tesIdVariosGuardar
GO
CREATE PROCEDURE tesIdVariosGuardar
(
@pCartera_Id VarChar(5),
@pModi_Cuenta bit
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesIdVarios WHERE (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_id))))
BEGIN 
	UPDATE tesIdVarios
	SET		Modi_Cuenta = @pModi_Cuenta
	WHERE (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_id))
END 
ELSE 
BEGIN 
	INSERT INTO tesIdVarios
	(
		Cartera_Id,
		Modi_Cuenta
	)
	VALUES 
	(
		dbo.FuncFKtesIdentifica(@pCartera_id),
		@pModi_Cuenta
	)
END 

GO

DROP PROCEDURE tesIdVariosDatos
GO
CREATE PROCEDURE tesIdVariosDatos
(
@pCartera_Id VarChar(5)
)
AS
SET NOCOUNT ON 

SELECT tesIdentifica.tesIdentifica, tesIdentifica.Cartera_id, tesIdentifica.Empresa_Id, Cast( Case When tesIdentifica.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpreas,
	tesTiposId.TipoCartera, tesTiposId.Descripcion as DescripcionTiposId, tesIdentifica.Descripcion, conCuentas.Cuenta_Id,
	conCuentas.Descripcion as DescripcionCuentas, conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, conCentro2.Centro2_Id,
	conCentro2.Descripcion as DescripcionCentro2, genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas, 
	genUsuarios.Usuario_Id as UsuarioAmo, 	genUsuarios.Apellido_y_Nombres as DescripcionUsuarioAmo, 
	tesIdentifica.ModiCent1, tesIdentifica.ModiCent2, 
	conCuentas2.Cuenta_Id as CtaValEnTransito,
	conCuentas2.Descripcion as DescripcionCtaValEnTransito, 
	tesIdentifica.Reservado, tesIdentifica.VaAlCashFlow, tesIdentifica.Inactivo,
	genUsuarios2.Usuario_Id, genUsuarios2.Apellido_y_Nombres as DescripcionUsuario, tesIdentifica.Posteado, 
	tesIdVarios.Modi_Cuenta, tesIdentifica.FormaDePagoP, tesIdentifica.OrdenPtoVta
FROM tesIdentifica 
INNER JOIN tesIdVarios ON tesIdentifica.tesIdentifica = tesIdVarios.Cartera_Id
INNER JOIN tesTiposId  ON (tesTiposId.tesTiposId = tesIdentifica.TipoCartera)
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = tesIdentifica.Cuenta_Id)
INNER JOIN conCentro1  ON (conCentro1.conCentro1 = tesIdentifica.Centro1_Id)
INNER JOIN conCentro2  ON (conCentro2.conCentro2 = tesIdentifica.Centro2_Id)
LEFT JOIN genMonedas  ON (genMonedas.genMonedas = tesIdentifica.Moneda_Id)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = tesIdentifica.UsuarioAmo)
LEFT JOIN conCuentas conCuentas2 ON (conCuentas2.conCuentas = tesIdentifica.CtaValEnTransito)
INNER JOIN genUsuarios genUsuarios2 ON (genUsuarios2.genUsuarios = tesIdentifica.Usuario_Id)
WHERE (tesIdentifica.Cartera_id = @pCartera_id)
 


Declare @pidentity bigint= dbo.FuncFKtesIdentifica(@pCartera_id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'tesIdentifica'
 
RETURN @@Error 

GO

DROP PROCEDURE tesIdVariosEliminar
GO
CREATE PROCEDURE tesIdVariosEliminar
(
@pCartera_id varchar(5)
)
AS
SET NOCOUNT ON 

DELETE FROM tesIdVarios 
WHERE (Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesImpuestosCobrados.sql*/
 -- impImpuestosCobradosDatos  5, '20210901','20210930'
DROP PROCEDURE impImpuestosCobradosDatos 
GO
CREATE PROCEDURE impImpuestosCobradosDatos 
(
 @Empresa Int, 
 @FechaDesde DateTime, 
 @FechaHasta DateTime
)
as
SELECT @FechaDesde as FechaDesde, @FechaHasta  FechaHasta

select 
	case when  tesConciliacion.FechaConciliacion > genCancMov.FechaAplicacion THEN 
		tesConciliacion.FechaConciliacion  ELSE genCancMov.FechaAplicacion END AS Fecha,
	genCancMov.Asiento_Id as venMovimientos, tesMovimientos.tesMovimientos, 
	venImpuestos.Impuesto_Id, tesIdentifica.Cartera_Id, 
	-Convert(numeric(18,2),venMovImpuestos.BaseImponible/ FACTURA.Importe * genCancMov.Importe*
	conMovCont.ImporteMonedaOriginal * case when tesIdentifica.moneda_Id = conAsientosCom.Moneda_id then 1 else 
			 1/conAsientosCom.Cambio end 
	 / venMovimientos.Importe  *venTipoMov.Signo * conAsientosCom.Cambio) as BaseImponible, 
	-Convert(numeric(18,2),venMovImpuestos.Importe/ FACTURA.Importe * genCancMov.Importe*
		conMovCont.ImporteMonedaOriginal * case when tesIdentifica.moneda_Id = conAsientosCom.Moneda_id then 1 else 
			 1/conAsientosCom.Cambio end 
		/ venMovimientos.Importe* conAsientosCom.Cambio  * venTipoMov.Signo) as Monto, 
	-Convert(numeric(18,2),conMovCont.Importe / venMovimientos.Importe * genCancMov.Importe*venTipoMov.Signo) as TotalCobro, 
	venClientes.Cliente_Id, conCuentas.Cuenta_Id, CtaReversion.Cuenta_Id as CtaReversion,
	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C, 
		genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N, 
		genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as tesSegmento ,
	dbo.Segmento(genAsiSegmentosCom.Segmento_Id, genAsiSegmentosCom.Segmento1C,genAsiSegmentosCom.Segmento2C, 
		genAsiSegmentosCom.Segmento3C, genAsiSegmentosCom.Segmento4C, genAsiSegmentosCom.Segmento1N,genAsiSegmentosCom.Segmento2N, 
		genAsiSegmentosCom.Segmento3N, genAsiSegmentosCom.Segmento4N) as venSegmento ,
		tesIdBancoPropio.Cartera_Id as Banco_Id, 
		conAsientosCom.Cambio as CambioFact, genMonedas.Moneda_Id as Moneda_Id, 
		conAsientos.Cambio as CambioCobra, conAsientos.Cambio*0 as DifCambio
		
 from 
	tesMovimientos inner join venMovimientos ON
	tesMovimientos.tesMovimientos = venMovimientos.venMovimientos
	INNER JOIN genCancMov ON
	genCancMov.Asiento_Id_AP = venMovimientos.venMovimientos
	INNER JOIN venMovImpuestos ON
	venMovImpuestos.venMovimientos = genCancMov.Asiento_Id
	INNER JOIN venImpuestos on 
	venImpuestos.venImpuestos = venMovImpuestos.Impuesto_Id
	INNER JOIN venSubTipoMov ON 
	venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id 
	INNER JOIN venTipoMov ON
	venTipoMov.venTipoMov = venMovimientos.venTipoMov
	INNER JOIN tesRengMovi ON
	tesRengMovi.tesMovimientos = tesMovimientos.tesMovimientos
	INNER JOIN tesIdentifica ON
	tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id
	INNER JOIN conMovCont ON
	conMovCont.conAsientos = tesRengMovi.tesMovimientos and 
	conMovCont.Renglon =tesRengMovi.conRenglon
	INNER JOIN conAsientos ON 
	conAsientos.conAsientos = conMovCont.conAsientos
	INNER JOIN tesRengConcilEsp ON
	tesRengConcilEsp.tesMovimientos = tesRengMovi.tesMovimientos and 
	tesRengConcilEsp.conRenglon = tesRengMovi.conRenglon
	INNER JOIN tesConciliacion ON
	tesConciliacion.tesIdentifica = tesRengMovi.Cartera_Id and 
	tesConciliacion.NumeroConc = tesRengConcilEsp.NumeroConc and
	tesConciliacion.Empresa_Id =conAsientos.Empresa_Id
	INNER JOIN conCuentas ON 
	conCuentas.conCuentas = venImpuestos.Cuenta_Id
	INNER JOIN conCuentas CtaReversion ON 
	CtaReversion.conCuentas = venImpuestos.CtaReversion
	INNER JOIN conAsientos as conAsientosCom ON
	conAsientosCom.conAsientos = genCancMov.Asiento_Id
	INNER JOIN genAsiSegmentos ON
	genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
	INNER JOIN genAsiSegmentos genAsiSegmentosCOM ON
	genAsiSegmentosCom.Asiento_Id = conAsientosCom.conAsientos
	INNER JOIN tesIdentifica tesIdBancoPropio ON 
	tesIdBancoPropio.tesIdentifica = tesConciliacion.tesIdentifica
	INNER JOIN venClientes  ON
		venClientes.genEntidades = venMovimientos.Cliente_Id
		INNER JOIN venMovimientos AS FACTURA ON 
	FACTURA.venMovimientos = genCancMov.Asiento_Id
	INNER JOIN genMonedas ON conAsientosCom.Moneda_Id = genMonedas.genMonedas
	inner join conAsientos  conAsientosF on conAsientosF.conAsientos = FACTURA.venMovimientos
		Where
		conMovCont.TipoMov = CASE WHEN venTipoMov.Signo = 1 then 2 else 1 end and 
		conAsientos.Anulado = 0 and 
		conAsientos.Posteado = 1 AND 
		conAsientosF.Anulado = 0 AND 
		conAsientosF.Posteado = 1 AND 
		conAsientos.Empresa_Id = @Empresa and 
		case when  tesConciliacion.FechaConciliacion > genCancMov.FechaAplicacion THEN 
		tesConciliacion.FechaConciliacion  ELSE genCancMov.FechaAplicacion END 
			between @FechaDesde And @FechaHasta and 
		venImpuestos.PorVencimiento = 1 and 
		conCuentas.Cuenta_Id <>  CtaReversion.Cuenta_Id

UNION ALL
-- CHEQUES
select 
	case when  tesConciliacion.FechaConciliacion > genCancMov.FechaAplicacion THEN 
		tesConciliacion.FechaConciliacion  ELSE genCancMov.FechaAplicacion END AS Fecha,
	genCancMov.Asiento_Id as venMovimientos, tesMovimientos.tesMovimientos, 
	venImpuestos.Impuesto_Id, tesIdentifica.Cartera_Id, 
	-Convert(numeric(18,2),venMovImpuestos.BaseImponible/ FACTURA.Importe * genCancMov.Importe* 
		conMovCont.ImporteMonedaOriginal  * case when tesIdentifica.moneda_Id = conAsientosCom.Moneda_id then 1 else 
			 1/conAsientosCom.Cambio end 
		/ venMovimientos.Importe * venTipoMov.Signo* conAsientosCom.Cambio) as BaseImponible, 
	-Convert(numeric(18,2),venMovImpuestos.Importe/ FACTURA.Importe * genCancMov.Importe*
	conMovCont.ImporteMonedaOriginal  * case when tesIdentifica.moneda_Id = conAsientosCom.Moneda_id then 1 else 
			 1/conAsientosCom.Cambio end 
	/ venMovimientos.Importe * venTipoMov.Signo* conAsientosCom.Cambio) as Monto, 
	-Convert(numeric(18,2),conMovCont.Importe / venMovimientos.Importe * genCancMov.Importe*venTipoMov.Signo) as TotalCobro, 
	venClientes.Cliente_Id, conCuentas.Cuenta_Id, CtaReversion.Cuenta_Id as CtaReversion,
	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C, 
		genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N, 
		genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as tesSegmento ,
	dbo.Segmento(genAsiSegmentosCom.Segmento_Id, genAsiSegmentosCom.Segmento1C,genAsiSegmentosCom.Segmento2C, 
		genAsiSegmentosCom.Segmento3C, genAsiSegmentosCom.Segmento4C, genAsiSegmentosCom.Segmento1N,genAsiSegmentosCom.Segmento2N, 
		genAsiSegmentosCom.Segmento3N, genAsiSegmentosCom.Segmento4N) as venSegmento ,
		tesIdBancoPropio.Cartera_Id as Banco_Id, 
		conAsientosCom.Cambio as CambioFact, genMonedas.Moneda_Id as Moneda_Id, 
		conAsientos.Cambio as CambioCobra, conAsientos.Cambio*0 as DifCambio
		
 from 
	tesMovimientos inner join venMovimientos ON
	tesMovimientos.tesMovimientos = venMovimientos.venMovimientos
	INNER JOIN genCancMov ON
	genCancMov.Asiento_Id_AP = venMovimientos.venMovimientos
	INNER JOIN venMovImpuestos ON
	venMovImpuestos.venMovimientos = genCancMov.Asiento_Id
	INNER JOIN venImpuestos on 
	venImpuestos.venImpuestos = venMovImpuestos.Impuesto_Id
	INNER JOIN venSubTipoMov ON 
	venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id 
	INNER JOIN venTipoMov ON
	venTipoMov.venTipoMov = venMovimientos.venTipoMov
	INNER JOIN tesRengMovi ON
	tesRengMovi.tesMovimientos = tesMovimientos.tesMovimientos
	INNER JOIN tesIdentifica ON
	tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id
	inner join tesCTlink ON
	tesCTlink.tesMovimientos = tesRengMovi.tesMovimientos AND 
	tesCTlink.conRenglon = tesRengMovi.conRenglon
	INNER JOIN tesCheqTerceros ON
	tesCheqTerceros.tesCheqTerceros = tesCTlink.tesCheqTerceros
	INNER JOIN conMovCont ON
	conMovCont.conAsientos = tesRengMovi.tesMovimientos and 
	conMovCont.Renglon =tesRengMovi.conRenglon
	INNER JOIN conAsientos ON 
	conAsientos.conAsientos = conMovCont.conAsientos
	INNER JOIN tesConciliacion ON
	tesConciliacion.tesIdentifica = tesCheqTerceros.BancoConc and 
	tesConciliacion.NumeroConc = tesCheqTerceros.NumeroConc and
	tesConciliacion.Empresa_Id =conAsientos.Empresa_Id
	INNER JOIN conCuentas ON 
	conCuentas.conCuentas = venImpuestos.Cuenta_Id
	INNER JOIN conCuentas CtaReversion ON 
	CtaReversion.conCuentas = venImpuestos.CtaReversion
	INNER JOIN conAsientos as conAsientosCom ON
	conAsientosCom.conAsientos = genCancMov.Asiento_Id
	INNER JOIN genAsiSegmentos ON
	genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
	INNER JOIN genAsiSegmentos genAsiSegmentosCOM ON
	genAsiSegmentosCom.Asiento_Id = conAsientosCom.conAsientos
	INNER JOIN tesIdentifica tesIdBancoPropio ON 
	tesCheqTerceros.BancoConc = tesIdBancoPropio.tesIdentifica
	INNER JOIN venClientes  ON
		venClientes.genEntidades = venMovimientos.Cliente_Id
		INNER JOIN venMovimientos AS FACTURA ON 
	FACTURA.venMovimientos = genCancMov.Asiento_Id
	INNER JOIN genMonedas ON conAsientosCom.Moneda_Id = genMonedas.genMonedas
	inner join conAsientos  conAsientosF on conAsientosF.conAsientos = FACTURA.venMovimientos
		Where
		conMovCont.TipoMov = CASE WHEN venTipoMov.Signo = 1 then 2 else 1 end and 
		conAsientos.Anulado = 0 and 
		conAsientos.Posteado = 1 AND 
		conAsientosF.Anulado = 0 AND 
		conAsientosF.Posteado = 1 AND 
		conAsientos.Empresa_Id = @Empresa and 
		case when  tesConciliacion.FechaConciliacion > genCancMov.FechaAplicacion THEN 
		tesConciliacion.FechaConciliacion  ELSE genCancMov.FechaAplicacion END 
			between @FechaDesde And @FechaHasta and 
		venImpuestos.PorVencimiento = 1 and 
		conCuentas.Cuenta_Id <>  CtaReversion.Cuenta_Id


UNION ALL
-- NO BANCO
select 
	genCancMov.FechaAplicacion AS Fecha,
	genCancMov.Asiento_Id as venMovimientos, tesMovimientos.tesMovimientos, 
	venImpuestos.Impuesto_Id, tesIdentifica.Cartera_Id, 
	-Convert(numeric(18,2),venMovImpuestos.BaseImponible/ FACTURA.Importe * 	genCancMov.Importe*
		conMovCont.ImporteMonedaOriginal  * case when tesIdentifica.moneda_Id = conAsientosCom.Moneda_id then 1 else 
			 1/conAsientosCom.Cambio end 
		/ venMovimientos.Importe  * venTipoMov.Signo* conAsientosCom.Cambio) as BaseImponible, 
	-Convert(numeric(18,2),venMovImpuestos.Importe/ venMovimientos.Importe * genCancMov.Importe*
	conMovCont.ImporteMonedaOriginal  * case when tesIdentifica.moneda_Id = conAsientosCom.Moneda_id then 1 else 
			 1/conAsientosCom.Cambio end 
	 / FACTURA.Importe  * venTipoMov.Signo* conAsientosCom.Cambio) as Monto, 
	-Convert(numeric(18,2),conMovCont.Importe / venMovimientos.Importe * genCancMov.Importe*venTipoMov.Signo) as TotalCobro, 
	venClientes.Cliente_Id, conCuentas.Cuenta_Id, CtaReversion.Cuenta_Id as CtaReversion, 
	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C, 
		genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N, 
		genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as tesSegmento ,
	dbo.Segmento(genAsiSegmentosCom.Segmento_Id, genAsiSegmentosCom.Segmento1C,genAsiSegmentosCom.Segmento2C, 
		genAsiSegmentosCom.Segmento3C, genAsiSegmentosCom.Segmento4C, genAsiSegmentosCom.Segmento1N,genAsiSegmentosCom.Segmento2N, 
		genAsiSegmentosCom.Segmento3N, genAsiSegmentosCom.Segmento4N) as venSegmento , 
		 ' ' as Banco_Id,
		 conAsientosCom.Cambio as CambioFact, genMonedas.Moneda_Id as Moneda_Id, 
		conAsientos.Cambio as CambioCobra, conAsientos.Cambio*0 as DifCambio

 from 
	tesMovimientos inner join venMovimientos ON
	tesMovimientos.tesMovimientos = venMovimientos.venMovimientos
	INNER JOIN genCancMov ON
	genCancMov.Asiento_Id_AP = venMovimientos.venMovimientos
	INNER JOIN venMovImpuestos ON
	venMovImpuestos.venMovimientos = genCancMov.Asiento_Id
	INNER JOIN venImpuestos on 
	venImpuestos.venImpuestos = venMovImpuestos.Impuesto_Id
	INNER JOIN venSubTipoMov ON 
	venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id 
	INNER JOIN venTipoMov ON
	venTipoMov.venTipoMov = venMovimientos.venTipoMov
	INNER JOIN tesRengMovi ON
	tesRengMovi.tesMovimientos = tesMovimientos.tesMovimientos
	INNER JOIN tesIdentifica ON
	tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id
	INNER JOIN conMovCont ON
	conMovCont.conAsientos = tesRengMovi.tesMovimientos and 
	conMovCont.Renglon =tesRengMovi.conRenglon
	INNER JOIN conAsientos ON 
	conAsientos.conAsientos = conMovCont.conAsientos
	INNER JOIN conCuentas ON 
	conCuentas.conCuentas = venImpuestos.Cuenta_Id
	INNER JOIN conCuentas CtaReversion ON 
	CtaReversion.conCuentas = venImpuestos.CtaReversion
	INNER JOIN conAsientos as conAsientosCom ON
	conAsientosCom.conAsientos = genCancMov.Asiento_Id
	INNER JOIN genAsiSegmentos ON
	genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
	INNER JOIN genAsiSegmentos genAsiSegmentosCOM ON
	genAsiSegmentosCom.Asiento_Id = conAsientosCom.conAsientos
	INNER JOIN venClientes  ON
		venClientes.genEntidades = venMovimientos.Cliente_Id
	INNER JOIN venMovimientos AS FACTURA ON 
	FACTURA.venMovimientos = genCancMov.Asiento_Id
	INNER JOIN genMonedas ON conAsientosCom.Moneda_Id = genMonedas.genMonedas
	inner join conAsientos  conAsientosF on conAsientosF.conAsientos = FACTURA.venMovimientos
	Where
		conMovCont.TipoMov = CASE WHEN venTipoMov.Signo = 1 then 2 else 1 end and 
		conAsientos.Anulado = 0 and 
		conAsientos.Posteado = 1 AND 
		conAsientosF.Anulado = 0 AND 
		conAsientosF.Posteado = 1 AND 
		conAsientos.Empresa_Id = @Empresa and 
		genCancMov.FechaAplicacion  between @FechaDesde And @FechaHasta and 
		venImpuestos.PorVencimiento = 1 AND 
		conCuentas.Cuenta_Id <>  CtaReversion.Cuenta_Id and 
		not exists(select 1 from tesRengConciliac WHERE
			tesRengConciliac.tesMovimientos = tesRengMovi.tesMovimientos and 
			tesRengConciliac.conRenglon = tesRengMovi.conRenglon) and
		not exists(select 1 from tesCTlink WHERE
			tesCTlink.tesMovimientos = tesRengMovi.tesMovimientos and 
			tesCTlink.conRenglon = tesRengMovi.conRenglon) 

UNION ALL
-- PAGO A CLIENTES
select 
	case when  tesConciliacion.FechaConciliacion > genCancMov.FechaAplicacion THEN 
		tesConciliacion.FechaConciliacion  ELSE genCancMov.FechaAplicacion END AS Fecha,
	genCancMov.Asiento_Id_AP as venMovimientos, tesMovimientos.tesMovimientos, 
	venImpuestos.Impuesto_Id, tesIdentifica.Cartera_Id, 
	-Convert(numeric(18,2),venMovImpuestos.BaseImponible/ FACTURA.Importe * genCancMov.Importe*
	conMovCont.ImporteMonedaOriginal  * case when tesIdentifica.moneda_Id = conAsientosCom.Moneda_id then 1 else 
			 1/conAsientosCom.Cambio end / venMovimientos.Importe  * conAsientosCom.Cambio) as BaseImponible, 
	-Convert(numeric(18,2),venMovImpuestos.Importe/ FACTURA.Importe * genCancMov.Importe*
		conMovCont.ImporteMonedaOriginal  * case when tesIdentifica.moneda_Id = conAsientosCom.Moneda_id then 1 else 
			 1/conAsientosCom.Cambio end / venMovimientos.Importe  * conAsientosCom.Cambio) as Monto, 
	-Convert(numeric(18,2),conMovCont.Importe / venMovimientos.Importe * genCancMov.Importe) as TotalCobro, 
	venClientes.Cliente_Id, conCuentas.Cuenta_Id, CtaReversion.Cuenta_Id as CtaReversion,
	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C, 
		genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N, 
		genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as tesSegmento ,
	dbo.Segmento(genAsiSegmentosCom.Segmento_Id, genAsiSegmentosCom.Segmento1C,genAsiSegmentosCom.Segmento2C, 
		genAsiSegmentosCom.Segmento3C, genAsiSegmentosCom.Segmento4C, genAsiSegmentosCom.Segmento1N,genAsiSegmentosCom.Segmento2N, 
		genAsiSegmentosCom.Segmento3N, genAsiSegmentosCom.Segmento4N) as venSegmento ,
		tesIdBancoPropio.Cartera_Id as Banco_Id,
		conAsientosCom.Cambio as CambioFact, genMonedas.Moneda_Id as Moneda_Id, 
		conAsientos.Cambio as CambioCobra, conAsientos.Cambio*0 as DifCambio
		
 from 
	tesMovimientos inner join venMovimientos ON
	tesMovimientos.tesMovimientos = venMovimientos.venMovimientos
	INNER JOIN genCancMov ON
	genCancMov.Asiento_Id = venMovimientos.venMovimientos
	INNER JOIN venMovImpuestos ON
	venMovImpuestos.venMovimientos = genCancMov.Asiento_Id_AP
	INNER JOIN venImpuestos on 
	venImpuestos.venImpuestos = venMovImpuestos.Impuesto_Id
	INNER JOIN venSubTipoMov ON 
	venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id 
	INNER JOIN venTipoMov ON
	venTipoMov.venTipoMov = venMovimientos.venTipoMov
	INNER JOIN tesRengMovi ON
	tesRengMovi.tesMovimientos = tesMovimientos.tesMovimientos
	INNER JOIN tesIdentifica ON
	tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id
	INNER JOIN conMovCont ON
	conMovCont.conAsientos = tesRengMovi.tesMovimientos and 
	conMovCont.Renglon =tesRengMovi.conRenglon
	INNER JOIN conAsientos ON 
	conAsientos.conAsientos = conMovCont.conAsientos
	INNER JOIN tesRengConcilEsp ON
	tesRengConcilEsp.tesMovimientos = tesRengMovi.tesMovimientos and 
	tesRengConcilEsp.conRenglon = tesRengMovi.conRenglon
	INNER JOIN tesConciliacion ON
	tesConciliacion.tesIdentifica = tesRengMovi.Cartera_Id and 
	tesConciliacion.NumeroConc = tesRengConcilEsp.NumeroConc and
	tesConciliacion.Empresa_Id =conAsientos.Empresa_Id
	INNER JOIN conCuentas ON 
	conCuentas.conCuentas = venImpuestos.Cuenta_Id
	INNER JOIN conCuentas CtaReversion ON 
	CtaReversion.conCuentas = venImpuestos.CtaReversion
	INNER JOIN conAsientos as conAsientosCom ON
	conAsientosCom.conAsientos = genCancMov.Asiento_Id_AP
	INNER JOIN genAsiSegmentos ON
	genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
	INNER JOIN genAsiSegmentos genAsiSegmentosCOM ON
	genAsiSegmentosCom.Asiento_Id = conAsientosCom.conAsientos
	INNER JOIN tesIdentifica tesIdBancoPropio ON 
	tesIdBancoPropio.tesIdentifica = tesConciliacion.tesIdentifica
	INNER JOIN venClientes  ON
		venClientes.genEntidades = venMovimientos.Cliente_Id
		INNER JOIN venMovimientos AS FACTURA ON 
	FACTURA.venMovimientos = genCancMov.Asiento_Id_AP
	INNER JOIN genMonedas ON conAsientosCom.Moneda_Id = genMonedas.genMonedas
	inner join conAsientos  conAsientosF on conAsientosF.conAsientos = FACTURA.venMovimientos
		Where
		conMovCont.TipoMov = 2 and 
		conAsientos.Anulado = 0 and 
		conAsientos.Posteado = 1 AND 
		conAsientosF.Anulado = 0 AND 
		conAsientosF.Posteado = 1 AND 
		conAsientos.Empresa_Id = @Empresa and 
		case when  tesConciliacion.FechaConciliacion > genCancMov.FechaAplicacion THEN 
		tesConciliacion.FechaConciliacion  ELSE genCancMov.FechaAplicacion END 
			between @FechaDesde And @FechaHasta and 
		venImpuestos.PorVencimiento = 1 and 
		conCuentas.Cuenta_Id <>  CtaReversion.Cuenta_Id
UNION ALL
-- CHEQUES
select 
	case when  tesConciliacion.FechaConciliacion > genCancMov.FechaAplicacion THEN 
		tesConciliacion.FechaConciliacion  ELSE genCancMov.FechaAplicacion END AS Fecha,
	genCancMov.Asiento_Id_AP as venMovimientos, tesMovimientos.tesMovimientos, 
	venImpuestos.Impuesto_Id, tesIdentifica.Cartera_Id, 
	-Convert(numeric(18,2),venMovImpuestos.BaseImponible/ FACTURA.Importe * genCancMov.Importe* 
		conMovCont.ImporteMonedaOriginal  * case when tesIdentifica.moneda_Id = conAsientosCom.Moneda_id then 1 else 
			 1/conAsientosCom.Cambio end / venMovimientos.Importe * conAsientosCom.Cambio) as BaseImponible, 
	-Convert(numeric(18,2),venMovImpuestos.Importe/ FACTURA.Importe * genCancMov.Importe*
	conMovCont.ImporteMonedaOriginal  * case when tesIdentifica.moneda_Id = conAsientosCom.Moneda_id then 1 else 
			 1/conAsientosCom.Cambio end  / venMovimientos.Importe * conAsientosCom.Cambio) as Monto, 
	-Convert(numeric(18,2),conMovCont.Importe / venMovimientos.Importe * genCancMov.Importe) as TotalCobro, 
	venClientes.Cliente_Id, conCuentas.Cuenta_Id, CtaReversion.Cuenta_Id as CtaReversion,
	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C, 
		genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N, 
		genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as tesSegmento ,
	dbo.Segmento(genAsiSegmentosCom.Segmento_Id, genAsiSegmentosCom.Segmento1C,genAsiSegmentosCom.Segmento2C, 
		genAsiSegmentosCom.Segmento3C, genAsiSegmentosCom.Segmento4C, genAsiSegmentosCom.Segmento1N,genAsiSegmentosCom.Segmento2N, 
		genAsiSegmentosCom.Segmento3N, genAsiSegmentosCom.Segmento4N) as venSegmento ,
		tesIdBancoPropio.Cartera_Id as Banco_Id,
		conAsientosCom.Cambio as CambioFact, genMonedas.Moneda_Id as Moneda_Id, 
		conAsientos.Cambio as CambioCobra, conAsientos.Cambio*0 as DifCambio
		
 from 
	tesMovimientos inner join venMovimientos ON
	tesMovimientos.tesMovimientos = venMovimientos.venMovimientos
	INNER JOIN genCancMov ON
	genCancMov.Asiento_Id = venMovimientos.venMovimientos
	INNER JOIN venMovImpuestos ON
	venMovImpuestos.venMovimientos = genCancMov.Asiento_Id_AP
	INNER JOIN venImpuestos on 
	venImpuestos.venImpuestos = venMovImpuestos.Impuesto_Id
	INNER JOIN venSubTipoMov ON 
	venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id 
	INNER JOIN venTipoMov ON
	venTipoMov.venTipoMov = venMovimientos.venTipoMov
	INNER JOIN tesRengMovi ON
	tesRengMovi.tesMovimientos = tesMovimientos.tesMovimientos
	INNER JOIN tesIdentifica ON
	tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id
	inner join tesCTlink ON
	tesCTlink.tesMovimientos = tesRengMovi.tesMovimientos AND 
	tesCTlink.conRenglon = tesRengMovi.conRenglon
	INNER JOIN tesCheqTerceros ON
	tesCheqTerceros.tesCheqTerceros = tesCTlink.tesCheqTerceros
	INNER JOIN conMovCont ON
	conMovCont.conAsientos = tesRengMovi.tesMovimientos and 
	conMovCont.Renglon =tesRengMovi.conRenglon
	INNER JOIN conAsientos ON 
	conAsientos.conAsientos = conMovCont.conAsientos
	INNER JOIN tesConciliacion ON
	tesConciliacion.tesIdentifica = tesCheqTerceros.BancoConc and 
	tesConciliacion.NumeroConc = tesCheqTerceros.NumeroConc and
	tesConciliacion.Empresa_Id =conAsientos.Empresa_Id
	INNER JOIN conCuentas ON 
	conCuentas.conCuentas = venImpuestos.Cuenta_Id
	INNER JOIN conCuentas CtaReversion ON 
	CtaReversion.conCuentas = venImpuestos.CtaReversion
	INNER JOIN conAsientos as conAsientosCom ON
	conAsientosCom.conAsientos = genCancMov.Asiento_Id_AP
	INNER JOIN genAsiSegmentos ON
	genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
	INNER JOIN genAsiSegmentos genAsiSegmentosCOM ON
	genAsiSegmentosCom.Asiento_Id = conAsientosCom.conAsientos
	INNER JOIN tesIdentifica tesIdBancoPropio ON 
	tesCheqTerceros.BancoConc = tesIdBancoPropio.tesIdentifica
	INNER JOIN venClientes  ON
		venClientes.genEntidades = venMovimientos.Cliente_Id
		INNER JOIN venMovimientos AS FACTURA ON 
	FACTURA.venMovimientos = genCancMov.Asiento_Id_AP
	INNER JOIN genMonedas ON conAsientosCom.Moneda_Id = genMonedas.genMonedas
	inner join conAsientos  conAsientosF on conAsientosF.conAsientos = FACTURA.venMovimientos
		Where
		conMovCont.TipoMov = 2 and 
		conAsientos.Anulado = 0 and 
		conAsientos.Posteado = 1 AND 
		conAsientosF.Anulado = 0 AND 
		conAsientosF.Posteado = 1 AND 
		conAsientos.Empresa_Id = @Empresa and 
		case when  tesConciliacion.FechaConciliacion > genCancMov.FechaAplicacion THEN 
		tesConciliacion.FechaConciliacion  ELSE genCancMov.FechaAplicacion END 
			between @FechaDesde And @FechaHasta and 
		venImpuestos.PorVencimiento = 1 and 
		conCuentas.Cuenta_Id <>  CtaReversion.Cuenta_Id


UNION ALL
-- NO BANCO
select 
	genCancMov.FechaAplicacion AS Fecha,
	genCancMov.Asiento_Id_AP as venMovimientos, tesMovimientos.tesMovimientos, 
	venImpuestos.Impuesto_Id, tesIdentifica.Cartera_Id, 
	-Convert(numeric(18,2),venMovImpuestos.BaseImponible/ FACTURA.Importe * 	genCancMov.Importe*
		conMovCont.ImporteMonedaOriginal  * case when tesIdentifica.moneda_Id = conAsientosCom.Moneda_id then 1 else 
			 1/conAsientosCom.Cambio end  / venMovimientos.Importe  * conAsientosCom.Cambio) as BaseImponible, 
	-Convert(numeric(18,2),venMovImpuestos.Importe/ venMovimientos.Importe * genCancMov.Importe*
	conMovCont.ImporteMonedaOriginal  * case when tesIdentifica.moneda_Id = conAsientosCom.Moneda_id then 1 else 
			 1/conAsientosCom.Cambio end  / FACTURA.Importe  * conAsientosCom.Cambio) as Monto, 
	-Convert(numeric(18,2),conMovCont.Importe / venMovimientos.Importe * genCancMov.Importe) as TotalCobro, 
	venClientes.Cliente_Id, conCuentas.Cuenta_Id, CtaReversion.Cuenta_Id as CtaReversion, 
	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C, 
		genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N, 
		genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as tesSegmento ,
	dbo.Segmento(genAsiSegmentosCom.Segmento_Id, genAsiSegmentosCom.Segmento1C,genAsiSegmentosCom.Segmento2C, 
		genAsiSegmentosCom.Segmento3C, genAsiSegmentosCom.Segmento4C, genAsiSegmentosCom.Segmento1N,genAsiSegmentosCom.Segmento2N, 
		genAsiSegmentosCom.Segmento3N, genAsiSegmentosCom.Segmento4N) as venSegmento , 
		 ' ' as Banco_Id, 
		 conAsientosCom.Cambio as CambioFact, genMonedas.Moneda_Id as Moneda_Id, 
		conAsientos.Cambio as CambioCobra, conAsientos.Cambio*0 as DifCambio

 from 
	tesMovimientos inner join venMovimientos ON
	tesMovimientos.tesMovimientos = venMovimientos.venMovimientos
	INNER JOIN genCancMov ON
	genCancMov.Asiento_Id = venMovimientos.venMovimientos
	INNER JOIN venMovImpuestos ON
	venMovImpuestos.venMovimientos = genCancMov.Asiento_Id_AP
	INNER JOIN venImpuestos on 
	venImpuestos.venImpuestos = venMovImpuestos.Impuesto_Id
	INNER JOIN venSubTipoMov ON 
	venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id 
	INNER JOIN venTipoMov ON
	venTipoMov.venTipoMov = venMovimientos.venTipoMov
	INNER JOIN tesRengMovi ON
	tesRengMovi.tesMovimientos = tesMovimientos.tesMovimientos
	INNER JOIN tesIdentifica ON
	tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id
	INNER JOIN conMovCont ON
	conMovCont.conAsientos = tesRengMovi.tesMovimientos and 
	conMovCont.Renglon =tesRengMovi.conRenglon
	INNER JOIN conAsientos ON 
	conAsientos.conAsientos = conMovCont.conAsientos
	INNER JOIN conCuentas ON 
	conCuentas.conCuentas = venImpuestos.Cuenta_Id
	INNER JOIN conCuentas CtaReversion ON 
	CtaReversion.conCuentas = venImpuestos.CtaReversion
	INNER JOIN conAsientos as conAsientosCom ON
	conAsientosCom.conAsientos = genCancMov.Asiento_Id_AP
	INNER JOIN genAsiSegmentos ON
	genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
	INNER JOIN genAsiSegmentos genAsiSegmentosCOM ON
	genAsiSegmentosCom.Asiento_Id = conAsientosCom.conAsientos
	INNER JOIN venClientes  ON
		venClientes.genEntidades = venMovimientos.Cliente_Id
	INNER JOIN venMovimientos AS FACTURA ON 
	FACTURA.venMovimientos = genCancMov.Asiento_Id_AP
	INNER JOIN genMonedas ON conAsientosCom.Moneda_Id = genMonedas.genMonedas
	inner join conAsientos  conAsientosF on conAsientosF.conAsientos = FACTURA.venMovimientos
	Where
		conMovCont.TipoMov = 2 and  
		conAsientos.Anulado = 0 and 
		conAsientos.Posteado = 1 AND 
		conAsientosF.Anulado = 0 AND 
		conAsientosF.Posteado = 1 AND 
		conAsientos.Empresa_Id = @Empresa and 
		genCancMov.FechaAplicacion  between @FechaDesde And @FechaHasta and 
		venImpuestos.PorVencimiento = 1 AND 
		conCuentas.Cuenta_Id <>  CtaReversion.Cuenta_Id and 
		not exists(select 1 from tesRengConciliac WHERE
			tesRengConciliac.tesMovimientos = tesRengMovi.tesMovimientos and 
			tesRengConciliac.conRenglon = tesRengMovi.conRenglon) and
		not exists(select 1 from tesCTlink WHERE
			tesCTlink.tesMovimientos = tesRengMovi.tesMovimientos and 
			tesCTlink.conRenglon = tesRengMovi.conRenglon) 

-- DEPOSITOS POR IDENTIFICAR COBRADOS BANCO
UNION ALL
SELECT tesConciliacion.FechaConciliacion AS Fecha,
	NULL as venMovimientos, tesMovimientos.tesMovimientos, 
	venImpuestos.Impuesto_Id, tesIdentifica.Cartera_Id, 
	tesDepoPorIdentImp.BaseImponible as BaseImponible, 
	tesDepoPorIdentImp.Importe * conAsientos.Cambio as Monto, 
	conMovCont.Importe as TotalCobro, 
	'' Cliente_Id, conCuentas.Cuenta_Id, CtaReversion.Cuenta_Id as CtaReversion,
	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C, 
		genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N, 
		genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as tesSegmento ,
		'' as venSegmento ,
		tesIdBancoPropio.Cartera_Id as Banco_Id, 
		tesRengMovi.Cambio as CambioFact, genMonedas.Moneda_Id as Moneda_Id, 
		tesRengMovi.Cambio as CambioCobra, conAsientos.Cambio*0 as DifCambio
FROM tesDepoPorIdent 
	INNER JOIN  tesDepoPorIdentImp ON tesDepoPorIdent.tesMovimientos = tesDepoPorIdentImp.tesMovimientos
	inner join conAsientos ON  conAsientos.conAsientos = tesDepoPorIdent.tesMovimientos
	INNER JOIN venImpuestos  ON venImpuestos.venImpuestos =tesDepoPorIdentImp.Impuesto_Id
	INNER JOIN tesRengMovi ON tesRengMovi.tesMovimientos = tesDepoPorIdentImp.tesMovimientos AND 
			tesRengMovi.TipomovCont = 1
	INNER JOIN tesIdentifica ON  tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id
	INNER JOIN conMovCont ON  conMovCont.conAsientos =tesRengMovi.tesMovimientos and 
		conMovCont.Renglon = tesRengMovi.conRenglon
	INNER JOIN tesRengConcilEsp ON 	tesRengConcilEsp.tesMovimientos =tesRengMovi.tesMovimientos and 
		tesRengConcilEsp.conRenglon = tesRengMovi.conRenglon
	INNER JOIN tesConciliacion ON  tesConciliacion.NumeroConc = tesRengConcilEsp.NumeroConc AND 
			tesConciliacion.tesIdentifica = tesRengConcilEsp.tesIdentifica
	INNER JOIN tesMovimientos ON  tesMovimientos.tesMovimientos =tesRengMovi.tesMovimientos
	INNER JOIN tesIdentifica tesIdBancoPropio on  tesIdBancoPropio.tesIdentifica =tesRengConcilEsp.tesIdentifica
	inner join conCuentas ON  conCuentas.conCuentas = venImpuestos.Cuenta_Id
	inner join conCuentas CtaReversion ON  CtaReversion.conCuentas = venImpuestos.CtaReversion
	INNER JOIN genAsiSegmentos ON  genAsiSegmentos.Asiento_Id = tesMovimientos.tesMovimientos
	INNER JOIN genMonedas ON genMonedas.genMonedas = tesIdentifica.Moneda_Id
WHERE
		conAsientos.Posteado = 1 AND 
		conAsientos.Anulado = 0 AND 
		conAsientos.Empresa_Id = @Empresa and 
		tesConciliacion.FechaConciliacion between @FechaDesde And @FechaHasta and 
		venImpuestos.PorVencimiento = 1 AND 
		conCuentas.Cuenta_Id <>  CtaReversion.Cuenta_Id

-- la reversion del anterior cuando ya lo identifica
UNION ALL
SELECT genCancMov.FechaAplicacion AS Fecha,
	conAsientosR.conAsientos as venMovimientos, conAsientos.conAsientos tesMovimientos, 
	venImpuestos.Impuesto_Id, tesIdentifica.Cartera_Id, 
	CONVERT(Numeric(18,2),-tesDepoPorIdentImp.BaseImponible * conAsientos.Cambio / venMovimientos.Importe * genCancMov.Importe) 	as BaseImponible, 
	CONVERT(Numeric(18,2),-tesDepoPorIdentImp.Importe * conAsientos.Cambio / venMovimientos.Importe * genCancMov.Importe) as Monto, 
	CONVERT(Numeric(18,2),-conMovCont.Importe/ venMovimientos.Importe * genCancMov.Importe) as TotalCobro, 
	venClientes.Cliente_Id, conCuentas.Cuenta_Id, CtaReversion.Cuenta_Id as CtaReversion,
	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C, 
		genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N, 
		genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as tesSegmento ,
	dbo.Segmento(genAsiSegmentosCom.Segmento_Id, genAsiSegmentosCom.Segmento1C,genAsiSegmentosCom.Segmento2C, 
		genAsiSegmentosCom.Segmento3C, genAsiSegmentosCom.Segmento4C, genAsiSegmentosCom.Segmento1N,genAsiSegmentosCom.Segmento2N, 
		genAsiSegmentosCom.Segmento3N, genAsiSegmentosCom.Segmento4N)   as venSegmento ,
		tesIdBancoPropio.Cartera_Id as Banco_Id, 
		conAsientos.Cambio as CambioFact, genMonedas.Moneda_Id as Moneda_Id, 
		conAsientos.Cambio as CambioCobra, conAsientos.Cambio*0 as DifCambio
FROM tesDepoPorIdent 
	INNER JOIN  tesDepoPorIdentImp ON tesDepoPorIdent.tesMovimientos = tesDepoPorIdentImp.tesMovimientos
	inner join conAsientos  conAsientosR on conAsientosR.conAsientos =tesDepoPorIdent.venMovimientos
	INNER JOIN genCancMov ON  genCancMov.Asiento_Id_ap = conAsientosR.conAsientos
	inner join conAsientos AS Factura on  Factura.conAsientos = genCancMov.Asiento_Id
	inner join genAsiSegmentos genAsiSegmentosCom ON genAsiSegmentosCom.Asiento_Id =Factura.conAsientos
	INNER JOIN venMovimientos ON  venMovimientos.venMovimientos=conAsientosR.conAsientos
	INNER JOIN venClientes ON  venClientes.genEntidades =venMovimientos.Cliente_Id
	inner join conAsientos ON  conAsientos.conAsientos = tesDepoPorIdent.tesMovimientos
	INNER JOIN venImpuestos  ON venImpuestos.venImpuestos =tesDepoPorIdentImp.Impuesto_Id
	INNER JOIN tesRengMovi ON tesRengMovi.tesMovimientos = tesDepoPorIdentImp.tesMovimientos AND 
			tesRengMovi.TipomovCont = 1
	INNER JOIN tesIdentifica ON  tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id
	INNER JOIN conMovCont ON  conMovCont.conAsientos =tesRengMovi.tesMovimientos and 
		conMovCont.Renglon = tesRengMovi.conRenglon
	INNER JOIN tesRengConcilEsp ON 	tesRengConcilEsp.tesMovimientos =tesRengMovi.tesMovimientos and 
		tesRengConcilEsp.conRenglon = tesRengMovi.conRenglon
	INNER JOIN tesConciliacion ON  tesConciliacion.NumeroConc = tesRengConcilEsp.NumeroConc AND 
			tesConciliacion.tesIdentifica = tesRengConcilEsp.tesIdentifica
	INNER JOIN tesMovimientos ON  tesMovimientos.tesMovimientos =tesRengMovi.tesMovimientos
	INNER JOIN tesIdentifica tesIdBancoPropio on  tesIdBancoPropio.tesIdentifica =tesRengConcilEsp.tesIdentifica
	inner join conCuentas ON  conCuentas.conCuentas = venImpuestos.Cuenta_Id
	inner join conCuentas CtaReversion ON  CtaReversion.conCuentas = venImpuestos.CtaReversion
	INNER JOIN genAsiSegmentos ON  genAsiSegmentos.Asiento_Id = tesMovimientos.tesMovimientos
	INNER JOIN genMonedas ON genMonedas.genMonedas = tesIdentifica.Moneda_Id

WHERE
		conAsientos.Posteado = 1 AND 
		conAsientos.Anulado = 0 AND 
		conAsientosR.Posteado = 1 AND 
		conAsientosR.Anulado = 0 AND 
		Factura.Posteado = 1 AND 
		Factura.Anulado = 0 AND 
		conAsientos.Empresa_Id = @Empresa and 
		tesConciliacion.FechaConciliacion between @FechaDesde And @FechaHasta and 
		venImpuestos.PorVencimiento = 1 AND 
		conCuentas.Cuenta_Id <>  CtaReversion.Cuenta_Id

ORDER BY 1
GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesImpuestosPagados.sql*/

-- impImpuestosPagadosDatos 3,'20200801','20200831'

DROP PROCEDURE impImpuestosPagadosDatos 
GO
CREATE PROCEDURE impImpuestosPagadosDatos 
(
 @Empresa Int, 
 @FechaDesde DateTime, 
 @FechaHasta DateTime
)
as
SELECT @FechaDesde as FechaDesde, @FechaHasta  FechaHasta

select 
	case when  tesConciliacion.FechaConciliacion > genCancMov.FechaAplicacion THEN 
		tesConciliacion.FechaConciliacion  ELSE genCancMov.FechaAplicacion END AS Fecha,
	genCancMov.Asiento_Id_ap as comMovprov, tesMovimientos.tesMovimientos, 
	comImpuestos.Impuesto_Id, tesIdentifica.Cartera_Id, 
	Convert(numeric(18,2),comMovImpuestos.Base_Imponible / comMovProvFact.Importe * genCancMov.Importe*
	  conMovCont.ImporteMonedaOriginal / case when tesIdentifica.Moneda_Id = conAsientos.Moneda_Id Then 1 else	
		conAsientos.Cambio end 	* case when conmovcont.Tipomov = tesRengmovi.TipomovCont then 1 else -1 end  / comMovProv.Importe *	comMovTipos.Signo*conAsientosCom.Cambio ) as BaseImponible, 
	Convert(numeric(18,2),comMovImpuestos.Importe_Impuesto/ comMovProvFact.Importe * genCancMov.Importe*
	conMovCont.ImporteMonedaOriginal / case when tesIdentifica.Moneda_Id = conAsientos.Moneda_Id Then 1 else	
		conAsientos.Cambio end 	* case when conmovcont.Tipomov = tesRengmovi.TipomovCont then 1 else -1 end  / comMovProv.Importe *	comMovTipos.Signo*conAsientosCom.Cambio) as Monto, 
	Convert(numeric(18,2),conMovCont.Importe / comMovProv.Importe * genCancMov.Importe*	comMovTipos.Signo) as TotalPago, 
	'P' Origen, conCuentas.Cuenta_Id, CtaReversion.Cuenta_Id as CtaReversion,
	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C, 
		genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N, 
		genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as tesSegmento ,
	dbo.Segmento(genAsiSegmentosCom.Segmento_Id, genAsiSegmentosCom.Segmento1C,genAsiSegmentosCom.Segmento2C, 
		genAsiSegmentosCom.Segmento3C, genAsiSegmentosCom.Segmento4C, genAsiSegmentosCom.Segmento1N,genAsiSegmentosCom.Segmento2N, 
		genAsiSegmentosCom.Segmento3N, genAsiSegmentosCom.Segmento4N) as comSegmento , 
		 conAsientosCom.Cambio as CambioFact, genMonedas.Moneda_Id as Moneda_Id, 
		 case when conAsientosCom.Moneda_Id = genEmpresas.Moneda_Id then 
			tesRengMovi.Cambio else conAsientos.Cambio end  as CambioPago, conAsientos.Cambio*0 as DifCambio
		
 from 
	tesMovimientos inner join comMovprov ON
	tesMovimientos.tesMovimientos = comMovprov.comMovProv
	INNER JOIN genCancMov ON
	genCancMov.Asiento_Id = comMovprov.comMovProv
	INNER JOIN comMovProv as ComMovprovFact ON
	ComMovprovFact.comMovProv = genCancMov.Asiento_Id_ap
	INNER JOIN comMovImpuestos ON
	comMovImpuestos.comMovProv = genCancMov.Asiento_Id_ap
	INNER JOIN comImpuestos on 
	comImpuestos.comImpuestos = comMovImpuestos.Impuesto_Id
	INNER JOIN tesRengMovi ON
	tesRengMovi.tesMovimientos = tesMovimientos.tesMovimientos
	INNER JOIN tesIdentifica ON
	tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id
	INNER JOIN conMovCont ON
	conMovCont.conAsientos = tesRengMovi.tesMovimientos and 
	conMovCont.Renglon =tesRengMovi.conRenglon
	INNER JOIN comMovTipos ON
	comMovTipos.TipoMov = comMovProv.TipoMov
	INNER JOIN conAsientos ON 
	conAsientos.conAsientos = conMovCont.conAsientos
	INNER JOIN tesRengConcilEsp ON
	tesRengConcilEsp.tesMovimientos = tesRengMovi.tesMovimientos and 
	tesRengConcilEsp.conRenglon = tesRengMovi.conRenglon
	INNER JOIN tesConciliacion ON
	tesConciliacion.tesIdentifica = tesRengMovi.Cartera_Id and 
	tesConciliacion.NumeroConc = tesRengConcilEsp.NumeroConc and
	tesConciliacion.Empresa_Id =conAsientos.Empresa_Id
	INNER JOIN conCuentas ON 
	conCuentas.conCuentas = comImpuestos.CtaDebe
	INNER JOIN conCuentas CtaReversion ON 
	CtaReversion.conCuentas = comImpuestos.CtaReversion
	INNER JOIN conAsientos as conAsientosCom ON
	conAsientosCom.conAsientos = genCancMov.Asiento_Id_ap
	INNER JOIN genAsiSegmentos ON
	genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
	INNER JOIN genAsiSegmentos genAsiSegmentosCOM ON
	genAsiSegmentosCom.Asiento_Id = conAsientosCom.conAsientos
	INNER JOIN genMonedas ON conAsientosCom.Moneda_Id = genMonedas.genMonedas
	INNER JOIN  genEmpresas on genEmpresas.genEmpresas= @Empresa
		Where
		tesRengMovi.TipomovCont = CASE WHEN comMovTipos.Signo = 1 then 2 else 1 end and 
		conAsientos.Anulado = 0 and 
		conAsientos.Posteado = 1 and
		conAsientosCom.Anulado = 0 and
		conAsientosCom.Posteado = 1 and
		conAsientos.Empresa_Id = @Empresa and 
		case when  tesConciliacion.FechaConciliacion > genCancMov.FechaAplicacion THEN 
		tesConciliacion.FechaConciliacion  ELSE genCancMov.FechaAplicacion END 
			between @FechaDesde And @FechaHasta and 
		comImpuestos.PorAcreditacion = 1 
		--and conCuentas.Cuenta_Id <>  CtaReversion.Cuenta_Id
UNION ALL
-- NO BANCO
select 
	genCancMov.FechaAplicacion AS Fecha,
	genCancMov.Asiento_Id_ap as comMovprov, tesMovimientos.tesMovimientos, 
	comImpuestos.Impuesto_Id, tesIdentifica.Cartera_Id, 
	Convert(numeric(18,2),comMovImpuestos.Base_Imponible / comMovProvFact.Importe * genCancMov.Importe*
	  conMovCont.ImporteMonedaOriginal / case when tesIdentifica.Moneda_Id = conAsientos.Moneda_Id Then 1 else	
		conAsientos.Cambio end 	* case when conmovcont.Tipomov = tesRengmovi.TipomovCont then 1 else -1 end  / comMovProv.Importe *	comMovTipos.Signo*conAsientoscom.Cambio ) as BaseImponible, 
	Convert(numeric(18,2),comMovImpuestos.Importe_Impuesto/ comMovProvFact.Importe * genCancMov.Importe*
	  conMovCont.ImporteMonedaOriginal / case when tesIdentifica.Moneda_Id = conAsientos.Moneda_Id Then 1 else	
		conAsientos.Cambio end 	* case when conmovcont.Tipomov = tesRengmovi.TipomovCont then 1 else -1 end  / comMovProv.Importe *	comMovTipos.Signo*conAsientoscom.Cambio ) as Monto, 
	Convert(numeric(18,2),conMovCont.Importe / comMovProv.Importe * genCancMov.Importe*	comMovTipos.Signo) as TotalPago, 
	'P' Origen, conCuentas.Cuenta_Id, CtaReversion.Cuenta_Id as CtaReversion, 
	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C, 
		genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N, 
		genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as tesSegmento ,
	dbo.Segmento(genAsiSegmentosCom.Segmento_Id, genAsiSegmentosCom.Segmento1C,genAsiSegmentosCom.Segmento2C, 
		genAsiSegmentosCom.Segmento3C, genAsiSegmentosCom.Segmento4C, genAsiSegmentosCom.Segmento1N,genAsiSegmentosCom.Segmento2N, 
		genAsiSegmentosCom.Segmento3N, genAsiSegmentosCom.Segmento4N) as comSegmento , 
		 conAsientosCom.Cambio as CambioFact, genMonedas.Moneda_Id as Moneda_Id, 
		 case when conAsientosCom.Moneda_Id = genEmpresas.Moneda_Id then 
			tesRengMovi.Cambio else conAsientos.Cambio end  as CambioPago, conAsientos.Cambio*0 as DifCambio

 from 
	tesMovimientos inner join comMovprov ON
	tesMovimientos.tesMovimientos = comMovprov.comMovProv
	INNER JOIN genCancMov ON
	genCancMov.Asiento_Id = comMovprov.comMovProv
	INNER JOIN comMovProv as ComMovprovFact ON
	ComMovprovFact.comMovProv = genCancMov.Asiento_Id_AP
	INNER JOIN comMovImpuestos ON
	comMovImpuestos.comMovProv = genCancMov.Asiento_Id_AP
	INNER JOIN comImpuestos on 
	comImpuestos.comImpuestos = comMovImpuestos.Impuesto_Id
	INNER JOIN tesRengMovi ON
	tesRengMovi.tesMovimientos = tesMovimientos.tesMovimientos
	INNER JOIN tesIdentifica ON
	tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id
	INNER JOIN conMovCont ON
	conMovCont.conAsientos = tesRengMovi.tesMovimientos and 
	conMovCont.Renglon =tesRengMovi.conRenglon
	INNER JOIN comMovTipos ON
	comMovTipos.TipoMov = comMovProv.TipoMov
	INNER JOIN conAsientos ON 
	conAsientos.conAsientos = conMovCont.conAsientos
	INNER JOIN conCuentas ON 
	conCuentas.conCuentas = comImpuestos.CtaDebe
	INNER JOIN conCuentas CtaReversion ON 
	CtaReversion.conCuentas = comImpuestos.CtaReversion
	INNER JOIN conAsientos as conAsientosCom ON
	conAsientosCom.conAsientos = genCancMov.Asiento_Id_AP
	INNER JOIN genAsiSegmentos ON
	genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
	INNER JOIN genAsiSegmentos genAsiSegmentosCOM ON
	genAsiSegmentosCom.Asiento_Id = conAsientosCom.conAsientos
	INNER JOIN genMonedas ON conAsientosCom.Moneda_Id = genMonedas.genMonedas
	INNER JOIN  genEmpresas on genEmpresas.genEmpresas= @Empresa
	Where
		tesRengMovi.TipomovCont = CASE WHEN comMovTipos.Signo = 1 then 2 else 1 end and 
		conAsientos.Anulado = 0 and 
		conAsientos.Posteado = 1 and
		conAsientosCom.Anulado = 0 and
		conAsientosCom.Posteado = 1 and
		conAsientos.Empresa_Id = @Empresa and 
		genCancMov.FechaAplicacion  between @FechaDesde And @FechaHasta and 
		comImpuestos.PorAcreditacion = 1 AND 
		-- conCuentas.Cuenta_Id <>  CtaReversion.Cuenta_Id and 
		not exists(select 1 from tesRengConciliac WHERE
			tesRengConciliac.tesMovimientos = tesRengMovi.tesMovimientos and 
			tesRengConciliac.conRenglon = tesRengMovi.conRenglon)

ORDER BY 1

GO
		
-- impImpuestosPagadosAsiDatos  1, '20180501','20180531'		
DROP PROCEDURE impImpuestosPagadosAsiDatos 
GO
CREATE PROCEDURE impImpuestosPagadosAsiDatos 
(
 @Empresa Int, 
 @FechaDesde DateTime, 
 @FechaHasta DateTime
)
as

SELECT @FechaDesde as FechaDesde, @FechaHasta  FechaHasta

SELECT Distinct genAsiSegmentos.Asiento_Id , 
	genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
	genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N, genAsiSegmentos.Segmento1C,
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C
from comMovImpAcredita INNER JOIN genAsiSegmentos ON
comMovImpAcredita.Asiento_Id = genAsiSegmentos.Asiento_Id
INNER JOIN genSegmentos ON
genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
INNER JOIN conAsientos ON
conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
Where
	conAsientos.Fecha BETWEEN @FechaDesde And @FechaHasta and 
	conAsientos.Anulado = 0 and 
	conAsientos.Empresa_Id = @Empresa
ORDER BY 1

GO





Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesIngDepPorIdentDatos.sql*/
-- tesIngDepPorIdentDatos 1, 'TES',0,0,0,0,'E','0001',' ',' '

DROP PROCEDURE tesIngDepPorIdentDatos
GO
-- tesCobranzasDatos 1
CREATE PROCEDURE tesIngDepPorIdentDatos
(
	@Empresa_Id int, 
	@Segmento_Id VarChar(10),
	@Segmento1N Int,
	@Segmento2N Int,
	@Segmento3N Int,
	@Segmento4N Int,
	@Segmento1C VarChar(20),
	@Segmento2C VarChar(20),
	@Segmento3C VarChar(20),
	@Segmento4C VarChar(20)
)
AS
SET NOCOUNT ON 

Declare @ptesMovimientos as BigInt
SET @ptesMovimientos = (Select tesMovimientos.tesMovimientos from 
	tesMovimientos INNER JOIN genAsiSegmentos ON
	tesMovimientos.tesMovimientos = genAsiSegmentos.Asiento_Id
	INNER JOIN genSegmentos ON
	genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	WHERE
	genSegmentos.Segmento_Id = @Segmento_Id and 
	genAsiSegmentos.Empresa_Id = @Empresa_id and 
	genAsiSegmentos.Segmento1N = @Segmento1N and 
	genAsiSegmentos.Segmento2N = @Segmento2N and 
	genAsiSegmentos.Segmento3N = @Segmento3N and 
	genAsiSegmentos.Segmento4N = @Segmento4N and 
	genAsiSegmentos.Segmento1C = @Segmento1C and 
	genAsiSegmentos.Segmento2C = @Segmento2C and 
	genAsiSegmentos.Segmento3C = @Segmento3C and 
	genAsiSegmentos.Segmento4C = @Segmento4C )


EXECUTE tesMovimientosDatos @ptesMovimientos

Exec tesRengMoviDHDatos @ptesMovimientos, 1, NULL
Exec tesRengMoviDHDatos @ptesMovimientos, 2, NULL

Exec tesRengConciliacDatos @ptesMovimientos, NULL,1
Exec tesRengConciliacDatos @ptesMovimientos, NULL,2

-- TIPOS DE CAMBIO
Exec tesMovimientosCambio @ptesMovimientos

Exec genAtributosGeneralesIdentityDatos @ptesMovimientos, 'tesMovimientos'

Exec tesDepoPorIdentImpDatos @ptesMovimientos

GO





Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesMoviGravado.sql*/
DROP PROCEDURE tesMoviGravadoGuardar
GO
CREATE PROCEDURE tesMoviGravadoGuardar
(
@ptesMovimientos bigint,
@pTipoCtaProv int,
@pImporte qMonedaD2
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesMoviGravado WHERE (tesMovimientos = @ptesMovimientos) AND (TipoCtaProv = @pTipoCtaProv)))
BEGIN 
	UPDATE tesMoviGravado
	SET Importe = @pImporte
	WHERE (tesMovimientos = @ptesMovimientos) AND (TipoCtaProv = @pTipoCtaProv)
END 
ELSE 
BEGIN 
	INSERT INTO tesMoviGravado
	(
		tesMovimientos,
		TipoCtaProv,
		Importe
	)
	VALUES 
	(
		@ptesMovimientos,
		@pTipoCtaProv,
		@pImporte
	)
END 

GO

DROP PROCEDURE tesMoviGravadoDatos
GO
CREATE PROCEDURE tesMoviGravadoDatos
(
@ptesMovimientos bigint,
@pTipoCtaProv int = Null
)
AS
SET NOCOUNT ON 

SELECT tesMoviGravado.tesMovimientos, tesMoviGravado.TipoCtaProv, comProveedoresTipoPasivo.Descripcion as DescripcionProveedoresTipoPasivo,
	tesMoviGravado.Importe
FROM tesMoviGravado 
INNER JOIN tesMovimientos  ON (tesMovimientos.tesMovimientos = tesMoviGravado.tesMovimientos)
INNER JOIN comProveedoresTipoPasivo  ON (comProveedoresTipoPasivo.TipoCtaProv = tesMoviGravado.TipoCtaProv)
WHERE tesMoviGravado.tesMovimientos = @ptesMovimientos
AND tesMoviGravado.TipoCtaProv = IsNull(@pTipoCtaProv, tesMoviGravado.TipoCtaProv)

RETURN @@Error 

GO

DROP PROCEDURE tesMoviGravadoEliminar
GO
CREATE PROCEDURE tesMoviGravadoEliminar
(
@ptesMovimientos bigint,
@pTipoCtaProv int = Null
)
AS
SET NOCOUNT ON 

DELETE FROM tesMoviGravado 
WHERE tesMovimientos = @ptesMovimientos
AND TipoCtaProv = IsNull(@pTipoCtaProv, TipoCtaProv)
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesMovimientos.sql*/

DROP PROCEDURE tesMovimientosGuardar
GO
CREATE PROCEDURE tesMovimientosGuardar
(
@ptesMovimientos bigint,
@pSubTipo_Id varchar(3),
@pFecha_Real qFecha
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesMovimientos WHERE (tesMovimientos = @ptesMovimientos)))
BEGIN 
	UPDATE tesMovimientos
	SET SubTipo_Id = dbo.FuncFKtesSubTiposMov(@pSubTipo_Id),
		Fecha_Real = @pFecha_Real
	WHERE (tesMovimientos = @ptesMovimientos)
END 
ELSE 
BEGIN 
	INSERT INTO tesMovimientos
	(
		tesMovimientos,
		SubTipo_Id,
		Fecha_Real
	)
	VALUES 
	(
		@ptesMovimientos,
		dbo.FuncFKtesSubTiposMov(@pSubTipo_Id),
		@pFecha_Real
	)
END 

GO

DROP PROCEDURE tesMovimientosDatos
GO
CREATE PROCEDURE tesMovimientosDatos
(
@ptesMovimientos bigint
)
AS
SET NOCOUNT ON 


SELECT genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,
genAsiSegmentos.Segmento4N,genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C,genAsiSegmentos.Segmento4C,
tesMovimientos.tesMovimientos, tesSubTiposMov.Tipomov, 
conAsientos.Fecha,conAsientos.FechaRegistro, genMonedas.Moneda_Id, 
	genMonedas.Descripcion as DescrpcionMoneda,  conAsientos.Cambio, 
	conAsientos.CambioMonedaOriginal, conAsientos.Anulado, 
	conAsientos.Observaciones, conAsientos.Posteado,
	disFormularios.Formulario_Id, disFormularios.Descripcion as DescripcionFormulario,
	tesSubTiposMov.SubTipo_Id, tesSubTiposMov.Descripcion as DescripcionSubTiposMov, 
	tesMovimientos.Fecha_Real, 
	venClientes.Cliente_Id, venClientes.RazonSocial as RazonSocialCliente,
	comProveedores.Proveed_Id, comProveedores.RazonSocial as RazonSocialProveedor,
	Convert(Numeric(18,2), 0) as TotalDebe,
	Convert(Numeric(18,2), 0) as TotalHaber,
	Convert(Numeric(18,2), 0) as TotalHabilitado, 
	cast(1 as Bit) ControlaFormulario,
	ISNULL(Sum(CMCDebe.ImporteMonedaOriginal),0) TotalDebeOriginal,
	ISNULL(Sum(CMCHaber.ImporteMonedaOriginal),0) TotalHaberOriginal,
	genSucursalesEmpr.Sucursal
FROM tesMovimientos 
INNER JOIN conAsientos  ON (conAsientos.conAsientos = tesMovimientos.tesMovimientos)
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
INNER JOIN tesSubTiposMov  ON (tesSubTiposMov.tesSubTiposMov = tesMovimientos.SubTipo_Id)
INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
INNER JOIN disFormularios ON  disFormularios.disFormularios = conAsientos.Formulario_Id
Inner Join genSucursalesEmpr On genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
LEFT OUTER JOIN (venMovimientos INNER JOIN venClientes ON
	venMovimientos.Cliente_Id = venClientes.genEntidades) ON 
	venMovimientos.venMovimientos = tesMovimientos.tesMovimientos
LEFT OUTER JOIN (comMovprov INNER JOIN comProveedores ON
	comMovprov.Proveed_Id = comProveedores.genEntidades) ON 
	comMovprov.comMovprov = tesMovimientos.tesMovimientos
LEFT OUTER Join conMovCont CMCDebe On CMCDebe.conAsientos = conAsientos.conAsientos And CMCDebe.TipoMov = 1
LEFT OUTER Join conMovCont CMCHaber On CMCHaber.conAsientos = conAsientos.conAsientos And CMCHaber.TipoMov = 2
WHERE (tesMovimientos = @ptesMovimientos)
Group By genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,
genAsiSegmentos.Segmento4N,genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C,genAsiSegmentos.Segmento4C,
tesMovimientos.tesMovimientos, tesSubTiposMov.Tipomov, 
conAsientos.Fecha,conAsientos.FechaRegistro, genMonedas.Moneda_Id, 
	genMonedas.Descripcion, conAsientos.Cambio, 
	conAsientos.CambioMonedaOriginal, conAsientos.Anulado, 
	conAsientos.Observaciones, conAsientos.Posteado,
	disFormularios.Formulario_Id, disFormularios.Descripcion,
	tesSubTiposMov.SubTipo_Id, tesSubTiposMov.Descripcion, 
	tesMovimientos.Fecha_Real, 
	venClientes.Cliente_Id, venClientes.RazonSocial,
	comProveedores.Proveed_Id, comProveedores.RazonSocial, genSucursalesEmpr.Sucursal

GO

DROP PROCEDURE tesFactAnexoMovDatos
GO
CREATE PROCEDURE tesFactAnexoMovDatos
(
@ptesMovimientos bigint, 
@pTipomovCont Int
)
AS
SET NOCOUNT ON 




/* Cuerpo ANEXO */


SELECT comMovDetalle.comMovProv as Asiento_Id, comMovDetalle.Renglon, 
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuenta, 
	conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1,
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, 
	conBaseDistri.Base_Id,
	comMovDetalle.Detalle, comMovDetalle.Importe, 
	tesRengMovicomMovProv.Renglon as RenglonRenMovi
FROM tesRengMovicomMovProv 	INNER JOIN  comMovDetalle on tesRengMovicomMovProv.comMovProv = comMovDetalle.comMovProv
Inner join comMovprov on comMovprov.comMovProv = comMovDetalle.comMovprov
INNER JOIN conCuentas ON conCuentas.conCuentas = comMovDetalle.Cuenta_Id
LEFT OUTER JOIN conCentro1 ON conCentro1.conCentro1 = comMovDetalle.Centro1_Id
LEFT OUTER JOIN conCentro2 ON conCentro2.conCentro2 = comMovDetalle.Centro2_Id
LEFT OUTER JOIN conBaseDistri ON conBaseDistri.conBaseDistri =comMovDetalle.Base_Id
INNER JOIN conMovCont ON 
	conMovCont.conAsientos = tesRengMovicomMovProv.tesMovimientos and 
	conMovCont.Renglon = tesRengMovicomMovProv.Renglon
Where
	tesRengMovicomMovProv.tesMovimientos = @ptesMovimientos and 
	conMovCont.TipoMov = @pTipomovCont


/* Impuestos */
SELECT comMovImpuestos.conRenglon, 
	comImpuestos.Impuesto_Id, comImpuestos.Descripcion as DescripcionImpuestos, comMovImpuestos.Porcentaje,
	comImpuestos.FormulaCalc,
	comMovImpuestos.Base_Imponible, comMovImpuestos.Importe_Impuesto, 
	conCuentas.Cuenta_Id as CtaDebe, conCuentas.Descripcion as DescripcionCuentaDebe, 
	conCuentas.Cuenta_Id as CtaHaber, conCuentas.Descripcion as DescripcionCuentaHaber, 
	conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1,
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, 
	tesRengMovicomMovProv.Renglon as RenglonRenMovi
FROM tesRengMovicomMovProv INNER JOIN  comMovImpuestos ON
tesRengMovicomMovProv.comMovProv = comMovImpuestos.comMovProv
INNER JOIN comMovprov ON (comMovImpuestos.comMovProv = comMovProv.comMovProv)
INNER JOIN conMovCont  ON (conMovCont.conAsientos = comMovImpuestos.comMovProv) AND 
			(conMovCont.Renglon = comMovImpuestos.conRenglon)
INNER JOIN comImpuestos  ON (comImpuestos.comImpuestos = comMovImpuestos.Impuesto_Id)
LEFT OUTER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
LEFT OUTER JOIN conCentro1 ON conCentro1.conCentro1 = conMovCont.Centro1_Id
LEFT OUTER JOIN conCentro2 ON conCentro2.conCentro2 = conMovCont.Centro2_Id
inner join conMovCont as conMovContF ON conMovContF.conAsientos = tesRengMovicomMovProv.tesMovimientos and 
	conMovContF.Renglon =tesRengMovicomMovProv.Renglon
WHERE 
	tesRengMovicomMovProv.tesMovimientos = @ptesMovimientos and 
	conMovContF.TipoMov = @pTipoMovCont
GO

/* RengMovi */
DROP PROCEDURE tesRengMoviDHDatos
GO
CREATE PROCEDURE tesRengMoviDHDatos
(
@ptesMovimientos bigint,
@pTipomov int,
@pconRenglon int=null
)
AS
SET NOCOUNT ON 

SELECT tesRengMovi.tesMovimientos, tesRengMovi.conRenglon,
	tesIdentifica.Cartera_Id, tesIdentifica.Descripcion as DescripcionIdentifica, 
	conMovCont.ImporteMonedaOriginal * case when tesRengMovi.TipomovCont = conmovcont.Tipomov then 1 else -1 end 	as ImporteOrig, 
	conMovCont.Importe * case when tesRengMovi.TipomovCont = conmovcont.Tipomov then 1 else -1 end 	as Importe, 
	tesRengMovi.Cambio, genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMoneda, 
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuentas,
	conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1,
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, 
	tesRengMovi.TipomovCont as Tipomov, conMovCont.Clase, 
	tesTiposID.TipoCartera, tesCheqProp.tesCheqProp,  
	tesChequeras.Chequera_Id CPChequera_Id, tesCheqProp.numCheque CPnumCheque, tesChequeras.Estado_Id CPEstado_Id,
	tesChequeras.TipoChequera CPTipoChequera , tesChequeras.Desde CPChequeraDesde, tesChequeras.Hasta CPChequeraHasta, 
	tesChequeras.Proximo CPChequeraProximo,
	tesCheqProp.FechaVencimiento CPFechaVencimiento, tesCheqProp.AlaOrden CPAlaOrden, 
	tesCheqProp.CUIT CPCuit, tesCheqProp.CuentaDestino CPCuentaDestino, 
	tesBancos.Banco_Id as CPBanco_Id , tesBancos.Descripcion as  CPDescripcionBanco, 
	tesCheqProp.BancoDestinoExt CPBancoDestinoExt, 
	tesCheqTerceros.tesCheqTerceros ,tesBancosCT.Banco_Id CTBanco_Id, 
	tesBancosCT.Descripcion as  CTDescripcionBanco, 
	tesClearing.Clearing CTClearing, tesClearing.cVariable CTVariable, 
	tesCheqTerceros.ClearingDias CTClearingDias, 
	tesCheqTerceros.FechaVencimiento CTFechaVencimiento, 
	tesCheqTerceros.sucBanco CTsucBanco, tesCheqTerceros.cuentaBanco CTcuentaBanco,
	tesCheqTerceros.numCheque CTnumCheque, tesCheqTerceros.Estado_Id CTEstado_Id, 
	venClientes.Cliente_Id CTCliente_Id, venClientes.RazonSocial CTRazonSocial, '' CTLectoraCheques,
	comMovprov.comMovprov FPAsiento_Id,  comMovprov.Fecha_CCP FPFecha_Ane, 
	comMovprov.FechaFiscal FPFechaFiscal,
	comProveedores.Proveed_Id FPCuit, genEntidades.TipoDoc FPTipoDoc, genEntidades.IdFiscal FPIdFiscal,
	comProveedores.RazonSocial FPRazonSocial,  
	comProveedores.Direccion1 FPDireccion1, 
	comProveedores.Direccion2 FPDireccion2, 
	comProveedores.Localidad as Localidad, 
	comProveedores.CodigoPostal as Cod_Postal, 
	ISNULL(genProvincias.Provincia_Id,' ') Provincia_Id, 
	ISNULL(genProvincias.Descripcion,' ')  FPDescripcionPcia,
	ISNULL(comCondFiscal.CondFiscal_Id,' ') FPCondFiscal_Id, 
	ISNULL(comCondFiscal.Descripcion,' ') as FPDescripcionCondFiscal, 
	comOrigenesFiscales.Origen_id FPOrigen_Id , comOrigenesFiscales.Descripcion as FPDescripcionOrigen,
	comMovprov.VieneDeFiscal FPVieneDeFiscal, comMovprov.XMLFiscal FPXMLFiscal, comMovProv.TipoCompFE FPTipoCompFE,
	comMovprov.ClaveFiscal FPClaveFiscal, tesRengMovicomMovProv.Renglon FPconRenglonProv, 
	'  ' as FPArchvoXml,
	genSegmentos.Segmento_Id , genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, genAsiSegmentos.Segmento1C,
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	tesRengMoviRetProv.Porcentaje, tesRengMoviRetProv.Exencion, tesRengMoviRetProv.BaseImponible,
	tesRengMoviRetProv.Acum, tesRengMoviRetProv.TRet, tesRengMoviRetProv.AcumTot,
	dbo.Segmento(segMovProv.Segmento_Id, segMovProv.Segmento1C, segMovProv.Segmento2C,
	segMovProv.Segmento3C, segMovProv.Segmento4C, segMovProv.Segmento1N, segMovProv.Segmento2N,
	segMovProv.Segmento3N, segMovProv.Segmento4N) FacturaRet, tesRengMoviRetProv.comMovProv,
	tesRengMoviRetClie.SucursalRet, tesRengMoviRetClie.ComprobanteRet,
	TesDeposito.FormaDePagoP as TDFormaDePagoP, TesDeposito.NumOperacion AS TDNumOperacion, 
		TesDeposito.CtaOrdenante as TDCtaOrdenante,
		TesDeposito.RfcEmisorCtaOrd as TDRfcEmisorCtaOrd, 
		TesDeposito.NomBancoOrdExt as TDNomBancoOrdExt, 
		TesDeposito.TipoCadPago as TDTipoCadPago, 
		TesDeposito.CadPago AS TDCadPago, TesDeposito.SelloPago as TDSelloPago, 
		TesDeposito.CertPago as TDCertPago,
	conMovCont.Importe * 0 Diferencia
FROM tesRengMovi 
INNER JOIN tesMovimientos  ON (tesMovimientos.tesMovimientos = tesRengMovi.tesMovimientos)
INNER JOIN conMovCont  ON (conMovCont.conAsientos = tesRengMovi.tesMovimientos) AND (conMovCont.Renglon = tesRengMovi.conRenglon)
INNER JOIN tesIdentifica  ON (tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id)
INNER JOIN conCuentas ON  conCuentas.conCuentas = conMovCont.Cuenta_Id
LEFT OUTER JOIN conCentro1 ON  conCentro1.conCentro1 = conMovCont.Centro1_Id
LEFT OUTER JOIN conCentro2 ON  conCentro2.conCentro2 = conMovCont.Centro2_Id
INNER JOIN tesTiposID ON (tesTiposID.tesTiposID = tesIdentifica.TipoCartera)
INNER JOIN genMonedas ON genMonedas.genMonedas = conCuentas.Moneda_Id 
LEFT OUTER JOIN (tesCheqProp INNER JOIN tesBPlink ON tesBPlink.tesCheqProp = tesCheqProp.tesCheqProp
			INNER JOIN tesChequeras on tesChequeras.Chequera_Id = tesCheqProp.Chequera_Id And
				tesChequeras.Empresa_Id = tesCheqProp.Empresa_Id And
				tesCheqProp.Cartera_Id = tesChequeras.Cartera_Id
			Left JOIN tesBancos ON tesBancos.tesBancos = tesCheqProp.BancoDestino) ON
				tesBPlink.tesMovimientos = tesRengMovi.tesMovimientos AND 
				tesBPlink.conRenglon =tesRengMovi.conRenglon
LEFT OUTER JOIN (tesCheqTerceros inner join tesCTLink ON tesCTLink.tesCheqTerceros = tesCheqTerceros.tesCheqTerceros
				INNER JOIN tesBancos tesBancosCT ON tesBancosCT.tesBancos = tesCheqTerceros.Banco_Id
				INNER JOIN tesClearing ON tesClearing.Clearing = tesCheqTerceros.Clearing
				Left JOIN venClientes ON venClientes.genEntidades = tesCheqTerceros.Cliente_Id) ON 
					tesCTLink.tesMovimientos = tesRengMovi.tesMovimientos and 
					tesCTLink.conRenglon =tesRengMovi.conRenglon 
					
LEFT OUTER JOIN ( tesRengMovicomMovProv inner join comMovprov ON
					tesRengMovicomMovProv.comMovprov = comMovprov.comMovprov 
					left join comProveedores ON comMovprov.Proveed_Id = comProveedores.genEntidades
				INNER JOIN genEntidades ON genEntidades.genEntidades = comMovprov.Proveed_Id
				left JOIN comCondFiscal ON comCondFiscal.comCondFiscal = comMovprov.CondFiscal_Id
				left JOIN comOrigenesFiscales ON comOrigenesFiscales.comOrigenesFiscales  = comMovprov.Origen_id
				LEFT JOIN genProvincias ON genProvincias.genProvincias = comProveedores.Provincia_Id
				INNER JOIN genAsiSegmentos AS genAsiSegmentos ON genAsiSegmentos.Asiento_Id = comMovProv.comMovProv
				INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id) ON
					tesRengMovicomMovProv.tesMovimientos = tesRengMovi.tesMovimientos AND 
					tesRengMovicomMovProv.Renglon = tesRengMovi.conRenglon
Left Join (tesRengMoviRetProv Left Join 
		(conAsientos conAsientosMovProv Inner Join genAsiSegmentos segMovProv On segMovProv.Asiento_Id = conAsientosMovProv.conAsientos)
			On conAsientosMovProv.conAsientos = tesRengMoviRetProv.comMovProv) On tesRengMoviRetProv.tesMovimientos = tesRengMovi.tesMovimientos And
							tesRengMoviRetProv.conRenglon = tesRengMovi.conRenglon
Left Join tesIdRetProv On tesIdRetProv.Cartera_Id = tesRengMovi.Cartera_Id 
Left Join tesRengMoviRetClie On tesRengMoviRetClie.tesMovimientos = tesRengMovi.tesMovimientos And
								tesRengMoviRetClie.conRenglon = tesRengMovi.conRenglon
LEFT JOIn TesDeposito ON TesDeposito.tesMovimientos = tesRengmovi.tesMovimientos and 
			TesDeposito.Renglon = tesRengmovi.conRenglon

			
				
WHERE tesRengMovi.tesMovimientos = @ptesMovimientos and 
	tesRengMovi.conRenglon = isnull(@pconRenglon, tesRengMovi.conRenglon) and 
	tesRengMovi.TipomovCont = isnull(@pTipomov, conMovCont.Tipomov)
ORDER BY 2


 
RETURN @@Error 

GO
DROP PROCEDURE tesMovimientosCambio 
GO
CREATE PROCEDURE tesMovimientosCambio (
	@ptesMovimientos bigint
	)
AS	
SELECT genMonedas.Moneda_Id, genMonedas.Descripcion, max(tesRengMovi.Cambio) as Cambio
From conMovCont 
Inner join conCuentas ON conMovCont.Cuenta_Id =conCuentas.conCuentas
inner join genMonedas ON genMonedas.genMonedas =conCuentas.Moneda_id
INNER JOIN tesRengMovi ON tesRengMovi.tesMovimientos =conMovCont.conAsientos AND 
	tesRengMovi.conRenglon = conMovCont.Renglon
Where
conMovCont.conAsientos = @ptesMovimientos
GROUP BY genMonedas.Moneda_Id, genMonedas.Descripcion
GO


DROP PROCEDURE tesMovimientosDatosBase
GO
-- tesMovimientosDatosBase 1
CREATE PROCEDURE tesMovimientosDatosBase
(
@Empresa_Id INT, 
@Segmento_Id Char(5),
@Segmento1C Char(25),
@Segmento2C Char(25),
@Segmento3C Char(25),
@Segmento4C Char(25),
@Segmento1N int,
@Segmento2N int,
@Segmento3N int,
@Segmento4N int

)
AS
SET NOCOUNT ON 
DECLARE @ptesMovimientos bigint

SELECT @pTesMovimientos = Asiento_Id FROM genAsiSegmentos 
	WHERE
		genAsiSegmentos.Empresa_Id = @Empresa_Id and 
		genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@Segmento_Id) AND
		genAsiSegmentos.Segmento1C = @Segmento1C AND 
		genAsiSegmentos.Segmento2C = @Segmento2C AND 
		genAsiSegmentos.Segmento3C = @Segmento3C AND 
		genAsiSegmentos.Segmento4C = @Segmento4C AND 
		genAsiSegmentos.Segmento1N = @Segmento1N AND 
		genAsiSegmentos.Segmento2N = @Segmento2N AND 
		genAsiSegmentos.Segmento3N = @Segmento3N AND 
		genAsiSegmentos.Segmento4N = @Segmento4N

-- Print @pTesMovimientos	

-- Principal
EXECUTE tesMovimientosDatos @ptesMovimientos

-- Debe
Exec tesRengMoviDHDatos @ptesMovimientos, 1, NULL
-- Haber
Exec tesRengMoviDHDatos @ptesMovimientos, 2, NULL

-- ConciliacDebe
Exec tesRengConciliacDatos @ptesMovimientos, NULL,1
-- ConciliacHaber
Exec tesRengConciliacDatos @ptesMovimientos, NULL,2

-- CheqTercerosHaber
SELECT CAST(0 as bit) as Marca,
	tesIdentifica.Cartera_Id, tesIdentifica.Descripcion as DescripcionCartera, 
	tesBancos.Banco_Id, tesBancos.Descripcion AS DescripcionBanco,
	tesCheqTerceros.FechaVencimiento, tesCheqTerceros.sucBanco, 
	tesCheqTerceros.numCheque, tesCheqTerceros.Estado_Id,
	venClientes.Cliente_Id, venClientes.RazonSocial, 
	tesCheqTerceros.tesCheqTerceros, conMovCont.Importe, 
	conMovCont.ImporteMonedaOriginal, '' LectoraCheques
FROM tesCheqTerceros 
INNER JOIN tesIdentifica ON tesCheqTerceros.Cartera_Id = tesIdentifica.tesIdentifica
INNER JOIN tesBancos ON tesBancos.tesBancos = tesCheqTerceros.Banco_Id
INNER JOIN tesCTlink ON tesCTlink.tesCheqTerceros = tesCheqTerceros.tesCheqTerceros AND
	tesCTlink.Secuencia = tesCheqTerceros.SecuenciaActual
INNER JOIN tesRengMovi ON tesRengMovi.tesMovimientos = tesCTlink.tesMovimientos and 
	tesRengMovi.conRenglon = tesCTlink.conRenglon
INNER JOIN conMovCont ON conMovCont.conAsientos = tesRengMovi.tesMovimientos AND 
	conMovCont.Renglon =tesRengMovi.conRenglon
LEFT OUTER JOIN  venClientes ON venClientes.genEntidades = tesCheqTerceros.Cliente_Id
WHERE
	1=2


-- FactAneCuerpoDebe , FactAneImpuestoDebe
Exec tesFactAnexoMovDatos @pTesMovimientos, 1
-- FactAneCuerpoHaber, FactAneImpuestoHaber
Exec tesFactAnexoMovDatos @pTesMovimientos, 2

-- FactClientes
-- Cobranzas y/o Pagos a Clientes
SELECT dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoSTR,
	conAsientos.Fecha as Fecha, 
	genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMoneda, conAsientos.Cambio as Cambio,
	genMovCuotas.Importe, genMovCuotas.Saldo, Convert(Numeric(18,2),genMovCuotas.Saldo*conAsientos.Cambio) as SaldoOri, 
	conAsientos.conAsientos, conCuentas.Cuenta_Id, genCancMov.Importe as MontoACobrar, 
	isnull((select max(tesRengMovi.Cambio) from tesRengMovi, conMovCont conMovCont1 WHERE
		tesRengMovi.TesMovimientos =genCancMov.Asiento_Id_Ap and 
		tesRengMovi.TesMovimientos = conMovCont1.conAsientos AND 
		tesRengMovi.conRenglon  = 	conMovCont1.Renglon and 
		conMovCont.Cuenta_id =conMovCont1.Cuenta_id),1)  as CambioCobra, 
		genMovCuotas.CuotaNro, genCancMov.EsVentaContado, venMovimientosMetodoPago.NMetodoPago, 
		conMovCont.Clase
from genAsiSegmentos INNER JOIN venMovimientos ON
genAsiSegmentos.Asiento_Id = venMovimientos.venMovimientos
INNER JOIN conAsientos ON
conAsientos.conAsientos = venMovimientos.venMovimientos
inner JOIN genMovCuotas ON
genMovCuotas.Asiento_id = conAsientos.conAsientos
INNER JOIN conMovCont ON
conMovCont.conAsientos = conAsientos.conAsientos  AND
conMovCont.Clase =	'CLI'
INNER JOIN conCuentas ON
conCuentas.conCuentas = conMovCont.Cuenta_Id
INNER JOIN genMonedas ON
genMonedas.genMonedas = conAsientos.Moneda_Id
INNER JOIN venSubTipoMov ON
venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
INNER JOIN venTipoMov ON
venTipoMov.venTipomov = venMovimientos.venTipomov
INNER JOIN genCancMov ON
genCancMov.Asiento_Id = conAsientos.conAsientos and 
genCancMov.CuotaNro = genMovCuotas.CuotaNro and
genCancMov.Asiento_Id_Ap = @ptesMovimientos and 
genCancMov.CuotaNro_ap = 1
LEFT JOIN venMovimientosMetodoPago ON venMovimientosMetodoPago.venMovimientos = venMovimientos.venMovimientos


-- AntClientes
-- Anticipos de Clientes 
SELECT genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMoneda, tesRengMovi.Cambio,
	conMovCont.Importe, conMovCont.ImporteMonedaOriginal,
	conAsientos.conAsientos, conCuentas.Cuenta_id as Cuenta_Id, 
		conCuentas.Descripcion as DescripcionCuenta
from tesRengMovi INNER JOIN conAsientos ON
conAsientos.conAsientos = tesRengMovi.tesMovimientos 
INNER JOIN conMovCont ON
conMovCont.conAsientos = tesRengMovi.tesMovimientos and 
conMovCont.Renglon = tesRengMovi.conRenglon and 
conMovCont.Clase = 'ANTCL'
INNER JOIN conCuentas ON 
conCuentas.conCuentas = conMovCont.Cuenta_Id
INNER JOIN genMonedas ON
genMonedas.genMonedas = conCuentas.Moneda_Id
Where 
tesRengMovi.TesMovimientos =  @pTesMovimientos


-- FactProveedores
-- Pagos y/o Cobranzas de Proveedores
	SELECT dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
		genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
		genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoSTR,
		genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMoneda, conAsientos.Cambio as Cambio, genMovCuotas.CuotaNro,
		genMovCuotas.Importe, genMovCuotas.Saldo, conMovCont.Importe as SaldoOri, conAsientos.conAsientos,
		conCuentas.Cuenta_Id, IsNull(comPagosHabilitados.ImporteHabilitado, genCancMov.Importe) ImporteHabilitado,
		isnull((select max(tesRengMovi.Cambio) from tesRengMovi, conMovCont conMovCont1 WHERE
			tesRengMovi.TesMovimientos = genCancMov.Asiento_Id_Ap and 
			tesRengMovi.TesMovimientos = conMovCont1.conAsientos AND 
			tesRengMovi.conRenglon = conMovCont1.Renglon and 
			conMovCont.Cuenta_id = conMovCont1.Cuenta_id),1)  as CambioPago,
		IsNull(comPagosHabilitados.Importe1, 0) Importe1, IsNull(comPagosHabilitados.Importe2, 0) Importe2, 
		IsNull(comPagosHabilitados.Importe3, 0) Importe3, IsNull(comPagosHabilitados.FechaHabilitacion, conAsientos.Fecha) FechaHabilitacion,
		comMovProv.comMovProv, IsNull(comPagosHabilitados.Secuencia, 1) Secuencia, comMovProv.Fecha_CCP, 
			conAsientos.Usuario_Id
	From genAsiSegmentos 
	INNER JOIN comMovprov ON genAsiSegmentos.Asiento_Id = comMovprov.comMovprov
	INNER JOIN conAsientos ON conAsientos.conAsientos = comMovprov.comMovprov
	inner JOIN genMovCuotas ON genMovCuotas.Asiento_id = conAsientos.conAsientos
	INNER JOIN conMovCont ON conMovCont.conAsientos = conAsientos.conAsientos  AND
		conMovCont.Clase =	'PRO'
	INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
	INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
	INNER JOIN comMovTipos ON
	comMovTipos.Tipomov = comMovprov.Tipomov
	INNER JOIN genCancMov ON genCancMov.Asiento_Id = conAsientos.conAsientos and 
		genCancMov.CuotaNro = genMovCuotas.CuotaNro and
		genCancMov.Asiento_Id_Ap = @ptesMovimientos and 
		genCancMov.CuotaNro_ap = 1
	Left Join comPagosHabilitados On comPagosHabilitados.tesMovimientos = conAsientos.conAsientos And
										comPagosHabilitados.comMovProv = genCancMov.Asiento_Id

-- AntProveedores
-- Anticipos de Proveedores
SELECT genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMoneda, tesRengMovi.Cambio,
	conMovCont.Importe, conMovCont.ImporteMonedaOriginal,
	conAsientos.conAsientos, 0 as TipoCtaProv, ' ' as DescripcionProveedoresTipoPasivo,
	conCuentas.Cuenta_id as Cuenta_Id, 
		conCuentas.Descripcion as DescripcionCuenta, ' ' as Usuario_id, 
		 conAsientos.conAsientos as comPagosAnticipo ,conAsientos.conAsientos,
			' ' DescripcionUsuario ,   conAsientos.conAsientos as comEmbarque
From tesRengMovi 
INNER JOIN conAsientos ON conAsientos.conAsientos = tesRengMovi.tesMovimientos 
INNER JOIN conMovCont ON conMovCont.conAsientos = tesRengMovi.tesMovimientos and 
	conMovCont.Renglon = tesRengMovi.conRenglon and 
	conMovCont.Clase = 'ANTPR'
INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
INNER JOIN genMonedas ON genMonedas.genMonedas = conCuentas.Moneda_Id
Where 
tesRengMovi.TesMovimientos =  @pTesMovimientos



-- CarteraUnica
-- PARA LOS QUE PIDEN UNA CARTERA PARA DEBE O HABER
SELECT tesIdentifica.Cartera_Id, tesIdentifica.Descripcion, 0.00 as ImporteOrig, 0.00 as Importe, 
	' ' as Estado_Id, CAST(null as datetime) as FechaHasta
From tesIdentifica
WHERE 1=2

-- Reversa
-- para Reversion de OP
SELECT genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,
genAsiSegmentos.Segmento4N,genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C,genAsiSegmentos.Segmento4C,
tesMovimientos.tesMovimientos, conAsientos.Fecha, 
	Convert(numeric(18,2), 0) as Monto, 
		'  ' Entidad_Id, ' ' EntidadDescripcion 
FROM tesMovimientos  inner join tesMoviReversa on
tesMovimientos.tesMovimientos = tesMoviReversa.tesMoviReversa
INNER JOIN conAsientos  ON (conAsientos.conAsientos = tesMovimientos.tesMovimientos)
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
WHERE 
	tesMoviReversa.tesMovimientos = @ptesMovimientos

-- TiposCambio
-- TIPOS DE CAMBIO
Exec tesMovimientosCambio @ptesMovimientos


-- genAtributosGenerales
Exec genAtributosGeneralesIdentityDatos @ptesMovimientos, 'tesMovimientos'

-- CarteraUnicaContra
-- PARA LOS QUE PIDEN DOS CARTERA PARA DEBE O HABER
SELECT tesIdentifica.Cartera_Id, tesIdentifica.Descripcion, 0.00 as ImporteOrig, 0.00 as Importe, 
	' ' as Estado_Id, CAST(null as datetime) as FechaHasta, CAST(null as datetime) as FechaDesde, Cast(0 As bit) Marca, '' as Lupa, '' DescripcionLupa
From tesIdentifica
WHERE 1=2

-- CheqTercerosDebe
SELECT  CAST(0 as bit) as Marca,
	tesIdentifica.Cartera_Id, tesIdentifica.Descripcion as DescripcionCartera, 
	tesBancos.Banco_Id, tesBancos.Descripcion AS DescripcionBanco,
	tesCheqTerceros.FechaVencimiento, tesCheqTerceros.sucBanco, 
	tesCheqTerceros.numCheque,
	venClientes.Cliente_Id, venClientes.RazonSocial, 
	tesCheqTerceros.tesCheqTerceros, conMovCont.Importe, 
	conMovCont.ImporteMonedaOriginal, '' LectoraCheques
FROM tesCheqTerceros 
INNER JOIN tesIdentifica ON tesCheqTerceros.Cartera_Id = tesIdentifica.tesIdentifica
INNER JOIN tesBancos ON tesBancos.tesBancos = tesCheqTerceros.Banco_Id
INNER JOIN tesCTlink ON tesCTlink.tesCheqTerceros = tesCheqTerceros.tesCheqTerceros AND
	tesCTlink.Secuencia = tesCheqTerceros.SecuenciaActual
INNER JOIN tesRengMovi ON tesRengMovi.tesMovimientos = tesCTlink.tesMovimientos and 
	tesRengMovi.conRenglon = tesCTlink.conRenglon
INNER JOIN conMovCont ON conMovCont.conAsientos = tesRengMovi.tesMovimientos AND 
	conMovCont.Renglon =tesRengMovi.conRenglon
LEFT OUTER JOIN  venClientes ON venClientes.genEntidades = tesCheqTerceros.Cliente_Id
WHERE
	1=2

-- tesRengMoviRetProvDebe --
Select tesIdentifica.Cartera_Id, tesIdentifica.Descripcion, tesIdRetProv.Formula,
	tesRengMoviRetProv.Porcentaje, tesRengMoviRetProv.Exencion,
	tesRengMoviRetProv.BaseImponible, tesRengMoviRetProv.Acum, tesRengMoviRetProv.TRet, tesRengMoviRetProv.AcumTot,
	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoSTR
From tesRengMoviRetProv
Inner Join tesRengMovi On tesRengMovi.tesMovimientos = tesRengMoviRetProv.tesMovimientos and 
	tesRengMovi.conRenglon = tesRengMoviRetProv.conRenglon
Inner Join tesIdentifica On tesIdentifica.Cartera_Id = tesRengMovi.Cartera_Id
Inner Join tesIdRetProv On tesIdRetProv.Cartera_Id = tesIdentifica.Cartera_Id
Left Join (conAsientos Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = conAsientos.conAsientos) 
			On conAsientos.conAsientos = tesRengMoviRetProv.comMovProv
Where 1 = 2

-- tesRengMoviRetProvHaber --
Select tesIdentifica.Cartera_Id, tesIdentifica.Descripcion, tesIdRetProv.Formula,
	tesRengMoviRetProv.Porcentaje, tesRengMoviRetProv.Exencion,
	tesRengMoviRetProv.BaseImponible, tesRengMoviRetProv.Acum, tesRengMoviRetProv.TRet, tesRengMoviRetProv.AcumTot,
	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoSTR
From tesRengMoviRetProv
Inner Join tesRengMovi On tesRengMovi.tesMovimientos = tesRengMoviRetProv.tesMovimientos and 
	tesRengMovi.conRenglon = tesRengMoviRetProv.conRenglon
Inner Join tesIdentifica On tesIdentifica.Cartera_Id = tesRengMovi.Cartera_Id
Inner Join tesIdRetProv On tesIdRetProv.Cartera_Id = tesIdentifica.Cartera_Id
Left Join (conAsientos Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = conAsientos.conAsientos) 
			On conAsientos.conAsientos = tesRengMoviRetProv.comMovProv
Where 1 = 2

-- tesMoviGravadoDebe --
SELECT tesMoviGravado.tesMovimientos, tesMoviGravado.TipoCtaProv, comProveedoresTipoPasivo.Descripcion as DescripcionProveedoresTipoPasivo,
	tesMoviGravado.Importe
FROM tesMoviGravado 
INNER JOIN tesMovimientos  ON (tesMovimientos.tesMovimientos = tesMoviGravado.tesMovimientos)
INNER JOIN comProveedoresTipoPasivo  ON (comProveedoresTipoPasivo.TipoCtaProv = tesMoviGravado.TipoCtaProv)
WHERE 1 = 2
 
-- tesMoviGravadoHaber --
SELECT tesMoviGravado.tesMovimientos, tesMoviGravado.TipoCtaProv, comProveedoresTipoPasivo.Descripcion as DescripcionProveedoresTipoPasivo,
	tesMoviGravado.Importe
FROM tesMoviGravado 
INNER JOIN tesMovimientos  ON (tesMovimientos.tesMovimientos = tesMoviGravado.tesMovimientos)
INNER JOIN comProveedoresTipoPasivo  ON (comProveedoresTipoPasivo.TipoCtaProv = tesMoviGravado.TipoCtaProv)
WHERE 1 = 2

--- AJ ReqCompPago

SELECT comMovProv.VieneDeFiscal as ReqCompPago ,  ' ' AS Segmento_Id, 0 as Segmento1N, 
	0 as Segmento2N, 0 as Segmento3N, 0 as Segmento4N, 
	' '  as Segmento1C, ' '  as Segmento2C,' '  as Segmento3C, ' '  as Segmento4C
from 
	comMovProv where comMovProv.comMovProv = @ptesMovimientos

-- FM Grilla de PDF generados por retenciones a proveedores --
Select '' PDF, '' NombreArchivo, Cast(0 As bigint) tesMovimientos, Cast(0 As Int) conRenglon

-- AJ Para V2 Impuestos y Sueldos

-- Impuestos y Sueldos
SELECT genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
		genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
		genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, 
		' ' Impuesto_Id, '  ' Descripcion,
		0.00 TotalaPagar, 
		conAsientos.Fecha FechaDesde, conAsientos.Fecha FechaHasta, conAsientos.Fecha FechaPago, 
		conAsientos.conAsientos, 0 as Grupo_Id, 0 as Anio, 0 as Mes, 0 as Quincena, 0 as Decena, 0 as Semana, 0 Vez
	FROM conAsientos INNER JOIN genAsiSegmentos ON
		genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
	INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	WHERE
		1 = 2
		

RETURN @@Error 

GO

DROP PROCEDURE tesMovimientosEliminar
GO
CREATE PROCEDURE tesMovimientosEliminar
(
@ptesMovimientos bigint
)
AS
SET NOCOUNT ON 

DELETE FROM tesMovimientos 
WHERE (tesMovimientos = @ptesMovimientos)
 
RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesMovimientosOtrosEgresos.sql*/
--tesMovimientosOtrosEgresos 1, 'TES',0,0,0,0,' ',' ',' ',' '

drop Procedure tesMovimientosOtrosEgresos
GO
Create Procedure tesMovimientosOtrosEgresos
(
	@Empresa_Id int, 
	@Segmento_Id VarChar(10),
	@Segmento1N Int,
	@Segmento2N Int,
	@Segmento3N Int,
	@Segmento4N Int,
	@Segmento1C VarChar(20),
	@Segmento2C VarChar(20),
	@Segmento3C VarChar(20),
	@Segmento4C VarChar(20)
)
AS

Declare @ptesMovimientos as BigInt
SET @ptesMovimientos = (Select tesMovimientos.tesMovimientos from 
	tesMovimientos INNER JOIN genAsiSegmentos ON
	tesMovimientos.tesMovimientos = genAsiSegmentos.Asiento_Id
	INNER JOIN genSegmentos ON
	genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	WHERE
	genSegmentos.Segmento_Id = @Segmento_Id and 
	genAsiSegmentos.Empresa_Id = @Empresa_id and 
	genAsiSegmentos.Segmento1N = @Segmento1N and 
	genAsiSegmentos.Segmento2N = @Segmento2N and 
	genAsiSegmentos.Segmento3N = @Segmento3N and 
	genAsiSegmentos.Segmento4N = @Segmento4N and 
	genAsiSegmentos.Segmento1C = @Segmento1C and 
	genAsiSegmentos.Segmento2C = @Segmento2C and 
	genAsiSegmentos.Segmento3C = @Segmento3C and 
	genAsiSegmentos.Segmento4C = @Segmento4C )

-- Principal
EXECUTE tesMovimientosDatos @ptesMovimientos

-- Debe
Exec tesRengMoviDHDatos @ptesMovimientos, 1, NULL
-- Haber
Exec tesRengMoviDHDatos @ptesMovimientos, 2, NULL

-- ConciliacDebe
Exec tesRengConciliacDatos @ptesMovimientos, NULL,1
-- ConciliacHaber
Exec tesRengConciliacDatos @ptesMovimientos, NULL,2

-- FactAneCuerpoDebe , FactAneImpuestoDebe
Exec tesFactAnexoMovDatos @pTesMovimientos, 1
-- FactAneCuerpoHaber, FactAneImpuestoHaber
Exec tesFactAnexoMovDatos @pTesMovimientos, 2


-- Reversa
-- para Reversion de OP
SELECT genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,
genAsiSegmentos.Segmento4N,genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C,genAsiSegmentos.Segmento4C,
tesMovimientos.tesMovimientos
FROM tesMovimientos 
INNER JOIN conAsientos  ON (conAsientos.conAsientos = tesMovimientos.tesMovimientos)
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
WHERE 1=2

-- TiposCambio
-- TIPOS DE CAMBIO
Exec tesMovimientosCambio @ptesMovimientos
-- genAtributosGenerales
Exec genAtributosGeneralesIdentityDatos @ptesMovimientos, 'tesMovimientos'



GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesMovimientosSIDatos.sql*/
-- tesMovimientosSIDatos 'BX475', 1
DROP Procedure tesMovimientosSIDatos
GO
CREATE Procedure tesMovimientosSIDatos
(
	@Cartera_Id Varchar(5), 
	@Empresa Int
)

AS

Select @Cartera_Id as Cartera_Id

SELECT conAsientos.conAsientos, genSegmentos.Segmento_Id,
genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
conAsientos.Fecha
From conAsientos INNER JOIN genAsiSegmentos ON 
conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
INNER JOIN tesMovimientos ON tesMovimientos.tesMovimientos = conAsientos.conAsientos
INNER JOIN tesSubTiposMov ON  tesSubTiposMov.tesSubTiposMov = tesMovimientos.SubTipo_Id
WHERE
	tesSubTiposMov.SubTipo_Id = 'AIB' AND 
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa and 
	exists(select 1 from tesRengMovi , tesIdentifica WHERE
		tesRengMovi.tesMovimientos = tesMovimientos.tesMovimientos and 
		tesRengMovi.Cartera_Id = tesIdentifica.tesIdentifica and
		tesIdentifica.Cartera_Id = @Cartera_Id)


GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesMoviReversa.sql*/
DROP PROCEDURE tesMoviReversaGuardar
GO
CREATE PROCEDURE tesMoviReversaGuardar
(
@ptesMovimientos bigint,
@ptesMoviReversa bigint
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesMoviReversa WHERE (tesMovimientos = @ptesMovimientos)))
BEGIN 
	UPDATE tesMoviReversa
	SET		tesMoviReversa = @ptesMoviReversa
	WHERE (tesMovimientos = @ptesMovimientos)
END 
ELSE 
BEGIN 
	INSERT INTO tesMoviReversa
	(
		tesMovimientos,
		tesMoviReversa
	)
	VALUES 
	(
		@ptesMovimientos,
		@ptesMoviReversa
	)
END 

GO

DROP PROCEDURE tesMoviReversaDatos
GO
CREATE PROCEDURE tesMoviReversaDatos
(
@ptesMovimientos bigint
)
AS
SET NOCOUNT ON 

SELECT tesMoviReversa.tesMovimientos, tesMoviReversa.tesMoviReversa, 
genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N,
genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,genAsiSegmentos.Segmento4C
FROM tesMoviReversa 
INNER JOIN tesMovimientos  ON (tesMovimientos.tesMovimientos = tesMoviReversa.tesMovimientos)
INNER JOIN genAsiSegmentos ON (genAsiSegmentos.Asiento_Id = tesMoviReversa.tesMoviReversa)
WHERE (tesMoviReversa.tesMovimientos = @ptesMovimientos)
 
 RETURN @@Error 

GO

DROP PROCEDURE tesMoviReversaEliminar
GO
CREATE PROCEDURE tesMoviReversaEliminar
(
@ptesMovimientos bigint
)
AS
SET NOCOUNT ON 

DELETE FROM tesMoviReversa 
WHERE (tesMovimientos = @ptesMovimientos)
 
 RETURN @@Error 

GO



DROP PROCEDURE tesMoviReversaRevDatos
GO
CREATE PROCEDURE tesMoviReversaRevDatos
(
@ptesMovimientosRev bigint
)
AS
SET NOCOUNT ON 

SELECT tesMoviReversa.tesMovimientos, tesMoviReversa.tesMoviReversa, 
genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N,
genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,genAsiSegmentos.Segmento4C
FROM tesMoviReversa 
INNER JOIN tesMovimientos  ON (tesMovimientos.tesMovimientos = tesMoviReversa.tesMovimientos)
INNER JOIN genAsiSegmentos ON (genAsiSegmentos.Asiento_Id = tesMoviReversa.tesMoviReversa)
WHERE (tesMoviReversa.tesMoviReversa = @ptesMovimientosRev)
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\TesoreriaCerrar.sql*/
DROP Procedure TesoreriaCerrar
GO
CREATE Procedure TesoreriaCerrar
(
@Empresa_Id Int
)
as

SELECT FechaCierreTesoreria as UltimoCierre, 
conPeriodos.Fecha_Hasta as ProximoCierre
FROM genEmpresas 
INNER JOIN conPeriodos on
genEmpresas.genEmpresas = conPeriodos.Empresa_Id and 
DATEADD(dd,1,FechaCierreTesoreria) between conPeriodos.Fecha_Desde And conPeriodos.Fecha_Hasta
Where
	genEmpresas.genEmpresas = @Empresa_Id

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesPagosClie.sql*/
-- exec tesPagosClieDatosPendientes @Empresa_Id=2,@pCliente_id='00001',@pMoneda_Id=''
-- exec tesPagosClieDatosPendientes @Empresa_Id=1,@pCliente_id='00025',@pMoneda_Id='PES'

DROP PROCEDURE tesPagosClieDatos
GO
-- tesCobranzasDatos 1
CREATE PROCEDURE tesPagosClieDatos
(
	@Empresa_Id int, 
	@Segmento_Id VarChar(10),
	@Segmento1N Int,
	@Segmento2N Int,
	@Segmento3N Int,
	@Segmento4N Int,
	@Segmento1C VarChar(20),
	@Segmento2C VarChar(20),
	@Segmento3C VarChar(20),
	@Segmento4C VarChar(20), 
	@pCliente_id VarChar(15)=null, 
	@pMoneda_Id VarChar(5)=NULL

)
AS
SET NOCOUNT ON 

Declare @ptesMovimientos as BigInt
SET @ptesMovimientos = (Select tesMovimientos.tesMovimientos from 
	tesMovimientos INNER JOIN genAsiSegmentos ON
	tesMovimientos.tesMovimientos = genAsiSegmentos.Asiento_Id
	INNER JOIN genSegmentos ON
	genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	WHERE
	genSegmentos.Segmento_Id = @Segmento_Id and 
	genAsiSegmentos.Empresa_Id = @Empresa_id and 
	genAsiSegmentos.Segmento1N = @Segmento1N and 
	genAsiSegmentos.Segmento2N = @Segmento2N and 
	genAsiSegmentos.Segmento3N = @Segmento3N and 
	genAsiSegmentos.Segmento4N = @Segmento4N and 
	genAsiSegmentos.Segmento1C = @Segmento1C and 
	genAsiSegmentos.Segmento2C = @Segmento2C and 
	genAsiSegmentos.Segmento3C = @Segmento3C and 
	genAsiSegmentos.Segmento4C = @Segmento4C )


EXECUTE tesMovimientosDatos @ptesMovimientos

Exec tesRengMoviDHDatos @ptesMovimientos, 1, NULL
Exec tesRengMoviDHDatos @ptesMovimientos, 2, NULL

Exec tesRengConciliacDatos @ptesMovimientos, NULL,1
Exec tesRengConciliacDatos @ptesMovimientos, NULL,2


-- Solo traigo las facturas que intervinieron en la cobranza pasada como par?metro --
SELECT SegmentoSTR, Fecha, Moneda_Id, DescripcionMoneda, Cambio,
	Importe, Saldo, SaldoOri, conAsientos, max(Cuenta_Id)  as Cuenta_Id, 
	MontoACobrar, CambioCobra, CuotaNro, Clase
FROM (
SELECT dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoSTR,
	conAsientos.Fecha as Fecha, 
	genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMoneda, conAsientos.Cambio as Cambio,
	genMovCuotas.Importe, genMovCuotas.Saldo, Convert(Numeric(18,2),genMovCuotas.Saldo*conAsientos.Cambio) as SaldoOri, 
	conAsientos.conAsientos, conCuentas.Cuenta_Id, genCancMov.Importe as MontoACobrar, 
	isnull((select max(tesRengMovi.Cambio) from tesRengMovi, conMovCont conMovCont1 WHERE
		tesRengMovi.TesMovimientos =genCancMov.Asiento_Id_Ap and 
		tesRengMovi.TesMovimientos = conMovCont1.conAsientos AND 
		tesRengMovi.conRenglon  = 	conMovCont1.Renglon and 
		conMovCont.Cuenta_id =conMovCont1.Cuenta_id),1)  as CambioCobra, 
		genMovCuotas.CuotaNro, conMovCont.Clase
from genAsiSegmentos INNER JOIN venMovimientos ON
genAsiSegmentos.Asiento_Id = venMovimientos.venMovimientos
INNER JOIN conAsientos ON
conAsientos.conAsientos = venMovimientos.venMovimientos
inner JOIN genMovCuotas ON
genMovCuotas.Asiento_id = conAsientos.conAsientos
INNER JOIN conMovCont ON
conMovCont.conAsientos = conAsientos.conAsientos  AND
conMovCont.Clase IN('CLI','ANTCL') 
INNER JOIN conCuentas ON
conCuentas.conCuentas = conMovCont.Cuenta_Id
INNER JOIN genMonedas ON
genMonedas.genMonedas = conAsientos.Moneda_Id
INNER JOIN venSubTipoMov ON
venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
INNER JOIN venTipoMov ON
venTipoMov.venTipomov = venMovimientos.venTipomov
INNER JOIN genCancMov ON
genCancMov.Asiento_Id_ap = conAsientos.conAsientos and 
genCancMov.CuotaNro_ap = genMovCuotas.CuotaNro and
genCancMov.Asiento_Id = @ptesMovimientos and 
genCancMov.CuotaNro = 1
WHERE 
conAsientos.Anulado = 0 AND 
conAsientos.Posteado = 1
) AS XXX
GROUP BY  SegmentoSTR, Fecha, Moneda_Id, DescripcionMoneda, Cambio,
	Importe, Saldo, SaldoOri, conAsientos, MontoACobrar, CambioCobra, CuotaNro, 
	Clase


-- TIPOS DE CAMBIO
Exec tesMovimientosCambio @ptesMovimientos

Exec genAtributosGeneralesIdentityDatos @ptesMovimientos, 'tesMovimientos'



RETURN @@Error 

GO

------------------------------------------------------------------------------
DROP PROCEDURE tesPagosClieDatosPendientes
GO

CREATE PROCEDURE tesPagosClieDatosPendientes
(
	@Empresa_Id int, 
	@pCliente_id VarChar(15), 
	@pMoneda_Id VarChar(5)

)
AS
SET NOCOUNT ON 

Declare @ptesMovimientos as BigInt
SET @ptesMovimientos = 0

EXECUTE tesMovimientosDatos @ptesMovimientos

Exec tesRengMoviDHDatos @ptesMovimientos, 1, NULL
Exec tesRengMoviDHDatos @ptesMovimientos, 2, NULL

Exec tesRengConciliacDatos @ptesMovimientos, NULL,1
Exec tesRengConciliacDatos @ptesMovimientos, NULL,2


-- TODO SALDOS INICIALES
-- Cobranzas y/o Pagos a Clientes
SELECT SegmentoSTR, Fecha, Moneda_Id, DescripcionMoneda, Cambio,
	Importe, Saldo, SaldoOri, conAsientos, max(Cuenta_Id)  as Cuenta_Id, 
	MontoACobrar, CambioCobra, CuotaNro, Clase
FROM (
SELECT dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoSTR,
	conAsientos.Fecha as Fecha, 
	genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMoneda, conAsientos.Cambio as Cambio,
	genMovCuotas.Importe, genMovCuotas.Saldo, Convert(Numeric(18,2),genMovCuotas.Saldo*conAsientos.Cambio) as SaldoOri, 
	conAsientos.conAsientos, conCuentas.Cuenta_Id, genMovCuotas.Importe*0 as MontoACobrar, 
	dbo.func_TipoCambio(conCuentas.Moneda_Id, dbo.FechaActual(), @Empresa_Id) as CambioCobra, 
	genMovCuotas.CuotaNro, conMovCont.Clase
from genAsiSegmentos 
INNER JOIN venMovimientos ON
genAsiSegmentos.Asiento_Id = venMovimientos.venMovimientos
INNER JOIN conAsientos ON
conAsientos.conAsientos = venMovimientos.venMovimientos
INNER JOIN genMonedas ON
genMonedas.genMonedas = conAsientos.Moneda_Id
INNER JOIN venSubTipoMov ON
venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
INNER JOIN venTipoMov ON
venTipoMov.venTipomov = venMovimientos.venTipomov
INNER JOIN conMovCont ON
conMovCont.conAsientos = conAsientos.conAsientos  AND
conMovCont.Clase IN('CLI','ANTCL') 
INNER JOIN conCuentas ON
conCuentas.conCuentas = conMovCont.Cuenta_Id
INNER JOIN genMovCuotas ON 
genMovCuotas.Asiento_Id = venmovimientos.venMovimientos
Where 
conAsientos.Anulado = 0 and 
conAsientos.Posteado = 1 and 
venMovimientos.Cliente_id = dbo.FuncFKvenClientes(@pCliente_Id) and 
conAsientos.Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id) and 
genMovCuotas.Saldo > 0 and 
venTipoMov.Signo = -1 And
conAsientos.Empresa_Id = @Empresa_Id) AS XXX
GROUP BY  SegmentoSTR, Fecha, Moneda_Id, DescripcionMoneda, Cambio,
	Importe, Saldo, SaldoOri, conAsientos, MontoACobrar, CambioCobra, CuotaNro, 
	Clase



-- TIPOS DE CAMBIO
Exec tesMovimientosCambio @ptesMovimientos

Exec genAtributosGeneralesIdentityDatos @ptesMovimientos, 'tesMovimientos'

RETURN @@Error 

GO

--exec tesPagosClieDatosPendientes 1,'90003','PES'
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesPagosImp.sql*/
-- tesPagosImpDatos 1, 'TES',0,0,0,0,'E','0001',' ',' ','IMPLQ',2,0,0,0,'0001',' ',' ',' '

DROP PROCEDURE tesPagosImpDatos
GO
-- tesCobranzasDatos 1
CREATE PROCEDURE tesPagosImpDatos
(
	@Empresa_Id int, 
	@Segmento_Id VarChar(10),
	@Segmento1N Int,
	@Segmento2N Int,
	@Segmento3N Int,
	@Segmento4N Int,
	@Segmento1C VarChar(20),
	@Segmento2C VarChar(20),
	@Segmento3C VarChar(20),
	@Segmento4C VarChar(20), 
	@SegmentoIMP_Id VarChar(10),
	@SegmentoIMP1N Int,
	@SegmentoIMP2N Int,
	@SegmentoIMP3N Int,
	@SegmentoIMP4N Int,
	@SegmentoIMP1C VarChar(20),
	@SegmentoIMP2C VarChar(20),
	@SegmentoIMP3C VarChar(20),
	@SegmentoIMP4C VarChar(20)

)
AS
SET NOCOUNT ON 

Declare @ptesMovimientos as BigInt
SET @ptesMovimientos = (Select tesMovimientos.tesMovimientos from 
	tesMovimientos INNER JOIN genAsiSegmentos ON
	tesMovimientos.tesMovimientos = genAsiSegmentos.Asiento_Id
	INNER JOIN genSegmentos ON
	genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	WHERE
	genSegmentos.Segmento_Id = @Segmento_Id and 
	genAsiSegmentos.Empresa_Id = @Empresa_id and 
	genAsiSegmentos.Segmento1N = @Segmento1N and 
	genAsiSegmentos.Segmento2N = @Segmento2N and 
	genAsiSegmentos.Segmento3N = @Segmento3N and 
	genAsiSegmentos.Segmento4N = @Segmento4N and 
	genAsiSegmentos.Segmento1C = @Segmento1C and 
	genAsiSegmentos.Segmento2C = @Segmento2C and 
	genAsiSegmentos.Segmento3C = @Segmento3C and 
	genAsiSegmentos.Segmento4C = @Segmento4C )


EXECUTE tesMovimientosDatos @ptesMovimientos

Exec tesRengMoviDHDatos @ptesMovimientos, 1, NULL
Exec tesRengMoviDHDatos @ptesMovimientos, 2, NULL

Exec tesRengConciliacDatos @ptesMovimientos, NULL,1
Exec tesRengConciliacDatos @ptesMovimientos, NULL,2

-- TIPOS DE CAMBIO
Exec tesMovimientosCambio @ptesMovimientos

Exec genAtributosGeneralesIdentityDatos @ptesMovimientos, 'tesMovimientos'

IF (@ptesMovimientos IS NULL)
Begin

	SELECT genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
		genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
		genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, 
		impImpuestos.Impuesto_Id, impImpuestos.Descripcion,
		impLiquidacion.TotalaPagar, 
		impLiquidacion.FechaDesde, impLiquidacion.FechaHasta, impLiquidacion.FechaPago, 
		conAsientos.conAsientos
	FROM impLiquidacion inner join conAsientos ON 
	impLiquidacion.conAsientos = conAsientos.conAsientos
	INNER JOIN genAsiSegmentos ON
		genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
	INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	INNER JOIN impImpuestos ON impImpuestos.impImpuestos = impLiquidacion.Impuesto_Id
	WHERE
		impLiquidacion.tesMovimientos is NULL AND 
		impLiquidacion.SePaga = 1 AND
		impLiquidacion.TotalaPagar > 0 AND 
		conAsientos.Anulado = 0 and 
		conAsientos.Posteado = 1 and 
		genSegmentos.Segmento_Id = @SegmentoIMP_Id and  
		genAsiSegmentos.Segmento1C =@SegmentoIMP1C AND
		genAsiSegmentos.Segmento2C = @SegmentoIMP2C AND
		genAsiSegmentos.Segmento3C = @SegmentoIMP3C AND 
		genAsiSegmentos.Segmento4C = @SegmentoIMP4C AND
		genAsiSegmentos.Segmento1N = @SegmentoIMP1N AND 
		genAsiSegmentos.Segmento2N = @SegmentoIMP2N AND 
		genAsiSegmentos.Segmento3N = @SegmentoIMP3N AND 
		genAsiSegmentos.Segmento4N= @SegmentoIMP4N  AND
		genAsiSegmentos.Empresa_Id = @Empresa_Id


end

else
Begin

	SELECT genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
		genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
		genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, 
		impImpuestos.Impuesto_Id, impImpuestos.Descripcion,
		impLiquidacion.TotalaPagar, 
		impLiquidacion.FechaDesde, impLiquidacion.FechaHasta, impLiquidacion.FechaPago, 
		conAsientos.conAsientos, 0 as Grupo_Id, 0 as Anio, 0 as Mes, 0 as Quincena, 
		0 as Decena, 0 as Semana, 0 as Vez
	FROM impLiquidacion inner join conAsientos ON 
	impLiquidacion.conAsientos = conAsientos.conAsientos
	INNER JOIN genAsiSegmentos ON
		genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
	INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	INNER JOIN impImpuestos ON impImpuestos.impImpuestos = impLiquidacion.Impuesto_Id
	WHERE
		impLiquidacion.tesMovimientos = @ptesMovimientos
		


end







GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesPagosProv.sql*/
-- tesPagosProvDatos 1, 'TES',2,0,0,0,'E','0001',' ',' ','C003'

DROP PROCEDURE tesPagosProvDatos
GO
-- tesCobranzasDatos 1
CREATE PROCEDURE tesPagosProvDatos
(
	@Empresa_Id int, 
	@Segmento_Id VarChar(10),
	@Segmento1N Int,
	@Segmento2N Int,
	@Segmento3N Int,
	@Segmento4N Int,
	@Segmento1C VarChar(20),
	@Segmento2C VarChar(20),
	@Segmento3C VarChar(20),
	@Segmento4C VarChar(20), 
	@pProveed_Id VarChar(15)=null,
	@pMoneda_Id varChar(3) = null

)
AS
SET NOCOUNT ON 

Declare @ptesMovimientos as BigInt
SET @ptesMovimientos = (Select tesMovimientos.tesMovimientos from 
	tesMovimientos INNER JOIN genAsiSegmentos ON
	tesMovimientos.tesMovimientos = genAsiSegmentos.Asiento_Id
	INNER JOIN genSegmentos ON
	genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	WHERE
	genSegmentos.Segmento_Id = @Segmento_Id and 
	genAsiSegmentos.Empresa_Id = @Empresa_id and 
	genAsiSegmentos.Segmento1N = @Segmento1N and 
	genAsiSegmentos.Segmento2N = @Segmento2N and 
	genAsiSegmentos.Segmento3N = @Segmento3N and 
	genAsiSegmentos.Segmento4N = @Segmento4N and 
	genAsiSegmentos.Segmento1C = @Segmento1C and 
	genAsiSegmentos.Segmento2C = @Segmento2C and 
	genAsiSegmentos.Segmento3C = @Segmento3C and 
	genAsiSegmentos.Segmento4C = @Segmento4C )


EXECUTE tesMovimientosDatos @ptesMovimientos

Exec tesRengMoviDHDatos @ptesMovimientos, 1, NULL
Exec tesRengMoviDHDatos @ptesMovimientos, 2, NULL

Exec tesRengConciliacDatos @ptesMovimientos, NULL,1
Exec tesRengConciliacDatos @ptesMovimientos, NULL,2


IF (@ptesMovimientos IS NULL)
Begin

	-- TODO SALDOS INICIALES
	-- Cobranzas y/o Pagos a Clientes
	SELECT dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoSTR,
	genMonedas.Moneda_Id, genMonedas.Descripcion DescripcionMoneda, conAsientos.Cambio, genMovCuotas.CuotaNro,
	genMovCuotas.Importe, genMovCuotas.Saldo,
	Convert(Numeric(18,2), genMovCuotas.Saldo*conAsientos.Cambio) As SaldoOri,
	conAsientos.conAsientos, conCuentas.Cuenta_Id, comPagosHabilitados.ImporteHabilitado, 
	dbo.func_TipoCambio(conCuentas.Moneda_Id, dbo.FechaActual(), @Empresa_Id) As CambioPago,
	comPagosHabilitados.Importe1, comPagosHabilitados.Importe2, comPagosHabilitados.Importe3, comPagosHabilitados.FechaHabilitacion,
	comPagosHabilitados.Secuencia, comMovProv.Fecha_CCP
	FROM comMovProv
	INNER JOIN comMovTipos ON comMovTipos.TipoMov = comMovprov.TipoMov
	Inner Join conAsientos On conAsientos.conAsientos = comMovProv.comMovProv
	Inner Join genMonedas On genMonedas.genMonedas = conAsientos.Moneda_Id
	INNER JOIN conMovCont ON conMovCont.conAsientos = conAsientos.conAsientos And conMovCont.Clase = 'PRO'
	INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
	Inner Join genAsiSegmentos ON genAsiSegmentos.Asiento_Id = comMovprov.comMovprov
	Inner Join genMovCuotas On genMovCuotas.Asiento_Id = comMovProv.comMovProv
	Inner JOIN comPagosHabilitados ON comMovProv.comMovProv = comPagosHabilitados.comMovProv
	--Inner JOIN genUsuarios  ON (genUsuarios.genUsuarios = comPagosHabilitados.Usuario_Id)
	WHERE comMovProv.Proveed_Id = dbo.FuncFKcomProveedores(@pProveed_Id) And comPagosHabilitados.tesMovimientos Is Null
	And conAsientos.Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id)




end

else
Begin

	SELECT dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
		genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
		genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoSTR,
		comMovProv.comMovProv,
		genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMoneda, conAsientos.Cambio as Cambio, genMovCuotas.CuotaNro,
		genMovCuotas.Importe, genMovCuotas.Saldo, Convert(Numeric(18,2),genMovCuotas.Saldo*conAsientos.Cambio) as SaldoOri,
		conAsientos.conAsientos, conCuentas.Cuenta_Id, IsNull(comPagosHabilitados.ImporteHabilitado, genCancMov.Importe) ImporteHabilitado,
		isnull((select max(tesRengMovi.Cambio) from tesRengMovi, conMovCont conMovCont1 WHERE
			tesRengMovi.TesMovimientos = genCancMov.Asiento_Id_Ap and 
			tesRengMovi.TesMovimientos = conMovCont1.conAsientos AND 
			tesRengMovi.conRenglon = conMovCont1.Renglon and 
			conMovCont.Cuenta_id = conMovCont1.Cuenta_id),1)  as CambioPago,
		IsNull(comPagosHabilitados.Importe1, 0) Importe1, IsNull(comPagosHabilitados.Importe2, 0) Importe2, 
		IsNull(comPagosHabilitados.Importe3, 0) Importe3, IsNull(comPagosHabilitados.FechaHabilitacion, conAsientos.Fecha) FechaHabilitacion,
		IsNull(comPagosHabilitados.Secuencia, 1) Secuencia, comMovProv.Fecha_CCP, 
			conAsientos.Usuario_Id
	From genAsiSegmentos 
	INNER JOIN comMovprov ON genAsiSegmentos.Asiento_Id = comMovprov.comMovprov
	INNER JOIN conAsientos ON conAsientos.conAsientos = comMovprov.comMovprov
	inner JOIN genMovCuotas ON genMovCuotas.Asiento_id = conAsientos.conAsientos
	INNER JOIN conMovCont ON conMovCont.conAsientos = conAsientos.conAsientos  AND
		conMovCont.Clase =	'PRO'
	INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
	INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
	INNER JOIN comMovTipos ON
	comMovTipos.Tipomov = comMovprov.Tipomov
	INNER JOIN genCancMov ON genCancMov.Asiento_Id_ap = conAsientos.conAsientos and 
		genCancMov.CuotaNro_ap = genMovCuotas.CuotaNro and
		genCancMov.Asiento_Id = @ptesMovimientos and 
		genCancMov.CuotaNro = 1
	Left Join comPagosHabilitados On comPagosHabilitados.tesMovimientos = conAsientos.conAsientos And
										comPagosHabilitados.comMovProv = genCancMov.Asiento_Id



end

-- AntProveedores
-- Anticipos a Proveedores

SELECT genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMoneda, tesRengMovi.Cambio,
	conMovCont.Importe, conMovCont.ImporteMonedaOriginal,
	conAsientos.conAsientos, 0 as TipoCtaProv, ' ' as DescripcionProveedoresTipoPasivo,
	conCuentas.Cuenta_id as Cuenta_Id, 
		conCuentas.Descripcion as DescripcionCuenta, ' ' as Usuario_id, 
		 conAsientos.conAsientos as comPagosAnticipos ,conAsientos.conAsientos,
			' ' DescripcionUsuario ,   conAsientos.conAsientos as comEmbarques
From tesRengMovi 
INNER JOIN conAsientos ON conAsientos.conAsientos = tesRengMovi.tesMovimientos 
INNER JOIN conMovCont ON conMovCont.conAsientos = tesRengMovi.tesMovimientos and 
	conMovCont.Renglon = tesRengMovi.conRenglon and 
	conMovCont.Clase = 'ANTPR'
INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
INNER JOIN genMonedas ON genMonedas.genMonedas = conCuentas.Moneda_Id
Where 
tesRengMovi.TesMovimientos =  @pTesMovimientos


-- TIPOS DE CAMBIO
Exec tesMovimientosCambio @ptesMovimientos

Exec genAtributosGeneralesIdentityDatos @ptesMovimientos, 'tesMovimientos'

Exec tesMoviGravadoDatos @ptesMovimientos

-- AJ OCT 2018
SELECT comMovProv.VieneDeFiscal as ReqCompPago 
From comMovProv where comMovProv.comMovProv = @ptesMovimientos


-- FM Grilla de PDF generados por retenciones a proveedores --
Select '' PDF,
tesIdentifica.Cartera_Id + dbo.Segmento(tesRetProvSegmento.Segmento_Id, tesRetProvSegmento.Segmento1C, tesRetProvSegmento.Segmento2C, tesRetProvSegmento.Segmento3C, 
tesRetProvSegmento.Segmento4C, tesRetProvSegmento.Segmento1N, tesRetProvSegmento.Segmento2N, tesRetProvSegmento.Segmento3N, tesRetProvSegmento.Segmento4N) NombreArchivo,
tesRengMoviRetProv.tesMovimientos, tesRengMoviRetProv.conRenglon
From tesRengMoviRetProv
Inner Join tesRengMovi On tesRengMovi.tesMovimientos = tesRengMoviRetProv.tesMovimientos And tesRengMovi.conRenglon = tesRengMoviRetProv.conRenglon
Inner Join tesIdRetProv On tesIdRetProv.Cartera_Id = tesRengMovi.Cartera_Id
Inner Join tesIdentifica On tesIdentifica.tesIdentifica = tesIdRetProv.Cartera_Id
Inner Join tesRetProvSegmento On tesRetProvSegmento.tesMovimientos = tesRengMovi.tesMovimientos And tesRetProvSegmento.conRenglon = tesRengMovi.conRenglon
Where tesRetProvSegmento.tesMovimientos = @ptesMovimientos
RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tespagoSueldos.sql*/
-- tesPagosSueldosDatos 1, 'TES',0,0,0,0,'E','0001',' ',' ','IMPLQ',2,0,0,0,'0001',' ',' ',' '

DROP PROCEDURE tesPagosSueldosDatos
GO
-- tesCobranzasDatos 1
CREATE PROCEDURE tesPagosSueldosDatos
(
	@Empresa_Id int, 
	@Segmento_Id VarChar(10),
	@Segmento1N Int,
	@Segmento2N Int,
	@Segmento3N Int,
	@Segmento4N Int,
	@Segmento1C VarChar(20),
	@Segmento2C VarChar(20),
	@Segmento3C VarChar(20),
	@Segmento4C VarChar(20), 
	@Grupo_Id Int,
	@SegmentoSue_Id VarChar(10),
	@SegmentoSue1N Int,
	@SegmentoSue2N Int,
	@SegmentoSue3N Int,
	@SegmentoSue4N Int,
	@SegmentoSue1C VarChar(20),
	@SegmentoSue2C VarChar(20),
	@SegmentoSue3C VarChar(20),
	@SegmentoSue4C VarChar(20)

)
AS
SET NOCOUNT ON 

Declare @ptesMovimientos as BigInt
SET @ptesMovimientos = (Select tesMovimientos.tesMovimientos from 
	tesMovimientos INNER JOIN genAsiSegmentos ON
	tesMovimientos.tesMovimientos = genAsiSegmentos.Asiento_Id
	INNER JOIN genSegmentos ON
	genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	WHERE
	genSegmentos.Segmento_Id = @Segmento_Id and 
	genAsiSegmentos.Empresa_Id = @Empresa_id and 
	genAsiSegmentos.Segmento1N = @Segmento1N and 
	genAsiSegmentos.Segmento2N = @Segmento2N and 
	genAsiSegmentos.Segmento3N = @Segmento3N and 
	genAsiSegmentos.Segmento4N = @Segmento4N and 
	genAsiSegmentos.Segmento1C = @Segmento1C and 
	genAsiSegmentos.Segmento2C = @Segmento2C and 
	genAsiSegmentos.Segmento3C = @Segmento3C and 
	genAsiSegmentos.Segmento4C = @Segmento4C )


EXECUTE tesMovimientosDatos @ptesMovimientos

Exec tesRengMoviDHDatos @ptesMovimientos, 1, NULL
Exec tesRengMoviDHDatos @ptesMovimientos, 2, NULL

Exec tesRengConciliacDatos @ptesMovimientos, NULL,1
Exec tesRengConciliacDatos @ptesMovimientos, NULL,2

-- TIPOS DE CAMBIO
Exec tesMovimientosCambio @ptesMovimientos

Exec genAtributosGeneralesIdentityDatos @ptesMovimientos, 'tesMovimientos'

IF (@ptesMovimientos IS NULL)
Begin

	SELECT genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
		genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
		genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, 
		RTRIM(Str(sueGrupos.Grupo_Id,6)) as Impuesto_Id, sueGrupos.Descripcion,
		suePagosHabi.Importe AS TotalaPagar, 
		sueLiquidacion.FechaInicial FechaDesde, sueLiquidacion.FechaFinal FechaHasta, 
		sueLiquidacion.FechaPago AS FechaPago, 
		conAsientos.conAsientos, sueGrupos.Grupo_Id, sueLiquidacion.Anio, sueLiquidacion.Mes, sueLiquidacion.Quincena, 
		sueLiquidacion.Decena, sueLiquidacion.Semana, sueLiquidacion.Vez
	FROM sueLiquidacion inner join conAsientos ON 
	sueLiquidacion.sueLiquidacion = conAsientos.conAsientos
	INNER JOIN genAsiSegmentos ON
		genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
	INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	INNER JOIN sueGrupos ON sueGrupos.sueGrupos = sueLiquidacion.Grupo_Id
	INNER JOIN suePagosHabi ON suePagosHabi.sueLiquidacion = sueLiquidacion.sueLiquidacion
	WHERE
		suePagosHabi.tesMovimientos is NULL AND 
		suePagosHabi.Importe > 0 AND 
		conAsientos.Anulado = 0 and 
		conAsientos.Posteado = 1 and 
		genSegmentos.Segmento_Id = @SegmentoSue_Id and  
		genAsiSegmentos.Segmento1C =@SegmentoSue1C AND
		genAsiSegmentos.Segmento2C = @SegmentoSue2C AND
		genAsiSegmentos.Segmento3C = @SegmentoSue3C AND 
		genAsiSegmentos.Segmento4C = @SegmentoSue4C AND
		genAsiSegmentos.Segmento1N = @SegmentoSue1N AND 
		genAsiSegmentos.Segmento2N = @SegmentoSue2N AND 
		genAsiSegmentos.Segmento3N = @SegmentoSue3N AND 
		genAsiSegmentos.Segmento4N= @SegmentoSue4N  AND
		genAsiSegmentos.Empresa_Id = @Empresa_Id
	UNION ALL -- POR EMPLEADO

	SELECT genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
		genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
		genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, 
		RTRIM(Str(sueGrupos.Grupo_Id,6)) as Impuesto_Id, sueGrupos.Descripcion,
		sum(suePagosHabiPorEmpleado.Importe) AS TotalaPagar, 
		sueLiquidacion.FechaInicial FechaDesde, sueLiquidacion.FechaFinal FechaHasta, 
		sueLiquidacion.FechaPago AS FechaPago, 
		conAsientos.conAsientos, sueGrupos.Grupo_Id, sueLiquidacion.Anio, sueLiquidacion.Mes, sueLiquidacion.Quincena, 
		sueLiquidacion.Decena, sueLiquidacion.Semana, sueLiquidacion.Vez
	FROM sueLiquidacion inner join conAsientos ON 
	sueLiquidacion.sueLiquidacion = conAsientos.conAsientos
	INNER JOIN genAsiSegmentos ON
		genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
	INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	INNER JOIN sueGrupos ON sueGrupos.sueGrupos = sueLiquidacion.Grupo_Id
	INNER JOIN suePagosHabiPorEmpleado ON suePagosHabiPorEmpleado.sueLiquidacion = sueLiquidacion.sueLiquidacion
	WHERE
		suePagosHabiPorEmpleado.tesMovimientos is NULL AND 
		suePagosHabiPorEmpleado.Importe > 0 AND 
		conAsientos.Anulado = 0 and 
		conAsientos.Posteado = 1 and 
		genSegmentos.Segmento_Id = @SegmentoSue_Id and  
		genAsiSegmentos.Segmento1C =@SegmentoSue1C AND
		genAsiSegmentos.Segmento2C = @SegmentoSue2C AND
		genAsiSegmentos.Segmento3C = @SegmentoSue3C AND 
		genAsiSegmentos.Segmento4C = @SegmentoSue4C AND
		genAsiSegmentos.Segmento1N = @SegmentoSue1N AND 
		genAsiSegmentos.Segmento2N = @SegmentoSue2N AND 
		genAsiSegmentos.Segmento3N = @SegmentoSue3N AND 
		genAsiSegmentos.Segmento4N= @SegmentoSue4N  AND
		genAsiSegmentos.Empresa_Id = @Empresa_Id
GROUP BY genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
		genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
		genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, 
		sueGrupos.Grupo_Id, sueGrupos.Descripcion,
		sueLiquidacion.FechaInicial , sueLiquidacion.FechaFinal , 
		sueLiquidacion.FechaPago , 
		conAsientos.conAsientos, sueGrupos.Grupo_Id, sueLiquidacion.Anio, sueLiquidacion.Mes, sueLiquidacion.Quincena, 
		sueLiquidacion.Decena, sueLiquidacion.Semana, sueLiquidacion.Vez

end

else
Begin

	SELECT genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
		genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
		genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, 
		' ' as Impuesto_Id, sueGrupos.Descripcion,
		suePagosHabi.Importe AS TotalaPagar, 
		sueLiquidacion.FechaInicial FechaDesde, sueLiquidacion.FechaFinal FechaHasta, 
		sueLiquidacion.FechaPago AS FechaPago, 
		conAsientos.conAsientos, sueGrupos.Grupo_Id, sueLiquidacion.Anio, sueLiquidacion.Mes, sueLiquidacion.Quincena, 
		sueLiquidacion.Decena, sueLiquidacion.Semana, sueLiquidacion.Vez
	FROM sueLiquidacion inner join conAsientos ON 
	sueLiquidacion.sueLiquidacion = conAsientos.conAsientos
	INNER JOIN suePagosHabi ON
	suePagosHabi.sueLiquidacion = sueLiquidacion.sueLiquidacion
	INNER JOIN genAsiSegmentos ON
		genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
	INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	INNER JOIN sueGrupos ON sueGrupos.sueGrupos = sueLiquidacion.Grupo_Id
	WHERE
		suePagosHabi.tesMovimientos = @ptesMovimientos
	UNION ALL -- POR EMPLEADO

	SELECT genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
		genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
		genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, 
		RTRIM(Str(sueGrupos.Grupo_Id,6)) as Impuesto_Id, sueGrupos.Descripcion,
		SUM(suePagosHabiPorEmpleado.Importe) AS TotalaPagar, 
		sueLiquidacion.FechaInicial FechaDesde, sueLiquidacion.FechaFinal FechaHasta, 
		sueLiquidacion.FechaPago AS FechaPago, 
		conAsientos.conAsientos, sueGrupos.Grupo_Id, sueLiquidacion.Anio, sueLiquidacion.Mes, sueLiquidacion.Quincena, 
		sueLiquidacion.Decena, sueLiquidacion.Semana, sueLiquidacion.Vez
	FROM sueLiquidacion inner join conAsientos ON 
	sueLiquidacion.sueLiquidacion = conAsientos.conAsientos
	INNER JOIN suePagosHabiPorEmpleado ON
	suePagosHabiPorEmpleado.sueLiquidacion = sueLiquidacion.sueLiquidacion
	INNER JOIN genAsiSegmentos ON
		genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
	INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	INNER JOIN sueGrupos ON sueGrupos.sueGrupos = sueLiquidacion.Grupo_Id
	WHERE
		suePagosHabiPorEmpleado.tesMovimientos = @ptesMovimientos
		
	GROUP BY genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
		genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
		genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, 
		sueGrupos.Grupo_Id , sueGrupos.Descripcion,
		sueLiquidacion.FechaInicial , sueLiquidacion.FechaFinal , 
		sueLiquidacion.FechaPago , 	conAsientos.conAsientos,
		sueGrupos.Grupo_Id, sueLiquidacion.Anio, sueLiquidacion.Mes, sueLiquidacion.Quincena, 
		sueLiquidacion.Decena, sueLiquidacion.Semana, sueLiquidacion.Vez

end
GO





Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesPartidasInCon.sql*/
drop procedure tesPartidasInConInsertar
go
create procedure tesPartidasInConInsertar
(
@pCartera_Id varchar(5),
@pFecha datetime,
@pComprobante int,
@pDebeHaber char(1),
@pImporte qMonedaD2,
@pEmpresa_Id int
)
as
insert into tesPartidasInCon (Cartera_Id, Fecha, Comprobante, Debe_Haber, Importe, Empresa_Id) values
(dbo.FuncFKtesIdentifica(@pCartera_Id), @pFecha, @pComprobante,convert(int,@pDebeHaber), @pImporte, @pEmpresa_Id)
go

drop procedure tesPartidasInConEliminar
go
create procedure tesPartidasInConEliminar
(
@pCartera_Id varchar(5),
@pFechaDesde Datetime,
@pFechaHasta DateTime,
@pComprobante int=null,
@pEmpresa_Id int
)
as
delete from tesPartidasInCon where Cartera_Id=dbo.FuncFKtesIdentifica(@pCartera_Id) and Fecha between @pFechaDesde and @pFechaHasta and 
Comprobante= ISNULL(@pComprobante,Comprobante) and @pEmpresa_Id=Empresa_Id
go

drop procedure tesPartidasInConDatos
go
create procedure tesPartidasInConDatos
(
@pCartera_Id varchar(5),
@pFechaDesde datetime,
@pFechaHasta datetime,
@pEmpresa_Id int
)
as
select @pCartera_Id as Cartera_Id, Descripcion as DescripcionCartera, @pFechaDesde as FechaDesde, @pFechaHasta as FechaHasta from tesIdentifica 
where tesIdentifica.Cartera_Id= @pCartera_Id
select Comprobante, Fecha, CONVERT(char(1), Debe_Haber) as Debe_Haber, Importe from tesPartidasInCon 
where Cartera_Id=dbo.FuncFKtesIdentifica(@pCartera_Id) and Fecha between @pFechaDesde and @pFechaHasta and Empresa_Id=@pEmpresa_Id

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesRengConcilEsp.sql*/
DROP PROCEDURE tesRengConcilEspInsertar
GO
CREATE PROCEDURE tesRengConcilEspInsertar
(
@pEmpresa_Id int,
@ptesIdentifica VarChar(5),
@pNumeroConc int,
@ptesMovimientos bigint,
@pconRenglon int, 
@pImporte QMonedaD2
)
AS
SET NOCOUNT ON 
	INSERT INTO tesRengConcilEsp
	(
		Empresa_Id,
		tesIdentifica,
		NumeroConc,
		tesMovimientos,
		conRenglon, 
		Importe 
	)
	VALUES 
	(
		@pEmpresa_Id,
		dbo.FuncFKtesIdentifica(@ptesIdentifica),
		@pNumeroConc,
		@ptesMovimientos,
		@pconRenglon, 
		@pImporte
	)

GO

DROP PROCEDURE tesRengConcilEspDatos
GO
CREATE PROCEDURE tesRengConcilEspDatos
(
@pEmpresa_Id int,
@ptesIdentifica VarChar(5),
@pNumeroConc int,
@ptesMovimientos bigint,
@pconRenglon int
)
AS
SET NOCOUNT ON 

SELECT tesRengConcilEsp.Empresa_Id,		
	tesIdentifica.Cartera_id, tesIdentifica.Descripcion as  DescripcionCartera,
	tesRengConcilEsp.NumeroConc, tesRengConcilEsp.tesMovimientos, tesRengConcilEsp.conRenglon, 
		tesRengConcilEsp.Importe
	
FROM tesRengConcilEsp 
INNER JOIN tesConciliacion  ON (tesConciliacion.Empresa_Id = tesRengConcilEsp.Empresa_Id) AND (tesConciliacion.tesIdentifica = tesRengConcilEsp.tesIdentifica) AND (tesConciliacion.NumeroConc = tesRengConcilEsp.NumeroConc)
INNER JOIN tesRengConciliac  ON (tesRengConciliac.tesMovimientos = tesRengConcilEsp.tesMovimientos) AND (tesRengConciliac.conRenglon = tesRengConcilEsp.conRenglon)
INNER JOIN tesIdentifica ON  tesIdentifica.tesIdentifica = tesRengConcilEsp.tesIdentifica
WHERE (tesRengConcilEsp.Empresa_Id = @pEmpresa_Id)
AND (tesIdentifica.Cartera_id = @ptesIdentifica)
AND (tesRengConcilEsp.NumeroConc = @pNumeroConc)
AND (tesRengConcilEsp.tesMovimientos = @ptesMovimientos)
AND (tesRengConcilEsp.conRenglon = @pconRenglon)
 
RETURN @@Error 

GO

DROP PROCEDURE tesRengConcilEspEliminar
GO
CREATE PROCEDURE tesRengConcilEspEliminar
(
@pEmpresa_Id int,
@ptesIdentifica VarChar(5),
@pNumeroConc int,
@ptesMovimientos bigint,
@pconRenglon int
)
AS
SET NOCOUNT ON 

DELETE FROM tesRengConcilEsp 
WHERE (Empresa_Id = @pEmpresa_Id)
AND (tesIdentifica = dbo.FuncFKtesIdentifica(@ptesIdentifica))
AND (NumeroConc = @pNumeroConc)
AND (tesMovimientos = @ptesMovimientos)
AND (conRenglon = @pconRenglon)
 
RETURN @@Error 

GO

DROP PROCEDURE tesRengConcilEspMovDatos
GO
CREATE PROCEDURE tesRengConcilEspMovDatos
(
@ptesMovimientos bigint
)
AS
SET NOCOUNT ON 

SELECT tesIdentifica.Cartera_Id, tesConciliacion.NumeroConc
FROM tesRengConcilEsp 
INNER JOIN tesConciliacion  ON (tesConciliacion.Empresa_Id = tesRengConcilEsp.Empresa_Id) AND (tesConciliacion.tesIdentifica = tesRengConcilEsp.tesIdentifica) AND (tesConciliacion.NumeroConc = tesRengConcilEsp.NumeroConc)
INNER JOIN tesRengConciliac  ON (tesRengConciliac.tesMovimientos = tesRengConcilEsp.tesMovimientos) AND (tesRengConciliac.conRenglon = tesRengConcilEsp.conRenglon)
INNER JOIN tesIdentifica ON  tesIdentifica.tesIdentifica = tesRengConcilEsp.tesIdentifica
Where
tesRengConcilEsp.tesMovimientos = @ptesMovimientos

 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesRengConciliac.sql*/
DROP PROCEDURE tesRengConciliacGuardar
GO
CREATE PROCEDURE tesRengConciliacGuardar
(
@ptesMovimientos bigint,
@pconRenglon int,
@pSaldo qMonedaD2
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesRengConciliac WHERE (tesMovimientos = @ptesMovimientos) AND (conRenglon = @pconRenglon)))
BEGIN 
	UPDATE tesRengConciliac
	SET		Saldo = @pSaldo
	WHERE (tesMovimientos = @ptesMovimientos) AND (conRenglon = @pconRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO tesRengConciliac
	(
		tesMovimientos,
		conRenglon,
		Saldo
	)
	VALUES 
	(
		@ptesMovimientos,
		@pconRenglon,
		@pSaldo
	)
END 

GO

DROP PROCEDURE tesRengConciliacDatos
GO
CREATE PROCEDURE tesRengConciliacDatos
(
@ptesMovimientos bigint,
@pconRenglon int= NULL, 
@pTipomov int= NULL
)
AS
SET NOCOUNT ON 

SELECT tesRengConciliac.tesMovimientos, tesRengConciliac.conRenglon, tesRengConciliac.Saldo
FROM tesRengConciliac 
INNER JOIN tesRengMovi  ON 
	tesRengMovi.tesMovimientos = tesRengConciliac.tesMovimientos AND 
	tesRengMovi.conRenglon = tesRengConciliac.conRenglon
INNER JOIN conMovCont on 
conMovCont.conAsientos = tesRengMovi.tesMovimientos  and 
conMovCont.Renglon = tesRengMovi.conRenglon
WHERE (tesRengConciliac.tesMovimientos = @ptesMovimientos)
AND (tesRengConciliac.conRenglon = ISNULL(@pconRenglon, tesRengConciliac.conRenglon))
AND (conMovCont.TipoMov = ISNULL(@pTipomov, conMovCont.TipoMov))
 
 RETURN @@Error 

GO

DROP PROCEDURE tesRengConciliacEliminar
GO
CREATE PROCEDURE tesRengConciliacEliminar
(
@ptesMovimientos bigint,
@pconRenglon int= NULL
)
AS
SET NOCOUNT ON 

DELETE FROM tesRengConciliac 
WHERE (tesRengConciliac.tesMovimientos = @ptesMovimientos)
AND (tesRengConciliac.conRenglon = ISNULL(@pconRenglon, tesRengConciliac.conRenglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesRengMovi.sql*/

-- tesRengMoviDatos 0,null
DROP PROCEDURE tesRengMoviGuardar
GO
CREATE PROCEDURE tesRengMoviGuardar
(
@ptesMovimientos bigint,
@pconRenglon int,
@pCartera_Id varchar(5), 
@pCambio QmonedaD8, 
@pTipomovCont Numeric(1,0)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesRengMovi WHERE (tesMovimientos = @ptesMovimientos) AND (conRenglon = @pconRenglon)))
BEGIN 
	UPDATE tesRengMovi
	SET		Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id)
	WHERE (tesMovimientos = @ptesMovimientos) AND (conRenglon = @pconRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO tesRengMovi
	(
		tesMovimientos,
		conRenglon,
		Cartera_Id, 
		Cambio, 
		TipomovCont
	)
	VALUES 
	(
		@ptesMovimientos,
		@pconRenglon,
		dbo.FuncFKtesIdentifica(@pCartera_Id),
		@pCambio, 
		@pTipomovCont
	)
END 

GO


DROP PROCEDURE tesRengMoviDatos
GO
CREATE PROCEDURE tesRengMoviDatos
(
@ptesMovimientos bigint,
@pconRenglon int=null, 
@pTipomov int=null
)
AS
SET NOCOUNT ON 

SELECT tesRengMovi.tesMovimientos,  conMovcont.TipoMov,  tesRengMovi.conRenglon,
	tesIdentifica.Cartera_Id, tesIdentifica.Descripcion as DescripcionIdentifica, 
	conMovCont.ImporteMonedaOriginal * case when tesRengMovi.TipomovCont  =conMovCont.Tipomov then 1 else -1 end as ImporteOrig, 
	conMovCont.Importe * case when tesRengMovi.TipomovCont  =conMovCont.Tipomov then 1 else -1 end as Importe, 
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuentas,
	conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1,
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, 
	tesRengMovi.TipomovCont  Tipomov, conMovCont.Clase, 
	tesTiposID.TipoCartera,tesRengMovi.Cambio
FROM tesRengMovi 
INNER JOIN tesMovimientos  ON (tesMovimientos.tesMovimientos = tesRengMovi.tesMovimientos)
INNER JOIN conMovCont  ON (conMovCont.conAsientos = tesRengMovi.tesMovimientos) AND (conMovCont.Renglon = tesRengMovi.conRenglon)
INNER JOIN tesIdentifica  ON (tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id)
INNER JOIN conCuentas ON  conCuentas.conCuentas = conMovCont.Cuenta_Id
LEFT JOIN conCentro1 ON  conCentro1.conCentro1 = conMovCont.Centro1_Id
LEFT JOIN conCentro2 ON  conCentro2.conCentro2 = conMovCont.Centro2_Id
INNER JOIN tesTiposID ON (tesTiposID.tesTiposID = tesIdentifica.TipoCartera)
WHERE tesRengMovi.tesMovimientos = @ptesMovimientos and 
	tesRengMovi.conRenglon = isnull(@pconRenglon, tesRengMovi.conRenglon) and 
	conMovCont.Tipomov = isnull(@pTipomov, conMovCont.Tipomov)
ORDER BY 2


 
RETURN @@Error 

GO

DROP PROCEDURE tesRengMoviEliminar
GO
CREATE PROCEDURE tesRengMoviEliminar
(
@ptesMovimientos bigint,
@pconRenglon int
)
AS
SET NOCOUNT ON 

DELETE FROM tesRengMovi 
WHERE (tesMovimientos = @ptesMovimientos)
AND (tesRengMovi.conRenglon = isnull(@pconRenglon, tesRengMovi.conRenglon))
 
RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesRengMovicomMovProv.sql*/
DROP PROCEDURE tesRengMovicomMovProvGuardar
GO
CREATE PROCEDURE tesRengMovicomMovProvGuardar
(
@ptesMovimientos bigint,
@pRenglon int,
@pcomMovProv bigint
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesRengMovicomMovProv WHERE (tesMovimientos = @ptesMovimientos) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE tesRengMovicomMovProv
	SET		comMovProv = @pcomMovProv
	WHERE (tesMovimientos = @ptesMovimientos) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO tesRengMovicomMovProv
	(
		tesMovimientos,
		Renglon,
		comMovProv
	)
	VALUES 
	(
		@ptesMovimientos,
		@pRenglon,
		@pcomMovProv
	)
END 

GO

DROP PROCEDURE tesRengMovicomMovProvDatos
GO
CREATE PROCEDURE tesRengMovicomMovProvDatos
(
@ptesMovimientos bigint,
@pRenglon int= NULL
)
AS
SET NOCOUNT ON 

SELECT tesRengMovicomMovProv.tesMovimientos, tesRengMovicomMovProv.Renglon,  tesRengMovicomMovProv.comMovProv
FROM tesRengMovicomMovProv 
WHERE (tesMovimientos = @ptesMovimientos)
AND (Renglon = ISNULL(@pRenglon,Renglon))
 
RETURN @@Error 

GO

DROP PROCEDURE tesRengMovicomMovProvDatosXcomMovProv
GO
CREATE PROCEDURE tesRengMovicomMovProvDatosXcomMovProv
(
@pcomMovProv bigint
)
AS
SET NOCOUNT ON 

SELECT tesRengMovicomMovProv.tesMovimientos, tesRengMovicomMovProv.Renglon,  tesRengMovicomMovProv.comMovProv
FROM tesRengMovicomMovProv 
WHERE (tesMovimientos = @pcomMovProv)
 
RETURN @@Error 

GO

DROP PROCEDURE tesRengMovicomMovProvEliminar
GO
CREATE PROCEDURE tesRengMovicomMovProvEliminar
(
@ptesMovimientos bigint,
@pRenglon int=null
)
AS
SET NOCOUNT ON 

DELETE FROM tesRengMovicomMovProv 
WHERE (tesMovimientos = @ptesMovimientos)
AND (Renglon = ISNULL(@pRenglon,Renglon))
 
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesRengMoviRetClie.sql*/
DROP PROCEDURE tesRengMoviRetClieGuardar
GO
CREATE PROCEDURE tesRengMoviRetClieGuardar
(
@ptesMovimientos bigint,
@pconRenglon int,
@pSucursalRet char(4),
@pComprobanteRet int,
@pBaseImponible qMonedaD2,
@pPorcentaje qPorcentaje
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesRengMoviRetClie WHERE (tesMovimientos = @ptesMovimientos) AND (conRenglon = @pconRenglon)))
BEGIN 
	UPDATE tesRengMoviRetClie
	SET SucursalRet = @pSucursalRet,
		ComprobanteRet = @pComprobanteRet,
		BaseImponible = @pBaseImponible,
		Porcentaje = @pPorcentaje
	WHERE (tesMovimientos = @ptesMovimientos) AND (conRenglon = @pconRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO tesRengMoviRetClie
	(
		tesMovimientos,
		conRenglon,
		SucursalRet,
		ComprobanteRet,
		BaseImponible,
		Porcentaje
	)
	VALUES 
	(
		@ptesMovimientos,
		@pconRenglon,
		@pSucursalRet,
		@pComprobanteRet,
		@pBaseImponible,
		@pPorcentaje
	)
END 

GO

DROP PROCEDURE tesRengMoviRetClieDatos
GO
CREATE PROCEDURE tesRengMoviRetClieDatos
(
@ptesMovimientos bigint,
@pconRenglon int
)
AS
SET NOCOUNT ON 

SELECT tesRengMoviRetClie.tesMovimientos, tesRengMoviRetClie.conRenglon, tesRengMoviRetClie.SucursalRet,
	tesRengMoviRetClie.ComprobanteRet, tesRengMoviRetClie.BaseImponible, tesRengMoviRetClie.Porcentaje
FROM tesRengMoviRetClie 
INNER JOIN tesRengMovi  ON (tesRengMovi.tesMovimientos = tesRengMoviRetClie.tesMovimientos) AND (tesRengMovi.conRenglon = tesRengMoviRetClie.conRenglon)
WHERE (tesRengMoviRetClie.tesMovimientos = @ptesMovimientos)
AND (tesRengMoviRetClie.conRenglon = @pconRenglon)
 
 RETURN @@Error 

GO

DROP PROCEDURE tesRengMoviRetClieEliminar
GO
CREATE PROCEDURE tesRengMoviRetClieEliminar
(
@ptesMovimientos bigint,
@pconRenglon int = Null
)
AS
SET NOCOUNT ON 

DELETE FROM tesRengMoviRetClie 
WHERE tesMovimientos = @ptesMovimientos
AND conRenglon = IsNull(@pconRenglon, conRenglon)
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesRengMoviRetProv.sql*/
DROP PROCEDURE tesRengMoviRetProvGuardar
GO
CREATE PROCEDURE tesRengMoviRetProvGuardar
(
@ptesMovimientos bigint,
@pconRenglon int,
@pPorcentaje qPorcentaje,
@pExencion qPorcentaje,
@pBaseImponible qMonedaD2,
@pAcum qMonedaD2,
@pTRet qMonedaD2,
@pAcumTot qMonedaD2,
@pcomMovProv bigint = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesRengMoviRetProv WHERE tesMovimientos = @ptesMovimientos AND conRenglon = @pconRenglon))
BEGIN 
	UPDATE tesRengMoviRetProv
	SET Porcentaje = @pPorcentaje,
		Exencion = @pExencion,
		BaseImponible = @pBaseImponible,
		Acum = @pAcum,
		TRet = @pTRet,
		AcumTot = @pAcumTot,
		comMovProv = @pcomMovProv
	WHERE tesMovimientos = @ptesMovimientos AND conRenglon = @pconRenglon
END 
ELSE 
BEGIN 
	INSERT INTO tesRengMoviRetProv
	(
		tesMovimientos,
		conRenglon,
		Porcentaje,
		Exencion,
		BaseImponible,
		Acum,
		TRet,
		AcumTot,
		comMovProv
	)
	VALUES 
	(
		@ptesMovimientos,
		@pconRenglon,
		@pPorcentaje,
		@pExencion,
		@pBaseImponible,
		@pAcum,
		@pTRet,
		@pAcumTot,
		@pcomMovProv
	)
END 

GO

DROP PROCEDURE tesRengMoviRetProvDatos
GO
CREATE PROCEDURE tesRengMoviRetProvDatos
(
@ptesMovimientos bigint,
@pconRenglon int
)
AS
SET NOCOUNT ON 

SELECT tesRengMoviRetProv.tesMovimientos, conAsientos.Fecha, tesRengMoviRetProv.conRenglon, tesRengMoviRetProv.Porcentaje,
	tesRengMoviRetProv.Exencion, tesRengMoviRetProv.BaseImponible, tesRengMoviRetProv.Acum, tesRengMoviRetProv.TRet,
	tesRengMoviRetProv.AcumTot, tesRengMoviRetProv.comMovProv, tesIdentifica.Cartera_Id, genSegmentosRet.Segmento_Id,
	tesRetProvSegmento.Segmento1N, tesRetProvSegmento.Segmento2N, tesRetProvSegmento.Segmento3N, tesRetProvSegmento.Segmento4N, 
tesRetProvSegmento.Segmento1C, tesRetProvSegmento.Segmento2C, tesRetProvSegmento.Segmento3C, tesRetProvSegmento.Segmento4C,
'' NombreArchivo, '' PDF
FROM tesRengMoviRetProv 
INNER JOIN tesRengMovi ON tesRengMovi.tesMovimientos = tesRengMoviRetProv.tesMovimientos AND tesRengMovi.conRenglon = tesRengMoviRetProv.conRenglon
LEFT JOIN comMovProv ON comMovProv.comMovProv = tesRengMoviRetProv.comMovProv
Inner Join tesRetProvSegmento On tesRetProvSegmento.tesMovimientos = tesRengMovi.tesMovimientos And
			tesRetProvSegmento.conRenglon = tesRengMovi.conRenglon
Inner Join tesIdentifica On tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id
Inner Join tesIdRetProv On tesIdRetProv.Cartera_Id = tesRengMovi.Cartera_Id
Inner Join genSegmentos genSegmentosRet On genSegmentosRet.genSegmentos = tesIdRetProv.Segmento_Id
Inner Join conAsientos On conAsientos.conAsientos = tesRengMovi.tesMovimientos
WHERE tesRengMoviRetProv.tesMovimientos = @ptesMovimientos
AND tesRengMoviRetProv.conRenglon = @pconRenglon
 
RETURN @@Error 

GO

DROP PROCEDURE tesRengMoviRetProvEliminar
GO
CREATE PROCEDURE tesRengMoviRetProvEliminar
(
@ptesMovimientos bigint,
@pconRenglon int 
)
AS
SET NOCOUNT ON 

DELETE FROM tesRengMoviRetProv 
WHERE (tesMovimientos = @ptesMovimientos)
AND (conRenglon = @pconRenglon)
 
 RETURN @@Error 

GO

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesRetProvSegmento.sql*/
DROP PROCEDURE tesRetProvSegmentoGuardar
GO
CREATE PROCEDURE tesRetProvSegmentoGuardar
(
@pEmpresa_Id int,
@pSegmento_Id varChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@ptesMovimientos bigint,
@pconRenglon int,
@pTieneAutomatico bit
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesRetProvSegmento 
		WHERE (Empresa_Id = @pEmpresa_Id) AND 
		(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
		(Segmento1N = @pSegmento1N) AND 
		(Segmento2N = @pSegmento2N) AND 
		(Segmento3N = @pSegmento3N) AND 
		(Segmento4N = @pSegmento4N) AND 
		(Segmento1C = @pSegmento1C) AND 
		(Segmento2C = @pSegmento2C) AND 
		(Segmento3C = @pSegmento3C) AND 
		(Segmento4C = @pSegmento4C)))
BEGIN 
	UPDATE tesRetProvSegmento
	SET	Empresa_Id = @pEmpresa_Id,
		tesMovimientos = @ptesMovimientos,
		conRenglon = @pconRenglon
	WHERE (Empresa_Id = @pEmpresa_Id) AND 
		(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
		(Segmento1N = @pSegmento1N) AND 
		(Segmento2N = @pSegmento2N) AND 
		(Segmento3N = @pSegmento3N) AND 
		(Segmento4N = @pSegmento4N) AND 
		(Segmento1C = @pSegmento1C) AND 
		(Segmento2C = @pSegmento2C) AND 
		(Segmento3C = @pSegmento3C) AND 
		(Segmento4C = @pSegmento4C)
END 
ELSE 
BEGIN

	If @pTieneAutomatico = 1
	Begin
		-- Busco si el siguiente si ya tiene movimientos --
		SET @pSegmento1N = (SELECT MAX(tesRetProvSegmento.Segmento1N)+1 AS Segmento1N 
				FROM tesRetProvSegmento 
					Where				
					tesRetProvSegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) AND 
					tesRetProvSegmento.Segmento2N = @pSegmento2N AND 
					tesRetProvSegmento.Segmento3N = @pSegmento3N AND 
					tesRetProvSegmento.Segmento4N = @pSegmento4N AND 
					tesRetProvSegmento.Segmento1C = @pSegmento1C AND 
					tesRetProvSegmento.Segmento2C = @pSegmento2C AND 
					tesRetProvSegmento.Segmento3C = @pSegmento3C AND 
					tesRetProvSegmento.Segmento4C = @pSegmento4C And
					tesRetProvSegmento.Empresa_Id = @pEmpresa_Id)
		
		If @pSegmento1N Is Null
			-- No tiene mov. entonces busco el primer n?mero en el contador --
			SET @pSegmento1N = (SELECT genContadorSegmento.PrimerNumero AS Segmento1N 
				FROM genContadorSegmento
				Where
				genContadorSegmento.Empresa_Id = @pEmpresa_id And
					genContadorSegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) AND 
					genContadorSegmento.Segmento2N = @pSegmento2N AND 
					genContadorSegmento.Segmento3N = @pSegmento3N AND 
					genContadorSegmento.Segmento4N = @pSegmento4N AND 
					genContadorSegmento.Segmento1C = @pSegmento1C AND 
					genContadorSegmento.Segmento2C = @pSegmento2C AND 
					genContadorSegmento.Segmento3C = @pSegmento3C AND 
					genContadorSegmento.Segmento4C = @pSegmento4C)

		If @pSegmento1N Is Null
			Set @pSegmento1N = 1
	End

	INSERT INTO tesRetProvSegmento
	(
		Empresa_Id,
		Segmento_Id,
		Segmento1N,
		Segmento2N,
		Segmento3N,
		Segmento4N,
		Segmento1C,
		Segmento2C,
		Segmento3C,
		Segmento4C,
		tesMovimientos,
		conRenglon
	)
	VALUES 
	(
		@pEmpresa_Id,
		dbo.FuncFKgenSegmentos(@pSegmento_Id),
		@pSegmento1N,
		@pSegmento2N,
		@pSegmento3N,
		@pSegmento4N,
		@pSegmento1C,
		@pSegmento2C,
		@pSegmento3C,
		@pSegmento4C,
		@ptesMovimientos,
		@pconRenglon
	)
END 
SELECT @pSegmento1N as RetVal
GO

DROP PROCEDURE tesRetProvSegmentoDatos
GO
CREATE PROCEDURE tesRetProvSegmentoDatos
(
@pEmpresa_Id int,
@pSegmento_Id varChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20)
)
AS
SET NOCOUNT ON 

SELECT tesRetProvSegmento.Empresa_Id, genSegmentos.Segmento_Id, genSegmentos.Descripcion as DescripcionSegmentos, tesRetProvSegmento.Segmento1N,
	tesRetProvSegmento.Segmento2N, tesRetProvSegmento.Segmento3N, tesRetProvSegmento.Segmento4N, tesRetProvSegmento.Segmento1C,
	tesRetProvSegmento.Segmento2C, tesRetProvSegmento.Segmento3C, tesRetProvSegmento.Segmento4C, tesRetProvSegmento.tesMovimientos,
	tesRetProvSegmento.conRenglon, genSegmentos.TieneColumnaAutomatica
FROM tesRetProvSegmento 
INNER JOIN genSegmentos ON (genSegmentos.genSegmentos = tesRetProvSegmento.Segmento_Id)
WHERE (tesRetProvSegmento.Empresa_Id = @pEmpresa_Id)
AND (tesRetProvSegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id))
AND (Segmento1N = @pSegmento1N)
AND (Segmento2N = @pSegmento2N)
AND (Segmento3N = @pSegmento3N)
AND (Segmento4N = @pSegmento4N)
AND (Segmento1C = @pSegmento1C)
AND (Segmento2C = @pSegmento2C)
AND (Segmento3C = @pSegmento3C)
AND (Segmento4C = @pSegmento4C)
 
 RETURN @@Error 

GO

DROP PROCEDURE tesRetProvSegmentoEliminar
GO
CREATE PROCEDURE tesRetProvSegmentoEliminar
(
@pEmpresa_Id int,
@pSegmento_Id varchar(10),
@pSegmento1N int = NULL,
@pSegmento2N int = NULL,
@pSegmento3N int = NULL,
@pSegmento4N int = NULL,
@pSegmento1C varchar(20) = NULL,
@pSegmento2C varchar(20) = NULL,
@pSegmento3C varchar(20) = NULL,
@pSegmento4C varchar(20) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM tesRetProvSegmento 
WHERE (Empresa_Id = dbo.FuncFKgenEmpresas(@pEmpresa_Id))
AND (Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id))
AND (Segmento1N = ISNULL(@pSegmento1N, Segmento1N))
AND (Segmento2N = ISNULL(@pSegmento2N, Segmento2N))
AND (Segmento3N = ISNULL(@pSegmento3N, Segmento3N))
AND (Segmento4N = ISNULL(@pSegmento4N, Segmento4N))
AND (Segmento1C = ISNULL(@pSegmento1C, Segmento1C))
AND (Segmento2C = ISNULL(@pSegmento2C, Segmento2C))
AND (Segmento3C = ISNULL(@pSegmento3C, Segmento3C))
AND (Segmento4C = ISNULL(@pSegmento4C, Segmento4C))
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesRetProvxOP.sql*/
Drop procedure tesRetProvxOPDatos
Go

Create procedure tesRetProvxOPDatos
(
@pEmpresa_Id Int,
@pSegmento1N_OP int,
@pSegmento2N_OP int,
@pSegmento3N_OP int,
@pSegmento4N_OP int,
@pSegmento1C_OP varchar(20),
@pSegmento2C_OP varchar(20),
@pSegmento3C_OP varchar(20),
@pSegmento4C_OP varchar(20)
)
As

Select @pSegmento1N_OP Segmento1N_OP, @pSegmento2N_OP Segmento2N_OP, @pSegmento3N_OP Segmento3N_OP, @pSegmento4N_OP Segmento4N_OP,
@pSegmento1C_OP Segmento1C_OP, @pSegmento2C_OP Segmento2C_OP, @pSegmento3C_OP Segmento3C_OP, @pSegmento4C_OP Segmento4C_OP


Select tesMovimientos.tesMovimientos, tesRengMovi.conRenglon, tesIdentifica.Cartera_Id, genSegmentosRet.Segmento_Id,
tesRetProvSegmento.Segmento1N, tesRetProvSegmento.Segmento2N, tesRetProvSegmento.Segmento3N, tesRetProvSegmento.Segmento4N, 
tesRetProvSegmento.Segmento1C, tesRetProvSegmento.Segmento2C, tesRetProvSegmento.Segmento3C, tesRetProvSegmento.Segmento4C,
dbo.Segmento(tesIdRetProv.Segmento_Id, tesRetProvSegmento.Segmento1C, tesRetProvSegmento.Segmento2C, tesRetProvSegmento.Segmento3C, tesRetProvSegmento.Segmento4C,
tesRetProvSegmento.Segmento1N, tesRetProvSegmento.Segmento2N, tesRetProvSegmento.Segmento3N, tesRetProvSegmento.Segmento4N) Segmento,
genReportes.Reporte_Id
From conAsientos
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
Inner Join tesMovimientos On tesMovimientos.tesMovimientos = conAsientos.conAsientos
Inner Join tesRengMovi On tesRengMovi.tesMovimientos = tesMovimientos.tesMovimientos
Inner Join tesRengMoviRetProv On tesRengMoviRetProv.tesMovimientos = tesRengMovi.tesMovimientos And
			tesRengMoviRetProv.conRenglon = tesRengMovi.conRenglon
Inner Join conMovCont On conMovCont.conAsientos = tesRengMovi.tesMovimientos And
			conMovCont.Renglon = tesRengMovi.conRenglon
Inner Join tesIdRetProv On tesIdRetProv.Cartera_Id = tesRengMovi.Cartera_Id
Inner Join genSegmentos genSegmentosRet On genSegmentosRet.genSegmentos = tesIdRetProv.Segmento_Id
Inner Join tesIdentifica On tesIdentifica.tesIdentifica = tesRengMovi.Cartera_Id
Inner Join tesRetProvSegmento On tesRetProvSegmento.tesMovimientos = tesRengMovi.tesMovimientos And
			tesRetProvSegmento.conRenglon = tesRengMovi.conRenglon
Left Join genReportes On genReportes.genReportes = tesIdRetProv.Reporte_Id
Where conAsientos.Empresa_Id = @pEmpresa_Id And conAsientos.Anulado = 0 And conAsientos.Posteado = 1 And
genAsiSegmentos.Segmento1N = @pSegmento1N_OP And genAsiSegmentos.Segmento2N = @pSegmento2N_OP And genAsiSegmentos.Segmento3N = @pSegmento3N_OP And
genAsiSegmentos.Segmento4N = @pSegmento4N_OP And genAsiSegmentos.Segmento1C = @pSegmento1C_OP And genAsiSegmentos.Segmento2C = @pSegmento2C_OP And
genAsiSegmentos.Segmento3C = @pSegmento3C_OP And genAsiSegmentos.Segmento4C = @pSegmento4C_OP
Go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesReversionOP.sql*/
--exec tesReversionOPDatos 1,'TES','E','0001',' ',' ',1,0,0,0
DROP Procedure tesReversionOPDatos
GO
Create Procedure tesReversionOPDatos
(

@Empresa_Id INT, 
@Segmento_Id Char(5),
@Segmento1C Char(25),
@Segmento2C Char(25),
@Segmento3C Char(25),
@Segmento4C Char(25),
@Segmento1N int,
@Segmento2N int,
@Segmento3N int,
@Segmento4N int

)
AS
SET NOCOUNT ON 
DECLARE @ptesMovimientos bigint

SELECT @pTesMovimientos = Asiento_Id FROM genAsiSegmentos 
	WHERE
		genAsiSegmentos.Empresa_Id = @Empresa_Id and 
		genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@Segmento_Id) AND
		genAsiSegmentos.Segmento1C = @Segmento1C AND 
		genAsiSegmentos.Segmento2C = @Segmento2C AND 
		genAsiSegmentos.Segmento3C = @Segmento3C AND 
		genAsiSegmentos.Segmento4C = @Segmento4C AND 
		genAsiSegmentos.Segmento1N = @Segmento1N AND 
		genAsiSegmentos.Segmento2N = @Segmento2N AND 
		genAsiSegmentos.Segmento3N = @Segmento3N AND 
		genAsiSegmentos.Segmento4N = @Segmento4N

-- Principal
EXECUTE tesMovimientosDatos @ptesMovimientos

-- Debe
Exec tesRengMoviDHDatos @ptesMovimientos, 1, NULL
-- Haber
Exec tesRengMoviDHDatos @ptesMovimientos, 2, NULL

-- ConciliacDebe
Exec tesRengConciliacDatos @ptesMovimientos, NULL,1
-- ConciliacHaber
Exec tesRengConciliacDatos @ptesMovimientos, NULL,2

SELECT dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
		genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
		genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoSTR,
		genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMoneda, conAsientos.Cambio as Cambio, genMovCuotas.CuotaNro,
		genMovCuotas.Importe, genMovCuotas.Saldo, Convert(Numeric(18,2),genMovCuotas.Saldo*conAsientos.Cambio) as SaldoOri,
		conAsientos.conAsientos, conCuentas.Cuenta_Id, IsNull(comPagosHabilitados.ImporteHabilitado, genCancMov.Importe) ImporteHabilitado,
		isnull((select max(tesRengMovi.Cambio) from tesRengMovi, conMovCont conMovCont1 WHERE
			tesRengMovi.TesMovimientos = genCancMov.Asiento_Id_Ap and 
			tesRengMovi.TesMovimientos = conMovCont1.conAsientos AND 
			tesRengMovi.conRenglon = conMovCont1.Renglon and 
			conMovCont.Cuenta_id = conMovCont1.Cuenta_id),1)  as CambioPago,
		IsNull(comPagosHabilitados.Importe1, 0) Importe1, IsNull(comPagosHabilitados.Importe2, 0) Importe2, 
		IsNull(comPagosHabilitados.Importe3, 0) Importe3, IsNull(comPagosHabilitados.FechaHabilitacion, conAsientos.Fecha) FechaHabilitacion,
		IsNull(comPagosHabilitados.Secuencia, 1) Secuencia, comMovProv.Fecha_CCP
	From genAsiSegmentos 
	INNER JOIN comMovprov ON genAsiSegmentos.Asiento_Id = comMovprov.comMovprov
	INNER JOIN conAsientos ON conAsientos.conAsientos = comMovprov.comMovprov
	inner JOIN genMovCuotas ON genMovCuotas.Asiento_id = conAsientos.conAsientos
	INNER JOIN conMovCont ON conMovCont.conAsientos = conAsientos.conAsientos  AND
		conMovCont.Clase =	'PRO'
	INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
	INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
	INNER JOIN comMovTipos ON
	comMovTipos.Tipomov = comMovprov.Tipomov
	INNER JOIN genCancMov ON genCancMov.Asiento_Id = conAsientos.conAsientos and 
		genCancMov.CuotaNro = genMovCuotas.CuotaNro 
	INNER JOIN tesMoviReversa ON 
			tesMoviReversa.tesMoviReversa =genCancMov.Asiento_Id_Ap  AND 
			genCancMov.CuotaNro_ap = 1
	Left Join comPagosHabilitados On comPagosHabilitados.tesMovimientos = conAsientos.conAsientos And
										comPagosHabilitados.comMovProv = genCancMov.Asiento_Id
Where
	tesMoviReversa.tesMovimientos = @ptesMovimientos 



-- AntProveedores
-- Anticipos a Proveedores

SELECT genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMoneda, tesRengMovi.Cambio,
	conMovCont.Importe, conMovCont.ImporteMonedaOriginal,
	conAsientos.conAsientos, conCuentas.Cuenta_id as Cuenta_Id, 
		conCuentas.Descripcion as DescripcionCuenta, conAsientos.conAsientos as comPagosAnticipos ,
			conAsientos.conAsientos as comEmbarques
From tesRengMovi 
INNER JOIN conAsientos ON conAsientos.conAsientos = tesRengMovi.tesMovimientos 
INNER JOIN conMovCont ON conMovCont.conAsientos = tesRengMovi.tesMovimientos and 
	conMovCont.Renglon = tesRengMovi.conRenglon and 
	conMovCont.Clase = 'ANTPR'
INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
INNER JOIN genMonedas ON genMonedas.genMonedas = conCuentas.Moneda_Id
INNER JOIN tesMoviReversa ON
 tesMoviReversa.tesMoviReversa =	tesRengMovi.TesMovimientos
Where 
	tesMoviReversa.tesMovimientos	=  @pTesMovimientos	

-- Reversa
SELECT genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,
genAsiSegmentos.Segmento4N,genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C,genAsiSegmentos.Segmento4C,
tesMovimientos.tesMovimientos, conAsientos.Fecha
FROM tesMovimientos  inner join tesMoviReversa on
tesMovimientos.tesMovimientos = tesMoviReversa.tesMoviReversa
INNER JOIN conAsientos  ON (conAsientos.conAsientos = tesMovimientos.tesMovimientos)
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
WHERE 
	tesMoviReversa.tesMovimientos = @ptesMovimientos

-- TiposCambio
-- TIPOS DE CAMBIO
Exec tesMovimientosCambio @ptesMovimientos


-- genAtributosGenerales
Exec genAtributosGeneralesIdentityDatos @ptesMovimientos, 'tesMovimientos'


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesSolicitantes.sql*/
DROP PROCEDURE tesSolicitantesGuardar
GO
CREATE PROCEDURE tesSolicitantesGuardar
(
@pgenEntidades bigint,
@pSolicitante_Id varchar(5),
@pSolicitante_Id_Nueva varchar(5),
@pEmpresa_Id int = NULL,
@pNombre varchar(120),
@pInactivo bit,
@pPosteado bit,
@pBanco_Id varchar(3) = NULL,
@pCuenta varchar(18) = NULL,
@pUsuario_Id int,
@pFechaCarga datetime
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM tesSolicitantes WHERE (genEntidades = @pgenEntidades)))
BEGIN 
	UPDATE tesSolicitantes
	SET		Solicitante_Id = @pSolicitante_Id_Nueva,
		Empresa_Id = @pEmpresa_Id,
		Nombre = @pNombre,
		Inactivo = @pInactivo,
		Posteado = @pPosteado,
		Banco_Id = dbo.FuncFKtesBancos(@pBanco_Id),
		Cuenta = @pCuenta,
		Usuario_Id = @pUsuario_Id,
		FechaCarga = @pFechaCarga
	WHERE (genEntidades = @pgenEntidades)
END 
ELSE 
BEGIN 
	INSERT INTO tesSolicitantes
	(
		genEntidades,
		Solicitante_Id,
		Empresa_Id,
		Nombre,
		Inactivo,
		Posteado,
		Banco_Id,
		Cuenta,
		Usuario_Id,
		FechaCarga
	)
	VALUES 
	(
		@pgenEntidades,
		@pSolicitante_Id,
		@pEmpresa_Id,
		@pNombre,
		@pInactivo,
		@pPosteado,
		dbo.FuncFKtesBancos(@pBanco_Id),
		@pCuenta,
		@pUsuario_Id,
		@pFechaCarga
	)
	
END 

GO

DROP PROCEDURE tesSolicitantesDatos
GO
CREATE PROCEDURE tesSolicitantesDatos
(
@pSolicitante_Id VarChar(5)
)
AS
SET NOCOUNT ON 

SELECT genEntidades.Cuit, genEntidades.IdFiscal, genEntidades.TipoDoc, 
	tesSolicitantes.Solicitante_Id, tesSolicitantes.Solicitante_Id Solicitante_Id_Nueva, 
	tesSolicitantes.Empresa_Id, Cast( Case When tesSolicitantes.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	tesSolicitantes.Nombre, tesSolicitantes.Inactivo, tesSolicitantes.Posteado, tesBancos.Banco_Id,
	tesBancos.Descripcion as DescripcionBancos, tesSolicitantes.Cuenta, genUsuarios.Usuario_Id, 
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
	tesSolicitantes.FechaCarga, genEntidades.genEntidades
FROM tesSolicitantes 
INNER JOIN genEntidades  ON (genEntidades.genEntidades = tesSolicitantes.genEntidades)
LEFT JOIN tesBancos  ON (tesBancos.tesBancos = tesSolicitantes.Banco_Id)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = tesSolicitantes.Usuario_Id)
WHERE (tesSolicitantes.Solicitante_Id = @pSolicitante_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE tesSolicitantesEliminar
GO
CREATE PROCEDURE tesSolicitantesEliminar
(
@pSolicitante_Id varchar(25)
)
AS
SET NOCOUNT ON 

DELETE FROM tesSolicitantes 
WHERE (Solicitante_Id = @pSolicitante_Id)
 
RETURN @@Error 

GO


DROP FUNCTION FuncFKtesSolicitantes
GO

CREATE FUNCTION FuncFKtesSolicitantes
(
@pSolicitante_Id varchar (15)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = genEntidades FROM tesSolicitantes WHERE 
	Solicitante_Id = @pSolicitante_Id
  RETURN @pIdentity
END


GO


DROP PROCEDURE tesSolicitantesDatosId
GO
CREATE PROCEDURE tesSolicitantesDatosId
(
	@ptesSolicitante bigint
)
AS
SET NOCOUNT ON 

SELECT genEntidades.Cuit, genEntidades.IdFiscal, genEntidades.TipoDoc, 
	tesSolicitantes.Solicitante_Id, tesSolicitantes.Solicitante_Id Solicitante_Id_Nueva, 
	tesSolicitantes.Empresa_Id, Cast( Case When tesSolicitantes.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	tesSolicitantes.Nombre, tesSolicitantes.Inactivo, tesSolicitantes.Posteado, tesBancos.Banco_Id,
	tesBancos.Descripcion as DescripcionBancos, tesSolicitantes.Cuenta, genUsuarios.Usuario_Id, 
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
	tesSolicitantes.FechaCarga, genEntidades.genEntidades
FROM tesSolicitantes 
INNER JOIN genEntidades  ON (genEntidades.genEntidades = tesSolicitantes.genEntidades)
LEFT JOIN tesBancos  ON (tesBancos.tesBancos = tesSolicitantes.Banco_Id)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = tesSolicitantes.Usuario_Id)
WHERE (tesSolicitantes.genEntidades = @ptesSolicitante)
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesSolicitud.sql*/
DROP PROCEDURE tesSolicitudGuardar
GO
CREATE PROCEDURE tesSolicitudGuardar
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pSolicitante_Id VarChar(5),
@pCausa varchar(max) = NULL,
@pFecha datetime,
@pMonto qMonedaD2,
@pEstado char(1),
@pUsuarioAutorizo varchar(25) = NULL,
@pFechaAutorizo datetime = NULL,
@pUsuario_Id int,
@pFechaCarga datetime, 
@pCartera_Id VarChar(5)
)
AS
SET NOCOUNT ON 
DECLARE @ptesSolicitud bigint

SET @ptesSolicitud = (SELECT tesSolicitud
	FROM tesSolSegmentos WHERE 
	(Empresa_Id = @pEmpresa_Id) AND 
	(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
	(Segmento1N = @pSegmento1N) AND 
	(Segmento2N = @pSegmento2N) AND 
	(Segmento3N = @pSegmento3N) AND 
	(Segmento4N = @pSegmento4N) AND 
	(Segmento1C = @pSegmento1C) AND 
	(Segmento2C = @pSegmento2C) AND 
	(Segmento3C = @pSegmento3C) AND 
	(Segmento4C = @pSegmento4C))

IF (@ptesSolicitud is not null)


BEGIN 
	UPDATE tesSolicitud
	SET	
		Causa = @pCausa,
		Fecha = @pFecha,
		Monto = @pMonto,
		Estado = @pEstado,
		UsuarioAutorizo = dbo.FuncFKgenUsuarios(@pUsuarioAutorizo),
		FechaAutorizo = @pFechaAutorizo,
		Usuario_Id = @pUsuario_Id,
		FechaCarga = @pFechaCarga, 
		Solicitante_Id = dbo.FuncFKtesSolicitantes(@pSolicitante_Id), 
		Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id)
	WHERE 
		tesSolicitud = @ptesSolicitud
END 
ELSE 
BEGIN 
	INSERT INTO tesSolicitud
	(
		Solicitante_Id,
		Causa,
		Fecha,
		Monto,
		Estado,
		UsuarioAutorizo,
		FechaAutorizo,
		Usuario_Id,
		FechaCarga, 
		Cartera_Id
	)
	VALUES 
	(
		dbo.FuncFKtesSolicitantes(@pSolicitante_Id),
		@pCausa,
		@pFecha,
		@pMonto,
		@pEstado,
		dbo.FuncFKgenUsuarios(@pUsuarioAutorizo),
		@pFechaAutorizo,
		@pUsuario_Id,
		@pFechaCarga, 
		dbo.FuncFKtesIdentifica(@pCartera_Id)
	)
	SET @ptesSolicitud =  Cast(SCOPE_IDENTITY() as bigint) 
END 
Select @ptesSolicitud as RetVal 

GO

DROP PROCEDURE tesSolicitudDatos
GO
CREATE PROCEDURE tesSolicitudDatos
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20)
)

AS
SET NOCOUNT ON 

SELECT tesSolicitud.tesSolicitud, 
	genSegmentos.Segmento_Id, tesSolSegmentos.Segmento1C, tesSolSegmentos.Segmento2C, 
	tesSolSegmentos.Segmento3C, tesSolSegmentos.Segmento4C, 
	tesSolSegmentos.Segmento1N, tesSolSegmentos.Segmento2N, tesSolSegmentos.Segmento3N, 
	tesSolSegmentos.Segmento4N,
	tesSolicitantes.Solicitante_Id, tesSolicitantes.Nombre as DescripcionSolicitantes, tesSolicitud.Causa,
	tesSolicitud.Fecha, tesSolicitud.Monto, tesSolicitud.Estado, genUsuarios.Usuario_Id as UsuarioAutorizo,
	genUsuarios.Apellido_y_Nombres as DescripcionUsuarioAutorizo, tesSolicitud.FechaAutorizo, 
	genUsuarios2.Usuario_Id, genUsuarios2.Apellido_y_Nombres as DescripcionUsuario,
	tesSolicitud.FechaCarga, tesidentifica.Cartera_id, tesIdentifica.Descripcion as DescripcionCartera, 
	ISNULL((SELECT sum(conMovCont.importe*(-2*conMovCont.Tipomov+3)) from conMovcont inner join tesSolRendicion on
		conMovcont.conAsientos = tesSolRendicion.tesMovimientos and 
		tesSolRendicion.tesSolicitud = tesSolicitud.tesSolicitud 
		INNER JOIN tesRengMovi ON
		tesRengMovi.tesMovimientos = conMovCont.conAsientos and 
		tesRengMovi.conRenglon = conMovCont.Renglon and 
		tesRengMovi.TipomovCont = 1 
		INNER JOIN conAsientos ON
		conAsientos.conAsientos = conMovCont.conAsientos and
		conAsientos.Posteado = 1 AND
		conAsientos.Anulado = 0 ),0) as Rendido
	
FROM tesSolicitud 
INNER JOIN tesSolicitantes  ON (tesSolicitantes.genEntidades = tesSolicitud.Solicitante_Id)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = tesSolicitud.UsuarioAutorizo)
INNER JOIN genUsuarios genUsuarios2 ON (genUsuarios2.genUsuarios = tesSolicitud.Usuario_Id)
INNER JOIN tesSolSegmentos ON tesSolSegmentos.tesSolicitud = tesSolicitud.tesSolicitud
INNER JOIN genSegmentos ON  genSegmentos.genSegmentos = tesSolSegmentos.Segmento_Id
INNER JOIN tesIdentifica ON  tesIdentifica.tesIdentifica = tesSolicitud.Cartera_Id
WHERE  
	genSegmentos.Segmento_Id = @pSegmento_Id and 
	tesSolSegmentos.Segmento1C = @pSegmento1C and 
	tesSolSegmentos.Segmento2C = @pSegmento2C and 
	tesSolSegmentos.Segmento3C = @pSegmento3C and  
	tesSolSegmentos.Segmento4C = @pSegmento4C and
	tesSolSegmentos.Segmento1N = @pSegmento1N and 
	tesSolSegmentos.Segmento2N = @pSegmento2N and 
	tesSolSegmentos.Segmento3N = @pSegmento3N and
	tesSolSegmentos.Segmento4N = @pSegmento4N and 
	tesSolSegmentos.Empresa_Id = @pEmpresa_Id

 
 RETURN @@Error 

GO

DROP PROCEDURE tesSolicitudEliminar
GO
CREATE PROCEDURE tesSolicitudEliminar
(
	@ptesSolicitud bigint
)
AS
SET NOCOUNT ON 

DELETE FROM tesSolicitud 
WHERE   tesSolicitud = @ptesSolicitud
RETURN @@Error 

GO
-- tesSolicitudParaAutorizar 1
DROP PROCEDURE tesSolicitudParaAutorizar
GO
CREATE PROCEDURE tesSolicitudParaAutorizar
(
	@pEmpresa_Id INT
)

AS

SELECT @pEmpresa_Id as Empresa

SELECT tesSolicitud.Estado, tesSolicitud.tesSolicitud, 
	dbo.Segmento(tesSolSegmentos.Segmento_Id, tesSolSegmentos.Segmento1C, tesSolSegmentos.Segmento2C, 
	tesSolSegmentos.Segmento3C, tesSolSegmentos.Segmento4C, 
	tesSolSegmentos.Segmento1N, tesSolSegmentos.Segmento2N, tesSolSegmentos.Segmento3N, 
	tesSolSegmentos.Segmento4N) as SegmentoSTR,
	tesSolicitantes.Solicitante_Id, tesSolicitantes.Nombre as DescripcionSolicitantes, 
	tesSolicitud.Causa,	tesSolicitud.Fecha, tesSolicitud.Monto, 
	genUsuarios2.Usuario_Id, genUsuarios2.Apellido_y_Nombres as DescripcionUsuario,
	tesSolicitud.FechaCarga
FROM tesSolicitud 
INNER JOIN tesSolicitantes  ON (tesSolicitantes.genEntidades = tesSolicitud.Solicitante_Id)
INNER JOIN genUsuarios genUsuarios2 ON (genUsuarios2.genUsuarios = tesSolicitud.Usuario_Id)
INNER JOIN tesSolSegmentos ON tesSolSegmentos.tesSolicitud = tesSolicitud.tesSolicitud
INNER JOIN genSegmentos ON  genSegmentos.genSegmentos = tesSolSegmentos.Segmento_Id
Where
	tesSolicitud.Estado = 'P' AND 
	tesSolSegmentos.Empresa_Id = @pEmpresa_Id
GO

DROP PROCEDURE tesSolicitudCambiarEstado
GO
CREATE PROCEDURE tesSolicitudCambiarEstado(
	@ptesSolicitud bigint, 
	@pUsuario int, 
	@pEstado Char(1)
	)
	AS

	Update tesSolicitud SET Estado = @pEstado, UsuarioAutorizo = @pUsuario, 
		FechaAutorizo = dbo.FechaActual() 
		Where
			tesSolicitud = @ptesSolicitud
GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesSolicitudPago.sql*/
DROP PROCEDURE tesSolicitudPago
GO
-- tesCobranzasDatos 1
CREATE PROCEDURE tesSolicitudPago
(
	@Empresa_Id int, 
	@Segmento_Id VarChar(10),
	@Segmento1N Int,
	@Segmento2N Int,
	@Segmento3N Int,
	@Segmento4N Int,
	@Segmento1C VarChar(20),
	@Segmento2C VarChar(20),
	@Segmento3C VarChar(20),
	@Segmento4C VarChar(20)
)
AS
SET NOCOUNT ON 

Declare @ptesMovimientos as BigInt
SET @ptesMovimientos = (Select tesMovimientos.tesMovimientos from 
	tesMovimientos INNER JOIN genAsiSegmentos ON
	tesMovimientos.tesMovimientos = genAsiSegmentos.Asiento_Id
	INNER JOIN genSegmentos ON
	genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	WHERE
	genSegmentos.Segmento_Id = @Segmento_Id and 
	genAsiSegmentos.Empresa_Id = @Empresa_id and 
	genAsiSegmentos.Segmento1N = @Segmento1N and 
	genAsiSegmentos.Segmento2N = @Segmento2N and 
	genAsiSegmentos.Segmento3N = @Segmento3N and 
	genAsiSegmentos.Segmento4N = @Segmento4N and 
	genAsiSegmentos.Segmento1C = @Segmento1C and 
	genAsiSegmentos.Segmento2C = @Segmento2C and 
	genAsiSegmentos.Segmento3C = @Segmento3C and 
	genAsiSegmentos.Segmento4C = @Segmento4C )
	
	EXECUTE tesMovimientosDatos @ptesMovimientos

Exec tesRengMoviDHDatos @ptesMovimientos, 1, NULL
Exec tesRengMoviDHDatos @ptesMovimientos, 2, NULL

Exec tesRengConciliacDatos @ptesMovimientos, NULL,1
Exec tesRengConciliacDatos @ptesMovimientos, NULL,2
Exec tesMovimientosCambio @ptesMovimientos

SELECT tesSolSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
tesSolSegmentos.Segmento1N,tesSolSegmentos.Segmento2N,tesSolSegmentos.Segmento3N,
tesSolSegmentos.Segmento4N,tesSolSegmentos.Segmento1C,tesSolSegmentos.Segmento2C,
tesSolSegmentos.Segmento3C,tesSolSegmentos.Segmento4C,
tesSolSegmentos.tesSolicitud as tesMovimientos, 
tesSolicitud.Fecha, tesSolicitud.Monto as Monto, 
		tesSolicitantes.Solicitante_Id Entidad_Id, tesSolicitantes.Nombre EntidadDescripcion 
from
	tesSolicitud INNER JOIN tesSolSegmentos ON 
	tesSolicitud.tesSolicitud = tesSolSegmentos.tesSolicitud 
	INNER JOIN tesSolicitantes ON
	tesSolicitantes.genEntidades = tesSolicitud.Solicitante_Id
	INNER JOIN tesSolPago ON 
	tesSolPago.tesSolicitud = tesSolicitud.tesSolicitud
	INNER JOIN genSegmentos ON
	genSegmentos.genSegmentos = tesSolSegmentos.Segmento_Id
	WHERE
	tesSolPago.tesMovimientos = @ptesMovimientos


Exec genAtributosGeneralesIdentityDatos @ptesMovimientos, 'tesMovimientos'

go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesSolicitudRendicion.sql*/

DROP PROCEDURE tesSolicitudRendicion
GO
-- tesCobranzasDatos 1
CREATE PROCEDURE tesSolicitudRendicion
(
	@Empresa_Id int, 
	@Segmento_Id VarChar(10),
	@Segmento1N Int,
	@Segmento2N Int,
	@Segmento3N Int,
	@Segmento4N Int,
	@Segmento1C VarChar(20),
	@Segmento2C VarChar(20),
	@Segmento3C VarChar(20),
	@Segmento4C VarChar(20)
	
)
AS
SET NOCOUNT ON 

Declare @ptesMovimientos as BigInt
SET @ptesMovimientos = (Select tesMovimientos.tesMovimientos from 
	tesMovimientos INNER JOIN genAsiSegmentos ON
	tesMovimientos.tesMovimientos = genAsiSegmentos.Asiento_Id
	INNER JOIN genSegmentos ON
	genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	WHERE
	genSegmentos.Segmento_Id = @Segmento_Id and 
	genAsiSegmentos.Empresa_Id = @Empresa_id and 
	genAsiSegmentos.Segmento1N = @Segmento1N and 
	genAsiSegmentos.Segmento2N = @Segmento2N and 
	genAsiSegmentos.Segmento3N = @Segmento3N and 
	genAsiSegmentos.Segmento4N = @Segmento4N and 
	genAsiSegmentos.Segmento1C = @Segmento1C and 
	genAsiSegmentos.Segmento2C = @Segmento2C and 
	genAsiSegmentos.Segmento3C = @Segmento3C and 
	genAsiSegmentos.Segmento4C = @Segmento4C )
	
	EXECUTE tesMovimientosDatos @ptesMovimientos

Exec tesRengMoviDHDatos @ptesMovimientos, 1, NULL
Exec tesRengMoviDHDatos @ptesMovimientos, 2, NULL

Exec tesRengConciliacDatos @ptesMovimientos, NULL,1
Exec tesRengConciliacDatos @ptesMovimientos, NULL,2

-- FactAneCuerpoDebe , FactAneImpuestoDebe
Exec tesFactAnexoMovDatos @pTesMovimientos, 1
-- FactAneCuerpoHaber, FactAneImpuestoHaber
Exec tesFactAnexoMovDatos @pTesMovimientos, 2


SELECT tesSolSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
tesSolSegmentos.Segmento1N,tesSolSegmentos.Segmento2N,tesSolSegmentos.Segmento3N,
tesSolSegmentos.Segmento4N,tesSolSegmentos.Segmento1C,tesSolSegmentos.Segmento2C,
tesSolSegmentos.Segmento3C,tesSolSegmentos.Segmento4C,
tesSolSegmentos.tesSolicitud as tesMovimientos, 
tesSolicitud.Fecha, tesSolicitud.Monto as Monto, 
		tesSolicitantes.Solicitante_Id Entidad_Id, tesSolicitantes.Nombre EntidadDescripcion 
from
	tesSolicitud INNER JOIN tesSolSegmentos ON 
	tesSolicitud.tesSolicitud = tesSolSegmentos.tesSolicitud 
	INNER JOIN tesSolicitantes ON
	tesSolicitantes.genEntidades = tesSolicitud.Solicitante_Id
	INNER JOIN tesSolRendicion ON 
	tesSolRendicion.tesSolicitud = tesSolicitud.tesSolicitud
	INNER JOIN genSegmentos ON
	genSegmentos.genSegmentos = tesSolSegmentos.Segmento_Id
	WHERE
	tesSolRendicion.tesMovimientos = @ptesMovimientos


Exec genAtributosGeneralesIdentityDatos @ptesMovimientos, 'tesMovimientos'

go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesSolPago.sql*/
DROP PROCEDURE tesSolPagoInsertar
GO
CREATE PROCEDURE tesSolPagoInsertar
(
@ptesSolicitud bigint,
@ptesMovimientos bigint
)
AS
BEGIN
	INSERT INTO tesSolPago
	(
		tesSolicitud,
		tesMovimientos
	)
	VALUES 
	(
		@ptesSolicitud,
		@ptesMovimientos
	)
END 

GO

DROP PROCEDURE tesSolPagoDatos
GO
CREATE PROCEDURE tesSolPagoDatos
(
	@ptesSolicitud bigint = NULL, 
	@ptesMovimientos bigint = NULL
)
AS
SET NOCOUNT ON 

SELECT tesSolPago.tesSolicitud, tesSolPago.tesMovimientos
FROM tesSolPago 
WHERE 
	tesSolicitud = isnull(@ptesSolicitud, tesSolicitud) and 
	tesMovimientos = IsNull(@ptesMovimientos, tesMovimientos)
 
 RETURN @@Error 

GO

DROP PROCEDURE tesSolPagoEliminar
GO
CREATE PROCEDURE tesSolPagoEliminar
(
	@ptesSolicitud bigint , 
	@ptesMovimientos bigint 
)
AS
SET NOCOUNT ON 

DELETE FROM tesSolPago 
	WHERE tesMovimientos = @ptesMovimientos and 
		tesSolicitud = @ptesSolicitud
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesSolRendicion.sql*/
DROP PROCEDURE tesSolRendicionInsertar
GO
CREATE PROCEDURE tesSolRendicionInsertar
(
@ptesMovimientos bigint,
@ptesSolicitud bigint
)
AS
SET NOCOUNT ON 
	INSERT INTO tesSolRendicion
	(
		tesMovimientos,
		tesSolicitud
	)
	VALUES 
	(
		@ptesMovimientos,
		@ptesSolicitud
	)
GO

DROP PROCEDURE tesSolRendicionDatos
GO
CREATE PROCEDURE tesSolRendicionDatos
(
@ptesMovimientos bigint=NULL, 
@ptesSolicitud bigInt=NULL
)
AS
SET NOCOUNT ON 

SELECT tesSolRendicion.tesMovimientos, tesSolRendicion.tesSolicitud
FROM tesSolRendicion 
WHERE tesMovimientos = isnull(@ptesMovimientos,tesMovimientos) and 
	  tesSolicitud = ISNULL(@ptesSolicitud, tesSolicitud)
 
RETURN @@Error 

GO

DROP PROCEDURE tesSolRendicionEliminar
GO
CREATE PROCEDURE tesSolRendicionEliminar
(
@ptesMovimientos bigint 
)
AS
SET NOCOUNT ON 

DELETE FROM tesSolRendicion 
WHERE tesMovimientos = @ptesMovimientos
 
RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesSolSegmentos.sql*/
DROP PROCEDURE tesSolSegmentosInsertar
GO
CREATE PROCEDURE tesSolSegmentosInsertar
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@ptesSolicitud bigint, 
@pTieneAutomatico bit, 
@pPrimerNumero INT
)
AS

if ((@pTieneAutomatico=1) AND (@pSegmento1N = 0))
		BEGIN
			
			set @pSegmento1N = ISNULL((SELECT MAX(Segmento1N) 
				FROM 	tesSolSegmentos inner join genSegmentos ON
				tesSolSegmentos.Segmento_id = genSegmentos.genSegmentos
				WHERE
				(tesSolSegmentos.Empresa_Id = @pEmpresa_Id) AND 
				(genSegmentos.Segmento_Id = @pSegmento_Id) AND 
				(Segmento2N = @pSegmento2N) AND 
				(Segmento3N = @pSegmento3N) AND 
				(Segmento4N = @pSegmento4N) AND 
				(Segmento1C = @pSegmento1C) AND 
				(Segmento2C = @pSegmento2C) AND 
				(Segmento3C = @pSegmento3C) AND 
				(Segmento4C = @pSegmento4C))+1,@pPrimerNumero) 

			-- esto solo pasa si empieza en 1 esta prendido
			if @pSegmento1N is null or @pSegmento1N < 0
			begin
				set @pSegmento1N = 1
			end	
		END

		

	INSERT INTO tesSolSegmentos
	(
		Empresa_Id,
		Segmento_Id,
		Segmento1N,
		Segmento2N,
		Segmento3N,
		Segmento4N,
		Segmento1C,
		Segmento2C,
		Segmento3C,
		Segmento4C,
		tesSolicitud
	)
	VALUES 
	(
		@pEmpresa_Id,
		dbo.FuncFKgenSegmentos(@pSegmento_Id),
		@pSegmento1N,
		@pSegmento2N,
		@pSegmento3N,
		@pSegmento4N,
		@pSegmento1C,
		@pSegmento2C,
		@pSegmento3C,
		@pSegmento4C,
		@ptesSolicitud
	)

SELECT @pSegmento1N as RetVal
GO

DROP PROCEDURE tesSolSegmentosDatos
GO
CREATE PROCEDURE tesSolSegmentosDatos
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20)
)
AS
SET NOCOUNT ON 

SELECT tesSolSegmentos.Empresa_Id, tesSolSegmentos.Segmento_Id, tesSolSegmentos.Segmento1N, tesSolSegmentos.Segmento2N,
	tesSolSegmentos.Segmento3N, tesSolSegmentos.Segmento4N, tesSolSegmentos.Segmento1C, tesSolSegmentos.Segmento2C,
	tesSolSegmentos.Segmento3C, tesSolSegmentos.Segmento4C, tesSolSegmentos.tesSolicitud
FROM tesSolSegmentos 
INNER JOIN tesSolicitud  ON (tesSolicitud.Solicitante_Id = tesSolSegmentos.tesSolicitud)
WHERE (Empresa_Id = @pEmpresa_Id)
AND (Segmento_Id = dbo.FuncFkgenSegmentos(@pSegmento_Id))
AND (Segmento1N = @pSegmento1N)
AND (Segmento2N = @pSegmento2N)
AND (Segmento3N = @pSegmento3N)
AND (Segmento4N = @pSegmento4N)
AND (Segmento1C = @pSegmento1C)
AND (Segmento2C = @pSegmento2C)
AND (Segmento3C = @pSegmento3C)
AND (Segmento4C = @pSegmento4C)
 
 RETURN @@Error 

GO

DROP PROCEDURE tesSolSegmentosEliminar
GO
CREATE PROCEDURE tesSolSegmentosEliminar
(
@pEmpresa_Id Int,
@pSegmento_Id VarChar(10),
@pSegmento1N int ,
@pSegmento2N int ,
@pSegmento3N int ,
@pSegmento4N int ,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20)
)
AS
SET NOCOUNT ON 

DELETE FROM tesSolSegmentos 
WHERE (Empresa_Id = @pEmpresa_Id)
AND (Segmento_Id = dbo.FuncFkgenSegmentos(@pSegmento_Id))
AND (Segmento1N = @pSegmento1N)
AND (Segmento2N = @pSegmento2N)
AND (Segmento3N = @pSegmento3N)
AND (Segmento4N = @pSegmento4N)
AND (Segmento1C = @pSegmento1C)
AND (Segmento2C = @pSegmento2C)
AND (Segmento3C = @pSegmento3C)
AND (Segmento4C = @pSegmento4C)

RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesSubTiposMov.sql*/
DROP PROCEDURE tesSubTiposMovGuardar
GO
CREATE PROCEDURE tesSubTiposMovGuardar
(
@pSubTipo_Id varchar(3),
@pSubTipo_Id_Nuevo varchar(3),
@pDescripcion varchar(60),
@pCantCopias smallint, 
@pTipomov Char(1), 
@pReporte_Id VarChar(50)=NULL
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM tesSubTiposMov WHERE (SubTipo_Id = @pSubTipo_Id)))
BEGIN 
	UPDATE tesSubTiposMov
	SET		@lIdentidad = tesSubTiposMov,
		SubTipo_Id = @pSubTipo_Id_Nuevo,
		Descripcion = @pDescripcion,
		CantCopias = @pCantCopias, 
		Tipomov = @pTipomov, 
		genReportes = dbo.FuncFKgenReportes(@pReporte_Id)
	WHERE (SubTipo_Id = @pSubTipo_Id)
END 
ELSE 
BEGIN 
	INSERT INTO tesSubTiposMov
	(
		SubTipo_Id,
		Descripcion,
		CantCopias, 
		Tipomov, 
		genReportes
	)
	VALUES 
	(
		@pSubTipo_Id,
		@pDescripcion,
		@pCantCopias,
		@pTipomov, 
		dbo.FuncFKgenReportes(@pReporte_Id)
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE tesSubTiposMovDatos
GO
CREATE PROCEDURE tesSubTiposMovDatos
(
@pSubTipo_Id varchar(3)
)
AS
SET NOCOUNT ON 

SELECT tesSubTiposMov.tesSubTiposMov, tesSubTiposMov.SubTipo_Id, 
	tesSubTiposMov.Descripcion, tesSubTiposMov.CantCopias,
		tesSubTiposMov.Tipomov, genReportes.Reporte_Id, 
			genReportes.Titulo
FROM tesSubTiposMov LEFT JOIN genReportes ON
tesSubTiposMov.genReportes = genReportes.genReportes

WHERE (SubTipo_Id = @pSubTipo_Id)
 


 Declare @pidentity bigint= dbo.FuncFKtesSubTiposMov(@pSubTipo_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'tesSubTiposMov'
 RETURN @@Error 

GO

DROP PROCEDURE tesSubTiposMovEliminar
GO
CREATE PROCEDURE tesSubTiposMovEliminar
(
@pSubTipo_Id varchar(3) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM tesSubTiposMov 
WHERE (SubTipo_Id = @pSubTipo_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKtesSubTiposMov
GO

CREATE FUNCTION FuncFKtesSubTiposMov
(
@pSubTipo_Id varchar (3)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = tesSubTiposMov FROM tesSubTiposMov WHERE 
	SubTipo_Id = @pSubTipo_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesT3Promociones.sql*/
DROP PROCEDURE tesT3PromocionesGuardar
GO
CREATE PROCEDURE tesT3PromocionesGuardar
(
@pPromocion_Id int,
@pPromocion_Id_Nuevo int,
@pDescripcion varchar(100),
@pEmpresa_Id int = NULL,
@pVigenciaDesde qFecha,
@pVigenciaHasta qFecha,
@pInactivo Sino,
@pPosteado Sino,
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM tesT3Promociones WHERE (Promocion_Id = @pPromocion_Id)))
BEGIN 
	UPDATE tesT3Promociones
	SET		@lIdentidad = tesT3Promociones,
		Promocion_Id = @pPromocion_Id_Nuevo,
		Descripcion = @pDescripcion,
		Empresa_Id = @pEmpresa_Id,
		VigenciaDesde = @pVigenciaDesde,
		VigenciaHasta = @pVigenciaHasta,
		Inactivo = @pInactivo,
		Posteado = @pPosteado,
		Usuario_Id = @pUsuario_Id
	WHERE (Promocion_Id = @pPromocion_Id)
END 
ELSE 
BEGIN 
	INSERT INTO tesT3Promociones
	(
		Promocion_Id,
		Descripcion,
		Empresa_Id,
		VigenciaDesde,
		VigenciaHasta,
		Inactivo,
		Posteado,
		Usuario_Id
	)
	VALUES 
	(
		@pPromocion_Id,
		@pDescripcion,
		@pEmpresa_Id,
		@pVigenciaDesde,
		@pVigenciaHasta,
		@pInactivo,
		@pPosteado,
		@pUsuario_Id
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE tesT3PromocionesDatos
GO
CREATE PROCEDURE tesT3PromocionesDatos
(
@pPromocion_Id int
)
AS
SET NOCOUNT ON 

SELECT tesT3Promociones.tesT3Promociones, tesT3Promociones.Promocion_Id, tesT3Promociones.Descripcion, tesT3Promociones.Promocion_Id Promocion_Id_Nueva,
	tesT3Promociones.Empresa_Id, Cast( Case When tesT3Promociones.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, tesT3Promociones.VigenciaDesde, tesT3Promociones.VigenciaHasta,
	tesT3Promociones.Inactivo, tesT3Promociones.Posteado, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario
FROM tesT3Promociones 
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = tesT3Promociones.Usuario_Id)
WHERE (Promocion_Id = @pPromocion_Id)
 
Exec tesT3PromocionesCuotasDatos @pPromocion_Id
Exec tesTarjetasPromocionesDatos Null, @pPromocion_Id

Declare @pidentity bigint= dbo.FuncFKtesT3Promociones(@pPromocion_Id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'tesT3Promociones'
RETURN @@Error 

GO

DROP PROCEDURE tesT3PromocionesEliminar
GO
CREATE PROCEDURE tesT3PromocionesEliminar
(
@pPromocion_Id int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM tesT3Promociones 
WHERE (Promocion_Id = @pPromocion_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKtesT3Promociones
GO

CREATE FUNCTION FuncFKtesT3Promociones
(
@pPromocion_Id int
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = tesT3Promociones FROM tesT3Promociones WHERE 
	Promocion_Id = @pPromocion_Id
  RETURN @pIdentity
END

GO

Drop Procedure tesT3PromocionesVigentes
Go
Create Procedure tesT3PromocionesVigentes
(
@pEmpresa_Id int,
@pFecha datetime,
@pCartera_Id varchar(5)
)
As
SELECT tesT3Promociones.Promocion_Id, tesT3Promociones.Descripcion, getDate() Fecha, '' Cartera_Id
FROM tesT3Promociones 
Where isNull(tesT3Promociones.Empresa_Id, @pEmpresa_Id) = @pEmpresa_Id And @pFecha Between tesT3Promociones.VigenciaDesde And tesT3Promociones.VigenciaHasta And
Exists (Select 1 From tesTarjetasPromociones Where tesTarjetasPromociones.Promocion_Id = tesT3Promociones.tesT3Promociones And
				tesTarjetasPromociones.Cartera_Id = dbo.FuncFKtesIdentifica(@pCartera_Id))
Go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesT3PromocionesCuotas.sql*/
DROP PROCEDURE tesT3PromocionesCuotasGuardar
GO
CREATE PROCEDURE tesT3PromocionesCuotasGuardar
(
@ptesT3Promociones int,
@pCuota int,
@pCoeficiente qCantidadD8
)
AS
SET NOCOUNT ON 

INSERT INTO tesT3PromocionesCuotas
(
	tesT3Promociones,
	Cuota,
	Coeficiente
)
VALUES 
(
	@ptesT3Promociones,
	@pCuota,
	@pCoeficiente
)

GO

DROP PROCEDURE tesT3PromocionesCuotasDatos
GO
CREATE PROCEDURE tesT3PromocionesCuotasDatos
(
@ptesT3Promociones int,
@pCuota int = Null
)
AS
SET NOCOUNT ON 

SELECT tesT3Promociones.Promocion_Id, tesT3Promociones.Descripcion as DescripcionT3Promociones, tesT3PromocionesCuotas.Cuota, tesT3PromocionesCuotas.Coeficiente,
Cast(0 As Numeric(19,2)) ValorCuota, Cast(0 As Numeric(19,2)) Total
FROM tesT3PromocionesCuotas 
INNER JOIN tesT3Promociones  ON (tesT3Promociones.tesT3Promociones = tesT3PromocionesCuotas.tesT3Promociones)
WHERE tesT3PromocionesCuotas.tesT3Promociones = dbo.FuncFKtesT3Promociones(@ptesT3Promociones)
AND Cuota = isNull(@pCuota, Cuota)
 
RETURN @@Error 

GO

DROP PROCEDURE tesT3PromocionesCuotasEliminar
GO
CREATE PROCEDURE tesT3PromocionesCuotasEliminar
(
@pPromocion_Id int,
@pCuota int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM tesT3PromocionesCuotas 
WHERE (tesT3Promociones = dbo.FuncFKtesT3Promociones(@pPromocion_Id))
AND (Cuota = ISNULL(@pCuota, Cuota))
 
 RETURN @@Error 

GO

DROP PROCEDURE tesT3PromocionesCuotasCalcularCuotas
GO
CREATE PROCEDURE tesT3PromocionesCuotasCalcularCuotas
(
@pPromocion_Id int,
@pTotal qMonedaD2
)
AS
SET NOCOUNT ON 

SELECT tesT3Promociones.Promocion_Id, tesT3Promociones.Descripcion as DescripcionT3Promociones, tesT3PromocionesCuotas.Cuota, tesT3PromocionesCuotas.Coeficiente,
Round((@pTotal * tesT3PromocionesCuotas.Coeficiente) / tesT3PromocionesCuotas.Cuota, 2) ValorCuota, Round(@pTotal * tesT3PromocionesCuotas.Coeficiente, 2) Total
FROM tesT3PromocionesCuotas 
INNER JOIN tesT3Promociones  ON (tesT3Promociones.tesT3Promociones = tesT3PromocionesCuotas.tesT3Promociones)
WHERE tesT3PromocionesCuotas.tesT3Promociones = dbo.FuncFKtesT3Promociones(@pPromocion_Id)

 
RETURN @@Error 

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesT3Terminales.sql*/
DROP PROCEDURE tesT3TerminalesGuardar
GO
CREATE PROCEDURE tesT3TerminalesGuardar
(
@pTerminal_Id int,
@pTerminal_Id_Nuevo int,
@pEmpresa_Id int = NULL,
@pDescripcion varchar(60),
@pSucursal Sucursal = NULL,
@pCartera_Id int = NULL,
@pInactivo Sino,
@pPosteado Sino,
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM tesT3Terminales WHERE (Terminal_Id = @pTerminal_Id)))
BEGIN 
	UPDATE tesT3Terminales
	SET @lIdentidad = tesT3Terminales,
		Terminal_Id = @pTerminal_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Sucursal = dbo.FuncFKgenSucursalesEmpr(@pSucursal),
		Cartera_Id = @pCartera_Id,
		Inactivo = @pInactivo,
		Posteado = @pPosteado,
		Usuario_Id = @pUsuario_Id
	WHERE (Terminal_Id = @pTerminal_Id)
END 
ELSE 
BEGIN 
	INSERT INTO tesT3Terminales
	(
		Terminal_Id,
		Empresa_Id,
		Descripcion,
		Sucursal,
		Cartera_Id,
		Inactivo,
		Posteado,
		Usuario_Id
	)
	VALUES 
	(
		@pTerminal_Id,
		@pEmpresa_Id,
		@pDescripcion,
		dbo.FuncFKgenSucursalesEmpr(@pSucursal),
		@pCartera_Id,
		@pInactivo,
		@pPosteado,
		@pUsuario_Id
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE tesT3TerminalesDatos
GO
CREATE PROCEDURE tesT3TerminalesDatos
(
@pTerminal_Id int
)
AS
SET NOCOUNT ON 

SELECT tesT3Terminales.tesT3Terminales, tesT3Terminales.Terminal_Id, tesT3Terminales.Terminal_Id Terminal_Id_Nueva, tesT3Terminales.Empresa_Id,
	Cast( Case When tesT3Terminales.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, tesT3Terminales.Descripcion, 
	genSucursalesEmpr.Sucursal, genSucursalesEmpr.Descripcion as DescripcionSucursalesEmpr,
	tesT3Terminales.Cartera_Id, tesIdentifica.Descripcion as DescripcionIdBancoPropio, tesT3Terminales.Inactivo, tesT3Terminales.Posteado,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario
FROM tesT3Terminales 
LEFT JOIN genSucursalesEmpr ON (genSucursalesEmpr.genSucursalesEmpr = tesT3Terminales.Sucursal)
LEFT JOIN tesIdBancoPropio ON (tesIdBancoPropio.Cartera_Id = tesT3Terminales.Cartera_Id)
Left Join tesIdentifica On tesIdentifica.tesIdentifica = tesT3Terminales.Cartera_Id
LEFT JOIN genUsuarios ON (genUsuarios.genUsuarios = tesT3Terminales.Usuario_Id)
WHERE (Terminal_Id = @pTerminal_Id)
 


 Declare @pidentity bigint= dbo.FuncFKtesT3Terminales(@pTerminal_Id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'tesT3Terminales'
RETURN @@Error 

GO

DROP PROCEDURE tesT3TerminalesEliminar
GO
CREATE PROCEDURE tesT3TerminalesEliminar
(
@pTerminal_Id int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM tesT3Terminales 
WHERE (Terminal_Id = @pTerminal_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKtesT3Terminales
GO

CREATE FUNCTION FuncFKtesT3Terminales
(
@pTerminal_Id int
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = tesT3Terminales FROM tesT3Terminales WHERE 
	Terminal_Id = @pTerminal_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesTarjetasPromociones.sql*/
DROP PROCEDURE tesTarjetasPromocionesGuardar
GO
CREATE PROCEDURE tesTarjetasPromocionesGuardar
(
@pCartera_Id varchar(5),
@pPromocion_Id int
)
AS
SET NOCOUNT ON 

	INSERT INTO tesTarjetasPromociones
	(
		Cartera_Id,
		Promocion_Id
	)
	VALUES 
	(
		dbo.FuncFKtesIdentifica(@pCartera_Id),
		dbo.FuncFKtesT3Promociones(@pPromocion_Id)
	)

GO

DROP PROCEDURE tesTarjetasPromocionesDatos
GO
CREATE PROCEDURE tesTarjetasPromocionesDatos
(
@pCartera_Id varchar(5) = Null,
@pPromocion_Id int = Null
)
AS
SET NOCOUNT ON 

SELECT tesIdentifica.Cartera_Id, tesIdentifica.Descripcion as DescripcionIdTarjetas3, tesT3Promociones.Promocion_Id, tesT3Promociones.Descripcion as DescripcionT3Promociones
FROM tesTarjetasPromociones 
INNER JOIN tesIdTarjetas3  ON (tesIdTarjetas3.Cartera_Id = tesTarjetasPromociones.Cartera_Id)
Inner Join tesIdentifica On tesIdentifica.tesIdentifica = tesIdTarjetas3.Cartera_Id
INNER JOIN tesT3Promociones  ON (tesT3Promociones.tesT3Promociones = tesTarjetasPromociones.Promocion_Id)
WHERE tesIdentifica.Cartera_Id = isNull(@pCartera_Id, tesIdentifica.Cartera_Id)
AND tesT3Promociones.Promocion_Id = isNull(@pPromocion_Id, tesT3Promociones.Promocion_Id)
 
RETURN @@Error 

GO

DROP PROCEDURE tesTarjetasPromocionesEliminar
GO
CREATE PROCEDURE tesTarjetasPromocionesEliminar
(
@pCartera_Id varchar(5) = Null,
@pPromocion_Id int = Null
)
AS
SET NOCOUNT ON 

DELETE FROM tesTarjetasPromociones 
WHERE Cartera_Id = isNull(dbo.FuncFKtesIdentifica(@pCartera_Id), Cartera_Id)
AND Promocion_Id = isNull(dbo.FuncFKtesT3Promociones(@pPromocion_Id), Promocion_Id)
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesTimbradoCobraDatos.sql*/
-- tesTimbradoCobraDatos 1, '20180101','20180630',' ','ZZZ'
DROP PROCEDURE tesTimbradoCobraDatos
GO
CREATE PROCEDURE tesTimbradoCobraDatos(
	@Empresa_Id INT, 
	@FechaDesde DateTime, 
	@FechaHata DateTime, 
	@ClienteDesde VarChar(15), 
	@ClienteHasta VarChar(15),
	@UnTimbrePorCob bit
	)

AS

SELECT @FechaDesde as FechaDesde, @FechaHata as FechaHasta, 
	@ClienteDesde as ClienteDesde, ' ' as DescripcionClienteDesde,
	@ClienteHasta as ClienteHasta, ' ' as DescripcionClienteHasta, 
	GETDATE() as Fecha, @UnTimbrePorCob as UnTimbrePorCob


SELECT 	' ' Segmento_Id , ' ' Segmento1C, ' ' Segmento2C,  ' ' Segmento3C,  ' ' Segmento4C, 
		0 Segmento1N, 0 Segmento2N,  0 Segmento3N,  0 Segmento4N


SELECT distinct tesMovimientos.tesMovimientos, venClientes.Cliente_Id, 
	conAsientos.Fecha,
	genMonedas.Moneda_Id, dbo.Segmento( genAsiSegmentos.Segmento_Id,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, 
	genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as Comprobante, 
	CAST(1 as bit) as Marca, 
	venMovimientos.Importe as Monto
from tesMovimientos INNER JOIN conAsientos ON
	tesMovimientos.tesMovimientos = conAsientos.conAsientos
	inner join venMovimientos ON
	venMovimientos.venMovimientos = tesMovimientos.tesMovimientos
	inner join venClientes ON
	venClientes.genEntidades = venMovimientos.Cliente_Id
	inner join genMonedas ON
	genMonedas.genMonedas = conAsientos.Moneda_Id
	INNER JOIN genAsiSegmentos on 
	genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
	INNER JOIN genCancMov ON
	genCancMov.Asiento_Id_Ap = tesMovimientos.tesMovimientos
	INNER JOIN venMovimientosMetodoPago ON
	venMovimientosMetodoPago.venMovimientos = genCancMov.Asiento_Id

WHERE
	conAsientos.Anulado = 0 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	(venMovimientosMetodoPago.NMetodoPago = 'PPD'  or venMovimientosMetodoPago.MetodoPago in ('99',' ')) and
	venClientes.Cliente_Id between @ClienteDesde And @ClienteHasta and 
	conAsientos.Fecha between @FechaDesde And @FechaHata and
	not exists(select 1 from TesCFDICobranzaCuerpo inner join tesCFDICobranza ON 
	TesCFDICobranzaCuerpo.tesCFDICobranza = tesCFDICobranza.tesCFDICobranza
	 Where
	 tesCFDICobranza.Anulada = ' ' AND 
	TesCFDICobranzaCuerpo.tesMovimientos = tesMovimientos.tesMovimientos)
	order by 2,3

SELECT 	' ' Segmento_Id , ' ' Segmento1C, ' ' Segmento2C,  ' ' Segmento3C,  ' ' Segmento4C, 
		0 Segmento1N, 0 Segmento2N,  0 Segmento3N,  0 Segmento4N 

SELECT 	' ' Segmento_Id , ' ' Segmento1C, ' ' Segmento2C,  ' ' Segmento3C,  ' ' Segmento4C, 
		0 Segmento1N, 0 Segmento2N,  0 Segmento3N,  0 Segmento4N, '' as SegmentoSTR
GO

	
DROP PROCEDURE tesCdfiCobranzaTieneRel
GO
CREATE PROCEDURE tesCdfiCobranzaTieneRel(
	@tesMovmientos Bigint
)
AS

SELECT tesCFDICobranzaCuerpo.tesCFDICobranza
FROM tesCFDICobranzaCuerpo inner join tesCFDICobranza ON
tesCFDICobranzaCuerpo.tesCFDICobranza = tesCFDICobranza.tesCFDICobranza
Where
tesCFDICobranzaCuerpo.tesMovimientos = @tesMovmientos AND 
tesCFDICobranza.Anulada <> ' '
ORDER BY  1 DESC
	
go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesTiposId.sql*/
DROP PROCEDURE tesTiposIdGuardar
GO
CREATE PROCEDURE tesTiposIdGuardar
(
@pTipoCartera char(2),
@pTipoCartera_Nuevo char(2),
@pDescripcion varchar(35)
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM tesTiposId WHERE (TipoCartera = @pTipoCartera)))
BEGIN 
	UPDATE tesTiposId
	SET		@lIdentidad = tesTiposId,
		TipoCartera = @pTipoCartera_Nuevo,
		Descripcion = @pDescripcion
	WHERE (TipoCartera = @pTipoCartera)
END 
ELSE 
BEGIN 
	INSERT INTO tesTiposId
	(
		TipoCartera,
		Descripcion
	)
	VALUES 
	(
		@pTipoCartera,
		@pDescripcion
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE tesTiposIdDatos
GO
CREATE PROCEDURE tesTiposIdDatos
(
@pTipoCartera char(2)
)
AS
SET NOCOUNT ON 

SELECT tesTiposId.tesTiposId, tesTiposId.TipoCartera, tesTiposId.Descripcion
FROM tesTiposId 
WHERE (TipoCartera = @pTipoCartera)
 


RETURN @@Error 

GO

DROP PROCEDURE tesTiposIdEliminar
GO
CREATE PROCEDURE tesTiposIdEliminar
(
@pTipoCartera char(2) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM tesTiposId 
WHERE (TipoCartera = @pTipoCartera)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKtesTiposId
GO

CREATE FUNCTION FuncFKtesTiposId
(
@pTipoCartera char (2)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = tesTiposId FROM tesTiposId WHERE 
	TipoCartera = @pTipoCartera
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\tesXmlComprobantePago.sql*/


-- SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED


-- tesXmlComprobantePagoDatos 3151,5



DROP PROCEDURE tesXmlComprobantePagoDatos
GO

CREATE PROCEDURE tesXmlComprobantePagoDatos(	
	@TesCFDICobranza int, 
	@Empresa_Id INT
)

as

-- Comprobante
SELECT '3.3' as Version, 
	TesCFDICobranzaSegmentos.Segmento1C as Serie, 
	 TesCFDICobranzaSegmentos.Segmento1N as Folio, TesCFDICobranza.Fecha as Fecha,
	 TesCFDICobranzaSegmentos.TesCFDICobranza,
		'pago' as MetodoPago, 
		CASE WHEN ISNULL(TesCFDICobranza.NoCertificado,' ')=' ' THEN
		(SELECT cValor FROM genGlobales WHERE NOMBRE_VAR = 'VENNOCERTIFICADO' and Empresa_Id =@Empresa_Id) ELSE
		TesCFDICobranza.NoCertificado END AS NoCertificado, 
		convert(VarChar(max),(SELECT mValor FROM genGlobales where Nombre_var = 'GENWSAAPUBLICKEY' and Empresa_Id=@Empresa_Id)) AS Certificado,
		' ' as CondicionesDePago, 
		Convert(Numeric(18,2) , 0) as SubTotal,
		Convert(Numeric(18,2) , 0) as Descuento, 		
		genMonedas.CodigoFiscal as Moneda,
		Convert(Numeric(18,2) , 0) as Total,
		Convert(Numeric(18,2) , 0) as TipoCambio,
		'P' as TipoDeComprobante, 
		'NA' as  FormaPago, 
		genSucursalesEmpr.CodigoPostal as LugarExpedicion, ' ' Confirmacion
from TesCFDICobranza INNER JOIN genMonedas ON 
TesCFDICobranza.Moneda_Id = genMonedas.genMonedas
INNER JOIN genSucursalesEmpr ON
genSucursalesEmpr.genSucursalesEmpr = TesCFDICobranza.Sucursal
INNER JOIN TesCFDICobranzaSegmentos ON 
TesCFDICobranzaSegmentos.TesCFDICobranza =  TesCFDICobranza.TesCFDICobranza
INNER JOIN genSegmentos ON
genSegmentos.genSegmentos = TesCFDICobranzaSegmentos.Segmento_Id
Where
	TesCFDICobranzaSegmentos.TesCFDICobranza = @TesCFDICobranza 

-- Emisor
SELECT 
genEmpresas.Cuit AS Rfc,
genEmpresas.RazonSocial AS Nombre,
genEmpresas.Regimen AS RegimenFiscal,
Convert(VarChar(max),(select mValor from genGlobales where Nombre_var = 'GENWSAAPRIVATEKEY' and Empresa_Id=@Empresa_Id)) AS EmpPrivateKey,
genEmpresas.Calle AS Calle,
genEmpresas.NoExterior AS NroExterior,
genEmpresas.NoInterior as NroInterior,
genEmpresas.Localidad,
genEmpresas.Colonia,
genEmpresas.Municipio,
genProvincias.CodFiscal AS Provincia,
'MEX' AS Pais,
genEmpresas.CodigoPostal
FROM genEmpresas INNER JOIN genProvincias ON
genProvincias.genProvincias = genEmpresas.Provincia_Id
WHERE genEmpresas.genEmpresas = @Empresa_Id

-- Receptor

SELECT 
ISNULL((select MAX(Convert(VarChar(14),tesDeposito.RfcEmisorCtaOrd))
	from tesDeposito, tesCFDICobranzaCuerpo, tesBancos 
	WHERE	
	tesDeposito.tesMovimientos = tesCFDICobranzaCuerpo.tesMovimientos and 
	tesDeposito.FormaDePagoP = '17' and 
	tesBancos.RFC = tesDeposito.RfcEmisorCtaOrd and 
	tesCFDICobranzaCuerpo.tesCFDICobranza = tesCFDICobranza.tesCFDICobranza),genEntidades.Cuit)  AS Rfc, 
	ISNULL((select MAX(tesBancos.Descripcion)
	from tesDeposito, tesCFDICobranzaCuerpo, tesBancos 
	WHERE	
	tesDeposito.tesMovimientos = tesCFDICobranzaCuerpo.tesMovimientos and 
	tesDeposito.FormaDePagoP = '17' and 
	tesBancos.RFC = tesDeposito.RfcEmisorCtaOrd and 
	tesCFDICobranzaCuerpo.tesCFDICobranza = tesCFDICobranza.tesCFDICobranza),venClientes.RazonSocial) as Nombre, 
	genPaises.CodFiscal AS ResidenciaFiscal,
	' '  AS NumRegIdTrib,
	'P01' as UsoCfdi, 
	venClieHabitual.Direccion1_Fact Calle , venClieHabitual.NroExterior_Fact NroExterior, 
	venClieHabitual.NroInterior_Fact NroInterior, venClieHabitual.Direccion2_Fact Colonia,
	venClieHabitual.Localidad_Fact AS Localidad,
	genProvincias.CodFiscal as Provincia, 
	genPaises.CodFiscal as Pais, 
	venClieHabitual.CodPostal_Fact as CodigoPostal
from venClientes INNER JOIN TesCFDICobranza ON	
venClientes.genEntidades = TesCFDICobranza.Cliente_id
INNER JOIN genEntidades ON
genEntidades.genEntidades = venClientes.genEntidades
INNER JOIN  venClieHabitual ON 
venClieHabitual.genEntidades = venClientes.genEntidades and
venClieHabitual.Sucursal = venClientes.SucursalPredeter
inner join genPaises ON
venClieHabitual.Pais_id_Fact = genPaises.genPaises
INNER JOIN genProvincias ON
venClieHabitual.Provincia_id_Fact = genProvincias.genProvincias
INNER JOIN TesCFDICobranzaSegmentos ON 
TesCFDICobranzaSegmentos.TesCFDICobranza =  TesCFDICobranza.TesCFDICobranza
INNER JOIN genSegmentos ON
genSegmentos.genSegmentos = TesCFDICobranzaSegmentos.Segmento_Id
Where
	tesCFDICobranza.tesCFDICobranza = @TesCFDICobranza

-- Concepto
SELECT Convert(smallint,1) as Renglon, 
	'84111506' as ClaveProdServ,
	' ' as NoIdentificacion, 
	1.00 AS Cantidad,
	'ACT' AS ClaveUnidad,
	' ' as Unidad,
	'Pago' Descripcion, 			
	Convert(Numeric(18,2) , 0) as ValorUnitario,
	Convert(Numeric(18,2) , 0) as Importe, 
	Convert(Numeric(18,2) , 0) as Descuento	

 
-- Complemento

SELECT '1.1' as Version,  TesCFDICobranza.UUID, 
	TesCFDICobranza.FechaTimbrado, 
	isnull(TesCFDICobranza.RfcProvCertif,' ') as RfcProvCertif,
	isnull(TesCFDICobranza.Leyenda,' ') as Leyenda,
	Convert(VarChar(8000),TesCFDICobranza.SelloDigital) as SelloCFD,
	TesCFDICobranza.NoCertificadoSAT,
	Convert(VarChar(8000),TesCFDICobranza.SelloSAT) as SelloSAT
FROM TesCFDICobranza INNER JOIN TesCFDICobranzaSegmentos ON 
TesCFDICobranzaSegmentos.TesCFDICobranza =  TesCFDICobranza.TesCFDICobranza
INNER JOIN genSegmentos ON
genSegmentos.genSegmentos = TesCFDICobranzaSegmentos.Segmento_Id
WHERE
	tesCFDICobranza.tesCFDICobranza = @TesCFDICobranza


-- Complemento Pago

SELECT  TesCFDICobranzaCuerpo.tesMovimientos,
	dbo.Segmento(genAsiSegmentosCOB.Segmento_Id, genAsiSegmentosCOB.Segmento1C,
	genAsiSegmentosCOB.Segmento2C,genAsiSegmentosCOB.Segmento3C,genAsiSegmentosCOB.Segmento4C,
	genAsiSegmentosCOB.Segmento1N,genAsiSegmentosCOB.Segmento2N,genAsiSegmentosCOB.Segmento3N,
	genAsiSegmentosCOB.Segmento4N) as Comprobante,
	tesMovimientos.Fecha_Real as FechaPago, 
	ISNULL(TesDeposito.FormaDePagoP, tesIdentifica.FormaDePagoP) AS FormaDePagoP,
	MID.CodigoFiscal as MonedaP, conAsientos.cambio as TipoCambioP, 
	ROUND(conMovCont.ImporteMonedaOriginal * case when conAsientos.Moneda_Id != tesIdentifica.Moneda_Id
	then tesRengMovi.Cambio else 1 end
	 / Case when genEmpresas.Moneda_Id = MID.genMonedas OR
		genMonedas.Moneda_Id = MID.Moneda_Id 	THEN 1 else conAsientos.cambio end,2 ) as Monto, 
	conMovCont.Importe as MontoMxp,
	case when ISNULL(TesDeposito.FormaDePagoP,' ')='01' THEN ' ' ELSE TesDeposito.NumOperacion END AS NumOperacion, 
	case when ISNULL(TesDeposito.FormaDePagoP,' ') in ('01','17') THEN ' ' ELSE TesDeposito.RfcEmisorCtaOrd END AS RfcEmisorCtaOrd , 
	TesDeposito.NomBancoOrdExt,TesDeposito.CtaOrdenante,
	case when ISNULL(TesDeposito.FormaDePagoP,' ') in ('01','17') THEN ' ' ELSE ISNULL(tesBancosP.RFC,'') END AS RfcEmisorCtaBen , 
	case when ISNULL(TesDeposito.FormaDePagoP,' ') in ('01','17') THEN ' ' ELSE tesIdBancoPropio.numCuenta END AS CtaBeneficiario, 
	TesDeposito.TipoCadPago, TesDeposito.CertPago, TesDeposito.CadPago, 
	TesDeposito.SelloPago, 
	isnull((select sum(conMovCont1.Importe) 
		From conMovCont as conMovCont1
		WHERE
		conMovCont1.conasientos = conMovCont.conasientos and 
		conMovCont1.tipoMov = 2),0) as TotalPago ,
		conAsientos.cambio as CambioTes
From 
TesCFDICobranzaCuerpo INNER JOIN tesMovimientos ON
TesCFDICobranzaCuerpo.tesMovimientos = tesMovimientos.tesMovimientos
INNER JOIN venMovimientos ON 
venMovimientos.venMovimientos = tesMovimientos.tesMovimientos
INNER JOIN tesRengMovi ON
tesRengMovi.tesMovimientos = tesMovimientos.tesMovimientos
INNER JOIN tesIdentifica ON
tesRengMovi.Cartera_id = tesIdentifica.tesIdentifica
inner join tesTiposId ON
tesTiposId.tesTiposId = tesIdentifica.TipoCartera
LEFT OUTER JOIN TesDeposito ON
tesRengMovi.tesMovimientos = TesDeposito.tesMovimientos and 
tesRengMovi.conRenglon = TesDeposito.Renglon
INNER JOIN conAsientos ON 
conAsientos.conAsientos = tesMovimientos.tesMovimientos
INNER JOIN conMovCont ON
conMovCont.conAsientos = tesRengMovi.tesMovimientos AND 
conMovCont.Renglon = tesRengMovi.conRenglon
INNER JOIN genMonedas ON
genMonedas.genMonedas = conAsientos.Moneda_id
INNER JOIN genMonedas MID on 
MID.genMonedas = tesIdentifica.Moneda_id
LEFT OUTER JOIN tesIdBancoPropio ON
tesIdBancoPropio.Cartera_id = tesIdentifica.tesIdentifica
LEFT OUTER JOIN tesBancos tesBancosP ON
tesBancosP.tesBancos = tesIdBancoPropio.Banco_Id
INNER JOIN TesCFDICobranzaSegmentos ON 
TesCFDICobranzaSegmentos.TesCFDICobranza =  TesCFDICobranzaCuerpo.tesCFDICobranza
INNER JOIN genSegmentos ON
genSegmentos.genSegmentos = TesCFDICobranzaSegmentos.Segmento_Id
INNER JOIN genAsiSegmentos  as genAsiSegmentosCOB ON
genAsiSegmentosCOB.Asiento_id = tesMovimientos.tesMovimientos
inner join genEmpresas ON  genEmpresas.genEmpresas = conAsientos.Empresa_Id
WHERE 
	conMovCont.TipoMov = 1 and
	TesCFDICobranzaCuerpo.tesCFDICobranza = @TesCFDICobranza and 
	not exists(select 1 from tesDepoPorIdent WHERE
		tesDepoPorIdent.venMovimientos = tesMovimientos.tesMovimientos)
--- DEPOSITO INDETIFICADO
UNION ALL

SELECT  TesCFDICobranzaCuerpo.tesMovimientos,
	dbo.Segmento(genAsiSegmentosCOB.Segmento_Id, genAsiSegmentosCOB.Segmento1C,
	genAsiSegmentosCOB.Segmento2C,genAsiSegmentosCOB.Segmento3C,genAsiSegmentosCOB.Segmento4C,
	genAsiSegmentosCOB.Segmento1N,genAsiSegmentosCOB.Segmento2N,genAsiSegmentosCOB.Segmento3N,
	genAsiSegmentosCOB.Segmento4N) as Comprobante,
	tesMovimientos.Fecha_Real as FechaPago, 
	ISNULL(TesDeposito.FormaDePagoP, tesIdentifica.FormaDePagoP) AS FormaDePagoP,
	MID.CodigoFiscal as MonedaP, conAsientos.cambio as TipoCambioP, 
	ROUND(conMovCont.ImporteMonedaOriginal * case when conAsientos.Moneda_Id != tesIdentifica.Moneda_Id
	then tesRengMovi.Cambio else 1 end
	 / Case when genEmpresas.Moneda_Id = MID.genMonedas OR
		genMonedas.Moneda_Id = MID.Moneda_Id 	THEN 1 else conAsientos.cambio end,2 ) as Monto, 
	conMovCont.Importe as MontoMxp,
	case when ISNULL(TesDeposito.FormaDePagoP,' ')='01' THEN ' ' ELSE TesDeposito.NumOperacion END AS NumOperacion, 
	case when ISNULL(TesDeposito.FormaDePagoP,' ') in ('01','17') THEN ' ' ELSE TesDeposito.RfcEmisorCtaOrd END AS RfcEmisorCtaOrd , 
	TesDeposito.NomBancoOrdExt,TesDeposito.CtaOrdenante,
	case when ISNULL(TesDeposito.FormaDePagoP,' ') in ('01','17') THEN ' ' ELSE ISNULL(tesBancosP.RFC,'') END AS RfcEmisorCtaBen , 
	case when ISNULL(TesDeposito.FormaDePagoP,' ') in ('01','17') THEN ' ' ELSE tesIdBancoPropio.numCuenta END AS CtaBeneficiario, 
	TesDeposito.TipoCadPago, TesDeposito.CertPago, TesDeposito.CadPago, 
	TesDeposito.SelloPago, 
	isnull((select sum(conMovCont1.Importe) 
		From conMovCont as conMovCont1
		WHERE
		conMovCont1.conasientos = conMovCont.conasientos and 
		conMovCont1.tipoMov = 2),0) as TotalPago ,
		conAsientos.cambio as CambioTes
From 
tesDepoPorIdent inner join tesMovimientos ON
tesMovimientos.tesMovimientos = tesDepoPorIdent.venMovimientos
INNER JOIN TesCFDICobranzaCuerpo ON
TesCFDICobranzaCuerpo.tesMovimientos = tesMovimientos.tesMovimientos
INNER JOIN venMovimientos ON 
venMovimientos.venMovimientos = tesDepoPorIdent.venMovimientos
INNER JOIN tesRengMovi ON
tesRengMovi.tesMovimientos = tesDepoPorIdent.tesMovimientos
INNER JOIN tesIdentifica ON
tesRengMovi.Cartera_id = tesIdentifica.tesIdentifica
inner join tesTiposId ON
tesTiposId.tesTiposId = tesIdentifica.TipoCartera
LEFT OUTER JOIN TesDeposito ON
tesRengMovi.tesMovimientos = TesDeposito.tesMovimientos and 
tesRengMovi.conRenglon = TesDeposito.Renglon
INNER JOIN conAsientos ON 
conAsientos.conAsientos = tesMovimientos.tesMovimientos
INNER JOIN conMovCont ON
conMovCont.conAsientos = tesRengMovi.tesMovimientos AND 
conMovCont.Renglon = tesRengMovi.conRenglon
INNER JOIN genMonedas ON
genMonedas.genMonedas = conAsientos.Moneda_id
INNER JOIN genMonedas MID on 
MID.genMonedas = tesIdentifica.Moneda_id
LEFT OUTER JOIN tesIdBancoPropio ON
tesIdBancoPropio.Cartera_id = tesIdentifica.tesIdentifica
LEFT OUTER JOIN tesBancos tesBancosP ON
tesBancosP.tesBancos = tesIdBancoPropio.Banco_Id
INNER JOIN TesCFDICobranzaSegmentos ON 
TesCFDICobranzaSegmentos.TesCFDICobranza =  TesCFDICobranzaCuerpo.tesCFDICobranza
INNER JOIN genSegmentos ON
genSegmentos.genSegmentos = TesCFDICobranzaSegmentos.Segmento_Id
INNER JOIN genAsiSegmentos  as genAsiSegmentosCOB ON
genAsiSegmentosCOB.Asiento_id = tesMovimientos.tesMovimientos
inner join genEmpresas ON  genEmpresas.genEmpresas = conAsientos.Empresa_Id
WHERE 
	conMovCont.TipoMov = 1 and
	TesCFDICobranzaCuerpo.tesCFDICobranza = @TesCFDICobranza 

ORDER BY 1,2,3

-- comppago cuerpo	
SELECT TesCFDICobranzaCuerpo.tesMovimientos, 
	venMovimientosFiscal.ClaveFiscal AS idDocumento, genAsiSegmentos.Segmento2C+genAsiSegmentos.Segmento3C as Serie, 
		genAsiSegmentos.Segmento1N as Folio, genMonedas.CodigoFiscal MonedaDR, 
		case when genMonedas.genMonedas = Cobranza.Moneda_Id then Cobranza.Cambio else
		conAsientos.Cambio end	as TipoCambioDR, 
	venMovimientosMetodoPago.NMetodoPago as MetodoPago , 
		ISNULL((SELECT COUNT(1) FROM genCancMov genCancMov1, conAsientos where 
		conAsientos.conAsientos = 	genCancMov1.Asiento_id_Ap and 
		conAsientos.Anulado = 0 and 
		conAsientos.Posteado = 1 and 
		genCancMov.Asiento_Id = genCancMov1.Asiento_Id and 
		((genCancMov1.FechaAplicacion < genCancMov.FechaAplicacion) or
		(genCancMov.FechaAplicacion = genCancMov1.FechaAplicacion and 
		genCancMov1.Asiento_Id_Ap < genCancMov.Asiento_Id_Ap))),0)+1  as NumParcialidad , 
		venMovimientos.Importe - 
		ISNULL((SELECT SUM(genCancMov1.Importe) FROM genCancMov genCancMov1, conAsientos where 
		conAsientos.conAsientos = 	genCancMov1.Asiento_id_Ap and 
		conAsientos.Anulado = 0 and 
		conAsientos.Posteado = 1 and 
		genCancMov.Asiento_Id = genCancMov1.Asiento_Id and 
		((genCancMov1.FechaAplicacion < genCancMov.FechaAplicacion) or
		(genCancMov.FechaAplicacion = genCancMov1.FechaAplicacion and 
		genCancMov1.Asiento_Id_Ap < genCancMov.Asiento_Id_Ap))),0)  as ImpSaldoAnt, 
		genCancMov.Importe as ImpPagado, 
		venMovimientosMetodoPago.NMetodoPago TipoPago
FROM 
	TesCFDICobranzaCuerpo inner join genCancMov ON
	TesCFDICobranzaCuerpo.tesMovimientos = genCancMov.Asiento_Id_Ap
	INNER JOIN  venMovimientos  ON
	genCancMov.Asiento_Id = venMovimientos.venMovimientos
	INNER JOIN venMovimientosFiscal ON
	venMovimientosFiscal.venMovimientos = venMovimientos.venMovimientos
	INNER JOIN venMovimientosMetodoPago ON
	venMovimientosMetodoPago.venMovimientos =  venMovimientos.venMovimientos
	INNER JOIN conAsientos ON
	conAsientos.conAsientos = venMovimientos.venMovimientos
	inner join genAsiSegmentos ON
	genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
	INNER JOIN genMonedas ON
	genMonedas.genMonedas = conAsientos.Moneda_Id
	inner join venCondPago ON
	venCondPago.venCondPago = venMovimientos.CondPagoCli_id
	inner join tesMovimientos ON
	TesCFDICobranzaCuerpo.tesMovimientos = tesMovimientos.tesMovimientos
	INNER JOIN TesCFDICobranzaSegmentos ON 
	TesCFDICobranzaSegmentos.TesCFDICobranza =  TesCFDICobranzaCuerpo.TesCFDICobranza
	INNER JOIN genSegmentos ON
	genSegmentos.genSegmentos = TesCFDICobranzaSegmentos.Segmento_Id
	INNER JOIN conAsientos AS Cobranza on Cobranza.conasientos = tesMovimientos.tesMovimientos


WHERE
	TesCFDICobranzaCuerpo.tesCFDICobranza = @TesCFDICobranza and 
	not exists(select 1 from tesDepoPorIdent WHERE
		tesDepoPorIdent.venMovimientos = tesMovimientos.tesMovimientos)
--- DEPOSITO INDETIFICADO
UNION ALL
SELECT TesCFDICobranzaCuerpo.tesMovimientos, 
	venMovimientosFiscal.ClaveFiscal AS idDocumento, genAsiSegmentos.Segmento2C+genAsiSegmentos.Segmento3C as Serie, 
		genAsiSegmentos.Segmento1N as Folio, genMonedas.CodigoFiscal MonedaDR, 
		case when genMonedas.genMonedas = Cobranza.Moneda_Id then Cobranza.Cambio else
		conAsientos.Cambio end	as TipoCambioDR, 
	venMovimientosMetodoPago.NMetodoPago as MetodoPago , 
		ISNULL((SELECT COUNT(1) FROM genCancMov genCancMov1, conAsientos where 
		conAsientos.conAsientos = 	genCancMov1.Asiento_id_Ap and 
		conAsientos.Anulado = 0 and 
		conAsientos.Posteado = 1 and 
		genCancMov.Asiento_Id = genCancMov1.Asiento_Id and 
		((genCancMov1.FechaAplicacion < genCancMov.FechaAplicacion) or
		(genCancMov.FechaAplicacion = genCancMov1.FechaAplicacion and 
		genCancMov1.Asiento_Id_Ap < genCancMov.Asiento_Id_Ap))),0)+1  as NumParcialidad , 
		venMovimientos.Importe - 
		ISNULL((SELECT SUM(genCancMov1.Importe) FROM genCancMov genCancMov1, conAsientos where 
		conAsientos.conAsientos = 	genCancMov1.Asiento_id_Ap and 
		conAsientos.Anulado = 0 and 
		conAsientos.Posteado = 1 and 
		genCancMov.Asiento_Id = genCancMov1.Asiento_Id and 
		((genCancMov1.FechaAplicacion < genCancMov.FechaAplicacion) or
		(genCancMov.FechaAplicacion = genCancMov1.FechaAplicacion and 
		genCancMov1.Asiento_Id_Ap < genCancMov.Asiento_Id_Ap))),0)  as ImpSaldoAnt, 
		genCancMov.Importe as ImpPagado, 
		venMovimientosMetodoPago.NMetodoPago TipoPago
FROM 
	tesDepoPorIdent inner join tesMovimientos ON
	tesMovimientos.tesMovimientos = tesDepoPorIdent.venMovimientos
	INNER JOIN TesCFDICobranzaCuerpo ON
	TesCFDICobranzaCuerpo.tesMovimientos = tesMovimientos.tesMovimientos
	inner join genCancMov ON
	TesCFDICobranzaCuerpo.tesMovimientos = genCancMov.Asiento_Id_Ap
	INNER JOIN  venMovimientos  ON
	genCancMov.Asiento_Id = venMovimientos.venMovimientos
	INNER JOIN venMovimientosFiscal ON
	venMovimientosFiscal.venMovimientos = venMovimientos.venMovimientos
	INNER JOIN venMovimientosMetodoPago ON
	venMovimientosMetodoPago.venMovimientos =  venMovimientos.venMovimientos
	INNER JOIN conAsientos ON
	conAsientos.conAsientos = venMovimientos.venMovimientos
	inner join genAsiSegmentos ON
	genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
	INNER JOIN genMonedas ON
	genMonedas.genMonedas = conAsientos.Moneda_Id
	inner join venCondPago ON
	venCondPago.venCondPago = venMovimientos.CondPagoCli_id
	INNER JOIN TesCFDICobranzaSegmentos ON 
	TesCFDICobranzaSegmentos.TesCFDICobranza =  TesCFDICobranzaCuerpo.TesCFDICobranza
	INNER JOIN genSegmentos ON
	genSegmentos.genSegmentos = TesCFDICobranzaSegmentos.Segmento_Id
	INNER JOIN conAsientos AS Cobranza on Cobranza.conasientos = tesMovimientos.tesMovimientos


WHERE
	TesCFDICobranzaCuerpo.tesCFDICobranza = @TesCFDICobranza 
ORDER BY 1,2,3		


SELECT '04' as TipoRelacion 

SELECT TesCFDICobranzaRel.tesCFDICobranza, tesCFDICobranza.UUID 
FROM TesCFDICobranzaRel inner join TesCFDICobranza ON 
TesCFDICobranzaRel.tesCFDICobranzaR = TesCFDICobranza.tesCFDICobranza
INNER JOIN TesCFDICobranzaSegmentos ON 
	TesCFDICobranzaSegmentos.TesCFDICobranza =  TesCFDICobranzaRel.TesCFDICobranza
	INNER JOIN genSegmentos ON
	genSegmentos.genSegmentos = TesCFDICobranzaSegmentos.Segmento_Id
where
	TesCFDICobranzaRel.tesCFDICobranza = @TesCFDICobranza
GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venAjuEdoCta.sql*/
DROP Procedure venAjuEdoCtaDatos
GO
Create Procedure venAjuEdoCtaDatos
(
	@pClienteDesde VarChar(15),
	@pClienteHasta VarChar(15),
	@pMonto Numeric(18,2) ,
	@pEmpresa_Id Int, 
	@pSucursalDesde VarChar(4),
	@pSucursalHasta VarChar(4)
)

AS


SELECT @pClienteDesde AS ClieDesde , ' ' as RazonSocialDesde, 
	@pClienteHasta as ClieHasta, ' ' as RazonSocialHasta, 
	@pMonto as Monto, ' ' as CuentaDebe, ' ' as DescripcionCtaDebe, 
	' ' as CuentaHaber, ' ' as DescripcionCtaHaber, 
	' ' as Centro1_Id , ' ' as DescripcionCentro1, 
	' ' as Centro2_Id , ' ' as DescripcionCentro2 , 
	'  'SucursalDesde, ' ' SucursalHasta, 
	' ' as Avance, 'N' AS Termino

	
SELECT venClientes.Cliente_Id, genMonedas.Moneda_Id, venTipoMov.Signo,
	venMovimientos.venMovimientos, 
	dbo.Segmento(genAsiSegmentos.Segmento_Id, 
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C,  genAsiSegmentos.Segmento4C, 
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N,  genAsiSegmentos.Segmento4N) AS SegmentoStr,
	venClientes.RazonSocial, 
	conAsientos.Fecha, genMovCuotas.CuotaNro, genMovCuotas.Importe*venTipoMov.Signo as Importe, 
	genMovCuotas.Saldo*venTipoMov.Signo as Saldo,
	conAsientos.Cambio, MIN(conCuentas.Cuenta_Id) Cuenta_Id
From venMovimientos INNER JOIN conAsientos ON
venMovimientos.venMovimientos = conAsientos.conAsientos
INNER JOIN genAsiSegmentos ON
genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
INNER JOIN venClientes ON
venClientes.genEntidades = venMovimientos.Cliente_Id
INNER JOIN genMovCuotas ON
genMovCuotas.Asiento_Id =conAsientos.conAsientos
INNER JOIN venSubTipoMov ON
DBO.FuncFKvenSubTipoMov(venSubTipoMov.SubTipoMov_Id) = venMovimientos.venSubTipoMov_Id
INNER JOIN genMonedas ON
genMonedas.genMonedas = conAsientos.Moneda_Id
	INNER JOIN conMovCont ON conMovCont.conAsientos = conAsientos.conAsientos And 
		conMovCont.Clase in( 'CLI','ANTCL')
	INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
	inner join venTipoMov on venTipoMov.venTipoMov=venMovimientos.venTipoMov
INNER JOIN genSucursalesEmpr ON
genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
Where
conAsientos.Anulado = 0 and 
genAsiSegmentos.Empresa_Id = @pEmpresa_Id  and 
venClientes.Cliente_Id Between @pClienteDesde AND @pClienteHasta AND 
ABS(genMovCuotas.Saldo*conAsientos.Cambio) <= @pMonto  and 
ABS(genMovCuotas.Saldo*conAsientos.Cambio) > 0  and 
genSucursalesEmpr.Sucursal between @pSucursalDesde and @pSucursalHasta
GROUP BY venClientes.Cliente_Id, genMonedas.Moneda_Id, venTipoMov.Signo,
	venMovimientos.venMovimientos, 
	genAsiSegmentos.Segmento_Id, 
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C,  genAsiSegmentos.Segmento4C, 
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N,  genAsiSegmentos.Segmento4N,
	venClientes.RazonSocial, 
	conAsientos.Fecha, genMovCuotas.CuotaNro, genMovCuotas.Importe,venTipoMov.Signo , 
	genMovCuotas.Saldo,	conAsientos.Cambio
order by  1,2,3,5
GO
 
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venAplicacionCobranza.sql*/
-- SELECT * FROM vvenMovimientos where ventipomov = 'R' AND SALDO >0
-- venAplicacionCobranzaDatos 'FC',356,0,0,0,'R','0001',' ',' ',1
DROP PROCEDURE venAplicacionCobranzaDatos
GO
CREATE PROCEDURE venAplicacionCobranzaDatos
(
	@Segmento_Id VarChar(10),
	@Segmento1N INT,
	@Segmento2N INT,
	@Segmento3N INT,
	@Segmento4N INT,
	@Segmento1C VarChar(25),
	@Segmento2C VarChar(25),
	@Segmento3C VarChar(25),
	@Segmento4C VarChar(25),
	@Empresa_Id Int

)
AS
DECLARE @Cliente Int
Declare @Signo Int
Declare @Moneda Int

SELECT genSegmentos.Segmento_Id,   genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, genAsiSegmentos.Segmento1C,
genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, 
venTipomov.Signo, venMovimientos.venMovimientos, venMovimientos.Saldo
	FROM genAsiSegmentos 
		INNER JOIN genSegmentos ON genAsiSegmentos.Segmento_Id = genSegmentos.genSegmentos
		INNER JOIN venMovimientos ON venMovimientos.venMovimientos = genAsiSegmentos.Asiento_Id
		INNER JOIN venTipomov ON venMovimientos.venTipomov =  venTipomov.venTipomov
	WHERE
		genSegmentos.Segmento_Id = @Segmento_Id and
		genAsiSegmentos.Segmento1N = @Segmento1N and 
		genAsiSegmentos.Segmento2N = @Segmento2N and 
		genAsiSegmentos.Segmento3N = @Segmento3N and 
		genAsiSegmentos.Segmento4N = @Segmento4N and 
		genAsiSegmentos.Segmento1C = @Segmento1C and 
		genAsiSegmentos.Segmento2C = @Segmento2C and 
		genAsiSegmentos.Segmento3C = @Segmento3C and 
		genAsiSegmentos.Segmento4C = @Segmento4C and 
		genAsiSegmentos.Empresa_Id = @Empresa_Id

SELECT @Cliente = venMovimientos.Cliente_Id , @Signo = venTipoMov.Signo, 
	@Moneda = conAsientos.Moneda_Id
	FROM genAsiSegmentos 
		INNER JOIN genSegmentos ON genAsiSegmentos.Segmento_Id = genSegmentos.genSegmentos
		INNER JOIN venMovimientos ON venMovimientos.venMovimientos = genAsiSegmentos.Asiento_Id
		INNER JOIN venTipoMov ON  venTipoMov.venTipoMov = venMovimientos.venTipoMov
		INNER JOIN conAsientos ON conAsientos.conAsientos = venMovimientos.venMovimientos
	WHERE
		genSegmentos.Segmento_Id = @Segmento_Id and
		genAsiSegmentos.Segmento1N = @Segmento1N and 
		genAsiSegmentos.Segmento2N = @Segmento2N and 
		genAsiSegmentos.Segmento3N = @Segmento3N and 
		genAsiSegmentos.Segmento4N = @Segmento4N and 
		genAsiSegmentos.Segmento1C = @Segmento1C and 
		genAsiSegmentos.Segmento2C = @Segmento2C and 
		genAsiSegmentos.Segmento3C = @Segmento3C and 
		genAsiSegmentos.Segmento4C = @Segmento4C and 
		genAsiSegmentos.Empresa_Id = @Empresa_Id



SELECT genMovCuotas.FechaVencimiento, conAsientos.Fecha, 
genSegmentos.Segmento_Id,   genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, genAsiSegmentos.Segmento1C,
genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
dbo.Segmento(genAsiSegmentos.Segmento_Id,   genAsiSegmentos.Segmento1C,
genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, 
genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) SegmentoStr, 
venMovimientos.venMovimientos,
genMovCuotas.CuotaNro, genMovCuotas.Importe, genMovCuotas.Saldo, genMovCuotas.Saldo*0 as Aplicar
	FROM genAsiSegmentos 
		INNER JOIN genSegmentos ON genAsiSegmentos.Segmento_Id = genSegmentos.genSegmentos
		INNER JOIN venMovimientos ON venMovimientos.venMovimientos = genAsiSegmentos.Asiento_Id
		INNER JOIN venTipoMov ON venTipoMov.venTipoMov = venMovimientos.venTipoMov
		INNER JOIN genMovCuotas ON genMovCuotas.Asiento_Id = venMovimientos.venMovimientos
		INNER JOIN conAsientos ON  conAsientos.conAsientos = venMovimientos.venMovimientos
	WHERE
		venTipoMov.Signo  = -@Signo and 
		venMovimientos.Cliente_Id = @Cliente and 
		conAsientos.Anulado= 0 AND 
		conAsientos.Posteado = 1 and 
		genAsiSegmentos.Empresa_Id = @Empresa_Id and 
		conAsientos.Moneda_Id = @Moneda AND 
		genMovCuotas.Saldo > 0 
		ORDER BY 1,2

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venAsiCierre.sql*/
DROP PROCEDURE venAsiCierreGuardar
GO
CREATE PROCEDURE venAsiCierreGuardar
(
@pAsiento_Id bigint,
@pFecha qFecha,
@pMoneda_Id varchar(3)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venAsiCierre WHERE (Asiento_Id = @pAsiento_Id)))
BEGIN 
	UPDATE venAsiCierre
	SET	Fecha = @pFecha,
		Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id)
	WHERE (Asiento_Id = @pAsiento_Id)
END 
ELSE 
BEGIN 
	INSERT INTO venAsiCierre
	(
		Asiento_Id,
		Fecha,
		Moneda_Id
		
	)
	VALUES 
	(
		@pAsiento_Id,
		@pFecha,
		dbo.FuncFKgenMonedas(@pMoneda_Id)
	)
END 

GO

DROP PROCEDURE venAsiCierreDatos
GO
CREATE PROCEDURE venAsiCierreDatos
(
@pFecha DateTime, 
@pMoneda_id VarChar(3), 
@pEmpresa_Id Int
)
AS
SET NOCOUNT ON 

DECLARE @Asiento_id bigint
SET @Asiento_id = (SELECT venAsiCierre.Asiento_Id 
		FROM venAsiCierre  inner join conAsientos ON
		venAsiCierre.Asiento_Id = conAsientos.conAsientos
		WHERE venAsiCierre.Fecha= @pFecha and 
			venAsiCierre.Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_id) and 
			conAsientos.Empresa_Id = @pEmpresa_Id)
  


SELECT venAsiCierre.Asiento_Id , conAsientos.Empresa_Id, venAsiCierre.Fecha, 
	conAsientos.FechaRegistro, conAsientos.Cambio, conAsientos.CambioMonedaOriginal, 
	conAsientos.Anulado, conAsientos.Observaciones, conAsientos.Posteado,
    venAsiCierre.Fecha, genMonedas.Moneda_Id,  	genMonedas.Descripcion as DescripcionMonedas
FROM venAsiCierre 
INNER JOIN conAsientos  ON conAsientos.conAsientos = venAsiCierre.Asiento_Id
INNER JOIN genMonedas  ON genMonedas.genMonedas = venAsiCierre.Moneda_Id
WHERE venAsiCierre.Fecha= @pFecha and 
	genMonedas.Moneda_Id = @pMoneda_id and 
	conAsientos.Empresa_Id = @pEmpresa_Id

Exec venAsiCierreCrDatos @Asiento_id, null		
 
RETURN @@Error 

GO

DROP PROCEDURE venAsiCierreEliminar
GO
CREATE PROCEDURE venAsiCierreEliminar
(
@Asiento_Id bigInt
)
AS
SET NOCOUNT ON 

DELETE FROM venAsiCierre 
WHERE venAsiCierre.Asiento_Id = @Asiento_Id
 
RETURN @@Error 

GO


-- Asiento a Insertar
drop PROCEDURE venAsiCierreCalculoDatos
go
-- venAsiCierreCalculoDatos '20191130',1
CREATE PROCEDURE venAsiCierreCalculoDatos (
@Fecha DateTime, 
@Empresa_Id Int
)
AS

SELECT @Fecha as Fecha

Select Cliente_Id, RazonSocial, Cuenta_id, Descripcion, 
	Moneda_id, Sum(Importe) as Importe, 
	SUM(ImporteMonedaOriginal) AS ImporteMonedaOriginal
	
from (

SELECT genMonedas.Moneda_id, venClientes.Cliente_Id, venClientes.RazonSocial,
	conCuentas.Cuenta_id,  conCuentas.Descripcion, 
	SUM(conMovCont.Importe * (-2*conMovCont.TipoMov+3)) as Importe, 
	SUM(conMovCont.ImporteMonedaOriginal * (-2*conMovCont.TipoMov+3)) as ImporteMonedaOriginal 
FROM venClientes INNER join venMovimientos ON
venClientes.genEntidades = venMovimientos.Cliente_Id
INNER JOIN conAsientos ON
conAsientos.conAsientos = venMovimientos.venMovimientos
INNER JOIN conMovCont ON
conMovCont.conAsientos =conAsientos.conAsientos AND 
conMovCont.Clase IN ('CLI', 'ANTCL')
INNER JOIN conCuentas ON 
conCuentas.conCuentas = conMovCont.Cuenta_id 
INNER JOIN genMonedas ON 
genMonedas.genMonedas = conCuentas.Moneda_id 
INNER JOIn genEmpresas ON
genEmpresas.genEmpresas = @Empresa_Id AND 
genEmpresas.Moneda_Id != genMonedas.genMonedas
WHERE 
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha <= @Fecha 
GROUP BY genMonedas.Moneda_id, venClientes.Cliente_Id, venClientes.RazonSocial,
	conCuentas.Cuenta_id,  conCuentas.Descripcion
UNION ALL
SELECT  genMonedas.Moneda_id,venClientes.Cliente_Id, venClientes.RazonSocial,
	conCuentas.Cuenta_id,  conCuentas.Descripcion,
	SUM(conMovCont.Importe * (-2*conMovCont.TipoMov+3)) as Importe, 
	SUM(conMovCont.ImporteMonedaOriginal * (-2*conMovCont.TipoMov+3)) as ImporteMonedaOriginal 
FROM venClientes INNER join venMovimientos ON
venClientes.genEntidades = venMovimientos.Cliente_Id
INNER JOIN genCancMov ON 
genCancMov.Asiento_Id = venMovimientos.venMovimientos
INNER JOIN conAsientos ON
conAsientos.conAsientos = genCancMov.AsientoApli_Id
INNER JOIN conMovCont ON
conMovCont.conAsientos =conAsientos.conAsientos AND 
conMovCont.Clase IN ('CLI', 'ANTCL')
INNER JOIN conCuentas ON 
conCuentas.conCuentas = conMovCont.Cuenta_id 
INNER JOIN genMonedas ON 
genMonedas.genMonedas = conCuentas.Moneda_id 
INNER JOIn genEmpresas ON
genEmpresas.genEmpresas = @Empresa_Id AND 
genEmpresas.Moneda_Id != genMonedas.genMonedas

WHERE 
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha <= @Fecha 
GROUP BY venClientes.Cliente_Id, venClientes.RazonSocial,
	conCuentas.Cuenta_id,  conCuentas.Descripcion, genMonedas.Moneda_id
UNION ALL
SELECT  genMonedas.Moneda_id,venClientes.Cliente_Id, venClientes.RazonSocial,
	conCuentas.Cuenta_id,  conCuentas.Descripcion,
	SUM(conMovCont.Importe * (-2*conMovCont.TipoMov+3)) as Importe, 
	SUM(conMovCont.ImporteMonedaOriginal * (-2*conMovCont.TipoMov+3)) as ImporteMonedaOriginal 
FROM venClientes INNER join venMovimientos ON
venClientes.genEntidades = venMovimientos.Cliente_Id
INNER JOIN genCancMov ON 
genCancMov.Asiento_Id = venMovimientos.venMovimientos
INNER JOIN conAsientos ON
conAsientos.conAsientos = genCancMov.AsieDifCambio_Id
INNER JOIN conMovCont ON
conMovCont.conAsientos =conAsientos.conAsientos AND 
conMovCont.Clase IN ('CLI', 'ANTCL')
INNER JOIN conCuentas ON 
conCuentas.conCuentas = conMovCont.Cuenta_id 
INNER JOIN genMonedas ON 
genMonedas.genMonedas = conCuentas.Moneda_id 
INNER JOIn genEmpresas ON
genEmpresas.genEmpresas = @Empresa_Id AND 
genEmpresas.Moneda_Id != genMonedas.genMonedas

WHERE 
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha <= @Fecha 
GROUP BY venClientes.Cliente_Id, venClientes.RazonSocial,
	conCuentas.Cuenta_id,  conCuentas.Descripcion, genMonedas.Moneda_id
UNION ALL
SELECT genMonedas.Moneda_id,venClientes.Cliente_Id, venClientes.RazonSocial,
	conCuentas.Cuenta_id,  conCuentas.Descripcion, 
	SUM(conMovCont.Importe * (-2*conMovCont.TipoMov+3)) as Importe, 
	SUM(conMovCont.ImporteMonedaOriginal * (-2*conMovCont.TipoMov+3)) as ImporteMonedaOriginal 
FROM venClientes INNER join venAsiCierreCr ON
venClientes.genEntidades = venAsiCierreCr.Cliente_Id
INNER JOIN conAsientos ON
conAsientos.conAsientos = venAsiCierreCr.Asiento_id
INNER JOIN conMovCont ON
conMovCont.conAsientos =conAsientos.conAsientos AND 
conMovcont.Renglon = venAsiCierreCr.conRenglon and 
conMovCont.Clase IN ('CLI', 'ANTCL')
INNER JOIN conCuentas ON 
conCuentas.conCuentas = conMovCont.Cuenta_id 
INNER JOIN genMonedas ON 
genMonedas.genMonedas = conCuentas.Moneda_id 
INNER JOIn genEmpresas ON
genEmpresas.genEmpresas = @Empresa_Id AND 
genEmpresas.Moneda_Id != genMonedas.genMonedas

WHERE 
	conAsientos.Anulado = 0 and 
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Fecha <= @Fecha
GROUP BY venClientes.Cliente_Id, venClientes.RazonSocial,
	conCuentas.Cuenta_id,  conCuentas.Descripcion, genMonedas.Moneda_id) as xxx
GROUP BY Cliente_Id, RazonSocial, Cuenta_id, Descripcion, 
	Moneda_id	
ORDER BY 1	,2 


GO

DROP PROCEDURE venAsiCierreDatosCierre
GO
CREATE PROCEDURE venAsiCierreDatosCierre
(
@pFecha DateTime, 
@Empresa_Id Int
)
AS
SET NOCOUNT ON 

SELECT @pFecha as Fecha 



SELECT venAsiCierre.Asiento_Id , conAsientos.Empresa_Id, venAsiCierre.Fecha, 
	conAsientos.Anulado, genMonedas.Moneda_Id, 
	genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C,
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C
FROM venAsiCierre 
INNER JOIN conAsientos  ON conAsientos.conAsientos = venAsiCierre.Asiento_Id
INNER JOIN genMonedas  ON genMonedas.genMonedas = venAsiCierre.Moneda_Id
inner join genAsiSegmentos ON
genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
inner join genSegmentos ON
genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
WHERE venAsiCierre.Fecha between @pFecha  and DATEADD(dd,1,@pFecha)  and 
conAsientos.Anulado = 0 and 
conAsientos.Empresa_Id = @Empresa_Id

 
RETURN @@Error 

GO





Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venAsiCierreCr.sql*/
DROP PROCEDURE venAsiCierreCrGuardar
GO
CREATE PROCEDURE venAsiCierreCrGuardar
(
@pAsiento_Id bigint,
@pconRenglon int,
@pCliente_Id VarChar(15)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venAsiCierreCr WHERE (Asiento_Id = @pAsiento_Id) AND (conRenglon = @pconRenglon)))
BEGIN 
	UPDATE venAsiCierreCr
	SET		Cliente_Id = dbo.FuncFKvenClientes(@pCliente_Id)
	WHERE (Asiento_Id = @pAsiento_Id) AND (conRenglon = @pconRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO venAsiCierreCr
	(
		Asiento_Id,
		conRenglon,
		Cliente_Id
	)
	VALUES 
	(
		@pAsiento_Id,
		@pconRenglon,
		dbo.FuncFKvenClientes(@pCliente_Id)
	)
END 

GO

DROP PROCEDURE venAsiCierreCrDatos
GO
CREATE PROCEDURE venAsiCierreCrDatos
(
@pAsiento_Id bigint,
@pconRenglon int= NULL
)
AS
SET NOCOUNT ON 

SELECT 
	venAsiCierre.Asiento_Id, 
	venClientes.Cliente_Id, venClientes.RazonSocial as DescripcionProveedores,
	venAsiCierreCr.conRenglon, 
	conCuentas.Cuenta_Id, conCuentas.Descripcion DescripcionCuenta,
	conCentro1.Centro1_Id, conCentro1.Descripcion DescripcionCentro1,
	conCentro2.Centro2_Id, conCentro2.Descripcion DescripcionCentro2,
	conMovCont.LeyendaLibroMayor, conMovCont.Importe, 
	conMovCont.ImporteMonedaOriginal, conMovCont.Tipomov,
	conMovCont.Clase
FROM venAsiCierreCr 
INNER JOIN venAsiCierre  ON (venAsiCierre.Asiento_Id = venAsiCierreCr.Asiento_Id)
INNER JOIN conMovCont  ON (conMovCont.conAsientos = venAsiCierreCr.Asiento_Id) AND (conMovCont.Renglon = venAsiCierreCr.conRenglon)
INNER JOIN conMovCont conMovCont2 ON (conMovCont2.conAsientos = venAsiCierreCr.Asiento_Id) AND (conMovCont2.Renglon = venAsiCierreCr.conRenglon)
INNER JOIN venClientes  ON (venClientes.genEntidades = venAsiCierreCr.Cliente_Id)
INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_id
INNER JOIN conCentro1 ON conCentro1.conCentro1 = conMovCont.Centro1_id
INNER JOIN conCentro2 ON conCentro2.conCentro2 = conMovCont.Centro2_id
WHERE venAsiCierreCr.Asiento_Id = @pAsiento_Id AND		
venAsiCierreCr.conRenglon = IsNull(@pconRenglon, venAsiCierreCr.conRenglon)
 
RETURN @@Error 

GO

DROP PROCEDURE venAsiCierreCrEliminar
GO
CREATE PROCEDURE venAsiCierreCrEliminar
(
@pAsiento_Id bigint,
@pconRenglon int=NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venAsiCierreCr 
WHERE Asiento_Id = @pAsiento_Id AND 
venAsiCierreCr.conRenglon = IsNull(@pconRenglon, venAsiCierreCr.conRenglon)
 
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\VenBonifTemporal.sql*/
DROP PROCEDURE venBonifTemporalGuardar
GO
CREATE PROCEDURE venBonifTemporalGuardar
(
@pvenBonifTemporal Int,
@pDescripcion VarChar(150),
@pEmpresa_Id int = NULL,
@pFechaDesde datetime,
@pFechaHasta datetime,
@pSucursalDesde varchar(15),
@pSucursalHasta varchar(15),
@pClienteDesde varchar(15),
@pClienteHasta varchar(15),
@pSucursalClieDesde int,
@pSucursalClieHasta int,
@pTipoClieDesde varchar(5),
@pTipoClieHasta varchar(5),
@pProductoDesde varchar(25),
@pProductoHasta varchar(25),
@pTipoProductoDesde varchar(5),
@pTipoProductoHasta varchar(5),
@pBonificacion varchar(max),
@pFamiliaDesde varchar(15),
@pFamiliaHasta varchar(15),
@pGrupoDesde varchar(15),
@pGrupoHasta varchar(15),
@pUsuario_Id int, 
@pInactivo Bit, 
@pPosteado Bit, 
@pPrioridad Int
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM venBonifTemporal WHERE venBonifTemporal = @pvenBonifTemporal ))
BEGIN 
	UPDATE venBonifTemporal
	SET		@lIdentidad = venBonifTemporal,
		Descripcion = @pDescripcion,
		Empresa_Id = @pEmpresa_Id,
		FechaDesde = @pFechaDesde,
		FechaHasta = @pFechaHasta,
		SucursalDesde = @pSucursalDesde,
		SucursalHasta = @pSucursalHasta,
		ClienteDesde = @pClienteDesde,
		ClienteHasta = @pClienteHasta,
		SucursalClieDesde = @pSucursalClieDesde,
		SucursalClieHasta = @pSucursalClieHasta,
		TipoClieDesde = @pTipoClieDesde,
		TipoClieHasta = @pTipoClieHasta,
		ProductoDesde = @pProductoDesde,
		ProductoHasta = @pProductoHasta,
		TipoProductoDesde = @pTipoProductoDesde,
		TipoProductoHasta = @pTipoProductoHasta,
		Bonificacion = @pBonificacion,
		FamiliaDesde = @pFamiliaDesde,
		FamiliaHasta = @pFamiliaHasta,
		GrupoDesde = @pGrupoDesde,
		GrupoHasta = @pGrupoHasta,
		FechaRegistro = dbo.FechaActual() ,
		Usuario_Id = @pUsuario_Id, 
		Inactivo = @pInactivo , 
		Posteado = @pPosteado, 
		Prioridad = @pPrioridad
	WHERE 
		venBonifTemporal = @pvenBonifTemporal
END 
ELSE 
BEGIN 
	INSERT INTO venBonifTemporal
	(
		Descripcion,
		Empresa_Id,
		FechaDesde,
		FechaHasta,
		SucursalDesde,
		SucursalHasta,
		ClienteDesde,
		ClienteHasta,
		SucursalClieDesde,
		SucursalClieHasta,
		TipoClieDesde,
		TipoClieHasta,
		ProductoDesde,
		ProductoHasta,
		TipoProductoDesde,
		TipoProductoHasta,
		Bonificacion,
		FamiliaDesde,
		FamiliaHasta,
		GrupoDesde,
		GrupoHasta,
		FechaRegistro,
		Usuario_Id, 
		Inactivo,
		Posteado, 
		Prioridad
	)
	VALUES 
	(
		@pDescripcion,
		@pEmpresa_Id,
		@pFechaDesde,
		@pFechaHasta,
		@pSucursalDesde,
		@pSucursalHasta,
		@pClienteDesde,
		@pClienteHasta,
		@pSucursalClieDesde,
		@pSucursalClieHasta,
		@pTipoClieDesde,
		@pTipoClieHasta,
		@pProductoDesde,
		@pProductoHasta,
		@pTipoProductoDesde,
		@pTipoProductoHasta,
		@pBonificacion,
		@pFamiliaDesde,
		@pFamiliaHasta,
		@pGrupoDesde,
		@pGrupoHasta,
		dbo.FechaActual(),
		@pUsuario_Id, 
		@pInactivo,
		@pPosteado, 
		@pPrioridad
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 
GO

DROP PROCEDURE venBonifTemporalDatosId
GO

CREATE PROCEDURE venBonifTemporalDatosId
(
	@pvenBonifTemporal Int
)
AS

SELECT 
	venBonifTemporal.venBonifTemporal,  venBonifTemporal.Descripcion,
	genSegmentos.Segmento_Id, venBonifTemporalSegmento.Segmento1N, 
	venBonifTemporalSegmento.Segmento2N, venBonifTemporalSegmento.Segmento3N,
	venBonifTemporalSegmento.Segmento4N, venBonifTemporalSegmento.Segmento1C,
	venBonifTemporalSegmento.Segmento2C, venBonifTemporalSegmento.Segmento3C,
	venBonifTemporalSegmento.Segmento4C,
	Cast(case When venBonifTemporal.Empresa_Id is null then 1 else 0 end as bit) as PTodasLasEmpresas,
	FechaDesde,FechaHasta,SucursalDesde,SucursalHasta,ClienteDesde,ClienteHasta,
	SucursalClieDesde,SucursalClieHasta,TipoClieDesde,TipoClieHasta,ProductoDesde,ProductoHasta,
	TipoProductoDesde,TipoProductoHasta,Bonificacion,FamiliaDesde,FamiliaHasta,
	GrupoDesde,GrupoHasta,FechaRegistro,genUsuarios.Usuario_Id, 
	venBonifTemporal.Inactivo, venBonifTemporal.Posteado, venBonifTemporal.Prioridad
From venBonifTemporal
inner join genUsuarios ON venBonifTemporal.Usuario_Id = genUsuarios.genUsuarios
inner join venBonifTemporalSegmento ON venBonifTemporalSegmento.venBonifTemporal = venBonifTemporal.venBonifTemporal
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = venBonifTemporalSegmento.Segmento_Id
where
	venBonifTemporal.venBonifTemporal = @pvenBonifTemporal

GO
DROP Procedure venBonifTemporalDatos
GO

CREATE Procedure venBonifTemporalDatos(
@pEmpresa_Id int, 
@pSegmento_id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
as

Declare @pVenBonifTemporal Int

set @pVenBonifTemporal = (SELECT venBonifTemporal 
	from venBonifTemporalSegmento 
	inner join  genSegmentos ON  genSegmentos.genSegmentos = venBonifTemporalSegmento.Segmento_Id
	WHERE
		genSegmentos.Segmento_Id = @pSegmento_id AND 
		venBonifTemporalSegmento.Segmento1C = @pSegmento1C AND 
		venBonifTemporalSegmento.Segmento2C = @pSegmento2C AND 
		venBonifTemporalSegmento.Segmento3C = @pSegmento3C AND 
		venBonifTemporalSegmento.Segmento4C = @pSegmento4C AND 
		venBonifTemporalSegmento.Segmento1N = @pSegmento1N AND 
		venBonifTemporalSegmento.Segmento2N = @pSegmento2N AND 
		venBonifTemporalSegmento.Segmento3N = @pSegmento3N AND 
		venBonifTemporalSegmento.Segmento4N = @pSegmento4N AND 
		venBonifTemporalSegmento.Empresa_Id = @pEmpresa_Id)

Exec venBonifTemporalDatosId @pVenBonifTemporal

GO



DROP PROCEDURE venBonifTemporalEliminar
GO

CREATE PROCEDURE venBonifTemporalEliminar
(
	@pvenBonifTemporal Int
)
AS

Delete from venBonifTemporal WHERE venBonifTemporal = @pvenBonifTemporal
GO

DROP PROCEDURE venBonifTemporalHayOtra
GO

CREATE PROCEDURE venBonifTemporalHayOtra(
	
	@pvenBonifTemporal Int,
	@pEmpresa_Id int = NULL,
	@pFechaDesde datetime,
	@pFechaHasta datetime,
	@pSucursalDesde varchar(15),
	@pSucursalHasta varchar(15),
	@pClienteDesde varchar(15),
	@pClienteHasta varchar(15),
	@pSucursalClieDesde int,
	@pSucursalClieHasta int,
	@pTipoClieDesde varchar(5),
	@pTipoClieHasta varchar(5),
	@pProductoDesde varchar(25),
	@pProductoHasta varchar(25),
	@pTipoProductoDesde varchar(5),
	@pTipoProductoHasta varchar(5),
	@pBonificacion varchar(max),
	@pFamiliaDesde varchar(15),
	@pFamiliaHasta varchar(15),
	@pGrupoDesde varchar(15),
	@pGrupoHasta varchar(15)
)
AS

SELECT dbo.Segmento(venBonifTemporalSegmento.Segmento_Id, 
	venBonifTemporalSegmento.Segmento1C, venBonifTemporalSegmento.Segmento2C,
	venBonifTemporalSegmento.Segmento3C, venBonifTemporalSegmento.Segmento4C,
	venBonifTemporalSegmento.Segmento1N,venBonifTemporalSegmento.Segmento2N,
	venBonifTemporalSegmento.Segmento3N,venBonifTemporalSegmento.Segmento4N) AS Bonif,
	venBonifTemporal.Descripcion,
	genUsuarios.Apellido_y_Nombres Usuario 
	 FROM venBonifTemporal INNER JOIN  genUsuarios ON
	 venBonifTemporal.Usuario_Id = genUsuarios.genUsuarios
	 INNER JOIN venBonifTemporalSegmento ON 
		venBonifTemporalSegmento.venBonifTemporal =venBonifTemporal.venBonifTemporal
		where 
			venBonifTemporal.Inactivo = 0 AND 
			venBonifTemporal.Posteado = 1 AND 
			isnull(venBonifTemporal.Empresa_Id,0) = @pEmpresa_Id and 
			venBonifTemporal.venBonifTemporal != @pvenBonifTemporal and 
	 (ClienteDesde BETWEEN @pClienteDesde and @pClienteHasta  or 
	 ClienteHasta BETWEEN @pClienteDesde and @pClienteHasta or 
	 (ClienteDesde < @pClienteDesde and ClienteHasta > @pClienteHasta )) and  
	 (TipoClieDesde BETWEEN @pTipoClieDesde and @pTipoClieHasta  or 
	 TipoClieHasta BETWEEN @pTipoClieDesde and @pTipoClieHasta or 
	 (TipoClieDesde < @pTipoClieDesde and TipoClieHasta > @pTipoClieHasta )) and  
	 (SucursalDesde BETWEEN @pSucursalDesde and @pSucursalHasta or 
	 SucursalHasta BETWEEN @pSucursalDesde and @pSucursalHasta or 
	 (SucursalDesde < @pSucursalDesde and SucursalHasta > @pSucursalHasta )) and  
	 (ProductoDesde BETWEEN @pProductoDesde and @pProductoHasta or 
	 ProductoHasta BETWEEN @pProductoDesde and @pProductoHasta or  
	 (ProductoDesde < @pProductoDesde and ProductoHasta > @pProductoHasta )) and  
	 (TipoProductoDesde BETWEEN @pTipoProductoDesde and @pTipoProductoHasta  or 
	 TipoProductoHasta BETWEEN @pTipoProductoDesde and @pTipoProductoHasta or 
	 (TipoProductoDesde < @pTipoProductoDesde and TipoProductoHasta > @pTipoProductoHasta )) and  
	 (FechaDesde BETWEEN @pFechaDesde and @pFechaHasta or 
	 FechaHasta BETWEEN @pFechaDesde and @pFechaHasta or  
	 (FechaDesde < @pFechaDesde and FechaHasta > @pFechaHasta ))  and 
	 (FamiliaDesde BETWEEN @pFamiliaDesde and @pFamiliaHasta  or 
	 FamiliaHasta BETWEEN @pFamiliaDesde and @pFamiliaHasta or 
	 (FamiliaDesde < @pFamiliaDesde and FamiliaHasta > @pFamiliaHasta )) and  
	 (GrupoDesde BETWEEN @pGrupoDesde and @pGrupoHasta or 
	 GrupoHasta BETWEEN @pGrupoDesde and @pGrupoHasta or 
	 (GrupoDesde < @pGrupoDesde and GrupoHasta > @pGrupoHasta )) 
GO
DROP Procedure QueBonif
GO

CREATE Procedure QueBonif(
	@Empresa_Id int,
	@Cliente_Id VarChar(15),
	@SucursalClie Int,
	@Producto_Id VarChar(25), 
	@Fecha DateTime, 
	@Sucursal VarChar(4)
)

as

SELECT venBonifTemporal.Prioridad, venBonifTemporal.FechaDesde, 
venBonifTemporal.Bonificacion, venClientes.Cliente_Id, venClieHabitual.Sucursal as SucursalClie,
	stkProductos.Producto_Id, GETDATE() as Fecha, genSucursalesEmpr.Sucursal, 
	venBonifTemporal.ClienteDesde, venBonifTemporal.ClienteHasta, 
	venBonifTemporal.FamiliaDesde, venBonifTemporal.FamiliaHasta, 
	venBonifTemporal.GrupoDesde, venBonifTemporal.GrupoHasta, 
	venBonifTemporal.ProductoDesde, venBonifTemporal.ProductoHasta, 
	venBonifTemporal.TipoProductoDesde, venBonifTemporal.TipoProductoHasta,
	venBonifTemporal.FechaHasta, venBonifTemporal.venBonifTemporal
From venBonifTemporal 
INNER JOIN venClientes ON  venClientes.Cliente_Id = @Cliente_Id 
INNER JOIN venClieHabitual ON  venClieHabitual.genEntidades = venClientes.genEntidades and 
venClieHabitual.Sucursal = @SucursalClie 
INNER JOIN venTiposClie ON  venTiposClie.venTiposClie = venClieHabitual.TipoClie_Id
INNER JOIN stkProductos on stkProductos.Producto_Id = @Producto_Id
INNER JOIN stkTipos ON  stkTipos.stkTipos = stkProductos.Tipo_Id
INNER JOIN genSucursalesEmpr ON genSucursalesEmpr.Sucursal = @Sucursal
Left JOIN stkFamilias ON  stkFamilias.stkFamilias = stkProductos.Familia_Id
Left JOIN stkGrupos ON  stkGrupos.stkGrupos = stkProductos.Grupo_Id
Where
	venBonifTemporal.Inactivo = 0 and 
	venBonifTemporal.Posteado = 1 and 
	isnull(venBonifTemporal.Empresa_Id,@Empresa_Id) =  @Empresa_Id and
	@Fecha between venBonifTemporal.FechaDesde and venBonifTemporal.FechaHasta and
	venClientes.Cliente_Id between venBonifTemporal.ClienteDesde and venBonifTemporal.ClienteHasta and
	venClieHabitual.Sucursal Between venBonifTemporal.SucursalClieDesde and venBonifTemporal.SucursalClieHasta and
	venTiposClie.TipoClie_Id  Between venBonifTemporal.TipoClieDesde and venBonifTemporal.TipoClieHasta and 
	stkTipos.Tipo_Id Between venBonifTemporal.TipoProductoDesde and venBonifTemporal.TipoProductoHasta and 
	ISNULL(stkFamilias.Familia_Id,' ') between venBonifTemporal.FamiliaDesde and venBonifTemporal.FamiliaHasta and 
	ISNULL(stkGrupos.Grupo_Id,' ') between venBonifTemporal.GrupoDesde and venBonifTemporal.GrupoHasta and 
	stkProductos.Producto_Id BETWEEN venBonifTemporal.ProductoDesde AND venBonifTemporal.ProductoHasta AND 
	genSucursalesEmpr.Sucursal Between venBonifTemporal.SucursalDesde and venBonifTemporal.SucursalHasta
ORDER BY 1, 2 Desc
	
go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venBonifTemporalSegmento.sql*/
DROP PROCEDURE venBonifTemporalSegmentoGuardar
GO
CREATE PROCEDURE venBonifTemporalSegmentoGuardar
(
@pEmpresa_Id int,
@pSegmento_Id varchar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pvenBonifTemporal int,
@pTieneAutomatico bit

)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venBonifTemporalSegmento WHERE (Empresa_Id = @pEmpresa_Id) AND 
	(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND (Segmento1N = @pSegmento1N) AND (Segmento2N = @pSegmento2N) AND (Segmento3N = @pSegmento3N) AND (Segmento4N = @pSegmento4N) AND (Segmento1C = @pSegmento1C) AND (Segmento2C = @pSegmento2C) AND (Segmento3C = @pSegmento3C) AND (Segmento4C = @pSegmento4C)))
BEGIN 
	UPDATE venBonifTemporalSegmento
	SET		Empresa_Id = @pEmpresa_Id,
		venBonifTemporal = @pvenBonifTemporal
	WHERE (Empresa_Id = @pEmpresa_Id) AND (Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND (Segmento1N = @pSegmento1N) AND (Segmento2N = @pSegmento2N) AND (Segmento3N = @pSegmento3N) AND (Segmento4N = @pSegmento4N) AND (Segmento1C = @pSegmento1C) AND (Segmento2C = @pSegmento2C) AND (Segmento3C = @pSegmento3C) AND (Segmento4C = @pSegmento4C)
END 
ELSE 
BEGIN 
	If (@pTieneAutomatico=1)
		BEGIN
		SET @pSegmento1N = (SELECT MAX( venBonifTemporalSegmento.Segmento1N)+1 AS Segmento1N 
				FROM venBonifTemporalSegmento
					Where				
					venBonifTemporalSegmento.Segmento1N > 0 and 
					venBonifTemporalSegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) AND 
					venBonifTemporalSegmento.Segmento2N = @pSegmento2N AND 
					venBonifTemporalSegmento.Segmento3N = @pSegmento3N AND 
					venBonifTemporalSegmento.Segmento4N = @pSegmento4N AND 
					venBonifTemporalSegmento.Segmento1C = @pSegmento1C AND 
					venBonifTemporalSegmento.Segmento2C = @pSegmento2C AND 
					venBonifTemporalSegmento.Segmento3C = @pSegmento3C AND 
					venBonifTemporalSegmento.Segmento4C = @pSegmento4C And
					venBonifTemporalSegmento.Empresa_Id = @pEmpresa_Id)

		If @pSegmento1N Is Null
			SET @pSegmento1N = (SELECT genContadorSegmento.PrimerNumero AS Segmento1N 
				From genContadorSegmento Where
					genContadorSegmento.Empresa_Id = @pEmpresa_Id And
							(genContadorSegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
							genContadorSegmento.Segmento2N = @pSegmento2N AND 
							genContadorSegmento.Segmento3N = @pSegmento3N AND 
							genContadorSegmento.Segmento4N = @pSegmento4N AND 
							genContadorSegmento.Segmento1C = @pSegmento1C AND 
							genContadorSegmento.Segmento2C = @pSegmento2C AND 
							genContadorSegmento.Segmento3C = @pSegmento3C AND 
							genContadorSegmento.Segmento4C = @pSegmento4C
					)

		-- esto solo pasa si empieza en 1 esta prendido
			if @pSegmento1N is null or @pSegmento1N < 0
			begin
				set @pSegmento1N = 1
			end	
		end

	INSERT INTO venBonifTemporalSegmento
	(
		Empresa_Id,
		Segmento_Id,
		Segmento1N,
		Segmento2N,
		Segmento3N,
		Segmento4N,
		Segmento1C,
		Segmento2C,
		Segmento3C,
		Segmento4C,
		venBonifTemporal
	)
	VALUES 
	(
		@pEmpresa_Id,
		dbo.FuncFKgenSegmentos(@pSegmento_Id),
		@pSegmento1N,
		@pSegmento2N,
		@pSegmento3N,
		@pSegmento4N,
		@pSegmento1C,
		@pSegmento2C,
		@pSegmento3C,
		@pSegmento4C,
		@pvenBonifTemporal
	)
END 

SELECT @pSegmento1N as RetVal

GO

DROP PROCEDURE venBonifTemporalSegmentoDatos
GO
CREATE PROCEDURE venBonifTemporalSegmentoDatos
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20)
)
AS
SET NOCOUNT ON 

SELECT venBonifTemporalSegmento.Empresa_Id, genSegmentos.Segmento_Id,  venBonifTemporalSegmento.Segmento1N,
	venBonifTemporalSegmento.Segmento2N, venBonifTemporalSegmento.Segmento3N, venBonifTemporalSegmento.Segmento4N, venBonifTemporalSegmento.Segmento1C,
	venBonifTemporalSegmento.Segmento2C, venBonifTemporalSegmento.Segmento3C, venBonifTemporalSegmento.Segmento4C, venBonifTemporalSegmento.venBonifTemporal, 
	genSegmentos.TieneColumnaAutomatica
FROM venBonifTemporalSegmento 
INNER JOIN genSegmentos  ON (genSegmentos.genSegmentos = venBonifTemporalSegmento.Segmento_Id)
WHERE (Empresa_Id = @pEmpresa_Id)
AND (genSegmentos.Segmento_Id = @pSegmento_Id)
AND (Segmento1N = @pSegmento1N)
AND (Segmento2N = @pSegmento2N)
AND (Segmento3N = @pSegmento3N)
AND (Segmento4N = @pSegmento4N)
AND (Segmento1C = @pSegmento1C)
AND (Segmento2C = @pSegmento2C)
AND (Segmento3C = @pSegmento3C)
AND (Segmento4C = @pSegmento4C)
 
RETURN @@Error 

GO

DROP PROCEDURE venBonifTemporalSegmentoEliminar
GO
CREATE PROCEDURE venBonifTemporalSegmentoEliminar
(
@pEmpresa_Id int,
@pSegmento_Id varchar(10),
@pSegmento1N int = NULL,
@pSegmento2N int = NULL,
@pSegmento3N int = NULL,
@pSegmento4N int = NULL,
@pSegmento1C varchar(20) = NULL,
@pSegmento2C varchar(20) = NULL,
@pSegmento3C varchar(20) = NULL,
@pSegmento4C varchar(20) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venBonifTemporalSegmento 
WHERE (Empresa_Id = @pEmpresa_Id)
AND (Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id))
AND (Segmento1N = ISNULL(@pSegmento1N, Segmento1N))
AND (Segmento2N = ISNULL(@pSegmento2N, Segmento2N))
AND (Segmento3N = ISNULL(@pSegmento3N, Segmento3N))
AND (Segmento4N = ISNULL(@pSegmento4N, Segmento4N))
AND (Segmento1C = ISNULL(@pSegmento1C, Segmento1C))
AND (Segmento2C = ISNULL(@pSegmento2C, Segmento2C))
AND (Segmento3C = ISNULL(@pSegmento3C, Segmento3C))
AND (Segmento4C = ISNULL(@pSegmento4C, Segmento4C))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venCamiones.sql*/
DROP PROCEDURE venCamionesGuardar
GO
CREATE PROCEDURE venCamionesGuardar
(
@pPatente_Id varchar(20),
@pPatente_Id_Nuevo varchar(20),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(35),
@pFormaEntrega_Id varchar(3) = NULL,
@pCargaMaxima qCantidadD8 = NULL,
@pTara qCantidadD8 = NULL,
@pMarca varchar(100) = NULL,
@pInspeccion qFecha = NULL,
@pEsAcoplado Sino,
@pInactivo Sino,
@pUsuario_Id int = NULL,
@pPosteado Sino,
@pNroPoliza VarChar(30) = NULL,
@pNombreAseg VarChar(50) = NULL,
@pConfVehicular VarChar(10) = NULL, 
@pModelo Int = NULL, 
@pTipoPermisoSCT VarChar(6) = NULL,
@pNroPermisoSCT VarChar(50) = NULL, 
@pPropArre_Id VarChar(15) = null,
@pAseguraMedAmb VarChar(50) = null,
@pPolizaMedAmbiente VarChar(30) = null,
@pAseguraCarga VarChar(50) = null,
@pPolizaCarga VarChar(30) = null,
@pPrimaSeguro Numeric(18,2) = null
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM venCamiones WHERE (Patente_Id = @pPatente_Id)))
BEGIN 
	UPDATE venCamiones
	SET		@lIdentidad = venCamiones,
		Patente_Id = @pPatente_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		FormaEntrega_Id = dbo.FuncFKvenFormaEntrega(@pFormaEntrega_Id),
		CargaMaxima = @pCargaMaxima,
		Tara = @pTara,
		Marca = @pMarca,
		Inspeccion = @pInspeccion,
		EsAcoplado = @pEsAcoplado,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado, 
		NroPoliza = @pNroPoliza ,
		NombreAseg = @pNombreAseg,
		ConfVehicular= @pConfVehicular, 
		Modelo = @pModelo , 
		TipoPermisoSCT = @pTipoPermisoSCT,
		NroPermisoSCT = @pNroPermisoSCT, 
		PropArre_Id = dbo.FuncFKvenPropietarioArrenda(@pPropArre_Id),
		AseguraMedAmb = @pAseguraMedAmb ,
		PolizaMedAmbiente = @pPolizaMedAmbiente,
		AseguraCarga = @pAseguraCarga,
		PolizaCarga = @pPolizaCarga,
		PrimaSeguro = @pPrimaSeguro 
	WHERE (Patente_Id = @pPatente_Id)
END 
ELSE 
BEGIN 
	INSERT INTO venCamiones
	(
		Patente_Id,
		Empresa_Id,
		Descripcion,
		FormaEntrega_Id,
		CargaMaxima,
		Tara,
		Marca,
		Inspeccion,
		EsAcoplado,
		Inactivo,
		Usuario_Id,
		Posteado,
		NroPoliza ,
		NombreAseg ,
		ConfVehicular, 
		Modelo ,
		TipoPermisoSCT,
		NroPermisoSCT,
		PropArre_Id ,
		AseguraMedAmb,
		PolizaMedAmbiente,
		AseguraCarga,
		PolizaCarga,
		PrimaSeguro
	)
	VALUES 
	(
		@pPatente_Id,
		@pEmpresa_Id,
		@pDescripcion,
		dbo.FuncFKvenFormaEntrega(@pFormaEntrega_Id),
		@pCargaMaxima,
		@pTara,
		@pMarca,
		@pInspeccion,
		@pEsAcoplado,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado,
		@pNroPoliza ,
		@pNombreAseg ,
		@pConfVehicular, 
		@pModelo , 
		@pTipoPermisoSCT,
		@pNroPermisoSCT,
		dbo.FuncFKvenPropietarioArrenda(@pPropArre_Id),
		@pAseguraMedAmb ,
		@pPolizaMedAmbiente,
		@pAseguraCarga,
		@pPolizaCarga,
		@pPrimaSeguro 

	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE venCamionesDatos
GO
CREATE PROCEDURE venCamionesDatos
(
@pPatente_Id varchar(20)
)
AS
SET NOCOUNT ON 

SELECT venCamiones.venCamiones, venCamiones.Patente_Id,  venCamiones.Empresa_Id,
	Cast( Case When venCamiones.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, venCamiones.Descripcion, 
	venFormaEntrega.FormaEntrega_Id, venFormaEntrega.RazonSocial,
	venCamiones.CargaMaxima, venCamiones.Tara, venCamiones.Marca, venCamiones.Inspeccion,
	venCamiones.EsAcoplado, venCamiones.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
	venCamiones.Posteado,venCamiones.NroPoliza , venCamiones.NombreAseg , venCamiones.ConfVehicular,  venCamiones.Modelo , 
	venCamiones.TipoPermisoSCT, venCamiones.NroPermisoSCT, 
	venPropietarioArrenda.PropArre_Id, venPropietarioArrenda.Nombre, 
	AseguraMedAmb,PolizaMedAmbiente,AseguraCarga,PolizaCarga,PrimaSeguro 
FROM venCamiones 
LEFT JOIN venFormaEntrega  ON (venFormaEntrega.venFormaEntrega = venCamiones.FormaEntrega_Id)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = venCamiones.Usuario_Id)
LEFT JOIN venPropietarioArrenda ON  venPropietarioArrenda.venPropietarioArrenda = venCamiones.PropArre_Id
WHERE (Patente_Id = @pPatente_Id)
 


  Declare @pidentity bigint= dbo.FuncFKvenCamiones(@pPatente_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'venCamiones'
 RETURN @@Error 

GO

DROP PROCEDURE venCamionesEliminar
GO
CREATE PROCEDURE venCamionesEliminar
(
@pPatente_Id varchar(20) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venCamiones 
WHERE (Patente_Id = @pPatente_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKvenCamiones
GO

CREATE FUNCTION FuncFKvenCamiones
(
@pPatente_Id varchar (20)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = venCamiones FROM venCamiones WHERE 
	Patente_Id = @pPatente_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venCancPendientes.sql*/
DROP PROCEDURE venCancPendientes
GO
CREATE PROCEDURE venCancPendientes(
	@FechaDesde DateTime, 
	@FechaHasta DateTime, 
	@Empresa Int
	)
AS

SELECT @FechaDesde as FechaDesde , @FechaHasta as FechaHasta
	
SELECT venMovimientos.venMovimientos 
FROM venMovimientos INNER JOIN conAsientosAnul ON
venMovimientos.venMovimientos = conAsientosAnul.Asiento_Id
inner join conAsientos ON
conAsientos.conAsientos = venMovimientos.venMovimientos
Where
conAsientos.Empresa_Id = @Empresa AND 
conAsientosAnul.TipoEnvio != 'A' AND
conAsientosAnul.FechaAnulacion between @FechaDesde and @FechaHasta
ORDER BY 1
GO	



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venCanjeNotas.sql*/
DROP PROCEDURE venCanjeNotasGuardar
GO
CREATE PROCEDURE venCanjeNotasGuardar
(
@pvenMovimientos bigint,
@pvenMovimientosNC bigint,
@pvenMovimientosFC bigint
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venCanjeNotas WHERE (venMovimientos = @pvenMovimientos)))
BEGIN 
	UPDATE venCanjeNotas
	SET		venMovimientosNC = @pvenMovimientosNC,
		venMovimientosFC = @pvenMovimientosFC
	WHERE (venMovimientos = @pvenMovimientos)
END 
ELSE 
BEGIN 
	INSERT INTO venCanjeNotas
	(
		venMovimientos,
		venMovimientosNC,
		venMovimientosFC
	)
	VALUES 
	(
		@pvenMovimientos,
		@pvenMovimientosNC,
		@pvenMovimientosFC
	)
END 

GO

DROP PROCEDURE venCanjeNotasDatos
GO
CREATE PROCEDURE venCanjeNotasDatos
(
@pvenMovimientos bigint
)
AS
SET NOCOUNT ON 

SELECT venCanjeNotas.venMovimientos, venCanjeNotas.venMovimientosNC, venCanjeNotas.venMovimientosFC
FROM venCanjeNotas 
WHERE (venMovimientos = @pvenMovimientos)
 
 RETURN @@Error 

GO

DROP PROCEDURE venCanjeNotasEliminar
GO
CREATE PROCEDURE venCanjeNotasEliminar
(
@pvenMovimientos bigint
)
AS
SET NOCOUNT ON 

DELETE FROM venCanjeNotas 
WHERE (venMovimientos = @pvenMovimientos)
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venCartaPorteFact.sql*/
DROP PROCEDURE venCartaPorteFactGuardar
GO
CREATE PROCEDURE venCartaPorteFactGuardar
(
@pvenMovimientosFactCP bigint,
@pvenMovimientosFact bigint = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venCartaPorteFact WHERE (venMovimientosFactCP = @pvenMovimientosFactCP)))
BEGIN 
	UPDATE venCartaPorteFact
	SET		venMovimientosFact = @pvenMovimientosFact
	WHERE (venMovimientosFactCP = @pvenMovimientosFactCP)
END 
ELSE 
BEGIN 
	INSERT INTO venCartaPorteFact
	(
		venMovimientosFactCP,
		venMovimientosFact
	)
	VALUES 
	(
		@pvenMovimientosFactCP,
		@pvenMovimientosFact
	)
END 

GO
-- exec venCartaPorteFactDatosFact  1, 'FC', 2127,0,0,0,'F','0202','I',' '
DROP PROCEDURE venCartaPorteFactDatosFact 
GO
CREATE PROCEDURE venCartaPorteFactDatosFact
(
	@pEmpresa_Id int, 
	@pSegmento_Id VarChar(10), 
	@pSegmento1N int,
	@pSegmento2N int,
	@pSegmento3N int,
	@pSegmento4N int,
	@pSegmento1C VarChar(20),
	@pSegmento2C VarChar(20),
	@pSegmento3C VarChar(20),
	@pSegmento4C VarChar(20)
)
AS
SET NOCOUNT ON 

SELECT venCartaPorteFact.venMovimientosFactCP, venCartaPorteFact.venMovimientosFact, 
	genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N
from venCartaPorteFact
INNER JOIN venMovimientos  ON (venMovimientos.venMovimientos = venCartaPorteFact.venMovimientosFact)
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = venMovimientos.venMovimientos
INNER JOIN genSegmentos  ON  genSegmentos.genSegmentos =genAsiSegmentos.Segmento_Id
where
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and 
	genSegmentos.Segmento_Id = @pSegmento_Id and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C

SELECT genSegmentos.Segmento_Id as Segmento_Id,
	genAsiSegmentos.Segmento1C Segmento1C,genAsiSegmentos.Segmento2C Segmento2C,
	genAsiSegmentos.Segmento3C Segmento3C,genAsiSegmentos.Segmento4C Segmento4C,
	genAsiSegmentos.Segmento1N Segmento1N ,genAsiSegmentos.Segmento2N Segmento2N, 
	genAsiSegmentos.Segmento3N Segmento3N, genAsiSegmentos.Segmento4N Segmento4N, 
	genAsiSegmentos.Asiento_Id
FROM venCartaPorteFact 
INNER JOIN venMovimientos venMovimientosFact ON (venMovimientosFact.venMovimientos = venCartaPorteFact.venMovimientosFact)
INNER JOIN genAsiSegmentos genAsiSegmentosFact ON genAsiSegmentosFact.Asiento_Id = venMovimientosFact.venMovimientos
INNER JOIN genSegmentos genSegmentosFact ON  genSegmentosFact.genSegmentos =genAsiSegmentosFact.Segmento_Id
INNER JOIN conAsientos ON conAsientos.conAsientos = venMovimientosFact.venMovimientos
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = venCartaPorteFact.venMovimientosFactCP
INNER JOIN genSegmentos  ON  genSegmentos.genSegmentos =genAsiSegmentos.Segmento_Id
WHERE 
	conAsientos.Anulado = 0 and 
	genAsiSegmentosFact.Empresa_Id = @pEmpresa_Id and 
	genSegmentosFact.Segmento_Id = @pSegmento_Id and 
	genAsiSegmentosFact.Segmento1N = @pSegmento1N and 
	genAsiSegmentosFact.Segmento2N = @pSegmento2N and 
	genAsiSegmentosFact.Segmento3N = @pSegmento3N and 
	genAsiSegmentosFact.Segmento4N = @pSegmento4N and 
	genAsiSegmentosFact.Segmento1C = @pSegmento1C and 
	genAsiSegmentosFact.Segmento2C = @pSegmento2C and 
	genAsiSegmentosFact.Segmento3C = @pSegmento3C and 
	genAsiSegmentosFact.Segmento4C = @pSegmento4C
 
RETURN @@Error 

GO

DROP PROCEDURE venCartaPorteFactEliminar
GO
CREATE PROCEDURE venCartaPorteFactEliminar
(
@pvenMovimientosFactCP bigint
)
AS
SET NOCOUNT ON 

DELETE FROM venCartaPorteFact 
WHERE (venMovimientosFactCP = @pvenMovimientosFactCP)
 
 RETURN @@Error 

GO

DROP PROCEDURE venCartaPorteFactDatos
GO
CREATE PROCEDURE venCartaPorteFactDatos
(
@pvenMovimientosFactCP bigint
)
AS
SET NOCOUNT ON 

SELECT venCartaPorteFact.venMovimientosFact, venCartaPorteFact.venMovimientosFactCP 
FROM venCartaPorteFact 
WHERE (venMovimientosFactCP = @pvenMovimientosFactCP)
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venCategCredito.sql*/
DROP PROCEDURE venCategCreditoGuardar
GO
CREATE PROCEDURE venCategCreditoGuardar
(
@pCategCred_id varchar(5),
@pCategCred_id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(50),
@pMaxDiasAtraso smallint,
@pPorcenDeudaVenci numeric(5),
@pTipoCredito numeric(5),
@pInactivo bit,
@pUsuario_Id int,
@pPosteado bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM venCategCredito WHERE (CategCred_id = @pCategCred_id)))
BEGIN 
	UPDATE venCategCredito
	SET		@lIdentidad = venCategCredito,
		CategCred_id = @pCategCred_id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		MaxDiasAtraso = @pMaxDiasAtraso,
		PorcenDeudaVenci = @pPorcenDeudaVenci,
		TipoCredito = @pTipoCredito,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (CategCred_id = @pCategCred_id)
END 
ELSE 
BEGIN 
	INSERT INTO venCategCredito
	(
		CategCred_id,
		Empresa_Id,
		Descripcion,
		MaxDiasAtraso,
		PorcenDeudaVenci,
		TipoCredito,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pCategCred_id,
		@pEmpresa_Id,
		@pDescripcion,
		@pMaxDiasAtraso,
		@pPorcenDeudaVenci,
		@pTipoCredito,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE venCategCreditoDatos
GO
CREATE PROCEDURE venCategCreditoDatos
(
@pCategCred_id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT venCategCredito.venCategCredito, venCategCredito.CategCred_id, venCategCredito.Empresa_Id, Cast( Case When venCategCredito.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	venCategCredito.Descripcion, venCategCredito.MaxDiasAtraso, venCategCredito.PorcenDeudaVenci, venCategCredito.TipoCredito,
	venCategCredito.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, venCategCredito.Posteado
FROM venCategCredito 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = venCategCredito.Usuario_Id)
WHERE (CategCred_id = @pCategCred_id)
 


 Declare @pidentity bigint= dbo.FuncFKvenCategCredito(@pCategCred_id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'venCategCredito'
 RETURN @@Error 

GO

DROP PROCEDURE venCategCreditoEliminar
GO
CREATE PROCEDURE venCategCreditoEliminar
(
@pCategCred_id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venCategCredito 
WHERE (CategCred_id = @pCategCred_id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKvenCategCredito
GO

CREATE FUNCTION FuncFKvenCategCredito
(
@pCategCred_id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = venCategCredito FROM venCategCredito WHERE 
	CategCred_id = @pCategCred_id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venCFDISat.sql*/
DROP PROCEDURE venCFDISatGuardar
GO
CREATE PROCEDURE venCFDISatGuardar
(
@pUUID char(36),
@pEmpresa_Id int = NULL,
@pRFCReceptor char(13) = NULL,
@pFecha datetime = NULL,
@pMonto numeric(18,9) = NULL,
@pImpuestos numeric(18,9) = NULL,
@pFolio bigint = NULL,
@pSerie varchar(100) = NULL,
@pXML varchar(max) = NULL,
@pUsuario int = NULL,
@pFechaCarga datetime = NULL,
@pTipoComprobante Char(1) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venCFDISat WHERE (UUID = @pUUID)))
BEGIN 
	UPDATE venCFDISat
	SET		Empresa_Id = @pEmpresa_Id,
		RFCReceptor = @pRFCReceptor,
		Fecha = @pFecha,
		Monto = @pMonto,
		Impuestos = @pImpuestos,
		Folio = @pFolio,
		Serie =ISNULL(@pSerie,''),
		XML = @pXML,
		Usuario = @pUsuario,
		FechaCarga = @pFechaCarga,
		TipoComprobante = @pTipoComprobante
	WHERE (UUID = @pUUID)
END 
ELSE 
BEGIN 
	INSERT INTO venCFDISat
	(
		UUID,
		Empresa_Id,
		RFCReceptor,
		Fecha,
		Monto,
		Impuestos,
		Folio,
		Serie,
		XML,
		Usuario,
		FechaCarga,
		TipoComprobante
	)
	VALUES 
	(
		@pUUID,
		@pEmpresa_Id,
		@pRFCReceptor,
		@pFecha,
		@pMonto,
		@pImpuestos,
		@pFolio,
		ISNULL(@pSerie,''),
		@pXML,
		@pUsuario,
		@pFechaCarga,
		@pTipoComprobante
	)
END 

GO

DROP PROCEDURE venCFDISatDatos
GO
CREATE PROCEDURE venCFDISatDatos
(
@pUUID char(36)
)
AS
SET NOCOUNT ON 

SELECT venCFDISat.UUID,  venCFDISat.Empresa_Id, venCFDISat.RFCReceptor, venCFDISat.Fecha, 
	venCFDISat.Monto, venCFDISat.Impuestos,
	venCFDISat.Folio, venCFDISat.Serie, venCFDISat.XML, genUsuarios.Usuario_Id,
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario, venCFDISat.FechaCarga, 
	venCFDISat.TipoComprobante
FROM venCFDISat 
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = venCFDISat.Usuario)
WHERE (UUID = @pUUID)
 
RETURN @@Error 

GO

DROP PROCEDURE venCFDISatEliminar
GO
CREATE PROCEDURE venCFDISatEliminar
(
@pUUID char(36) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venCFDISat 
WHERE (UUID = ISNULL(@pUUID, UUID))
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venClieContacto.sql*/
DROP PROCEDURE venClieContactoGuardar
GO
CREATE PROCEDURE venClieContactoGuardar
(
@pCliente_Id bigint,
@pSucursal int,
@pNroContacto int,
@pNombre varchar(120),
@pPuesto varchar(100),
@pEmail varchar(120),
@pTelefono varchar(30),
@pInterno varchar(20),
@pMovil varchar(30),
@pEnviaFacturas Sino,
@pEnviaRecibo Sino,
@pEnviaPedido Sino,
@pObservaciones varchar(max) = NULL,
@pInactivo Sino
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venClieContacto WHERE (Cliente_Id = @pCliente_Id) AND (Sucursal = @pSucursal) AND (NroContacto = @pNroContacto)))
BEGIN 
	UPDATE venClieContacto
	SET		Nombre = @pNombre,
		Puesto = @pPuesto,
		Email = @pEmail,
		Telefono = @pTelefono,
		Interno = @pInterno,
		Movil = @pMovil,
		EnviaFacturas = @pEnviaFacturas,
		EnviaRecibo = @pEnviaRecibo,
		EnviaPedido = @pEnviaPedido,
		Observaciones = @pObservaciones,
		Inactivo = @pInactivo
	WHERE (Cliente_Id = @pCliente_Id) AND (Sucursal = @pSucursal) AND (NroContacto = @pNroContacto)
END 
ELSE 
BEGIN 
	INSERT INTO venClieContacto
	(
		Cliente_Id,
		Sucursal,
		NroContacto,
		Nombre,
		Puesto,
		Email,
		Telefono,
		Interno,
		Movil,
		EnviaFacturas,
		EnviaRecibo,
		EnviaPedido,
		Observaciones,
		Inactivo
	)
	VALUES 
	(
		@pCliente_Id,
		@pSucursal,
		@pNroContacto,
		@pNombre,
		@pPuesto,
		@pEmail,
		@pTelefono,
		@pInterno,
		@pMovil,
		@pEnviaFacturas,
		@pEnviaRecibo,
		@pEnviaPedido,
		@pObservaciones,
		@pInactivo
	)
END 

GO

DROP PROCEDURE venClieContactoDatos
GO
CREATE PROCEDURE venClieContactoDatos
(
@pCliente_Id bigint,
@pSucursal int,
@pNroContacto int= Null
)
AS
SET NOCOUNT ON 

SELECT venClieContacto.Cliente_Id, venClieContacto.Sucursal, venClieContacto.NroContacto, venClieContacto.Nombre,
	venClieContacto.Puesto, venClieContacto.Email, venClieContacto.Telefono, venClieContacto.Interno,
	venClieContacto.Movil, venClieContacto.EnviaFacturas, venClieContacto.EnviaRecibo, venClieContacto.EnviaPedido,
	venClieContacto.Observaciones, venClieContacto.Inactivo
FROM venClieContacto 
WHERE (Cliente_Id = @pCliente_Id)
AND (Sucursal = @pSucursal)
AND (NroContacto = isnull(@pNroContacto, NroContacto))
 
 RETURN @@Error 

GO

DROP PROCEDURE venClieContactoEliminar
GO
CREATE PROCEDURE venClieContactoEliminar
(
@pCliente_Id bigint,
@pSucursal int ,
@pNroContacto int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venClieContacto 
WHERE (Cliente_Id = @pCliente_Id)
AND (Sucursal = @pSucursal)
AND (NroContacto = ISNULL(@pNroContacto, NroContacto))
 
RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venClieEstados.sql*/
DROP PROCEDURE venClieEstadosGuardar
GO
CREATE PROCEDURE venClieEstadosGuardar
(
@pEstado_Id varchar(5),
@pEstado_Id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(50),
@pCuenta_Id varchar(25) = NULL,
@pReservado bit,
@pImpideOperaciones bit,
@pInactivo bit,
@pUsuario_Id int,
@pPosteado bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM venClieEstados WHERE (Estado_Id = @pEstado_Id)))
BEGIN 
	UPDATE venClieEstados
	SET		@lIdentidad = venClieEstados,
		Estado_Id = @pEstado_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Cuenta_Id = dbo.FuncFKconCuentas(@pCuenta_Id),
		Reservado = @pReservado,
		Inactivo = @pInactivo,
		ImpideOperaciones = @pImpideOperaciones,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (Estado_id = @pEstado_id)
END 
ELSE 
BEGIN 
	INSERT INTO venClieEstados
	(
		Estado_Id,
		Empresa_Id,
		Descripcion,
		Cuenta_Id,
		Reservado,
		Inactivo,
		ImpideOperaciones,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pEstado_Id,
		@pEmpresa_Id,
		@pDescripcion,
		dbo.FuncFKconCuentas(@pCuenta_Id),
		@pReservado,
		@pInactivo,
		@pImpideOperaciones,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE venClieEstadosDatos
GO
CREATE PROCEDURE venClieEstadosDatos
(
@pEstado_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT venClieEstados.venClieEstados, venClieEstados.Estado_Id, venClieEstados.Empresa_Id, 
	Cast( Case When venClieEstados.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	venClieEstados.Descripcion, conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuentas, venClieEstados.Reservado,
	venClieEstados.Inactivo, venClieEstados.ImpideOperaciones,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, venClieEstados.Posteado
FROM venClieEstados 
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = venClieEstados.Cuenta_Id)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = venClieEstados.Usuario_Id)
WHERE (Estado_id = @pEstado_id)
 


 Declare @pidentity bigint= dbo.FuncFKvenClieEstados(@pEstado_id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'venClieEstados'
 RETURN @@Error 

GO

DROP PROCEDURE venClieEstadosEliminar
GO
CREATE PROCEDURE venClieEstadosEliminar
(
@pEstado_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venClieEstados 
WHERE (Estado_Id = @pEstado_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKvenClieEstados
GO

CREATE FUNCTION FuncFKvenClieEstados
(
@pEstado_id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = venClieEstados FROM venClieEstados WHERE 
	Estado_Id = @pEstado_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venClieHabitual.sql*/
DROP PROCEDURE venClieHabitualGuardar
GO
CREATE PROCEDURE venClieHabitualGuardar
(
@pgenEntidades bigint,
@pSucursal SucursalN,
@pNombreFantasia varchar(120),
@pDireccion1_Fact varchar(50),
@pDireccion2_Fact varchar(50),
@pLocalidad_Fact varchar(35),
@pCodPostal_Fact CodigoPostal,
@pProvincia_Id_Fact varchar(5) = NULL,
@pPais_Id_Fact smallint = NULL,
@pTelefonos varchar(100),
@pFax varchar(50),
@pEMail varchar(50),
@pDireccion1_Entr varchar(50),
@pDireccion2_Entr varchar(50),
@pLocalidad_Entr varchar(35),
@pCodPostal_Entr CodigoPostal,
@pProvincia_Id_Entr varchar(5) = NULL,
@pPais_Id_Entr smallint = NULL,
@pTipoClie_Id varchar(5) = NULL,
@pListaPrecio_Id varchar(5) = NULL,
@pFormaEntrega_Id varchar(3) = NULL,
@pCondPagoCli_Id varchar(5) = NULL,
@pVendedor_Id VarChar(5) = NULL,
@pCobrador_Id VarChar(5) = NULL,
@pZona_Id varchar(5) = NULL,
@pRegion_Id varchar(5) = NULL,
@pContactos varchar(50),
@pInactivo Sino,
@pUsuario_Id_Alta int,
@pFechaAlta qFecha,
@pFechaUltContacto qFecha,
@pFechaModificacion qFecha,
@pObservaciones QMemo = NULL,
@pBonificacion1 qPorcentaje,
@pBonificacion2 qPorcentaje,
@pBonificacion3 qPorcentaje,
@pCentro1_Id varchar(8) = NULL,
@pCentro2_Id varchar(8) = NULL,
@pClieConsolida VarChar(15) = NULL,
@pNroExterior_Fact varchar(10),
@pNroInterior_Fact varchar(10),
@pNroExterior_Entr varchar(10),
@pNroInterior_Entr varchar(10),
@pReclamos varchar(150),
@pMetodoDePago varchar(50),
@pNumCuenta varchar(150),
@pC_UsoCFDI varchar(3),
@pN_MetodoPago varchar(3),
@pUsaComplementoINE bit,
@pLongitudGPS numeric(19,13),
@pLatitudGPS numeric(19,13), 
@pc_ColoniaEntr VarChar(4) = NULL, 
@pc_LocalidadEntr VarChar(4) = NULL,
@pc_MunicipioEntr VarChar(3) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venClieHabitual WHERE (genEntidades = @pgenEntidades) AND (Sucursal = @pSucursal)))
BEGIN 
	UPDATE venClieHabitual
	SET		NombreFantasia = @pNombreFantasia,
		Direccion1_Fact = @pDireccion1_Fact,
		Direccion2_Fact = @pDireccion2_Fact,
		Localidad_Fact = @pLocalidad_Fact,
		CodPostal_Fact = @pCodPostal_Fact,
		Provincia_Id_Fact = dbo.FuncFKgenProvincias(@pProvincia_Id_Fact),
		Pais_Id_Fact = dbo.FuncFKgenPaises(@pPais_Id_Fact),
		Telefonos = @pTelefonos,
		Fax = @pFax,
		EMail = @pEMail,
		Direccion1_Entr = @pDireccion1_Entr,
		Direccion2_Entr = @pDireccion2_Entr,
		Localidad_Entr = @pLocalidad_Entr,
		CodPostal_Entr = @pCodPostal_Entr,
		Provincia_Id_Entr = dbo.FuncFKgenProvincias(@pProvincia_Id_Entr),
		Pais_Id_Entr = dbo.FuncFKgenPaises(@pPais_Id_Entr),
		TipoClie_Id = dbo.FuncFKvenTiposClie(@pTipoClie_Id),
		ListaPrecio_Id = dbo.FuncFKvenListasPrecios(@pListaPrecio_Id),
		FormaEntrega_Id = dbo.FuncFKvenFormaEntrega(@pFormaEntrega_Id),
		CondPagoCli_Id = dbo.FuncFKvenCondPago(@pCondPagoCli_Id),
		Vendedor_Id = dbo.FuncFKvenVendedores(@pVendedor_Id),
		Cobrador_Id = dbo.FuncFKvenCobradores(@pCobrador_Id),
		Zona_Id = dbo.FuncFKvenZona(@pZona_Id),
		Region_Id = dbo.FuncFKvenRegion(@pRegion_Id),
		Contactos = @pContactos,
		Inactivo = @pInactivo,
		Usuario_Id_Alta = @pUsuario_Id_Alta,
		-- FechaAlta = @pFechaAlta,
		FechaUltContacto = @pFechaUltContacto,
		FechaModificacion = dbo.FechaActual(),
		Observaciones = @pObservaciones,
		Bonificacion1 = @pBonificacion1,
		Bonificacion2 = @pBonificacion2,
		Bonificacion3 = @pBonificacion3,
		Centro1_Id = dbo.FuncFKconCentro1(@pCentro1_Id),
		Centro2_Id = dbo.FuncFKconCentro2(@pCentro2_Id),
		ClieConsolida = dbo.FuncFKvenClientes(@pClieConsolida),
		NroExterior_Fact = @pNroExterior_Fact,
		NroInterior_Fact = @pNroInterior_Fact,
		NroExterior_Entr = @pNroExterior_Entr,
		NroInterior_Entr = @pNroInterior_Entr,
		Reclamos = @pReclamos,
		MetodoDePago = @pMetodoDePago,
		NumCuenta = @pNumCuenta,
		C_UsoCFDI =@pC_UsoCFDI,
		N_MetodoPago=@pN_MetodoPago,
		UsaComplementoINE=@pUsaComplementoINE,
		LatitudGPS=@pLatitudGPS,
		LongitudGPS=@pLongitudGPS, 
		c_ColoniaEntr  = @pc_ColoniaEntr,
		c_LocalidadEntr = @pc_LocalidadEntr,
		c_MunicipioEntr  = @pc_MunicipioEntr
	WHERE (genEntidades = @pgenEntidades) AND (Sucursal = @pSucursal)
END 
ELSE 
BEGIN 
	INSERT INTO venClieHabitual
	(
		genEntidades,
		Sucursal,
		NombreFantasia,
		Direccion1_Fact,
		Direccion2_Fact,
		Localidad_Fact,
		CodPostal_Fact,
		Provincia_Id_Fact,
		Pais_Id_Fact,
		Telefonos,
		Fax,
		EMail,
		Direccion1_Entr,
		Direccion2_Entr,
		Localidad_Entr,
		CodPostal_Entr,
		Provincia_Id_Entr,
		Pais_Id_Entr,
		TipoClie_Id,
		ListaPrecio_Id,
		FormaEntrega_Id,
		CondPagoCli_Id,
		Vendedor_Id,
		Cobrador_Id,
		Zona_Id,
		Region_Id,
		Contactos,
		Inactivo,
		Usuario_Id_Alta,
		FechaAlta,
		FechaUltContacto,
		FechaModificacion,
		Observaciones,
		Bonificacion1,
		Bonificacion2,
		Bonificacion3,
		Centro1_Id,
		Centro2_Id,
		ClieConsolida,
		NroExterior_Fact,
		NroInterior_Fact,
		NroExterior_Entr,
		NroInterior_Entr,
		Reclamos,
		MetodoDePago,
		NumCuenta,
		C_UsoCFDI,
		N_MetodoPago,
		UsaComplementoINE,
		LatitudGPS,
		LongitudGPS,
		c_ColoniaEntr , 
		c_LocalidadEntr,
		c_MunicipioEntr
	)
	VALUES 
	(
		@pgenEntidades,
		@pSucursal,
		@pNombreFantasia,
		@pDireccion1_Fact,
		@pDireccion2_Fact,
		@pLocalidad_Fact,
		@pCodPostal_Fact,
		dbo.FuncFKgenProvincias(@pProvincia_Id_Fact),
		dbo.FuncFKgenPaises(@pPais_Id_Fact),
		@pTelefonos,
		@pFax,
		@pEMail,
		@pDireccion1_Entr,
		@pDireccion2_Entr,
		@pLocalidad_Entr,
		@pCodPostal_Entr,
		dbo.FuncFKgenProvincias(@pProvincia_Id_Entr),
		dbo.FuncFKgenPaises(@pPais_Id_Entr),
		dbo.FuncFKvenTiposClie(@pTipoClie_Id),
		dbo.FuncFKvenListasPrecios(@pListaPrecio_Id),
		dbo.FuncFKvenFormaEntrega(@pFormaEntrega_Id),
		dbo.FuncFKvenCondPago(@pCondPagoCli_Id),
		dbo.FuncFKvenVendedores(@pVendedor_Id),
		dbo.FuncFKvenCobradores(@pCobrador_Id),
		dbo.FuncFKvenZona(@pZona_Id),
		dbo.FuncFKvenRegion(@pRegion_Id),
		@pContactos,
		@pInactivo,
		@pUsuario_Id_Alta,
		dbo.FechaActual(),
		@pFechaUltContacto,
		dbo.FechaActual(),
		@pObservaciones,
		@pBonificacion1,
		@pBonificacion2,
		@pBonificacion3,
		dbo.FuncFKconCentro1(@pCentro1_Id),
		dbo.FuncFKconCentro2(@pCentro2_Id),
		dbo.FuncFKvenClientes(@pClieConsolida),
		@pNroExterior_Fact,
		@pNroInterior_Fact,
		@pNroExterior_Entr,
		@pNroInterior_Entr,
		@pReclamos,
		@pMetodoDePago,
		@pNumCuenta,
		@pC_UsoCFDI,
		@pN_MetodoPago,
		@pUsaComplementoINE,
		@pLongitudGPS,
		@pLatitudGPS, 
		@pc_ColoniaEntr , 
		@pc_LocalidadEntr,
		@pc_MunicipioEntr
	)
END 

GO

DROP PROCEDURE venClieHabitualDatos
GO
CREATE PROCEDURE venClieHabitualDatos
(
@pCliente_Id VarChar(15),
@pSucursal SucursalN
)
AS
SET NOCOUNT ON 

SELECT venClieHabitual.genEntidades, venClientes.Cliente_Id, 
	venClieHabitual.Sucursal, 
	 genEntidades.CUIT, genEntidades.TipoDoc, genEntidades.IdFiscal, venClientes.Empresa_Id, 
	Cast (Case When venClientes.Empresa_Id IS NULL THEN 1 ELSE 0 END as BIT) AS PTodasEmpresas,
	venClientes.RazonSocial,
	venClientes.SucursalPredeter, 
	venCondFiscal.CondFisc_Id, 	venCondFiscal.Descripcion as DescripcionCondFiscal, 
	venClientes.LimiteCredito, genMonedas.Moneda_Id MonedaLimCred,
	venCategCredito.CategCred_Id, venCategCredito.Descripcion as DescripcionCategCredito,
	venClientes.Bonificacion1, venClientes.Bonificacion2, venClientes.Bonificacion3, 
	venClientes.Puntual,
	venClieEstados.Estado_Id, venClieEstados.Descripcion as DescripcionClieEstados, 
	venClientes.GeneraDebito, venClientes.Siempre,
	venClientes.CongelaCambio, venClientes.IBrutos, venClientes.Situacion,
	venClientes.FacturaCredito, venClientes.MontoFacturaCredito, venClientes.CbuBanco,
	venClieHabitual.NombreFantasia,
	venClieHabitual.Direccion1_Fact, venClieHabitual.Direccion2_Fact, venClieHabitual.Localidad_Fact, venClieHabitual.CodPostal_Fact,
	Provincia_Id_Fact.Provincia_Id as Provincia_Id_Fact, Provincia_Id_Fact.Descripcion as DescripcionProvincia_Id_Fact, 
	Pais_Id_Fact.Pais_Id as Pais_Id_Fact, Pais_Id_Fact.Descripcion as DescripcionPais_Id_Fact,
	venClieHabitual.Telefonos, venClieHabitual.Fax, venClieHabitual.EMail, venClieHabitual.Direccion1_Entr,
	venClieHabitual.Direccion2_Entr, venClieHabitual.Localidad_Entr, venClieHabitual.CodPostal_Entr, 
	Provincia_Id_Entr.Provincia_Id as Provincia_Id_Entr ,Provincia_Id_Entr.Descripcion as DescripcionProvincia_Id_Entr, 
	Pais_Id_Entr.Pais_Id as Pais_Id_Entr, Pais_Id_Entr.Descripcion as DescripcionPais_Id_Entr, 
	venTiposClie.TipoClie_Id,venTiposClie.Descripcion as DescripcionTiposClie, 
	venListasPrecios.ListaPrecio_Id, venListasPrecios.Descripcion as DescripcionListasPrecios, 
	venFormaEntrega.FormaEntrega_Id, venFormaEntrega.RazonSocial as DescripcionFormaEntrega, 
	venCondPago.CondPagoCli_Id, venCondPago.Descripcion as DescripcionCondPago, 
	venVendedores.Vendedor_Id,venVendedores.Nombre as DescripcionVendedores, 
	venCobradores.Cobrador_Id, venCobradores.Nombre as DescripcionCobradores, 
	venZona.Zona_Id,	venZona.Descripcion as DescripcionZona, 
	venRegion.Region_Id, venRegion.Descripcion as DescripcionRegion, 
	venClieHabitual.Contactos,	venClieHabitual.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, venClieHabitual.FechaAlta,
	venClieHabitual.FechaUltContacto, venClieHabitual.FechaModificacion, venClieHabitual.Observaciones, 
	venClieHabitual.Bonificacion1 AS BonificacionS1, venClieHabitual.Bonificacion2 AS  BonificacionS2, 
	venClieHabitual.Bonificacion3 AS BonificacionS3, 
	conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2,
	ClieConsolida.Cliente_Id ClieConsolida, ClieConsolida.RazonSocial as DescripcionClieConsolida, 
	venClieHabitual.NroExterior_Fact, venClieHabitual.NroInterior_Fact,
	venClieHabitual.NroExterior_Entr, venClieHabitual.NroInterior_Entr, venClieHabitual.Reclamos, venClieHabitual.MetodoDePago,
	venClieHabitual.NumCuenta, genPaises.Dominio_Id, venClientes.Posteado, C_UsoCFDI,N_MetodoPago,UsaComplementoINE, venClientes.LimiteCredito,
	venClieHabitual.LatitudGPS, venClieHabitual.LongitudGPS,venClieHabitual.c_ColoniaEntr , venClieHabitual.c_LocalidadEntr,
		venClieHabitual.c_MunicipioEntr
FROM venClieHabitual 
INNER JOIN venClientes  ON (venClientes.genEntidades = venClieHabitual.genEntidades)
inner join genEntidades ON venClientes.genEntidades = genEntidades.genEntidades 
LEFT JOIN venCondFiscal  ON (venCondFiscal.venCondFiscal = venClientes.CondFisc_Id)
LEFT JOIN venCategCredito  ON (venCategCredito.venCategCredito = venClientes.CategCred_Id)
LEFT JOIN venClieEstados  ON (venClieEstados.venClieEstados = venClientes.Estado_Id)
LEFT JOIN genProvincias  as Provincia_Id_Fact ON (Provincia_Id_Fact.genProvincias = venClieHabitual.Provincia_Id_Fact)
LEFT JOIN genPaises  as Pais_Id_Fact ON (Pais_Id_Fact.genPaises = venClieHabitual.Pais_Id_Fact)
LEFT JOIN genProvincias Provincia_Id_Entr ON (Provincia_Id_Entr.genProvincias = venClieHabitual.Provincia_Id_Entr)
LEFT JOIN genPaises Pais_Id_Entr ON (Pais_Id_Entr.genPaises = venClieHabitual.Pais_Id_Entr)
LEFT JOIN venTiposClie  ON (venTiposClie.venTiposClie = venClieHabitual.TipoClie_Id)
LEFT JOIN venListasPrecios  ON (venListasPrecios.venListasPrecios = venClieHabitual.ListaPrecio_Id)
LEFT JOIN venFormaEntrega  ON (venFormaEntrega.venFormaEntrega = venClieHabitual.FormaEntrega_Id)
LEFT JOIN venCondPago  ON (venCondPago.venCondPago = venClieHabitual.CondPagoCli_Id)
LEFT JOIN venVendedores  ON (venVendedores.venVendedores = venClieHabitual.Vendedor_Id)
LEFT JOIN venCobradores  ON (venCobradores.venCobradores = venClieHabitual.Cobrador_Id)
LEFT JOIN venZona  ON (venZona.venZona = venClieHabitual.Zona_Id)
LEFT JOIN venRegion  ON (venRegion.venRegion = venClieHabitual.Region_Id)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = venClieHabitual.Usuario_Id_Alta)
LEFT JOIN conCentro1  ON (conCentro1.conCentro1 = venClieHabitual.Centro1_Id)
LEFT JOIN conCentro2  ON (conCentro2.conCentro2 = venClieHabitual.Centro2_Id)
LEFT JOIN venClientes   as ClieConsolida ON (ClieConsolida.genEntidades = venClieHabitual.ClieConsolida)
Left Join genPaises On venClieHabitual.Pais_Id_Fact = genPaises.genPaises
Left Join genMonedas On genMonedas.genMonedas = venClientes.MonedaLimCred
WHERE (venClientes.Cliente_Id = @pCliente_Id)
AND (venClieHabitual.Sucursal = @pSucursal)
 
 SELECT 	genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas,
	CuentaDxVtas.Cuenta_Id as CuentaDxVtas, CuentaDxVtas.Descripcion as DescripcionCuentaDxVtas, 
	CtaFactAnticipo.Cuenta_Id as CtaFactAnticipo, CtaFactAnticipo.Descripcion as DescripcionCtaFactAnticipo,
	CtaAnticipo.Cuenta_Id as CtaAnticipo , CtaAnticipo.Descripcion as DescripcionCtaAnticipo
FROM venClientesCtas 
INNER JOIN venClientes  ON (venClientes.genEntidades = venClientesCtas.Cliente_Id)
INNER JOIN genMonedas  ON (genMonedas.genMonedas = venClientesCtas.Moneda_Id)
INNER JOIN conCuentas  as CuentaDxVtas ON (CuentaDxVtas.conCuentas = venClientesCtas.CuentaDxVtas)
INNER JOIN conCuentas CtaFactAnticipo ON (CtaFactAnticipo.conCuentas = venClientesCtas.CtaFactAnticipo)
INNER JOIN conCuentas CtaAnticipo ON (CtaAnticipo.conCuentas = venClientesCtas.CtaAnticipo)
WHERE (venClientes.Cliente_Id = @pCliente_Id)
order by 1 


Declare @pidentity bigint= dbo.FuncFKvenClientes(@pCliente_Id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'venClientes'

exec genJurisCoeficientesDatos @pIdentity
exec venclieContactoDatos @pIdentity, @pSucursal
exec genAdjuntosIdentityDatos 'venClientes', 0
 
 RETURN @@Error 

GO

DROP PROCEDURE venClieHabitualEliminar
GO
CREATE PROCEDURE venClieHabitualEliminar
(
@pCliente_Id VarChar(15),
@pSucursal SucursalN = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venClieHabitual 
WHERE genEntidades = dbo.FuncFKvenClientes(@pCliente_Id)
AND Sucursal = ISNULL(@pSucursal, Sucursal)
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venClientes.sql*/
-- exec venClientesDatos '1'

DROP PROCEDURE venClientesGuardar
GO
CREATE PROCEDURE venClientesGuardar
(
@pgenEntidades bigint,
@pCliente_Id varchar(15),
@pCliente_Id_Nueva varchar(15),
@pEmpresa_Id int,
@pRazonSocial varchar(120),
@pSucursalPredeter SucursalN,
@pCondFisc_Id varchar(5) = NULL,
@pLimiteCredito qMonedaD2,
@pMonedaLimCred varchar(3),
@pCategCred_Id varchar(5) = NULL,
@pBonificacion1 qPorcentaje,
@pBonificacion2 qPorcentaje,
@pBonificacion3 qPorcentaje,
@pPuntual Sino,
@pEstado_Id varchar(5) = NULL,
@pGeneraDebito Sino,
@pSiempre Sino,
@pCongelaCambio Sino,
@pIBrutos varchar(20),
@pSituacion char(1),
@pFacturaCredito Sino = NULL,
@pMontoFacturaCredito qMonedaD2 = NULL,
@pCbuBanco varchar(22) = NULL,
@pPosteado Sino
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venClientes WHERE (genEntidades = @pgenEntidades)))
BEGIN 
	UPDATE venClientes
	SET		Cliente_Id = @pCliente_Id_Nueva,
		Empresa_Id = @pEmpresa_Id,
		RazonSocial = @pRazonSocial,
		SucursalPredeter = @pSucursalPredeter,
		CondFisc_Id = dbo.FuncFKvenCondFiscal(@pCondFisc_Id),
		LimiteCredito = @pLimiteCredito,
		MonedaLimCred = dbo.FuncFKgenMonedas(@pMonedaLimCred),
		CategCred_Id = dbo.FuncFKvenCategCredito(@pCategCred_Id),
		Bonificacion1 = @pBonificacion1,
		Bonificacion2 = @pBonificacion2,
		Bonificacion3 = @pBonificacion3,
		Puntual = @pPuntual,
		Estado_Id = dbo.FuncFKvenClieEstados(@pEstado_Id),
		GeneraDebito = @pGeneraDebito,
		Siempre = @pSiempre,
		CongelaCambio = @pCongelaCambio,
		IBrutos = @pIBrutos,
		Situacion = @pSituacion,
		FacturaCredito = @pFacturaCredito,
		MontoFacturaCredito = @pMontoFacturaCredito,
		CbuBanco = @pCbuBanco,
		Posteado = @pPosteado
	WHERE (genEntidades = @pgenEntidades)
END 
ELSE 
BEGIN 
	INSERT INTO venClientes
	(
		genEntidades,
		Cliente_Id,
		Empresa_Id,
		RazonSocial,
		SucursalPredeter,
		CondFisc_Id,
		LimiteCredito,
		MonedaLimCred,
		CategCred_Id,
		Bonificacion1,
		Bonificacion2,
		Bonificacion3,
		Puntual,
		Estado_Id,
		GeneraDebito,
		Siempre,
		CongelaCambio,
		IBrutos,
		Situacion,
		FacturaCredito,
		MontoFacturaCredito,
		CbuBanco,
		Posteado
	)
	VALUES 
	(
		@pgenEntidades,
		@pCliente_Id_Nueva,
		@pEmpresa_Id,
		@pRazonSocial,
		@pSucursalPredeter,
		dbo.FuncFKvenCondFiscal(@pCondFisc_Id),
		@pLimiteCredito,
		dbo.FuncFKgenMonedas(@pMonedaLimCred),
		dbo.FuncFKvenCategCredito(@pCategCred_Id),
		@pBonificacion1,
		@pBonificacion2,
		@pBonificacion3,
		@pPuntual,
		dbo.FuncFKvenClieEstados(@pEstado_Id),
		@pGeneraDebito,
		@pSiempre,
		@pCongelaCambio,
		@pIBrutos,
		@pSituacion,
		@pFacturaCredito,
		@pMontoFacturaCredito,
		@pCbuBanco,
		@pPosteado
	)
END 

GO

DROP PROCEDURE venClientesDatos
GO
CREATE PROCEDURE venClientesDatos
(
@pCliente_id VarChar(15)
)
AS
SET NOCOUNT ON 

SELECT genEntidades.genEntidades, 
	genEntidades.CUIT, genEntidades.TipoDoc, genEntidades.IdFiscal, venClientes.Cliente_Id, venClientes.Empresa_Id, 
	Cast (Case When venClientes.Empresa_Id IS NULL THEN 1 ELSE 0 END as BIT) AS PTodasEmpresas,
	venClientes.RazonSocial,
	venClientes.SucursalPredeter, 
	venCondFiscal.CondFisc_Id, 	venCondFiscal.Descripcion as DescripcionCondFiscal, 
	venClientes.LimiteCredito, genMonedas.Moneda_Id MonedaLimCred,
	venCategCredito.CategCred_Id, venCategCredito.Descripcion as DescripcionCategCredito,
	venClientes.Bonificacion1, venClientes.Bonificacion2, venClientes.Bonificacion3, 
	venClientes.Puntual,
	venClieEstados.Estado_Id, venClieEstados.Descripcion as DescripcionClieEstados, 
	venClientes.GeneraDebito, venClientes.Siempre,
	venClientes.CongelaCambio, venClientes.IBrutos, venClientes.Situacion,
	venClientes.FacturaCredito, venClientes.MontoFacturaCredito, venClientes.CbuBanco, venClientes.Posteado
FROM venClientes 
INNER JOIN genEntidades  ON (genEntidades.genEntidades = venClientes.genEntidades)
LEFT JOIN venCondFiscal  ON (venCondFiscal.venCondFiscal = venClientes.CondFisc_Id)
LEFT JOIN venCategCredito  ON (venCategCredito.venCategCredito = venClientes.CategCred_Id)
LEFT JOIN venClieEstados  ON (venClieEstados.venClieEstados = venClientes.Estado_Id)
Left Join genMonedas On genMonedas.genMonedas = venClientes.MonedaLimCred
WHERE (venClientes.Cliente_Id = @pCliente_Id)
 


Declare @pidentity bigint= dbo.FuncFKvenClientes(@pCliente_Id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'venClientes'


 
 RETURN @@Error 

GO


DROP PROCEDURE venClientesDatosId
GO
CREATE PROCEDURE venClientesDatosId
(
	@genEntidades Bigint
)
AS
SET NOCOUNT ON 

SELECT genEntidades.genEntidades, venClientes.Cliente_Id,
	genEntidades.CUIT, genEntidades.TipoDoc, genEntidades.IdFiscal, venClientes.Empresa_Id, 
	Cast (Case When venClientes.Empresa_Id IS NULL THEN 1 ELSE 0 END as BIT) AS PTodasEmpresas,
	venClientes.RazonSocial,
	venClientes.SucursalPredeter, 
	venCondFiscal.CondFisc_Id, 	venCondFiscal.Descripcion as DescripcionCondFiscal, 
	venClientes.LimiteCredito, genMonedas.Moneda_Id MonedaLimCred,
	venCategCredito.CategCred_Id, venCategCredito.Descripcion as DescripcionCategCredito,
	venClientes.Bonificacion1, venClientes.Bonificacion2, venClientes.Bonificacion3, 
	venClientes.Puntual,
	venClieEstados.Estado_Id, venClieEstados.Descripcion as DescripcionClieEstados, 
	venClientes.GeneraDebito, venClientes.Siempre,
	venClientes.CongelaCambio, venClientes.IBrutos, venClientes.Situacion, 
	venClientes.FacturaCredito, venClientes.MontoFacturaCredito, venClientes.CbuBanco, venClientes.Posteado
FROM venClientes 
INNER JOIN genEntidades  ON (genEntidades.genEntidades = venClientes.genEntidades)
LEFT JOIN venCondFiscal  ON (venCondFiscal.venCondFiscal = venClientes.CondFisc_Id)
LEFT JOIN venCategCredito  ON (venCategCredito.venCategCredito = venClientes.CategCred_Id)
LEFT JOIN venClieEstados  ON (venClieEstados.venClieEstados = venClientes.Estado_Id)
Left Join genMonedas On genMonedas.genMonedas = venClientes.MonedaLimCred
WHERE (venClientes.genEntidades = @genEntidades)
 
 
Exec genAtributosGeneralesIdentityDatos @genEntidades, 'venClientes'


 
RETURN @@Error 

GO

DROP PROCEDURE venClientesEliminar
GO
CREATE PROCEDURE venClientesEliminar
(
@pCliente_Id bigint
)
AS
SET NOCOUNT ON 

DELETE FROM venClientes 
WHERE (genEntidades = @pCliente_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKvenClientes
GO

CREATE FUNCTION FuncFKvenClientes
(
@pCliente_Id varchar (15)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = genEntidades FROM venClientes WHERE 
	Cliente_Id = @pCliente_Id
  RETURN @pIdentity
END


GO



DROP PROCEDURE venClientesCFiscalGuardar
GO
CREATE PROCEDURE venClientesCFiscalGuardar
(
@pCliente_Id bigint, 
@pCondFiscal_Id VarChar(5)
)
AS
SET NOCOUNT ON 

UPDATE venClientes SET CondFisc_Id = dbo.FuncFKvenCondFiscal(@pCondFiscal_Id)
	WHERE (genEntidades = @pCliente_Id)
 
 RETURN @@Error 

GO




DROP PROCEDURE venClientesSucDatos
GO
CREATE PROCEDURE venClientesSucDatos
(
	@pCliente_id VarChar(15)
)
AS
SET NOCOUNT ON 

SELECT venClientes.genEntidades, venClientes.Cliente_Id
FROM venClientes 
WHERE (venClientes.Cliente_Id = @pCliente_Id)

SELECT venClieHabitual.Sucursal, venClieHabitual.NombreFantasia
FROM venClieHabitual INNER JOIN venClientes ON 
venClieHabitual.genEntidades = venClientes.genEntidades 
WHERE
venClientes.Cliente_Id = @pCliente_Id
ORDER BY 1 


 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venClientesCtas.sql*/
DROP PROCEDURE venClientesCtasGuardar
GO
CREATE PROCEDURE venClientesCtasGuardar
(
@pCliente_Id bigint,
@pMoneda_Id VarChar(5),
@pCuentaDxVtas varchar(25),
@pCtaFactAnticipo varchar(25),
@pCtaAnticipo varchar(25)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venClientesCtas WHERE (Cliente_Id = @pCliente_Id) AND 
	(Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id))))
BEGIN 
	UPDATE venClientesCtas
	SET		CuentaDxVtas = dbo.FuncFKconCuentas(@pCuentaDxVtas),
		CtaFactAnticipo = dbo.FuncFKconCuentas(@pCtaFactAnticipo),
		CtaAnticipo = dbo.FuncFKconCuentas(@pCtaAnticipo)
	WHERE (Cliente_Id = @pCliente_Id) AND (Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id))
END 
ELSE 
BEGIN 
	INSERT INTO venClientesCtas
	(
		Cliente_Id,
		Moneda_Id,
		CuentaDxVtas,
		CtaFactAnticipo,
		CtaAnticipo
	)
	VALUES 
	(
		@pCliente_Id,
		dbo.FuncFKgenMonedas(@pMoneda_Id),
		dbo.FuncFKconCuentas(@pCuentaDxVtas),
		dbo.FuncFKconCuentas(@pCtaFactAnticipo),
		dbo.FuncFKconCuentas(@pCtaAnticipo)
	)
END 

GO

DROP PROCEDURE venClientesCtasDatos
GO
CREATE PROCEDURE venClientesCtasDatos
(
@pCliente_Id VarChar(15),
@pMoneda_Id VarChar(5)
)
AS
SET NOCOUNT ON 

SELECT 	venClientes.genEntidades, venClientes.Cliente_id, 
	genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas,
	CuentaDxVtas.Cuenta_Id as CuentaDxVtas, CuentaDxVtas.Descripcion as DescripcionCuentaDxVtas, 
	CtaFactAnticipo.Cuenta_Id as CtaFactAnticipo, CtaFactAnticipo.Descripcion as DescripcionCtaFactAnticipo,
	CtaAnticipo.Cuenta_Id as CtaAnticipo , CtaAnticipo.Descripcion as DescripcionCtaAnticipo
FROM venClientesCtas 
INNER JOIN venClientes  ON (venClientes.genEntidades = venClientesCtas.Cliente_Id)
INNER JOIN genMonedas  ON (genMonedas.genMonedas = venClientesCtas.Moneda_Id)
INNER JOIN conCuentas  as CuentaDxVtas ON (CuentaDxVtas.conCuentas = venClientesCtas.CuentaDxVtas)
INNER JOIN conCuentas CtaFactAnticipo ON (CtaFactAnticipo.conCuentas = venClientesCtas.CtaFactAnticipo)
INNER JOIN conCuentas CtaAnticipo ON (CtaAnticipo.conCuentas = venClientesCtas.CtaAnticipo)
WHERE (venClientes.Cliente_Id = @pCliente_Id)
AND (genMonedas.Moneda_Id = @pMoneda_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE venClientesCtasEliminar
GO
CREATE PROCEDURE venClientesCtasEliminar
(
@pCliente_Id bigint,
@pMoneda_Id varchar(3)= NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venClientesCtas 
WHERE (Cliente_Id = @pCliente_Id)
AND (Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id) or @pMoneda_id IS NULL)
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venClientesCtasPlantilla.sql*/
DROP PROCEDURE venClientesCtasPlantillaGuardar
GO
CREATE PROCEDURE venClientesCtasPlantillaGuardar
(
@pPlantilla_Id varchar(15),
@pMoneda_Id varchar(3),
@pCuentaDxVtas varchar(25) = NULL,
@pCtaFactAnticipo varchar(25) = NULL,
@pCtaAnticipo varchar(25) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venClientesCtasPlantilla WHERE Plantilla_Id = dbo.FuncFKvenClientesPlantilla(@pPlantilla_Id) AND Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id)))
BEGIN 
	UPDATE venClientesCtasPlantilla
	SET CuentaDxVtas = dbo.FuncFKconCuentas(@pCuentaDxVtas),
		CtaFactAnticipo = dbo.FuncFKconCuentas(@pCtaFactAnticipo),
		CtaAnticipo = dbo.FuncFKconCuentas(@pCtaAnticipo)
	WHERE Plantilla_Id = dbo.FuncFKvenClientesPlantilla(@pPlantilla_Id) AND Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id)
END 
ELSE 
BEGIN 
	INSERT INTO venClientesCtasPlantilla
	(
		Plantilla_Id,
		Moneda_Id,
		CuentaDxVtas,
		CtaFactAnticipo,
		CtaAnticipo
	)
	VALUES 
	(
		dbo.FuncFKvenClientesPlantilla(@pPlantilla_Id),
		dbo.FuncFKgenMonedas(@pMoneda_Id),
		dbo.FuncFKconCuentas(@pCuentaDxVtas),
		dbo.FuncFKconCuentas(@pCtaFactAnticipo),
		dbo.FuncFKconCuentas(@pCtaAnticipo)
	)
END 

GO

DROP PROCEDURE venClientesCtasPlantillaDatos
GO
CREATE PROCEDURE venClientesCtasPlantillaDatos
(
@pPlantilla_Id VarChar(15),
@pMoneda_Id VarChar(5) = Null
)
AS
SET NOCOUNT ON 

SELECT venClientesPlantilla.Plantilla_Id, genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas,
	CuentaDxVtas.Cuenta_Id CuentaDxVtas, CuentaDxVtas.Descripcion as DescripcionCuentaDxVtas, CtaFactAnticipo.Cuenta_Id CtaFactAnticipo,
	CtaFactAnticipo.Descripcion as DescripcionCtaFactAnticipo, CtaAnticipo.Cuenta_Id CtaAnticipo, CtaAnticipo.Descripcion as DescripcionCtaAnticipo
FROM venClientesCtasPlantilla 
INNER JOIN venClientesPlantilla  ON (venClientesPlantilla.venClientesPlantilla = venClientesCtasPlantilla.Plantilla_Id)
INNER JOIN genMonedas  ON (genMonedas.genMonedas = venClientesCtasPlantilla.Moneda_Id)
LEFT JOIN conCuentas CuentaDxVtas ON (CuentaDxVtas.conCuentas = venClientesCtasPlantilla.CuentaDxVtas)
LEFT JOIN conCuentas CtaFactAnticipo ON (CtaFactAnticipo.conCuentas = venClientesCtasPlantilla.CtaFactAnticipo)
LEFT JOIN conCuentas CtaAnticipo ON (CtaAnticipo.conCuentas = venClientesCtasPlantilla.CtaAnticipo)
WHERE (venClientesPlantilla.Plantilla_Id = @pPlantilla_Id)
AND genMonedas.Moneda_Id = IsNull(@pMoneda_Id, genMonedas.Moneda_Id)
 
RETURN @@Error 

GO

DROP PROCEDURE venClientesCtasPlantillaEliminar
GO
CREATE PROCEDURE venClientesCtasPlantillaEliminar
(
@pPlantilla_Id varchar(15),
@pMoneda_Id varchar(3) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venClientesCtasPlantilla 
WHERE Plantilla_Id = dbo.FuncFKvenClientesPlantilla(@pPlantilla_Id)
AND Moneda_Id = IsNull(dbo.FuncFKgenMonedas(@pMoneda_Id), Moneda_Id)
 
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venClientesPlantilla.sql*/
DROP PROCEDURE venClientesPlantillaGuardar
GO
CREATE PROCEDURE venClientesPlantillaGuardar
(
@pPlantilla_Id varchar(15),
@pPlantilla_Id_Nuevo varchar(15),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(60),
@pCuit varchar(25),
@pTipoDoc char(1),
@pIdFiscal varchar(20),
@pSucursal int,
@pRazonSocial varchar(120),
@pCondFisc_Id varchar(5) = NULL,
@pLimiteCredito qMonedaD2,
@pMonedaLimCred varchar(3) = NULL,
@pCategCred_Id varchar(5) = NULL,
@pBonificacion1 qPorcentaje,
@pBonificacion2 qPorcentaje,
@pBonificacion3 qPorcentaje,
@pPuntual Sino,
@pEstado_Id varchar(5) = NULL,
@pGeneraDebito Sino,
@pSiempre Sino,
@pIBrutos varchar(20),
@pSituacion char(1),
@pNombreFantasia varchar(120),
@pDireccion1_Fact varchar(50),
@pDireccion2_Fact varchar(50),
@pLocalidad_Fact varchar(35),
@pCodPostal_Fact varchar(15),
@pProvincia_Id_Fact varchar(5) = NULL,
@pPais_Id_Fact smallint = NULL,
@pTelefonos varchar(100),
@pFax varchar(50),
@pEMail varchar(50),
@pDireccion1_Entr varchar(50),
@pDireccion2_Entr varchar(50),
@pLocalidad_Entr varchar(36),
@pCodPostal_Entr varchar(15),
@pProvincia_Id_Entr varchar(5) = NULL,
@pPais_Id_Entr smallint = NULL,
@pTipoClie_Id varchar(5) = NULL,
@pListaPrecio_Id varchar(5) = NULL,
@pFormaEntrega_Id varchar(3) = NULL,
@pCondPagoCli_Id varchar(5) = NULL,
@pVendedor_Id varchar(5) = NULL,
@pCobrador_Id varchar(5) = NULL,
@pZona_Id varchar(5) = NULL,
@pRegion_Id varchar(5) = NULL,
@pContactos varchar(50),
@pObservaciones varchar(max),
@pBonificacion1Suc qPorcentaje,
@pBonificacion2Suc qPorcentaje,
@pBonificacion3Suc qPorcentaje,
@pCentro1_Id varchar(8) = NULL,
@pCentro2_Id varchar(8) = NULL,
@pNroExterior_Fact varchar(10),
@pNroInterior_Fact varchar(10),
@pNroExterior_Entr varchar(10),
@pNroInterior_Entr varchar(20),
@pReclamos varchar(150),
@pMetodoDePago varchar(50),
@pNumCuenta varchar(150),
@pC_UsoCFDI varchar(3),
@pN_MetodoPago varchar(3),
@pUsaComplementoINE Sino,
@pInactivoCliente Sino,
@pPosteado Sino,
@pInactivo Sino,
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM venClientesPlantilla WHERE (Plantilla_Id = @pPlantilla_Id)))
BEGIN 
	UPDATE venClientesPlantilla
	SET @lIdentidad = venClientesPlantilla,
		Plantilla_Id = @pPlantilla_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Cuit = @pCuit,
		TipoDoc = @pTipoDoc,
		IdFiscal = @pIdFiscal,
		Sucursal = @pSucursal,
		RazonSocial = @pRazonSocial,
		CondFisc_Id = dbo.FuncFKvenCondFiscal(@pCondFisc_Id),
		LimiteCredito = @pLimiteCredito,
		MonedaLimCred = dbo.FuncFKgenMonedas(@pMonedaLimCred),
		CategCred_Id = dbo.FuncFKvenCategCredito(@pCategCred_Id),
		Bonificacion1 = @pBonificacion1,
		Bonificacion2 = @pBonificacion2,
		Bonificacion3 = @pBonificacion3,
		Puntual = @pPuntual,
		Estado_Id = dbo.FuncFKvenClieEstados(@pEstado_Id),
		GeneraDebito = @pGeneraDebito,
		Siempre = @pSiempre,
		IBrutos = @pIBrutos,
		Situacion = @pSituacion,
		NombreFantasia = @pNombreFantasia,
		Direccion1_Fact = @pDireccion1_Fact,
		Direccion2_Fact = @pDireccion2_Fact,
		Localidad_Fact = @pLocalidad_Fact,
		CodPostal_Fact = @pCodPostal_Fact,
		Provincia_Id_Fact = dbo.FuncFKgenProvincias(@pProvincia_Id_Fact),
		Pais_Id_Fact = dbo.FuncFKgenPaises(@pPais_Id_Fact),
		Telefonos = @pTelefonos,
		Fax = @pFax,
		EMail = @pEMail,
		Direccion1_Entr = @pDireccion1_Entr,
		Direccion2_Entr = @pDireccion2_Entr,
		Localidad_Entr = @pLocalidad_Entr,
		CodPostal_Entr = @pCodPostal_Entr,
		Provincia_Id_Entr = dbo.FuncFKgenProvincias(@pProvincia_Id_Entr),
		Pais_Id_Entr = dbo.FuncFKgenPaises(@pPais_Id_Entr),
		TipoClie_Id = dbo.FuncFKvenTiposClie(@pTipoClie_Id),
		ListaPrecio_Id = dbo.FuncFKvenListasPrecios(@pListaPrecio_Id),
		FormaEntrega_Id = dbo.FuncFKvenFormaEntrega(@pFormaEntrega_Id),
		CondPagoCli_Id = dbo.FuncFKvenCondPago(@pCondPagoCli_Id),
		Vendedor_Id = dbo.FuncFKvenVendedores(@pVendedor_Id),
		Cobrador_Id = dbo.FuncFKvenCobradores(@pCobrador_Id),
		Zona_Id = dbo.FuncFKvenZona(@pZona_Id),
		Region_Id = dbo.FuncFKvenRegion(@pRegion_Id),
		Contactos = @pContactos,
		Observaciones = @pObservaciones,
		Bonificacion1Suc = @pBonificacion1Suc,
		Bonificacion2Suc = @pBonificacion2Suc,
		Bonificacion3Suc = @pBonificacion3Suc,
		Centro1_Id = dbo.FuncFKconCentro1(@pCentro1_Id),
		Centro2_Id = dbo.FuncFKconCentro2(@pCentro2_Id),
		NroExterior_Fact = @pNroExterior_Fact,
		NroInterior_Fact = @pNroInterior_Fact,
		NroExterior_Entr = @pNroExterior_Entr,
		NroInterior_Entr = @pNroInterior_Entr,
		Reclamos = @pReclamos,
		MetodoDePago = @pMetodoDePago,
		NumCuenta = @pNumCuenta,
		C_UsoCFDI = @pC_UsoCFDI,
		N_MetodoPago = @pN_MetodoPago,
		UsaComplementoINE = @pUsaComplementoINE,
		InactivoCliente = @pInactivoCliente,
		Posteado = @pPosteado,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id
	WHERE (Plantilla_Id = @pPlantilla_Id)
END 
ELSE 
BEGIN 
	INSERT INTO venClientesPlantilla
	(
		Plantilla_Id,
		Empresa_Id,
		Descripcion,
		Cuit,
		TipoDoc,
		IdFiscal,
		Sucursal,
		RazonSocial,
		CondFisc_Id,
		LimiteCredito,
		MonedaLimCred,
		CategCred_Id,
		Bonificacion1,
		Bonificacion2,
		Bonificacion3,
		Puntual,
		Estado_Id,
		GeneraDebito,
		Siempre,
		IBrutos,
		Situacion,
		NombreFantasia,
		Direccion1_Fact,
		Direccion2_Fact,
		Localidad_Fact,
		CodPostal_Fact,
		Provincia_Id_Fact,
		Pais_Id_Fact,
		Telefonos,
		Fax,
		EMail,
		Direccion1_Entr,
		Direccion2_Entr,
		Localidad_Entr,
		CodPostal_Entr,
		Provincia_Id_Entr,
		Pais_Id_Entr,
		TipoClie_Id,
		ListaPrecio_Id,
		FormaEntrega_Id,
		CondPagoCli_Id,
		Vendedor_Id,
		Cobrador_Id,
		Zona_Id,
		Region_Id,
		Contactos,
		Observaciones,
		Bonificacion1Suc,
		Bonificacion2Suc,
		Bonificacion3Suc,
		Centro1_Id,
		Centro2_Id,
		NroExterior_Fact,
		NroInterior_Fact,
		NroExterior_Entr,
		NroInterior_Entr,
		Reclamos,
		MetodoDePago,
		NumCuenta,
		C_UsoCFDI,
		N_MetodoPago,
		UsaComplementoINE,
		InactivoCliente,
		Posteado,
		Inactivo,
		Usuario_Id
	)
	VALUES 
	(
		@pPlantilla_Id,
		@pEmpresa_Id,
		@pDescripcion,
		@pCuit,
		@pTipoDoc,
		@pIdFiscal,
		@pSucursal,
		@pRazonSocial,
		dbo.FuncFKvenCondFiscal(@pCondFisc_Id),
		@pLimiteCredito,
		dbo.FuncFKgenMonedas(@pMonedaLimCred),
		dbo.FuncFKvenCategCredito(@pCategCred_Id),
		@pBonificacion1,
		@pBonificacion2,
		@pBonificacion3,
		@pPuntual,
		dbo.FuncFKvenClieEstados(@pEstado_Id),
		@pGeneraDebito,
		@pSiempre,
		@pIBrutos,
		@pSituacion,
		@pNombreFantasia,
		@pDireccion1_Fact,
		@pDireccion2_Fact,
		@pLocalidad_Fact,
		@pCodPostal_Fact,
		dbo.FuncFKgenProvincias(@pProvincia_Id_Fact),
		dbo.FuncFKgenPaises(@pPais_Id_Fact),
		@pTelefonos,
		@pFax,
		@pEMail,
		@pDireccion1_Entr,
		@pDireccion2_Entr,
		@pLocalidad_Entr,
		@pCodPostal_Entr,
		dbo.FuncFKgenProvincias(@pProvincia_Id_Entr),
		dbo.FuncFKgenPaises(@pPais_Id_Entr),
		dbo.FuncFKvenTiposClie(@pTipoClie_Id),
		dbo.FuncFKvenListasPrecios(@pListaPrecio_Id),
		dbo.FuncFKvenFormaEntrega(@pFormaEntrega_Id),
		dbo.FuncFKvenCondPago(@pCondPagoCli_Id),
		dbo.FuncFKvenVendedores(@pVendedor_Id),
		dbo.FuncFKvenCobradores(@pCobrador_Id),
		dbo.FuncFKvenZona(@pZona_Id),
		dbo.FuncFKvenRegion(@pRegion_Id),
		@pContactos,
		@pObservaciones,
		@pBonificacion1Suc,
		@pBonificacion2Suc,
		@pBonificacion3Suc,
		dbo.FuncFKconCentro1(@pCentro1_Id),
		dbo.FuncFKconCentro2(@pCentro2_Id),
		@pNroExterior_Fact,
		@pNroInterior_Fact,
		@pNroExterior_Entr,
		@pNroInterior_Entr,
		@pReclamos,
		@pMetodoDePago,
		@pNumCuenta,
		@pC_UsoCFDI,
		@pN_MetodoPago,
		@pUsaComplementoINE,
		@pInactivoCliente,
		@pPosteado,
		@pInactivo,
		@pUsuario_Id
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE venClientesPlantillaDatos
GO
CREATE PROCEDURE venClientesPlantillaDatos
(
@pPlantilla_Id varchar(15)
)
AS
SET NOCOUNT ON 

SELECT venClientesPlantilla.venClientesPlantilla, venClientesPlantilla.Plantilla_Id, venClientesPlantilla.Plantilla_Id Plantilla_Id_Nueva,
	venClientesPlantilla.Empresa_Id, venClientesPlantilla.Descripcion,
	Cast( Case When venClientesPlantilla.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, venClientesPlantilla.Cuit, venClientesPlantilla.TipoDoc,
	venClientesPlantilla.IdFiscal, venClientesPlantilla.Sucursal, venClientesPlantilla.RazonSocial, 
	venCondFiscal.CondFisc_Id, venCondFiscal.Descripcion as DescripcionCondFiscal,
	venClientesPlantilla.LimiteCredito, genMonedas.Moneda_Id MonedaLimCred, genMonedas.Descripcion as DescripcionMonedaLimCred, venCategCredito.CategCred_Id,
	venCategCredito.Descripcion as DescripcionCategCredito, venClientesPlantilla.Bonificacion1, venClientesPlantilla.Bonificacion2, venClientesPlantilla.Bonificacion3,
	venClientesPlantilla.Puntual, venClieEstados.Estado_Id, venClieEstados.Descripcion as DescripcionClieEstados, venClientesPlantilla.GeneraDebito,
	venClientesPlantilla.Siempre, venClientesPlantilla.IBrutos, venClientesPlantilla.Situacion, venClientesPlantilla.NombreFantasia,
	venClientesPlantilla.Direccion1_Fact, venClientesPlantilla.Direccion2_Fact, venClientesPlantilla.Localidad_Fact, venClientesPlantilla.CodPostal_Fact,
	genProvincias.Provincia_Id Provincia_Id_Fact, genProvincias.Descripcion as DescripcionProvincia_Id_Fact, genPaises.Pais_Id Pais_Id_Fact, genPaises.Descripcion as DescripcionPais_Id_Fact,
	venClientesPlantilla.Telefonos, venClientesPlantilla.Fax, venClientesPlantilla.EMail, venClientesPlantilla.Direccion1_Entr,
	venClientesPlantilla.Direccion2_Entr, venClientesPlantilla.Localidad_Entr, venClientesPlantilla.CodPostal_Entr, genProvincias2.Provincia_Id Provincia_Id_Entr,
	genProvincias2.Descripcion as DescripcionProvincia_Id_Entr, genPaises2.Pais_Id Pais_Id_Entr, genPaises2.Descripcion as DescripcionPais_Id_Entr, venTiposClie.TipoClie_Id,
	venTiposClie.Descripcion as DescripcionTiposClie, venListasPrecios.ListaPrecio_Id, venListasPrecios.Descripcion as DescripcionListasPrecios, venFormaEntrega.FormaEntrega_Id,
	venFormaEntrega.RazonSocial as DescripcionFormaEntrega, venCondPago.CondPagoCli_Id, venCondPago.Descripcion as DescripcionCondPago, venVendedores.Vendedor_Id,
	venVendedores.Nombre as DescripcionVendedores, venCobradores.Cobrador_Id, venCobradores.Nombre as DescripcionCobradores, venZona.Zona_Id,
	venZona.Descripcion as DescripcionZona, venRegion.Region_Id, venRegion.Descripcion as DescripcionRegion, venClientesPlantilla.Contactos,
	venClientesPlantilla.Observaciones, venClientesPlantilla.Bonificacion1Suc, venClientesPlantilla.Bonificacion2Suc, venClientesPlantilla.Bonificacion3Suc,
	conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2,
	venClientesPlantilla.NroExterior_Fact, venClientesPlantilla.NroInterior_Fact, venClientesPlantilla.NroExterior_Entr, venClientesPlantilla.NroInterior_Entr,
	venClientesPlantilla.Reclamos, venClientesPlantilla.MetodoDePago, venClientesPlantilla.NumCuenta, venClientesPlantilla.C_UsoCFDI,
	venClientesPlantilla.N_MetodoPago, venClientesPlantilla.UsaComplementoINE, venClientesPlantilla.InactivoCliente, venClientesPlantilla.Posteado,
	venClientesPlantilla.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario
FROM venClientesPlantilla 
LEFT JOIN venCondFiscal  ON (venCondFiscal.venCondFiscal = venClientesPlantilla.CondFisc_Id)
LEFT JOIN genMonedas  ON (genMonedas.genMonedas = venClientesPlantilla.MonedaLimCred)
LEFT JOIN venCategCredito  ON (venCategCredito.venCategCredito = venClientesPlantilla.CategCred_Id)
LEFT JOIN venClieEstados  ON (venClieEstados.venClieEstados = venClientesPlantilla.Estado_Id)
LEFT JOIN genProvincias  ON (genProvincias.genProvincias = venClientesPlantilla.Provincia_Id_Fact)
LEFT JOIN genPaises  ON (genPaises.genPaises = venClientesPlantilla.Pais_Id_Fact)
LEFT JOIN genProvincias genProvincias2 ON (genProvincias2.genProvincias = venClientesPlantilla.Provincia_Id_Entr)
LEFT JOIN genPaises genPaises2 ON (genPaises2.genPaises = venClientesPlantilla.Pais_Id_Entr)
LEFT JOIN venTiposClie  ON (venTiposClie.venTiposClie = venClientesPlantilla.TipoClie_Id)
LEFT JOIN venListasPrecios  ON (venListasPrecios.venListasPrecios = venClientesPlantilla.ListaPrecio_Id)
LEFT JOIN venFormaEntrega  ON (venFormaEntrega.venFormaEntrega = venClientesPlantilla.FormaEntrega_Id)
LEFT JOIN venCondPago  ON (venCondPago.venCondPago = venClientesPlantilla.CondPagoCli_Id)
LEFT JOIN venVendedores  ON (venVendedores.venVendedores = venClientesPlantilla.Vendedor_Id)
LEFT JOIN venCobradores  ON (venCobradores.venCobradores = venClientesPlantilla.Cobrador_Id)
LEFT JOIN venZona  ON (venZona.venZona = venClientesPlantilla.Zona_Id)
LEFT JOIN venRegion  ON (venRegion.venRegion = venClientesPlantilla.Region_Id)
LEFT JOIN conCentro1  ON (conCentro1.conCentro1 = venClientesPlantilla.Centro1_Id)
LEFT JOIN conCentro2  ON (conCentro2.conCentro2 = venClientesPlantilla.Centro2_Id)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = venClientesPlantilla.Usuario_Id)
WHERE (Plantilla_Id = @pPlantilla_Id)

Declare @pidentity bigint= dbo.FuncFKvenClientesPlantilla(@pPlantilla_Id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'venClientesPlantilla'

Exec venClientesCtasPlantillaDatos @pPlantilla_Id

RETURN @@Error 

GO

DROP PROCEDURE venClientesPlantillaEliminar
GO
CREATE PROCEDURE venClientesPlantillaEliminar
(
@pPlantilla_Id varchar(15)
)
AS
SET NOCOUNT ON 

DELETE FROM venClientesPlantilla 
WHERE (Plantilla_Id = @pPlantilla_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKvenClientesPlantilla
GO

CREATE FUNCTION FuncFKvenClientesPlantilla
(
@pPlantilla_Id varchar (15)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = venClientesPlantilla FROM venClientesPlantilla WHERE 
	Plantilla_Id = @pPlantilla_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venClientesXLSCatalogo.sql*/
-- exec venClientesXLSCatalogo '00001','00010'
-- exec venClientesXLSCatalogo '35000','35001'
drop Procedure venClientesXLSCatalogo
go
create Procedure venClientesXLSCatalogo
(
    @pClienteDesde varchar(15),
    @pClienteHasta varchar(15)
)
as
select @pClienteDesde as ClienteDesde, @pClienteHasta as ClienteHasta
select Cliente_Id, genEntidades.Cuit as ClaveFiscal, genEntidades.TipoDoc, genEntidades.IdFiscal, case when venClientes.Empresa_Id is null then 1 else 0 end as PTodasEmpresas,
RazonSocial, SucursalPredeter, venCondFiscal.CondFisc_Id, LimiteCredito, MonedaLimCred.Moneda_Id MonedaLimCred,
venCategCredito.CategCred_Id, Bonificacion1, Bonificacion2, Bonificacion3, Puntual,
ISNULL(venClieEstados.Estado_Id,' ') AS Estado_Id, GeneraDebito, Siempre, CongelaCambio, IBrutos, Situacion, venClientes.Posteado
from venClientes
inner join genEntidades on genEntidades.genEntidades=venClientes.genEntidades
inner join venCondFiscal on venCondFiscal.venCondFiscal=venClientes.CondFisc_Id
inner join genMonedas MonedaLimCred on MonedaLimCred.genMonedas=venClientes.MonedaLimCred
inner join venCategCredito on venCategCredito.venCategCredito=venClientes.CategCred_Id
left join venClieEstados on venClieEstados.venClieEstados=venClientes.Estado_Id
where venClientes.Cliente_Id BETWEEN @pClienteDesde and @pClienteHasta

select venClientes.Cliente_Id, Sucursal, NombreFantasia, Direccion1_Fact, Direccion2_Fact,
Localidad_Fact, CodPostal_Fact, ProvinciaFact.Provincia_Id as Provincia_Id_Fact, PaisFact.Pais_Id as Pais_Id_Fact,
Telefonos, Fax, venClieHabitual.EMail, Direccion1_Entr, Direccion2_Entr, Localidad_Entr, CodPostal_Entr,
ProvinciaEntr.Provincia_Id as Provincia_Id_Entr, PaisEntr.Pais_Id as Pais_Id_Entr,
venTiposClie.TipoClie_Id, venListasPrecios.ListaPrecio_Id, venFormaEntrega.FormaEntrega_Id,
venCondPago.CondPagoCli_Id, venVendedores.Vendedor_Id, venCobradores.Cobrador_Id, venZona.Zona_Id,
venRegion.Region_Id, Contactos, venClieHabitual.Inactivo, isnull(Observaciones,' ') Observaciones, venClieHabitual.Bonificacion1 as BonificacionS1, venClieHabitual.Bonificacion2 as BonificacionS2,
venClieHabitual.Bonificacion3 as BonificacionS3, ISNULL(conCentro1.Centro1_Id,' ') AS Centro1_Id, 
ISNULL(conCentro2.Centro2_Id,' ') Centro2_Id, NroExterior_Fact, NroInterior_Fact,
NroExterior_Entr, NroInterior_Entr, Reclamos, MetodoDePago , venClientes.Posteado 
from venClieHabitual
inner join venClientes on venClieHabitual.genEntidades=venClientes.genEntidades
inner join genProvincias ProvinciaFact on ProvinciaFact.genProvincias=venClieHabitual.Provincia_Id_Fact
inner join genPaises PaisFact on PaisFact.genPaises=venClieHabitual.Pais_Id_Fact
inner join genPaises PaisEntr on PaisEntr.genPaises=venClieHabitual.Pais_Id_Entr
inner join genProvincias ProvinciaEntr on ProvinciaEntr.genProvincias=venClieHabitual.Provincia_Id_Entr
inner join venTiposClie on venTiposClie.venTiposClie=venClieHabitual.TipoClie_Id
inner join venListasPrecios on venListasPrecios.venListasPrecios=venClieHabitual.ListaPrecio_Id
inner join venFormaEntrega on venFormaEntrega.venFormaEntrega=venClieHabitual.FormaEntrega_Id
inner join venCondPago on venCondPago.venCondPago=venClieHabitual.CondPagoCli_Id
inner join venVendedores on venVendedores.venVendedores=venClieHabitual.Vendedor_Id
inner join venCobradores on venCobradores.venCobradores=venClieHabitual.Cobrador_Id
inner join venZona on venZona.venZona=venClieHabitual.Zona_Id
inner join venRegion on venRegion.venRegion=venClieHabitual.Region_Id
left join conCentro1 on conCentro1.conCentro1=venClieHabitual.Centro1_Id
left join conCentro2 on conCentro2.conCentro2=venClieHabitual.Centro2_Id
where venClientes.Cliente_Id BETWEEN @pClienteDesde and @pClienteHasta

select venClientes.Cliente_Id, genMonedas.Moneda_Id, CuentaDxVtas.Cuenta_Id as CuentaDxVtas,
CtaFactAnticipo.Cuenta_Id as CtaFactAnticipo, 
CtaAnticipo.Cuenta_Id as CtaAnticipo
from venClientesCtas
inner join venClientes on venClientes.genEntidades=venClientesCtas.Cliente_Id
inner join genMonedas on genMonedas.genMonedas=venClientesCtas.Moneda_Id
inner join conCuentas CuentaDxVtas on CuentaDxVtas.conCuentas=venClientesCtas.CuentaDxVtas
inner join conCuentas CtaFactAnticipo on CtaFactAnticipo.conCuentas=venClientesCtas.CtaFactAnticipo
inner join conCuentas CtaAnticipo on CtaAnticipo.conCuentas=venClientesCtas.CtaAnticipo
where venClientes.Cliente_Id BETWEEN @pClienteDesde and @pClienteHasta

SELECT venClientes.Cliente_Id, impJurisdicciones.Juris_Id, genJurisCoeficientes.Situacion, Coeficiente, Exencion, FechaHasta
from genJurisCoeficientes
inner join venClientes on venClientes.genEntidades=genJurisCoeficientes.genEntidades
inner join impJurisdicciones on impJurisdicciones.impJurisdicciones=genJurisCoeficientes.Juris_Id
where venClientes.Cliente_Id BETWEEN @pClienteDesde and @pClienteHasta

SELECT venClientes.Cliente_Id, venClieContacto.Sucursal, venClieContacto.NroContacto, 
	venClieContacto.Nombre, venClieContacto.Email, venClieContacto.Telefono,venClieContacto.Interno, 
	venClieContacto.Puesto, 
venClieContacto.EnviaFacturas, venClieContacto.EnviaPedido, venClieContacto.EnviaRecibo, 
venClieContacto.Inactivo, venClieContacto.Movil, venClieContacto.Observaciones 
FROM venClientes INNER JOIN venClieContacto ON
	venClientes.genEntidades =venClieContacto.Cliente_Id 
Where venClientes.Cliente_Id BETWEEN @pClienteDesde and @pClienteHasta
GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venClieSaldosIni.sql*/
DROP PROCEDURE venClientesSaldoIniDatos
GO
CREATE PROCEDURE venClientesSaldoIniDatos(
@ClienteDesde VarChar(15) ,
@ClienteHasta VarChar(15) , 
@pEmpresa_Id int
)

AS


SELECT @ClienteDesde as ClienteDesde, @ClienteHasta as ClienteHasta, @pEmpresa_Id as Empresa_Id, 
	' ' as  Archivo , 0 AS ClienteActual, ' ' Termino, ' ' Mensaje


SELECT venMovimientos.venMovimientos as Renglon, 
	venClientes.Cliente_Id, venClientes.RazonSocial,  venMovimientos.venMovimientos,
	conAsientos.Fecha,  venSubTipoMov.SubTipoMov_Id, venSubTipoMov.Descripcion DescripcionTM, genSucursalesEmpr.Sucursal SucursalComp,
	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, 
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoStr, 
	genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, 
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
	genMovCuotas.CuotaNro,  genMovCuotas.Importe, genMovCuotas.FechaVencimiento,venMovimientosFiscal.ClaveFiscal,
	conAsientos.Cambio, genMonedas.Moneda_Id, genMonedas.Descripcion DescripcionMoneda,
	--conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuenta, 
	venMovimientos.Sucursal,
	Cast(Case When Max(Comprob.Asiento_Id) Is Null Then 0 Else 1 End + Case When Max(Comprob_Ap.Asiento_Id) Is Null Then 0 Else 1 End As Bit) Aplicado
	From venMovimientos 
	inner join venClientes ON venMovimientos.Cliente_Id = venClientes.genEntidades
		inner join conAsientos ON conAsientos.conAsientos = venMovimientos.venMovimientos
		INNER JOIN genEmpresas ON genEmpresas.genEmpresas =conAsientos.Empresa_Id
		INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id =conAsientos.conAsientos
		INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
		INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
		inner join conMovCont ON conMovCont.conAsientos = conAsientos.conAsientos and conMovCont.Clase IN ('CLI', 'ANTCL')
		--INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.Cuenta_Id
		INNER JOIN venSubTipoMov ON venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
		INNER JOIN genMovCuotas ON genMovCuotas.Asiento_Id = venMovimientos.venMovimientos
		Inner Join genSucursalesEmpr On genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
		left join venMovimientosFiscal on venMovimientosFiscal.venMovimientos=venMovimientos.venMovimientos
		Left Join genCancMov Comprob On Comprob.Asiento_Id = venMovimientos.venMovimientos
		Left Join genCancMov Comprob_Ap On Comprob_Ap.Asiento_Id_Ap = venMovimientos.venMovimientos
Where
	conAsientos.Formulario_Id = dbo.FuncFKdisFormularios('frmvenClientesSaldoIni') and 
	conAsientos.Anulado = 0 AND 
	venClientes.Cliente_Id between @ClienteDesde and @ClienteHasta and
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id

Group By
venMovimientos.venMovimientos, 
	venClientes.Cliente_Id, venClientes.RazonSocial,  venMovimientos.venMovimientos,
	conAsientos.Fecha,  venSubTipoMov.SubTipoMov_Id, venSubTipoMov.Descripcion, genSucursalesEmpr.Sucursal,
	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, 
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N), 
	genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, 
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
	genMovCuotas.CuotaNro,  genMovCuotas.Importe, genMovCuotas.FechaVencimiento,venMovimientosFiscal.ClaveFiscal,
	conAsientos.Cambio, genMonedas.Moneda_Id, genMonedas.Descripcion,
	--conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuenta, 
	venMovimientos.Sucursal
-- IMPUESTOS


SELECT venMovimientos.venMovimientos as Renglon, venImpuestos.Impuesto_Id, venImpuestos.Descripcion, 
	venMovImpuestos.BaseImponible, venMovImpuestos.Porcentaje, venMovImpuestos.Importe,
	venMovimientos.venMovimientos
	From venMovImpuestos 
	inner join conAsientos ON conAsientos.conAsientos = venMovImpuestos.venMovimientos
	INNER JOIN venMovimientos ON conAsientos.conAsientos = venMovimientos.venMovimientos
	inner join venClientes ON venMovimientos.Cliente_Id = venClientes.genEntidades
	INNER JOIN venImpuestos ON venImpuestos.venImpuestos = venMovImpuestos.Impuesto_Id
	INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id =conAsientos.conAsientos
Where
	conAsientos.Formulario_Id = dbo.FuncFKdisFormularios('frmvenClientesSaldoIni') and 
	conAsientos.Anulado = 0 AND 
	venClientes.Cliente_Id between @ClienteDesde and @ClienteHasta and 
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id

select ' ' as Cliente_Id

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venCobradores.sql*/
DROP PROCEDURE venCobradoresGuardar
GO
CREATE PROCEDURE venCobradoresGuardar
(
@pvenCobradores bigint,
@pCobrador_Id varchar(5),
@pCobrador_Id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pNombre varchar(35),
@pComision numeric(5),
@pLimiteComision numeric(9),
@pInactivo bit,
@pUsuario_Id int,
@pPosteado bit
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venCobradores WHERE (venCobradores = @pvenCobradores)))
BEGIN 
	UPDATE venCobradores
	SET		Cobrador_Id = @pCobrador_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Nombre = @pNombre,
		Comision = @pComision,
		LimiteComision = @pLimiteComision,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (venCobradores = @pvenCobradores)
END 
ELSE 
BEGIN 
	INSERT INTO venCobradores
	(
		venCobradores,
		Cobrador_Id,
		Empresa_Id,
		Nombre,
		Comision,
		LimiteComision,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pvenCobradores,
		@pCobrador_Id_Nuevo,
		@pEmpresa_Id,
		@pNombre,
		@pComision,
		@pLimiteComision,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
END 

GO

DROP PROCEDURE venCobradoresDatos
GO
CREATE PROCEDURE venCobradoresDatos
(
@pCobrador_id varchar (5)
)
AS
SET NOCOUNT ON 

SELECT venCobradores.venCobradores, genEntidades.CUIT, genEntidades.TipoDoc, genEntidades.IdFiscal,
	venCobradores.Cobrador_Id, venCobradores.Empresa_Id, Cast( Case When venCobradores.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	venCobradores.Nombre, venCobradores.Comision, venCobradores.LimiteComision,
IsNull(venClientes.Cliente_Id, '') Cliente_Id, IsNull(venClientes.RazonSocial, '') ClieRazonSocial,
IsNull(comProveedores.Proveed_Id, '') Proveed_Id, IsNull(comProveedores.RazonSocial, '') ProvRazonSocial,
IsNull(venVendedores.Vendedor_Id, '') Vendedor_Id, IsNull(venVendedores.Nombre, '') VenNombre,
IsNull(SuePersonal.Legajo, 0) Legajo, IsNull(suePersonal.ApellidoPaterno, '') SueNombre,
	venCobradores.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, venCobradores.Posteado
FROM venCobradores 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = venCobradores.Usuario_Id)
INNER JOIN genEntidades ON genEntidades.genEntidades = venCobradores.venCobradores
 Left Outer Join venClientes On venClientes.genEntidades = genEntidades.genEntidades
 Left Outer Join comProveedores On comProveedores.genEntidades = genEntidades.genEntidades
 Left Outer Join venVendedores On venVendedores.venVendedores = genEntidades.genEntidades
 Left Outer Join suePersonal On suePersonal.genEntidades = genEntidades.genEntidades

WHERE (venCobradores.Cobrador_Id = @pCobrador_Id)

 Declare @pidentity bigint= dbo.FuncFKvenCobradores(@pCobrador_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'venCobradores'
 RETURN @@Error 

GO

DROP PROCEDURE venCobradoresDatosId
GO
CREATE PROCEDURE venCobradoresDatosId
(
@pIdentity bigint
)
AS
SET NOCOUNT ON 

SELECT venCobradores.venCobradores, genEntidades.CUIT, genEntidades.TipoDoc, genEntidades.IdFiscal,
	venCobradores.Cobrador_Id, venCobradores.Empresa_Id, Cast( Case When venCobradores.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	venCobradores.Nombre, venCobradores.Comision, venCobradores.LimiteComision,
IsNull(venClientes.Cliente_Id, '') Cliente_Id, IsNull(venClientes.RazonSocial, '') ClieRazonSocial,
IsNull(comProveedores.Proveed_Id, '') Proveed_Id, IsNull(comProveedores.RazonSocial, '') ProvRazonSocial,
IsNull(venVendedores.Vendedor_Id, '') Vendedor_Id, IsNull(venVendedores.Nombre, '') VenNombre,
IsNull(SuePersonal.Legajo, 0) Legajo, IsNull(suePersonal.ApellidoPaterno, '') SueNombre,
	venCobradores.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, venCobradores.Posteado
FROM venCobradores 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = venCobradores.Usuario_Id)
INNER JOIN genEntidades ON genEntidades.genEntidades = venCobradores.venCobradores
 Left Outer Join venClientes On venClientes.genEntidades = genEntidades.genEntidades
 Left Outer Join comProveedores On comProveedores.genEntidades = genEntidades.genEntidades
 Left Outer Join venVendedores On venVendedores.venVendedores = genEntidades.genEntidades
 Left Outer Join suePersonal On suePersonal.genEntidades = genEntidades.genEntidades
WHERE venCobradores.venCobradores = @pIdentity

Exec genAtributosGeneralesIdentityDatos @pidentity, 'venCobradores'
RETURN @@Error 

GO

DROP PROCEDURE venCobradoresEliminar
GO
CREATE PROCEDURE venCobradoresEliminar
(
@pCobrador_Id VarChar(5)
)
AS
SET NOCOUNT ON 

DELETE FROM venCobradores 
WHERE Cobrador_Id = @pCobrador_Id
 
 RETURN @@Error 

GO

GO
DROP FUNCTION FuncFKvenCobradores
GO

CREATE FUNCTION FuncFKvenCobradores
(
@pCobrador_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = venCobradores FROM venCobradores WHERE 
	Cobrador_Id = @pCobrador_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venCompCartaPorte.sql*/
DROP PROCEDURE venCompCartaPorteGuardar
GO
CREATE PROCEDURE venCompCartaPorteGuardar
(
@pvenmovimientos bigint,
@pTranspInternac varchar(2),
@pEntradaSalidaMerc varchar(7),
@pViaEntradaSalida varchar(2),
@pTotalDistRec numeric(5,2),
@pPesoBrutoTotal numeric(18,3),
@pUnidadPeso varchar(5) = NULL,
@pPesoNetoTotal numeric(18,3),
@pCargoPorTasacion numeric(18,3),
@pCamion_Id varchar(20) = NULL,
@pRemolque1 varchar(20) = NULL,
@pRemolque2 varchar(20) = NULL, 
@pOperador_Id VarChar(15) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venCompCartaPorte WHERE (venmovimientos = @pvenmovimientos)))
BEGIN 
	UPDATE venCompCartaPorte
	SET		TranspInternac = @pTranspInternac,
		EntradaSalidaMerc = @pEntradaSalidaMerc,
		ViaEntradaSalida = @pViaEntradaSalida,
		TotalDistRec = @pTotalDistRec,
		PesoBrutoTotal = @pPesoBrutoTotal,
		UnidadPeso = @pUnidadPeso,
		PesoNetoTotal = @pPesoNetoTotal,
		CargoPorTasacion = @pCargoPorTasacion,
		Camion_Id = dbo.FuncFKvenCamiones(@pCamion_Id),
		Remolque1 = dbo.FuncFKvenCamiones(@pRemolque1),
		Remolque2 = dbo.FuncFKvenCamiones(@pRemolque2), 
		Operador_Id = dbo.FuncFKvenOperadores(@pOperador_Id)
	WHERE (venmovimientos = @pvenmovimientos)
END 
ELSE 
BEGIN 
	INSERT INTO venCompCartaPorte
	(
		venmovimientos,
		TranspInternac,
		EntradaSalidaMerc,
		ViaEntradaSalida,
		TotalDistRec,
		PesoBrutoTotal,
		UnidadPeso,
		PesoNetoTotal,
		CargoPorTasacion,
		Camion_Id,
		Remolque1,
		Remolque2, 
		Operador_Id 
	)
	VALUES 
	(
		@pvenmovimientos,
		@pTranspInternac,
		@pEntradaSalidaMerc,
		@pViaEntradaSalida,
		@pTotalDistRec,
		@pPesoBrutoTotal,
		@pUnidadPeso,
		@pPesoNetoTotal,
		@pCargoPorTasacion,
		dbo.FuncFKvenCamiones(@pCamion_Id),
		dbo.FuncFKvenCamiones(@pRemolque1),
		dbo.FuncFKvenCamiones(@pRemolque2),
		dbo.FuncFKvenOperadores(@pOperador_Id)
	)
END 

GO

DROP PROCEDURE venCompCartaPorteDatos
GO
CREATE PROCEDURE venCompCartaPorteDatos
(
@pvenmovimientos bigint
)
AS
SET NOCOUNT ON 

SELECT venCompCartaPorte.venmovimientos, venCompCartaPorte.TranspInternac, venCompCartaPorte.EntradaSalidaMerc,
	venCompCartaPorte.ViaEntradaSalida, venCompCartaPorte.TotalDistRec, venCompCartaPorte.PesoBrutoTotal, venCompCartaPorte.UnidadPeso,
	venCompCartaPorte.PesoNetoTotal, venCompCartaPorte.CargoPorTasacion, venCamiones.Patente_Id Camion_Id, venCamiones.Descripcion as DescripcionCamiones,
	venCamiones2.Patente_Id Remolque1, venCamiones2.Descripcion as DescripcionRemolque1, venCamiones3.Patente_Id Remolque2, venCamiones3.Descripcion as DescripcionRemolque2,
	venOperadores.Operador_Id, venOperadores.NombreOperador
FROM venCompCartaPorte 
INNER JOIN venMovimientos  ON (venMovimientos.venMovimientos = venCompCartaPorte.venmovimientos)
LEFT JOIN venCamiones  ON (venCamiones.venCamiones = venCompCartaPorte.Camion_Id)
LEFT JOIN venCamiones venCamiones2 ON (venCamiones2.venCamiones = venCompCartaPorte.Remolque1)
LEFT JOIN venCamiones venCamiones3 ON (venCamiones3.venCamiones = venCompCartaPorte.Remolque2)
LEFT JOIN venOperadores ON  venOperadores.venOperadores =venCompCartaPorte.Operador_Id
WHERE (venCompCartaPorte.venmovimientos = @pvenmovimientos)
 
RETURN @@Error 

GO

DROP PROCEDURE venCompCartaPorteEliminar
GO
CREATE PROCEDURE venCompCartaPorteEliminar
(
@pvenmovimientos bigint
)
AS
SET NOCOUNT ON 

DELETE FROM venCompCartaPorte 
WHERE (venmovimientos = @pvenmovimientos)
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venCompCartaPorteDestino.sql*/
DROP PROCEDURE venCompCartaPorteDestinoGuardar
GO
CREATE PROCEDURE venCompCartaPorteDestinoGuardar
(
@pvenmovimientos bigint,
@pUbicacion int,
@pidDestino int,
@pRFCDestinatario varchar(14) = NULL,
@pNombreDestinatario varchar(254) = NULL,
@pNumRegIdTrib varchar(40) = NULL,
@pResidenciaFiscal smallint = NULL,
@pNumEstacion varchar(6) = NULL,
@pNombreEstacion varchar(50) = NULL,
@pNavegacionTrafico varchar(8) = NULL,
@pFechaHoraProgLlegada datetime,
@pCalle varchar(100),
@pNumeroExterior varchar(30) = NULL,
@pNumerointerior varchar(30) = NULL,
@pColonia varchar(120) = NULL,
@pLocalidad varchar(120) = NULL,
@pReferencia varchar(100) = NULL,
@pMunicipio varchar(120) = NULL,
@pEstado varchar(30) = NULL,
@pPais smallint = NULL,
@pCodigoPostal varchar(20) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venCompCartaPorteDestino WHERE (venmovimientos = @pvenmovimientos) AND (Ubicacion = @pUbicacion) AND (idDestino = @pidDestino)))
BEGIN 
	UPDATE venCompCartaPorteDestino
	SET		RFCDestinatario = @pRFCDestinatario,
		NombreDestinatario = @pNombreDestinatario,
		NumRegIdTrib = @pNumRegIdTrib,
		ResidenciaFiscal = dbo.FuncFKgenPaises(@pResidenciaFiscal),
		NumEstacion = @pNumEstacion,
		NombreEstacion = @pNombreEstacion,
		NavegacionTrafico = @pNavegacionTrafico,
		FechaHoraProgLlegada = @pFechaHoraProgLlegada,
		Calle = @pCalle,
		NumeroExterior = @pNumeroExterior,
		Numerointerior = @pNumerointerior,
		Colonia = @pColonia,
		Localidad = @pLocalidad,
		Referencia = @pReferencia,
		Municipio = @pMunicipio,
		Estado = @pEstado,
		Pais = dbo.FuncFKgenPaises(@pPais),
		CodigoPostal = @pCodigoPostal
	WHERE (venmovimientos = @pvenmovimientos) AND (Ubicacion = @pUbicacion) AND (idDestino = @pidDestino)
END 
ELSE 
BEGIN 
	INSERT INTO venCompCartaPorteDestino
	(
		venmovimientos,
		Ubicacion,
		idDestino,
		RFCDestinatario,
		NombreDestinatario,
		NumRegIdTrib,
		ResidenciaFiscal,
		NumEstacion,
		NombreEstacion,
		NavegacionTrafico,
		FechaHoraProgLlegada,
		Calle,
		NumeroExterior,
		Numerointerior,
		Colonia,
		Localidad,
		Referencia,
		Municipio,
		Estado,
		Pais,
		CodigoPostal
	)
	VALUES 
	(
		@pvenmovimientos,
		@pUbicacion,
		@pidDestino,
		@pRFCDestinatario,
		@pNombreDestinatario,
		@pNumRegIdTrib,
		dbo.FuncFKgenPaises(@pResidenciaFiscal),
		@pNumEstacion,
		@pNombreEstacion,
		@pNavegacionTrafico,
		@pFechaHoraProgLlegada,
		@pCalle,
		@pNumeroExterior,
		@pNumerointerior,
		@pColonia,
		@pLocalidad,
		@pReferencia,
		@pMunicipio,
		@pEstado,
		dbo.FuncFKgenPaises(@pPais),
		@pCodigoPostal
	)
END 

GO

DROP PROCEDURE venCompCartaPorteDestinoDatos
GO
CREATE PROCEDURE venCompCartaPorteDestinoDatos
(
@pvenmovimientos bigint,
@pUbicacion int = NULL,
@pidDestino int = NULL
)
AS
SET NOCOUNT ON 

SELECT venCompCartaPorteDestino.venmovimientos, venCompCartaPorteDestino.Ubicacion, venCompCartaPorteDestino.idDestino,
	venCompCartaPorteDestino.RFCDestinatario, venCompCartaPorteDestino.NombreDestinatario, venCompCartaPorteDestino.NumRegIdTrib, genPaises.Pais_Id ResidenciaFiscal,
	venCompCartaPorteDestino.NumEstacion, venCompCartaPorteDestino.NombreEstacion, venCompCartaPorteDestino.NavegacionTrafico,
	venCompCartaPorteDestino.FechaHoraProgLlegada, venCompCartaPorteDestino.Calle, venCompCartaPorteDestino.NumeroExterior, 
	venCompCartaPorteDestino.Numerointerior, venCompCartaPorteDestino.Colonia, venCompCartaPorteDestino.Localidad, 
	venCompCartaPorteDestino.Referencia, venCompCartaPorteDestino.Municipio,
	venCompCartaPorteDestino.Estado, genPaises2.Pais_Id, venCompCartaPorteDestino.CodigoPostal
FROM venCompCartaPorteDestino 
INNER JOIN venCompCartaPorteUbi  ON (venCompCartaPorteUbi.venmovimientos = venCompCartaPorteDestino.venmovimientos) AND (venCompCartaPorteUbi.Ubicacion = venCompCartaPorteDestino.Ubicacion)
LEFT JOIN genPaises  ON (genPaises.genPaises = venCompCartaPorteDestino.ResidenciaFiscal)
LEFT JOIN genPaises genPaises2 ON (genPaises2.genPaises = venCompCartaPorteDestino.Pais)
WHERE (venCompCartaPorteDestino.venmovimientos = @pvenmovimientos)
AND (venCompCartaPorteDestino.Ubicacion = ISNULL(@pUbicacion,venCompCartaPorteDestino.Ubicacion))
AND (venCompCartaPorteDestino.idDestino = ISNULL(@pidDestino,venCompCartaPorteDestino.idDestino))
 
RETURN @@Error 

GO

DROP PROCEDURE venCompCartaPorteDestinoEliminar
GO
CREATE PROCEDURE venCompCartaPorteDestinoEliminar
(
@pvenmovimientos bigint,
@pUbicacion int = NULL,
@pidDestino int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venCompCartaPorteDestino 
WHERE (venmovimientos = @pvenmovimientos)
AND (Ubicacion = ISNULL(@pUbicacion,Ubicacion))
AND (idDestino = ISNULL(@pidDestino, idDestino))
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venCompCartaPorteMercancia.sql*/
DROP PROCEDURE venCompCartaPorteMercanciaGuardar
GO
CREATE PROCEDURE venCompCartaPorteMercanciaGuardar
(
@pvenmovimientos bigint,
@pidDestino int,
@pRenglon int,
@pBienesTransp varchar(10) = NULL,
@pClaveSTCC varchar(10) = NULL,
@pDescripcion varchar(1000) = NULL,
@pCantidad numeric(18,6),
@pMedida_id varchar(5) = NULL,
@pDimensiones varchar(20) = NULL,
@pMaterialPeligroso varchar(2) = NULL,
@pCveMaterialPeligroso varchar(6) = NULL,
@pEmbalaje varchar(6) = NULL,
@pDescripEmbalaje varchar(100) = NULL,
@pPesoEnKg numeric(18,3),
@pValorMercancia numeric(18,2),
@pFraccionArancelaria varchar(20) = NULL,
@pUUIDComercioExt varchar(36) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venCompCartaPorteMercancia WHERE (venmovimientos = @pvenmovimientos) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE venCompCartaPorteMercancia
	SET		idDestino = @pidDestino,
		BienesTransp = @pBienesTransp,
		ClaveSTCC = @pClaveSTCC,
		Descripcion = @pDescripcion,
		Cantidad = @pCantidad,
		Medida_id = dbo.FuncFKstkUniMed(@pMedida_id),
		Dimensiones = @pDimensiones,
		MaterialPeligroso = @pMaterialPeligroso,
		CveMaterialPeligroso = @pCveMaterialPeligroso,
		Embalaje = @pEmbalaje,
		DescripEmbalaje = @pDescripEmbalaje,
		PesoEnKg = @pPesoEnKg,
		ValorMercancia = @pValorMercancia,
		FraccionArancelaria = @pFraccionArancelaria,
		UUIDComercioExt = @pUUIDComercioExt
	WHERE (venmovimientos = @pvenmovimientos) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO venCompCartaPorteMercancia
	(
		venmovimientos,
		idDestino,
		Renglon,
		BienesTransp,
		ClaveSTCC,
		Descripcion,
		Cantidad,
		Medida_id,
		Dimensiones,
		MaterialPeligroso,
		CveMaterialPeligroso,
		Embalaje,
		DescripEmbalaje,
		PesoEnKg,
		ValorMercancia,
		FraccionArancelaria,
		UUIDComercioExt
	)
	VALUES 
	(
		@pvenmovimientos,
		@pidDestino,
		@pRenglon,
		@pBienesTransp,
		@pClaveSTCC,
		@pDescripcion,
		@pCantidad,
		dbo.FuncFKstkUniMed(@pMedida_id),
		@pDimensiones,
		@pMaterialPeligroso,
		@pCveMaterialPeligroso,
		@pEmbalaje,
		@pDescripEmbalaje,
		@pPesoEnKg,
		@pValorMercancia,
		@pFraccionArancelaria,
		@pUUIDComercioExt
	)
END 

GO

DROP PROCEDURE venCompCartaPorteMercanciaDatos
GO
CREATE PROCEDURE venCompCartaPorteMercanciaDatos
(
@pvenmovimientos bigint,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

SELECT venCompCartaPorteMercancia.venmovimientos, venCompCartaPorteMercancia.idDestino, venCompCartaPorteMercancia.Renglon,
	venCompCartaPorteMercancia.BienesTransp, venCompCartaPorteMercancia.ClaveSTCC, venCompCartaPorteMercancia.Descripcion, venCompCartaPorteMercancia.Cantidad,
	stkUniMed.Medida_Id, venCompCartaPorteMercancia.Dimensiones, venCompCartaPorteMercancia.MaterialPeligroso,
	venCompCartaPorteMercancia.CveMaterialPeligroso, venCompCartaPorteMercancia.Embalaje, venCompCartaPorteMercancia.DescripEmbalaje, venCompCartaPorteMercancia.PesoEnKg,
	venCompCartaPorteMercancia.ValorMercancia, venCompCartaPorteMercancia.FraccionArancelaria, venCompCartaPorteMercancia.UUIDComercioExt
FROM venCompCartaPorteMercancia 
INNER JOIN venCompCartaPorte  ON (venCompCartaPorte.venmovimientos = venCompCartaPorteMercancia.venmovimientos)
LEFT JOIN stkUniMed  ON (stkUniMed.stkUniMed = venCompCartaPorteMercancia.Medida_id)
WHERE (venCompCartaPorteMercancia.venmovimientos = @pvenmovimientos)
AND (venCompCartaPorteMercancia.Renglon = ISNULL(@pRenglon,venCompCartaPorteMercancia.Renglon))
 
RETURN @@Error 

GO

DROP PROCEDURE venCompCartaPorteMercanciaEliminar
GO
CREATE PROCEDURE venCompCartaPorteMercanciaEliminar
(
@pvenmovimientos bigint,
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venCompCartaPorteMercancia 
WHERE (venmovimientos = @pvenmovimientos)
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
 RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venCompCartaPorteOrigen.sql*/
DROP PROCEDURE venCompCartaPorteOrigenGuardar
GO
CREATE PROCEDURE venCompCartaPorteOrigenGuardar
(
@pvenmovimientos bigint,
@pUbicacion int,
@pidOrigen int,
@pRFCRemitente varchar(14) = NULL,
@pNombreRemitente varchar(254) = NULL,
@pNumRegIdTrib varchar(40) = NULL,
@pResidenciaFiscal smallint = NULL,
@pNumEstacion varchar(6) = NULL,
@pNombreEstacion varchar(50) = NULL,
@pNavegacionTrafico varchar(8) = NULL,
@pFechaHoraSalida datetime,
@pCalle varchar(100),
@pNumeroExterior varchar(30) = NULL,
@pNumerointerior varchar(30) = NULL,
@pColonia varchar(120) = NULL,
@pLocalidad varchar(120) = NULL,
@pReferencia varchar(100) = NULL,
@pMunicipio varchar(120) = NULL,
@pEstado varchar(30) = NULL,
@pPais smallint = NULL,
@pCodigoPostal varchar(20) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venCompCartaPorteOrigen WHERE (venmovimientos = @pvenmovimientos) AND (Ubicacion = @pUbicacion) AND (idOrigen = @pidOrigen)))
BEGIN 
	UPDATE venCompCartaPorteOrigen
	SET		RFCRemitente = @pRFCRemitente,
		NombreRemitente = @pNombreRemitente,
		NumRegIdTrib = @pNumRegIdTrib,
		ResidenciaFiscal = dbo.FuncFKgenPaises(@pResidenciaFiscal),
		NumEstacion = @pNumEstacion,
		NombreEstacion = @pNombreEstacion,
		NavegacionTrafico = @pNavegacionTrafico,
		FechaHoraSalida = @pFechaHoraSalida,
		Calle = @pCalle,
		NumeroExterior = @pNumeroExterior,
		Numerointerior = @pNumerointerior,
		Colonia = @pColonia,
		Localidad = @pLocalidad,
		Referencia = @pReferencia,
		Municipio = @pMunicipio,
		Estado = @pEstado,
		Pais = dbo.FuncFKgenPaises(@pPais),
		CodigoPostal = @pCodigoPostal
	WHERE (venmovimientos = @pvenmovimientos) AND (Ubicacion = @pUbicacion) AND (idOrigen = @pidOrigen)
END 
ELSE 
BEGIN 
	INSERT INTO venCompCartaPorteOrigen
	(
		venmovimientos,
		Ubicacion,
		idOrigen,
		RFCRemitente,
		NombreRemitente,
		NumRegIdTrib,
		ResidenciaFiscal,
		NumEstacion,
		NombreEstacion,
		NavegacionTrafico,
		FechaHoraSalida,
		Calle,
		NumeroExterior,
		Numerointerior,
		Colonia,
		Localidad,
		Referencia,
		Municipio,
		Estado,
		Pais,
		CodigoPostal
	)
	VALUES 
	(
		@pvenmovimientos,
		@pUbicacion,
		@pidOrigen,
		@pRFCRemitente,
		@pNombreRemitente,
		@pNumRegIdTrib,
		dbo.FuncFKgenPaises(@pResidenciaFiscal),
		@pNumEstacion,
		@pNombreEstacion,
		@pNavegacionTrafico,
		@pFechaHoraSalida,
		@pCalle,
		@pNumeroExterior,
		@pNumerointerior,
		@pColonia,
		@pLocalidad,
		@pReferencia,
		@pMunicipio,
		@pEstado,
		dbo.FuncFKgenPaises(@pPais),
		@pCodigoPostal
	)
END 

GO

DROP PROCEDURE venCompCartaPorteOrigenDatos
GO
CREATE PROCEDURE venCompCartaPorteOrigenDatos
(
@pvenmovimientos bigint,
@pUbicacion int = null,
@pidOrigen int = null
)
AS
SET NOCOUNT ON 

SELECT venCompCartaPorteOrigen.venmovimientos, venCompCartaPorteOrigen.Ubicacion, venCompCartaPorteOrigen.idOrigen,
	venCompCartaPorteOrigen.RFCRemitente, venCompCartaPorteOrigen.NombreRemitente, venCompCartaPorteOrigen.NumRegIdTrib, genPaises.Pais_Id AS ResidenciaFiscal,
	venCompCartaPorteOrigen.NumEstacion, venCompCartaPorteOrigen.NombreEstacion, venCompCartaPorteOrigen.NavegacionTrafico,
	venCompCartaPorteOrigen.FechaHoraSalida, venCompCartaPorteOrigen.Calle, venCompCartaPorteOrigen.NumeroExterior, venCompCartaPorteOrigen.Numerointerior,
	venCompCartaPorteOrigen.Colonia, venCompCartaPorteOrigen.Localidad, venCompCartaPorteOrigen.Referencia, venCompCartaPorteOrigen.Municipio,
	venCompCartaPorteOrigen.Estado, genPaises2.Pais_Id, venCompCartaPorteOrigen.CodigoPostal
FROM venCompCartaPorteOrigen 
INNER JOIN venCompCartaPorteUbi  ON (venCompCartaPorteUbi.venmovimientos = venCompCartaPorteOrigen.venmovimientos) AND (venCompCartaPorteUbi.Ubicacion = venCompCartaPorteOrigen.Ubicacion)
LEFT JOIN genPaises  ON (genPaises.genPaises = venCompCartaPorteOrigen.ResidenciaFiscal)
LEFT JOIN genPaises genPaises2 ON (genPaises2.genPaises = venCompCartaPorteOrigen.Pais)
WHERE (venCompCartaPorteOrigen.venmovimientos = @pvenmovimientos)
AND (venCompCartaPorteOrigen.Ubicacion = ISNULL(@pUbicacion,venCompCartaPorteOrigen.Ubicacion))
AND (venCompCartaPorteOrigen.idOrigen = ISNULL(@pidOrigen,venCompCartaPorteOrigen.idOrigen))
 
RETURN @@Error 

GO

DROP PROCEDURE venCompCartaPorteOrigenEliminar
GO
CREATE PROCEDURE venCompCartaPorteOrigenEliminar
(
@pvenmovimientos bigint,
@pUbicacion int = NULL,
@pidOrigen int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venCompCartaPorteOrigen 
WHERE (venmovimientos = @pvenmovimientos)
AND (Ubicacion = ISNULL(@pUbicacion,Ubicacion))
AND (idOrigen = ISNULL(@pidOrigen, idOrigen))
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venCompCartaPorteUbi.sql*/
DROP PROCEDURE venCompCartaPorteUbiGuardar
GO
CREATE PROCEDURE venCompCartaPorteUbiGuardar
(
@pvenmovimientos bigint,
@pUbicacion int,
@pTipoEstacion varchar(2) = NULL,
@pDistanciaRecorrida numeric(5,2)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venCompCartaPorteUbi WHERE (venmovimientos = @pvenmovimientos) AND (Ubicacion = @pUbicacion)))
BEGIN 
	UPDATE venCompCartaPorteUbi
	SET		TipoEstacion = @pTipoEstacion,
		DistanciaRecorrida = @pDistanciaRecorrida
	WHERE (venmovimientos = @pvenmovimientos) AND (Ubicacion = @pUbicacion)
END 
ELSE 
BEGIN 
	INSERT INTO venCompCartaPorteUbi
	(
		venmovimientos,
		Ubicacion,
		TipoEstacion,
		DistanciaRecorrida
	)
	VALUES 
	(
		@pvenmovimientos,
		@pUbicacion,
		@pTipoEstacion,
		@pDistanciaRecorrida
	)
END 

GO

DROP PROCEDURE venCompCartaPorteUbiDatos
GO
CREATE PROCEDURE venCompCartaPorteUbiDatos
(
@pvenmovimientos bigint,
@pUbicacion int = NULL
)
AS
SET NOCOUNT ON 

SELECT venCompCartaPorteUbi.venmovimientos,  venCompCartaPorteUbi.Ubicacion, venCompCartaPorteUbi.TipoEstacion,
	venCompCartaPorteUbi.DistanciaRecorrida
FROM venCompCartaPorteUbi 
INNER JOIN venCompCartaPorte  ON (venCompCartaPorte.venmovimientos = venCompCartaPorteUbi.venmovimientos)
WHERE (venCompCartaPorteUbi.venmovimientos = @pvenmovimientos)
AND (venCompCartaPorteUbi.Ubicacion = ISNULL(@pUbicacion, venCompCartaPorteUbi.Ubicacion))
 
RETURN @@Error 

GO

DROP PROCEDURE venCompCartaPorteUbiEliminar
GO
CREATE PROCEDURE venCompCartaPorteUbiEliminar
(
@pvenmovimientos bigint,
@pUbicacion int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venCompCartaPorteUbi 
WHERE (venmovimientos = @pvenmovimientos)
AND (Ubicacion = ISNULL(@pUbicacion, Ubicacion))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venCondFiscal.sql*/
DROP PROCEDURE venCondFiscalGuardar
GO
CREATE PROCEDURE venCondFiscalGuardar
(
@pCondFisc_id varchar(5),
@pCondFisc_id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(35),
@pLetra char(1),
@pAplicaFactCredito bit,
@pLetra_Rf char(1),
@pDiscrimina bit,
@pFacturaElectronica bit,
@pCodigoFiscal varchar(3) = NULL,
@pInactivo bit,
@pUsuario_Id int,
@pPosteado bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM venCondFiscal WHERE (CondFisc_id = @pCondFisc_id)))
BEGIN 
	UPDATE venCondFiscal
	SET		@lIdentidad = venCondFiscal,
		CondFisc_id = @pCondFisc_id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Letra = @pLetra,
		AplicaFactCredito = @pAplicaFactCredito,
		Letra_Rf = @pLetra_Rf,
		Discrimina = @pDiscrimina,
		FacturaElectronica = @pFacturaElectronica,
		CodigoFiscal = @pCodigoFiscal,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (CondFisc_id = @pCondFisc_id)
END 
ELSE 
BEGIN 
	INSERT INTO venCondFiscal
	(
		CondFisc_id,
		Empresa_Id,
		Descripcion,
		Letra,
		AplicaFactCredito,
		Letra_Rf,
		Discrimina,
		FacturaElectronica,
		CodigoFiscal,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pCondFisc_id,
		@pEmpresa_Id,
		@pDescripcion,
		@pLetra,
		@pAplicaFactCredito,
		@pLetra_Rf,
		@pDiscrimina,
		@pFacturaElectronica,
		@pCodigoFiscal,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE venCondFiscalDatos
GO
CREATE PROCEDURE venCondFiscalDatos
(
@pCondFisc_id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT venCondFiscal.venCondFiscal, venCondFiscal.CondFisc_Id, venCondFiscal.Empresa_Id, 
Cast( Case When venCondFiscal.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	venCondFiscal.Descripcion, venCondFiscal.Letra, venCondFiscal.AplicaFactCredito, venCondFiscal.Letra_Rf,
	venCondFiscal.Discrimina, venCondFiscal.FacturaElectronica, venCondFiscal.CodigoFiscal, venCondFiscal.Inactivo,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, venCondFiscal.Posteado
FROM venCondFiscal 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = venCondFiscal.Usuario_Id)
WHERE (venCondFiscal.CondFisc_id = @pCondFisc_id)
 


 Declare @pidentity bigint= dbo.FuncFKvenCondFiscal(@pCondFisc_id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'venCondFiscal'
 
SELECT venImpuestos.Impuesto_Id, venImpuestos.Descripcion, venImpuestos.CodigoFiscal, venImpuestos.UsaFormula,
venImpuestos.FormulaCalc, venImpuestos.Porcentaje, venImpuestos.Fecha_Desde, venImpuestos.Fecha_Hasta,
venImpuestos.Depende_De, venImpuestos.PorVencimiento, CtaReversion.Cuenta_Id CtaReversion, conCuentas.Cuenta_Id,
CtaDifCambio.Cuenta_Id CtaDifCambio, venImpuestos.Inactivo, venImpuestos.ImpuestoXProducto,
impTipoImpuesto.CodigoFiscal CodigoFiscalTipo, impTipoImpuesto.Juris_Id,
impTipoImpuesto.Dominio_id, impTipoImpuesto.Referencia01, impTipoImpuesto.Referencia02, impTipoImpuesto.Referencia03,
impTipoImpuesto.Referencia04, impTipoImpuesto.Referencia05, impTipoImpuesto.Referencia06, impTipoImpuesto.Referencia07,
impTipoImpuesto.Referencia08, impTipoImpuesto.Referencia09, impTipoImpuesto.Referencia10
  FROM venCondFiscImp 
  INNER JOIN venCondFiscal ON venCondFiscImp.venCondFiscal = venCondFiscal.venCondFiscal
	Inner join venImpuestos ON venCondFiscImp.venImpuestos = venImpuestos.venImpuestos
	Inner Join impTipoImpuesto On impTipoImpuesto.TipoImpuesto = venImpuestos.TipoImpuesto
	Left Outer Join conCuentas On conCuentas.conCuentas = venImpuestos.Cuenta_Id
	Left Outer Join conCuentas CtaReversion On CtaReversion.conCuentas = venImpuestos.CtaReversion
	Left Outer Join conCuentas CtaDifCambio On CtaDifCambio.conCuentas = venImpuestos.CtaDifCambio
 WHERE
	venCondFiscal.CondFisc_id = @pCondFisc_id
	
 RETURN @@Error 

GO

DROP PROCEDURE venCondFiscalEliminar
GO
CREATE PROCEDURE venCondFiscalEliminar
(
@pCondFisc_id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venCondFiscal 
WHERE (CondFisc_id = @pCondFisc_id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKvenCondFiscal
GO

CREATE FUNCTION FuncFKvenCondFiscal
(
@pCondFisc_id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = venCondFiscal FROM venCondFiscal WHERE 
	CondFisc_id = @pCondFisc_id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venCondFiscImp.sql*/
DROP PROCEDURE venCondFiscImpInsertar
GO
CREATE PROCEDURE venCondFiscImpInsertar
(
@pvenCondFiscal int,
@Impuesto_id VarChar(5)
)
AS
BEGIN 
	INSERT INTO venCondFiscImp
	(
		venCondFiscal,
		venImpuestos
	)
	VALUES 
	(
		@pvenCondFiscal,
		dbo.FuncFKvenImpuestos(@Impuesto_id)
	)
END 

GO

DROP PROCEDURE venCondFiscImpDatos
GO
CREATE PROCEDURE venCondFiscImpDatos
(
@pCondFisc_id VarChar(5),
@pImpuesto_id VarChar(5) = Null
)
AS
SET NOCOUNT ON 

SELECT venCondFiscImp.venCondFiscal,
	venCondFiscal.CondFisc_Id, venCondFiscal.Descripcion as DescripcionCondFiscal, 
	venImpuestos.Impuesto_Id, venImpuestos.Descripcion as DescripcionImpuestos
FROM venCondFiscImp 
INNER JOIN venCondFiscal  ON (venCondFiscal.venCondFiscal = venCondFiscImp.venCondFiscal)
INNER JOIN venImpuestos  ON (venImpuestos.venImpuestos = venCondFiscImp.venImpuestos)
WHERE (venCondFiscal.CondFisc_id = @pCondFisc_id)
AND (venImpuestos.Impuesto_id = IsNull(@pImpuesto_Id, venImpuestos.Impuesto_Id))
 
 RETURN @@Error 

GO

DROP PROCEDURE venCondFiscImpEliminar
GO
CREATE PROCEDURE venCondFiscImpEliminar
(
@pCondFisc_id varchar(5),
@pImpuesto_id varchar(5) = null
)
AS
SET NOCOUNT ON 

DELETE FROM venCondFiscImp 
WHERE venCondFiscal = dbo.FuncFKvenCondFiscal(@pCondFisc_id)
AND venImpuestos = IsNull(dbo.FuncFKvenImpuestos(@pImpuesto_id), venImpuestos)
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venCondPago.sql*/
DROP PROCEDURE venCondPagoGuardar
GO
CREATE PROCEDURE venCondPagoGuardar
(
@pCondPagoCli_id varchar(5),
@pCondPagoCli_id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(35),
@pCantCuotas smallint,
@pTipoVencimiento char(2),
@pDias int,
@pDiasVencimiento smallint,
@pDiasDescFinanc smallint,
@pDescFinanc numeric(5,2),
@pImpPrimCuota bit,
@pEditaCuotas bit,
@pFactCredito bit,
@pInactivo bit,
@pUsuario_Id int,
@pPosteado bit, 
@pTipoFiscal VarChar(5)
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM venCondPago WHERE (CondPagoCli_id = @pCondPagoCli_id)))
BEGIN 
	UPDATE venCondPago
	SET		@lIdentidad = venCondPago,
		CondPagoCli_id = @pCondPagoCli_id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		CantCuotas = @pCantCuotas,
		TipoVencimiento = @pTipoVencimiento,
		Dias = @pDias,
		DiasVencimiento = @pDiasVencimiento,
		DiasDescFinanc = @pDiasDescFinanc,
		DescFinanc = @pDescFinanc,
		ImpPrimCuota = @pImpPrimCuota,
		EditaCuotas = @pEditaCuotas,
		FactCredito = @pFactCredito,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado, 
		TipoFiscal = @pTipoFiscal
	WHERE (CondPagoCli_id = @pCondPagoCli_id)
END 
ELSE 
BEGIN 
	INSERT INTO venCondPago
	(
		CondPagoCli_id,
		Empresa_Id,
		Descripcion,
		CantCuotas,
		TipoVencimiento,
		Dias,
		DiasVencimiento,
		DiasDescFinanc,
		DescFinanc,
		ImpPrimCuota,
		EditaCuotas,
		FactCredito,
		Inactivo,
		Usuario_Id,
		Posteado, 
		TipoFiscal
	)
	VALUES 
	(
		@pCondPagoCli_id,
		@pEmpresa_Id,
		@pDescripcion,
		@pCantCuotas,
		@pTipoVencimiento,
		@pDias,
		@pDiasVencimiento,
		@pDiasDescFinanc,
		@pDescFinanc,
		@pImpPrimCuota,
		@pEditaCuotas,
		@pFactCredito,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado, 
		@pTipoFiscal
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE venCondPagoDatos
GO
CREATE PROCEDURE venCondPagoDatos
(
@pCondPagoCli_id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT venCondPago.venCondPago, venCondPago.CondPagoCli_id, venCondPago.Empresa_Id, Cast( Case When venCondPago.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	venCondPago.Descripcion, venCondPago.CantCuotas, venCondPago.TipoVencimiento, venCondPago.Dias,
	venCondPago.DiasVencimiento, venCondPago.DiasDescFinanc, venCondPago.DescFinanc, venCondPago.ImpPrimCuota,
	venCondPago.EditaCuotas, venCondPago.FactCredito, venCondPago.Inactivo, genUsuarios.Usuario_Id,
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario, venCondPago.Posteado, venCondPago.TipoFiscal
FROM venCondPago 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = venCondPago.Usuario_Id)
WHERE (venCondPago.CondPagoCli_id = @pCondPagoCli_id)
 


 Declare @pidentity bigint= dbo.FuncFKvenCondPago(@pCondPagoCli_id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'venCondPago'
 
 SELECT  venCondPagoCuotas.Renglon, venCondPagoCuotas.Dias, venCondPagoCuotas.Porcentaje 
 From 
	venCondPagoCuotas inner join venCondPago ON
	venCondPagoCuotas.CondPagoCli_id = venCondPago.venCondPago
 WHERE
	venCondPago.CondPagoCli_id = @pCondPagoCli_id
	ORDER BY 1
	
 RETURN @@Error 

GO

DROP PROCEDURE venCondPagoEliminar
GO
CREATE PROCEDURE venCondPagoEliminar
(
@pCondPagoCli_id varchar(5)
)
AS
SET NOCOUNT ON 

DELETE FROM venCondPago 
WHERE (CondPagoCli_id = @pCondPagoCli_id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKvenCondPago
GO

CREATE FUNCTION FuncFKvenCondPago
(
@pCondPagoCli_id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = venCondPago FROM venCondPago WHERE 
	CondPagoCli_id = @pCondPagoCli_id
  RETURN @pIdentity
END


GO


DROP PROCEDURE venCondPagoDatosXDias
GO
CREATE PROCEDURE venCondPagoDatosXDias
(
@pDias int
)
AS
SET NOCOUNT ON 

SELECT top 1 venCondPago.venCondPago, venCondPago.CondPagoCli_id, venCondPago.Empresa_Id, Cast( Case When venCondPago.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	venCondPago.Descripcion, venCondPago.CantCuotas, venCondPago.TipoVencimiento, venCondPago.Dias,
	venCondPago.DiasVencimiento, venCondPago.DiasDescFinanc, venCondPago.DescFinanc, venCondPago.ImpPrimCuota,
	venCondPago.EditaCuotas, venCondPago.FactCredito, venCondPago.Inactivo, genUsuarios.Usuario_Id,
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario, venCondPago.Posteado, venCondPago.TipoFiscal
FROM venCondPago 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = venCondPago.Usuario_Id)
WHERE (venCondPago.DiasVencimiento = @pDias)
order by 1
 


 Declare @pidentity bigint= (select min(venCondPago) from venCondPago where DiasVencimiento=@pDias)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'venCondPago'
 
 SELECT  venCondPagoCuotas.Renglon, venCondPagoCuotas.Dias, venCondPagoCuotas.Porcentaje 
 From 
	venCondPagoCuotas inner join venCondPago ON
	venCondPagoCuotas.CondPagoCli_id = venCondPago.venCondPago
 WHERE
	venCondPago.CondPagoCli_id = @pidentity
	ORDER BY 1
	
 RETURN @@Error 

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\VenCondPagoCuotas.sql*/
DROP PROCEDURE VenCondPagoCuotasGuardar
GO
CREATE PROCEDURE VenCondPagoCuotasGuardar
(
@pCondPagoCli_id int,
@pRenglon int,
@pDias int = NULL,
@pPorcentaje qPorcentaje
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM VenCondPagoCuotas WHERE (CondPagoCli_id = @pCondPagoCli_id) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE VenCondPagoCuotas
	SET		Dias = @pDias,
		Porcentaje = @pPorcentaje
	WHERE (CondPagoCli_id = @pCondPagoCli_id) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO VenCondPagoCuotas
	(
		CondPagoCli_id,
		Renglon,
		Dias,
		Porcentaje
	)
	VALUES 
	(
		@pCondPagoCli_id,
		@pRenglon,
		@pDias,
		@pPorcentaje
	)
END 

GO

DROP PROCEDURE VenCondPagoCuotasDatos
GO
CREATE PROCEDURE VenCondPagoCuotasDatos
(
@pCondPagoCli_id varChar(5),
@pRenglon int
)
AS
SET NOCOUNT ON 

SELECT venCondPago.venCondPago, 
VenCondPagoCuotas.CondPagoCli_id, venCondPago.Descripcion as DescripcionCondPago, VenCondPagoCuotas.Renglon, VenCondPagoCuotas.Dias,
	VenCondPagoCuotas.Porcentaje
FROM VenCondPagoCuotas 
INNER JOIN venCondPago  ON (venCondPago.venCondPago = VenCondPagoCuotas.CondPagoCli_id)
WHERE (venCondPago.CondPagoCli_id = @pCondPagoCli_id)
AND (VenCondPagoCuotas.Renglon = @pRenglon)
 
 RETURN @@Error 

GO

DROP PROCEDURE VenCondPagoCuotasEliminar
GO
CREATE PROCEDURE VenCondPagoCuotasEliminar
(
@pCondPagoCli_id VarChar(5),
@pRenglon int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM VenCondPagoCuotas 
WHERE (CondPagoCli_id = dbo.FuncFKvenCondPago(@pCondPagoCli_id))
AND (Renglon = ISNULL(@pRenglon, Renglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venConsEdoCtaClientes.sql*/
-- venConsEdoCtaClientes '00123',2, '20200101','20200822', 'PES', 1,0
-- venConsEdoCtaClientes 'Q001',2, '20170801','20171222', null, 1
 -- venConsEdoCtaClientes 'Q001',2, '20170801','20171222', 'DOL', 1


DROP PROCEDURE venConsEdoCtaClientes
GO
CREATE PROCEDURE venConsEdoCtaClientes(
@Cliente_Id VarChar(15), 
@PendHist INT, 
@FechaDesde DateTime, 
@FechaHasta DateTime,
@Moneda_Id VarChar(5)=NULL, 
@Empresa Int
,@pConsolidados bit
)

AS
select @Cliente_Id as Cliente_Id,@PendHist as PendHist,
@FechaDesde as FechaDesde, @FechaHasta as FechaHasta,
@Moneda_Id as Moneda_Id, @Empresa as Empresa,
 ISNULL(venClientes.RazonSocial, ' ') as RazonSocial, 
 ISNULL(genMonedas.Descripcion,' ') as DescripcionMoneda, dbo.FechaActual() as FechaAplicacion
 , @pConsolidados as Consolidados,
venClientes.Cliente_Id, venClientes.RazonSocial, venClientes.Posteado, venClieHabitual.Direccion1_Entr as DireccionEntrega,
venClieHabitual.Direccion1_Fact as DireccionFacturacion, venClieHabitual.Telefonos, venClieHabitual.EMail,
genEntidades.Cuit, venClieHabitual.Fax, venCobradores.Cobrador_Id as CobradorAsignado, venVendedores.Vendedor_Id as VendedorAsignado,
venZona.Zona_Id, venTiposClie.TipoClie_Id, venListasPrecios.ListaPrecio_Id, venListasPrecios.Descripcion as DescripcionListaPrecios,
venClieHabitual.FechaAlta, venClieHabitual.Contactos, venCondPago.CondPagoCli_Id, venCondPago.Descripcion as DescrioncionCondPago,
venClieHabitual.Bonificacion1, venClieHabitual.Bonificacion2, venClieHabitual.Bonificacion3, venClieHabitual.Observaciones,
venClientes.LimiteCredito, 0.0 as MontoRemitos, 0.0 as Disponible
FROM venClientes LEFT OUTER JOIN genMonedas ON
	genMonedas.Moneda_id = @Moneda_Id
	left join venClieHabitual on venClieHabitual.genEntidades=venClientes.genEntidades and 
	venClieHabitual.Sucursal=venClientes.SucursalPredeter
	inner join genEntidades on genEntidades.genEntidades=venClientes.genEntidades
	left join venCobradores on venCobradores.venCobradores=venClieHabitual.Cobrador_Id
	left join venVendedores on venVendedores.venVendedores=venClieHabitual.Vendedor_Id
	left join venZona on venZona.venZona=venClieHabitual.Zona_Id
	left join venTiposClie on venTiposClie.venTiposClie=venClieHabitual.TipoClie_Id
	left join venListasPrecios on venListasPrecios.venListasPrecios=venClieHabitual.ListaPrecio_Id
	left join venCondPago on venCondPago.venCondPago=venClieHabitual.CondPagoCli_Id
WHERE
	Cliente_Id = @Cliente_Id
	

	-- si no traigo los consolidados
	if @pConsolidados=0
	begin
SELECT venMovimientos.venMovimientos, venMovimientos.Sucursal,
	venTipoMov.TipoMovResumido, venTipoMov.Descripcion Tipomovs, 
	venSubTipoMov.SubTipoMov_Id, venSubTipoMov.Descripcion as DescripcionSubTipo,
	dbo.Segmento(genAsiSegmentos.Segmento_Id, 
	genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Segmento, 
	conAsientos.Fecha, case when venTipoMov.Signo=1  then 
		CASE WHEN @PendHist=1 THEN  genMovCuotas.Importe ELSE genMovCuotas.Importe END else 0 end 
		* case When @Moneda_Id IS NULL THEN dbo.func_TipoCambio(conAsientos.Moneda_id, @FechaHasta, @Empresa) else 1 end as Debe,
	case when venTipoMov.Signo=-1  then 
	CASE WHEN @PendHist=1 THEN  genMovCuotas.Importe ELSE genMovCuotas.Importe END  else 0 end 
		* case When @Moneda_Id IS NULL THEN dbo.func_TipoCambio(conAsientos.Moneda_id, @FechaHasta, @Empresa) else 1 end as Haber, 
	genMovCuotas.Saldo * venTipoMov.Signo * case When @Moneda_Id IS NULL 
		THEN dbo.func_TipoCambio(conAsientos.Moneda_id, @FechaHasta, @Empresa) else 1 end as Saldo, 
	CASE WHEN @PendHist=1 THEN  genMovCuotas.Saldo else genMovCuotas.Importe end * venTipoMov.Signo 
	* case When @Moneda_Id IS NULL THEN dbo.func_TipoCambio(conAsientos.Moneda_id, @FechaHasta, @Empresa) else 1 end as SaldoAcum, 
	genMovCuotas.CuotaNro,
	genMovCuotas.FechaVencimiento, genMonedas.Moneda_Id, conAsientos.Cambio, 
	genUsuarios.Apellido_y_Nombres, conAsientos.FechaRegistro, 
	ISNULL(venMovimientosMetodoPago.NMetodoPago,' ') as MetodoPago,
	ISNULL(venMovimientosMetodoPago.MetodoPago,' ') as FormaPago,
	ISNULL(venMovimientosMetodoPago.UsoCfdi,' ') as UsoCfdi,
	venMovConforma.FechaConforma, conAsientos.Observaciones, genMovCuotas.Importe as MontoOriginal, 
	isnull(	dbo.Segmento(stkHojaSegmentos.Segmento_Id, 
	stkHojaSegmentos.Segmento1C,stkHojaSegmentos.Segmento2C, stkHojaSegmentos.Segmento3C,
	stkHojaSegmentos.Segmento4C, stkHojaSegmentos.Segmento1N, stkHojaSegmentos.Segmento2N,
	stkHojaSegmentos.Segmento3N, stkHojaSegmentos.Segmento4N),' ') HojaDeRuta 
FROM venMovimientos INNER JOIN venClientes ON venMovimientos.Cliente_Id= venClientes.genEntidades
INNER JOIN venSubTipoMov ON venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
INNER JOIN venTipoMov ON venTipoMov.venTipoMov = venMovimientos.venTipoMov
inner join genAsiSegmentos on genAsiSegmentos.Asiento_Id = venMovimientos.venMovimientos
INNER JOIN conAsientos ON conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
INNER JOIN genEmpresas ON  genEmpresas.genEmpresas = conAsientos.Empresa_Id
INNER JOIN genMovCuotas ON genMovCuotas.Asiento_Id =venMovimientos.venMovimientos
INNER JOIN genMonedas ON genMonedas.genMonedas = 
	case when @Moneda_Id IS NULL THEN genEmpresas.Moneda_Id ELSE conAsientos.Moneda_Id END
inner join genUsuarios ON genUsuarios.genUsuarios = conAsientos.Usuario_Id
left join venMovimientosMetodoPago ON
venMovimientosMetodoPago.venMovimientos = venMovimientos.venMovimientos
left join venMovConforma on venMovConforma.venMovimientos=venMovimientos.venMovimientos
left join (stkHojaDeRutaCuerpo inner join stkHojaSegmentos ON 
	stkHojaDeRutaCuerpo.stkHojaDeRuta  = stkHojaSegmentos.stkHojaDeRuta) ON 
		stkHojaDeRutaCuerpo.conAsientos = venMovimientos.venMovimientos


WHERE
	conAsientos.Empresa_Id =@Empresa and conAsientos.Anulado = 0 And
	conAsientos.Posteado = 1 and 
	venClientes.Cliente_Id=@Cliente_Id and 
	((genMovCuotas.Saldo > 0  and @PendHist = 1) or (
			conAsientos.Fecha between @FechaDesde and @FechaHasta and 
				@PendHist = 2)) and 
				genMonedas.Moneda_Id = ISNULL(@Moneda_Id, genMonedas.Moneda_Id)
UNION ALL 
SELECT  -genMonedas.genMonedas as venMovimientos, 0 Sucursal,  ' ' TipoMov, 'Saldo Inicial' as Tipomovs, 
	' ' SubTipoMov_Id, 'Saldo Inicial' as DescripcionSubTipo,
	' ' Segmento, 
	DATEADD(dd,-1,@FechaDesde) as Fecha, 
	case when  
		SUM(genMovCuotas.Importe *venTipoMov.Signo ) > 0
	 then 
		SUM(genMovCuotas.Importe *venTipoMov.Signo ) ELSE 0 END as Debe,
	case when  
		SUM(genMovCuotas.Importe *venTipoMov.Signo ) < 0
	 then 
		-SUM(genMovCuotas.Importe *venTipoMov.Signo) ELSE 0  END as Haber,
	SUM(genMovCuotas.Saldo *venTipoMov.Signo ) as Saldo, 
	SUM(genMovCuotas.Importe *venTipoMov.Signo ) as SaldoAcum, 
	0 CuotaNro,
	DATEADD(dd,-1,@FechaDesde) as FechaVenc,  genMonedas.Moneda_Id, 1 Cambio, 
	' ' Apellido_y_Nombres,DATEADD(dd,-1,@FechaDesde) , 
	' ',' ',' ', null, '' as Observaciones, 0 as MontoOriginal, ' ' HojaDeRuta 
FROM venMovimientos 
INNER JOIN venclientes ON venMovimientos.Cliente_Id= venClientes.genEntidades
INNER JOIN venSubTipoMov ON venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
INNER JOIN venTipoMov ON venTipoMov.venTipoMov = venMovimientos.venTipoMov
inner join genAsiSegmentos on genAsiSegmentos.Asiento_Id = venMovimientos.venMovimientos
INNER JOIN conAsientos ON conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
INNER JOIN genMovCuotas ON genMovCuotas.Asiento_Id =venMovimientos.venMovimientos
INNER JOIN genEmpresas ON genEmpresas.genEmpresas = conAsientos.Empresa_Id
INNER JOIN genMonedas ON genMonedas.genMonedas = case when @Moneda_Id IS NULL THEN genEmpresas.Moneda_Id ELSE conAsientos.Moneda_Id END
inner join genUsuarios ON genUsuarios.genUsuarios = conAsientos.Usuario_Id
WHERE
	conAsientos.Empresa_Id =@Empresa and conAsientos.Anulado = 0 And
	conAsientos.Posteado = 1 and 
	venClientes.Cliente_Id =@Cliente_Id and 
	conAsientos.Fecha < @FechaDesde and
	@PendHist = 2 and
	genMonedas.Moneda_Id = ISNULL(@Moneda_Id, genMonedas.Moneda_Id)
GROUP BY genMonedas.Moneda_Id, genMonedas.genMonedas
HAVING SUM(genMovCuotas.Importe *venTipoMov.Signo ) <> 0
ORDER BY 8, 18
end
--si traigo los consolidados

else
begin
SELECT venMovimientos.venMovimientos, venMovimientos.Sucursal,
	venTipoMov.TipoMovResumido, venTipoMov.Descripcion Tipomovs, 
	venSubTipoMov.SubTipoMov_Id, venSubTipoMov.Descripcion as DescripcionSubTipo,
	dbo.Segmento(genAsiSegmentos.Segmento_Id, 
	genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Segmento, 
	conAsientos.Fecha, case when venTipoMov.Signo=1  then 
		CASE WHEN @PendHist=1 THEN  genMovCuotas.Importe ELSE genMovCuotas.Importe END else 0 end 
		* case When @Moneda_Id IS NULL THEN dbo.func_TipoCambio(conAsientos.Moneda_id, @FechaHasta, @Empresa) else 1 end as Debe,
	case when venTipoMov.Signo=-1  then 
	CASE WHEN @PendHist=1 THEN  genMovCuotas.Importe ELSE genMovCuotas.Importe END  else 0 end 
		* case When @Moneda_Id IS NULL THEN dbo.func_TipoCambio(conAsientos.Moneda_id, @FechaHasta, @Empresa) else 1 end as Haber, 
	genMovCuotas.Saldo * venTipoMov.Signo * case When @Moneda_Id IS NULL 
		THEN dbo.func_TipoCambio(conAsientos.Moneda_id, @FechaHasta, @Empresa) else 1 end as Saldo, 
	CASE WHEN @PendHist=1 THEN  genMovCuotas.Saldo else genMovCuotas.Importe end * venTipoMov.Signo 
	* case When @Moneda_Id IS NULL THEN dbo.func_TipoCambio(conAsientos.Moneda_id, @FechaHasta, @Empresa) else 1 end as SaldoAcum, 
	genMovCuotas.CuotaNro,
	genMovCuotas.FechaVencimiento, genMonedas.Moneda_Id, conAsientos.Cambio, 
	genUsuarios.Apellido_y_Nombres, conAsientos.FechaRegistro, 
	ISNULL(venMovimientosMetodoPago.NMetodoPago,' ') as MetodoPago,
	ISNULL(venMovimientosMetodoPago.MetodoPago,' ') as FormaPago,
	ISNULL(venMovimientosMetodoPago.UsoCfdi,' ') as UsoCfdi,
	venMovConforma.FechaConforma, conAsientos.Observaciones,' ' Pedido, genMovCuotas.Importe as MontoOriginal, 
	isnull(	dbo.Segmento(stkHojaSegmentos.Segmento_Id, 
	stkHojaSegmentos.Segmento1C,stkHojaSegmentos.Segmento2C, stkHojaSegmentos.Segmento3C,
	stkHojaSegmentos.Segmento4C, stkHojaSegmentos.Segmento1N, stkHojaSegmentos.Segmento2N,
	stkHojaSegmentos.Segmento3N, stkHojaSegmentos.Segmento4N),' ') HojaDeRuta 
FROM venMovimientos 
inner join vvenClientesCons on vvenClientesCons.Padre=venMovimientos.Cliente_Id
INNER JOIN venClientes ON venClientes.genEntidades=vvenClientesCons.Hijo
INNER JOIN venSubTipoMov ON venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
INNER JOIN venTipoMov ON venTipoMov.venTipoMov = venMovimientos.venTipoMov
inner join genAsiSegmentos on genAsiSegmentos.Asiento_Id = venMovimientos.venMovimientos
INNER JOIN conAsientos ON conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
INNER JOIN genMovCuotas ON genMovCuotas.Asiento_Id =venMovimientos.venMovimientos
INNER JOIN genEmpresas ON genEmpresas.genEmpresas = conAsientos.Empresa_Id
INNER JOIN genMonedas ON genMonedas.genMonedas = case when @Moneda_Id IS NULL THEN genEmpresas.Moneda_Id ELSE conAsientos.Moneda_Id END
inner join genUsuarios ON genUsuarios.genUsuarios = conAsientos.Usuario_Id
left join venMovimientosMetodoPago ON
venMovimientosMetodoPago.venMovimientos = venMovimientos.venMovimientos
left join venMovConforma on venMovConforma.venMovimientos=venMovimientos.venMovimientos
left join (stkHojaDeRutaCuerpo inner join stkHojaSegmentos ON 
	stkHojaDeRutaCuerpo.stkHojaDeRuta  = stkHojaSegmentos.stkHojaDeRuta) ON 
		stkHojaDeRutaCuerpo.conAsientos = venMovimientos.venMovimientos
WHERE
	conAsientos.Empresa_Id =@Empresa and conAsientos.Anulado = 0 And
	conAsientos.Posteado = 1 and 
	venClientes.Cliente_Id=@Cliente_Id and 
	((genMovCuotas.Saldo > 0  and @PendHist = 1) or (
			conAsientos.Fecha between @FechaDesde and @FechaHasta and 
				@PendHist = 2)) and 
				genMonedas.Moneda_Id = ISNULL(@Moneda_Id, genMonedas.Moneda_Id)
UNION ALL 
SELECT  -genMonedas.genMonedas as venMovimientos, 0 Sucursal,  ' ' TipoMov, 'Saldo Inicial' as Tipomovs, 
	' ' SubTipoMov_Id, 'Saldo Inicial' as DescripcionSubTipo,
	' ' Segmento, 
	DATEADD(dd,-1,@FechaDesde) as Fecha, 
	case when  
		SUM(genMovCuotas.Importe *venTipoMov.Signo ) > 0
	 then 
		SUM(genMovCuotas.Importe *venTipoMov.Signo ) ELSE 0 END as Debe,
	case when  
		SUM(genMovCuotas.Importe *venTipoMov.Signo ) < 0
	 then 
		-SUM(genMovCuotas.Importe *venTipoMov.Signo) ELSE 0  END as Haber,
	SUM(genMovCuotas.Saldo *venTipoMov.Signo ) as Saldo, 
	SUM(genMovCuotas.Importe *venTipoMov.Signo ) as SaldoAcum, 
	0 CuotaNro,
	DATEADD(dd,-1,@FechaDesde) as FechaVenc,  genMonedas.Moneda_Id, 1 Cambio, 
	' ' Apellido_y_Nombres,DATEADD(dd,-1,@FechaDesde) , 
	' ',' ',' ', null, '' as Observaciones,' ' Pedido, 0 as MontoOriginal, ' ' as HojaDeRuta
FROM venMovimientos 
INNER JOIN vvenClientesCons ON venMovimientos.Cliente_Id= vvenClientesCons.Padre
inner join venClientes on venClientes.genEntidades=vvenClientesCons.Hijo
INNER JOIN venSubTipoMov ON venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
INNER JOIN venTipoMov ON venTipoMov.venTipoMov = venMovimientos.venTipoMov
inner join genAsiSegmentos on genAsiSegmentos.Asiento_Id = venMovimientos.venMovimientos
INNER JOIN conAsientos ON conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
INNER JOIN genEmpresas ON genEmpresas.genEmpresas = conAsientos.Empresa_Id
INNER JOIN genMovCuotas ON genMovCuotas.Asiento_Id =venMovimientos.venMovimientos
INNER JOIN genMonedas ON genMonedas.genMonedas = case when @Moneda_Id IS NULL THEN genEmpresas.Moneda_Id ELSE conAsientos.Moneda_Id END
inner join genUsuarios ON genUsuarios.genUsuarios = conAsientos.Usuario_Id
WHERE
	conAsientos.Empresa_Id =@Empresa and conAsientos.Anulado = 0 And
	conAsientos.Posteado = 1 and 
	venClientes.Cliente_Id =@Cliente_Id and 
	conAsientos.Fecha < @FechaDesde and
	@PendHist = 2 and
	genMonedas.Moneda_Id = ISNULL(@Moneda_Id, genMonedas.Moneda_Id)
GROUP BY genMonedas.Moneda_Id, genMonedas.genMonedas
HAVING SUM(genMovCuotas.Importe *venTipoMov.Signo ) <> 0
ORDER BY 8, 18
end
--inventario
Select ' ' as Deposito_Id, ' ' as Producto_Id, ' ' as Descripcion, ' ' Medida_Id, 0.00 as Cantidad, 0.00 as Costo, 0.00 as Total, '' As Pedido, '' As Reparto, '' Remito, 0.00 as Descuento

--asiento contable
select ' ' as Cuenta_Id, ' ' as Descripcion, ' ' as Centro1_Id, ' ' as Centro2_Id, 0.00 as Debe, 0.00 as Haber

--aplicaciones
select ' ' as Segmento, convert(datetime,null) as Fecha, 0.00 as Importe, ' ' as Usuario, cast(0 as bit) as Seleccionar, cast (0 as bigint) as ven_Movimientos, cast(0 as smallint) as NroCuota, 0 as NroAplicacion, 
cast (0 as bigint) AsientoApli_Id, cast (0 as bigint) AsientoDC_Id

	



--impuestos
select ' ' as Impuesto_Id, ' ' as Descripcion, 0.00 as Base, 0.00 as Porcentaje, 0.00 as Importe

--orden de compra
select ' ' as Segmento, convert(datetime,null) as Fecha

--valores
select ' ' as Cartera, ' ' as Descripcion, 0.00 as Importe, ' ' as NumeroDoc, convert(datetime, null) as FechaDoc, ' ' Banco, ' ' DescripcionBanco,
' ' Clearing, 0.00 ImporteOrig

--Aplicacar
select cast(0 as bigint) as venMovimientos, ' ' as Segmento, convert(datetime,null) as Fecha, 0.00 as Importe, 0.00 as Saldo, cast(0 as smallint) as NroCuota, 0.00 as ImporteAplicado, convert(datetime, null) as FechaVencimiento
--CancMov
select cast(0 as bigint) as Asiento_Id, cast(0 as smallint) as Cuota_Nro, 0.00 as Importe, 0.00 as Signo

-- DatosCliente

-- Remisiones Pendientes de Factura

SELECT conAsientos.Fecha, 
	dbo.Segmento(genAsiSegmentos.Segmento_Id, 
	genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Segmento, 
	SUM(stkMoviCuerpo.Cantidad*stkMoviCuerpo.PrecioOriginal) as Monto, 
	isnull(	dbo.Segmento(stkHojaSegmentos.Segmento_Id, 
	stkHojaSegmentos.Segmento1C,stkHojaSegmentos.Segmento2C, stkHojaSegmentos.Segmento3C,
	stkHojaSegmentos.Segmento4C, stkHojaSegmentos.Segmento1N, stkHojaSegmentos.Segmento2N,
	stkHojaSegmentos.Segmento3N, stkHojaSegmentos.Segmento4N),' ') HojaDeRuta 
FROM conAsientos 
INNER JOIN genAsiSegmentos ON conAsientos.conAsientos	= genAsiSegmentos.Asiento_Id
INNER JOIN stkRemiPendFact ON stkRemiPendFact.stkMoviCabe = conAsientos.conAsientos
INNER JOIN stkRemitos ON  stkRemitos.stkMoviCabe =conAsientos.conAsientos
INNER JOIN venClientes ON  venClientes.genEntidades = stkRemitos.Cliente_Id
INNER JOIN stkMoviCuerpo ON stkMoviCuerpo.stkMoviCabe = stkRemiPendFact.stkMoviCabe AND 
							stkMoviCuerpo.Renglon = stkRemiPendFact.Renglon
	left join stkHojaSegmentos ON 
		stkHojaSegmentos.stkHojaDeRuta = stkRemitos.HojaRuta_Id
where
	conAsientos.Anulado= 0 and 
	conAsientos.Posteado = 1 AND 
	venClientes.Cliente_Id = @Cliente_Id AND 
	conAsientos.Empresa_Id = @Empresa and 
	stkRemiPendFact.CantidadPendiente >  0 
GROUP BY conAsientos.Fecha, 
	genAsiSegmentos.Segmento_Id, 
	genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
	stkHojaSegmentos.Segmento_Id, 
	stkHojaSegmentos.Segmento1C,stkHojaSegmentos.Segmento2C, stkHojaSegmentos.Segmento3C,
	stkHojaSegmentos.Segmento4C, stkHojaSegmentos.Segmento1N, stkHojaSegmentos.Segmento2N,
	stkHojaSegmentos.Segmento3N, stkHojaSegmentos.Segmento4N

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venCotizaciones.sql*/
DROP PROCEDURE venCotizacionesGuardar
GO
CREATE PROCEDURE venCotizacionesGuardar
(
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20),
@pEmpresa_Id int = NULL,
@pSubTipoMov_Id varchar(5) = NULL,
@pFecha datetime = NULL,
@pCliente_Id varchar(15) = NULL,
@pSucursal int = NULL,
@pMoneda_Id varchar(3) = NULL,
@pMonedaFacturacion varchar(3) = NULL,
@pCondPagoCli_Id varchar(5) = NULL,
@pListaPrecio_Id varchar(5) = NULL,
@pVendedor_Id varchar(5) = NULL,
@pFormaEntrega_Id varchar(3) = NULL,
@pEstado char(1) = NULL,
@pUsuarioAutoriz_Id varchar(25) = NULL,
@pFechaAutorizo datetime = NULL,
@pObservaciones varchar(max) = NULL,
@pObservEstado varchar(max) = NULL,
@pMotivo_Id smallint = NULL,
@pImporteTotal qMonedaD2,
@pBonificacion1 qMonedaD2,
@pBonificacion2 qMonedaD2,
@pBonificacion3 qMonedaD2,
@pBonificacion4 qMonedaD2,
@pBonificacion5 qMonedaD2,
@pDato1 qMonedaD2,
@pDato2 qMonedaD2,
@pDato3 qMonedaD2,
@pFechaUltMod datetime = NULL,
@pCliOrdenCompra varchar(15) = NULL,
@pvenNroPedido varchar(15) = NULL,
@pFacturaAnticipo Sino,
@pTrabaDespacho Sino,
@pPorAnticipo qPorcentaje,
@pAnticipo qMonedaD2,
@pAnticipoPendiente qMonedaD2,
@pObsAnticipo QMemo = NULL,
@pTipoPrecioForm char(1) = NULL,
@pCongelaCambio Sino,
@pFecha_Registro datetime = NULL,
@pCambio qMonedaD8,
@pIncoterm_Id char(3) = NULL,
@pSoloEntrega Sino,
@pUsuario_Id int = NULL,
@pPosteado Sino,
@pMetodoPago varchar(3) = NULL,
@pUsoCfdi char(3) = NULL, 
@pClienteExistente SiNo = 1, 
@pVigencia DateTime
)
AS
SET NOCOUNT ON 

DECLARE @lIdentidad int = (Select venCotizaciones
 from venCotizSegmento
 Where
	venCotizSegmento.Empresa_id = @pEmpresa_Id and 
	venCotizSegmento.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	venCotizSegmento.Segmento1N = @pSegmento1N and 
	venCotizSegmento.Segmento2N = @pSegmento2N and 
	venCotizSegmento.Segmento3N = @pSegmento3N and 
	venCotizSegmento.Segmento4N = @pSegmento4N and 
	venCotizSegmento.Segmento1C = @pSegmento1C and 
	venCotizSegmento.Segmento2C = @pSegmento2C and 
	venCotizSegmento.Segmento3C = @pSegmento3C and 
	venCotizSegmento.Segmento4C = @pSegmento4C )

IF (EXISTS (SELECT 1 FROM venCotizaciones WHERE venCotizaciones.venCotizaciones=@lIdentidad))
BEGIN 
	UPDATE venCotizaciones
	SET		@lIdentidad = venCotizaciones,
		Empresa_Id = @pEmpresa_Id,
		SubTipoMov_Id = dbo.FuncFKvenSubTipoMov(@pSubTipoMov_Id),
		Fecha = @pFecha,
		Cliente_Id = dbo.FuncFKvenClientes(@pCliente_Id),
		Sucursal = @pSucursal,
		Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id),
		MonedaFacturacion = dbo.FuncFKgenMonedas(@pMonedaFacturacion),
		CondPagoCli_Id = dbo.FuncFKvenCondPago(@pCondPagoCli_Id),
		ListaPrecio_Id = dbo.FuncFKvenListasPrecios(@pListaPrecio_Id),
		Vendedor_Id = dbo.FuncFKvenVendedores(@pVendedor_Id),
		FormaEntrega_Id = dbo.FuncFKvenFormaEntrega(@pFormaEntrega_Id),
		Estado = @pEstado,
		UsuarioAutoriz_Id = dbo.FuncFKgenUsuarios(@pUsuarioAutoriz_Id),
		FechaAutorizo = @pFechaAutorizo,
		Observaciones = @pObservaciones,
		ObservEstado = @pObservEstado,
		Motivo_Id = @pMotivo_Id,
		ImporteTotal = @pImporteTotal,
		Bonificacion1 = @pBonificacion1,
		Bonificacion2 = @pBonificacion2,
		Bonificacion3 = @pBonificacion3,
		Bonificacion4 = @pBonificacion4,
		Bonificacion5 = @pBonificacion5,
		Dato1 = @pDato1,
		Dato2 = @pDato2,
		Dato3 = @pDato3,
		FechaUltMod = @pFechaUltMod,
		CliOrdenCompra = @pCliOrdenCompra,
		venNroPedido = @pvenNroPedido,
		FacturaAnticipo = @pFacturaAnticipo,
		TrabaDespacho = @pTrabaDespacho,
		PorAnticipo = @pPorAnticipo,
		Anticipo = @pAnticipo,
		AnticipoPendiente = @pAnticipoPendiente,
		ObsAnticipo = @pObsAnticipo,
		TipoPrecioForm = @pTipoPrecioForm,
		CongelaCambio = @pCongelaCambio,
		Fecha_Registro = getDate() ,
		Cambio = @pCambio,
		Incoterm_Id = dbo.FuncFKvenIncoterm(@pIncoterm_Id),
		SoloEntrega = @pSoloEntrega,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado,
		MetodoPago = @pMetodoPago,
		UsoCfdi = @pUsoCfdi, 
		ClienteExistente = @pClienteExistente, 
		Vigencia = @pVigencia
	WHERE venCotizaciones.venCotizaciones=@lIdentidad
END 
ELSE 
BEGIN 
	INSERT INTO venCotizaciones
	(
		Empresa_Id,
		SubTipoMov_Id,
		Fecha,
		Cliente_Id,
		Sucursal,
		Moneda_Id,
		MonedaFacturacion,
		CondPagoCli_Id,
		ListaPrecio_Id,
		Vendedor_Id,
		FormaEntrega_Id,
		Estado,
		UsuarioAutoriz_Id,
		FechaAutorizo,
		Observaciones,
		ObservEstado,
		Motivo_Id,
		ImporteTotal,
		Bonificacion1,
		Bonificacion2,
		Bonificacion3,
		Bonificacion4,
		Bonificacion5,
		Dato1,
		Dato2,
		Dato3,
		FechaUltMod,
		CliOrdenCompra,
		venNroPedido,
		FacturaAnticipo,
		TrabaDespacho,
		PorAnticipo,
		Anticipo,
		AnticipoPendiente,
		ObsAnticipo,
		TipoPrecioForm,
		CongelaCambio,
		Fecha_Registro,
		Cambio,
		Incoterm_Id,
		SoloEntrega,
		Usuario_Id,
		Posteado,
		MetodoPago,
		UsoCfdi, 
		ClienteExistente, 
		Vigencia
	)
	VALUES 
	(
		@pEmpresa_Id,
		dbo.FuncFKvenSubTipoMov(@pSubTipoMov_Id),
		@pFecha,
		dbo.FuncFKvenClientes(@pCliente_Id),
		@pSucursal,
		dbo.FuncFKgenMonedas(@pMoneda_Id),
		dbo.FuncFKgenMonedas(@pMonedaFacturacion),
		dbo.FuncFKvenCondPago(@pCondPagoCli_Id),
		dbo.FuncFKvenListasPrecios(@pListaPrecio_Id),
		dbo.FuncFKvenVendedores(@pVendedor_Id),
		dbo.FuncFKvenFormaEntrega(@pFormaEntrega_Id),
		@pEstado,
		dbo.FuncFKgenUsuarios(@pUsuarioAutoriz_Id),
		@pFechaAutorizo,
		@pObservaciones,
		@pObservEstado,
		@pMotivo_Id,
		@pImporteTotal,
		@pBonificacion1,
		@pBonificacion2,
		@pBonificacion3,
		@pBonificacion4,
		@pBonificacion5,
		@pDato1,
		@pDato2,
		@pDato3,
		@pFechaUltMod,
		@pCliOrdenCompra,
		@pvenNroPedido,
		@pFacturaAnticipo,
		@pTrabaDespacho,
		@pPorAnticipo,
		@pAnticipo,
		@pAnticipoPendiente,
		@pObsAnticipo,
		@pTipoPrecioForm,
		@pCongelaCambio,
		getDate(),
		@pCambio,
		dbo.FuncFKvenIncoterm(@pIncoterm_Id),
		@pSoloEntrega,
		@pUsuario_Id,
		@pPosteado,
		@pMetodoPago,
		@pUsoCfdi,
		@pClienteExistente, 
		@pVigencia
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE venCotizacionesDatos
GO
create procedure venCotizacionesDatos
(
@pSegmento_Id varchar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pEmpresa_Id int
)
as
declare @venCotizacion int = (select venCotizaciones from venCotizSegmento 
where Segmento_Id=dbo.FuncFKgenSegmentos(@pSegmento_Id)
and Segmento1C =@pSegmento1C and Segmento2C=@pSegmento2C and Segmento3C=@pSegmento3C and Segmento4C=@pSegmento4C and
Segmento1N=@pSegmento1N and Segmento2C=@pSegmento2C and Segmento3C=@pSegmento3C and Segmento4C=@pSegmento4C and Empresa_Id=@pEmpresa_Id)
print @venCotizacion
exec venCotizacionesDatosInt @venCotizacion

SELECT getdate() as Fecha, '' Producto_Id, '' Descripcion, 0.00 as Existencia, 
	0.00 as Compras, 0.00 as Embarques,	
		0.00 as Pedidos, 0.00 as TransitoLocal,
		0.00 as Final, '' as Deposito_Id

select '' as Entidad_Id, '' as Descripcion, '' SegmentoSTR, 0.00 as Cantidad


go
drop procedure venCotizacionesDatosInt
go
create procedure venCotizacionesDatosInt
(
@pvenCotizacion int
)
as

select venCotizSegmento.Empresa_Id, genSegmentos.Segmento_Id, venCotizSegmento.Segmento1N, venCotizSegmento.Segmento2N, venCotizSegmento.Segmento3N,
venCotizSegmento.Segmento4N, venCotizSegmento.Segmento1C, venCotizSegmento.Segmento2C,
venCotizSegmento.Segmento3C, venCotizSegmento.Segmento4C,venCotizaciones.venCotizaciones, 
venSubTipoMov.SubTipoMov_Id, venSubTipoMov.Descripcion as DescripcionSubTipoMov, Fecha, venClientes.Cliente_Id, venClientes.RazonSocial as DescripcionCliente,
venClieHabitual.Sucursal, venClieHabitual.NombreFantasia, genMonedas.Moneda_Id,
genMonedas.Descripcion as DescripcionMoneda, MonedaFact.Moneda_Id as MonedaFact, MonedaFact.Descripcion as DescripcionMonedaFact,
venCondPago.CondPagoCli_Id as CondPagoCli_Id, venCondPago.Descripcion as DescripcionCondPagoCli, venListasPrecios.ListaPrecio_Id,
venListasPrecios.Descripcion as DescripcionListaPrec, venVendedores.Vendedor_Id, venVendedores.Nombre as DescripcionVendedor,
venFormaEntrega.FormaEntrega_Id, venFormaEntrega.RazonSocial as DescripcionFormaEntrega, Estado, UsuAutoriz.Usuario_Id as UsuAutoriz,
UsuAutoriz.Apellido_y_Nombres as DescripcionUsuAutoriz, FechaAutorizo, venCotizaciones.Observaciones, ObservEstado, Motivo_Id, ImporteTotal,
venCotizaciones.Bonificacion1,venCotizaciones.Bonificacion2,venCotizaciones.Bonificacion3,Bonificacion4, Bonificacion5, Dato1, Dato2, Dato3, FechaUltMod, CliOrdenCompra,
venNroPedido, FacturaAnticipo, TrabaDespacho, PorAnticipo, Anticipo, AnticipoPendiente,ObsAnticipo, venCotizaciones.TipoPrecioForm, venCotizaciones.CongelaCambio,
Fecha_Registro, Cambio, venIncoterm.Incoterm_Id, venIncoterm.Descripcion as DescripcionIncoterm, SoloEntrega, 
genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, venCotizaciones.Posteado,
MetodoPago, UsoCfdi, venCotizaciones.ClienteExistente, venCotizaciones.Vigencia, 0 as TipoPago,  CAST(0 as bit) AceptaDatosExternos
from venCotizaciones
left join genMonedas MonedaFact on MonedaFact.genMonedas= venCotizaciones.MonedaFacturacion
left join genUsuarios UsuAutoriz on UsuAutoriz.genUsuarios=venCotizaciones.UsuarioAutoriz_Id
left join venSubTipoMov on venSubTipoMov.venSubTipoMov=venCotizaciones.SubTipoMov_Id
left join venClientes on venClientes.genEntidades= venCotizaciones.Cliente_Id
left join genMonedas on genMonedas.genMonedas=venCotizaciones.Moneda_Id
left join venCondPago on venCondPago.venCondPago=venCotizaciones.CondPagoCli_Id
left join venListasPrecios on venListasPrecios.venListasPrecios=venCotizaciones.ListaPrecio_Id
left join venVendedores on venVendedores.venVendedores=venCotizaciones.Vendedor_Id
left join venFormaEntrega on venFormaEntrega.venFormaEntrega=venCotizaciones.FormaEntrega_Id
left join venIncoterm on venIncoterm.venIncoterm_int=venCotizaciones.Incoterm_Id
left join genUsuarios on genUsuarios.genUsuarios=venCotizaciones.Usuario_Id
inner join venCotizSegmento on venCotizaciones.venCotizaciones=venCotizSegmento.venCotizaciones
inner join genSegmentos on genSegmentos.genSegmentos=venCotizSegmento.Segmento_Id
left join genSucursalesEmpr on genSucursalesEmpr=venCotizaciones.Sucursal
LEFT JOIN venClieHabitual  ON (venClieHabitual.genEntidades = venCotizaciones.Cliente_Id) AND (venClieHabitual.Sucursal = venCotizaciones.Sucursal)
where venCotizaciones.venCotizaciones=@pvenCotizacion
exec venCotizClienteDatos @pvenCotizacion
exec venCotizCuerpoDatos  @pvenCotizacion

Exec genAtributosGeneralesIdentityDatos @pvenCotizacion, 'venCotizaciones'

go
drop procedure venCotizacionesEliminar
go
create procedure venCotizacionesEliminar
(
@pvenCotizaciones int
)
as
delete from venCotizaciones where venCotizaciones.venCotizaciones=@pvenCotizaciones
go


Drop Procedure venCotizacionesAutorizar
Go

Create Procedure venCotizacionesAutorizar
(
@pvenCotizaciones Int,
@pUsuario_Id Int,
@pObservEstado qMemo
)
As
Update venCotizaciones Set UsuarioAutoriz_Id = @pUsuario_Id, FechaAutorizo = dbo.FechaActual(), ObservEstado = @pObservEstado
	Where venCotizaciones = @pvenCotizaciones
Go

Drop Procedure venCotizRechazar
Go

Create Procedure venCotizRechazar
(
@pvenCotizaciones Int,
@pUsuario_Id Int,
@pObservEstado qMemo
)
As
Update venCotizaciones Set UsuarioAutoriz_Id = @pUsuario_Id, FechaAutorizo = dbo.FechaActual(), ObservEstado = @pObservEstado,
	Estado = 'Z' Where venCotizaciones= @pvenCotizaciones
Go

Drop Procedure venCotizAplicarAnticipo
Go

Create Procedure venCotizAplicarAnticipo
(
@pvenCotizaciones Int,
@pMonto Numeric(18,2)
)
As
Update venCotizaciones Set AnticipoPendiente = AnticipoPendiente - @pMonto Where venCotizaciones = @pvenCotizaciones
Go

Drop Procedure venCotizacionesCambiarEstado
GO
Create Procedure venCotizacionesCambiarEstado
(
@pvenCotizaciones Int,
@pEstado Char(1)
)
As
Update venCotizaciones Set 	Estado = @pEstado Where venCotizaciones = @pvenCotizaciones
Go


Drop Procedure venCotizEstadoDatos
GO
Create Procedure venCotizEstadoDatos
(
@pvenCotizaciones Int
)
As
SELECT venCotizaciones.venCotizaciones, venCotizaciones.Estado, 
	venCotizaciones.UsuarioAutoriz_Id,
	Cast(MAX(Convert(int,Pendiente)) as bit) Pendiente , 
			SUM(CantidadPedida) CantidadPedida, 
			SUM(CantidadRemitida) CantidadRemitida, 
			SUM(CantidadFacturada) CantidadFacturada
FROM venCotizaciones INNER JOIN venCotizCuerpo ON
	venCotizaciones.venCotizaciones = venCotizCuerpo.Cotizacion_Id
WHERE
venCotizaciones.venCotizaciones= @pvenCotizaciones
GROUP BY venCotizaciones.venCotizaciones, venCotizaciones.Estado, venCotizaciones.UsuarioAutoriz_Id
	
Go




Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venCotizAnul.sql*/
DROP PROCEDURE venCotizAnulGuardar
GO
CREATE PROCEDURE venCotizAnulGuardar
(
@pCotizacion_Id int = NULL,
@pFecha datetime = NULL,
@pOperacion char(1) = NULL,
@pUsuario_Id int = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venCotizAnul WHERE venCotizAnul.Cotizacion_Id=@pCotizacion_Id))
BEGIN 
	UPDATE venCotizAnul
	SET		Cotizacion_Id = @pCotizacion_Id,
		Fecha = dbo.FechaActual(),
		Operacion = @pOperacion,
		Usuario_Id = @pUsuario_Id
	WHERE venCotizAnul.Cotizacion_Id=@pCotizacion_Id
END 
ELSE 
BEGIN 
	INSERT INTO venCotizAnul
	(
		Cotizacion_Id,
		Fecha,
		Operacion,
		Usuario_Id
	)
	VALUES 
	(
		@pCotizacion_Id,
		dbo.FechaActual(),
		@pOperacion,
		@pUsuario_Id
	)
END 

GO

DROP PROCEDURE venCotizAnulDatos
GO
CREATE PROCEDURE venCotizAnulDatos
(
@pCotizacion_Id int
)
AS
SET NOCOUNT ON 

SELECT venCotizaciones.venCotizaciones, venCotizAnul.Fecha, venCotizAnul.Operacion, venCotizAnul.Usuario_Id
FROM venCotizAnul 
LEFT JOIN venCotizaciones  ON (venCotizaciones.venCotizaciones = venCotizAnul.Cotizacion_Id)
WHERE  venCotizAnul.Cotizacion_Id=@pCotizacion_Id
 RETURN @@Error 

GO

DROP PROCEDURE venCotizAnulEliminar
GO
CREATE PROCEDURE venCotizAnulEliminar
(
@pCotizacion_Id int
)
AS
SET NOCOUNT ON 

DELETE FROM venCotizAnul 
WHERE  venCotizAnul.Cotizacion_Id=@pCotizacion_Id
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venCotizCliente.sql*/
DROP PROCEDURE venCotizClienteGuardar
GO
CREATE PROCEDURE venCotizClienteGuardar
(
@pvenCotizaciones int = NULL,
@pRazonSocial varchar(120) = NULL,
@pDireccion1 varchar(50) = NULL,
@pDireccion2 varchar(50) = NULL,
@pNroExterior varchar(10) = NULL,
@pNroInterior varchar(10) = NULL,
@pLocalidad varchar(35) = NULL,
@pCodigoPostal varchar(15) = NULL,
@pProvincia_Id varchar(5) = NULL,
@pPais_Id smallint = NULL,
@pTelefono varchar(100) = NULL,
@pCUIT varchar(25) = NULL,
@pEmail varchar(50) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venCotizCliente WHERE Cotizacion_Id=@pvenCotizaciones))
BEGIN 
	UPDATE venCotizCliente
	SET		Cotizacion_Id = @pvenCotizaciones,
		RazonSocial = @pRazonSocial,
		Direccion1 = @pDireccion1,
		Direccion2 = @pDireccion2,
		NroExterior = @pNroExterior,
		NroInterior = @pNroInterior,
		Localidad = @pLocalidad,
		CodigoPostal = @pCodigoPostal,
		Provincia_Id = dbo.FuncFKgenProvincias(@pProvincia_Id),
		Pais_Id = dbo.FuncFKgenPaises(@pPais_Id),
		Telefono = @pTelefono,
		CUIT = @pCUIT,
		Email = @pEmail
	WHERE 
	venCotizCliente.Cotizacion_Id=@pvenCotizaciones
END 
ELSE 
BEGIN 
	INSERT INTO venCotizCliente
	(
		Cotizacion_Id,
		RazonSocial,
		Direccion1,
		Direccion2,
		NroExterior,
		NroInterior,
		Localidad,
		CodigoPostal,
		Provincia_Id,
		Pais_Id,
		Telefono,
		CUIT,
		Email
	)
	VALUES 
	(
		@pvenCotizaciones,
		@pRazonSocial,
		@pDireccion1,
		@pDireccion2,
		@pNroExterior,
		@pNroInterior,
		@pLocalidad,
		@pCodigoPostal,
		dbo.FuncFKgenProvincias(@pProvincia_Id),
		dbo.FuncFKgenPaises(@pPais_Id),
		@pTelefono,
		@pCUIT,
		@pEmail
	)
END 

GO

DROP PROCEDURE venCotizClienteDatos
GO
CREATE PROCEDURE venCotizClienteDatos
(
@pvenCotizaciones int
)
AS
SET NOCOUNT ON 

SELECT venCotizCliente.Cotizacion_Id, venCotizCliente.RazonSocial, venCotizCliente.Direccion1, venCotizCliente.Direccion2,
	venCotizCliente.NroExterior, venCotizCliente.NroInterior, venCotizCliente.Localidad, venCotizCliente.CodigoPostal,
	genProvincias.Provincia_Id, genProvincias.Descripcion as DescripcionProvincia, genPaises.Pais_Id, 
	genPaises.Descripcion as DescripcionPaises, venCotizCliente.Telefono,
	venCotizCliente.CUIT, venCotizCliente.Email
FROM venCotizCliente 
LEFT JOIN genPaises  ON (genPaises.genPaises = venCotizCliente.Pais_Id)
left join genProvincias on genProvincias=venCotizCliente.Provincia_Id
WHERE  
venCotizCliente.Cotizacion_Id=@pvenCotizaciones
 RETURN @@Error 

GO

DROP PROCEDURE venCotizClienteEliminar
GO
CREATE PROCEDURE venCotizClienteEliminar
(
@pvenCotizaciones int
)
AS
SET NOCOUNT ON 

DELETE FROM venCotizCliente 
WHERE  venCotizCliente.Cotizacion_Id=@pvenCotizaciones
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venCotizCuerpo.sql*/
DROP PROCEDURE venCotizCuerpoGuardar
GO
CREATE PROCEDURE venCotizCuerpoGuardar
(
@pCotizacion_Id int,
@pRenglon_Co int,
@pProducto_Id varchar(25) = NULL,
@pMedida_Id varchar(5) = NULL,
@pDeposito_Id varchar(15) = NULL,
@pFactor qCantidadD8,
@pCantidadOriginal qCantidadD8,
@pCantidadPedida qCantidadD8,
@pCantidadRemitida qCantidadD8,
@pCantidadFacturada qCantidadD8,
@pPrecioForm qMonedaD8,
@pPrecioLista qMonedaD8,
@pPrecioVenta qCantidadD8,
@pFechaEntrega qFecha,
@pEspecial Sino,
@pBonificacion qPorcentaje,
@pObservaciones QMemo = NULL,
@pPendiente Sino,
@pReservaMercaderia Sino,
@pPrecioListaForm qMonedaD8,
@pCentro1_Id varchar(8) = NULL,
@pCentro2_Id varchar(8) = NULL, 
@pTipoPrecio Char(1)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venCotizCuerpo WHERE (Cotizacion_Id = @pCotizacion_Id) AND (Renglon_Co = @pRenglon_Co)))
BEGIN 
	UPDATE venCotizCuerpo
	SET		Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id),
		Medida_Id = dbo.FuncFKstkUniMed(@pMedida_Id),
		Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id),
		Factor = @pFactor,
		CantidadOriginal = @pCantidadOriginal,
		CantidadPedida = @pCantidadPedida,
		CantidadRemitida = @pCantidadRemitida,
		CantidadFacturada = @pCantidadFacturada,
		PrecioForm = @pPrecioForm,
		PrecioLista = @pPrecioLista,
		PrecioVenta = @pPrecioVenta,
		FechaEntrega = @pFechaEntrega,
		Especial = @pEspecial,
		Bonificacion = @pBonificacion,
		Observaciones = @pObservaciones,
		Pendiente = @pPendiente,
		ReservaMercaderia = @pReservaMercaderia,
		PrecioListaForm = @pPrecioListaForm,
		Centro1_Id = dbo.FuncFKconCentro1(@pCentro1_Id),
		Centro2_Id = dbo.FuncFKconCentro2(@pCentro2_Id), 
		TipoPrecio = @pTipoPrecio
	WHERE (Cotizacion_Id = @pCotizacion_Id) AND (Renglon_Co = @pRenglon_Co)
END 
ELSE 
BEGIN 
	INSERT INTO venCotizCuerpo
	(
		Cotizacion_Id,
		Renglon_Co,
		Producto_Id,
		Medida_Id,
		Deposito_Id,
		Factor,
		CantidadOriginal,
		CantidadPedida,
		CantidadRemitida,
		CantidadFacturada,
		PrecioForm,
		PrecioLista,
		PrecioVenta,
		FechaEntrega,
		Especial,
		Bonificacion,
		Observaciones,
		Pendiente,
		ReservaMercaderia,
		PrecioListaForm,
		Centro1_Id,
		Centro2_Id,
		TipoPrecio
	)
	VALUES 
	(
		@pCotizacion_Id,
		@pRenglon_Co,
		dbo.FuncFKstkProductos(@pProducto_Id),
		dbo.FuncFKstkUniMed(@pMedida_Id),
		dbo.FuncFKstkDepositos(@pDeposito_Id),
		@pFactor,
		@pCantidadOriginal,
		@pCantidadPedida,
		@pCantidadRemitida,
		@pCantidadFacturada,
		@pPrecioForm,
		@pPrecioLista,
		@pPrecioVenta,
		@pFechaEntrega,
		@pEspecial,
		@pBonificacion,
		@pObservaciones,
		@pPendiente,
		@pReservaMercaderia,
		@pPrecioListaForm,
		dbo.FuncFKconCentro1(@pCentro1_Id),
		dbo.FuncFKconCentro2(@pCentro2_Id),
		@pTipoPrecio
	)
END 

GO

DROP PROCEDURE venCotizCuerpoDatos
GO
CREATE PROCEDURE venCotizCuerpoDatos
(
@pCotizacion_Id int,
@pRenglon_Co int=null
)
AS
SET NOCOUNT ON 

SELECT venCotizCuerpo.Cotizacion_Id, venCotizCuerpo.Renglon_Co, stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProducto, 
stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionMedida, stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDeposito, venCotizCuerpo.Factor, 
venCotizCuerpo.CantidadOriginal, venCotizCuerpo.CantidadPedida,	venCotizCuerpo.CantidadRemitida, venCotizCuerpo.CantidadFacturada, 
venCotizCuerpo.PrecioForm, venCotizCuerpo.PrecioLista, venCotizCuerpo.PrecioVenta, venCotizCuerpo.FechaEntrega, 
venCotizCuerpo.Especial, venCotizCuerpo.Bonificacion, venCotizCuerpo.Observaciones, venCotizCuerpo.Pendiente, 
venCotizCuerpo.ReservaMercaderia, venCotizCuerpo.PrecioListaForm, conCentro1.Centro1_Id, 
conCentro1.Descripcion as DescripcionCentro1, conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, 
Round(venCotizCuerpo.PrecioForm * venCotizCuerpo.CantidadOriginal,2) as SubTotal, 
Round(venCotizCuerpo.PrecioVenta * venCotizCuerpo.CantidadPedida,2) as SubTotalNeto, venCotizCuerpo.TipoPrecio
FROM venCotizCuerpo 
LEFT JOIN conCentro1  ON (conCentro1.conCentro1 = venCotizCuerpo.Centro1_Id)
left join conCentro2 on conCentro2.conCentro2=venCotizCuerpo.Centro2_Id
left join stkProductos on stkProductos=venCotizCuerpo.Producto_Id
left join stkDepositos on stkDepositos.stkDepositos= venCotizCuerpo.Deposito_Id
left join stkUniMed on stkUniMed.stkUniMed=venCotizCuerpo.Medida_Id
WHERE (Cotizacion_Id = @pCotizacion_Id)
AND (Renglon_Co =isnull( @pRenglon_Co,Renglon_Co))
 
 RETURN @@Error 

GO

DROP PROCEDURE venCotizCuerpoEliminar
GO
CREATE PROCEDURE venCotizCuerpoEliminar
(
@pCotizacion_Id int,
@pRenglon_Co int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venCotizCuerpo 
WHERE (Cotizacion_Id = @pCotizacion_Id)
AND (Renglon_Co = ISNULL(@pRenglon_Co, Renglon_Co))
 
 RETURN @@Error 

GO

DROP PROCEDURE venCotizCuerpoSumaCant
GO
CREATE PROCEDURE venCotizCuerpoSumaCant
(
@pCotizacion_Id int,
@pRenglon_Co int ,
@pCantidad Numeric(18,2)
)
AS
SET NOCOUNT ON 

Update venCotizCuerpo  set CantidadFacturada = CantidadFacturada + @pCantidad
WHERE (Cotizacion_Id = @pCotizacion_Id)
AND (Renglon_Co = @pRenglon_Co)
 
 RETURN @@Error 

GO

DROP PROCEDURE venCotizCuerpoTienePend
GO
CREATE PROCEDURE venCotizCuerpoTienePend
(
@pCotizacion_Id int
)
AS
SET NOCOUNT ON 

select COUNT(1) as Cantidad  from venCotizCuerpo  
WHERE (Cotizacion_Id = @pCotizacion_Id) and 
CantidadFacturada < CantidadPedida

 
 RETURN @@Error 

GO








Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venCotizFactuCuerpo.sql*/
DROP PROCEDURE venCotizFactuCuerpoInsertar
GO
CREATE PROCEDURE venCotizFactuCuerpoInsertar
(
@pvenMovimientos bigint,
@pRenglonCuerpo int,
@pvenCotizaciones int ,
@pRenglon_Co int ,
@pCantidad qCantidadD8
)
AS
SET NOCOUNT ON 
	INSERT INTO venCotizFactuCuerpo
	(
		venMovimientos,
		RenglonCuerpo,
		venCotizaciones,
		Renglon_Co,
		Cantidad
	)
	VALUES 
	(
		@pvenMovimientos,
		@pRenglonCuerpo,
		@pvenCotizaciones,
		@pRenglon_Co,
		@pCantidad
	)

GO

DROP PROCEDURE venCotizFactuCuerpoDatos
GO
CREATE PROCEDURE venCotizFactuCuerpoDatos
(
@pvenMovimientos bigint,
@pRenglonCuerpo int = Null
)
AS
SET NOCOUNT ON 

SELECT venCotizFactuCuerpo.venMovimientos, venCotizFactuCuerpo.RenglonCuerpo, venCotizFactuCuerpo.venCotizaciones,venCotizFactuCuerpo.Renglon_Co, 
	venCotizFactuCuerpo.Cantidad
FROM venCotizFactuCuerpo 
WHERE (venMovimientos = @pvenMovimientos)
AND (RenglonCuerpo = isnull(@pRenglonCuerpo, RenglonCuerpo))
 
RETURN @@Error 

GO

DROP PROCEDURE venCotizFactuCuerpoEliminar
GO
CREATE PROCEDURE venCotizFactuCuerpoEliminar
(
@pvenMovimientos bigint,
@pRenglonCuerpo int
)
AS
SET NOCOUNT ON 

DELETE FROM venCotizFactuCuerpo 
WHERE (venMovimientos = @pvenMovimientos)
AND (RenglonCuerpo = @pRenglonCuerpo)
 
RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venCotizFactura.sql*/
DROP PROCEDURE venCotizFacturaInsertar
GO
CREATE PROCEDURE venCotizFacturaInsertar
(
@pvenMovimientos bigint,
@pvenCotizaciones int
)
AS
SET NOCOUNT ON 
	INSERT INTO venCotizFactura
	(
		venMovimientos,
		venCotizaciones
	)
	VALUES 
	(
		@pvenMovimientos,
		@pvenCotizaciones
	)

GO

DROP PROCEDURE venCotizFacturaDatos
GO
CREATE PROCEDURE venCotizFacturaDatos
(
@pvenMovimientos bigint
)
AS
SET NOCOUNT ON 

SELECT venCotizFactura.venMovimientos, venCotizFactura.venCotizaciones
FROM venCotizFactura 
WHERE (venMovimientos = @pvenMovimientos)
 
 RETURN @@Error 

GO

DROP PROCEDURE venCotizFacturaEliminar
GO
CREATE PROCEDURE venCotizFacturaEliminar
(
@pvenMovimientos bigint
)
AS
SET NOCOUNT ON 

DELETE FROM venCotizFactura 
WHERE (venMovimientos = @pvenMovimientos)
 
RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venCotizPediCuerpo.sql*/
DROP PROCEDURE venCotizPediCuerpoInsertar
GO
CREATE PROCEDURE venCotizPediCuerpoInsertar
(
@pvenPedidos int,
@pRenglon_Pe int,
@pvenCotizaciones int ,
@pRenglon_Co int ,
@pCantidad qCantidadD8
)
AS
SET NOCOUNT ON 
	INSERT INTO venCotizPediCuerpo
	(
		venPedidos,
		Renglon_Pe,
		venCotizaciones,
		Renglon_Co,
		Cantidad
	)
	VALUES 
	(
		@pvenPedidos,
		@pRenglon_Pe,
		@pvenCotizaciones,
		@pRenglon_Co,
		@pCantidad
	)
GO

DROP PROCEDURE venCotizPediCuerpoDatos
GO
CREATE PROCEDURE venCotizPediCuerpoDatos
(
@pvenPedidos int,
@pRenglon_Pe int = NULL
)
AS
SET NOCOUNT ON 

SELECT venCotizPediCuerpo.venPedidos, venCotizPediCuerpo.Renglon_Pe, venCotizPediCuerpo.venCotizaciones,
	venCotizPediCuerpo.Renglon_Co, venCotizPediCuerpo.Cantidad
FROM venCotizPediCuerpo 
WHERE (venPedidos = @pvenPedidos)
AND (Renglon_Pe = isNull(@pRenglon_Pe,Renglon_Pe))
 
 RETURN @@Error 

GO

DROP PROCEDURE venCotizPediCuerpoEliminar
GO
CREATE PROCEDURE venCotizPediCuerpoEliminar
(
@pvenPedidos int,
@pRenglon_Pe int
)
AS
SET NOCOUNT ON 

DELETE FROM venCotizPediCuerpo 
WHERE (venPedidos = @pvenPedidos) AND (Renglon_Pe = @pRenglon_Pe)
 
RETURN @@Error 


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venCotizPedidos.sql*/
DROP PROCEDURE venCotizPedidosGuardar
GO
CREATE PROCEDURE venCotizPedidosGuardar
(
@pCotizacion_Id int,
@pPedido_Id int,
@pImporte qMonedaD2
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venCotizPedidos WHERE (Cotizacion_Id = @pCotizacion_Id) AND (Pedido_Id = @pPedido_Id)))
BEGIN 
	UPDATE venCotizPedidos
	SET		Importe = @pImporte
	WHERE (Cotizacion_Id = @pCotizacion_Id) AND (Pedido_Id = @pPedido_Id)
END 
ELSE 
BEGIN 
	INSERT INTO venCotizPedidos
	(
		Cotizacion_Id,
		Pedido_Id,
		Importe
	)
	VALUES 
	(
		@pCotizacion_Id,
		@pPedido_Id,
		@pImporte
	)
END 

GO

DROP PROCEDURE venCotizPedidosDatos
GO
CREATE PROCEDURE venCotizPedidosDatos
(
@pCotizacion_Id int,
@pPedido_Id int
)
AS
SET NOCOUNT ON 

SELECT venCotizPedidos.Cotizacion_Id, venCotizPedidos.Pedido_Id, venCotizPedidos.Importe
FROM venCotizPedidos 
WHERE (Cotizacion_Id = @pCotizacion_Id)
AND (Pedido_Id = @pPedido_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE venCotizPedidosEliminar
GO
CREATE PROCEDURE venCotizPedidosEliminar
(
@pCotizacion_Id int,
@pPedido_Id int
)
AS
SET NOCOUNT ON 

DELETE FROM venCotizPedidos 
WHERE (Cotizacion_Id = @pCotizacion_Id)
AND (Pedido_Id = @pPedido_Id)
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venCotizSegmentos.sql*/
DROP PROCEDURE venCotizSegmentoGuardar
GO
CREATE PROCEDURE venCotizSegmentoGuardar
(
@pEmpresa_Id int = NULL,
@pSegmento_Id varchar(10) = NULL,
@pSegmento1N int = NULL,
@pSegmento2N int = NULL,
@pSegmento3N int = NULL,
@pSegmento4N int = NULL,
@pSegmento1C varchar(20) = NULL,
@pSegmento2C varchar(20) = NULL,
@pSegmento3C varchar(20) = NULL,
@pSegmento4C varchar(20) = NULL,
@pTieneAutomatico bit,
@pvenCotizaciones int = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venCotizSegmento WHERE 
	(Empresa_Id = @pEmpresa_Id) AND 
	(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
	(Segmento1N = @pSegmento1N) AND 
	(Segmento2N = @pSegmento2N) AND 
	(Segmento3N = @pSegmento3N) AND 
	(Segmento4N = @pSegmento4N) AND 
	(Segmento1C = @pSegmento1C) AND 
	(Segmento2C = @pSegmento2C) AND 
	(Segmento3C = @pSegmento3C) AND 
	(Segmento4C = @pSegmento4C)))

BEGIN 
	UPDATE venCotizSegmento
	SET	Empresa_Id = @pEmpresa_Id,
		venCotizaciones = @pvenCotizaciones
	WHERE (Empresa_Id = @pEmpresa_Id) AND 
		(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
		(Segmento1N = @pSegmento1N) AND 
		(Segmento2N = @pSegmento2N) AND 
		(Segmento3N = @pSegmento3N) AND 
		(Segmento4N = @pSegmento4N) AND 
		(Segmento1C = @pSegmento1C) AND 
		(Segmento2C = @pSegmento2C) AND 
		(Segmento3C = @pSegmento3C) AND 
		(Segmento4C = @pSegmento4C)
END 
ELSE 
BEGIN 
	If (@pTieneAutomatico=1)
	BEGIN
		SET @pSegmento1N = (SELECT MAX(venCotizSegmento.Segmento1N)+1 AS Segmento1N 
				FROM venCotizSegmento 
					Where				
					Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) AND 
					Segmento2N = @pSegmento2N AND 
					Segmento3N = @pSegmento3N AND 
					Segmento4N = @pSegmento4N AND 
					Segmento1C = @pSegmento1C AND 
					Segmento2C = @pSegmento2C AND 
					Segmento3C = @pSegmento3C AND 
					Segmento4C = @pSegmento4C And
					Empresa_Id = @pEmpresa_Id)
		
		If @pSegmento1N Is Null
			SET @pSegmento1N = (SELECT genContadorSegmento.PrimerNumero AS Segmento1N 
				FROM venCotizSegmento 
				INNER JOIN genContadorSegmento ON genContadorSegmento.Empresa_Id = venCotizSegmento.Empresa_id And
					(genContadorSegmento.Segmento_Id = venCotizSegmento.Segmento_Id) AND 
					(genContadorSegmento.Segmento2N = venCotizSegmento.Segmento2N) AND 
					(genContadorSegmento.Segmento3N = venCotizSegmento.Segmento3N) AND 
					(genContadorSegmento.Segmento4N = venCotizSegmento.Segmento4N) AND 
					(genContadorSegmento.Segmento1C = venCotizSegmento.Segmento1C) AND 
					(genContadorSegmento.Segmento2C = venCotizSegmento.Segmento2C) AND 
					(genContadorSegmento.Segmento3C = venCotizSegmento.Segmento3C) AND 
					(genContadorSegmento.Segmento4C = venCotizSegmento.Segmento4C)
					Where
					genContadorSegmento.Empresa_Id = @pEmpresa_Id And
							(genContadorSegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
							genContadorSegmento.Segmento2N = @pSegmento2N AND 
							genContadorSegmento.Segmento3N = @pSegmento3N AND 
							genContadorSegmento.Segmento4N = @pSegmento4N AND 
							genContadorSegmento.Segmento1C = @pSegmento1C AND 
							genContadorSegmento.Segmento2C = @pSegmento2C AND 
							genContadorSegmento.Segmento3C = @pSegmento3C AND 
							genContadorSegmento.Segmento4C = @pSegmento4C)

	-- esto solo pasa si empieza en 1 esta prendido
			if @pSegmento1N is null or @pSegmento1N <= 0
			begin
				set @pSegmento1N = 1
			end	
	END
	if (@pSegmento1N = 0)
			SET @pSegmento1N = 1

	INSERT INTO venCotizSegmento
	(
		Empresa_Id,
		Segmento_Id,
		Segmento1N,
		Segmento2N,
		Segmento3N,
		Segmento4N,
		Segmento1C,
		Segmento2C,
		Segmento3C,
		Segmento4C,
		venCotizaciones
	)
	VALUES 
	(
		@pEmpresa_Id,
		dbo.FuncFKgenSegmentos(@pSegmento_Id),
		@pSegmento1N,
		@pSegmento2N,
		@pSegmento3N,
		@pSegmento4N,
		@pSegmento1C,
		@pSegmento2C,
		@pSegmento3C,
		@pSegmento4C,
		@pvenCotizaciones
	)
	
END 
SELECT @pSegmento1N as RetVal

GO

DROP PROCEDURE venCotizSegmentoDatos
GO
CREATE PROCEDURE venCotizSegmentoDatos
(
@pSegmento_Id varchar(25),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20)
)
as
select Empresa_Id, genSegmentos.Segmento_Id, Segmento1N, Segmento2N, Segmento3N, Segmento4N, Segmento1C, Segmento2C, Segmento3C,
Segmento4C, venCotizaciones,	genSegmentos.TieneColumnaAutomatica 
from venCotizSegmento inner join genSegmentos on genSegmentos=venCotizSegmento.Segmento_Id where 
@pSegmento_Id =genSegmentos.Segmento_Id and
@pSegmento1N =Segmento1N and
@pSegmento2N =Segmento2N and
@pSegmento3N =Segmento3N and
@pSegmento4N =Segmento4N and
@pSegmento1C =Segmento1C and
@pSegmento2C =Segmento2C and
@pSegmento3C = Segmento3C and
@pSegmento4C = Segmento4C
go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venEsquemaAuto.sql*/
DROP PROCEDURE venEsquemaAutoGuardar
GO
CREATE PROCEDURE venEsquemaAutoGuardar
(
@pEsquemaAuto_Id varchar(10),
@pEsquemaAuto_Id_Nuevo varchar(10),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(100)
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM venEsquemaAuto WHERE (EsquemaAuto_Id = @pEsquemaAuto_Id)))
BEGIN 
	UPDATE venEsquemaAuto
	SET @lIdentidad = venEsquemaAuto,
		EsquemaAuto_Id = @pEsquemaAuto_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion
	WHERE (EsquemaAuto_Id = @pEsquemaAuto_Id)
END 
ELSE 
BEGIN 
	INSERT INTO venEsquemaAuto
	(
		EsquemaAuto_Id,
		Empresa_Id,
		Descripcion
	)
	VALUES 
	(
		@pEsquemaAuto_Id,
		@pEmpresa_Id,
		@pDescripcion
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE venEsquemaAutoDatos
GO
CREATE PROCEDURE venEsquemaAutoDatos
(
@pEsquemaAuto_Id varchar(10)
)
AS
SET NOCOUNT ON 

SELECT venEsquemaAuto.venEsquemaAuto, venEsquemaAuto.EsquemaAuto_Id, venEsquemaAuto.Empresa_Id,
	Cast( Case When venEsquemaAuto.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, venEsquemaAuto.Descripcion
FROM venEsquemaAuto 
WHERE (EsquemaAuto_Id = @pEsquemaAuto_Id)
 
Exec venEsquemaAutoRengDatos @pEsquemaAuto_Id

Declare @pidentity bigint= dbo.FuncFKvenEsquemaAuto(@pEsquemaAuto_Id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'venEsquemaAuto'
RETURN @@Error 

GO

DROP PROCEDURE venEsquemaAutoEliminar
GO
CREATE PROCEDURE venEsquemaAutoEliminar
(
@pEsquemaAuto_Id varchar(10)
)
AS
SET NOCOUNT ON 

DELETE FROM venEsquemaAuto 
WHERE (EsquemaAuto_Id = @pEsquemaAuto_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKvenEsquemaAuto
GO

CREATE FUNCTION FuncFKvenEsquemaAuto
(
@pEsquemaAuto_Id varchar (10)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = venEsquemaAuto FROM venEsquemaAuto WHERE 
	EsquemaAuto_Id = @pEsquemaAuto_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venEsquemaAutoReng.sql*/
DROP PROCEDURE venEsquemaAutoRengGuardar
GO
CREATE PROCEDURE venEsquemaAutoRengGuardar
(
@pEsquemaAuto_Id varChar(10),
@pOrden int,
@pNivelAuto_Id varchar(5),
@pFormula varchar(max)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venEsquemaAutoReng WHERE EsquemaAuto_Id = dbo.FuncFKvenEsquemaAuto(@pEsquemaAuto_Id) AND Orden = @pOrden))
BEGIN 
	UPDATE venEsquemaAutoReng
	SET NivelAuto_Id = dbo.FuncFKvenNivelesAuto(@pNivelAuto_Id), Formula = @pFormula
	WHERE EsquemaAuto_Id = dbo.FuncFKvenEsquemaAuto(@pEsquemaAuto_Id) AND (Orden = @pOrden)
END 
ELSE 
BEGIN 
	INSERT INTO venEsquemaAutoReng
	(
		EsquemaAuto_Id,
		Orden,
		NivelAuto_Id,
		Formula
	)
	VALUES 
	(
		dbo.FuncFKvenEsquemaAuto(@pEsquemaAuto_Id),
		@pOrden,
		dbo.FuncFKvenNivelesAuto(@pNivelAuto_Id),
		@pFormula
	)
END 

GO

DROP PROCEDURE venEsquemaAutoRengDatos
GO
CREATE PROCEDURE venEsquemaAutoRengDatos
(
@pEsquemaAuto_Id varChar(5),
@pOrden int = Null
)
AS
SET NOCOUNT ON 

SELECT venEsquemaAuto.EsquemaAuto_Id, venEsquemaAuto.Descripcion as DescripcioncomEsquemaAuto, venEsquemaAutoReng.Orden, venNivelesAuto.NivelAuto_Id,
	venNivelesAuto.Descripcion as DescripcioncomNivelesAuto, venEsquemaAutoReng.Formula
FROM venEsquemaAutoReng 
INNER JOIN venEsquemaAuto ON (venEsquemaAuto.venEsquemaAuto = venEsquemaAutoReng.EsquemaAuto_Id)
LEFT JOIN venNivelesAuto ON (venNivelesAuto.venNivelesAuto = venEsquemaAutoReng.NivelAuto_Id)
WHERE venEsquemaAuto.EsquemaAuto_Id = @pEsquemaAuto_Id
AND Orden = IsNull(@pOrden, Orden)
Order By venEsquemaAutoReng.Orden
 
RETURN @@Error 

GO

DROP PROCEDURE venEsquemaAutoRengEliminar
GO
CREATE PROCEDURE venEsquemaAutoRengEliminar
(
@pEsquemaAuto_Id varchar(10),
@pOrden int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venEsquemaAutoReng 
WHERE (EsquemaAuto_Id = dbo.FuncFKvenEsquemaAuto(@pEsquemaAuto_Id))
AND (Orden = ISNULL(@pOrden, Orden))
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venFacturacionPedido.sql*/
-- PARA V2
DROP PROCEDURE venFacturacionPedidoDatos_Identity
GO

CREATE PROCEDURE venFacturacionPedidoDatos_Identity
(
@lIdentity int
)
AS
SET NOCOUNT ON 

SELECT venPedidos.venPedidos, venPediSegmentos.Empresa_Id, genSegmentos.Segmento_Id, venPediSegmentos.Segmento1N,
	venPediSegmentos.Segmento2N,venPediSegmentos.Segmento3N,venPediSegmentos.Segmento4N,
	venPediSegmentos.Segmento1C, venPediSegmentos.Segmento2C,venPediSegmentos.Segmento3C,
	venPediSegmentos.Segmento4C,
	venSubTipoMov.SubTipoMov_Id, venSubTipoMov.Descripcion as DescripcionSubTipoMov, venPedidos.Fecha FechaPedido,
	dbo.FechaActual() Fecha,
	venClientes.Cliente_Id, venPedidos.Sucursal, venClieHabitual.NombreFantasia, genMonedas.Moneda_Id,
	genMonedas.Descripcion as DescripcionMonedas, genMonedasFact.Moneda_Id MonedaFacturacion,
	genMonedasFact.Descripcion DescripcionMonFacturacion, venCondPago.CondPagoCli_Id, venCondPago.Descripcion as DescripcionCondPago, 
	venListasPrecios.ListaPrecio_Id, venListasPrecios.Descripcion as DescripcionListasPrecios, venVendedores.Vendedor_Id, 
	venVendedores.Nombre as DescripcionVendedores, venFormaEntrega.FormaEntrega_Id,
	venFormaEntrega.RazonSocial as DescripcionFormaEntrega, venPedidos.Estado,
	genUsuarioAutoriz.Usuario_Id UsuarioAutoriz_Id, genUsuarioAutoriz.Apellido_y_Nombres as DescripcionUsuarioAutoriz,
	venPedidos.FechaAutorizo, venPedidos.Observaciones,
	venPedidos.ObservEstado, venPedidos.Motivo_Id, venPedidos.ImporteTotal, venPedidos.Bonificacion1,
	venPedidos.Bonificacion2, venPedidos.Bonificacion3, venPedidos.Bonificacion4, venPedidos.Bonificacion5,
	venPedidos.Dato1, venPedidos.Dato2, venPedidos.Dato3, venPedidos.FechaUltMod,
	venPedidos.CliOrdenCompra, venPedidos.venNroPedido, venPedidos.FacturaAnticipo, venPedidos.TrabaDespacho,
	venPedidos.PorAnticipo, venPedidos.Anticipo, venPedidos.AnticipoPendiente, venPedidos.ObsAnticipo,
	venPedidos.TipoPrecioForm, venPedidos.CongelaCambio, venPedidos.Fecha_Registro, venPedidos.Cambio * 0 Cambio,
	venPedidos.Cambio CambioMonedaOriginal,
	venIncoterm.Incoterm_Id, venIncoterm.Descripcion as DescripcionIncoterm,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, venPedidos.Posteado, 
	venPedidos.MetodoPago , venpedidos.UsoCfdi, UsosCfdi.Descripcion as DescripcionUsoCfdi, 
	Metodos.Descripcion as DescripcionMetodoPago, case when venPedidos.MetodoPago='99'then 'PUE' else 'PPD' end as N_MetodoPago, 
	 Cast(1 as Bit) as Timbrar, 
	dbo.Segmento(venPediSegmentos.Segmento_Id, venPediSegmentos.Segmento1C, venPediSegmentos.Segmento2C,
	venPediSegmentos.Segmento3C, venPediSegmentos.Segmento4C,venPediSegmentos.Segmento1N,
	venPediSegmentos.Segmento2N,venPediSegmentos.Segmento3N,venPediSegmentos.Segmento4N) as SegmentoStr,
	' ' Segmento_IdFact , 0 Segmento1NFact , 0 Segmento2NFact , 0 Segmento3NFact , 0 Segmento4NFact ,
	' ' Segmento1CFact , ' ' Segmento2CFact, ' ' Segmento3CFact, ' ' Segmento4CFact,	
	' ' as ArchivoPDF, ' ' as ArchivoXML, 
	' ' Segmento_IdNC , 0 Segmento1NNC , 0 Segmento2NNC , 0 Segmento3NNC , 0 Segmento4NNC ,
	' ' Segmento1CNC , ' ' Segmento2CNC, ' ' Segmento3CNC, ' ' Segmento4CNC,	
	' ' as ArchivoPDFNC, ' ' as ArchivoXMLNC,
	' ' Segmento_IdRem , 0 Segmento1NRem , 0 Segmento2NRem , 0 Segmento3NRem , 0 Segmento4NRem ,
	' ' Segmento1CRem , ' ' Segmento2CRem, ' ' Segmento3CRem, ' ' Segmento4CRem,	
	' ' as ArchivoPDFRem, ' ' as ArchivoXMLRem
	
FROM venPedidos 
INNER JOIN venSubTipoMov  ON (venSubTipoMov.venSubTipoMov = venPedidos.SubTipoMov_Id)
LEFT JOIN venClieHabitual  ON (venClieHabitual.genEntidades = venPedidos.Cliente_Id) AND (venClieHabitual.Sucursal = venPedidos.Sucursal)
Left Join venClientes On venPedidos.Cliente_Id = venClientes.genEntidades
LEFT JOIN genMonedas  ON (genMonedas.genMonedas = venPedidos.Moneda_Id)
Left Join genMonedas genMonedasFact On genMonedasFact.genMonedas = venPedidos.MonedaFacturacion
LEFT JOIN venCondPago  ON (venCondPago.venCondPago = venPedidos.CondPagoCli_Id)
LEFT JOIN venListasPrecios  ON (venListasPrecios.venListasPrecios = venPedidos.ListaPrecio_Id)
LEFT JOIN venVendedores  ON (venVendedores.venVendedores = venPedidos.Vendedor_Id)
LEFT JOIN venFormaEntrega  ON (venFormaEntrega.venFormaEntrega = venPedidos.FormaEntrega_Id)
LEFT JOIN genUsuarios genUsuarioAutoriz  ON (genUsuarioAutoriz.genUsuarios = venPedidos.UsuarioAutoriz_Id)
LEFT JOIN venIncoterm  ON (venIncoterm.venIncoterm_int = venPedidos.Incoterm_Id)
INNER JOIN genUsuarios ON (genUsuarios.genUsuarios = venPedidos.Usuario_Id)
INNER JOIN venPediSegmentos ON venPediSegmentos.venPedidos = venPedidos.venPedidos
INNER JOIN genSegmentos ON venPediSegmentos.Segmento_Id = genSegmentos.genSegmentos
LEFT JOIN genEntidadesBasicasValor as UsosCfdi ON
UsosCfdi.Entidad_Id = 4 AND 
UsosCfdi.Dominio_Id = 'MX' AND 
UsosCfdi.Clave = venPedidos.UsoCfdi
LEFT JOIN genEntidadesBasicasValor as Metodos ON
Metodos.Entidad_Id = 6 AND 
Metodos.Dominio_Id = 'MX' AND 
Metodos.Clave = venPedidos.MetodoPago
WHERE venPedidos.venPedidos = @lIdentity

exec venFacturacionPedidoCuerpoDatos  @lIdentity

SELECT stkMoviCabe as VenPedidos, stkMoviSerie.Renglon, stkMoviSerie.Serie, stkMoviSerie.Cantidad,  
	stkSerieVencimiento.Vencimiento, '' as Ubicacion_Id
	FROM stkMoviSerie 
	inner join stkSerieVencimiento ON stkSerieVencimiento.Serie = stkMoviSerie.Serie 
	where 1=2

Exec genAtributosGeneralesIdentityDatos @lIdentity, 'venFacturacionPedidos'
Exec stkMoviUbicacionDatos  0
GO



-- venFacturacionPedidoDatos 1, 'NP', 1,0,0,0,'0001',' ',' ',' '
DROP PROCEDURE venFacturacionPedidoDatos
GO
CREATE PROCEDURE venFacturacionPedidoDatos
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
AS
SET NOCOUNT ON 

Declare @pIdentity int= (select venPedidos from venPediSegmentos
	Where
	venPediSegmentos.Empresa_id = @pEmpresa_id and 
	venPediSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_id) and 
	venPediSegmentos.Segmento1N = @pSegmento1N and 
	venPediSegmentos.Segmento2N = @pSegmento2N and 
	venPediSegmentos.Segmento3N = @pSegmento3N and 
	venPediSegmentos.Segmento4N = @pSegmento4N and 
	venPediSegmentos.Segmento1C = @pSegmento1C and 
	venPediSegmentos.Segmento2C = @pSegmento2C and 
	venPediSegmentos.Segmento3C = @pSegmento3C and 
	venPediSegmentos.Segmento4C = @pSegmento4C)

Exec venFacturacionPedidoDatos_Identity @pIdentity

RETURN @@Error
GO


DROP PROCEDURE venFacturacionPedidoCuerpoDatos
GO
CREATE PROCEDURE venFacturacionPedidoCuerpoDatos
(
@pvenPedidos int,
@pRenglon_Pe int=null
)
AS
SET NOCOUNT ON 

SELECT venPedidos.venPedidos, venPediCuerpo.Renglon_Pe, stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos,
	stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos,
	venPediCuerpo.Factor,
	venPediCuerpo.CantidadOriginal, venPediCuerpo.CantidadPedida, venPediCuerpo.CantidadRemitida, venPediCuerpo.CantidadFacturada,
	venPediCuerpo.CantidadFacturada * 0 CantidadAFacturar, venPediCuerpo.CantidadFacturada * 0 CantidadAEntregar,
	venPediCuerpo.CantidadPedida - case when venPedidos.SoloEntrega=1 then venPediCuerpo.CantidadRemitida else venPediCuerpo.CantidadFacturada end as CantidadPendiente,
	stkMedidaAlterna.Medida_Id MedidaAlterna, venPediCuerpo.CantidadFacturada * 0 CantidadAFacturarAlterna,
	venPediCuerpo.CantidadFacturada * 0 CantidadAEntregarAlterna,
	venPediCuerpo.PrecioForm, venCondFiscal.CondFisc_Id AS CFVenta_Id, 
	venPediCuerpo.PrecioLista, venPediCuerpo.PrecioVenta, venPediCuerpo.FechaEntrega,
	venPediCuerpo.Especial, venPediCuerpo.Bonificacion, venPediCuerpo.Observaciones,
	venPediCuerpo.Pendiente, venPediCuerpo.ReservaMercaderia, concentro1.Centro1_Id, conCentro1.Descripcion DescripcionCentro1,
	concentro2.Centro2_Id, conCentro2.Descripcion DescripcionCentro2
FROM venPediCuerpo 
INNER JOIN venPedidos  ON (venPedidos.venPedidos = venPediCuerpo.venPedidos)
LEFT JOIN stkProductos  ON (stkProductos.stkProductos = venPediCuerpo.Producto_Id)
LEFT JOIN venCondFiscal ON venCondFiscal.venCondFiscal = stkProductos.CFVenta_Id 
LEFT JOIN stkUniMed  ON (stkUniMed.stkUniMed = venPediCuerpo.Medida_Id)
Left Join stkUniMed stkMedidaAlterna On stkMedidaAlterna.stkUniMed = stkProductos.MedidaAlterna
LEFT JOIN stkDepositos  ON (stkDepositos.stkDepositos = venPediCuerpo.Deposito_Id)
Left Join conCentro1 On conCentro1.conCentro1 = venPediCuerpo.Centro1_Id
Left Join conCentro2 On conCentro2.conCentro2 = venPediCuerpo.Centro2_Id

WHERE 
venPediCuerpo.CantidadPedida - venPediCuerpo.CantidadFacturada > 0 AND 
venPediCuerpo.Pendiente = 1 and 
venPedidos.venPedidos = @pvenPedidos
AND Renglon_Pe = IsNull(@pRenglon_Pe, Renglon_Pe)
 
RETURN @@Error 

GO

DROP PROCEDURE venPedidosFacturaAnticipo
GO
CREATE PROCEDURE venPedidosFacturaAnticipo
(
	@pVenPedidos int
)
AS

SELECT venPediFacturados.venMovimientos, venPediFacturados.venPedidos, 
genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, 
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, genAsiSegmentos.Segmento1C,
genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C
from venPediFacturados inner join venMovimientos ON
venPediFacturados.venMovimientos = venMovimientos.venMovimientos 
INNER JOIN venSubTipoMov ON
venSubTipoMov.venSubTipoMov = venmovimientos.venSubTipoMov_Id
INNER JOIN conAsientos ON
conAsientos.conAsientos = venMovimientos.venMovimientos
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = venMovimientos.venMovimientos
INNER JOIN genSegmentos ON  genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
WHERE
	conAsientos.Anulado = 0 AND 
	venSubTipoMov.MueveStock = 0 and 
	venMovimientos.venTipoMov = 'F' AND 
	venPediFacturados.venPedidos = @pVenPedidos
GO






Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venFacturacionRemito.sql*/
-- venFacturacionRemitoDatos 31
-- venRemitosPendienteClieDatos   'A007',1,'PES',1



DROP PROCEDURE venFacturacionRemitoDatos
GO

CREATE PROCEDURE venFacturacionRemitoDatos
(
	@lIdentity bigint
)
AS
SET NOCOUNT ON 

SELECT stkRemitos.stkMoviCabe, 
	genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C,
	ISNULL(venSubTipoMov.SubTipoMov_Id,' ') SubTipoMov_Id, 	ISNULL(venSubTipoMov.Descripcion,' ') as DescripcionSubTipoMov, 
		ISNULL(venPedidos.Fecha, conAsientos.Fecha) FechaPedido,
	dbo.FechaActual() Fecha,
	venClientes.Cliente_Id, venClieHabitual.Sucursal, venClieHabitual.NombreFantasia, genMonedas.Moneda_Id,
	genMonedas.Descripcion as DescripcionMonedas, genMonedasFact.Moneda_Id MonedaFacturacion,
	genMonedasFact.Descripcion DescripcionMonFacturacion, venCondPago.CondPagoCli_Id, venCondPago.Descripcion as DescripcionCondPago, 
	venListasPrecios.ListaPrecio_Id, venListasPrecios.Descripcion as DescripcionListasPrecios, venVendedores.Vendedor_Id, 
	venVendedores.Nombre as DescripcionVendedores, venFormaEntrega.FormaEntrega_Id,
	venFormaEntrega.RazonSocial as DescripcionFormaEntrega, isnull(venPedidos.Estado,' ') as Estado,
	venPedidos.FechaAutorizo, venPedidos.Observaciones,
	venPedidos.ObservEstado, venPedidos.Motivo_Id, ISNULL(venPedidos.ImporteTotal,0) AS ImporteTotal, 
	ISNULL(venPedidos.Bonificacion1,0) Bonificacion1,
	ISNULL(venPedidos.Bonificacion2,0) Bonificacion2, ISNULL(venPedidos.Bonificacion3,0) Bonificacion3, 
	ISNULL(venPedidos.Bonificacion4,0) Bonificacion4, ISNULL(venPedidos.Bonificacion5,0) Bonificacion5,
	ISNULL(venPedidos.Dato1,0) Dato1, ISNULL(venPedidos.Dato2,0) Dato2, ISNULL(venPedidos.Dato3,0) as Dato3, 
	ISNULL(venPedidos.FechaUltMod, conasientos.FechaRegistro) FechaUltMod,
	ISNULL(venPedidos.CliOrdenCompra,' ') as CliOrdenCompra, venPedidos.venNroPedido, 
	Cast(ISNULL(venPedidos.FacturaAnticipo,0) as Bit) as FacturaAnticipo, 
	Cast(ISNULL(venPedidos.TrabaDespacho,0) as Bit) as TrabaDespacho,
	ISNULL(venPedidos.PorAnticipo,0) PorAnticipo, ISNULL(venPedidos.Anticipo,0) Anticipo, 
	ISNULL(venPedidos.AnticipoPendiente,0.00) as AnticipoPendiente, venPedidos.ObsAnticipo,
	ISNULL(venPedidos.TipoPrecioForm,'C') TipoPrecioForm, 
	Cast(ISNULL(venPedidos.CongelaCambio,0) as Bit) as  CongelaCambio, 
	ISNULL(VenPedidos.Fecha_Registro,conAsientos.FechaRegistro) Fecha_Registro, 
	ISNULL(venPedidos.Cambio,0) * 0 Cambio,
	ISNULL(venPedidos.Cambio,1) CambioMonedaOriginal,
	venIncoterm.Incoterm_Id, venIncoterm.Descripcion as DescripcionIncoterm,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, 
	ISNULL(venPedidos.Posteado, conAsientos.Posteado) as Posteado, 
	Metodos.Clave MetodoPago , UsosCfdi.Clave UsoCfdi, UsosCfdi.Descripcion as DescripcionUsoCfdi, 
	Metodos.Descripcion as DescripcionMetodoPago,  Cast(1 as Bit) as Timbrar, 
	ISNULL(dbo.Segmento(venPediSegmentos.Segmento_Id, venPediSegmentos.Segmento1C, venPediSegmentos.Segmento2C,
	venPediSegmentos.Segmento3C, venPediSegmentos.Segmento4C,venPediSegmentos.Segmento1N,
	venPediSegmentos.Segmento2N,venPediSegmentos.Segmento3N,venPediSegmentos.Segmento4N),' ') as SegmentoStr,
	' ' Segmento_IdFact , 0 Segmento1NFact , 0 Segmento2NFact , 0 Segmento3NFact , 0 Segmento4NFact ,
	' ' Segmento1CFact , ' ' Segmento2CFact, ' ' Segmento3CFact, ' ' Segmento4CFact,	
	' ' as ArchivoPDF, ' ' as ArchivoXML, 
	' ' Segmento_IdNC , 0 Segmento1NNC , 0 Segmento2NNC , 0 Segmento3NNC , 0 Segmento4NNC ,
	' ' Segmento1CNC , ' ' Segmento2CNC, ' ' Segmento3CNC, ' ' Segmento4CNC,	
	' ' as ArchivoPDFNC, ' ' as ArchivoXMLNC, dbo.FechaActual() as Fecha_Nueva
FROM stkRemitos 
INNER JOIN conAsientos ON 
conAsientos.conAsientos = stkRemitos.stkMoviCabe
inner join genEmpresas ON  genEmpresas.genEmpresas = conAsientos.Empresa_Id
INNER JOIN genAsiSegmentos ON
genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
INNER JOIN genSegmentos ON genAsiSegmentos.Segmento_Id = genSegmentos.genSegmentos
INNER Join venClientes On stkRemitos.Cliente_Id = venClientes.genEntidades
INNER JOIN venClieHabitual  ON (venClieHabitual.genEntidades = stkRemitos.Cliente_Id) AND (venClieHabitual.Sucursal = stkRemitos.Sucursal)
LEFT JOIN (SELECT DISTINCT venPedidos, stkMoviCabe FROM venPediRemitidos) AS venPediRemitidos on
venPediRemitidos.stkMoviCabe = stkRemitos.stkMoviCabe
	LEFT join venPedidos ON 
	venPedidos.venPedidos =  venPediRemitidos.venPedidos 
LEFT JOIN venSubTipoMov  ON (venSubTipoMov.venSubTipoMov = venPedidos.SubTipoMov_Id)
INNER JOIN genMonedas  ON genMonedas.genMonedas = ISNULL(venPedidos.Moneda_Id,genEmpresas.Moneda_Id)
INNER Join genMonedas genMonedasFact On genMonedasFact.genMonedas = ISNULL(venPedidos.MonedaFacturacion,genEmpresas.Moneda_Id)
INNER JOIN venCondPago  ON venCondPago.venCondPago = ISNULL(venPedidos.CondPagoCli_Id, venClieHabitual.CondPagoCli_Id)
INNER JOIN venListasPrecios  ON venListasPrecios.venListasPrecios = ISNULL(venPedidos.ListaPrecio_Id, venClieHabitual.ListaPrecio_Id)
LEFT JOIN venVendedores  ON venVendedores.venVendedores = ISNULL(venPedidos.Vendedor_Id, venClieHabitual.Vendedor_Id)
LEFT JOIN venFormaEntrega  ON venFormaEntrega.venFormaEntrega = ISNULL(venPedidos.FormaEntrega_Id, venClieHabitual.FormaEntrega_Id)
LEFT JOIN venIncoterm  ON venIncoterm.venIncoterm_int = venPedidos.Incoterm_Id
INNER JOIN genUsuarios ON genUsuarios.genUsuarios = ISNULL(venPedidos.Usuario_Id, conAsientos.Usuario_Id)
LEFT JOIN venPediSegmentos ON venPediSegmentos.venPedidos = venPedidos.venPedidos
LEFT JOIN genEntidadesBasicasValor as UsosCfdi ON
UsosCfdi.Entidad_Id = 4 AND 
UsosCfdi.Dominio_Id = 'MX' AND 
UsosCfdi.Clave = ISNULL(venPedidos.UsoCfdi, venClieHabitual.C_UsoCFDI)
LEFT JOIN genEntidadesBasicasValor as Metodos ON
Metodos.Entidad_Id = 6 AND 
Metodos.Dominio_Id = 'MX' AND 
Metodos.Clave = ISNULL(venPedidos.MetodoPago, venClieHabitual.MetodoDePago)
WHERE 
conAsientos.Anulado = 0 and 
conAsientos.Posteado = 1 and 
stkRemitos.stkMoviCabe = @lIdentity

Exec venFacturacionRemitoCuerpo @lIdentity
Exec genAtributosGeneralesIdentityDatos @lIdentity, 'stkMoviCabe'
GO

GO
DROP PROCEDURE venFacturacionRemitoCuerpo
GO
CREATE PROCEDURE venFacturacionRemitoCuerpo
(
	@lIdentity bigint
)
as
SELECT stkRemitos.stkMoviCabe, stkRemiPendFact.Renglon,
	isnull(venPedidos.venPedidos,0) venPedidos , isnull(venPediCuerpo.Renglon_Pe,0) as Renglon_Pe, 
	stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos,
	stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos,
	ISNULL(venPediCuerpo.Factor, stkMoviCuerpo.Factor) as Factor ,
	ISNULL(venPediCuerpo.CantidadOriginal, stkMoviCuerpo.CantidadForm) as CantidadOriginal, 
	ISNULL(venPediCuerpo.CantidadPedida, stkMoviCuerpo.Cantidad)  as CantidadPedida, 
	ISNULL(venPediCuerpo.CantidadRemitida, stkMoviCuerpo.Cantidad) as CantidadRemitida, 
	ISNULL(venPediCuerpo.CantidadFacturada,stkMoviCuerpo.Cantidad-stkRemiPendFact.CantidadPendiente) as  CantidadFacturada, 
	stkRemiPendFact.CantidadPendiente, 	stkMoviCuerpo.Cantidad * 0 CantidadAFacturar, 
	'' MedidaAlterna, stkMoviCuerpo.Cantidad * 0 CantidadAFacturarAlterna,
	ISNULL(venPediCuerpo.PrecioForm, stkMoviCuerpo.PrecioOriginal) as  PrecioForm, 
	stkCondFisVenta.CFVenta_Id AS CFVenta_Id, 
	ISNULL(venPediCuerpo.PrecioLista,stkMoviCuerpo.PrecioOriginal) as PrecioLista,
	ISNULL(venPediCuerpo.PrecioVenta,stkMoviCuerpo.PrecioOriginal) as  PrecioVenta, 
	ISNULL(venPediCuerpo.FechaEntrega, conAsientos.Fecha) as FechaEntrega,
	Cast(ISNULL(venPediCuerpo.Especial,0) as Bit) as Especial,
	ISNULL(venPediCuerpo.Bonificacion,0) AS Bonificacion,
	 ISNULL(venPediCuerpo.Observaciones,stkMoviCuerpo.Observaciones) as Observaciones,
	Cast(ISNULL(venPediCuerpo.Pendiente,1) as Bit) as  Pendiente ,
	Cast(ISNULL(venPediCuerpo.ReservaMercaderia,0)  as Bit) as  ReservaMercaderia,
	concentro1.Centro1_Id, conCentro1.Descripcion DescripcionCentro1,
	concentro2.Centro2_Id, conCentro2.Descripcion DescripcionCentro2, 
	stkMoviCuerpo.CostoUnitario
FROM stkRemitos inner join stkRemiPendFact ON
	stkRemitos.stkMoviCabe = stkRemiPendFact.stkMoviCabe
	INNER JOIN conAsientos ON conAsientos.conAsientos =stkRemiPendFact.stkMoviCabe
	INNER JOIN stkMoviCuerpo ON  stkMoviCuerpo.stkMoviCabe = stkRemiPendFact.stkMoviCabe and 
						     stkMoviCuerpo.Renglon = stkRemiPendFact.Renglon 
LEFT JOIN ( venPediRemitidos INNER JOIN venPediCuerpo  ON 
	venPediCuerpo.venPedidos = venPediRemitidos.venPedidos and 
	venPediCuerpo.Renglon_Pe = venPediRemitidos.Renglon_Pe 
	INNER JOIN venPedidos  ON venPedidos.venPedidos = venPediCuerpo.venPedidos 
	) ON 
	venPediRemitidos.stkMoviCabe = stkRemiPendFact.stkMoviCabe and
	venPediRemitidos.Renglon = stkRemiPendFact.Renglon
INNER JOIN stkProductos  ON stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
INNER JOIN stkCondFisVenta ON stkCondFisVenta.stkCondFisVenta = stkProductos.CFVenta_Id 
INNER JOIN stkUniMed  ON stkUniMed.stkUniMed = stkMoviCuerpo.Medida_Id
INNER  JOIN stkDepositos  ON stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id
Left Join conCentro1 On conCentro1.conCentro1 = venPediCuerpo.Centro1_Id
Left Join conCentro2 On conCentro2.conCentro2 = venPediCuerpo.Centro2_Id
WHERE 
stkRemiPendFact.CantidadPendiente > 0 AND 
stkRemitos.stkMoviCabe = @lIdentity
 

SELECT stkMoviSerie.stkMoviCabe , stkMoviSerie.Renglon, stkMoviSerie.Serie, stkMoviSerie.Cantidad / stkMoviCuerpo.Factor Cantidad,
	stkSerieVencimiento.Vencimiento
	FROM stkRemitos 
	inner join stkRemiPendFact ON stkRemitos.stkMoviCabe = stkRemiPendFact.stkMoviCabe
	INNER JOIN stkMoviSerie ON stkMoviSerie.stkMoviCabe = stkRemiPendFact.stkMoviCabe AND stkMoviSerie.Renglon = stkRemiPendFact.Renglon
	INNER JOIN stkMoviCuerpo ON stkMoviCuerpo.stkMoviCabe = stkMoviSerie.stkMoviCabe AND stkMoviCuerpo.Renglon = stkMoviSerie.Renglon
	Inner Join conAsientos On conAsientos.conAsientos = stkMoviCuerpo.stkMoviCabe
	inner join stkSerieVencimiento ON stkSerieVencimiento.Serie = stkMoviSerie.Serie And stkSerieVencimiento.Producto_Id = stkMoviCuerpo.Producto_Id And
		stkSerieVencimiento.Empresa_Id = conAsientos.Empresa_Id
	where 
	stkRemiPendFact.CantidadPendiente > 0 AND 
	stkRemitos.stkMoviCabe = @lIdentity

GO

-- venRemitosPendienteClieDatos '001',1,'PES',1
DROP Procedure venRemitosPendienteClieDatos
GO
CREATE Procedure venRemitosPendienteClieDatos
(
	@Cliente_Id VarChar(15),
	@Sucursal Int ,
	@Moneda_Id VarChar(5),
	@Empresa_Id Int

)
AS
select venClientes.Cliente_Id, venClientes.RazonSocial, venclieHabitual.Sucursal,
	'  ' SubTipoMov_Id, '  ' as DescripcionSubTipoMov, 
	Convert(DateTime, null) FechaPedido,
	genMonedas.Moneda_Id,genMonedas.Descripcion as DescripcionMonedas, 
	genMonedasFact.Moneda_Id MonedaFacturacion,
	genMonedasFact.Descripcion DescripcionMonFacturacion, 
	venCondPago.CondPagoCli_Id, venCondPago.Descripcion as DescripcionCondPago, 
	venListasPrecios.ListaPrecio_Id, venListasPrecios.Descripcion as DescripcionListasPrecios, venVendedores.Vendedor_Id, 
	venVendedores.Nombre as DescripcionVendedores, venFormaEntrega.FormaEntrega_Id,
	venFormaEntrega.RazonSocial as DescripcionFormaEntrega, ' ' Estado,
	' ' Observaciones, 0.00 Dato1, 0.00 Dato2, 0.00 Dato3, 
	'  ' CliOrdenCompra, ' ' venNroPedido, 
	' ' TipoPrecioForm, Cast(0 as Bit) CongelaCambio, 0.00 Cambio,
	1.00 CambioMonedaOriginal,
	'  ' Incoterm_Id, ' ' as DescripcionIncoterm,
	venClieHabitual.MetodoDePago MetodoPago , venClieHabitual.C_UsoCFDI UsoCfdi, UsosCfdi.Descripcion as DescripcionUsoCfdi, 
	Metodos.Descripcion as DescripcionMetodoPago,  Cast(1 as Bit) as Timbrar, 
	' ' Segmento_IdFact , 0 Segmento1NFact , 0 Segmento2NFact , 0 Segmento3NFact , 0 Segmento4NFact ,
	' ' Segmento1CFact , ' ' Segmento2CFact, ' ' Segmento3CFact, ' ' Segmento4CFact,	
	' ' as ArchivoPDF, ' ' as ArchivoXML, 0.0 as Total, dbo.FechaActual() as FechaNueva
from venClientes INNER JOIN venClieHabitual ON
	venClientes.genEntidades = venClieHabitual.genEntidades AND
	venClieHabitual.Sucursal = @Sucursal
LEFT JOIN genMonedas  ON (genMonedas.Moneda_Id = @Moneda_Id)
Left Join genMonedas genMonedasFact On genMonedasFact.Moneda_Id = @Moneda_Id
LEFT JOIN venCondPago  ON (venCondPago.venCondPago = venClieHabitual.CondPagoCli_Id)
LEFT JOIN venListasPrecios  ON (venListasPrecios.venListasPrecios = venClieHabitual.ListaPrecio_Id)
LEFT JOIN venVendedores  ON (venVendedores.venVendedores = venClieHabitual.Vendedor_Id)
LEFT JOIN venFormaEntrega  ON (venFormaEntrega.venFormaEntrega = venClieHabitual.FormaEntrega_Id)
LEFT JOIN genEntidadesBasicasValor as UsosCfdi ON
UsosCfdi.Entidad_Id = 4 AND 
UsosCfdi.Dominio_Id = 'MX' AND 
UsosCfdi.Clave = venClieHabitual.C_UsoCFDI
LEFT JOIN genEntidadesBasicasValor as Metodos ON
Metodos.Entidad_Id = 6 AND 
Metodos.Dominio_Id = 'MX' AND 
Metodos.Clave = venClieHabitual.MetodoDePago
WHERE 
venClientes.Cliente_Id = @Cliente_Id

SELECT CAST(0 as bit) as Marca, 
	stkRemitos.stkMoviCabe, conAsientos.Fecha,
	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C
		, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N
		, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) AS Remito,
	dbo.Segmento(venPediSegmentos.Segmento_Id, venPediSegmentos.Segmento1C, venPediSegmentos.Segmento2C
		, venPediSegmentos.Segmento3C, venPediSegmentos.Segmento4C, venPediSegmentos.Segmento1N
		, venPediSegmentos.Segmento2N, venPediSegmentos.Segmento3N, venPediSegmentos.Segmento4N) AS Pedido,
		genMonedas.Moneda_Id,
	isnull(SUM(venpediCuerpo.PrecioVenta * stkRemiPendFact.CantidadPendiente), 
		SUM(stkMoviCuerpo.PrecioOriginal * stkRemiPendFact.CantidadPendiente/ stkMoviCuerpo.Factor)) as Monto

from stkRemitos INNER JOIN stkRemiPendFact ON 
stkRemitos.stkMoviCabe = stkRemiPendFact.stkMoviCabe 
INNER JOIN conAsientos ON 
conAsientos.conAsientos = stkRemitos.stkMoviCabe 
INNER JOIN genAsiSegmentos ON
genAsiSegmentos.Asiento_Id =conAsientos.conAsientos
INNER JOIN venClientes on 
venClientes.genEntidades = stkRemitos.Cliente_Id
INNER JOIN stkMoviCuerpo ON stkMoviCuerpo.stkMoviCabe = stkRemiPendFact.StkmoviCabe and 
		stkMoviCuerpo.Renglon  = stkRemiPendFact.Renglon
LEFT JOIN ( venPediRemitidos INNER JOIN venPedidos ON 
venPedidos.venPedidos = venPediRemitidos.venPedidos
INNER JOIN venPediCuerpo ON
venPediCuerpo.venPedidos = venPediRemitidos.venPedidos AND
venPediCuerpo.Renglon_Pe = venPediRemitidos.Renglon_Pe
inner join venPediSegmentos ON
venPediSegmentos.venPedidos = venPedidos.venPedidos)
ON
venPediRemitidos.stkMoviCabe = stkRemiPendFact.stkMoviCabe and 
venPediRemitidos.Renglon = stkRemiPendFact.Renglon
INNER JOIN genMonedas ON 
genMonedas.genMonedas = ISNULL(venPedidos.Moneda_id, conasientos.Moneda_Id)
Where
	stkRemiPendFact.CantidadPendiente > 0 and
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 AND
	conAsientos.Empresa_Id = @Empresa_Id and 
	venClientes.Cliente_Id = @Cliente_Id and 
	genMonedas.Moneda_Id = @Moneda_Id
GROUP BY stkRemitos.stkMoviCabe, conAsientos.Fecha,
		genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C
		, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N
		, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
		venPediSegmentos.Segmento_Id, venPediSegmentos.Segmento1C, venPediSegmentos.Segmento2C
		, venPediSegmentos.Segmento3C, venPediSegmentos.Segmento4C, venPediSegmentos.Segmento1N
		, venPediSegmentos.Segmento2N, venPediSegmentos.Segmento3N, venPediSegmentos.Segmento4N,
		genMonedas.Moneda_Id

-- solo para Taer las Estructura
Exec venFacturacionRemitoCuerpo 0

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venFormaEntrega.sql*/
DROP PROCEDURE venFormaEntregaGuardar
GO
CREATE PROCEDURE venFormaEntregaGuardar
(
@pFormaEntrega_id varchar(3),
@pFormaEntrega_id_Nuevo varchar(3),
@pEmpresa_Id int = NULL,
@pRazonSocial varchar(35),
@pDireccion varchar(35),
@pLocalidad varchar(35),
@pProvincia_Id varchar(5) = NULL,
@pPais_Id smallint = NULL,
@pTelefono varchar(35),
@pCuit varchar(25),
@pCondFisc_id varchar(5) = NULL,
@pSeguro money,
@pContacto varchar(20),
@pCargo varchar(20),
@pEmail varchar(80) = NULL,
@pExcluirDelReparto bit,
@pInactivo bit,
@pUsuario_Id int,
@pPosteado bit, 
@pUsaCartaPorte Bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM venFormaEntrega WHERE (FormaEntrega_id = @pFormaEntrega_id)))
BEGIN 
	UPDATE venFormaEntrega
	SET		@lIdentidad = venFormaEntrega,
		FormaEntrega_id = @pFormaEntrega_id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		RazonSocial = @pRazonSocial,
		Direccion = @pDireccion,
		Localidad = @pLocalidad,
		Provincia_Id = dbo.FuncFKgenProvincias(@pProvincia_Id),
		Pais_Id = dbo.FuncFKgenPaises(@pPais_Id),
		Telefono = @pTelefono,
		Cuit = @pCuit,
		CondFisc_id = dbo.FuncFKcomCondFiscal(@pCondFisc_id),
		Seguro = @pSeguro,
		Contacto = @pContacto,
		Cargo = @pCargo,
		Email = @pEmail,
		ExcluirDelReparto = @pExcluirDelReparto,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado, 
		UsaCartaPorte = @pUsaCartaPorte
	WHERE (FormaEntrega_id = @pFormaEntrega_id)
END 
ELSE 
BEGIN 
	INSERT INTO venFormaEntrega
	(
		FormaEntrega_id,
		Empresa_Id,
		RazonSocial,
		Direccion,
		Localidad,
		Provincia_Id,
		Pais_Id,
		Telefono,
		Cuit,
		CondFisc_id,
		Seguro,
		Contacto,
		Cargo,
		Email,
		ExcluirDelReparto,
		Inactivo,
		Usuario_Id,
		Posteado, 
		UsaCartaPorte

	)
	VALUES 
	(
		@pFormaEntrega_id,
		@pEmpresa_Id,
		@pRazonSocial,
		@pDireccion,
		@pLocalidad,
		dbo.FuncFKgenProvincias(@pProvincia_Id),
		dbo.FuncFKgenPaises(@pPais_Id),
		@pTelefono,
		@pCuit,
		dbo.FuncFKcomCondFiscal(@pCondFisc_id),
		@pSeguro,
		@pContacto,
		@pCargo,
		@pEmail,
		@pExcluirDelReparto,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado, 
		@pUsaCartaPorte
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE venFormaEntregaDatos
GO
CREATE PROCEDURE venFormaEntregaDatos
(
@pFormaEntrega_id varchar(3)
)
AS
SET NOCOUNT ON 

SELECT venFormaEntrega.venFormaEntrega, venFormaEntrega.FormaEntrega_Id, venFormaEntrega.Empresa_Id, Cast( Case When venFormaEntrega.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	venFormaEntrega.RazonSocial, venFormaEntrega.Direccion, venFormaEntrega.Localidad, genProvincias.Provincia_Id,
	genProvincias.Descripcion as DescripcionProvincias, genPaises.Pais_Id, genPaises.Descripcion as DescripcionPaises, venFormaEntrega.Telefono,
	venFormaEntrega.Cuit, comCondFiscal.CondFiscal_Id CondFisc_Id, comCondFiscal.Descripcion as DescripcionCondFiscal, venFormaEntrega.Seguro,
	venFormaEntrega.Contacto, venFormaEntrega.Cargo, venFormaEntrega.Email, venFormaEntrega.ExcluirDelReparto,
	venFormaEntrega.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, venFormaEntrega.Posteado, venFormaEntrega.UsaCartaPorte
FROM venFormaEntrega 
LEFT JOIN genProvincias  ON (genProvincias.genProvincias = venFormaEntrega.Provincia_Id)
LEFT JOIN genPaises  ON (genPaises.genPaises = venFormaEntrega.Pais_Id)
LEFT JOIN comCondFiscal  ON (comCondFiscal.comCondFiscal = venFormaEntrega.CondFisc_id)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = venFormaEntrega.Usuario_Id)
WHERE (FormaEntrega_id = @pFormaEntrega_id)
 


  Declare @pidentity bigint= dbo.FuncFKvenFormaEntrega(@pFormaEntrega_id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'venFormaEntrega'
 RETURN @@Error 

GO

DROP PROCEDURE venFormaEntregaEliminar
GO
CREATE PROCEDURE venFormaEntregaEliminar
(
@pFormaEntrega_id varchar(3) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venFormaEntrega 
WHERE (FormaEntrega_id = @pFormaEntrega_id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKvenFormaEntrega
GO

CREATE FUNCTION FuncFKvenFormaEntrega
(
@pFormaEntrega_id varchar (3)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = venFormaEntrega FROM venFormaEntrega WHERE 
	FormaEntrega_id = @pFormaEntrega_id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venGeneraRemitoFactura.sql*/
--exec venGeneraRemitoFactura 1,'Reparto',7431,0,0,0,'0001','','','',1,1
--exec venGeneraRemitoFactura @pEmpresa_Id=1,@pSegmento_Id='REPARTO',@pSegmento1N=7431,@pSegmento2N=0,@pSegmento3N=0,@pSegmento4N=0,@pSegmento1C='0001',@pSegmento2C='',@pSegmento3C='',@pSegmento4C='',@pSoloRemito=1,@pConRemito=1
Drop procedure venGeneraRemitoFactura
Go

Create procedure venGeneraRemitoFactura
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20),
@pSoloRemito bit,
@pConRemito bit
)
As

Declare @pIdentity int = (Select venReparto From venRepaSegmentos
	Where
	venRepaSegmentos.Empresa_Id = @pEmpresa_Id and 
	venRepaSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	venRepaSegmentos.Segmento1N = @pSegmento1N and 
	venRepaSegmentos.Segmento2N = @pSegmento2N and 
	venRepaSegmentos.Segmento3N = @pSegmento3N and 
	venRepaSegmentos.Segmento4N = @pSegmento4N and 
	venRepaSegmentos.Segmento1C = @pSegmento1C and 
	venRepaSegmentos.Segmento2C = @pSegmento2C and 
	venRepaSegmentos.Segmento3C = @pSegmento3C and 
	venRepaSegmentos.Segmento4C = @pSegmento4C)

Select venReparto.venReparto, '' as Segmento_Id_Fact, 0 as Segmento1N_Fact,
	0 as Segmento2N_Fact,0 as Segmento3N_Fact,0 as Segmento4N_Fact, '' as  Segmento1C_Fact, 
	 '' as Segmento2C_Fact, '' as Segmento3C_Fact, '' as  Segmento4C_Fact,
	 	 '' as  Segmento_Id_Rem, 0 as Segmento1N_Rem,
	0 as Segmento2N_Rem,0 as Segmento3N_Rem,0 as Segmento4N_Rem, '' as  Segmento1C_Rem, 
	 '' as Segmento2C_Rem, '' as Segmento3C_Rem,  '' as Segmento4C_Rem,
venRepaSegmentos.Empresa_Id, genSegmentos.Segmento_Id, venRepaSegmentos.Segmento1N,
	venRepaSegmentos.Segmento2N,venRepaSegmentos.Segmento3N,venRepaSegmentos.Segmento4N, venRepaSegmentos.Segmento1C, 
	venRepaSegmentos.Segmento2C,venRepaSegmentos.Segmento3C, venRepaSegmentos.Segmento4C,
	venReparto.Cerrado, venReparto.Automatico, ' ' RemitoFactura, stkDepositos.Deposito_Id, stkDepositos.Descripcion DescripcionDeposito,
	' ' as Observaciones
From venReparto
Inner Join venRepaSegmentos On venRepaSegmentos.venReparto = venReparto.venReparto
Inner Join genSegmentos On genSegmentos.genSegmentos = venRepaSegmentos.Segmento_Id
Inner Join stkDepositos On stkDepositos.stkDepositos = venReparto.Deposito_Id
Where venReparto.venReparto = @pIdentity

If @pConRemito = 1
	-- Si genero remito traigo lo pendiente de remitir --
	Select venRepaPedi.Renglon_Rep,
	venSubTipoMov.SubTipoMov_Id, venClientes.Cliente_Id, venPedidos.Sucursal, stkDepositos.Deposito_Id, stkProductos.Producto_Id,
	venRepaPedi.CantidadForm, stkUniMed.Medida_Id, venPediCuerpo.Factor, venRepaPedi.CantidadAlternaForm, stkMedAlterna.Medida_Id MedidaAlterna,
	venPedidos.venPedidos, venPediCuerpo.Renglon_Pe, venPediCuerpo.PrecioVenta, venPediCuerpo.PrecioForm, venPediCuerpo.PrecioLista, venPediCuerpo.PrecioSinIva,
	venPediCuerpo.Bonificacion, venPediCuerpo.Observaciones, venPediCuerpo.FechaEntrega, venPediCuerpo.TipoPrecio,
	dbo.Segmento(venPediSegmentos.Segmento_Id, venPediSegmentos.Segmento1C, venPediSegmentos.Segmento2C, venPediSegmentos.Segmento3C,
	venPediSegmentos.Segmento4C, venPediSegmentos.Segmento1N, venPediSegmentos.Segmento2N, venPediSegmentos.Segmento3N,
	venPediSegmentos.Segmento4N) Pedido, conCentro1.Centro1_Id, conCentro2.Centro2_Id, Cast(0 As bigint) stkMoviCabe, 0 Renglon
	From venReparto
	Inner Join stkDepositos On stkDepositos.stkDepositos = venReparto.Deposito_Id
	Inner Join venRepaPedi On venRepaPedi.venReparto = venReparto.venReparto
	Inner Join venPedidos On venRepaPedi.venPedidos = venPedidos.venPedidos
	Inner Join venPediSegmentos On venPediSegmentos.venPedidos = venPedidos.venPedidos
	Inner Join venClientes On venClientes.genEntidades = venPedidos.Cliente_Id
	Inner Join venFormaEntrega On venFormaEntrega.venFormaEntrega = venPedidos.FormaEntrega_Id
	Inner Join venSubTipoMov On venSubTipoMov.venSubTipoMov = venPedidos.SubTipoMov_Id
	Inner Join venPediCuerpo On venPediCuerpo.venPedidos = venRepaPedi.venPedidos And venPediCuerpo.Renglon_Pe = venRepaPedi.Renglon_Pe
	Inner Join stkProductos On stkProductos.stkProductos = venPediCuerpo.Producto_Id
	Inner Join stkUniMed On stkUniMed.stkUniMed = venPediCuerpo.Medida_Id
	Left Join stkUniMed stkMedAlterna On stkMedAlterna.stkUniMed = stkProductos.MedidaAlterna
	Left Join conCentro1 On conCentro1.conCentro1 = venPediCuerpo.Centro1_Id
	Left Join conCentro2 On conCentro2.conCentro2 = venPediCuerpo.Centro2_Id
	Where venReparto.venReparto = @pIdentity And venReparto.Cerrado = 0 And venRepaPedi.Remitido = 0 And
	venRepaPedi.CantidadForm > 0 and  venPediCuerpo.Pendiente = 1
	Order By venPedidos.venPedidos, venPediCuerpo.Renglon_Pe
Else
	-- Si no genero remito traigo lo remitido y no facturado --
	Select venRepaPedi.Renglon_Rep,
	venSubTipoMov.SubTipoMov_Id, venClientes.Cliente_Id, venPedidos.Sucursal, stkDepositos.Deposito_Id, stkProductos.Producto_Id,
	venRepaPedi.CantidadForm, stkUniMed.Medida_Id, venPediCuerpo.Factor, venRepaPedi.CantidadAlternaForm, stkMedAlterna.Medida_Id MedidaAlterna,
	venPedidos.venPedidos, venPediCuerpo.Renglon_Pe, venPediCuerpo.PrecioVenta, venPediCuerpo.PrecioForm, venPediCuerpo.PrecioLista, venPediCuerpo.PrecioSinIva,
	venPediCuerpo.Bonificacion, venPediCuerpo.Observaciones, venPediCuerpo.FechaEntrega, venPediCuerpo.TipoPrecio,
	dbo.Segmento(venPediSegmentos.Segmento_Id, venPediSegmentos.Segmento1C, venPediSegmentos.Segmento2C, venPediSegmentos.Segmento3C,
	venPediSegmentos.Segmento4C, venPediSegmentos.Segmento1N, venPediSegmentos.Segmento2N, venPediSegmentos.Segmento3N,
	venPediSegmentos.Segmento4N) Pedido, conCentro1.Centro1_Id, conCentro2.Centro2_Id, venPediRemitidos.stkMoviCabe, venPediRemitidos.Renglon
	From venReparto
	Inner Join stkDepositos On stkDepositos.stkDepositos = venReparto.Deposito_Id
	Inner Join venRepaPedi On venRepaPedi.venReparto = venReparto.venReparto
	Inner Join venPedidos On venRepaPedi.venPedidos = venPedidos.venPedidos
	Inner Join venPediSegmentos On venPediSegmentos.venPedidos = venPedidos.venPedidos
	Inner Join venClientes On venClientes.genEntidades = venPedidos.Cliente_Id
	Inner Join venFormaEntrega On venFormaEntrega.venFormaEntrega = venPedidos.FormaEntrega_Id
	Inner Join venSubTipoMov On venSubTipoMov.venSubTipoMov = venPedidos.SubTipoMov_Id
	Inner Join venPediCuerpo On venPediCuerpo.venPedidos = venRepaPedi.venPedidos And venPediCuerpo.Renglon_Pe = venRepaPedi.Renglon_Pe
	Inner Join stkProductos On stkProductos.stkProductos = venPediCuerpo.Producto_Id
	Inner Join stkUniMed On stkUniMed.stkUniMed = venPediCuerpo.Medida_Id
	Inner Join venPediRemitidos On venPediRemitidos.venPedidos = venRepaPedi.venPedidos And venPediRemitidos.Renglon_Pe = venRepaPedi.Renglon_Pe And
		venPediRemitidos.venReparto = venReparto.venReparto
	Left Join stkUniMed stkMedAlterna On stkMedAlterna.stkUniMed = stkProductos.MedidaAlterna
	Left Join conCentro1 On conCentro1.conCentro1 = venPediCuerpo.Centro1_Id
	Left Join conCentro2 On conCentro2.conCentro2 = venPediCuerpo.Centro2_Id
	Where 
	venReparto.venReparto = @pIdentity And 
	venReparto.Cerrado = 0 And
	venRepaPedi.CantidadForm > 0 And venRepaPedi.Facturado = 0 And venRepaPedi.Remitido = 1 and 
	venPediCuerpo.CantidadFacturada < venPediCuerpo.CantidadRemitida
	Order By venPedidos.venPedidos, venPediCuerpo.Renglon_Pe


If @pSoloRemito = 0
	-- Se genera remito as? que traigo las monedas de facturaci?n --
	Select Distinct 0 venPedidos, genMonedas.Moneda_Id, genMonedas.Descripcion DecripcionMoneda,
	--dbo.func_TipoCambio(venPedidos.MonedaFacturacion, dbo.FechaActual(), venReparto.Empresa_Id) Cambio
	dbo.func_TipoCambio(venPedidos.Moneda_Id, dbo.FechaActual(), venReparto.Empresa_Id) Cambio
	From venReparto
	Inner Join venRepaPedi On venRepaPedi.venReparto = venReparto.venReparto
	Inner Join venPedidos On venRepaPedi.venPedidos = venPedidos.venPedidos
	Inner Join venSubTipoMov On venSubTipoMov.venSubTipoMov = venPedidos.SubTipoMov_Id
	--Inner Join genMonedas On genMonedas.genMonedas = venPedidos.MonedaFacturacion
	Inner Join genMonedas On genMonedas.genMonedas = venPedidos.Moneda_Id
	Inner Join genEmpresas On genEmpresas.genEmpresas = venReparto.Empresa_Id
	Where venReparto.venReparto = @pIdentity And venReparto.Cerrado = 0 And --venRepaPedi.Remitido = 0 And
	--venRepaPedi.CantidadForm > 0 And venPedidos.MonedaFacturacion <> genEmpresas.Moneda_Id
	venRepaPedi.CantidadForm > 0 And venPedidos.Moneda_Id <> genEmpresas.Moneda_Id
Else
	-- Se genera solo el remito as? que traigo las monedas de los pedidos --
	Select Distinct 0 venPedidos, genMonedas.Moneda_Id, genMonedas.Descripcion DecripcionMoneda,
	dbo.func_TipoCambio(venPedidos.Moneda_Id, dbo.FechaActual(), venReparto.Empresa_Id) Cambio
	From venReparto
	Inner Join venRepaPedi On venRepaPedi.venReparto = venReparto.venReparto
	Inner Join venPedidos On venRepaPedi.venPedidos = venPedidos.venPedidos
	Inner Join venSubTipoMov On venSubTipoMov.venSubTipoMov = venPedidos.SubTipoMov_Id
	Inner Join genMonedas On genMonedas.genMonedas = venPedidos.Moneda_Id
	Inner Join genEmpresas On genEmpresas.genEmpresas = venReparto.Empresa_Id
	Where venReparto.venReparto = @pIdentity And venReparto.Cerrado = 0 And --venRepaPedi.Remitido = 0 And
	venRepaPedi.CantidadForm > 0 And venPedidos.Moneda_Id <> genEmpresas.Moneda_Id

If  @pConRemito = 1

	SELECT venRepaPediSerie.venReparto, venRepaPediSerie.Renglon_Rep, venRepaPediSerie.venPedidos, 
		venRepaPediSerie.Renglon_Pe, 
		venRepaPediSerie.Serie, isnull(venRepaPediSerie.Cantidad, venRepaPediSerie.Cantidad) as Cantidad, 
		stkSerieVencimiento.Vencimiento, stkUbicaciones.Ubicacion_Id
	FROM 
	venRepaPediSerie 
	INNER JOIN venReparto ON venReparto.venReparto = venRepaPediSerie.venReparto
	INNER JOIN venRepaPedi ON venReparto.venReparto = venRepaPedi.venReparto  and 
							  venRepaPedi.Renglon_Rep = venRepaPediSerie.Renglon_Rep
	INNER JOIN venPediCuerpo ON venPediCuerpo.venPedidos = venRepaPediSerie.venPedidos and 
								venPediCuerpo.Renglon_Pe = venRepaPediSerie.Renglon_pe 
	LEFT JOIN stkSerieVencimiento ON stkSerieVencimiento.Serie = venRepaPediSerie.Serie and 
						stkSerieVencimiento.Empresa_Id = venReparto.Empresa_Id and
						stkSerieVencimiento.Producto_Id = venPediCuerpo.Producto_Id
	LEFT JOIN (venRepaPediSerieUbi INNER JOIN stkUbicaciones ON 
				venRepaPediSerieUbi.Ubicacion_Id = stkUbicaciones.stkUbicaciones) ON 
			venRepaPediSerieUbi.venReparto  = venRepaPediSerie.venReparto AND
			venRepaPediSerieUbi.Renglon_Rep =venRepaPediSerie.Renglon_Rep AND 
			venRepaPediSerieUbi.venPedidos = venRepaPediSerie.venPedidos AND
			venRepaPediSerieUbi.Renglon_Pe = venRepaPediSerie.Renglon_Pe AND
			venRepaPediSerieUbi.Serie = venRepaPediSerie.Serie
	WHERE 
	venRepaPediSerie.venReparto = @pIdentity And venReparto.Cerrado = 0 And venRepaPedi.Remitido = 0 And
		venRepaPedi.CantidadForm > 0
ELSE

	SELECT venRepaPediSerie.venReparto, venRepaPediSerie.Renglon_Rep, venRepaPediSerie.venPedidos, 
		venRepaPediSerie.Renglon_Pe, 
		venRepaPediSerie.Serie, isnull(venRepaPediSerie.Cantidad, venRepaPediSerie.Cantidad) as Cantidad, 
		stkSerieVencimiento.Vencimiento, stkUbicaciones.Ubicacion_Id
	FROM 
	venRepaPediSerie 
	INNER JOIN venReparto ON venReparto.venReparto = venRepaPediSerie.venReparto
	INNER JOIN venRepaPedi ON venReparto.venReparto = venRepaPedi.venReparto  and 
							  venRepaPedi.Renglon_Rep = venRepaPediSerie.Renglon_Rep
	INNER JOIN venPediCuerpo ON venPediCuerpo.venPedidos = venRepaPediSerie.venPedidos and 
								venPediCuerpo.Renglon_Pe = venRepaPediSerie.Renglon_pe 
	LEFT JOIN stkSerieVencimiento ON stkSerieVencimiento.Serie = venRepaPediSerie.Serie and 
						stkSerieVencimiento.Empresa_Id = venReparto.Empresa_Id and
						stkSerieVencimiento.Producto_Id = venPediCuerpo.Producto_Id
	LEFT JOIN (venRepaPediSerieUbi INNER JOIN stkUbicaciones ON 
				venRepaPediSerieUbi.Ubicacion_Id = stkUbicaciones.stkUbicaciones) ON 
			venRepaPediSerieUbi.venReparto  = venRepaPediSerie.venReparto AND
			venRepaPediSerieUbi.Renglon_Rep =venRepaPediSerie.Renglon_Rep AND 
			venRepaPediSerieUbi.venPedidos = venRepaPediSerie.venPedidos AND
			venRepaPediSerieUbi.Renglon_Pe = venRepaPediSerie.Renglon_Pe AND
			venRepaPediSerieUbi.Serie = venRepaPediSerie.Serie
	Where venReparto.venReparto = @pIdentity And venReparto.Cerrado = 0 And
		venRepaPedi.CantidadForm > 0 And venRepaPedi.Facturado = 0 And venRepaPedi.Remitido = 1



EXEC venRepaUbicacionDatos @pIdentity

Go

	
		
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venGraVentas.sql*/
--- venGraVentas '20180101','20190930',1
--- venGraVentas '20190101','20190930',1
--- venGraVentas '20190401','20190430',1
DROP PROCEDURE venGraVentas
GO
CREATE PROCEDURE venGraVentas
(
	@FechaDesde DateTime,
	@FechaHasta DateTime,
	@Empresa_Id Int	
)


as

SELECT @FechaDesde as FechaDesde, @FechaHasta FechaHasta

IF month(@FechaDesde) =month(@FechaHasta) and 
	year(@FechaDesde) =year(@FechaHasta) 

SELECT STR(day(conAsientos.Fecha),2) as Periodo, 
	'Ventas' as Serie,
	Convert(Numeric(18,2),SUM(venTipoMov.Signo * venMovimientos.Importe * conAsientos.Cambio)) AS Monto
FROM conAsientos INNER JOIN venMovimientos ON 
	conAsientos.conAsientos =venMovimientos.venMovimientos
	INNER JOIN venTipoMov ON
	venTipoMov.venTipoMov = venMovimientos.venTipomov
	INNER JOIN venSubTipomov ON 
	venSubTipomov.venSubTipomov = venMovimientos.venSubTipoMov_Id
WHERE
	conAsientos.Anulado = 0 AND
	conAsientos.Posteado = 1 and
	conAsientos.Empresa_Id = @Empresa_Id AND
	conAsientos.Fecha between @FechaDesde And  @FechaHasta and
	venSubTipomov.AfectaEstadistica = 1
	GROUP BY day(conAsientos.Fecha)
UNION ALL
SELECT STR(day(conAsientos.Fecha),2) as Periodo, 
	'Cobranza' as Serie,
	Convert(Numeric(18,2),SUM(-venTipoMov.Signo * venMovimientos.Importe * conAsientos.Cambio)) AS Monto
FROM conAsientos INNER JOIN venMovimientos ON 
	conAsientos.conAsientos =venMovimientos.venMovimientos
	INNER JOIN venTipoMov ON
	venTipoMov.venTipoMov = venMovimientos.venTipomov
	INNER JOIN venSubTipomov ON 
	venSubTipomov.venSubTipomov = venMovimientos.venSubTipoMov_Id
WHERE
	conAsientos.Anulado = 0 AND
	conAsientos.Posteado = 1 and
	conAsientos.Empresa_Id = @Empresa_Id AND
	conAsientos.Fecha between @FechaDesde And  @FechaHasta and
	venTipoMov.venTipoMov IN('C' ,'N')
	GROUP BY day(conAsientos.Fecha)
UNION ALL
SELECT STR(day(venpedidos.Fecha),2) as Periodo, 
	'Pedidos' as Serie,
	Convert(Numeric(18,2),SUM(venPedidos.ImporteTotal * dbo.func_TipoCambio(venPedidos.Moneda_Id, venPedidos.Fecha, venPedidos.Empresa_Id) )) AS Monto
FROM venPedidos 
WHERE
	venpedidos.Estado != 'R' AND 
	venpedidos.Posteado = 1 and
	venpedidos.Empresa_Id = @Empresa_Id AND
	venpedidos.Fecha between @FechaDesde And  @FechaHasta 
	GROUP BY day(venpedidos.Fecha)


ORDER BY 1,2

ELSE
begin
IF datediff(MONTH,@FechaDesde,@FechaHasta) < 12
 begin
SELECT STR(year(conAsientos.Fecha),4)+'-'+STR(month(conAsientos.Fecha),2) as Periodo, 
	'Ventas' as Serie,
	Convert(Numeric(18,2),SUM(venTipoMov.Signo * venMovimientos.Importe * conAsientos.Cambio)) AS Monto
FROM conAsientos INNER JOIN venMovimientos ON 
	conAsientos.conAsientos =venMovimientos.venMovimientos
	INNER JOIN venTipoMov ON
	venTipoMov.venTipoMov = venMovimientos.venTipomov
	INNER JOIN venSubTipomov ON 
	venSubTipomov.venSubTipomov = venMovimientos.venSubTipoMov_Id
WHERE
	conAsientos.Anulado = 0 AND
	conAsientos.Posteado = 1 and
	conAsientos.Empresa_Id = @Empresa_Id AND
	conAsientos.Fecha between @FechaDesde And  @FechaHasta and
	venSubTipomov.AfectaEstadistica = 1
	GROUP BY year(conAsientos.Fecha),month(conAsientos.Fecha) 
UNION ALL
SELECT STR(year(conAsientos.Fecha),4)+'-'+STR(month(conAsientos.Fecha),2) as Periodo, 
	'Cobranza' as Serie,
	Convert(Numeric(18,2),SUM(-venTipoMov.Signo * venMovimientos.Importe * conAsientos.Cambio)) AS Monto
FROM conAsientos INNER JOIN venMovimientos ON 
	conAsientos.conAsientos =venMovimientos.venMovimientos
	INNER JOIN venTipoMov ON
	venTipoMov.venTipoMov = venMovimientos.venTipomov
	INNER JOIN venSubTipomov ON 
	venSubTipomov.venSubTipomov = venMovimientos.venSubTipoMov_Id
WHERE
	conAsientos.Anulado = 0 AND
	conAsientos.Posteado = 1 and
	conAsientos.Empresa_Id = @Empresa_Id AND
	conAsientos.Fecha between @FechaDesde And  @FechaHasta and
	venTipoMov.venTipoMov IN('C' ,'N')
	GROUP BY year(conAsientos.Fecha),month(conAsientos.Fecha) 
UNION ALL
SELECT STR(year(venPedidos.Fecha),4)+'-'+STR(month(venPedidos.Fecha),2) as Periodo, 
	'Pedidos' as Serie,
	Convert(Numeric(18,2),SUM(venPedidos.ImporteTotal * venpedidos.Cambio)) AS Monto
FROM venPedidos 
WHERE
	venpedidos.Estado != 'R' AND 
	venpedidos.Posteado = 1 and
	venpedidos.Empresa_Id = @Empresa_Id AND
	venpedidos.Fecha between @FechaDesde And  @FechaHasta 
	GROUP BY year(venPedidos.Fecha), month(venPedidos.Fecha)

ORDER BY 1,2


 end
else

SELECT STR(year(conAsientos.Fecha),4) as Periodo, 
	'Ventas' as Serie,
	Convert(Numeric(18,2), SUM(venTipoMov.Signo * venMovimientos.Importe * conAsientos.Cambio)) AS Monto
FROM conAsientos INNER JOIN venMovimientos ON 
	conAsientos.conAsientos =venMovimientos.venMovimientos
	INNER JOIN venTipoMov ON
	venTipoMov.venTipoMov = venMovimientos.venTipomov
	INNER JOIN venSubTipomov ON 
	venSubTipomov.venSubTipomov = venMovimientos.venSubTipoMov_Id
WHERE
	conAsientos.Anulado = 0 AND
	conAsientos.Posteado = 1 and
	conAsientos.Empresa_Id = @Empresa_Id AND
	conAsientos.Fecha between @FechaDesde And  @FechaHasta and
	venSubTipomov.AfectaEstadistica = 1
	GROUP BY year(conAsientos.Fecha)
UNION ALL
SELECT STR(year(conAsientos.Fecha),4) as Periodo, 
	'Cobranza' as Serie,
	Convert(Numeric(18,2), SUM(-venTipoMov.Signo * venMovimientos.Importe * conAsientos.Cambio)) AS Monto
FROM conAsientos INNER JOIN venMovimientos ON 
	conAsientos.conAsientos =venMovimientos.venMovimientos
	INNER JOIN venTipoMov ON
	venTipoMov.venTipoMov = venMovimientos.venTipomov
	INNER JOIN venSubTipomov ON 
	venSubTipomov.venSubTipomov = venMovimientos.venSubTipoMov_Id
WHERE
	conAsientos.Anulado = 0 AND
	conAsientos.Posteado = 1 and
	conAsientos.Empresa_Id = @Empresa_Id AND
	conAsientos.Fecha between @FechaDesde And  @FechaHasta and
	venTipoMov.venTipoMov IN('C' ,'N')
	GROUP BY year(conAsientos.Fecha)
UNION ALL
SELECT STR(year(venPedidos.Fecha),4) as Periodo, 
	'Pedidos' as Serie,
	Convert(Numeric(18,2),SUM(venPedidos.ImporteTotal * venpedidos.Cambio)) AS Monto
FROM venPedidos 
WHERE
	venpedidos.Estado != 'R' AND 
	venpedidos.Posteado = 1 and
	venpedidos.Empresa_Id = @Empresa_Id AND
	venpedidos.Fecha between @FechaDesde And  @FechaHasta 
	GROUP BY year(venPedidos.Fecha)
ORDER BY 1,2

end
	
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venImpuestos.sql*/
DROP PROCEDURE venImpuestosGuardar
GO
CREATE PROCEDURE venImpuestosGuardar
(
@pImpuesto_id varchar(5),
@pImpuesto_id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(35),
@pTipoImpuesto int = NULL,
@pCodigoFiscal varchar(20) = NULL,
@pUsaFormula bit,
@pFormulacalc varchar(max),
@pPorcentaje qPorcentaje,
@pFecha_Desde datetime,
@pFecha_Hasta datetime,
@pDepende_de varchar(3),
@pPorVencimiento bit,
@pCtaReversion varchar(25) = NULL,
@pCuenta_id varchar(25) = NULL,
@pCtaDifCambio varchar(25) = NULL,
@pImpuestoXProducto Sino,
@pInactivo bit,
@pUsuario_Id int,
@pPosteado bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM venImpuestos WHERE (Impuesto_id = @pImpuesto_id)))
BEGIN 
	UPDATE venImpuestos
	SET		@lIdentidad = venImpuestos,
		Impuesto_id = @pImpuesto_id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		TipoImpuesto = @pTipoImpuesto,
		CodigoFiscal = @pCodigoFiscal,
		UsaFormula = @pUsaFormula,
		Formulacalc = @pFormulacalc,
		Porcentaje = @pPorcentaje,
		Fecha_Desde = @pFecha_Desde,
		Fecha_Hasta = @pFecha_Hasta,
		Depende_de = @pDepende_de,
		PorVencimiento = @pPorVencimiento,
		CtaReversion = dbo.FuncFKconCuentas(@pCtaReversion),
		Cuenta_id = dbo.FuncFKconCuentas(@pCuenta_id),
		CtaDifCambio = dbo.FuncFKconCuentas(@pCtaDifCambio),
		ImpuestoXProducto = @pImpuestoXProducto,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (Impuesto_id = @pImpuesto_id)
END 
ELSE 
BEGIN 
	INSERT INTO venImpuestos
	(
		Impuesto_id,
		Empresa_Id,
		Descripcion,
		TipoImpuesto,
		CodigoFiscal,
		UsaFormula,
		Formulacalc,
		Porcentaje,
		Fecha_Desde,
		Fecha_Hasta,
		Depende_de,
		PorVencimiento,
		CtaReversion,
		Cuenta_id,
		CtaDifCambio,
		ImpuestoXProducto,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pImpuesto_id,
		@pEmpresa_Id,
		@pDescripcion,
		@pTipoImpuesto,
		@pCodigoFiscal,
		@pUsaFormula,
		@pFormulacalc,
		@pPorcentaje,
		@pFecha_Desde,
		@pFecha_Hasta,
		@pDepende_de,
		@pPorVencimiento,
		dbo.FuncFKconCuentas(@pCtaReversion),
		dbo.FuncFKconCuentas(@pCuenta_id),
		dbo.FuncFKconCuentas(@pCtaDifCambio),
		@pImpuestoXProducto,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE venImpuestosDatos
GO
CREATE PROCEDURE venImpuestosDatos
(
@pImpuesto_id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT venImpuestos.venImpuestos, venImpuestos.Impuesto_Id, venImpuestos.Empresa_Id, 
Cast( Case When venImpuestos.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	venImpuestos.Descripcion, venImpuestos.TipoImpuesto, impTipoImpuesto.Descripcion as DescripcionTipoImpuesto, 
	venImpuestos.CodigoFiscal,	venImpuestos.UsaFormula, venImpuestos.Formulacalc, venImpuestos.Porcentaje, venImpuestos.Fecha_Desde,
	venImpuestos.Fecha_Hasta, venImpuestos.Depende_de, 
	venImpuestos.PorVencimiento, 
	CtaReversion.Cuenta_Id AS CtaReversion, CtaReversion.Descripcion as DescripcionCtaReversion, 
	conCuentas.Cuenta_Id, 	conCuentas.Descripcion as DescripcionCuentas, 
	CtaDifCambio.Cuenta_Id as CtaDifCambio, CtaDifCambio.Descripcion as DescripcionCtaDifCambio, 
	venImpuestos.Inactivo, venImpuestos.ImpuestoXProducto, genUsuarios.Usuario_Id, 
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario, venImpuestos.Posteado
FROM venImpuestos 
LEFT JOIN impTipoImpuesto  ON (impTipoImpuesto.TipoImpuesto = venImpuestos.TipoImpuesto)
LEFT JOIN conCuentas AS CtaReversion  ON (CtaReversion.conCuentas = venImpuestos.CtaReversion)
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = venImpuestos.Cuenta_id)
LEFT JOIN conCuentas CtaDifCambio ON (CtaDifCambio.conCuentas = venImpuestos.CtaDifCambio)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = venImpuestos.Usuario_Id)
WHERE (Impuesto_id = @pImpuesto_id)
 


 Declare @pidentity bigint= dbo.FuncFKvenImpuestos(@pImpuesto_id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'venImpuestos'
 RETURN @@Error 

GO

DROP PROCEDURE venImpuestosEliminar
GO
CREATE PROCEDURE venImpuestosEliminar
(
@pImpuesto_id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venImpuestos 
WHERE (Impuesto_id = @pImpuesto_id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKvenImpuestos
GO

CREATE FUNCTION FuncFKvenImpuestos
(
@pImpuesto_id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = venImpuestos FROM venImpuestos WHERE 
	Impuesto_id = @pImpuesto_id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venIncoterm.sql*/
DROP PROCEDURE venIncotermGuardar
GO
CREATE PROCEDURE venIncotermGuardar
(
@pIncoterm_id char(3),
@pIncoterm_id_Nuevo char(3),
@pDescripcion varchar(50)
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM venIncoterm WHERE (Incoterm_id = @pIncoterm_id)))
BEGIN 
	UPDATE venIncoterm
	SET		@lIdentidad = venIncoterm_int,
		Incoterm_id = @pIncoterm_id_Nuevo,
		Descripcion = @pDescripcion
	WHERE (Incoterm_id = @pIncoterm_id)
END 
ELSE 
BEGIN 
	INSERT INTO venIncoterm
	(
		Incoterm_id,
		Descripcion
	)
	VALUES 
	(
		@pIncoterm_id,
		@pDescripcion
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE venIncotermDatos
GO
CREATE PROCEDURE venIncotermDatos
(
@pIncoterm_id char(3)
)
AS
SET NOCOUNT ON 

SELECT venIncoterm.venIncoterm_int, venIncoterm.Incoterm_id, venIncoterm.Descripcion
FROM venIncoterm 
WHERE (Incoterm_id = @pIncoterm_id)
 


  Declare @pidentity bigint= dbo.FuncFKvenIncoterm(@pIncoterm_id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'venIncoterm'
 RETURN @@Error 

GO

DROP PROCEDURE venIncotermEliminar
GO
CREATE PROCEDURE venIncotermEliminar
(
@pIncoterm_id char(3) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venIncoterm 
WHERE (Incoterm_id = @pIncoterm_id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKvenIncoterm
GO

CREATE FUNCTION FuncFKvenIncoterm
(
@pIncoterm_id char (3)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = venIncoterm_int FROM venIncoterm WHERE 
	Incoterm_id = @pIncoterm_id
  RETURN @pIdentity
END


GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venLibros.sql*/
DROP FUNCTION FuncFKvenLibros
GO

CREATE FUNCTION FuncFKvenLibros
(
@pLibro_Id varchar (10)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = venLibros FROM venLibros WHERE 
	Libro_Id = @pLibro_Id
  RETURN @pIdentity
END


GO

DROP PROCEDURE venLibrosGuardar
GO
CREATE PROCEDURE venLibrosGuardar
(
@pLibro_Id varchar(10),
@pEmpresa_Id int,
@pLibro_Id_Nuevo varchar(10),
@pDescripcion varchar(50)
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM venLibros WHERE (Libro_Id = @pLibro_Id)))
BEGIN 
	UPDATE venLibros
	SET		@lIdentidad = venLibros,
			Empresa_Id = @pEmpresa_Id,
			Libro_Id = @pLibro_Id_Nuevo,
			Descripcion = @pDescripcion
	WHERE (Libro_Id = @pLibro_Id) 
END 
ELSE 
BEGIN 
	INSERT INTO venLibros
	(
		Libro_Id,
		Descripcion,
		Empresa_Id
	)
	VALUES 
	(
		@pLibro_Id,
		@pDescripcion,
		@pEmpresa_Id
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE venLibrosDatos
GO
CREATE PROCEDURE venLibrosDatos
(
@pLibro_Id varchar(10)
)
AS
SET NOCOUNT ON 




SELECT venLibros.venLibros, venLibros.Libro_Id, venLibros.Libro_Id as Libro_Id_Nuevo, venLibros.Empresa_Id, venLibros.Descripcion, 
	CAST(CASE WHEN venLibros.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT) AS PTodasLasEmpresas
FROM venLibros 
WHERE (Libro_Id = @pLibro_Id)


 Declare @pidentity bigint = dbo.FuncFKvenLibros(@pLibro_Id)

 exec venlibrosColumnasDatos @pIdentity 
 exec venlibrosImpuestosDatos @pIdentity 
 exec venLibrosRetencionDatos @pIdentity 

 Exec genAtributosGeneralesIdentityDatos @pidentity, 'venLibros'
 RETURN @@Error 

GO

DROP PROCEDURE venLibrosEliminar
GO
CREATE PROCEDURE venLibrosEliminar
(
@pLibro_Id varchar(10)
)
AS
SET NOCOUNT ON 

DELETE FROM venLibros 
WHERE (Libro_Id = @pLibro_Id)
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venLibrosColumnas.sql*/
DROP PROCEDURE venLibrosColumnasDatos
GO
CREATE PROCEDURE venLibrosColumnasDatos
(
@pvenLibros int,
@pColumna int=null
)
AS
SET NOCOUNT ON 

SELECT venLibros.venLibros, venLibros.Libro_Id, venLibros.Descripcion as DescripcionLibros, venLibrosColumnas.Columna, venLibrosColumnas.Titulo
FROM venLibrosColumnas 
INNER JOIN venLibros  ON (venLibros.venLibros = venLibrosColumnas.venLibros) 
WHERE (venLibros.venLibros = @pvenLibros)
AND (Columna = isnull(@pColumna,Columna))
 
 RETURN @@Error 

 GO


DROP PROCEDURE venLibrosColumnasGuardar
GO

CREATE PROCEDURE venLibrosColumnasGuardar
(
@pvenLibros int,
@pColumna int,
@pTitulo varchar(20)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venLibrosColumnas WHERE (venLibros = @pvenLibros) AND (Columna = @pColumna)))
BEGIN 
	UPDATE venLibrosColumnas
	SET		Titulo = @pTitulo
	WHERE (venLibros = @pvenLibros) AND (Columna = @pColumna)
END 
ELSE 
BEGIN 
	INSERT INTO venLibrosColumnas
	(
		venLibros,
		Columna,
		Titulo
	)
	VALUES 
	(
		@pvenLibros,
		@pColumna,
		@pTitulo
	)
END 
 
 
 RETURN @@Error 

GO

DROP PROCEDURE venLibrosColumnasEliminar
GO
CREATE PROCEDURE venLibrosColumnasEliminar
(
@pvenLibros int,
@pColumna int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venLibrosColumnas 
WHERE (venLibros = @pvenLibros)
AND (Columna = ISNULL(@pColumna, Columna))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venLibrosImpuestos.sql*/
DROP PROCEDURE venLibrosImpuestosGuardar
GO
CREATE PROCEDURE venLibrosImpuestosGuardar
(
@pvenLibros int,
@pColumna int,
@pTipoRenglon varchar(2),
@pImpuesto_Id varchar(5)
)
AS
SET NOCOUNT ON 


	INSERT INTO venLibrosImpuestos
	(
		venLibros,
		Columna,
		TipoRenglon,
		Impuesto_Id
	)
	VALUES 
	(
		@pvenLibros,
		@pColumna,
		@pTipoRenglon,
		dbo.FuncFKvenImpuestos(@pImpuesto_Id)
	)

		
GO

DROP PROCEDURE venLibrosImpuestosDatos
GO
CREATE PROCEDURE venLibrosImpuestosDatos
(
@pvenLibros int,
@pColumna int=null,
@pTipoRenglon varchar(2)=null,
@pImpuesto_Id varchar(5)=null
)
AS
SET NOCOUNT ON 

SELECT venLibrosImpuestos.venLibros, venLibrosImpuestos.Columna,venLibrosImpuestos.TipoRenglon, venImpuestos.Impuesto_Id,
	venImpuestos.Descripcion as DescripcionImpuestos, impLibrosTiposRenglon.Descripcion as DescripcionTipoRenglon
FROM venLibrosImpuestos 
INNER JOIN venLibrosColumnas  ON (venLibrosColumnas.venLibros = venLibrosImpuestos.venLibros)  AND (venLibrosColumnas.Columna = venLibrosImpuestos.Columna)
INNER JOIN venImpuestos  ON (venImpuestos.venImpuestos = venLibrosImpuestos.Impuesto_Id)
INNER JOIN impLibrosTiposRenglon ON (venLibrosImpuestos.TipoRenglon =impLibrosTiposRenglon.TipoRenglon)
WHERE (venLibrosImpuestos.venLibros = @pvenLibros)
AND (venLibrosImpuestos.TipoRenglon =isnull(@pTipoRenglon,venLibrosImpuestos.TipoRenglon))
AND (venLibrosImpuestos.Columna = isnull(@pColumna,venLibrosImpuestos.Columna))
AND (venImpuestos.Impuesto_Id = isnull(@pImpuesto_Id,venImpuestos.Impuesto_Id ))

 RETURN @@Error 

GO

DROP PROCEDURE venLibrosImpuestosEliminar
GO

CREATE PROCEDURE venLibrosImpuestosEliminar
(
@pvenLibros int,
@pColumna int=null,
@pTipoRenglon varchar(2)=null,
@pImpuesto_Id varchar(5)=null
)
AS
SET NOCOUNT ON 

DELETE FROM venLibrosImpuestos 
WHERE (venLibros = @pvenLibros)
AND (Columna = isnull(@pColumna,Columna))
AND (TipoRenglon =isnull(@pTipoRenglon,TipoRenglon))
AND (Impuesto_Id = isnull(dbo.FuncFKvenImpuestos(@pImpuesto_Id),Impuesto_Id))

 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venLibrosRetencion.sql*/
DROP PROCEDURE venLibrosRetencionGuardar
GO
CREATE PROCEDURE venLibrosRetencionGuardar
(
@pvenLibros int,
@pColumna int,
@pCartera_Id varchar(5)
)
AS
SET NOCOUNT ON 

	INSERT INTO venLibrosRetencion
	(
		venLibros,
		Columna,
		Cartera_Id
	)
	VALUES 
	(
		@pvenLibros,
		@pColumna,
		dbo.FuncFKtesIdentifica(@pCartera_Id)
	)


GO

DROP PROCEDURE venLibrosRetencionDatos
GO
CREATE PROCEDURE venLibrosRetencionDatos
(
@pvenLibros int,
@pColumna int=null,
@pCartera_Id varchar(5)=null
)
AS
SET NOCOUNT ON 

SELECT venLibrosRetencion.venLibros,  venLibrosRetencion.Columna,  tesIdentifica.Cartera_Id,
	tesIdentifica.Descripcion as DescripcionIdentifica
FROM venLibrosRetencion 
INNER JOIN venLibrosColumnas  ON (venLibrosColumnas.venLibros = venLibrosRetencion.venLibros)  AND (venLibrosColumnas.Columna = venLibrosRetencion.Columna)
INNER JOIN tesIdentifica  ON (tesIdentifica.tesIdentifica = venLibrosRetencion.Cartera_Id)
WHERE (venLibrosRetencion.venLibros = @pvenLibros)
AND (venLibrosRetencion.Columna = isnull(@pColumna,venLibrosRetencion.Columna))
AND (tesIdentifica.Cartera_Id =isnull( @pCartera_Id,tesIdentifica.Cartera_Id))
 
 RETURN @@Error 

GO

DROP PROCEDURE venLibrosRetencionEliminar
GO
CREATE PROCEDURE venLibrosRetencionEliminar
(
@pvenLibros int,
@pColumna int=null,
@pCartera_Id varchar(5)=null
)
AS
SET NOCOUNT ON 

DELETE FROM venLibrosRetencion 
WHERE (venLibros = @pvenLibros)
AND (Columna = isnull(@pColumna,Columna))
AND (Cartera_Id =isnull( dbo.FuncFKtesIdentifica(@pCartera_Id),Cartera_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venLimiteCredito.sql*/
Drop Procedure venLimiteCreditoGuardar
GO
Create Procedure venLimiteCreditoGuardar
(
@pCliente_Id varchar(15), 
@pLimiteCredito numeric(18,2),
@pMoneda_Id VarChar(5)
) 
as
SET NOCOUNT ON

	update venClientes set LimiteCredito= @pLimiteCredito, 
		MonedaLimCred = dbo.FuncFKgenMonedas(@pMoneda_Id)
	Where 
	Cliente_Id=@pCliente_Id

	go


drop procedure venLimiteCreditoDatos
go
Create procedure venLimiteCreditoDatos
(
@pCliente_Ap varchar(15)
)
as
SET NOCOUNT ON
Select venClientes.Cliente_Id, venClientes.RazonSocial, 
venClientes.LimiteCredito, genMonedas.Moneda_Id, genMonedas.Descripcion DescripcionMoneda
From venClientes 
	left join genMonedas ON genMonedas.genMonedas =venClientes.MonedaLimCred
where 
venClientes.Cliente_Id=@pCliente_Ap
GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venListasPrecBoniRec.sql*/
DROP PROCEDURE venListasPrecBoniRecGuardar
GO
CREATE PROCEDURE venListasPrecBoniRecGuardar
(
@pListaPrecio_Id int,
@pNroBonifRecargo smallint,
@pNombre varchar(20),
@pFormula qFormula,
@pUsaCtasProducto Sino,
@pCtaBonificacion varChar(25),
@pCtaRecargo varChar(25)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venListasPrecBoniRec WHERE (ListaPrecio_Id = @pListaPrecio_Id) AND (NroBonifRecargo = @pNroBonifRecargo)))
BEGIN 
	UPDATE venListasPrecBoniRec
	SET Nombre = @pNombre,
		Formula = @pFormula,
		UsaCtasProducto = @pUsaCtasProducto,
		CtaBonificacion = dbo.FuncFKconCuentas(@pCtaBonificacion),
		CtaRecargo = dbo.FuncFKconCuentas(@pCtaRecargo)
	WHERE (ListaPrecio_Id = @pListaPrecio_Id) AND (NroBonifRecargo = @pNroBonifRecargo)
END 
ELSE 
BEGIN 
	INSERT INTO venListasPrecBoniRec
	(
		ListaPrecio_Id,
		NroBonifRecargo,
		Nombre,
		Formula,
		UsaCtasProducto,
		CtaBonificacion,
		CtaRecargo
	)
	VALUES 
	(
		@pListaPrecio_Id,
		@pNroBonifRecargo,
		@pNombre,
		@pFormula,
		@pUsaCtasProducto,
		dbo.FuncFKconCuentas(@pCtaBonificacion),
		dbo.FuncFKconCuentas(@pCtaRecargo)
	)
END 

GO

DROP PROCEDURE venListasPrecBoniRecDatos
GO
CREATE PROCEDURE venListasPrecBoniRecDatos
(
@pListaPrecio_Id varchar(5),
@pNroBonifRecargo smallint
)
AS
SET NOCOUNT ON 

SELECT venListasPrecios.venListasPrecios, venListasPrecios.ListaPrecio_Id, venListasPrecBoniRec.NroBonifRecargo, venListasPrecBoniRec.Nombre, venListasPrecBoniRec.Formula,
venListasPrecBoniRec.UsaCtasProducto, CtaBonif.Cuenta_Id CtaBonificacion, CtaBonif.Descripcion DescripcionCtaBonif,  
CtaRecargo.Cuenta_Id CtaRecargo, CtaRecargo.Descripcion DescripcionCtaRecargo
FROM venListasPrecBoniRec
Inner Join venListasPrecios On venListasPrecios.venListasPrecios = venListasPrecBoniRec.ListaPrecio_Id
Left Join conCuentas CtaBonif On CtaBonif.conCuentas = venListasPrecBoniRec.CtaBonificacion
Left Join conCuentas CtaRecargo On CtaRecargo.conCuentas = venListasPrecBoniRec.CtaRecargo
WHERE (venListasPrecios.ListaPrecio_Id = @pListaPrecio_Id)
AND (NroBonifRecargo = @pNroBonifRecargo)
 
 RETURN @@Error 

GO

DROP PROCEDURE venListasPrecBoniRecEliminar
GO
CREATE PROCEDURE venListasPrecBoniRecEliminar
(
@pListaPrecio_Id varchar(5),
@pNroBonifRecargo smallint = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venListasPrecBoniRec 
WHERE (ListaPrecio_Id = dbo.FuncFKvenListasPrecios(@pListaPrecio_id))
AND (NroBonifRecargo = ISNULL(@pNroBonifRecargo, NroBonifRecargo)) 

 RETURN @@Error 

GO

DROP PROCEDURE venListasPrecBoniRecTodos
GO
CREATE PROCEDURE venListasPrecBoniRecTodos
(
@pListaPrecio_Id varchar(5)
)
AS
SELECT 
XXX.NroBonifRecargo, ISNULL(venListasPrecBoniRec.Nombre, 'Descuento '+str(xxx.NroBonifRecargo,1) ) AS Nombre , 
ISNULL(venListasPrecBoniRec.Formula,'0') AS Formula, 
isNull(venListasPrecBoniRec.UsaCtasProducto, 1) UsaCtasProducto, CtaBonif.Cuenta_Id CtaBonificacion, CtaBonif.Descripcion DescripcionCtaBonif,  
CtaRecargo.Cuenta_Id CtaRecargo, CtaRecargo.Descripcion DescripcionCtaRecargo
FROM (SELECT Cast(1 As smallint) AS NroBonifRecargo
		UNION ALL
		SELECT Cast(2 As smallint) AS NroBonifRecargo
		UNION ALL
		SELECT Cast(3 As smallint) AS NroBonifRecargo
		UNION ALL
		SELECT Cast(4 As smallint) AS NroBonifRecargo
		UNION ALL
		SELECT Cast(5 As smallint) AS NroBonifRecargo) AS XXX 
LEFT OUTER JOIN  (venListasPrecBoniRec Inner Join venListasPrecios ON 
				venListasPrecios.venListasPrecios = venListasPrecBoniRec.ListaPrecio_Id AND 
				venListasPrecios.ListaPrecio_Id = @pListaPrecio_Id	) ON
				XXX.NroBonifRecargo = venListasPrecBoniRec.NroBonifRecargo
Left Join conCuentas CtaBonif On CtaBonif.conCuentas = venListasPrecBoniRec.CtaBonificacion
Left Join conCuentas CtaRecargo On CtaRecargo.conCuentas = venListasPrecBoniRec.CtaRecargo
ORDER BY 1
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venListasPrecios.sql*/


--venListasPreciosDatos 1,'l'

DROP PROCEDURE venListasPreciosGuardar
GO
CREATE PROCEDURE venListasPreciosGuardar
(
@pListaPrecio_Id varchar(5),
@pListaPrecio_Id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(35),
@pMoneda_Id varchar(3) = NULL,
@pLlevaImpuestoInclu bit,
@pUsuAutorizado varchar(25) = NULL,
@pInactivo bit,
@pUsuario_Id int,
@pPosteado bit, 
@pDecimalesPu Int
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM venListasPrecios WHERE (ListaPrecio_Id = @pListaPrecio_Id)))
BEGIN 
	UPDATE venListasPrecios
	SET		@lIdentidad = venListasPrecios,
		ListaPrecio_Id = @pListaPrecio_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id),
		LlevaImpuestoInclu = @pLlevaImpuestoInclu,
		UsuAutorizado = dbo.FuncFKgenUsuarios(@pUsuAutorizado),
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado, 
		DecimalesPu = @pDecimalesPu
	WHERE (ListaPrecio_Id = @pListaPrecio_Id)
END 
ELSE 
BEGIN 
	INSERT INTO venListasPrecios
	(
		ListaPrecio_Id,
		Empresa_Id,
		Descripcion,
		Moneda_Id,
		LlevaImpuestoInclu,
		UsuAutorizado,
		Inactivo,
		Usuario_Id,
		Posteado, 
		DecimalesPu
	)
	VALUES 
	(
		@pListaPrecio_Id,
		@pEmpresa_Id,
		@pDescripcion,
		dbo.FuncFKgenMonedas(@pMoneda_Id),
		@pLlevaImpuestoInclu,
		dbo.FuncFKgenUsuarios(@pUsuAutorizado),
		@pInactivo,
		@pUsuario_Id,
		@pPosteado, 
		@pDecimalesPu
	)
	SET @lIdentidad =  Cast(SCOPE_IdENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE venListasPreciosDatosCabe
GO
CREATE PROCEDURE venListasPreciosDatosCabe
(
@pEmpresa_Id int,
@pListaPrecio_Id varchar(5)

)
AS
SET NOCOUNT ON 

SELECT venListasPrecios.venListasPrecios, '' as ListaPrecio_Id_Nueva, venListasPrecios.ListaPrecio_Id, venListasPrecios.Empresa_Id, Cast( Case When venListasPrecios.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	venListasPrecios.Descripcion, genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas, venListasPrecios.LlevaImpuestoInclu,
	UsuarioAutorizado.Usuario_Id AS UsuarioAutorizado, genUsuarios.Apellido_y_Nombres as DescripcionUsuarioAutorizado, venListasPrecios.Inactivo, 
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, venListasPrecios.Posteado, '' as Excel, 
	venListasPrecios.DecimalesPu
FROM venListasPrecios 
LEFT JOIN genMonedas  ON (genMonedas.genMonedas = venListasPrecios.Moneda_Id)
LEFT JOIN genUsuarios  AS UsuarioAutorizado ON (UsuarioAutorizado.genUsuarios = venListasPrecios.UsuAutorizado)
INNER JOIN genUsuarios ON (genUsuarios.genUsuarios = venListasPrecios.Usuario_Id)
WHERE (venListasPrecios.ListaPrecio_Id = @pListaPrecio_Id)

SELECT '' Producto_Id, '' Descripcion,
	Cast(0 As numeric(19,8)) as PrecioLista, 
	Cast(0 As numeric(19,8)) as PrecioPromocion, 
	Cast(0 as Bit) as AdmiteRegalo, 
	Cast(0 as Bit) AS Marca

Exec venListasPrecBoniRecTodos @pListaPrecio_Id

Declare @pidentity bigint= dbo.FuncFKvenListasPrecios(@pListaPrecio_Id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'venListasPrecios'

go

DROP PROCEDURE venListasPreciosDatos
GO
CREATE PROCEDURE venListasPreciosDatos
(
@pEmpresa_Id int,
@pListaPrecio_Id varchar(5), 
@pVersion Int = null
)
AS
SET NOCOUNT ON 

IF @pVersion IS NULL
	SET @pVersion = isnull((SELECT MAX(Version) 
		from 	venListasVersion 
		inner join venListasPrecios ON
		venListasPrecios.venListasPrecios= venListasVersion.ListaPrecio_Id and 
		venListasPrecios.ListaPrecio_Id = @pListaPrecio_Id),1)

--Exec venListasPreciosDatosCabe @pEmpresa_Id, @pListaPrecio_Id
SELECT venListasPrecios.venListasPrecios, '' as ListaPrecio_Id_Nueva, 
	venListasPrecios.ListaPrecio_Id, venListasPrecios.Empresa_Id, Cast( Case When venListasPrecios.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	venListasPrecios.Descripcion, genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas, venListasPrecios.LlevaImpuestoInclu,
	UsuarioAutorizado.Usuario_Id AS UsuarioAutorizado, UsuarioAutorizado.Apellido_y_Nombres as DescripcionUsuarioAutorizado, venListasPrecios.Inactivo, 
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, venListasPrecios.Posteado, '' as Excel, 
	venListasPrecios.DecimalesPu, venListasVersion.Version, 
	venListasVersion.VigenciaDesde, venListasVersion.VigenciaHasta
FROM venListasPrecios 
LEFT JOIN genMonedas  ON (genMonedas.genMonedas = venListasPrecios.Moneda_Id)
LEFT JOIN genUsuarios  AS UsuarioAutorizado ON (UsuarioAutorizado.genUsuarios = venListasPrecios.UsuAutorizado)
INNER JOIN genUsuarios ON (genUsuarios.genUsuarios = venListasPrecios.Usuario_Id)
INNER JOIN venListasVersion ON venListasVersion.ListaPrecio_Id = venListasPrecios.venListasPrecios AND 
	venListasVersion.Version = @pVersion
WHERE (venListasPrecios.ListaPrecio_Id = @pListaPrecio_Id)

 
SELECT stkProductos.Producto_Id, stkProductos.Descripcion,
	ISNULL(venListasPrecProd.PrecioLista, 0) as PrecioLista, 
	ISNULL(venListasPrecProd.PrecioPromocion,0) as PrecioPromocion, 
	Cast(ISNULL(venListasPrecProd.AdmiteRegalo, 0) as Bit) as AdmiteRegalo, 
	CAST(CASE WHEN venListasPrecProd.PrecioLista IS NULL THEN 0 ELSE 1 END AS BIT) AS Marca
FROM stkProductos 
LEFT  JOIN (
		venListasPrecProd  INNER JOIN venListasPrecios ON 
		venListasPrecProd.ListaPrecio_Id = venListasPrecios.venListasPrecios AND 	
		venListasPrecios.ListaPrecio_Id = @pListaPrecio_Id and 
		venListasPrecProd.Version = @pVersion) 
ON venListasPrecProd.Producto_Id = stkProductos.stkProductos
WHERE
	stkProductos.Acepta_Ventas = 1 and 
	stkProductos.Posteado = 1 and 
	stkProductos.Inactivo = 0 and 
	isnull(stkProductos.Empresa_Id,@pEmpresa_Id) = @pEmpresa_Id 
order by 1
	
		

Exec venListasPrecBoniRecTodos @pListaPrecio_Id

 Declare @pidentity bigint= dbo.FuncFKvenListasPrecios(@pListaPrecio_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'venListasPrecios'
 RETURN @@Error 

GO

DROP PROCEDURE venListasPreciosEliminar
GO
CREATE PROCEDURE venListasPreciosEliminar
(
@pListaPrecio_Id varchar(5) 
)
AS
SET NOCOUNT ON 

DELETE FROM venListasPrecios 
WHERE (ListaPrecio_Id = @pListaPrecio_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKvenListasPrecios
GO

CREATE FUNCTION FuncFKvenListasPrecios
(
@pListaPrecio_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = venListasPrecios FROM venListasPrecios WHERE 
	ListaPrecio_Id = @pListaPrecio_Id
  RETURN @pIdentity
END


GO

Drop Procedure venListaCopiar
GO
Create Procedure venListaCopiar
(
 @pLista int,
 @pVersion Int,
 @pLista_Ap int,
 @pVersion_Ap Int,
 @pCoeficiente numeric(18,8),
 @pDecimales int, 
 @pProductoDesde VarChar(25),
 @pProductoHasta VarChar(25),
 @pFamiliaDesde VarChar(15),
 @pFamiliaHasta VarChar(15),
 @pGrupoDesde VarChar(15),
 @pGrupoHasta VarChar(15)
)
as
if(@pLista=@pLista_Ap and @pVersion = @pVersion_ap)
begin
update venListasPrecProd set
PrecioLista = round((PrecioLista*@pCoeficiente),@pDecimales),
PrecioPromocion=round((PrecioPromocion*@pCoeficiente),@pDecimales)
where ListaPrecio_Id=@pLista and 
	Version = @pVersion and 
Exists(select 1 
	from stkProductos LEFT JOIN stkFamilias ON 
	stkProductos.Familia_id = stkFamilias.stkFamilias 
	LEFT JOIN stkGrupos ON
	stkProductos.Grupo_Id = stkGrupos.stkGrupos
	Where
	stkProductos.stkProductos = venListasPrecProd.Producto_Id and
	stkProductos.Producto_Id between @pProductoDesde and @pProductoHasta and 
	isnull(stkFamilias.Familia_id,' ') between @pFamiliaDesde and @pFamiliaHasta and 
	isnull(stkGrupos.Grupo_Id,' ') between @pGrupoDesde and @pGrupoHasta)
		
end
else
begin
delete from venListasPrecProd where ListaPrecio_Id=@pLista_Ap and 
	Version = @pVersion_ap and 
	Exists(select 1 
		from stkProductos LEFT JOIN stkFamilias ON 
		stkProductos.Familia_id = stkFamilias.stkFamilias 
		LEFT JOIN stkGrupos ON
		stkProductos.Grupo_Id = stkGrupos.stkGrupos
		Where
		stkProductos.stkProductos = venListasPrecProd.Producto_Id and
		stkProductos.Producto_Id between @pProductoDesde and @pProductoHasta and 
		isnull(stkFamilias.Familia_id,' ') between @pFamiliaDesde and @pFamiliaHasta and 
		isnull(stkGrupos.Grupo_Id,' ') between @pGrupoDesde and @pGrupoHasta)
	

insert into venListasPrecProd
(
ListaPrecio_Id,
Version,
Producto_Id,
PrecioLista,
PrecioPromocion,
AdmiteRegalo
)
select @pLista_Ap, @pVersion_ap, Producto_Id, round((PrecioLista*@pCoeficiente),@pDecimales), round((PrecioPromocion*@pCoeficiente),@pDecimales),AdmiteRegalo
from venListasPrecProd
where ListaPrecio_Id=@pLista and 
	Version = @pVersion and 
	Exists(select 1 
	from stkProductos LEFT JOIN stkFamilias ON 
	stkProductos.Familia_id = stkFamilias.stkFamilias 
	LEFT JOIN stkGrupos ON
	stkProductos.Grupo_Id = stkGrupos.stkGrupos
	Where
	stkProductos.stkProductos = venListasPrecProd.Producto_Id and
	stkProductos.Producto_Id between @pProductoDesde and @pProductoHasta and 
	isnull(stkFamilias.Familia_id,' ') between @pFamiliaDesde and @pFamiliaHasta and 
	isnull(stkGrupos.Grupo_Id,' ') between @pGrupoDesde and @pGrupoHasta)

delete from venListasPrecBoniRec where ListaPrecio_Id=@pLista_Ap 

insert into venListasPrecBoniRec
(
ListaPrecio_Id,
NroBonifRecargo,
Nombre,
Formula,
UsaCtasProducto
)
select @pLista_Ap, NroBonifRecargo, Nombre, Formula, UsaCtasProducto
from venListasPrecBoniRec
where ListaPrecio_Id=@pLista
end
go



DROP PROCEDURE venListasPreciosTraerProductos
GO
CREATE PROCEDURE venListasPreciosTraerProductos
(
@pEmpresa_Id int,
@pListaPrecio_Id varchar(5),
@pVer Char(1), 
@pVersion Int  
)
AS
SET NOCOUNT ON 

SELECT venListasPrecios.venListasPrecios, '' as ListaPrecio_Id_Nueva, venListasPrecios.ListaPrecio_Id, venListasPrecios.Empresa_Id, Cast( Case When venListasPrecios.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	venListasPrecios.Descripcion, genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas, venListasPrecios.LlevaImpuestoInclu,
	UsuarioAutorizado.Usuario_Id AS UsuarioAutorizado, genUsuarios.Apellido_y_Nombres as DescripcionUsuarioAutorizado, venListasPrecios.Inactivo, 
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, venListasPrecios.Posteado, '' as Excel,
	@pVer as Ver, venListasPrecios.DecimalesPu, 
	venListasVersion.Version,venListasVersion.VigenciaDesde, venListasVersion.VigenciaHasta
FROM venListasPrecios 
LEFT JOIN genMonedas  ON (genMonedas.genMonedas = venListasPrecios.Moneda_Id)
LEFT JOIN genUsuarios  AS UsuarioAutorizado ON (UsuarioAutorizado.genUsuarios = venListasPrecios.UsuAutorizado)
INNER JOIN genUsuarios ON (genUsuarios.genUsuarios = venListasPrecios.Usuario_Id)
INNER JOIN venListasVersion ON 
	venListasVersion.ListaPrecio_Id = venListasPrecios.venListasPrecios
WHERE 
	(venListasPrecios.ListaPrecio_Id = @pListaPrecio_Id)
 
SELECT stkProductos.Producto_Id, stkProductos.Descripcion,
	ISNULL(venListasPrecProd.PrecioLista, 0) as PrecioLista, 
	ISNULL(venListasPrecProd.PrecioPromocion,0) as PrecioPromocion, 
	Cast(ISNULL(venListasPrecProd.AdmiteRegalo, 0) as Bit) as AdmiteRegalo, 
	CAST(1 AS BIT) AS Marca
FROM venListasPrecios 
Inner JOIN venListasPrecProd ON venListasPrecProd.ListaPrecio_Id = venListasPrecios.venListasPrecios  and 
	venListasPrecProd.Version = @pVersion
INNER JOIN stkProductos ON venListasPrecProd.Producto_Id = stkProductos.stkProductos 	
Where (@pVer = 'L' Or @pVer = 'T') And
	venListasPrecios.ListaPrecio_Id = @pListaPrecio_Id And
		stkProductos.Acepta_ventas = 1 And 
		(stkProductos.Empresa_Id IS NULL or venListasPrecios.Empresa_Id Is Null Or
			stkProductos.Empresa_Id = venListasPrecios.Empresa_Id) And
		IsNull(stkProductos.Empresa_Id, @pEmpresa_Id) = @pEmpresa_Id And
		stkProductos.Inactivo = 0 And stkProductos.Posteado = 1
Union
SELECT stkProductos.Producto_Id, stkProductos.Descripcion,
	0 as PrecioLista, 
	0 as PrecioPromocion, 
	Cast(0 as Bit) as AdmiteRegalo, 
	CAST(0 AS BIT) AS Marca
FROM stkProductos
Where 
isnull(stkProductos.Empresa_Id,@pEmpresa_Id) = @pEmpresa_Id and 
Not Exists (Select 1 From venListasPrecProd Where 
					venListasPrecProd.ListaPrecio_Id = dbo.FuncFKvenListasPrecios(@pListaPrecio_Id) And
					venListasPrecProd.Producto_Id = stkProductos.stkProductos and 
					venListasPrecProd.Version = @pVersion) And
		(@pVer = 'F' Or @pVer = 'T') And
		stkProductos.Acepta_ventas = 1 And 
		IsNull(stkProductos.Empresa_Id, @pEmpresa_Id) = @pEmpresa_Id And
		stkProductos.Inactivo = 0 And stkProductos.Posteado = 1
ORDER BY 1

Exec venListasPrecBoniRecTodos @pListaPrecio_Id

 Declare @pidentity bigint= dbo.FuncFKvenListasPrecios(@pListaPrecio_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'venListasPrecios'
 RETURN @@Error
 Go


 DROP PROCEDURE venlistasHayOrta
 go

 CREATE PROCEDURE venlistasHayOrta
 (
	@ListaPrecio_Id VarChar(5),
	@Version Int,
	@VigenciaDesde DateTime, 
	@VigenciaHasta DateTime
 )
 AS

 SELECT venListasPrecios.ListaPrecio_Id, venListasVersion.Version,
		venListasVersion.VigenciaDesde  , venListasVersion.VigenciaHasta 
 from venListasPrecios 
 INNER JOIN venListasVersion ON
 venListasVersion.ListaPrecio_Id = venListasPrecios.venListasPrecios
 Where
		venListasPrecios.ListaPrecio_Id = @ListaPrecio_Id and
		venListasVersion.Version != @Version and 
		(@VigenciaDesde between venListasVersion.VigenciaDesde  and venListasVersion.VigenciaHasta  or
		 @VigenciaHasta between venListasVersion.VigenciaDesde  and venListasVersion.VigenciaHasta  )

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venListasPreciosVersion.sql*/
DROP PROCEDURE venListasVersionGuardar
GO
CREATE PROCEDURE venListasVersionGuardar
(
@pListaPrecio_Id VarChar(5),
@pVersion int,
@pVigenciaDesde datetime,
@pVigenciaHasta datetime,
@pUsuario_Id int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venListasVersion 
	INNER JOIN venListasPrecios ON
	venListasVersion.ListaPrecio_Id = venListasPrecios.venListasPrecios
	WHERE 
	(venListasPrecios.ListaPrecio_Id = @pListaPrecio_Id) AND 
	(Version = @pVersion)))
BEGIN 
	UPDATE venListasVersion
	SET		VigenciaDesde = @pVigenciaDesde,
		VigenciaHasta = @pVigenciaHasta,
		Usuario_Id = @pUsuario_Id
	WHERE (ListaPrecio_Id = dbo.FuncFKvenListasPrecios(@pListaPrecio_Id)) AND 
		(Version = @pVersion)
END 
ELSE 
BEGIN 
	INSERT INTO venListasVersion
	(
		ListaPrecio_Id,
		Version,
		VigenciaDesde,
		VigenciaHasta,
		Usuario_Id
	)
	VALUES 
	(
		dbo.FuncFKvenListasPrecios(@pListaPrecio_Id),
		@pVersion,
		@pVigenciaDesde,
		@pVigenciaHasta,
		@pUsuario_Id
	)
END 

GO

DROP PROCEDURE venListasVersionDatos
GO
CREATE PROCEDURE venListasVersionDatos
(
@pListaPrecio_Id VarChar(5),
@pVersion int
)
AS
SET NOCOUNT ON 

SELECT venListasPrecios.ListaPrecio_Id, venListasPrecios.Descripcion as DescripcionListasPrecios, 
	venListasVersion.Version, venListasVersion.VigenciaDesde,
	venListasVersion.VigenciaHasta, venListasVersion.Usuario_Id
FROM venListasVersion 
INNER JOIN venListasPrecios  ON (venListasPrecios.venListasPrecios = venListasVersion.ListaPrecio_Id)
WHERE (venListasPrecios.ListaPrecio_Id = @pListaPrecio_Id)
AND (Version = @pVersion)
 
RETURN @@Error 

GO

DROP PROCEDURE venListasVersionEliminar
GO
CREATE PROCEDURE venListasVersionEliminar
(
@pListaPrecio_Id varchar(5),
@pVersion int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venListasVersion 
WHERE (ListaPrecio_Id = dbo.FuncFKvenListasPrecios(@pListaPrecio_Id))
AND (Version = ISNULL(@pVersion, Version))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venListasPreciosXLSCatalogo.sql*/
drop procedure venListasPreciosXLSCatalogo
go
create procedure venListasPreciosXLSCatalogo
(
    @pListaDesde varchar(5),
    @pListaHasta varchar(5),
    @pProductoDesde varchar(25),
    @pProductoHasta varchar(25),
    @pFecha datetime
)
as
select @pListaDesde as ListaDesde, @pListaHasta as ListaHasta, @pProductoDesde as ProductoDesde, @pProductoHasta as ProductoHasta,
@pFecha as Fecha
select venListasPrecios.ListaPrecio_Id, venListasPrecios.Descripcion, genMonedas.Moneda_Id, genUsuarios.Usuario_Id as UsuAutorizado,
DecimalesPu,venListasPrecios.Inactivo, venListasPrecios.Posteado, case when venListasPrecios.Empresa_Id is null then 1 else 0 end as PTodasEmpresas,
LlevaImpuestoInclu, venListasVersion.VigenciaDesde, venListasVersion.VigenciaHasta, venListasVersion.Version
from venListasPrecios
inner join genMonedas on genMonedas.genMonedas=venListasPrecios.Moneda_Id
inner join genUsuarios on genUsuarios.genUsuarios=venListasPrecios.UsuAutorizado
inner join venListasVersion on venListasVersion.ListaPrecio_Id=venListasPrecios.venListasPrecios
where venListasPrecios.ListaPrecio_Id BETWEEN @pListaDesde and @pListaHasta and  @pFecha BETWEEN VigenciaDesde and VigenciaHasta

select venListasPrecios.ListaPrecio_Id, stkProductos.Producto_Id, PrecioLista, PrecioPromocion, AdmiteRegalo
from venListasPrecProd
inner join venListasPrecios on venListasPrecios.venListasPrecios=venListasPrecProd.ListaPrecio_Id
inner join stkProductos on stkProductos.stkProductos=venListasPrecProd.Producto_Id
inner join venListasVersion on venListasVersion.ListaPrecio_Id=venListasPrecios.venListasPrecios and venListasVersion.Version=venListasPrecProd.Version
where venListasPrecios.ListaPrecio_Id BETWEEN @pListaDesde and @pListaHasta and
stkProductos.Producto_Id between @pProductoDesde and @pProductoHasta and @pFecha between VigenciaDesde and VigenciaHasta
go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venListasPrecProd.sql*/
DROP PROCEDURE venListasPrecProdGuardar
GO
CREATE PROCEDURE venListasPrecProdGuardar
(
@pListaPrecio_Id int,
@pVersion Int,
@pProducto_Id varChar(25),
@pPrecioLista numeric(15,4),
@pPrecioPromocion numeric(15,4),
@pAdmiteRegalo bit
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venListasPrecProd WHERE 
	ListaPrecio_Id = @pListaPrecio_Id AND 
	Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id) AND 
	Version = @pVersion))
	
BEGIN 
	UPDATE venListasPrecProd
	SET		PrecioLista = @pPrecioLista,
		PrecioPromocion = @pPrecioPromocion,
		AdmiteRegalo = @pAdmiteRegalo
	WHERE (ListaPrecio_Id = @pListaPrecio_Id) AND 
		(Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id) and 
		Version = @pVersion)
END 
ELSE 
BEGIN 
	INSERT INTO venListasPrecProd
	(
		ListaPrecio_Id,
		Version,
		Producto_Id,
		PrecioLista,
		PrecioPromocion,
		AdmiteRegalo
	)
	VALUES 
	(
		@pListaPrecio_Id,
		@pVersion,
		dbo.FuncFKstkProductos(@pProducto_Id),
		@pPrecioLista,
		@pPrecioPromocion,
		@pAdmiteRegalo
	)
END 

GO

DROP PROCEDURE venListasPrecProdDatos
GO
CREATE PROCEDURE venListasPrecProdDatos
(
@pListaPrecio_Id varChar(5),
@pProducto_Id varChar(25),
@pVersion Int

)
AS
SET NOCOUNT ON 

SELECT venListasPrecios.venListasPrecios, 
	venListasPrecios.ListaPrecio_Id, venListasPrecios.Descripcion as DescripcionListasPrecios, 
	venListasPrecProd.Version, venListasVersion.VigenciaDesde as Fecha,
	stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos,
	venListasPrecProd.PrecioLista, venListasPrecProd.PrecioPromocion, venListasPrecProd.AdmiteRegalo
	FROM venListasPrecProd 
INNER JOIN venListasPrecios  ON (venListasPrecios.venListasPrecios = venListasPrecProd.ListaPrecio_Id)
INNER JOIN stkProductos  ON (stkProductos.stkProductos = venListasPrecProd.Producto_Id)
INNER JOIN venListasVersion ON venListasVersion.ListaPrecio_Id = venListasPrecProd.ListaPrecio_Id AND
					venListasVersion.Version =venListasPrecProd.Version
WHERE (venListasPrecios.ListaPrecio_Id = @pListaPrecio_Id)
AND (stkProductos.Producto_Id = @pProducto_Id) and 
venListasPrecProd.Version = @pVersion
 
RETURN @@Error 

GO

DROP PROCEDURE venListasPrecProdEliminar
GO
CREATE PROCEDURE venListasPrecProdEliminar
(
@pListaPrecio_Id varchar(5),
@pProducto_Id varchar(25)= NULL,
@pVersion Int
)
AS
SET NOCOUNT ON 

DELETE FROM venListasPrecProd 
WHERE (ListaPrecio_Id = dbo.FuncFKvenListasPrecios(@pListaPrecio_Id))
AND (Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id) or @pProducto_Id IS NULL) 
and Version = @pVersion
 
 RETURN @@Error 

GO

DROP PROCEDURE venListasPrecProdFechaDatos
GO
CREATE PROCEDURE venListasPrecProdFechaDatos
(
@pListaPrecio_Id varChar(5),
@pProducto_Id varChar(25),
@pFecha DateTime
)
AS
SET NOCOUNT ON 

SELECT venListasPrecios.venListasPrecios, 
	venListasPrecios.ListaPrecio_Id, venListasPrecios.Descripcion as DescripcionListasPrecios, 
	venListasPrecProd.Version, venListasVersion.VigenciaDesde as Fecha,
	stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos,
	venListasPrecProd.PrecioLista, venListasPrecProd.PrecioPromocion, venListasPrecProd.AdmiteRegalo
	
FROM venListasPrecProd 
INNER JOIN venListasPrecios  ON (venListasPrecios.venListasPrecios = venListasPrecProd.ListaPrecio_Id)
INNER JOIN stkProductos  ON (stkProductos.stkProductos = venListasPrecProd.Producto_Id)
INNER JOIN venListasVersion ON venListasVersion.ListaPrecio_Id = venListasPrecProd.ListaPrecio_Id and 
	venListasVersion.Version = venListasPrecProd.Version
WHERE (venListasPrecios.ListaPrecio_Id = @pListaPrecio_Id)
AND (stkProductos.Producto_Id = @pProducto_Id) AND 
@pFecha BETWEEN venListasVersion.VigenciaDesde AND venListasVersion.VigenciaHasta
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venLPTabCuerpo.sql*/
DROP PROCEDURE venLPTabCuerpoGuardar
GO
CREATE PROCEDURE venLPTabCuerpoGuardar
(
@pTabla_Id int,
@pHasta numeric(18,2),
@pValor numeric(18,2)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venLPTabCuerpo WHERE (Tabla_Id = @pTabla_Id) AND (Hasta = @pHasta)))
BEGIN 
	UPDATE venLPTabCuerpo
	SET		Valor = @pValor
	WHERE (Tabla_Id = @pTabla_Id) AND (Hasta = ISNULL(@pHasta, Hasta))
END 
ELSE 
BEGIN 
	INSERT INTO venLPTabCuerpo
	(
		Tabla_Id,
		Hasta,
		Valor
	)
	VALUES 
	(
		@pTabla_Id,
		@pHasta,
		@pValor
	)
END 

GO

DROP PROCEDURE venLPTabCuerpoDatos
GO
CREATE PROCEDURE venLPTabCuerpoDatos
(
@pTabla_Id int,
@pHasta numeric(18,2) = NULL
)
AS
SET NOCOUNT ON 

SELECT venLPTabCuerpo.Tabla_Id, venLPTabCuerpo.Hasta, venLPTabCuerpo.Valor
FROM venLPTabCuerpo 
WHERE (Tabla_Id = @pTabla_Id)
AND (Hasta = ISNULL(@pHasta,Hasta))
 
RETURN @@Error 

GO

DROP PROCEDURE venLPTabCuerpoEliminar
GO
CREATE PROCEDURE venLPTabCuerpoEliminar
(
@pTabla_Id int,
@pHasta Numeric(18,2) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venLPTabCuerpo 
WHERE (Tabla_Id = @pTabla_Id) AND (Hasta = ISNULL(@pHasta, Hasta))
 
 RETURN @@Error 

GO



DROP PROCEDURE venLPTabCuerpoValor
GO

CREATE PROCEDURE venLPTabCuerpoValor
(
@pTabla_Id int,
@pHasta numeric(18,2) = NULL
)
AS
SET NOCOUNT ON 

SELECT venLPTabCuerpo.Tabla_Id, venLPTabCuerpo.Hasta, venLPTabCuerpo.Valor
FROM venLPTabCuerpo 
WHERE Tabla_Id = @pTabla_Id AND 
Hasta = (select min(Hasta) from  venLPTabCuerpo p1 where
	p1.Tabla_Id = @pTabla_Id and Hasta >= @pHasta)
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venLPTabla.sql*/
DROP PROCEDURE venLPTablaGuardar
GO
CREATE PROCEDURE venLPTablaGuardar
(
@pTabla_Id int,
@pDescripcion varchar(120)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venLPTabla WHERE (Tabla_Id = @pTabla_Id)))
BEGIN 
	UPDATE venLPTabla
	SET		Descripcion = @pDescripcion
	WHERE (Tabla_Id = @pTabla_Id)
END 
ELSE 
BEGIN 
	INSERT INTO venLPTabla
	(
		Tabla_Id,
		Descripcion
	)
	VALUES 
	(
		@pTabla_Id,
		@pDescripcion
	)
END 

GO

DROP PROCEDURE venLPTablaDatos
GO
CREATE PROCEDURE venLPTablaDatos
(
@pTabla_Id int
)
AS
SET NOCOUNT ON 

SELECT venLPTabla.Tabla_Id, venLPTabla.Descripcion
FROM venLPTabla 
WHERE (Tabla_Id = @pTabla_Id)

Exec venLPTabCuerpoDatos @pTabla_Id, null
 
RETURN @@Error 

GO

DROP PROCEDURE venLPTablaEliminar
GO
CREATE PROCEDURE venLPTablaEliminar
(
@pTabla_Id int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venLPTabla 
WHERE (Tabla_Id = ISNULL(@pTabla_Id, Tabla_Id))
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venMovAnulados.sql*/

DROP PROCEDURE venMovAnulados
GO
CREATE PROCEDURE venMovAnulados(
	@FechaDesde DateTime, 
	@FechaHasta DateTime,
	@ClienteDesde VarChar(15),
	@ClienteHasta VarChar(15),
	@Empresa_Id Int
	)
	as


Select @FechaDesde FechaDesde, 	@FechaHasta FechaHasta, 
	@ClienteDesde ClienteDesde, @ClienteHasta ClienteHasta, ' ' as PDF, ' '  NombreArchivo


SELECT venMovimientos.venMovimientos, 
	dbo.Segmento( genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, 
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4N, genAsiSegmentos.Segmento1N, 
	genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) AS Comprobante,
	conAsientos.Fecha as FechaEmision, conAsientosAnul.FechaAnulacion, 
	venclientes.Cliente_Id, venClientes.RazonSocial, genUsuarios.Usuario_Id , venMovimientosFiscal.Acuse, 
	case when conAsientos.Anulado = 1 then 'Anulado' else 'Solicitado' end as Estado
from venMovimientos 
INNER JOIN genAsiSegmentos on venMovimientos.venMovimientos = genAsiSegmentos.Asiento_Id
INNER JOIN venClientes ON  venClientes.genEntidades = venMovimientos.Cliente_Id
INNER JOIN conAsientos ON  conAsientos.conAsientos = venMovimientos.venMovimientos
INNER JOIN conAsientosAnul ON conAsientosAnul.Asiento_Id = conAsientos.conAsientos
INNER JOIN genUsuarios ON genUsuarios.genUsuarios = conAsientosAnul.Usuario_Id
INNER JOIN venMovimientosFiscal ON venMovimientosFiscal.venMovimientos = venMovimientos.venMovimientos
WHERE
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Posteado = 1 and 
	(conAsientos.Anulado= 1 or venMovimientosFiscal.Acuse is not null) and 
	conAsientosAnul.FechaAnulacion  BETWEEN @FechaDesde and @FechaHasta and 
	venClientes.Cliente_Id Between @ClienteDesde and @ClienteHasta
ORDER BY 2


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venMovClieSuc.sql*/
DROP PROCEDURE venMovClieSucGuardar
GO
CREATE PROCEDURE venMovClieSucGuardar
(
@pvenMovimientos bigint,
@pgenEntidades bigint,
@pSucursal SucursalN
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venMovClieSuc WHERE (venMovimientos = @pvenMovimientos)))
BEGIN 
	UPDATE venMovClieSuc
	SET		genEntidades = @pgenEntidades,
		Sucursal = @pSucursal
	WHERE (venMovimientos = @pvenMovimientos)
END 
ELSE 
BEGIN 
	INSERT INTO venMovClieSuc
	(
		venMovimientos,
		genEntidades,
		Sucursal
	)
	VALUES 
	(
		@pvenMovimientos,
		@pgenEntidades,
		@pSucursal
	)
END 

GO

DROP PROCEDURE venMovClieSucDatos
GO
CREATE PROCEDURE venMovClieSucDatos
(
@pvenMovimientos bigint
)
AS
SET NOCOUNT ON 

SELECT venMovClieSuc.venMovimientos, venMovClieSuc.genEntidades, venMovClieSuc.Sucursal,
	venClieHabitual.NombreFantasia
FROM venMovClieSuc 
INNER JOIN venClieHabitual  ON (venClieHabitual.genEntidades = venMovClieSuc.genEntidades) AND (venClieHabitual.Sucursal = venMovClieSuc.Sucursal)
WHERE (venMovimientos = @pvenMovimientos)
 
 RETURN @@Error 

GO

DROP PROCEDURE venMovClieSucEliminar
GO
CREATE PROCEDURE venMovClieSucEliminar
(
@pvenMovimientos bigint
)
AS
SET NOCOUNT ON 

DELETE FROM venMovClieSuc 
WHERE (venMovimientos = @pvenMovimientos)
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venMovConforma.sql*/
DROP PROCEDURE venMovConformaGuardar
GO
CREATE PROCEDURE venMovConformaGuardar
(
@pvenMovimientos BigInt,
@pUsuario_Id int ,
@pFechaConforma datetime,
@pFechaRegistro qFechaHora,
@pObservaciones QMemo = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venMovConforma WHERE (venMovimientos = @pvenMovimientos)))
BEGIN 
	UPDATE venMovConforma
	SET	Usuario_Id = @pUsuario_Id,
		FechaConforma = @pFechaConforma,
		FechaRegistro = dbo.FechaActual(),
		Observaciones = @pObservaciones
	WHERE (venMovimientos = @pvenMovimientos)
END 
ELSE 
BEGIN 
	INSERT INTO venMovConforma
	(
		venMovimientos,
		Usuario_Id,
		FechaConforma,
		FechaRegistro,
		Observaciones
	)
	VALUES 
	(
		@pvenMovimientos,
		@pUsuario_Id,
		@pFechaConforma,
		dbo.FechaActual(),
		@pObservaciones
	)
END 

GO

DROP PROCEDURE venMovConformaDatos
GO
CREATE PROCEDURE venMovConformaDatos
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
AS
SET NOCOUNT ON 

SELECT venMovimientos.venMovimientos, genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N,
	genAsiSegmentos.Segmento4N , conAsientos.Fecha, venClientes.Cliente_Id, 
	venClientes.RazonSocial, venFormaEntrega.FormaEntrega_Id, 
	venFormaEntrega.RazonSocial as DescripcionFormaEntrega,
	venVendedores.Vendedor_Id, venVendedores.Nombre DescripcionVendedor , 
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
	venMovConforma.FechaConforma, venMovConforma.FechaRegistro, venMovConforma.Observaciones,
	conAsientos.Anulado
FROM venMovimientos
LEFT JOIN venMovConforma  ON (venMovimientos.venMovimientos = venMovConforma.venMovimientos)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = venMovConforma.Usuario_Id)
INNER JOIN conAsientos ON conAsientos.conAsientos = venMovimientos.venMovimientos
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = venMovimientos.venMovimientos
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
INNER JOIN venClientes ON venClientes.genEntidades = venMovimientos.Cliente_Id
INNER JOIN venFormaEntrega ON venFormaEntrega.venFormaEntrega = venMovimientos.FormaEntrega_Id
INNER JOIN venVendedores ON venVendedores.venVendedores = venMovimientos.Vendedor_Id
WHERE conAsientos.Posteado = 1  and 
	genSegmentos.Segmento_Id = @pSegmento_Id and
	genAsiSegmentos.Segmento1C = @pSegmento1C AND
	genAsiSegmentos.Segmento2C = @pSegmento2C	AND
	genAsiSegmentos.Segmento3C = @pSegmento3C AND
	genAsiSegmentos.Segmento4C = @pSegmento4C AND
	genAsiSegmentos.Segmento1N = @pSegmento1N AND
	genAsiSegmentos.Segmento2N = @pSegmento2N AND
	genAsiSegmentos.Segmento3N = @pSegmento3N AND
	genAsiSegmentos.Segmento4N = @pSegmento4N 


	exec genAdjuntosIdentityDatos 'venMovConforma', 0

 RETURN @@Error 

GO

DROP PROCEDURE venMovConformaEliminar
GO
CREATE PROCEDURE venMovConformaEliminar
(
@pvenMovimientos bigint
)
AS
SET NOCOUNT ON 

DELETE FROM venMovConforma 
WHERE (venMovimientos = @pvenMovimientos)
 
 RETURN @@Error 

GO

DROP PROCEDURE genMovCuotasActuFecha
GO
CREATE PROCEDURE genMovCuotasActuFecha
(
	@pAsiento_Id bigint,
	@pDias Int
)
as
Update genMovCuotas SET FechaVencimiento = dateadd(dd, @pDias, FechaVencimiento) Where Asiento_Id = @pAsiento_Id

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venMovConStock.sql*/
DROP PROCEDURE venMovConStockGuardar
GO
CREATE PROCEDURE venMovConStockGuardar
(
@pvenMovimientos bigint,
@pListaPrecio_id varchar(5),
@pTipoPrecioForm char(1)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venMovConStock WHERE (venMovimientos = @pvenMovimientos)))
BEGIN 
	UPDATE venMovConStock
	SET	ListaPrecio_id = dbo.FuncFKvenListasPrecios(@pListaPrecio_id),
		TipoPrecioForm = @pTipoPrecioForm
	WHERE (venMovimientos = @pvenMovimientos)
END 
ELSE 
BEGIN 
	INSERT INTO venMovConStock
	(
		venMovimientos,
		ListaPrecio_id,
		TipoPrecioForm
	)
	VALUES 
	(
		@pvenMovimientos,
		dbo.FuncFKvenListasPrecios(@pListaPrecio_id),
		@pTipoPrecioForm
	)
END 

GO

DROP PROCEDURE venMovConStockDatos
GO
CREATE PROCEDURE venMovConStockDatos
(
@pvenMovimientos bigint
)
AS
SET NOCOUNT ON 

SELECT venMovConStock.venMovimientos, venListasPrecios.ListaPrecio_Id, 
venListasPrecios.Descripcion as DescripcionListasPrecios, venMovConStock.TipoPrecioForm, venListasPrecios.LlevaImpuestoInclu
FROM venMovConStock 
INNER JOIN venListasPrecios  ON (venListasPrecios.venListasPrecios = venMovConStock.ListaPrecio_Id)
WHERE (venMovimientos = @pvenMovimientos)
/*
SELECT venMovConStockCr.venMovimientos, venMovConStockCr.RenglonCuerpo,
	stkProductos.Producto_Id, 
	stkProductos.Descripcion as DescripcionProductos, stkDepositos.Deposito_Id,
	stkDepositos.Descripcion as DescripcionDepositos, stkUniMed.Medida_Id, 
	stkUniMed.Descripcion as DescripcionUniMed, venMovConStockCr.Factor,
	venMovConStockCr.CantFacturada, venMovConStockCr.CantEntregada, venMovConStockCr.CantPendiente, 
	venMovConStockCr.CantOriginal, stkMedidaAlterna.Medida_Id MedidaAlterna, venMovConStockCr.CantidadAlternaForm,
	venMovConStockCr.TipoPrecio, venMovConStockCr.PrecioForm, 
	venMovConStockCr.PrecioLista, venMovConStockCr.PrecioVenta, venMovConStockCr.PrecioFormImpuesto,
	venMovConStockCr.PrecioFormImpuestoBon, venMovConStockCr.PrecioFormImpuestoTot,
	venMovConStockCr.ComiPorce, venMovConStockCr.Bonificacion, 
	venMovConStockCr.Observaciones, venMovConStockCr.FechaEntrega
FROM venMovConStockCr 
INNER JOIN venMovConStock  ON venMovConStock.venMovimientos = venMovConStockCr.venMovimientos
INNER JOIN conMovCont  ON (conMovCont.conAsientos = venMovConStockCr.venMovimientos)
LEFT JOIN stkProductos  ON (stkProductos.stkProductos = venMovConStockCr.Producto_Id)
LEFT JOIN stkDepositos  ON (stkDepositos.stkDepositos = venMovConStockCr.Deposito_Id)
LEFT JOIN stkUniMed  ON (stkUniMed.stkUniMed = venMovConStockCr.Medida_Id)
Left Join stkUniMed stkMedidaAlterna On stkMedidaAlterna.stkUniMed = venMovConStockCr.Medida_Id
WHERE venMovConStockCr.venMovimientos = @pvenMovimientos
*/
exec venMovConStockCrDatos @pvenMovimientos, Null

SELECT venMovConStockCrCtas.venMovimientos, venMovConStockCrCtas.RenglonCuerpo,
	venMovConStockCrCtas.Renglon, conCuentas.Cuenta_Id, conCuentas.Descripcion DescripcionCuentas, 
	conCentro1.Centro1_Id, conCentro1.Descripcion DescripcionCentro1, conCentro2.Centro2_Id,
	conCentro2.Descripcion DescripcionCentro2, conMovCont.TipoMov, conMovCont.Clase, 
	conMovCont.Importe ImporteContable, conMovCont.ImporteMonedaOriginal
FROM venMovConStockCrCtas 
INNER JOIN venMovConStockCr ON venMovConStockCr.venMovimientos = venMovConStockCrCtas.venMovimientos AND
	venMovConStockCr.RenglonCuerpo = venMovConStockCrCtas.RenglonCuerpo
INNER JOIN conMovCont ON conMovCont.conAsientos = venMovConStockCrCtas.venMovimientos AND
	conMovCont.Renglon = venMovConStockCrCtas.Renglon
Inner Join conCuentas On conCuentas.conCuentas = conMovCont.Cuenta_Id
Left Join conCentro1 On conCentro1.conCentro1 = conMovCont.Centro1_Id
Left Join conCentro2 On conCentro2.conCentro2 = conMovCont.Centro2_Id
WHERE venMovConStockCrCtas.venMovimientos = @pvenMovimientos
Order By 2,3

RETURN @@Error 


GO

DROP PROCEDURE venMovConStockEliminar
GO
CREATE PROCEDURE venMovConStockEliminar
(
@pvenMovimientos bigint
)
AS
SET NOCOUNT ON 

DELETE FROM venMovConStock 
WHERE (venMovimientos = @pvenMovimientos)
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venMovConStockCr.sql*/
DROP PROCEDURE venMovConStockCrGuardar
GO
CREATE PROCEDURE venMovConStockCrGuardar
(
@pvenMovimientos bigint,
@pRenglonCuerpo int,
@pProducto_Id varchar(25) = NULL,
@pDeposito_Id varchar(15) = NULL,
@pMedida_Id varchar(5) = NULL,
@pFactor qCantidadD8,
@pCantFacturada qCantidadD8,
@pCantEntregada qCantidadD8,
@pCantPendiente qCantidadD8,
@pCantOriginal qCantidadD8,
@pMedidaAlterna varChar(5) = Null,
@pCantidadAlternaForm qCantidadD8,
@pTipoPrecio char(1),
@pPrecioForm qMonedaD8,
@pPrecioSinIva qMonedaD8,
@pPrecioLista qMonedaD8,
@pPrecioVenta qMonedaD8,
@pPrecioFormImpuesto qMonedaD8,
@pPrecioFormImpuestoBon qMonedaD8,
@pPrecioFormImpuestoTot qMonedaD8,
@pComiPorce qPorcentaje,
@pBonificacion qPorcentaje,
@pObservaciones QMemo = NULL,
@pFechaEntrega qFecha,
@pSubTotal qMonedaD2,
@pSubTotalFormImpuesto qMonedaD2,
@pCentro1_Id varChar(8) = NUll,
@pCentro2_Id varChar(8) = NUll,
@pCantEntregadaForm QCantidadD8 
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venMovConStockCr WHERE (venMovimientos = @pvenMovimientos) AND (RenglonCuerpo = @pRenglonCuerpo)))
BEGIN 
	UPDATE venMovConStockCr
	SET		Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id),
		Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id),
		Medida_Id = dbo.FuncFKstkUniMed(@pMedida_Id),
		Factor = @pFactor,
		CantFacturada = @pCantFacturada,
		CantEntregada = @pCantEntregada,
		CantPendiente = @pCantPendiente,
		CantOriginal = @pCantOriginal,
		MedidaAlterna = dbo.FuncFKstkUniMed(@pMedidaAlterna),
		CantidadAlternaForm = @pCantidadAlternaForm,
		TipoPrecio = @pTipoPrecio,
		PrecioForm = @pPrecioForm,
		PrecioSinIva = @pPrecioSinIva,
		PrecioLista = @pPrecioLista,
		PrecioVenta = @pPrecioVenta,
		PrecioFormImpuesto = @pPrecioFormImpuesto,
		PrecioFormImpuestoBon = @pPrecioFormImpuestoBon,
		PrecioFormImpuestoTot = @pPrecioFormImpuestoTot,
		ComiPorce = @pComiPorce,
		Bonificacion = @pBonificacion,
		Observaciones = @pObservaciones,
		FechaEntrega = @pFechaEntrega,
		SubTotal = @pSubTotal,
		SubTotalFormImpuesto = @pSubTotalFormImpuesto,
		Centro1_Id = dbo.FuncFKconCentro1(@pCentro1_Id),
		Centro2_Id = dbo.FuncFKconCentro2(@pCentro2_Id), 
		CantEntregadaForm = @pCantEntregadaForm
	WHERE (venMovimientos = @pvenMovimientos) AND (RenglonCuerpo = @pRenglonCuerpo)
END 
ELSE 
BEGIN 
	INSERT INTO venMovConStockCr
	(
		venMovimientos,
		RenglonCuerpo,
		Producto_Id,
		Deposito_Id,
		Medida_Id,
		Factor,
		CantFacturada,
		CantEntregada,
		CantPendiente,
		CantOriginal,
		MedidaAlterna,
		CantidadAlternaForm,
		TipoPrecio,
		PrecioForm,
		PrecioSinIva,
		PrecioLista,
		PrecioVenta,
		PrecioFormImpuesto,
		PrecioFormImpuestoBon,
		PrecioFormImpuestoTot,
		ComiPorce,
		Bonificacion,
		Observaciones,
		FechaEntrega,
		SubTotal,
		SubTotalFormImpuesto,
		Centro1_Id,
		Centro2_Id,
		CantEntregadaForm
	)
	VALUES 
	(
		@pvenMovimientos,
		@pRenglonCuerpo,
		dbo.FuncFKstkProductos(@pProducto_Id),
		dbo.FuncFKstkDepositos(@pDeposito_Id),
		dbo.FuncFKstkUniMed(@pMedida_Id),
		@pFactor,
		@pCantFacturada,
		@pCantEntregada,
		@pCantPendiente,
		@pCantOriginal,
		dbo.FuncFKstkUniMed(@pMedidaAlterna),
		@pCantidadAlternaForm,
		@pTipoPrecio,
		@pPrecioForm,
		@pPrecioSinIva,
		@pPrecioLista,
		@pPrecioVenta,
		@pPrecioFormImpuesto,
		@pPrecioFormImpuestoBon,
		@pPrecioFormImpuestoTot,
		@pComiPorce,
		@pBonificacion,
		@pObservaciones,
		@pFechaEntrega,
		@pSubTotal,
		@pSubTotalFormImpuesto,
		dbo.FuncFKconCentro1(@pCentro1_Id),
		dbo.FuncFKconCentro2(@pCentro2_Id), 
		@pCantEntregadaForm
	)
END 

GO

Drop Procedure venMovConStockCrDatos
Go
Create Procedure venMovConStockCrDatos
(
@pvenMovimientos bigint,
@pRenglonCuerpo int = Null
)
As
SELECT venMovConStockCr.venMovimientos, venMovConStockCr.RenglonCuerpo, venMovConStockCr.RenglonCuerpo * 0 RenglonReferencia,
	stkProductos.Producto_Id, stkCondFisVenta.CFVenta_Id,
	stkProductos.Descripcion as DescripcionProductos, stkDepositos.Deposito_Id,
	stkDepositos.Descripcion as DescripcionDepositos, stkUniMed.Medida_Id, 
	stkUniMed.Descripcion as DescripcionUniMed, venMovConStockCr.Factor,
	venMovConStockCr.CantFacturada, venMovConStockCr.CantEntregada, venMovConStockCr.CantPendiente, 
	venMovConStockCr.CantOriginal, stkMedidaAlterna.Medida_Id MedidaAlterna, venMovConStockCr.CantidadAlternaForm,
	venMovConStockCr.TipoPrecio, venMovConStockCr.PrecioForm, venMovConStockCr.PrecioSinIva,
	venMovConStockCr.PrecioLista, venMovConStockCr.PrecioVenta, venMovConStockCr.PrecioFormImpuesto,
	venMovConStockCr.PrecioFormImpuestoBon, venMovConStockCr.PrecioFormImpuestoTot,
	venMovConStockCr.ComiPorce, venMovConStockCr.Bonificacion, venMovConStockCr.SubTotal, venMovConStockCr.SubTotalFormImpuesto,
	venMovConStockCr.Observaciones, venMovConStockCr.FechaEntrega, 
	venMovimientosCRExpMx.CantidadAduana ,venMovimientosCRExpMx.UnidadAduana ,
	venMovimientosCRExpMx.ValorUnitarioAduana ,venMovimientosCRExpMx.ValorDolares, concentro1.Centro1_Id, conCentro1.Descripcion DescripcionCentro1,
	concentro2.Centro2_Id, conCentro2.Descripcion DescripcionCentro2, comDespachos.Despacho_Id, 
	venMovConStockCr.CantEntregadaForm
FROM venMovConStockCr 
INNER JOIN venMovConStock  ON venMovConStock.venMovimientos = venMovConStockCr.venMovimientos
LEFT JOIN stkProductos  ON (stkProductos.stkProductos = venMovConStockCr.Producto_Id)
LEFT JOIN stkDepositos  ON (stkDepositos.stkDepositos = venMovConStockCr.Deposito_Id)
LEFT JOIN stkUniMed  ON (stkUniMed.stkUniMed = venMovConStockCr.Medida_Id)
Left Join stkUniMed stkMedidaAlterna On stkMedidaAlterna.stkUniMed = venMovConStockCr.Medida_Id
Left Join stkCondFisVenta On stkCondFisVenta.stkCondFisVenta = stkProductos.CFVenta_Id
Left outer join venMovimientosCRExpMx ON 
	venMovimientosCRExpMx.venMovimientos = venMovConStockCr.venMovimientos AND 
	venMovimientosCRExpMx.RenglonCuerpo = venMovConStockCr.RenglonCuerpo
Left Join conCentro1 On conCentro1.conCentro1 = venMovConStockCr.Centro1_Id
Left Join conCentro2 On conCentro2.conCentro2 = venMovConStockCr.Centro2_Id
Left Join (Select venMovStkHist.venMovimientos, venMovStkHist.RenglonCuerpo, stkMoviDespa.stkMoviCabe, stkMoviDespa.Renglon, Min(stkMoviDespa.Despacho_Id) Despacho_Id
From venMovStkHist 
	Inner Join stkMoviDespa On stkMoviDespa.stkMoviCabe = venMovStkHist.stkMoviCabe And stkMoviDespa.Renglon = venMovStkHist.Renglon
Group by venMovStkHist.venMovimientos, venMovStkHist.RenglonCuerpo, stkMoviDespa.stkMoviCabe, stkMoviDespa.Renglon
) venMovStkHistDespa
On venMovStkHistDespa.venMovimientos = venMovConStockCr.venMovimientos And venMovStkHistDespa.RenglonCuerpo = venMovConStockCr.RenglonCuerpo
Left Join comDespachos On comDespachos.comDespachos = venMovStkHistDespa.Despacho_Id
WHERE 
venMovConStockCr.venMovimientos = @pvenMovimientos And
venMovConStockCr.RenglonCuerpo = IsNull(@pRenglonCuerpo, venMovConStockCr.RenglonCuerpo)
Order By 2
GO

DROP PROCEDURE venMovConStockCrEliminar
GO
CREATE PROCEDURE venMovConStockCrEliminar
(
@pvenMovimientos bigint,
@pRenglonCuerpo int = Null
)
AS
SET NOCOUNT ON 

DELETE FROM venMovConStockCr 
WHERE venMovimientos = @pvenMovimientos
AND RenglonCuerpo = IsNull(@pRenglonCuerpo, RenglonCuerpo)
 
RETURN @@Error 

GO

DROP PROCEDURE venMovConStockCrCantPendiente
GO
CREATE PROCEDURE venMovConStockCrCantPendiente
(
@pvenMovimientos bigint,
@pRenglonCuerpo int ,
@pCantidad qCantidadD8
)
AS
SET NOCOUNT ON 

UPDATE venMovConStockCr  SET CantPendiente =  CantPendiente - @pCantidad
	WHERE venMovimientos = @pvenMovimientos AND RenglonCuerpo = @pRenglonCuerpo
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venMovConStockCrCtas.sql*/
DROP PROCEDURE venMovConStockCrCtasGuardar
GO
CREATE PROCEDURE venMovConStockCrCtasGuardar
(
@pvenMovimientos bigint,
@pRenglonCuerpo int,
@pRenglon int
)
AS
SET NOCOUNT ON 

	INSERT INTO venMovConStockCrCtas
	(
		venMovimientos,
		RenglonCuerpo,
		Renglon
	)
	VALUES 
	(
		@pvenMovimientos,
		@pRenglonCuerpo,
		@pRenglon
	)

GO

DROP PROCEDURE venMovConStockCrCtasEliminar
GO
CREATE PROCEDURE venMovConStockCrCtasEliminar
(
@pvenMovimientos bigint,
@pRenglonCuerpo int = null,
@pRenglon int = null
)
AS
SET NOCOUNT ON 

DELETE FROM venMovConStockCrCtas 
WHERE venMovimientos = @pvenMovimientos
AND RenglonCuerpo = IsNull(@pRenglonCuerpo, RenglonCuerpo)
AND Renglon = IsNull(@pRenglon, Renglon)
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venMovConStockCrPed.sql*/
DROP PROCEDURE venMovConStockCrPedGuardar
GO
CREATE PROCEDURE venMovConStockCrPedGuardar
(
@pvenPedidos int,
@pRenglon_Pe int,
@pvenMovimientos bigint,
@pRenglonCuerpo int,
@pvenReparto int = Null
)
AS
INSERT INTO venMovConStockCrPed
(
	venPedidos,
	Renglon_Pe,
	venMovimientos,
	RenglonCuerpo,
	venReparto
)
VALUES 
(
	@pvenPedidos,
	@pRenglon_Pe,
	@pvenMovimientos,
	@pRenglonCuerpo,
	@pvenReparto
)
GO

DROP PROCEDURE venMovConStockCrPedDatos
GO
CREATE PROCEDURE venMovConStockCrPedDatos
(
@pvenPedidos int = NUll,
@pRenglon_Pe int = NUll,
@pvenMovimientos bigint = NUll,
@pRenglonCuerpo int = NUll
)
AS
SET NOCOUNT ON 

SELECT venMovConStockCrPed.venPedidos, venMovConStockCrPed.Renglon_Pe, venMovConStockCrPed.venMovimientos,
	venMovConStockCrPed.RenglonCuerpo, venMovConStockCrPed.venReparto, dbo.Segmento(venPediSegmentos.Segmento_Id, venPediSegmentos.Segmento1C, venPediSegmentos.Segmento2C,
venPediSegmentos.Segmento3C, venPediSegmentos.Segmento4C, venPediSegmentos.Segmento1N, venPediSegmentos.Segmento2N,
venPediSegmentos.Segmento3N, venPediSegmentos.Segmento4N) Pedido, dbo.Segmento(venRepaSegmentos.Segmento_Id, venRepaSegmentos.Segmento1C, venRepaSegmentos.Segmento2C,
venRepaSegmentos.Segmento3C, venRepaSegmentos.Segmento4C, venRepaSegmentos.Segmento1N, venRepaSegmentos.Segmento2N,
venRepaSegmentos.Segmento3N, venRepaSegmentos.Segmento4N) Reparto
FROM venMovConStockCrPed 
INNER JOIN venPediCuerpo ON venPediCuerpo.venPedidos = venMovConStockCrPed.venPedidos AND venPediCuerpo.Renglon_Pe = venMovConStockCrPed.Renglon_Pe
INNER JOIN venMovConStockCr ON venMovConStockCr.venMovimientos = venMovConStockCrPed.venMovimientos AND venMovConStockCr.RenglonCuerpo = venMovConStockCrPed.RenglonCuerpo
Inner Join venPediSegmentos On venPediSegmentos.venPedidos = venMovConStockCrPed.venPedidos
Left Join venRepaSegmentos On venRepaSegmentos.venReparto = venMovConStockCrPed.venReparto
WHERE venMovConStockCrPed.venPedidos = IsNull(@pvenPedidos, venMovConStockCrPed.venPedidos)
AND venMovConStockCrPed.Renglon_Pe = IsNull(@pRenglon_Pe, venMovConStockCrPed.Renglon_Pe)
AND venMovConStockCrPed.venMovimientos = IsNull(@pvenMovimientos, venMovConStockCrPed.venMovimientos)
AND venMovConStockCrPed.RenglonCuerpo = IsNull(@pRenglonCuerpo, venMovConStockCrPed.RenglonCuerpo)
 
 RETURN @@Error 

GO

DROP PROCEDURE venMovConStockCrPedEliminar
GO
CREATE PROCEDURE venMovConStockCrPedEliminar
(
@pvenMovimientos bigint,
@pRenglonCuerpo int
)
AS
SET NOCOUNT ON 

DELETE FROM venMovConStockCrPed 
WHERE venMovimientos = @pvenMovimientos
AND RenglonCuerpo = @pRenglonCuerpo
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venMovConStockCrPedDatosCanc.sql*/
drop  procedure venMovConStockCrPedDatosCanc
go
create procedure venMovConStockCrPedDatosCanc
(
    @pvenPedidos bigint=null,
    @pRenglon_Pe int =null,
    @pvenMovimientos bigint=null,
    @pRenglon_Ventas int =null
)
as
select venMovConStockCrPed.venPedidos, venMovConStockCrPed.Renglon_Pe, venMovConStockCrPed.venMovimientos,
venMovConStockCrPed.RenglonCuerpo, venMovConStockCr.CantEntregada, venMovConStockCr.CantFacturada , 
	venPediCuerpo.ReservaMercaderia, stkDepositos.Deposito_Id, stkProductos.Producto_Id, venMovConStockCrPed.venReparto
From venMovConStockCrPed inner join venMovConStockCr on venMovConStockCr.venMovimientos=venMovConStockCrPed.venMovimientos and 
														venMovConStockCr.RenglonCuerpo=venMovConStockCrPed.RenglonCuerpo
						 inner join venPediCuerpo ON	venPediCuerpo.venPedidos= venMovConStockCrPed.venPedidos AND
													    venPediCuerpo.Renglon_Pe = venMovConStockCrPed.Renglon_Pe				
						 Inner join stkDepositos ON stkDepositos.stkDepositos =venMovConStockCr.Deposito_Id
						 inner join stkProductos ON stkProductos.stkProductos=venMovConStockCr.Producto_Id
WHERE
	venMovConStockCrPed.venPedidos = isnull(@pvenPedidos, venMovConStockCrPed.venPedidos) and 
	venMovConStockCrPed.Renglon_Pe = isnull(@pRenglon_Pe, venMovConStockCrPed.Renglon_Pe) and 
	venMovConStockCrPed.venMovimientos = isnull(@pvenMovimientos, venMovConStockCrPed.venMovimientos) and 
	venMovConStockCrPed.RenglonCuerpo = isnull(@pRenglon_Ventas, venMovConStockCrPed.RenglonCuerpo) 

go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venMovCSImpuestos.sql*/
DROP PROCEDURE venMovCSImpuestosGuardar
GO
CREATE PROCEDURE venMovCSImpuestosGuardar
(
@pvenMovimientos bigint,
@pRenglonCuerpo int,
@pImpuesto_Id varChar(5),
@pImporte qMonedaD2,
@pImporteMonedaNac qMonedaD2,
@pPorcentaje qPorcentaje,
@pBaseImponible qMonedaD2,
@pBaseImponibleMonedaNac qMonedaD2
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venMovCSImpuestos WHERE venMovimientos = @pvenMovimientos AND 
RenglonCuerpo = @pRenglonCuerpo AND Impuesto_Id = dbo.FuncFKvenImpuestos(@pImpuesto_Id)))
BEGIN 
	UPDATE venMovCSImpuestos
	SET Importe = @pImporte,
		ImporteMonedaNac = @pImporteMonedaNac,
		Porcentaje = @pPorcentaje,
		BaseImponible = @pBaseImponible,
		BaseImponibleMonedaNac = @pBaseImponibleMonedaNac
	WHERE venMovimientos = @pvenMovimientos AND RenglonCuerpo = @pRenglonCuerpo AND Impuesto_Id = dbo.FuncFKvenImpuestos(@pImpuesto_Id)
END 
ELSE 
BEGIN 
	INSERT INTO venMovCSImpuestos
	(
		venMovimientos,
		RenglonCuerpo,
		Impuesto_Id,
		Importe,
		ImporteMonedaNac,
		Porcentaje,
		BaseImponible,
		BaseImponibleMonedaNac
	)
	VALUES 
	(
		@pvenMovimientos,
		@pRenglonCuerpo,
		dbo.FuncFKvenImpuestos(@pImpuesto_Id),
		@pImporte,
		@pImporteMonedaNac,
		@pPorcentaje,
		@pBaseImponible,
		@pBaseImponibleMonedaNac
	)
END 

GO

DROP PROCEDURE venMovCSImpuestosDatos
GO
CREATE PROCEDURE venMovCSImpuestosDatos
(
@pvenMovimientos bigint,
@pRenglonCuerpo int = Null,
@pImpuesto_Id VarChar(5) = Null
)
AS
SET NOCOUNT ON 

SELECT venMovCSImpuestos.venMovimientos, venMovCSImpuestos.RenglonCuerpo, venImpuestos.Impuesto_Id,
	venImpuestos.Descripcion as DescripcionImpuestos, venMovCSImpuestos.Importe, venMovCSImpuestos.ImporteMonedaNac,
	venMovCSImpuestos.Porcentaje, venMovCSImpuestos.BaseImponible, venMovCSImpuestos.BaseImponibleMonedaNac
FROM venMovCSImpuestos 
INNER JOIN venMovConStockCr  ON (venMovConStockCr.venMovimientos = venMovCSImpuestos.venMovimientos) AND 
(venMovConStockCr.RenglonCuerpo = venMovCSImpuestos.RenglonCuerpo)
INNER JOIN venImpuestos  ON (venImpuestos.venImpuestos = venMovCSImpuestos.Impuesto_Id)
WHERE 
venMovCSImpuestos.venMovimientos = @pvenMovimientos
AND venMovCSImpuestos.RenglonCuerpo = IsNull(@pRenglonCuerpo, venMovCSImpuestos.RenglonCuerpo)
AND venImpuestos.Impuesto_Id = IsNull(@pImpuesto_Id, venImpuestos.Impuesto_Id)
Order By 2

RETURN @@Error 

GO

DROP PROCEDURE venMovCSImpuestosEliminar
GO
CREATE PROCEDURE venMovCSImpuestosEliminar
(
@pvenMovimientos bigint,
@pRenglonCuerpo int = null,
@pImpuesto_Id varchar(5) = Null
)
AS
SET NOCOUNT ON 

If @pImpuesto_Id Is Null
	DELETE FROM venMovCSImpuestos 
	WHERE venMovimientos = @pvenMovimientos
	AND RenglonCuerpo = @pRenglonCuerpo
Else
	DELETE FROM venMovCSImpuestos 
	WHERE venMovimientos = @pvenMovimientos
	AND RenglonCuerpo = IsNull(@pRenglonCuerpo, RenglonCuerpo)
	AND Impuesto_Id = dbo.FuncFKvenImpuestos(@pImpuesto_Id)
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venMovDetalle.sql*/
DROP PROCEDURE venMovDetalleGuardar
GO
CREATE PROCEDURE venMovDetalleGuardar
(
@pvenMovimientos bigint,
@pconRenglon int,
@pDetalle QMemo,
@pCFVenta_Id varchar(5) = NULL,
@pCantidad qMonedaD8,
@pMedida_Id varchar(5) = NULL,
@pImporteUnitario qMonedaD8,
@pSubTotal qMonedaD2,
@pImporteUnitarioDelImpuesto qMonedaD8, 
@pSubTotalFormImpuesto qMonedaD2,
@pCodigoFiscal VarChar(20) = NULL, 
@pProducto_Id VarChar(25) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venMovDetalle WHERE (venMovimientos = @pvenMovimientos) AND (conRenglon = @pconRenglon)))
BEGIN 
	UPDATE venMovDetalle
	SET Detalle = @pDetalle,
		CFVenta_Id = dbo.FuncFKstkCondFisVenta(@pCFVenta_Id),
		Cantidad = @pCantidad,
		Medida_Id = dbo.FuncFKstkUniMed(@pMedida_Id),
		ImporteUnitario = @pImporteUnitario,
		SubTotal = @pSubTotal,
		ImporteUnitarioDelImpuesto = @pImporteUnitarioDelImpuesto,
		SubTotalFormImpuesto = @pSubTotalFormImpuesto,
		CodigoFiscal =@pCodigoFiscal,
		Producto_Id = @pProducto_Id
	WHERE (venMovimientos = @pvenMovimientos) AND (conRenglon = @pconRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO venMovDetalle
	(
		venMovimientos,
		conRenglon,
		Detalle,
		CFVenta_Id,
		Cantidad,
		Medida_Id,
		ImporteUnitario,
		SubTotal,
		ImporteUnitarioDelImpuesto,
		SubTotalFormImpuesto,
		CodigoFiscal, 
		Producto_Id
	)
	VALUES 
	(
		@pvenMovimientos,
		@pconRenglon,
		@pDetalle,
		dbo.FuncFKstkCondFisVenta(@pCFVenta_Id),
		@pCantidad,
		dbo.FuncFKstkUniMed(@pMedida_Id),
		@pImporteUnitario,
		@pSubTotal,
		@pImporteUnitarioDelImpuesto, 
		@pSubTotalFormImpuesto,
		@pCodigoFiscal, 
		@pProducto_Id
	)
END 

GO

DROP PROCEDURE venMovDetalleDatos
GO
CREATE PROCEDURE venMovDetalleDatos
(
@pvenMovimientos bigint,
@pconRenglon int = Null
)
AS
SET NOCOUNT ON 

SELECT venMovDetalle.venMovimientos, venMovDetalle.conRenglon,
	venMovDetalle.Detalle, stkCondFisVenta.CFVenta_Id, stkCondFisVenta.Descripcion as DescripcionCondFisVenta,
	venMovDetalle.Cantidad, stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, venMovDetalle.ImporteUnitario,
	venMovDetalle.SubTotal, venMovDetalle.ImporteUnitarioDelImpuesto, venMovDetalle.SubTotalFormImpuesto,
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuenta,
	conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1,
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2,
	conMovCont.TipoMov, conMovCont.Clase, conMovCont.Importe as ImporteContable, 
	venMovDetalle.CodigoFiscal, venMovDetalle.Producto_Id, venMoviPredial.CuentaPredial
FROM venMovDetalle 
INNER JOIN conMovCont  ON (conMovCont.conAsientos = venMovDetalle.venMovimientos) AND (conMovCont.Renglon = venMovDetalle.conRenglon)
LEFT JOIN stkCondFisVenta  ON (stkCondFisVenta.stkCondFisVenta = venMovDetalle.CFVenta_Id)
LEFT JOIN stkUniMed  ON (stkUniMed.stkUniMed = venMovDetalle.Medida_Id)
Left JOIN conCuentas ON conCuentas.conCuentas = conMovCont.cuenta_Id 
Left JOIN conCentro1 ON conCentro1.conCentro1 = conMovCont.Centro1_Id
Left JOIN conCentro2 ON conCentro2.conCentro2 = conMovCont.Centro2_Id
Left JOIN venMoviPredial ON venMoviPredial.venMovimientos = venMovDetalle.venMovimientos and 
						venMoviPredial.conRenglon = venMovDetalle.conRenglon
WHERE venMovDetalle.venMovimientos = @pvenMovimientos
AND venMovDetalle.conRenglon = IsNull(@pconRenglon, venMovDetalle.conRenglon)
 Order By 2
 RETURN @@Error 

GO

DROP PROCEDURE venMovDetalleEliminar
GO
CREATE PROCEDURE venMovDetalleEliminar
(
@pvenMovimientos bigint,
@pconRenglon int = Null
)
AS
SET NOCOUNT ON 

DELETE FROM venMovDetalle 
WHERE (venMovimientos = @pvenMovimientos)
AND (conRenglon = IsNull(@pconRenglon, conRenglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venMovHistDatosXMov.sql*/
drop procedure venMovHistDatosXMov
go
create procedure venMovHistDatosXMov
(
@pvenMovimientos int
)
as
set nocount on
select distinct(venMovimientos),stkMoviCabe from venMovStkHist where venMovimientos=@pvenMovimientos
go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venMoviAnticipo.sql*/
DROP PROCEDURE venMoviAnticipoGuardar
GO
CREATE PROCEDURE venMoviAnticipoGuardar
(
@pvenMovimientos bigint,
@pPorcentaje qPorcentaje,
@pImporte qMonedaD2
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venMoviAnticipo WHERE (venMovimientos = @pvenMovimientos)))
BEGIN 
	UPDATE venMoviAnticipo
	SET		Porcentaje = @pPorcentaje,
		Importe = @pImporte
	WHERE (venMovimientos = @pvenMovimientos)
END 
ELSE 
BEGIN 
	INSERT INTO venMoviAnticipo
	(
		venMovimientos,
		Porcentaje,
		Importe
	)
	VALUES 
	(
		@pvenMovimientos,
		@pPorcentaje,
		@pImporte
	)
END 

GO

DROP PROCEDURE venMoviAnticipoDatos
GO
CREATE PROCEDURE venMoviAnticipoDatos
(
@pvenMovimientos bigint
)
AS
SET NOCOUNT ON 

SELECT venMoviAnticipo.venMovimientos,  venMoviAnticipo.Porcentaje, venMoviAnticipo.Importe
FROM venMoviAnticipo 
INNER JOIN venMovimientos  ON (venMovimientos.venMovimientos = venMoviAnticipo.venMovimientos)
WHERE (venMoviAnticipo.venMovimientos = @pvenMovimientos)
 
 RETURN @@Error 

GO

DROP PROCEDURE venMoviAnticipoEliminar
GO
CREATE PROCEDURE venMoviAnticipoEliminar
(
@pvenMovimientos bigint
)
AS
SET NOCOUNT ON 

DELETE FROM venMoviAnticipo 
WHERE (venMovimientos = @pvenMovimientos)
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venMovimientos.sql*/
DROP PROCEDURE venMovimientosGuardar
GO
CREATE PROCEDURE venMovimientosGuardar
(
@pEmpresa_Id int, 
@pvenMovimientos bigint,
@pCliente_Id VarChar(15) = NULL,
@pSucursal SucursalN = NULL,
@pvenSubTipoMov_Id varchar(5) = NULL,
@pCondPagoCli_Id varchar(5) = NULL,
@pVendedor_Id varchar(5) = NULL,
@pCobrador_Id varchar(5) = NULL,
@pFormaEntrega_Id varchar(3) = NULL,
@pCondFisc_Id varchar(5) = NULL,
@pImporte qMonedaD2,
@pSaldo qMonedaD2,
@pSubTotal qMonedaD2,
@pSubTotalBonif qMonedaD2,
@pComision1 numeric(5),
@pComision2 numeric(5),
@pBonificacion1 qMonedaD2,
@pBonificacion2 qMonedaD2,
@pBonificacion3 qMonedaD2,
@pBonificacion4 qMonedaD2,
@pBonificacion5 qMonedaD2,
@pDato1 qMonedaD4,
@pDato2 qMonedaD4,
@pDato3 qMonedaD4,
@pCobraAbasto Sino,
@pCambioFijo Sino,
@pComprobanteDesde int = NULL,
@pTipoPago int,
@pIncoterm_Id char(3) = NULL, 
@pVenTipoMov Char(1)
)
AS
SET NOCOUNT ON 
	
IF (EXISTS (SELECT 1 FROM venMovimientos WHERE (venMovimientos = @pvenMovimientos)))
BEGIN 
	UPDATE venMovimientos
	SET	Cliente_Id = dbo.FuncFKvenClientes(@pCliente_Id),
		Sucursal = @pSucursal,
		venSubTipoMov_Id = dbo.FuncFKvenSubTipoMov(@pvenSubTipoMov_Id),
		CondPagoCli_Id = dbo.FuncFKvenCondPago(@pCondPagoCli_Id),
		Vendedor_Id = dbo.FuncFKvenVendedores(@pVendedor_Id),
		Cobrador_Id = dbo.FuncFKvenCobradores(@pCobrador_Id),
		FormaEntrega_Id = dbo.FuncFKvenFormaEntrega(@pFormaEntrega_Id),
		CondFisc_Id = dbo.FuncFKvenCondFiscal(@pCondFisc_Id),
		Importe = @pImporte,
		Saldo = @pSaldo,
		SubTotal = @pSubTotal,
		SubTotalBonif = @pSubTotalBonif,
		Comision1 = @pComision1,
		Comision2 = @pComision2,
		Bonificacion1 = @pBonificacion1,
		Bonificacion2 = @pBonificacion2,
		Bonificacion3 = @pBonificacion3,
		Bonificacion4 = @pBonificacion4,
		Bonificacion5 = @pBonificacion5,
		Dato1 = @pDato1,
		Dato2 = @pDato2,
		Dato3 = @pDato3,
		CobraAbasto = @pCobraAbasto,
		CambioFijo = @pCambioFijo,
		ComprobanteDesde = @pComprobanteDesde,
		TipoPago = @pTipoPago,
		Incoterm_Id = dbo.FuncFKvenIncoterm(@pIncoterm_Id), 
		VenTipoMov = @pVenTipoMov
	WHERE (venMovimientos = @pvenMovimientos)
END 
ELSE 
BEGIN 
	INSERT INTO venMovimientos
	(
		venMovimientos,
		Cliente_Id,
		Sucursal,
		venSubTipoMov_Id,
		CondPagoCli_Id,
		Vendedor_Id,
		Cobrador_Id,
		FormaEntrega_Id,
		CondFisc_Id,
		Importe,
		Saldo,
		SubTotal,
		SubTotalBonif,
		Comision1,
		Comision2,
		Bonificacion1,
		Bonificacion2,
		Bonificacion3,
		Bonificacion4,
		Bonificacion5,
		Dato1,
		Dato2,
		Dato3,
		CobraAbasto,
		CambioFijo,
		ComprobanteDesde,
		TipoPago,
		Incoterm_Id,
		VenTipoMov
	)
	VALUES 
	(
		@pvenMovimientos,
		dbo.FuncFKvenClientes(@pCliente_Id),
		@pSucursal,
		dbo.FuncFKvenSubTipoMov(@pvenSubTipoMov_Id),
		dbo.FuncFKvenCondPago(@pCondPagoCli_Id),
		dbo.FuncFKvenVendedores(@pVendedor_Id),
		dbo.FuncFKvenCobradores(@pCobrador_Id),
		dbo.FuncFKvenFormaEntrega(@pFormaEntrega_Id),
		dbo.FuncFKvenCondFiscal(@pCondFisc_Id),
		@pImporte,
		@pSaldo,
		@pSubTotal,
		@pSubTotalBonif,
		@pComision1,
		@pComision2,
		@pBonificacion1,
		@pBonificacion2,
		@pBonificacion3,
		@pBonificacion4,
		@pBonificacion5,
		@pDato1,
		@pDato2,
		@pDato3,
		@pCobraAbasto,
		@pCambioFijo,
		@pComprobanteDesde,
		@pTipoPago,
		dbo.FuncFKvenIncoterm(@pIncoterm_Id), 
		@pVenTipoMov
	)
END 

GO
------------------------------------------------------------------------------------------------
DROP PROCEDURE venMovimientosDatos
GO
CREATE PROCEDURE venMovimientosDatos
(
@pIdentity bigint
)
AS
SET NOCOUNT ON 

SELECT venMovimientos.venMovimientos,
	genAsiSegmentos.Empresa_Id, genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,
	genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,genAsiSegmentos.Segmento3C,
	genAsiSegmentos.Segmento4C, venMovimientos.venTipoMov, 
	conAsientos.Posteado, conAsientos.Fecha, conAsientos.FechaRegistro, 
	conAsientos.Cambio,conAsientos.CambioMonedaOriginal, 
	CAST(
             CASE
                  WHEN conAsientos.Anulado = 1 or conAsientosAnul.FechaAnulacion is not null
                     THEN 1
                  ELSE 0
             END AS bit) as Anulado
, conAsientos.Observaciones,
	genMonedas.Moneda_Id, genMonedas.Descripcion as DescripcionMonedas,
	venClientes.Cliente_Id, venMovimientos.Sucursal, venClieHabitual.NombreFantasia,
	venSubTipoMov.SubTipoMov_Id, venSubTipoMov.Descripcion as DescripcionSubTipoMov,
	venCondPago.CondPagoCli_Id, venCondPago.Descripcion as DescripcionCondPago,
	venVendedores.Vendedor_Id, venVendedores.Nombre as DescripcionVendedores, 
	venCobradores.Cobrador_Id, venCobradores.Nombre as DescripcionCobradores,
	venFormaEntrega.FormaEntrega_Id, venFormaEntrega.RazonSocial as DescripcionFormaEntrega, 
	venCondFiscal.CondFisc_Id, venCondFiscal.Descripcion as DescripcionCondFiscal,
	venMovimientos.Importe, venMovimientos.Saldo, venMovimientos.SubTotal, venMovimientos.SubTotalBonif,
	venMovimientos.Comision1, venMovimientos.Comision2,
	venMovimientos.Bonificacion1, venMovimientos.Bonificacion2, venMovimientos.Bonificacion3, 
	venMovimientos.Bonificacion4,venMovimientos.Bonificacion5, 
	venMovimientos.Dato1, venMovimientos.Dato2, venMovimientos.Dato3,
	venMovimientos.CobraAbasto, 
	venMovimientos.CambioFijo, venMovimientos.ComprobanteDesde, venMovimientos.TipoPago, 
	venIncoterm.Incoterm_Id, venIncoterm.Descripcion as DescripcionIncoterm,
	conCuentasDXV.Cuenta_Id CtaClientes, conCuentasDXV.Descripcion as DescripcionCtaClientes,
	conCentro1DXV.Centro1_Id Centro1DXV_Id, conCentro1DXV.Descripcion as DescripcionCentro1DXV,
	conCentro2DXV.Centro2_Id Centro2DXV_Id, conCentro2DXV.Descripcion as DescripcionCentro2DXV,
	conMovCont.TipoMov AS TipomovCont, conMovCont.Clase, conMovCont.Importe AS ImporteContable,
	genMovimientos.CantCuotas, disFormularios.Formulario_Id, Cast(1 As bit) LlamarAlWSFE, 
	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
		genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
		genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) AS SegmentoStr,
	genSucursalesEmpr.Sucursal AS SucursalEmpr, CAST(0 as bit) NoRecalcular, Cast(0 As Bit) SinEntrega,
	Cast(0 As bit) EsSaldoInicial, Cast(0 As bit) AceptarDatosExternos
FROM venMovimientos
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_id = venMovimientos.venMovimientos
INNER JOIN genSegmentos ON genAsiSegmentos.Segmento_id = genSegmentos.genSegmentos
INNER JOIN genMovimientos  ON genMovimientos.Asiento_Id = venMovimientos.venMovimientos
INNER JOIN conAsientos ON venMovimientos.venMovimientos  = conAsientos.conAsientos
INNER JOIN disFormularios ON disFormularios.disFormularios = conAsientos.Formulario_Id
LEFT JOIN venClieHabitual  ON venClieHabitual.genEntidades = venMovimientos.Cliente_Id AND 
	venClieHabitual.Sucursal = venMovimientos.Sucursal
Left Join venClientes On venMovimientos.Cliente_Id = venClientes.genEntidades
LEFT JOIN venSubTipoMov  ON (venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id)
LEFT JOIN venCondPago  ON (venCondPago.venCondPago = venMovimientos.CondPagoCli_Id)
LEFT JOIN venVendedores  ON (venVendedores.venVendedores = venMovimientos.Vendedor_Id)
LEFT JOIN venCobradores  ON (venCobradores.venCobradores = venMovimientos.Cobrador_Id)
LEFT JOIN venFormaEntrega  ON (venFormaEntrega.venFormaEntrega = venMovimientos.FormaEntrega_Id)
LEFT JOIN venCondFiscal  ON (venCondFiscal.venCondFiscal = venMovimientos.CondFisc_Id)
LEFT JOIN conMovCont ON conMovCont.conAsientos = venMovimientos.venMovimientos And conMovCont.Clase = 'CLI'
LEFT JOIN conCuentas conCuentasDXV ON conCuentasDXV.conCuentas = conMovCont.cuenta_Id 
INNER JOIN genMonedas ON genMonedas.genMonedas = conAsientos.Moneda_Id
Left JOIN conCentro1 conCentro1DXV ON conCentro1DXV.conCentro1 = conMovCont.Centro1_Id
Left JOIN conCentro2 conCentro2DXV ON conCentro2DXV.conCentro2 = conMovCont.Centro2_Id
LEFT JOIN venIncoterm  ON (venIncoterm.venIncoterm_int = venMovimientos.Incoterm_Id)
Inner Join genSucursalesEmpr On genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
left join conAsientosAnul on conAsientos.conAsientos= conAsientosAnul.Asiento_Id
WHERE (venMovimientos = @pIdentity)
GO

------------------------------------------------------------------------------------------------
DROP PROCEDURE venMovimientosSinStockDatos
GO
CREATE PROCEDURE venMovimientosSinStockDatos
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
AS
SET NOCOUNT ON

Declare @pIdentity bigint = (Select Asiento_Id
 from genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and 
	genAsiSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C )

Exec venMovimientosDatos @pIdentity

Exec venMovDetalleDatos @pIdentity
Exec VenMovImpuestosDatos @pIdentity

Exec genAtributosGeneralesIdentityDatos @pidentity, 'venMovimientos' 

Exec genMovCuotasDatos @pIdentity

--Exec genSegmentosConfiguracion @pSegmento_Id, @pEmpresa_Id

Exec  venMovSSImpuestosDatos @pIdentity

exec venMovimientosFiscalDatos @pIdentity
exec venMovimientosFiscalINEDatos @pIdentity
exec venMovimientosMetodoPagoDatos @pIdentity
exec venMovimientosCFDIRDatos @pIdentity -- AR
exec venMovimientosCFDIRDatos @pIdentity -- MX
exec venMoviAnticipoDatos @pIdentity

-- PARA ENVIAR LA DIFERNCIA EN CAMBIOS DE ANTICIPO
select venMovDetalle.venMovimientos, venMovDetalle.conRenglon, 
	venMovDetalle.ImporteUnitario*0 as Importe, ' ' as Cuenta_Id
FROM
	venMovDetalle WHERE 1 = 2

Exec conAsientosAnulDatos @pidentity

RETURN @@Error
GO

------------------------------------------------------------------------------------------------

Drop Procedure venMovimientosConStockDatos
GO
Create Procedure venMovimientosConStockDatos
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
AS
SET NOCOUNT ON 

Declare @pIdentity bigint = (Select Asiento_Id
 From genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_id = @pEmpresa_id And 
	genAsiSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_Id) And 
	genAsiSegmentos.Segmento1N = @pSegmento1N And 
	genAsiSegmentos.Segmento2N = @pSegmento2N And 
	genAsiSegmentos.Segmento3N = @pSegmento3N And 
	genAsiSegmentos.Segmento4N = @pSegmento4N And 
	genAsiSegmentos.Segmento1C = @pSegmento1C And 
	genAsiSegmentos.Segmento2C = @pSegmento2C And 
	genAsiSegmentos.Segmento3C = @pSegmento3C And 
	genAsiSegmentos.Segmento4C = @pSegmento4C )
	
Exec venMovimientosDatos @pIdentity

exec venMovConStockDatos @pIdentity

Exec venMovImpuestosDatos @pIdentity, Null

Exec genAtributosGeneralesIdentityDatos @pidentity, 'venMovimientos'
Exec genMovCuotasDatos @pIdentity
/*
SELECT genMovCuotas.CuotaNro, genMovCuotas.Importe, genMovCuotas.Saldo, genMovCuotas.FechaVencimiento
FROM genMovCuotas
WHERE genMovCuotas.Asiento_id = @pIdentity
ORDER BY 1
*/
exec venMovCSImpuestosDatos @pIdentity, Null, Null
exec venMovimientosFiscalDatos @pIdentity
exec venMovimientosFiscalINEDatos @pIdentity
exec venMovimientosMetodoPagoDatos  @pIdentity
exec venMovimientosExpMXDatos  @pIdentity

exec venMovimientosCFDIRDatos @pIdentity -- AR
exec venMovimientosCFDIRDatos @pIdentity -- MX

SELECT stkMoviSerie.stkMoviCabe, venMovStkHist.RenglonCuerpo Renglon, stkMoviSerie.Serie, stkMoviSerie.Cantidad / stkMoviCuerpo.Factor Cantidad,
stkSerieVencimiento.Vencimiento, stkUbicaciones.Ubicacion_Id
FROM stkMoviSerie 
INNER JOIN stkMoviCuerpo ON stkMoviCuerpo.stkMoviCabe = stkMoviSerie.stkMoviCabe AND stkMoviCuerpo.Renglon = stkMoviSerie.Renglon
Left Join stkSerieVencimiento On stkSerieVencimiento.Serie = stkMoviSerie.Serie And stkSerieVencimiento.Producto_Id = stkMoviCuerpo.Producto_Id And
	stkSerieVencimiento.Empresa_Id = @pEmpresa_id
Inner Join venMovStkHist On venMovStkHist.stkMoviCabe = stkMoviSerie.stkMoviCabe And venMovStkHist.Renglon = stkMoviCuerpo.Renglon
left join (stkMoviSerieUbicacion INNER JOIN stkUbicaciones ON
	stkUbicaciones.stkUbicaciones = stkMoviSerieUbicacion.Ubicacion_Id) ON  
	stkMoviSerieUbicacion.stkMoviCabe = venMovStkHist.stkMoviCabe and 
	  stkMoviSerieUbicacion.Renglon  = venMovStkHist.Renglon

WHERE venMovStkHist.venMovimientos = @pIdentity

exec venMoviAnticipoDatos @pIdentity

-- V2 UBICACIONES
select stkMoviUbicacion.stkMoviCabe, stkMoviUbicacion.Renglon, 
	stkProductos.Producto_Id, stkDepositos.Deposito_Id, stkUbicaciones.Ubicacion_Id,
	stkMoviUbicacion.Cantidad, stkMoviUbicacion.CantidadAlterna
from stkMoviUbicacion inner join stkMoviCuerpo ON 
stkMoviUbicacion.stkMoviCabe = stkMoviCuerpo.stkMoviCabe and
stkMoviUbicacion.Renglon = stkMoviCuerpo.Renglon
INNER JOIN stkProductos on  stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
INNER JOIN stkDepositos on  stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id
INNER JOIN stkUbicaciones ON stkUbicaciones.stkUbicaciones = stkMoviUbicacion.Ubicacion_Id
Inner Join venMovStkHist On venMovStkHist.stkMoviCabe = stkMoviCuerpo.stkMoviCabe And venMovStkHist.Renglon = stkMoviCuerpo.Renglon
inner join venMovimientos ON venMovimientos.venMovimientos = venMovStkHist.venMovimientos
INNER JOIN venTipoMov ON venTipoMov.Signo = 1
WHERE venMovStkHist.venMovimientos = @pIdentity 



select stkMoviUbicacion.stkMoviCabe, stkMoviUbicacion.Renglon, 
	stkProductos.Producto_Id, stkDepositos.Deposito_Id, stkUbicaciones.Ubicacion_Id,
	stkMoviUbicacion.Cantidad, stkMoviUbicacion.CantidadAlterna
from stkMoviUbicacion inner join stkMoviCuerpo ON 
stkMoviUbicacion.stkMoviCabe = stkMoviCuerpo.stkMoviCabe and
stkMoviUbicacion.Renglon = stkMoviCuerpo.Renglon
INNER JOIN stkProductos on  stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
INNER JOIN stkDepositos on  stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id
INNER JOIN stkUbicaciones ON stkUbicaciones.stkUbicaciones = stkMoviUbicacion.Ubicacion_Id
Inner Join venMovStkHist On venMovStkHist.stkMoviCabe = stkMoviCuerpo.stkMoviCabe And venMovStkHist.Renglon = stkMoviCuerpo.Renglon
inner join venMovimientos ON venMovimientos.venMovimientos = venMovStkHist.venMovimientos
INNER JOIN venTipoMov ON venTipoMov.Signo = -1
WHERE venMovStkHist.venMovimientos = @pIdentity

-- AJ MAY 2020 PARA LAS CONSULTAS DE STOCK
SELECT getdate() as Fecha, '' Producto_Id, '' Descripcion, 0.00 as Existencia, 
	0.00 as Compras, 0.00 as Embarques,	
		0.00 as Pedidos, 0.00 as TransitoLocal,
		0.00 as Final, '' as Deposito_Id

select '' as Entidad_Id, '' as Descripcion, '' SegmentoSTR, 0.00 as Cantidad


-- para las cotizaciones
select genSegmentos.Segmento_Id, venCotizSegmento.Segmento1N, venCotizSegmento.Segmento2N,
	venCotizSegmento.Segmento3N, venCotizSegmento.Segmento4N, venCotizSegmento.Segmento1C,
	venCotizSegmento.Segmento2C, venCotizSegmento.Segmento3C, venCotizSegmento.Segmento4C
FROM venCotizFactura INNER JOIN venCotizSegmento ON
	venCotizFactura.venCotizaciones = venCotizSegmento.venCotizaciones
	INNER JOIN genSegmentos ON
	genSegmentos.genSegmentos = venCotizSegmento.Segmento_Id
	Where
		venCotizFactura.venMovimientos = @pIdentity

Exec conAsientosAnulDatos @pidentity

-- Carta Porte

SELECT venCompCartaporte.TranspInternac, venCompCartaporte.EntradaSalidaMerc, venCompCartaPorte.ViaEntradaSalida, 
	venCompCartaporte.TotalDistRec, venCompCartaporte.PesoBrutoTotal, venCompCartaporte.UnidadPeso, 
	venCompCartaporte.PesoBrutoTotal, venCompCartaporte.PesoNetoTotal, venCompCartaporte.CargoPorTasacion,
	venCamiones.Patente_Id as Camion_Id,  venCamiones.Descripcion  DescripcionCamion,
	Remolque1.Patente_Id as Remolque1, Remolque1.Descripcion as DescripcionRemolque1,
	Remolque2.Patente_Id as Remolque2, Remolque2.Descripcion as DescripcionRemolque2,
	venOperadores.Operador_Id, venOperadores.NombreOperador,
	venCompCartaPorteOrigen.RFCRemitente, venCompCartaPorteOrigen.NombreRemitente,
	venCompCartaPorteOrigen.NumRegIdTrib NumRegIdTribO, genPaisesOR.Pais_Id as  ResidenciaFiscalO,
	venCompCartaPorteOrigen.NumEstacion NumEstacionO, venCompCartaPorteOrigen.NombreEstacion NombreEstacionO, 
	venCompCartaPorteOrigen.NavegacionTrafico NavegacionTraficoO, venCompCartaPorteOrigen.FechaHoraSalida,
	venCompCartaPorteOrigen.Calle CalleOrigen,  venCompCartaPorteOrigen.NumeroExterior  NumeroExteriorOrigen, 
	venCompCartaPorteOrigen.Numerointerior NumerointeriorOrigen, 
	venCompCartaPorteOrigen.Colonia ColoiniaOrigen, 
		genColoniasO.NombreAsentamiento as DescripcionColoniaO, 
	venCompCartaPorteOrigen.Localidad  LocalidadOrigen, genlocalidadesO.Descripcion as DescripcionLocalidadO, 
	venCompCartaPorteOrigen.Referencia ReferenciaOrigen,
	venCompCartaPorteOrigen.Municipio MunicipioOrigen, genMunicipiosO.Descripcion AS DescripcionMunicipioO, 
	genProvincias.Provincia_Id EstadoO, venCompCartaPorteOrigen.CodigoPostal CodigoPostalOrigen, 
	genPaisesO.Pais_Id PaisOrigen, genPaisesO.Descripcion DescripcionPaisO,
	venCompCartaPorteDestino.RFCDestinatario, venCompCartaPorteDestino.NombreDestinatario,
	venCompCartaPorteDestino.NumRegIdTrib NumRegIdTribD, genPaisesOR.Pais_Id as  ResidenciaFiscal,
	venCompCartaPorteDestino.NumEstacion NumEstacionD, venCompCartaPorteDestino.NombreEstacion NombreEstacionD, 
	venCompCartaPorteDestino.NavegacionTrafico NavegacionTraficoD, venCompCartaPorteDestino.FechaHoraProgLlegada,
	venCompCartaPorteDestino.Calle CalleDestino,  venCompCartaPorteDestino.NumeroExterior  NumeroExteriorDestino, 
	venCompCartaPorteDestino.Numerointerior NumerointeriorDestino, 
	venCompCartaPorteDestino.Colonia ColoiniaDestino, 
		genColoniasD.NombreAsentamiento as DescripcionColoniaD, 
	venCompCartaPorteDestino.Localidad  LocalidadDestino, genlocalidadesD.Descripcion as DescripcionLocalidadD, 
	venCompCartaPorteDestino.Referencia ReferenciaDestino,
	venCompCartaPorteDestino.Municipio MunicipioDestino, genMunicipiosD.Descripcion AS DescripcionMunicipioD, 
	genProvinciasD.Provincia_Id EstadoD, venCompCartaPorteDestino.CodigoPostal CodigoPostalDestino, 
	genPaisesO.Pais_Id PaisDestino, genPaisesD.Descripcion DescripcionPaisD
FROM  venCompCartaporte
	inner join venCamiones ON  venCompCartaporte.Camion_Id= venCamiones.venCamiones
	left join venCamiones Remolque1 ON  venCompCartaporte.Remolque1= Remolque1.venCamiones
	left join venCamiones Remolque2 ON  venCompCartaporte.Remolque2= Remolque2.venCamiones
	inner join venOperadores on  venOperadores.venOperadores = venCompCartaPorte.Operador_Id
	INNER JOIN venCompCartaPorteOrigen on  venCompCartaPorteOrigen.venmovimientos = venCompCartaPorte.venmovimientos
	INNER JOIN genPaises genPaisesOR ON  genPaisesOR.genPaises = venCompCartaPorteOrigen.ResidenciaFiscal
	LEFT JOIN genProvincias ON  genProvincias.CodFiscal = venCompCartaPorteOrigen.Estado
	LEFT JOIN genColonias  genColoniasO ON genColoniasO.c_Colonia = venCompCartaPorteOrigen.Colonia AND 
	genColoniasO.c_CodigoPostal = venCompCartaPorteOrigen.CodigoPostal
	LEFT JOIN genlocalidades  genlocalidadesO ON genlocalidadesO.c_Localidad = venCompCartaPorteOrigen.Localidad AND 
		genlocalidadesO.c_Estado = venCompCartaPorteOrigen.Estado
	LEFT JOIN genMunicipios  genMunicipiosO ON genMunicipiosO.c_Municipio = venCompCartaPorteOrigen.Municipio and 
								genMunicipiosO.c_Estado = venCompCartaPorteOrigen.Estado
	INNER JOIN genPaises genPaisesO ON genPaisesO.genPaises = venCompCartaPorteOrigen.Pais

	INNER JOIN venCompCartaPorteDestino on  venCompCartaPorteDestino.venmovimientos = venCompCartaPorte.venmovimientos
	INNER JOIN genPaises genPaisesDR ON  genPaisesDR.genPaises = venCompCartaPorteDestino.ResidenciaFiscal
	LEFT JOIN genProvincias genProvinciasD ON  genProvinciasD.CodFiscal = venCompCartaPorteDestino.Estado
	LEFT JOIN genColonias  genColoniasD ON genColoniasD.c_Colonia = venCompCartaPorteDestino.Colonia AND 
	genColoniasD.c_CodigoPostal = venCompCartaPorteDestino.CodigoPostal
	LEFT JOIN genlocalidades  genlocalidadesD ON genlocalidadesD.c_Localidad = venCompCartaPorteDestino.Localidad AND 
		genlocalidadesD.c_Estado = venCompCartaPorteDestino.Estado
	LEFT JOIN genMunicipios  genMunicipiosD ON genMunicipiosD.c_Municipio = venCompCartaPorteDestino.Municipio and 
								genMunicipiosD.c_Estado = venCompCartaPorteDestino.Estado
	INNER JOIN genPaises genPaisesD ON genPaisesD.genPaises = venCompCartaPorteDestino.Pais
WHERE
	venCompCartaPorte.venmovimientos = @pIdentity

-- mercancia Carta Porte
Select venCompCartaPorteMercancia.Renglon, venCompCartaPorteMercancia.BienesTransp, venCompCartaPorteMercancia.ClaveSTCC, 
	venCompCartaPorteMercancia.Descripcion, venCompCartaPorteMercancia.Cantidad, stkUniMed.Medida_Id, 
		venCompCartaPorteMercancia.Dimensiones, venCompCartaPorteMercancia.MaterialPeligroso, venCompCartaPorteMercancia.CveMaterialPeligroso, 
			venCompCartaPorteMercancia.Embalaje, venCompCartaPorteMercancia.DescripEmbalaje, venCompCartaPorteMercancia.PesoEnKg, 
			venCompCartaPorteMercancia.ValorMercancia, venCompCartaPorteMercancia.FraccionArancelaria, 
			venCompCartaPorteMercancia.UUIDComercioExt
from venCompCartaPorteMercancia
	INNER JOIN stkUniMed ON venCompCartaPorteMercancia.Medida_id = stkUniMed.stkUniMed
	WHERE venCompCartaPorteMercancia.venMovimientos = @pIdentity
ORDER BY 1


-- Datos de cobranzas venta al contado/pto de venta --
Select 0 Renglon, '' Cartera_Id, '' DescripcionCartera, '' TipoCartera, Cast(0 As Numeric(19,2)) Importe, Cast(0 As Numeric(12,8)) Ponderado,
	'' CTBanco_Id, '' CTDescripcionBanco, '' CTClearing,
	'' CTClearingDias, GetDate() CTFechaVencimiento, '' CTsucBanco, '' CTcuentaBanco, 0 CTnumCheque, '' CTLectoraCheques,
	0 T3Cuotas, 0 T3Cupon, 0 T3Lote, 0 T3Comercio, 0 T3Terminal, 0 T3Promocion, Cast(0 As Numeric(19,8)) T3Coeficiente

RETURN @@Error
GO

------------------------------------------------------------------------------------------------
Drop Procedure venMovimientosConsultaDatos
Go
Create Procedure venMovimientosConsultaDatos
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
AS
SET NOCOUNT ON 

Declare @pIdentity bigint = (Select Asiento_Id
 From genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_id = @pEmpresa_id And 
	genAsiSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_Id) And 
	genAsiSegmentos.Segmento1N = @pSegmento1N And 
	genAsiSegmentos.Segmento2N = @pSegmento2N And 
	genAsiSegmentos.Segmento3N = @pSegmento3N And 
	genAsiSegmentos.Segmento4N = @pSegmento4N And 
	genAsiSegmentos.Segmento1C = @pSegmento1C And 
	genAsiSegmentos.Segmento2C = @pSegmento2C And 
	genAsiSegmentos.Segmento3C = @pSegmento3C And 
	genAsiSegmentos.Segmento4C = @pSegmento4C )
	
Exec venMovimientosDatos @pIdentity

SELECT venMovConStock.venMovimientos, venListasPrecios.ListaPrecio_Id, 
venListasPrecios.Descripcion as DescripcionListasPrecios, venMovConStock.TipoPrecioForm, venListasPrecios.LlevaImpuestoInclu
FROM venMovConStock 
INNER JOIN venListasPrecios  ON (venListasPrecios.venListasPrecios = venMovConStock.ListaPrecio_Id)
WHERE (venMovimientos = @pIdentity)

SELECT venMovConStockCr.venMovimientos, 
	venMovConStockCr.RenglonCuerpo, stkProductos.Producto_Id, stkProductos.Descripcion as Detalle, stkCondFisVenta.CFVenta_Id,
	stkCondFisVenta.Descripcion as DescripcionCondFisVenta, stkDepositos.Deposito_Id,
	stkDepositos.Descripcion as DescripcionDepositos, stkUniMed.Medida_Id, 
	stkUniMed.Descripcion as DescripcionUniMed, venMovConStockCr.Factor,
	venMovConStockCr.CantFacturada, venMovConStockCr.CantEntregada, venMovConStockCr.CantPendiente, 
	venMovConStockCr.CantOriginal, stkMedidaAlterna.Medida_Id MedidaAlterna, venMovConStockCr.CantidadAlternaForm,
	venMovConStockCr.TipoPrecio, venMovConStockCr.PrecioForm, 
	venMovConStockCr.PrecioLista, venMovConStockCr.PrecioVenta,
	venMovConStockCr.PrecioFormImpuesto, venMovConStockCr.PrecioFormImpuestoBon, venMovConStockCr.PrecioFormImpuestoTot,
	venMovConStockCr.ComiPorce, venMovConStockCr.Bonificacion, 
	venMovConStockCr.SubTotal, venMovConStockCr.SubTotalFormImpuesto,
	venMovConStockCr.Observaciones, venMovConStockCr.FechaEntrega, 
	venMovConStockCr.CantEntregadaForm
FROM venMovConStockCr 
LEFT JOIN stkProductos  ON (stkProductos.stkProductos = venMovConStockCr.Producto_Id)
LEFT JOIN stkCondFisVenta  ON stkCondFisVenta.stkCondFisVenta = stkProductos.CFVenta_Id
LEFT JOIN stkDepositos  ON (stkDepositos.stkDepositos = venMovConStockCr.Deposito_Id)
LEFT JOIN stkUniMed  ON (stkUniMed.stkUniMed = venMovConStockCr.Medida_Id)
Left Join stkUniMed stkMedidaAlterna On stkMedidaAlterna.stkUniMed = venMovConStockCr.Medida_Id
WHERE venMovConStockCr.venMovimientos = @pIdentity
Union All

SELECT venMovDetalle.venMovimientos, venMovDetalle.conRenglon,
	'' Producto_Id, venMovDetalle.Detalle, stkCondFisVenta.CFVenta_Id, stkCondFisVenta.Descripcion as DescripcionCondFisVenta,
	'' Deposito_Id, '' DescripcionDepositos, stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed,
	1 Factor, venMovDetalle.Cantidad CantFacturada, venMovDetalle.Cantidad CantEntragada, 0 CantPendiente,
	venMovDetalle.Cantidad CantOriginal, '' MedidaAlterna, 0 CantidadAlternaForm,
	'' TipoPrecio, venMovDetalle.ImporteUnitario PrecioForm, venMovDetalle.ImporteUnitario PrecioLista,
	venMovDetalle.ImporteUnitario PrecioVenta, venMovDetalle.ImporteUnitarioDelImpuesto PrecioFormImpuesto,
	venMovDetalle.ImporteUnitarioDelImpuesto PrecioFormImpuestoBon, venMovDetalle.ImporteUnitarioDelImpuesto PrecioFormImpuestoTot,
	0 ComiPorce, 0 Bonificacion,
	venMovDetalle.SubTotal, venMovDetalle.SubTotalFormImpuesto, '' Observaciones, dbo.FechaActual() FechaEntrega,
	0 CantEntregadaForm
FROM venMovDetalle 
INNER JOIN conMovCont  ON (conMovCont.conAsientos = venMovDetalle.venMovimientos) AND (conMovCont.Renglon = venMovDetalle.conRenglon)
LEFT JOIN stkCondFisVenta  ON (stkCondFisVenta.stkCondFisVenta = venMovDetalle.CFVenta_Id)
LEFT JOIN stkUniMed  ON (stkUniMed.stkUniMed = venMovDetalle.Medida_Id)
INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.cuenta_id 
Left JOIN conCentro1 ON conCentro1.conCentro1 = conMovCont.Centro1_id
Left JOIN conCentro2 ON conCentro2.conCentro2 = conMovCont.Centro2_id
WHERE (venMovimientos = @pIdentity)
Order By 2

SELECT venMovImpuestos.venMovimientos, venMovImpuestos.conRenglon,
	venImpuestos.Impuesto_Id, venImpuestos.Descripcion as DescripcionImpuestos, venMovImpuestos.Porcentaje,
	venMovImpuestos.BaseImponible, venMovImpuestos.Importe, venMovImpuestos.BaseImponibleMonedaNac,
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuenta,
	conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1,
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2,
	conMovCont.TipoMov, conMovCont.Clase, conMovCont.Importe as ImporteContable
FROM venMovImpuestos 
INNER JOIN conMovCont  ON (conMovCont.conAsientos = venMovImpuestos.venMovimientos) AND (conMovCont.Renglon = venMovImpuestos.conRenglon)
INNER JOIN venImpuestos  ON (venImpuestos.venImpuestos = venMovImpuestos.Impuesto_Id)
	INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.cuenta_id 
	Left JOIN conCentro1 ON conCentro1.conCentro1 = conMovCont.Centro1_id
	Left JOIN conCentro2 ON conCentro2.conCentro2 = conMovCont.Centro2_id
WHERE venMovimientos = @pIdentity
Order By 2

Exec genAtributosGeneralesIdentityDatos @pidentity, 'venMovimientos' 

SELECT genMovCuotas.CuotaNro, genMovCuotas.Importe, genMovCuotas.Saldo, genMovCuotas.FechaVencimiento
FROM genMovCuotas
WHERE
	genMovCuotas.Asiento_id = @pIdentity
ORDER BY 1

--Exec genSegmentosConfiguracion @pSegmento_Id, @pEmpresa_Id

SELECT venMovCSImpuestos.venMovimientos, venMovCSImpuestos.RenglonCuerpo, venImpuestos.Impuesto_Id,
	venImpuestos.Descripcion as DescripcionImpuestos, venMovCSImpuestos.Importe, venMovCSImpuestos.Porcentaje, venMovCSImpuestos.BaseImponible,
	venMovCSImpuestos.BaseImponibleMonedaNac
FROM venMovCSImpuestos 
INNER JOIN venMovConStockCr  ON (venMovConStockCr.venMovimientos = venMovCSImpuestos.venMovimientos) AND 
(venMovConStockCr.RenglonCuerpo = venMovCSImpuestos.RenglonCuerpo)
INNER JOIN venImpuestos  ON (venImpuestos.venImpuestos = venMovCSImpuestos.Impuesto_Id)
WHERE venMovCSImpuestos.venMovimientos = @pidentity


SELECT venMovSSImpuestos.venMovimientos, venMovSSImpuestos.ConRenglon, venImpuestos.Impuesto_Id,
	venImpuestos.Descripcion as DescripcionImpuestos, venMovSSImpuestos.Importe, 
	venMovSSImpuestos.Porcentaje, venMovSSImpuestos.BaseImponible, venMovSSImpuestos.BaseImponibleMonedaNac
FROM venMovSSImpuestos 
INNER JOIN venMovDetalle ON (venMovDetalle.venMovimientos = venMovSSImpuestos.venMovimientos) AND 
(venMovDetalle.ConRenglon = venMovSSImpuestos.ConRenglon)
INNER JOIN venImpuestos  ON (venImpuestos.venImpuestos = venMovSSImpuestos.Impuesto_Id)
WHERE venMovSSImpuestos.venMovimientos = @pidentity


SELECT venMovConStockCrCtas.venMovimientos, venMovConStockCrCtas.RenglonCuerpo,
	venMovConStockCrCtas.Renglon, conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuenta,
	conCentro1.Centro1_Id, conCentro1.Descripcion DescripcionCentro1, 
	conCentro2.Centro2_Id, conCentro2.Descripcion DescripcionCentro2,
	conMovCont.TipoMov, conMovCont.Clase, conMovCont.Importe as ImporteContable
FROM venMovConStockCrCtas 
INNER JOIN venMovConStockCr ON (venMovConStockCr.venMovimientos = venMovConStockCrCtas.venMovimientos) AND 
	(venMovConStockCr.RenglonCuerpo = venMovConStockCrCtas.RenglonCuerpo)
INNER JOIN conMovCont ON (conMovCont.conAsientos = venMovConStockCrCtas.venMovimientos) AND 
	(conMovCont.Renglon = venMovConStockCrCtas.Renglon)
Inner Join conCuentas On conMovCont.Cuenta_Id = conCuentas.conCuentas
Left Join conCentro1 On conMovCont.Centro1_Id = conCentro1.conCentro1
Left Join conCentro2 On conMovCont.Centro2_Id = conCentro2.conCentro2
WHERE (venMovConStockCrCtas.venMovimientos = @pIdentity)
Union All
Select venMovDetalle.venMovimientos, venMovDetalle.conRenglon, venMovDetalle.conRenglon,
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuenta,
	conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1,
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2,
	conMovCont.TipoMov, conMovCont.Clase, conMovCont.Importe as ImporteContable
FROM venMovDetalle 
INNER JOIN conMovCont ON (conMovCont.conAsientos = venMovDetalle.venMovimientos) AND (conMovCont.Renglon = venMovDetalle.conRenglon)
LEFT JOIN stkCondFisVenta ON (stkCondFisVenta.stkCondFisVenta = venMovDetalle.CFVenta_Id)
LEFT JOIN stkUniMed ON (stkUniMed.stkUniMed = venMovDetalle.Medida_Id)
INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.cuenta_id 
Left JOIN conCentro1 ON conCentro1.conCentro1 = conMovCont.Centro1_id
Left JOIN conCentro2 ON conCentro2.conCentro2 = conMovCont.Centro2_id
WHERE (venMovimientos = @pIdentity)

exec venMovimientosFiscalDatos @pIdentity
exec venMoviAnticipoDatos @pIdentity

Exec conAsientosAnulDatos @pidentity

RETURN @@Error
GO


------------------------------------------------------------------------------------------------
DROP PROCEDURE venMovimientosEliminar
GO
CREATE PROCEDURE venMovimientosEliminar
(
@pvenMovimientos bigint
)
AS
SET NOCOUNT ON 

DELETE FROM venMovimientos WHERE (venMovimientos = @pvenMovimientos)
 
RETURN @@Error 

GO

------------------------------------------------------------------------------------------------

Drop Procedure venMovimientosDatosSeg
Go
Create Procedure venMovimientosDatosSeg
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
AS
SET NOCOUNT ON 

Declare @pIdentity bigint = (Select Asiento_Id
 From genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_id = @pEmpresa_id And 
	genAsiSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_Id) And 
	genAsiSegmentos.Segmento1N = @pSegmento1N And 
	genAsiSegmentos.Segmento2N = @pSegmento2N And 
	genAsiSegmentos.Segmento3N = @pSegmento3N And 
	genAsiSegmentos.Segmento4N = @pSegmento4N And 
	genAsiSegmentos.Segmento1C = @pSegmento1C And 
	genAsiSegmentos.Segmento2C = @pSegmento2C And 
	genAsiSegmentos.Segmento3C = @pSegmento3C And 
	genAsiSegmentos.Segmento4C = @pSegmento4C )

exec venMovimientosDatos @pIdentity
go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venMovimientosCFDIR.sql*/
DROP PROCEDURE venMovimientosCFDIRGuardar
GO
CREATE PROCEDURE venMovimientosCFDIRGuardar
(
@pvenMovimientos bigint,
@pvenMovimientosR bigint,
@pTipoRelacion char(2) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venMovimientosCFDIR WHERE (venMovimientos = @pvenMovimientos) AND (venMovimientosR = @pvenMovimientosR)))
BEGIN 
	UPDATE venMovimientosCFDIR
	SET TipoRelacion = @pTipoRelacion
	WHERE (venMovimientos = @pvenMovimientos) AND (venMovimientosR = @pvenMovimientosR)
END 
ELSE 
BEGIN 
	INSERT INTO venMovimientosCFDIR
	(
		venMovimientos,
		venMovimientosR,
		TipoRelacion
	)
	VALUES 
	(
		@pvenMovimientos,
		@pvenMovimientosR,
		@pTipoRelacion
	)
END 

GO

DROP PROCEDURE venMovimientosCFDIRDatos
GO
CREATE PROCEDURE venMovimientosCFDIRDatos
(
@pvenMovimientos bigint = null,
@pvenMovimientosR bigint = null
)
AS
SET NOCOUNT ON 

SELECT venMovimientosCFDIR.venMovimientos, venMovimientosCFDIR.venMovimientosR, venMovimientosCFDIR.TipoRelacion,
genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, 
genAsiSegmentos.Segmento4N, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, 
genAsiSegmentos.Segmento4C, dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Segmento
FROM venMovimientosCFDIR 
INNER JOIN venMovimientos ON (venMovimientos.venMovimientos = venMovimientosCFDIR.venMovimientos)
INNER JOIN venMovimientos venMovimientos2 ON (venMovimientos2.venMovimientos = venMovimientosCFDIR.venMovimientosR)
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = venMovimientos2.venMovimientos
Inner Join genSegmentos On genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
WHERE venMovimientosCFDIR.venMovimientos = IsNull(@pvenMovimientos, venMovimientosCFDIR.venMovimientos)
AND venMovimientosCFDIR.venMovimientosR = IsNull(@pvenMovimientosR, venMovimientosCFDIR.venMovimientosR)
 
 RETURN @@Error 

GO

DROP PROCEDURE venMovimientosCFDIREliminar
GO
CREATE PROCEDURE venMovimientosCFDIREliminar
(
@pvenMovimientos bigint = null,
@pvenMovimientosR bigint = null
)
AS
SET NOCOUNT ON 

DELETE FROM venMovimientosCFDIR 
WHERE venMovimientosCFDIR.venMovimientos = IsNull(@pvenMovimientos, venMovimientosCFDIR.venMovimientos)
AND venMovimientosCFDIR.venMovimientosR = IsNull(@pvenMovimientosR, venMovimientosCFDIR.venMovimientosR)
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venMovimientosConsulta.sql*/
--Exec venMovimientosConsultaDrillDown 1, 'FC', 20, 0, 0, 0, 'F', '1492', 'A', ''

DROP PROCEDURE venMovimientosConsultaDrillDown
GO
CREATE PROCEDURE venMovimientosConsultaDrillDown
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
as

SET NOCOUNT ON

Declare @pIdentity bigint = (Select Asiento_Id
 From genAsiSegmentos
 Where
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and 
	genAsiSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C )

Exec venMovimientosDatos @pIdentity

-- Traigo el cuerpo conjunto

SELECT venMovConStockCr.RenglonCuerpo, stkProductos.Producto_Id, stkProductos.Descripcion, venMovConStockCr.CantOriginal, 
	stkUniMed.Medida_Id, venMovConStockCr.PrecioForm, venMovConStockCr.Bonificacion,
	venMovConStockCr.Observaciones,
	CONVERT(Numeric(18,2),
	ROUND(venMovConStockCr.CantOriginal * venMovConStockCr.PrecioForm * (1-venMovConStockCr.Bonificacion/100),2)) as SubTotal,
	stkDepositos.Deposito_Id, MedidaAlt.Medida_Id MedidaAlterna, venMovConStockCr.CantidadAlternaForm
From venMovConStockCr 
Inner Join stkProductos ON stkProductos.stkProductos = venMovConStockCr.Producto_Id
Inner Join stkUniMed ON stkUniMed.stkUniMed = venMovConStockCr.Medida_Id
Inner Join stkDepositos On stkDepositos.stkDepositos = venMovConStockCr.Deposito_Id
Left Join stkUniMed MedidaAlt On MedidaAlt.stkUniMed = venMovConStockCr.MedidaAlterna
WHERE venMovConStockCr.venMovimientos = @pIdentity
UNION ALL
SELECT venMovDetalle.conRenglon, venMovDetalle.Producto_Id, venMovDetalle.Detalle Descripcion, 
	venMovDetalle.Cantidad, 
	stkUniMed.Medida_Id, venMovDetalle.ImporteUnitario, 0 AS Bonificacion,
	'' AS Observaciones,
	CONVERT(Numeric(18,2),
	ROUND(venMovDetalle.Cantidad * venMovDetalle.ImporteUnitario,2)) as SubTotal, '' Deposito_Id, '' MedidaAlterna, 0 CantidadAlternaForm
From venMovDetalle
Inner Join stkUniMed ON stkUniMed.stkUniMed = venMovDetalle.Medida_Id
WHERE venMovDetalle.venMovimientos = @pIdentity
Order by 1

	
Exec VenMovImpuestosDatos @pIdentity
Exec venMovimientosFiscalDatos @pIdentity
Exec venMovimientosFiscalINEDatos @pIdentity
Exec venMovimientosMetodoPagoDatos @pIdentity
Exec venMovimientosCFDIRDatos @pIdentity -- AR
Exec venMovimientosCFDIRDatos @pIdentity -- MX
Exec venMoviAnticipoDatos @pIdentity


SELECT stkMoviSerie.stkMoviCabe, venMovStkHist.RenglonCuerpo Renglon, stkMoviSerie.Serie, stkMoviSerie.Cantidad / stkMoviCuerpo.Factor Cantidad,
stkSerieVencimiento.Vencimiento, stkUbicaciones.Ubicacion_Id
From stkMoviSerie 
Inner Join stkMoviCuerpo ON stkMoviCuerpo.stkMoviCabe = stkMoviSerie.stkMoviCabe AND stkMoviCuerpo.Renglon = stkMoviSerie.Renglon
Left Join stkSerieVencimiento On stkSerieVencimiento.Serie = stkMoviSerie.Serie And stkSerieVencimiento.Producto_Id = stkMoviCuerpo.Producto_Id And
	stkSerieVencimiento.Empresa_Id = @pEmpresa_id
Inner Join venMovStkHist On venMovStkHist.stkMoviCabe = stkMoviSerie.stkMoviCabe And venMovStkHist.Renglon = stkMoviCuerpo.Renglon
left join (stkMoviSerieUbicacion INNER JOIN stkUbicaciones ON
	stkUbicaciones.stkUbicaciones = stkMoviSerieUbicacion.Ubicacion_Id) ON  
	stkMoviSerieUbicacion.stkMoviCabe = venMovStkHist.stkMoviCabe and 
	  stkMoviSerieUbicacion.Renglon  = venMovStkHist.Renglon
WHERE venMovStkHist.venMovimientos = @pIdentity

Exec venMoviAnticipoDatos @pIdentity

-- V2 UBICACIONES
Select stkMoviUbicacion.stkMoviCabe, stkMoviUbicacion.Renglon, 
	stkProductos.Producto_Id, stkDepositos.Deposito_Id, stkUbicaciones.Ubicacion_Id,
	stkMoviUbicacion.Cantidad, stkMoviUbicacion.CantidadAlterna
From stkMoviUbicacion inner join stkMoviCuerpo ON 
stkMoviUbicacion.stkMoviCabe = stkMoviCuerpo.stkMoviCabe and
stkMoviUbicacion.Renglon = stkMoviCuerpo.Renglon
Inner Join stkProductos on  stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
Inner Join stkDepositos on  stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id
Inner Join stkUbicaciones ON stkUbicaciones.stkUbicaciones = stkMoviUbicacion.Ubicacion_Id
Inner Join venMovStkHist On venMovStkHist.stkMoviCabe = stkMoviCuerpo.stkMoviCabe And venMovStkHist.Renglon = stkMoviCuerpo.Renglon
inner join venMovimientos ON venMovimientos.venMovimientos = venMovStkHist.venMovimientos
Inner Join venTipoMov ON venTipoMov.Signo = 1
WHERE venMovStkHist.venMovimientos = @pIdentity 



Select stkMoviUbicacion.stkMoviCabe, stkMoviUbicacion.Renglon, 
	stkProductos.Producto_Id, stkDepositos.Deposito_Id, stkUbicaciones.Ubicacion_Id,
	stkMoviUbicacion.Cantidad, stkMoviUbicacion.CantidadAlterna
From stkMoviUbicacion 
Inner Join stkMoviCuerpo ON stkMoviUbicacion.stkMoviCabe = stkMoviCuerpo.stkMoviCabe And stkMoviUbicacion.Renglon = stkMoviCuerpo.Renglon
Inner Join stkProductos on stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
Inner Join stkDepositos on stkDepositos.stkDepositos = stkMoviCuerpo.Deposito_Id
Inner Join stkUbicaciones ON stkUbicaciones.stkUbicaciones = stkMoviUbicacion.Ubicacion_Id
Inner Join venMovStkHist On venMovStkHist.stkMoviCabe = stkMoviCuerpo.stkMoviCabe And venMovStkHist.Renglon = stkMoviCuerpo.Renglon
Inner Join venMovimientos ON venMovimientos.venMovimientos = venMovStkHist.venMovimientos
Inner Join venTipoMov ON venTipoMov.Signo = -1
WHERE venMovStkHist.venMovimientos = @pIdentity

-- Relacionados __
-- Pedidos
SELECT dbo.Segmento(venPediSegmentos.Segmento_Id, 
	venPediSegmentos.Segmento1C, venPediSegmentos.Segmento2C, 
	venPediSegmentos.Segmento3C, venPediSegmentos.Segmento4C, 
	venPediSegmentos.Segmento1N, venPediSegmentos.Segmento2N,
	venPediSegmentos.Segmento3N, venPediSegmentos.Segmento4N) as Relacionado,
	genSegmentos.Segmento_Id, disFormularios.Formulario_Id, disFormularios.Descripcion
From venPediFacturados inner join venPediSegmentos ON venPediFacturados.venPedidos = venPediSegmentos.venPedidos
Inner Join genSegmentos ON genSegmentos.genSegmentos  = venPediSegmentos.Segmento_Id
Cross Join (genMenus Inner Join disFormularios On disFormularios.disFormularios = genMenus.Formulario_Id)
WHERE venPediFacturados.venMovimientos = @pIdentity And genMenus.Orden = '539920'
UNION ALL
SELECT distinct dbo.Segmento(venPediSegmentos.Segmento_Id, 
	venPediSegmentos.Segmento1C, venPediSegmentos.Segmento2C, 
	venPediSegmentos.Segmento3C, venPediSegmentos.Segmento4C, 
	venPediSegmentos.Segmento1N, venPediSegmentos.Segmento2N,
	venPediSegmentos.Segmento3N, venPediSegmentos.Segmento4N) as Relacionado,
	genSegmentos.Segmento_Id, disFormularios.Formulario_Id, disFormularios.Descripcion
From venMovConStockCrPed inner join venPediSegmentos ON venMovConStockCrPed.venPedidos = venPediSegmentos.venPedidos
Inner Join genSegmentos ON genSegmentos.genSegmentos = venPediSegmentos.Segmento_Id
Cross Join (genMenus Inner Join disFormularios On disFormularios.disFormularios = genMenus.Formulario_Id)
WHERE venMovConStockCrPed.venMovimientos = @pIdentity And genMenus.Orden = '531000'
Union All
-- Remitos --
SELECT DISTINCT dbo.Segmento(genAsiSegmentos.Segmento_Id, 
	genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, 
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, 
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as Relacionado, 
	genSegmentos.Segmento_Id, disFormularios.Formulario_Id, disFormularios.Descripcion
From venMovStkHist 
Inner Join genAsiSegmentos ON venMovStkHist.stkMoviCabe = genAsiSegmentos.Asiento_Id
Inner Join genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
Cross Join (genMenus Inner Join disFormularios On disFormularios.disFormularios = genMenus.Formulario_Id)
WHERE venMovStkHist.venMovimientos = @pIdentity And genMenus.Orden = '239010'
Union All
-- Cotizaciones --
SELECT dbo.Segmento(venCotizSegmento.Segmento_Id, 
	venCotizSegmento.Segmento1C, venCotizSegmento.Segmento2C, 
	venCotizSegmento.Segmento3C, venCotizSegmento.Segmento4C, 
	venCotizSegmento.Segmento1N, venCotizSegmento.Segmento2N,
	venCotizSegmento.Segmento3N, venCotizSegmento.Segmento4N) as Relacionado, 
	genSegmentos.Segmento_Id, disFormularios.Formulario_Id, disFormularios.Descripcion
From venCotizFactura inner join venCotizSegmento ON venCotizFactura.venCotizaciones = venCotizSegmento.venCotizaciones
Inner Join genSegmentos ON genSegmentos.genSegmentos  = venCotizSegmento.Segmento_Id
Cross Join (genMenus Inner Join disFormularios On disFormularios.disFormularios = genMenus.Formulario_Id)
WHERE venCotizFactura.venMovimientos = @pIdentity And genMenus.Orden = '524010'



-- todo reparto

-- todo hoja de ruta

Exec genAtributosGeneralesIdentityDatos @pidentity, 'venMovimientos' 

SELECT venMovConStock.venMovimientos, venListasPrecios.ListaPrecio_Id, 
venListasPrecios.Descripcion as DescripcionListasPrecios, venMovConStock.TipoPrecioForm, venListasPrecios.LlevaImpuestoInclu
FROM venMovConStock 
INNER JOIN venListasPrecios ON venListasPrecios.venListasPrecios = venMovConStock.ListaPrecio_Id
WHERE venMovimientos = @pIdentity

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venMovimientosCPDatos.sql*/
DROP procedure venMovimientosCPDatos
GO

create procedure venMovimientosCPDatos(
	@pEmpresa_Id int, 
	@pSegmento_Id VarChar(10), 
	@pSegmento1N int,
	@pSegmento2N int,
	@pSegmento3N int,
	@pSegmento4N int,
	@pSegmento1C VarChar(20),
	@pSegmento2C VarChar(20),
	@pSegmento3C VarChar(20),
	@pSegmento4C VarChar(20)
)
as

SELECT genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N,
genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
conAsientos.Fecha, venClientes.Cliente_Id, venClientes.RazonSocial,
venClieHabitual.Direccion1_Entr as Calle, venClieHabitual.NroExterior_Entr NroExterior,
venClieHabitual.NroInterior_Entr NroInterior, venClieHabitual.CodPostal_Entr CodPostal, 
venClieHabitual.Direccion2_Entr as Colonia,  venClieHabitual.Localidad_Entr as Localidad,
genProvincias.Provincia_Id, genPaises.Pais_Id,
venClieHabitual.c_ColoniaEntr, venClieHabitual.c_LocalidadEntr, venClieHabitual.c_MunicipioEntr,
venCompCartaPorte.TotalDistRec, venCamiones.Patente_Id Camion_Id,
Remolque1.Patente_Id Remolque1, Remolque2.Patente_Id Remolque2, 
venOperadores.Operador_Id, venCompCartaPorteOrigen.FechaHoraSalida, 
venCompCartaPorteDestino.FechaHoraProgLlegada, 
dbo.FechaSinHora(dbo.FechaActual()) FechaCP,
 ' ' Archivo, ' ' NombreArchivo, ' ' Extension

from venMovimientos 
	inner join conAsientos ON venMovimientos.venMovimientos = conAsientos.conAsientos
	inner join genAsiSegmentos ON  genAsiSegmentos.Asiento_id =conAsientos.conAsientos
	Inner Join venClientes ON  venClientes.genEntidades = venMovimientos.Cliente_Id
	INNER JOIN venClieHabitual ON  venClieHabitual.genEntidades =venMovimientos.Cliente_Id and 
								   venClieHabitual.Sucursal =  	venMovimientos.Sucursal
	INNER JOIN genSegmentos ON  genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	INNER JOIN genProvincias ON genProvincias.genProvincias = venClieHabitual.Provincia_Id_Entr
	INNER JOIN genPaises ON genPaises.genPaises = venClieHabitual.Pais_Id_Entr
	LEFT JOIN venCompCartaPorte ON venCompCartaPorte.venmovimientos = venmovimientos.venMovimientos
	LEFT JOIN venCamiones ON  venCamiones.venCamiones = venCompCartaPorte.Camion_Id
	LEFT JOIN venCamiones Remolque1 ON  Remolque1.venCamiones = venCompCartaPorte.Remolque1
	LEFT JOIN venCamiones Remolque2 ON  Remolque2.venCamiones = venCompCartaPorte.Remolque2
	LEFT JOIN venOperadores ON  venOperadores.venOperadores =venCompCartaPorte.Operador_Id
	LEFT JOIN venCompCartaPorteDestino ON  venCompCartaPorteDestino.venmovimientos = venmovimientos.venmovimientos
	LEFT JOIN venCompCartaPorteOrigen ON  venCompCartaPorteOrigen.venmovimientos = venmovimientos.venmovimientos
WHERE
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and 
	genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C

-- cuerpo

SELECT venMovConStockCr.RenglonCuerpo, 
	stkProductos.Producto_Id, stkProductos.CodigoFiscal as BienesTransp, stkProductos.Descripcion, venMovConStockCr.CantFacturada as Cantidad ,
	venMovConStockCr.PrecioVenta as Precio, stkUniMed.Medida_Id, stkProductos.PesoEnKg, 
	stkProductos.MaterialPeligroso, stkProductos.CveMaterialPeligroso, stkProductos.Embalaje, 
		CAST(1 as bit) Marca
FROM venMovimientos 
	inner join conAsientos ON venMovimientos.venMovimientos = conAsientos.conAsientos
	inner join genAsiSegmentos ON  genAsiSegmentos.Asiento_id =conAsientos.conAsientos
	INNER JOIN genSegmentos ON  genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	Inner join venMovConStockCr ON  venMovConStockCr.venMovimientos = venMovimientos.venMovimientos
	iNNER JOIN stkProductos ON stkProductos.stkProductos =venMovConStockCr.Producto_Id
	inner join  stkUniMed on  stkUniMed.stkUniMed = stkProductos.Medida_Id
WHERE
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and 
	genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C
UNION ALL
SELECT venMovConStockCr.Renglon, ' ' as Producto_Id, 
	venMovConStockCr.BienesTransp, venMovConStockCr.Descripcion, venMovConStockCr.Cantidad ,
	venMovConStockCr.ValorMercancia as Precio, stkUniMed.Medida_Id, venMovConStockCr.PesoEnKg, 
	venMovConStockCr.MaterialPeligroso, venMovConStockCr.CveMaterialPeligroso, venMovConStockCr.Embalaje, 
		CAST(1 as bit) Marca
FROM venMovimientos 
	inner join conAsientos ON venMovimientos.venMovimientos = conAsientos.conAsientos
	inner join genAsiSegmentos ON  genAsiSegmentos.Asiento_id =conAsientos.conAsientos
	INNER JOIN genSegmentos ON  genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	Inner join venCompCartaPorteMercancia venMovConStockCr ON  venMovConStockCr.venMovimientos = venMovimientos.venMovimientos
	inner join  stkUniMed on  stkUniMed.stkUniMed = venMovConStockCr.Medida_Id
WHERE
	genAsiSegmentos.Empresa_Id = @pEmpresa_Id and 
	genAsiSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	genAsiSegmentos.Segmento1N = @pSegmento1N and 
	genAsiSegmentos.Segmento2N = @pSegmento2N and 
	genAsiSegmentos.Segmento3N = @pSegmento3N and 
	genAsiSegmentos.Segmento4N = @pSegmento4N and 
	genAsiSegmentos.Segmento1C = @pSegmento1C and 
	genAsiSegmentos.Segmento2C = @pSegmento2C and 
	genAsiSegmentos.Segmento3C = @pSegmento3C and 
	genAsiSegmentos.Segmento4C = @pSegmento4C

ORDER BY 1
	

	
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venMovimientosCRExpMx.sql*/
DROP PROCEDURE venMovimientosCRExpMxGuardar
GO
CREATE PROCEDURE venMovimientosCRExpMxGuardar
(
@pvenMovimientos bigint,
@pRenglonCuerpo smallint,
@pCantidadAduana numeric(18,4),
@pUnidadAduana varchar(2),
@pValorUnitarioAduana numeric(18,4),
@pValorDolares numeric(18,4)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venMovimientosCRExpMx WHERE (venMovimientos = @pvenMovimientos) AND (RenglonCuerpo = @pRenglonCuerpo)))
BEGIN 
	UPDATE venMovimientosCRExpMx
	SET		CantidadAduana = @pCantidadAduana,
		UnidadAduana = @pUnidadAduana,
		ValorUnitarioAduana = @pValorUnitarioAduana,
		ValorDolares = @pValorDolares
	WHERE (venMovimientos = @pvenMovimientos) AND (RenglonCuerpo = @pRenglonCuerpo)
END 
ELSE 
BEGIN 
	INSERT INTO venMovimientosCRExpMx
	(
		venMovimientos,
		RenglonCuerpo,
		CantidadAduana,
		UnidadAduana,
		ValorUnitarioAduana,
		ValorDolares
	)
	VALUES 
	(
		@pvenMovimientos,
		@pRenglonCuerpo,
		@pCantidadAduana,
		@pUnidadAduana,
		@pValorUnitarioAduana,
		@pValorDolares
	)
END 

GO

DROP PROCEDURE venMovimientosCRExpMxDatos
GO
CREATE PROCEDURE venMovimientosCRExpMxDatos
(
@pvenMovimientos bigint,
@pRenglonCuerpo smallint
)
AS
SET NOCOUNT ON 

SELECT venMovimientosCRExpMx.venMovimientos, venMovimientosCRExpMx.RenglonCuerpo, venMovimientosCRExpMx.CantidadAduana, venMovimientosCRExpMx.UnidadAduana,
	venMovimientosCRExpMx.ValorUnitarioAduana, venMovimientosCRExpMx.ValorDolares
FROM venMovimientosCRExpMx 
WHERE (venMovimientos = @pvenMovimientos)
AND (RenglonCuerpo = @pRenglonCuerpo)
 
 RETURN @@Error 

GO

DROP PROCEDURE venMovimientosCRExpMxEliminar
GO
CREATE PROCEDURE venMovimientosCRExpMxEliminar
(
@pvenMovimientos bigint = NULL,
@pRenglonCuerpo smallint = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venMovimientosCRExpMx 
WHERE (venMovimientos = ISNULL(@pvenMovimientos, venMovimientos))
AND (RenglonCuerpo = ISNULL(@pRenglonCuerpo, RenglonCuerpo))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venMovimientosExpMX.sql*/
DROP PROCEDURE venMovimientosExpMXGuardar
GO
CREATE PROCEDURE venMovimientosExpMXGuardar
(
@pvenMovimientos bigint,
@pMotivo_id varchar(2) = NULL,
@pTipoOperacion char(1),
@pClaveDePedimento char(2),
@pCertificadoOrigen int,
@pNumCertificadoOrigen varchar(40) = NULL,
@pNumeroExportadorConfiable varchar(50) = NULL,
@pSubdivision int,
@pObservaciones varchar(300) = NULL,
@pTipoCambioUSD numeric(18,4) = NULL,
@pTotalUSD numeric(18,4) = NULL,
@pUsaProv Sino,
@pPropNumRegIdTrib varchar(40) = NULL,
@pPropResidenciaFiscal char(3) = NULL,
@pReceptorNumRegIdTrib varchar(40) = NULL,
@pDestinatario_id VarChar(15) = NULL,
@pSucursalDest int = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venMovimientosExpMX WHERE (venMovimientos = @pvenMovimientos)))
BEGIN 
	UPDATE venMovimientosExpMX
	SET		Motivo_id = @pMotivo_id,
		TipoOperacion = @pTipoOperacion,
		ClaveDePedimento = @pClaveDePedimento,
		CertificadoOrigen = @pCertificadoOrigen,
		NumCertificadoOrigen = @pNumCertificadoOrigen,
		NumeroExportadorConfiable = @pNumeroExportadorConfiable,
		Subdivision = @pSubdivision,
		Observaciones = @pObservaciones,
		TipoCambioUSD = @pTipoCambioUSD,
		TotalUSD = @pTotalUSD,
		UsaProv = @pUsaProv,
		PropNumRegIdTrib = @pPropNumRegIdTrib,
		PropResidenciaFiscal = @pPropResidenciaFiscal,
		ReceptorNumRegIdTrib = @pReceptorNumRegIdTrib,
		Destinatario_id = dbo.FuncFKvenClientes(@pDestinatario_id),
		SucursalDest = @pSucursalDest
	WHERE (venMovimientos = @pvenMovimientos)
END 
ELSE 
BEGIN 
	INSERT INTO venMovimientosExpMX
	(
		venMovimientos,
		Motivo_id,
		TipoOperacion,
		ClaveDePedimento,
		CertificadoOrigen,
		NumCertificadoOrigen,
		NumeroExportadorConfiable,
		Subdivision,
		Observaciones,
		TipoCambioUSD,
		TotalUSD,
		UsaProv,
		PropNumRegIdTrib,
		PropResidenciaFiscal,
		ReceptorNumRegIdTrib,
		Destinatario_id,
		SucursalDest
	)
	VALUES 
	(
		@pvenMovimientos,
		@pMotivo_id,
		@pTipoOperacion,
		@pClaveDePedimento,
		@pCertificadoOrigen,
		@pNumCertificadoOrigen,
		@pNumeroExportadorConfiable,
		@pSubdivision,
		@pObservaciones,
		@pTipoCambioUSD,
		@pTotalUSD,
		@pUsaProv,
		@pPropNumRegIdTrib,
		@pPropResidenciaFiscal,
		@pReceptorNumRegIdTrib,
		dbo.FuncFKvenClientes(@pDestinatario_id),
		@pSucursalDest
	)
END 

GO

DROP PROCEDURE venMovimientosExpMXDatos
GO
CREATE PROCEDURE venMovimientosExpMXDatos
(
@pvenMovimientos bigint
)
AS
SET NOCOUNT ON 

SELECT venMovimientosExpMX.venMovimientos, venMovimientosExpMX.Motivo_id, venMovimientosExpMX.TipoOperacion, venMovimientosExpMX.ClaveDePedimento,
	venMovimientosExpMX.CertificadoOrigen, venMovimientosExpMX.NumCertificadoOrigen, venMovimientosExpMX.NumeroExportadorConfiable, venMovimientosExpMX.Subdivision,
	venMovimientosExpMX.Observaciones, venMovimientosExpMX.TipoCambioUSD, venMovimientosExpMX.TotalUSD, venMovimientosExpMX.UsaProv,
	venMovimientosExpMX.PropNumRegIdTrib, venMovimientosExpMX.PropResidenciaFiscal, venMovimientosExpMX.ReceptorNumRegIdTrib, 
	venClientes.Cliente_Id as Destinatario_id,
	venMovimientosExpMX.SucursalDest
FROM venMovimientosExpMX 
left join venClientes ON 
venClientes.genentidades = venMovimientosExpMX.Destinatario_Id
WHERE (venMovimientos = @pvenMovimientos)
 
 RETURN @@Error 

GO

DROP PROCEDURE venMovimientosExpMXEliminar
GO
CREATE PROCEDURE venMovimientosExpMXEliminar
(
@pvenMovimientos bigint = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venMovimientosExpMX 
WHERE (venMovimientos = ISNULL(@pvenMovimientos, venMovimientos))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venMovimientosFiscal.sql*/
DROP PROCEDURE venMovimientosFiscalGuardar
GO
CREATE PROCEDURE venMovimientosFiscalGuardar
(
@pvenMovimientos bigint,
@pClaveFiscal varchar(36) = NULL,
@pFecha qFecha = NULL,
@pLetra char(1) = Null,
@pComprobante_Id int = Null,
@pEsFactElec Sino = NULL,
@pMotivo QMemo = NULL,
@pXMLFiscal text = NULL,
@pSelloDigital varchar(Max) = NULL,
@pFechaString varchar(20) = NULL,
@pSelloFiscal varchar(Max) = NULL,
@pNoCertificadoFiscal varchar(20) = NULL,
@pNoCertificadoPropio varchar(20) = Null,
@pFechaAutorizacion qFecha = NULL,
@pFechaDesde qFecha = Null,
@pNumeroDesde int = NULL,
@pNumeroHasta int = NULL, 
@pRfcProvCertif VarChar(13)=NULL,
@pLeyenda VarChar(50) = NULL, 
@pTipoProceso VarChar(10)= NULL,
@pTipoComite VarChar(18) = NULL,
@pidContabilidad Numeric(6,0) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venMovimientosFiscal WHERE (venMovimientos = @pvenMovimientos)))
BEGIN 
	UPDATE venMovimientosFiscal
	SET		ClaveFiscal = @pClaveFiscal,
		Fecha = @pFecha,
		Letra = @pLetra,
		Comprobante_Id = @pComprobante_Id,
		EsFactElec = @pEsFactElec,
		Motivo = @pMotivo,
		XMLFiscal = @pXMLFiscal,
		SelloDigital = @pSelloDigital,
		FechaString = @pFechaString,
		SelloFiscal = @pSelloFiscal,
		NoCertificadoFiscal = @pNoCertificadoFiscal,
		NoCertificadoPropio = @pNoCertificadoPropio,
		FechaAutorizacion = @pFechaAutorizacion,
		FechaDesde = @pFechaDesde,
		NumeroDesde = @pNumeroDesde,
		NumeroHasta = @pNumeroHasta, 
		RfcProvCertif = @pRfcProvCertif,
		Leyenda = @pLeyenda,
		TipoProceso = @pTipoProceso,
		TipoComite = @pTipoComite,
		idContabilidad = @pidContabilidad
	WHERE (venMovimientos = @pvenMovimientos)
END 
ELSE 
BEGIN 
	INSERT INTO venMovimientosFiscal
	(
		venMovimientos,
		ClaveFiscal,
		Fecha,
		Letra,
		Comprobante_Id,
		EsFactElec,
		Motivo,
		XMLFiscal,
		SelloDigital,
		FechaString,
		SelloFiscal,
		NoCertificadoFiscal,
		NoCertificadoPropio,
		FechaAutorizacion,
		FechaDesde,
		NumeroDesde,
		NumeroHasta, 
		RfcProvCertif,
		Leyenda, 
		TipoProceso, 
		TipoComite,
		idContabilidad
	)
	VALUES 
	(
		@pvenMovimientos,
		@pClaveFiscal,
		@pFecha,
		@pLetra,
		@pComprobante_Id,
		@pEsFactElec,
		@pMotivo,
		@pXMLFiscal,
		@pSelloDigital,
		@pFechaString,
		@pSelloFiscal,
		@pNoCertificadoFiscal,
		@pNoCertificadoPropio,
		@pFechaAutorizacion,
		@pFechaDesde,
		@pNumeroDesde,
		@pNumeroHasta, 
		@pRfcProvCertif,
		@pLeyenda, 
		@pTipoProceso, 
		@pTipoComite,
		@pidContabilidad
	)
END 

GO

DROP PROCEDURE venMovimientosFiscalDatos
GO
CREATE PROCEDURE venMovimientosFiscalDatos
(
@pvenMovimientos bigint
)
AS
SET NOCOUNT ON 

SELECT venMovimientosFiscal.venMovimientos, venMovimientosFiscal.ClaveFiscal, 
venMovimientosFiscal.Fecha, venMovimientosFiscal.Letra, venMovimientosFiscal.Comprobante_Id, genTiposCompAfip.Descripcion DescripcionTipoComp,
venMovimientosFiscal.EsFactElec, venMovimientosFiscal.Motivo, venMovimientosFiscal.XMLFiscal, 
venMovimientosFiscal.SelloDigital, venMovimientosFiscal.FechaString, venMovimientosFiscal.SelloFiscal, 
venMovimientosFiscal.NoCertificadoFiscal, venMovimientosFiscal.NoCertificadoPropio, venMovimientosFiscal.FechaAutorizacion, 
venMovimientosFiscal.FechaDesde, venMovimientosFiscal.NumeroDesde, venMovimientosFiscal.NumeroHasta, 
venMovimientosFiscal.RfcProvCertif,venMovimientosFiscal.Leyenda, venMovimientosFiscal.TipoProceso, 
venMovimientosFiscal.TipoComite,venMovimientosFiscal.idContabilidad
FROM venMovimientosFiscal
Left Join genTiposCompAfip On genTiposCompAfip.Comprobante_Id = venMovimientosFiscal.Comprobante_Id
WHERE (venMovimientos = @pvenMovimientos)
 
 RETURN @@Error 

GO

DROP PROCEDURE venMovimientosFiscalEliminar
GO
CREATE PROCEDURE venMovimientosFiscalEliminar
(
@pvenMovimientos bigint
)
AS
SET NOCOUNT ON 

DELETE FROM venMovimientosFiscal 
WHERE (venMovimientos = @pvenMovimientos)
 
 RETURN @@Error 

GO



DROP PROCEDURE venMovimientosFiscalActuAcuse
GO
CREATE PROCEDURE venMovimientosFiscalActuAcuse
(
@pvenMovimientos bigint,
@pAcuse VarChar(Max) 
)
AS
	UPDATE venMovimientosFiscal
	SET	Acuse = @pAcuse
	WHERE (venMovimientos = @pvenMovimientos)

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venMovimientosFiscalINE.sql*/
DROP PROCEDURE venMovimientosFiscalINEGuardar
GO
CREATE PROCEDURE venMovimientosFiscalINEGuardar
(
@pvenMovimientos bigint,
@pClaveIdentidad varchar(3) ,
@pidContabilidad numeric(6,0) ,
@pAmbito varchar(9) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venMovimientosFiscalINE WHERE (venMovimientos = @pvenMovimientos) AND (ClaveIdentidad = @pClaveIdentidad) AND (idContabilidad = @pidContabilidad)))
BEGIN 
	UPDATE venMovimientosFiscalINE
	SET		Ambito = @pAmbito
	WHERE (venMovimientos = @pvenMovimientos) AND (ClaveIdentidad = @pClaveIdentidad) AND (idContabilidad = @pidContabilidad)
END 
ELSE 
BEGIN 
	INSERT INTO venMovimientosFiscalINE
	(
		venMovimientos,
		ClaveIdentidad,
		idContabilidad,
		Ambito
	)
	VALUES 
	(
		@pvenMovimientos,
		@pClaveIdentidad,
		@pidContabilidad,
		@pAmbito
	)
END 

GO

DROP PROCEDURE venMovimientosFiscalINEDatos
GO
CREATE PROCEDURE venMovimientosFiscalINEDatos
(
@pvenMovimientos bigint,
@pClaveIdentidad varchar(3) = NULL,
@pidContabilidad numeric(5) = NULL
)
AS
SET NOCOUNT ON 

SELECT venMovimientosFiscalINE.venMovimientos, venMovimientosFiscalINE.ClaveIdentidad, venMovimientosFiscalINE.idContabilidad, venMovimientosFiscalINE.Ambito
FROM venMovimientosFiscalINE 
WHERE (venMovimientos = @pvenMovimientos)
AND (ClaveIdentidad = ISNULL(@pClaveIdentidad,ClaveIdentidad))
AND (idContabilidad = ISNULL(@pidContabilidad,idContabilidad))
 
 RETURN @@Error 

GO

DROP PROCEDURE venMovimientosFiscalINEEliminar
GO
CREATE PROCEDURE venMovimientosFiscalINEEliminar
(
@pvenMovimientos bigint = NULL,
@pClaveIdentidad varchar(3) = NULL,
@pidContabilidad numeric(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venMovimientosFiscalINE 
WHERE (venMovimientos = ISNULL(@pvenMovimientos, venMovimientos))
AND (ClaveIdentidad = ISNULL(@pClaveIdentidad, ClaveIdentidad))
AND (idContabilidad = ISNULL(@pidContabilidad, idContabilidad))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venMovimientosMetodoPago.sql*/
DROP PROCEDURE venMovimientosMetodoPagoGuardar
GO
CREATE PROCEDURE venMovimientosMetodoPagoGuardar
(
@pvenMovimientos bigint,
@pMetodoPago varchar(50) = NULL,
@pCuentaPago varchar(150) = NULL, 
@pNMetodoPago VarChar(3) = NULL, 
@pUsoCfdi VarChar(5) = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venMovimientosMetodoPago WHERE (venMovimientos = @pvenMovimientos)))
BEGIN 
	UPDATE venMovimientosMetodoPago
	SET		MetodoPago = @pMetodoPago,
		CuentaPago = @pCuentaPago, 
		NMetodoPago = @pNMetodoPago, 
		UsoCfdi = @pUsoCfdi
	WHERE (venMovimientos = @pvenMovimientos)
END 
ELSE 
BEGIN 
	INSERT INTO venMovimientosMetodoPago
	(
		venMovimientos,
		MetodoPago,
		CuentaPago, 
		NMetodoPago,
		UsoCfdi
	)
	VALUES 
	(
		@pvenMovimientos,
		@pMetodoPago,
		@pCuentaPago, 
		@pNMetodoPago, 
		@pUsoCfdi
	)
END 

GO

DROP PROCEDURE venMovimientosMetodoPagoDatos
GO
CREATE PROCEDURE venMovimientosMetodoPagoDatos
(
@pvenMovimientos bigint
)
AS
SET NOCOUNT ON 

SELECT venMovimientosMetodoPago.venMovimientos, venMovimientosMetodoPago.MetodoPago, venMovimientosMetodoPago.CuentaPago, 
	venMovimientosMetodoPago.NMetodoPago, venMovimientosMetodoPago.UsoCfdi
FROM venMovimientosMetodoPago 
WHERE (venMovimientos = @pvenMovimientos)
 
 RETURN @@Error 

GO

DROP PROCEDURE venMovimientosMetodoPagoEliminar
GO
CREATE PROCEDURE venMovimientosMetodoPagoEliminar
(
@pvenMovimientos bigint = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venMovimientosMetodoPago 
WHERE (venMovimientos = ISNULL(@pvenMovimientos, venMovimientos))
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venMovImpTraslado.sql*/
DROP PROCEDURE venMovImpTrasladoGuardar
GO
CREATE PROCEDURE venMovImpTrasladoGuardar
(
@pAsiento_Id bigint,
@pRenglonDebe int,
@pRenglonHaber int = NULL,
@pvenMovimientos bigint = NULL,
@ptesMovimientos bigint = NULL,
@pImpuesto_Id varchar(5),
@pCliente_Id varchar(15) = NULL,
@pCartera_Id varchar(5),
@pBanco_Id varchar(5) = NULL,
@pBaseImponible qMonedaD2,
@pMonto qMonedaD2,
@pTotalCobro qMonedaD2, 
@pDifCambio qMonedaD2, 
@pRenDifCambio Int = NULL
)
AS
SET NOCOUNT ON 
	INSERT INTO venMovImpTraslado
	(
		Asiento_Id,
		RenglonDebe,
		RenglonHaber,
		venMovimientos,
		tesMovimientos,
		Impuesto_Id,
		Cliente_Id,
		Cartera_Id,
		Banco_Id,
		BaseImponible,
		Monto,
		TotalCobro,
		DifCambio,
		RenDifCambio
	)
	VALUES 
	(
		@pAsiento_Id,
		@pRenglonDebe,
		@pRenglonHaber,
		@pvenMovimientos,
		@ptesMovimientos,
		dbo.FuncFKvenImpuestos(@pImpuesto_Id),
		dbo.FuncFKvenClientes(@pCliente_Id),
		dbo.FuncFKtesIdentifica(@pCartera_Id),
		dbo.FuncFKtesIdentifica(@pBanco_Id),
		@pBaseImponible,
		@pMonto,
		@pTotalCobro,
		@pDifCambio,
		@pRenDifCambio
	)

GO

DROP PROCEDURE venMovImpTrasladoDatos
GO
CREATE PROCEDURE venMovImpTrasladoDatos
(
@pAsiento_Id bigint,
@pRenglonDebe int
)
AS
SET NOCOUNT ON 
SELECT @pAsiento_Id AS Asiento_Id, @pRenglonDebe as RenglonDebe

SELECT venMovImpTraslado.Asiento_Id, venMovImpTraslado.RenglonDebe, venMovImpTraslado.RenglonHaber, 
	venMovImpTraslado.venMovimientos, venMovImpTraslado.tesMovimientos, venImpuestos.Impuesto_Id,
	venImpuestos.Descripcion as DescripcionImpuestos, venClientes.Cliente_Id, venClientes.RazonSocial as DescripcionClientes, 
	tesIdentifica.Cartera_Id, 	tesIdentifica.Descripcion as DescripcionIdentifica, 
	tesIdBancoPropio.Cartera_Id Banco_Id, tesIdBancoPropio.Descripcion as DescripcionIdBancoPropio, 
	venMovImpTraslado.BaseImponible, venMovImpTraslado.Monto, venMovImpTraslado.TotalCobro,
	venMovImpTraslado.DifCambio, venMovImpTraslado.RenDifCambio
FROM venMovImpTraslado 
INNER JOIN conAsientos  ON (conAsientos.conAsientos = venMovImpTraslado.Asiento_Id)
--INNER JOIN conMovCont  ON (conMovCont.conAsientos = venMovImpTraslado.Asiento_Id) AND (conMovCont.Renglon = venMovImpTraslado.RenglonDebe)
--LEFT JOIN conMovCont conMovCont2 ON (conMovCont2.conAsientos = venMovImpTraslado.Asiento_Id) AND (conMovCont2.Renglon = venMovImpTraslado.RenglonHaber)
LEFT JOIN venMovimientos  ON (venMovimientos.venMovimientos = venMovImpTraslado.venMovimientos)
LEFT JOIN tesMovimientos  ON (tesMovimientos.tesMovimientos = venMovImpTraslado.tesMovimientos)
INNER JOIN venImpuestos  ON (venImpuestos.venImpuestos = venMovImpTraslado.Impuesto_Id)
LEFT JOIN venClientes  ON (venClientes.genEntidades = venMovImpTraslado.Cliente_Id)
INNER JOIN tesIdentifica  ON (tesIdentifica.tesIdentifica = venMovImpTraslado.Cartera_Id)
LEFT JOIN tesIdentifica tesIdBancoPropio  ON (tesIdBancoPropio.tesIdentifica = venMovImpTraslado.Banco_Id)
--LEFT JOIN conMovCont conMovContDC ON (conMovContDC.conAsientos = venMovImpTraslado.Asiento_Id) AND (conMovContDC.Renglon = venMovImpTraslado.RenglonDC)
WHERE (venMovImpTraslado.Asiento_Id = @pAsiento_Id)
AND (venMovImpTraslado.RenglonDebe = @pRenglonDebe)
 
RETURN @@Error 

GO

DROP PROCEDURE venMovImpTrasladoEliminar
GO
CREATE PROCEDURE venMovImpTrasladoEliminar
(
@pAsiento_Id bigint,
@pRenglonDebe int= NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venMovImpTraslado WHERE (Asiento_Id = @pAsiento_Id) AND (RenglonDebe = ISNULL(@pRenglonDebe,RenglonDebe))
 
 RETURN @@Error 

GO




Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venMovImpuestos.sql*/
DROP PROCEDURE venMovImpuestosGuardar
GO
CREATE PROCEDURE venMovImpuestosGuardar
(
@pvenMovimientos bigint,
@pconRenglon int,
@pImpuesto_Id varchar(5),
@pPorcentaje qPorcentaje,
@pBaseImponible qMonedaD2,
@pImporte qMonedaD2,
@pBaseImponibleMonedaNac qMonedaD2
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venMovImpuestos WHERE (venMovimientos = @pvenMovimientos) AND (conRenglon = @pconRenglon)))
BEGIN 
	UPDATE venMovImpuestos
	SET		Impuesto_Id = dbo.FuncFKvenImpuestos(@pImpuesto_Id),
		Porcentaje = @pPorcentaje,
		BaseImponible = @pBaseImponible,
		Importe = @pImporte,
		BaseImponibleMonedaNac = @pBaseImponibleMonedaNac
	WHERE (venMovimientos = @pvenMovimientos) AND (conRenglon = @pconRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO venMovImpuestos
	(
		venMovimientos,
		conRenglon,
		Impuesto_Id,
		Porcentaje,
		BaseImponible,
		Importe,
		BaseImponibleMonedaNac
	)
	VALUES 
	(
		@pvenMovimientos,
		@pconRenglon,
		dbo.FuncFKvenImpuestos(@pImpuesto_Id),
		@pPorcentaje,
		@pBaseImponible,
		@pImporte,
		@pBaseImponibleMonedaNac
	)
END 

GO

DROP PROCEDURE venMovImpuestosDatos
GO
CREATE PROCEDURE venMovImpuestosDatos
(
@pvenMovimientos bigint,
@pconRenglon int = Null
)
AS
SET NOCOUNT ON 

SELECT venMovImpuestos.venMovimientos, venMovImpuestos.conRenglon,
	venImpuestos.Impuesto_Id, venImpuestos.Descripcion as DescripcionImpuestos, venMovImpuestos.Porcentaje,
	venMovImpuestos.BaseImponible, venMovImpuestos.Importe, venMovImpuestos.BaseImponibleMonedaNac,
	conCuentas.Cuenta_Id, conCuentas.Descripcion as DescripcionCuenta,
	conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1,
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2,
	conMovCont.TipoMov, conMovCont.Clase, conMovCont.Importe as ImporteContable
FROM venMovImpuestos 
INNER JOIN conMovCont  ON (conMovCont.conAsientos = venMovImpuestos.venMovimientos) AND (conMovCont.Renglon = venMovImpuestos.conRenglon)
INNER JOIN venImpuestos  ON (venImpuestos.venImpuestos = venMovImpuestos.Impuesto_Id)
	INNER JOIN conCuentas ON conCuentas.conCuentas = conMovCont.cuenta_Id 
	Left JOIN conCentro1 ON conCentro1.conCentro1 = conMovCont.Centro1_Id
	Left JOIN conCentro2 ON conCentro2.conCentro2 = conMovCont.Centro2_Id
WHERE (venMovimientos = @pvenMovimientos)
AND (conRenglon = IsNull(@pconRenglon, conRenglon))
Order By 2

 RETURN @@Error 

GO

DROP PROCEDURE venMovImpuestosEliminar
GO
CREATE PROCEDURE venMovImpuestosEliminar
(
@pvenMovimientos bigint,
@pconRenglon int = Null
)
AS
SET NOCOUNT ON 

DELETE FROM venMovImpuestos 
WHERE (venMovimientos = @pvenMovimientos)
AND (conRenglon = IsNull(@pconRenglon, conRenglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venMoviPredial.sql*/
DROP PROCEDURE venMoviPredialGuardar
GO
CREATE PROCEDURE venMoviPredialGuardar
(
@pvenMovimientos bigint,
@pconRenglon int,
@pCuentaPredial varchar(20)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venMoviPredial WHERE (venMovimientos = @pvenMovimientos) AND (conRenglon = @pconRenglon)))
BEGIN 
	UPDATE venMoviPredial
	SET		CuentaPredial = @pCuentaPredial
	WHERE (venMovimientos = @pvenMovimientos) AND (conRenglon = @pconRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO venMoviPredial
	(
		venMovimientos,
		conRenglon,
		CuentaPredial
	)
	VALUES 
	(
		@pvenMovimientos,
		@pconRenglon,
		@pCuentaPredial
	)
END 

GO

DROP PROCEDURE venMoviPredialDatos
GO
CREATE PROCEDURE venMoviPredialDatos
(
@pvenMovimientos bigint,
@pconRenglon int
)
AS
SET NOCOUNT ON 

SELECT venMoviPredial.venMovimientos, venMoviPredial.conRenglon, venMoviPredial.CuentaPredial
FROM venMoviPredial 
WHERE (venMovimientos = @pvenMovimientos)
AND (conRenglon = @pconRenglon)
 
 RETURN @@Error 

GO

DROP PROCEDURE venMoviPredialEliminar
GO
CREATE PROCEDURE venMoviPredialEliminar
(
@pvenMovimientos bigint = NULL,
@pconRenglon int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venMoviPredial 
WHERE (venMovimientos = ISNULL(@pvenMovimientos, venMovimientos))
AND (conRenglon = ISNULL(@pconRenglon, conRenglon))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venMovSSImpuestos.sql*/
DROP PROCEDURE venMovSSImpuestosGuardar
GO
CREATE PROCEDURE venMovSSImpuestosGuardar
(
@pvenMovimientos bigint,
@pconRenglon int,
@pImpuesto_Id varChar(5),
@pImporte qMonedaD2,
@pImporteMonedaNac qMonedaD2,
@pPorcentaje qPorcentaje,
@pBaseImponible qMonedaD2,
@pBaseImponibleMonedaNac qMonedaD2
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venMovSSImpuestos WHERE venMovimientos = @pvenMovimientos AND conRenglon = @pconRenglon AND 
	Impuesto_Id = dbo.FuncFKvenImpuestos(@pImpuesto_Id)))
BEGIN 
	UPDATE venMovSSImpuestos
	SET Importe = @pImporte,
		ImporteMonedaNac = @pImporteMonedaNac,
		Porcentaje = @pPorcentaje,
		BaseImponible = @pBaseImponible,
		BaseImponibleMonedaNac = @pBaseImponibleMonedaNac
	WHERE venMovimientos = @pvenMovimientos AND conRenglon = @pconRenglon AND Impuesto_Id = dbo.FuncFKvenImpuestos(@pImpuesto_Id)
END 
ELSE 
BEGIN 
	INSERT INTO venMovSSImpuestos
	(
		venMovimientos,
		conRenglon,
		Impuesto_Id,
		Importe,
		ImporteMonedaNac,
		Porcentaje,
		BaseImponible,
		BaseImponibleMonedaNac
	)
	VALUES 
	(
		@pvenMovimientos,
		@pconRenglon,
		dbo.FuncFKvenImpuestos(@pImpuesto_Id),
		@pImporte,
		@pImporteMonedaNac,
		@pPorcentaje,
		@pBaseImponible,
		@pBaseImponibleMonedaNac
	)
END 

GO

DROP PROCEDURE venMovSSImpuestosDatos
GO
CREATE PROCEDURE venMovSSImpuestosDatos
(
@pvenMovimientos bigint,
@pconRenglon int = NULL,
@pImpuesto_Id varChar(5) = null
)
AS
SET NOCOUNT ON 

SELECT venMovSSImpuestos.venMovimientos, venMovSSImpuestos.conRenglon, venImpuestos.Impuesto_Id,
	venImpuestos.Descripcion as DescripcionImpuestos, venMovSSImpuestos.Importe, venMovSSImpuestos.ImporteMonedaNac,
	venMovSSImpuestos.Porcentaje, venMovSSImpuestos.BaseImponible, venMovSSImpuestos.BaseImponibleMonedaNac
FROM venMovSSImpuestos 
INNER JOIN venMovDetalle ON venMovDetalle.venMovimientos = venMovSSImpuestos.venMovimientos AND 
venMovDetalle.conRenglon = venMovSSImpuestos.conRenglon
INNER JOIN venImpuestos ON venImpuestos.venImpuestos = venMovSSImpuestos.Impuesto_Id
WHERE venMovSSImpuestos.venMovimientos = @pvenMovimientos
AND venMovSSImpuestos.conRenglon = isnull(@pconRenglon, venMovSSImpuestos.conRenglon) 
AND venMovSSImpuestos.Impuesto_Id = Isnull(dbo.FuncFKvenImpuestos( @pImpuesto_Id), venMovSSImpuestos.Impuesto_Id)
 
 RETURN @@Error 

GO

DROP PROCEDURE venMovSSImpuestosEliminar
GO
CREATE PROCEDURE venMovSSImpuestosEliminar
(
@pvenMovimientos bigint,
@pconRenglon int,
@pImpuesto_Id varchar(5) = Null
)
AS
SET NOCOUNT ON 
If @pImpuesto_Id Is Null
	DELETE FROM venMovSSImpuestos 
	WHERE (venMovimientos = @pvenMovimientos)
	AND (conRenglon = @pconRenglon)
Else
	DELETE FROM venMovSSImpuestos 
	WHERE (venMovimientos = @pvenMovimientos)
	AND (conRenglon = @pconRenglon)
	AND (Impuesto_Id = dbo.FuncFKvenImpuestos(@pImpuesto_Id))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venMovStkHist.sql*/
DROP PROCEDURE venMovStkHistGuardar
GO
CREATE PROCEDURE venMovStkHistGuardar
(
@pvenMovimientos bigint,
@pRenglonCuerpo int,
@pstkMoviCabe bigint,
@pRenglon int,
@pCantidad qCantidadD8,
@pFacturaRemito char(1)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venMovStkHist WHERE (venMovimientos = @pvenMovimientos) AND 
(RenglonCuerpo = @pRenglonCuerpo) AND (stkMoviCabe = @pstkMoviCabe) AND (Renglon = @pRenglon)))
BEGIN 
	UPDATE venMovStkHist
	SET		Cantidad = @pCantidad,
		FacturaRemito = @pFacturaRemito
	WHERE (venMovimientos = @pvenMovimientos) AND (RenglonCuerpo = @pRenglonCuerpo) AND (stkMoviCabe = @pstkMoviCabe) AND (Renglon = @pRenglon)
END 
ELSE 
BEGIN 
	INSERT INTO venMovStkHist
	(
		venMovimientos,
		RenglonCuerpo,
		stkMoviCabe,
		Renglon,
		Cantidad,
		FacturaRemito
	)
	VALUES 
	(
		@pvenMovimientos,
		@pRenglonCuerpo,
		@pstkMoviCabe,
		@pRenglon,
		@pCantidad,
		@pFacturaRemito
	)
END 

GO

DROP PROCEDURE venMovStkHistDatos
GO
CREATE PROCEDURE venMovStkHistDatos
(
@pvenMovimientos bigint = Null,
@pConRenglon int = Null,
@pstkMoviCabe bigint = Null,
@pRenglon int = Null
)
AS
SET NOCOUNT ON 

SELECT venMovStkHist.venMovimientos, venMovStkHist.RenglonCuerpo, venMovStkHist.stkMoviCabe,
venMovStkHist.Renglon, venMovStkHist.Cantidad, venMovStkHist.FacturaRemito, dbo.Segmento(Factu.Segmento_Id, Factu.Segmento1C, 
	Factu.Segmento2C, Factu.Segmento3C, Factu.Segmento4C, Factu.Segmento1N, Factu.Segmento2N, Factu.Segmento3N, Factu.Segmento4N) Factura,
dbo.Segmento(Remi.Segmento_Id, Remi.Segmento1C, Remi.Segmento2C, Remi.Segmento3C, Remi.Segmento4C, Remi.Segmento1N, Remi.Segmento2N, Remi.Segmento3N, Remi.Segmento4N) Remito
FROM venMovStkHist 
INNER JOIN venMovConStockCr ON venMovConStockCr.venMovimientos = venMovStkHist.venMovimientos AND venMovConStockCr.RenglonCuerpo = venMovStkHist.RenglonCuerpo
INNER JOIN stkMoviCuerpo  ON stkMoviCuerpo.stkMoviCabe = venMovStkHist.stkMoviCabe AND stkMoviCuerpo.Renglon = venMovStkHist.Renglon
Inner Join genAsiSegmentos Factu On Factu.Asiento_Id = venMovStkHist.venMovimientos
Inner Join genAsiSegmentos Remi On Remi.Asiento_Id = venMovStkHist.stkMoviCabe
WHERE venMovStkHist.venMovimientos = IsNull(@pvenMovimientos, venMovStkHist.venMovimientos)
AND (venMovStkHist.RenglonCuerpo = IsNull(@pConRenglon, venMovStkHist.RenglonCuerpo))
AND venMovStkHist.stkMoviCabe = IsNull(@pstkMoviCabe, venMovStkHist.stkMoviCabe)
AND (venMovStkHist.Renglon = IsNull(@pRenglon, venMovStkHist.Renglon))
 
 RETURN @@Error 

GO

Drop Procedure venMovStkHistDevolverIdMovStock
GO
CREATE PROCEDURE venMovStkHistDevolverIdMovStock
(
@pvenMovimientos bigint
)
AS
SET NOCOUNT ON 
-- Busco solo el caso 2 que es cuando se hace Factura y Remito juntos --
SELECT Distinct venMovStkHist.venMovimientos, venMovStkHist.stkMoviCabe
FROM venMovStkHist 
WHERE venMovStkHist.venMovimientos = @pvenMovimientos And venMovStkHist.FacturaRemito = '2'

RETURN @@Error 

GO


DROP PROCEDURE venMovStkHistEliminar
GO
CREATE PROCEDURE venMovStkHistEliminar
(
@pvenMovimientos bigint,
@pRenglonCuerpo int,
@pstkMoviCabe bigint,
@pRenglon int
)
AS
SET NOCOUNT ON 

DELETE FROM venMovStkHist 
WHERE (venMovimientos = @pvenMovimientos)
AND (RenglonCuerpo = @pRenglonCuerpo)
AND (stkMoviCabe = @pstkMoviCabe)
AND (Renglon = @pRenglon)
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venNivelesAuto.sql*/
DROP PROCEDURE venNivelesAutoGuardar
GO
CREATE PROCEDURE venNivelesAutoGuardar
(
@pNivelAuto_Id varchar(5),
@pNivelAuto_Id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(100),
@pInactivo Sino,
@pPosteado Sino,
@pUsuario_Id int
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM venNivelesAuto WHERE (NivelAuto_Id = @pNivelAuto_Id)))
BEGIN 
	UPDATE venNivelesAuto
	SET @lIdentidad = venNivelesAuto,
		NivelAuto_Id = @pNivelAuto_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (NivelAuto_Id = @pNivelAuto_Id)
END 
ELSE 
BEGIN 
	INSERT INTO venNivelesAuto
	(
		NivelAuto_Id,
		Empresa_Id,
		Descripcion,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pNivelAuto_Id,
		@pEmpresa_Id,
		@pDescripcion,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO



DROP PROCEDURE venNivelesAutoDatos
GO
CREATE PROCEDURE venNivelesAutoDatos
(
@pNivelAuto_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT venNivelesAuto.venNivelesAuto, venNivelesAuto.NivelAuto_Id,  
venNivelesAuto.Empresa_Id, Cast( Case When venNivelesAuto.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, 
venNivelesAuto.Descripcion, venNivelesAuto.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, 
venNivelesAuto.Posteado
FROM venNivelesAuto 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = venNivelesAuto.Usuario_Id)
WHERE (NivelAuto_Id = @pNivelAuto_Id)

Exec venNivelesAutoUsuDatos @pNivelAuto_Id

Declare @pidentity bigint= dbo.FuncFKvenNivelesAuto(@pNivelAuto_Id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'venNivelesAuto'
RETURN @@Error 

GO


DROP PROCEDURE venNivelesAutoEliminar
GO
CREATE PROCEDURE venNivelesAutoEliminar
(
@pNivelAuto_Id varchar(5)
)
AS
SET NOCOUNT ON 

DELETE FROM venNivelesAuto 
WHERE (NivelAuto_Id = @pNivelAuto_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKvenNivelesAuto
GO

CREATE FUNCTION FuncFKvenNivelesAuto
(
@pNivelAuto_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = venNivelesAuto FROM venNivelesAuto WHERE 
	NivelAuto_Id = @pNivelAuto_Id
  RETURN @pIdentity
END


GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venNivelesAutoUsu.sql*/
DROP PROCEDURE venNivelesAutoUsuGuardar
GO
CREATE PROCEDURE venNivelesAutoUsuGuardar
(
@pNivelAuto_Id varChar(5),
@pUsuario_Id varChar(25)
)
AS
SET NOCOUNT ON 
	INSERT INTO venNivelesAutoUsu
	(
		NivelAuto_Id,
		Usuario_Id
	)
	VALUES 
	(
		dbo.FuncFKvenNivelesAuto(@pNivelAuto_Id),
		dbo.FuncFKgenUsuarios(@pUsuario_Id)
	)

GO

DROP PROCEDURE venNivelesAutoUsuDatos
GO
CREATE PROCEDURE venNivelesAutoUsuDatos
(
@pNivelAuto_Id varChar(5) = Null,
@pUsuario_Id varChar(25) = Null
)
AS
SET NOCOUNT ON 

SELECT genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, venNivelesAuto.NivelAuto_Id, 
venNivelesAuto.Descripcion as DescripcioncomNivelesAuto
FROM venNivelesAutoUsu 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = venNivelesAutoUsu.Usuario_Id)
INNER JOIN venNivelesAuto  ON (venNivelesAuto.venNivelesAuto = venNivelesAutoUsu.NivelAuto_Id)
WHERE venNivelesAutoUsu.Usuario_Id = IsNull(dbo.FuncFKgenUsuarios(@pUsuario_Id), venNivelesAutoUsu.Usuario_Id)
AND venNivelesAutoUsu.NivelAuto_Id = IsNull(dbo.FuncFKvenNivelesAuto(@pNivelAuto_Id), venNivelesAutoUsu.NivelAuto_Id)
 
RETURN @@Error 

GO

DROP PROCEDURE venNivelesAutoUsuEliminar
GO
CREATE PROCEDURE venNivelesAutoUsuEliminar
(
@pNivelAuto_Id varChar(5) = Null,
@pUsuario_Id varChar(25) = Null
)
AS
SET NOCOUNT ON 

DELETE FROM venNivelesAutoUsu 
WHERE venNivelesAutoUsu.Usuario_Id = IsNull(dbo.FuncFKgenUsuarios(@pUsuario_Id), venNivelesAutoUsu.Usuario_Id)
AND venNivelesAutoUsu.NivelAuto_Id = IsNull(dbo.FuncFKvenNivelesAuto(@pNivelAuto_Id), venNivelesAutoUsu.NivelAuto_Id)
 
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venNPAutorizando.sql*/
DROP PROCEDURE venNPAutorizandoGuardar
GO
CREATE PROCEDURE venNPAutorizandoGuardar
(
@pvenPedidos int,
@pSecuencia int,
@pNivelAuto_Id varchar(5),
@pUsuario_Id varChar(25) = NULL,
@pFecha datetime = NULL,
@pTipoApro char(1),
@pResultadoFormula varChar(max) = Null
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venNPAutorizando WHERE (venPedidos = @pvenPedidos) AND (Secuencia = @pSecuencia)))
BEGIN 
	UPDATE venNPAutorizando
	SET	Usuario_Id = dbo.FuncFKgenUsuarios(@pUsuario_Id),
		Fecha = case when @pFecha is null then null else dbo.FechaActual() end,
		TipoApro = @pTipoApro,
		ResultadoFormula = @pResultadoFormula
	WHERE (venPedidos = @pvenPedidos) AND (Secuencia = @pSecuencia)
END 
ELSE 
BEGIN

	Select @pSecuencia = IsNull(Max(Secuencia), 0) + 1 From venNPAutorizando Where venPedidos = @pvenPedidos

	INSERT INTO venNPAutorizando
	(
		venPedidos,
		Secuencia,
		NivelAuto_Id,
		Usuario_Id,
		Fecha,
		TipoApro,
		ResultadoFormula
	)
	VALUES 
	(
		@pvenPedidos,
		@pSecuencia,
		dbo.FuncFKvenNivelesAuto(@pNivelAuto_Id),
		dbo.FuncFKgenUsuarios(@pUsuario_Id),
		case when @pFecha is null then null else dbo.FechaActual() end,
		@pTipoApro,
		@pResultadoFormula
	)
END

Select @pSecuencia As RetVal

GO

DROP PROCEDURE venNPAutorizandoDatos
GO
CREATE PROCEDURE venNPAutorizandoDatos
(
@pvenPedidos int
)
AS
SET NOCOUNT ON 

SELECT venNPAutorizando.venPedidos,
venNPAutorizando.Secuencia, venNivelesAuto.NivelAuto_Id, venNivelesAuto.Descripcion as DescripcioncomNivelesAuto,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, venNPAutorizando.Fecha, venNPAutorizando.TipoApro, venNPAutorizando.ResultadoFormula
FROM venNPAutorizando 
INNER JOIN venPedidos  ON (venPedidos.venPedidos = venNPAutorizando.venPedidos)
INNER JOIN venNivelesAuto  ON (venNivelesAuto.venNivelesAuto = venNPAutorizando.NivelAuto_Id)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = venNPAutorizando.Usuario_Id)
WHERE venNPAutorizando.venPedidos = @pvenPedidos
AND venNPAutorizando.Usuario_Id Is Null
 
RETURN @@Error 

GO


DROP PROCEDURE venNPAutorizandoEliminar
GO
CREATE PROCEDURE venNPAutorizandoEliminar
(
@pvenPedidos int,
@pSecuencia int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venNPAutorizando 
WHERE venPedidos = @pvenPedidos
AND Secuencia = ISNULL(@pSecuencia, Secuencia)
 
RETURN @@Error 
Go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venOperadores.sql*/
DROP PROCEDURE venOperadoresGuardar
GO
CREATE PROCEDURE venOperadoresGuardar
(
@pOperador_Id varchar(15),
@pOperador_Id_Nueva varchar(15),
@pEmpresa_Id int = NULL,
@pInactivo Bit, 
@pPosteado Bit, 
@pRfcOperador varchar(14),
@pNumLicencia varchar(16),
@pNombreOperador varchar(254),
@pNumRegIdTribOperador varchar(40),
@pResidenciaFiscalOperador smallint,
@pCalle varchar(100),
@pNumeroExterior varchar(30) = NULL,
@pNumerointerior varchar(30) = NULL,
@pColonia varchar(120) = NULL,
@pLocalidad varchar(120) = NULL,
@pReferencia varchar(100) = NULL,
@pMunicipio varchar(120) = NULL,
@pEstado varchar(30) = NULL,
@pPais smallint = NULL,
@pCodigoPostal varchar(20) = NULL,
@pUsuario_Id int
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM venOperadores WHERE Operador_Id = @pOperador_Id))
BEGIN 
	UPDATE venOperadores
	SET		@lIdentidad = venOperadores,
		Operador_Id = @pOperador_Id_Nueva,
		Empresa_Id = @pEmpresa_Id,
		RfcOperador = @pRfcOperador,
		NumLicencia = @pNumLicencia,
		NombreOperador = @pNombreOperador,
		NumRegIdTribOperador = @pNumRegIdTribOperador,
		ResidenciaFiscalOperador = dbo.FuncFKgenPaises(@pResidenciaFiscalOperador),
		Calle = @pCalle,
		NumeroExterior = @pNumeroExterior,
		Numerointerior = @pNumerointerior,
		Colonia = @pColonia,
		Localidad = @pLocalidad,
		Referencia = @pReferencia,
		Municipio = @pMunicipio,
		Estado = @pEstado,
		Pais = dbo.FuncFKgenPaises(@pPais),
		CodigoPostal = @pCodigoPostal,
		Usuario_Id = @pUsuario_Id, 
		Inactivo = @pInactivo, 
		Posteado = @pPosteado
	WHERE 
		Operador_Id = @pOperador_Id
END 
ELSE 
BEGIN 
	INSERT INTO venOperadores
	(
		Operador_Id,
		Empresa_Id,
		RfcOperador,
		NumLicencia,
		NombreOperador,
		NumRegIdTribOperador,
		ResidenciaFiscalOperador,
		Calle,
		NumeroExterior,
		Numerointerior,
		Colonia,
		Localidad,
		Referencia,
		Municipio,
		Estado,
		Pais,
		CodigoPostal,
		Usuario_Id, 
		Inactivo, 
		Posteado
	)
	VALUES 
	(
		@pOperador_Id_Nueva,
		@pEmpresa_Id,
		@pRfcOperador,
		@pNumLicencia,
		@pNombreOperador,
		@pNumRegIdTribOperador,
		dbo.FuncFKgenPaises(@pResidenciaFiscalOperador),
		@pCalle,
		@pNumeroExterior,
		@pNumerointerior,
		@pColonia,
		@pLocalidad,
		@pReferencia,
		@pMunicipio,
		@pEstado,
		dbo.FuncFKgenPaises(@pPais),
		@pCodigoPostal,
		@pUsuario_Id, 
		@pInactivo, 
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE venOperadoresDatos
GO
CREATE PROCEDURE venOperadoresDatos
(
	@pOperador_Id varchar(15)
)
AS
SET NOCOUNT ON 

SELECT venOperadores.venOperadores, venOperadores.Operador_Id,  venOperadores.Empresa_Id,
	Cast( Case When venOperadores.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, 
	venOperadores.Inactivo, venOperadores.Posteado,
	venOperadores.RfcOperador, venOperadores.NumLicencia, venOperadores.NombreOperador,
	venOperadores.NumRegIdTribOperador, genPaises.Pais_Id ResidenciaFiscal, genPaises.Descripcion as DescripcionResidenciaFiscal, venOperadores.Calle,
	venOperadores.NumeroExterior, venOperadores.Numerointerior, venOperadores.Colonia, venOperadores.Localidad,
	venOperadores.Referencia, venOperadores.Municipio, venOperadores.Estado, genPaises2.Pais_Id,
	genPaises2.Descripcion as DescripcionPaises, venOperadores.CodigoPostal, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario
FROM venOperadores 
INNER JOIN genPaises  ON (genPaises.genPaises = venOperadores.ResidenciaFiscalOperador)
INNER JOIN genPaises genPaises2 ON (genPaises2.genPaises = venOperadores.Pais)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = venOperadores.Usuario_Id)
WHERE  
	Operador_Id = @pOperador_Id

 Declare @pidentity bigint= dbo.FuncFKvenOperadores(@pOperador_Id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'venOperadores'
RETURN @@Error 

GO

DROP PROCEDURE venOperadoresEliminar
GO
CREATE PROCEDURE venOperadoresEliminar
(
	@pOperador_Id varchar(15)
)
AS
SET NOCOUNT ON 

DELETE FROM venOperadores 
WHERE  Operador_Id = @pOperador_Id
 RETURN @@Error 

GO

DROP FUNCTION FuncFKvenOperadores
GO

CREATE FUNCTION FuncFKvenOperadores
(
@pOperador_Id varchar (15)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = venOperadores FROM venOperadores WHERE 
	Operador_Id = @pOperador_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venPediAutoriza.sql*/
DROP Procedure venPediAutorizaDatos
GO
CREATE Procedure venPediAutorizaDatos
(
@pCliente_Id varChar(15) ,
@pEmpresa_Id int
)
As
IF @pCliente_Id = ''
	set @pCliente_Id = null

Select '' Cliente_Id, '' RazonSocial, '' TipoClie_Id, '' DescripcionTipoClie, '' Vendedor_Id, '' DescripcionVendedor, '' Zona_Id, '' DescripcionZona,
'' FormaEntrega_Id, '' DescripcionFormaEntrega, ' ' PrimeraVez, ' ' Mensaje,  0 Registro, ' ' Continuar

Select venPedidos.venPedidos, venPediSegmentos.Segmento_Id, 
	venPediSegmentos.Segmento1N, venPediSegmentos.Segmento2N, venPediSegmentos.Segmento3N, venPediSegmentos.Segmento4N,
	venPediSegmentos.Segmento1C, venPediSegmentos.Segmento2C, venPediSegmentos.Segmento3C, venPediSegmentos.Segmento4C,
	dbo.Segmento(venPediSegmentos.Segmento_Id, venPediSegmentos.Segmento1C, venPediSegmentos.Segmento2C, venPediSegmentos.Segmento3C, 
	venPediSegmentos.Segmento4C, venPediSegmentos.Segmento1N, venPediSegmentos.Segmento2N, venPediSegmentos.Segmento3N, 
	venPediSegmentos.Segmento4N) Segmento,
	venClientes.Cliente_Id, venClientes.RazonSocial, venPedidos.Fecha, venPedidos.ObservEstado, 'P' Estado, venPedidos.ImporteTotal,
	'' Motivo, venPedidos.UsuarioAutoriz_Id
	FROM venPedidos
	Inner Join venClieHabitual On venPedidos.Cliente_Id = venClieHabitual.genEntidades And venPedidos.Sucursal = venClieHabitual.Sucursal
	--Inner Join venPedicuerpo On venPediCuerpo.venPedidos = venPedidos.venPedidos
	Inner Join venPediSegmentos On venPediSegmentos.venPedidos = venPedidos.venPedidos
	Inner Join venClientes On venClientes.genEntidades = venPedidos.Cliente_Id
	Inner Join venVendedores On venVendedores.venVendedores = venPedidos.Vendedor_Id
	Inner Join venFormaEntrega On venFormaEntrega.venFormaEntrega = venPedidos.FormaEntrega_Id
	WHERE
	venPedidos.Empresa_Id = @pEmpresa_Id And
	venPedidos.Estado In ('A','P') And 
	venClientes.Cliente_id = @pCliente_Id  And
	exists(select 1 from venPedicuerpo 
	Where venPediCuerpo.venPedidos = venPedidos.venPedidos and 
	venPedicuerpo.Pendiente = 1 And
	(venPediCuerpo.CantidadPedida - venPediCuerpo.CantidadRemitida) > 0) 
	Order By venClientes.Cliente_Id, venPediSegmentos.Segmento_Id, 
	venPediSegmentos.Segmento1N, venPediSegmentos.Segmento2N, venPediSegmentos.Segmento3N, venPediSegmentos.Segmento4N,
	venPediSegmentos.Segmento1C, venPediSegmentos.Segmento2C, venPediSegmentos.Segmento3C, venPediSegmentos.Segmento4C
GO




DROP Procedure venPediAutorizaClienteDatos
GO
CREATE Procedure venPediAutorizaClienteDatos
(
@pCliente_Id varChar(15) = NULL,
@pTipoClie_Id varChar(5) = Null,
@pVendedor_Id varChar(5) = Null,
@pZona_Id varChar(5) = Null,
@pFormaEntrega_Id varChar(3) = Null,
@pSucursal_Id varchar(4) = null,
@pEmpresa_Id int
)
As
IF @pCliente_Id = ''
	set @pCliente_Id = null

IF @pSucursal_Id = ''
	set @pSucursal_Id = null
Select '' Cliente_Id, '' RazonSocial, '' TipoClie_Id, '' DescripcionTipoClie, '' Vendedor_Id, '' DescripcionVendedor, '' Zona_Id, '' DescripcionZona,
'' FormaEntrega_Id, '' DescripcionFormaEntrega

Select Distinct venClientes.Cliente_Id
	FROM venPedidos
	Inner Join venClieHabitual On venPedidos.Cliente_Id = venClieHabitual.genEntidades And venPedidos.Sucursal = venClieHabitual.Sucursal
	--Inner Join venPedicuerpo On venPediCuerpo.venPedidos = venPedidos.venPedidos
	Inner Join venPediSegmentos On venPediSegmentos.venPedidos = venPedidos.venPedidos
	Inner Join venClientes On venClientes.genEntidades = venPedidos.Cliente_Id
	Inner Join venVendedores On venVendedores.venVendedores = venPedidos.Vendedor_Id
	Inner Join venFormaEntrega On venFormaEntrega.venFormaEntrega = venPedidos.FormaEntrega_Id
	--inner join genSucursalesEmpr on genSucursalesEmpr.genSucursalesEmpr=venPedidos.Sucursal
	WHERE
	-- genSucursalesEmpr.Sucursal= ISNULL(@pSucursal_Id,genSucursalesEmpr.Sucursal) and
	venPedidos.UsuarioAutoriz_Id IS NULL AND 
	venPedidos.Empresa_Id = @pEmpresa_Id And
	venPedidos.Estado In ('P','A') And 
	venClientes.Cliente_id = IsNull(@pCliente_Id,venClientes.Cliente_Id) And
	venClieHabitual.TipoClie_Id = IsNull(dbo.FuncFKvenTiposClie(@pTipoClie_Id), venClieHabitual.TipoClie_Id) And
	venVendedores.Vendedor_Id = IsNull(@pVendedor_Id, venVendedores.Vendedor_Id) And
	venFormaEntrega.FormaEntrega_Id = IsNull(@pFormaEntrega_Id, venFormaEntrega.FormaEntrega_Id) And 
	exists(select 1 from venPedicuerpo 
	Where venPediCuerpo.venPedidos = venPedidos.venPedidos and 
	venPedicuerpo.Pendiente = 1 And
	(venPediCuerpo.CantidadPedida - venPediCuerpo.CantidadRemitida) > 0) 

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venPediCuerpo.sql*/
DROP PROCEDURE venPediCuerpoGuardar
GO
CREATE PROCEDURE venPediCuerpoGuardar
(
@pvenPedidos int,
@pRenglon_Pe int,
@pProducto_Id varchar(25) = NULL,
@pMedida_Id varchar(5) = NULL,
@pDeposito_Id varchar(15) = NULL,
@pFactor qCantidadD8,
@pCantidadOriginal qCantidadD8,
@pCantidadPedida qCantidadD8,
@pCantidadRemitida qCantidadD8,
@pCantidadFacturada qCantidadD8,
@pPrecioForm qMonedaD8,
@pPrecioSinIva qMonedaD8,
@pPrecioLista qMonedaD8,
@pPrecioListaForm qMonedaD8,
@pPrecioVenta qCantidadD8,
@pTipoPrecio Char(1),
@pSubTotal qMonedaD2,
@pFechaEntrega qFecha,
@pEspecial Sino,
@pBonificacion qPorcentaje,
@pObservaciones QMemo = NULL,
@pPendiente Sino,
@pReservaMercaderia Sino,
@pCentro1_Id varChar(8) = NUll,
@pCentro2_Id varChar(8) = NUll
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venPediCuerpo WHERE (venPedidos = @pvenPedidos) AND (Renglon_Pe = @pRenglon_Pe)))
BEGIN 
	UPDATE venPediCuerpo
	SET	Producto_Id = dbo.FuncFKstkProductos(@pProducto_Id),
		Medida_Id = dbo.FuncFKstkUniMed(@pMedida_Id),
		Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id),
		Factor = @pFactor,
		CantidadOriginal = @pCantidadOriginal,
		CantidadPedida = @pCantidadPedida,
		CantidadRemitida = @pCantidadRemitida,
		CantidadFacturada = @pCantidadFacturada,
		PrecioForm = @pPrecioForm,
		PrecioSinIva = @pPrecioSinIva,
		PrecioLista = @pPrecioLista,
		PrecioListaForm = @pPrecioListaForm,
		PrecioVenta = @pPrecioVenta,
		TipoPrecio = @pTipoPrecio,
		SubTotal = @pSubTotal,
		FechaEntrega = @pFechaEntrega,
		Especial = @pEspecial,
		Bonificacion = @pBonificacion,
		Observaciones = @pObservaciones,
		Pendiente = @pPendiente,
		ReservaMercaderia = @pReservaMercaderia,
		Centro1_Id = dbo.FuncFKconCentro1(@pCentro1_Id),
		Centro2_Id = dbo.FuncFKconCentro2(@pCentro2_Id)
		WHERE (venPedidos = @pvenPedidos) AND (Renglon_Pe = @pRenglon_Pe)
END 
ELSE 
BEGIN 
	INSERT INTO venPediCuerpo
	(
		venPedidos,
		Renglon_Pe,
		Producto_Id,
		Medida_Id,
		Deposito_Id,
		Factor,
		CantidadOriginal,
		CantidadPedida,
		CantidadRemitida,
		CantidadFacturada,
		PrecioForm,
		PrecioSinIva,
		PrecioLista,
		PrecioListaForm,
		PrecioVenta,
		TipoPrecio,
		SubTotal,
		FechaEntrega,
		Especial,
		Bonificacion,
		Observaciones,
		Pendiente,
		ReservaMercaderia,
		Centro1_Id,
		Centro2_Id
	)
	VALUES 
	(
		@pvenPedidos,
		@pRenglon_Pe,
		dbo.FuncFKstkProductos(@pProducto_Id),
		dbo.FuncFKstkUniMed(@pMedida_Id),
		dbo.FuncFKstkDepositos(@pDeposito_Id),
		@pFactor,
		@pCantidadOriginal,
		@pCantidadPedida,
		@pCantidadRemitida,
		@pCantidadFacturada,
		@pPrecioForm,
		@pPrecioSinIva,
		@pPrecioLista,
		@pPrecioListaForm,
		@pPrecioVenta,
		@pTipoPrecio,
		@pSubTotal,
		@pFechaEntrega,
		@pEspecial,
		@pBonificacion,
		@pObservaciones,
		@pPendiente,
		@pReservaMercaderia,
		dbo.FuncFKconCentro1(@pCentro1_Id),
		dbo.FuncFKconCentro2(@pCentro2_Id)
	)
END 

GO


DROP PROCEDURE venPediCuerpoDatos
GO
CREATE PROCEDURE venPediCuerpoDatos
(
@pvenPedidos int,
@pRenglon_Pe int=null
)
AS
SET NOCOUNT ON

SELECT venPedidos.venPedidos, venPediCuerpo.Renglon_Pe, stkProductos.Producto_Id, stkProductos.Descripcion as DescripcionProductos,stkProductos.Observaciones as ObservacionesProductos,
	stkUniMed.Medida_Id, stkUniMed.Descripcion as DescripcionUniMed, stkDepositos.Deposito_Id, stkDepositos.Descripcion as DescripcionDepositos,
	venPediCuerpo.Factor,
	venPediCuerpo.CantidadOriginal, venPediCuerpo.CantidadPedida, venPediCuerpo.CantidadRemitida, venPediCuerpo.CantidadFacturada,
	venPediCuerpo.PrecioForm, venPediCuerpo.PrecioSinIva, stkCondFisVenta.CFVenta_Id, 
	venPediCuerpo.PrecioLista, venPediCuerpo.PrecioListaForm, venPediCuerpo.PrecioVenta, venPediCuerpo.TipoPrecio, venPediCuerpo.SubTotal, venPediCuerpo.FechaEntrega,
	venPediCuerpo.Especial, venPediCuerpo.Bonificacion, venPediCuerpo.Observaciones,
	venPediCuerpo.Pendiente, venPediCuerpo.ReservaMercaderia, concentro1.Centro1_Id, conCentro1.Descripcion DescripcionCentro1,
	concentro2.Centro2_Id, conCentro2.Descripcion DescripcionCentro2, ROUND(venPediCuerpo.CantidadPedida * venPediCuerpo.PrecioVenta,2) as SubTotalNeto, 
	ISNULL(venCotizPediCuerpo.Renglon_Co,0) as RenglonReferencia, cast(0 as bit) as Anular,0 as venCotizaciones
FROM venPediCuerpo 
INNER JOIN venPedidos  ON (venPedidos.venPedidos = venPediCuerpo.venPedidos)
LEFT JOIN stkProductos  ON (stkProductos.stkProductos = venPediCuerpo.Producto_Id)
LEFT JOIN stkCondFisVenta ON stkCondFisVenta.stkCondFisVenta = stkProductos.CFVenta_Id 
LEFT JOIN stkUniMed  ON (stkUniMed.stkUniMed = venPediCuerpo.Medida_Id)
LEFT JOIN stkDepositos  ON (stkDepositos.stkDepositos = venPediCuerpo.Deposito_Id)
Left Join conCentro1 On conCentro1.conCentro1 = venPediCuerpo.Centro1_Id
Left Join conCentro2 On conCentro2.conCentro2 = venPediCuerpo.Centro2_Id
Left join venCotizPediCuerpo ON  venCotizPediCuerpo.venPedidos = venPediCuerpo.venPedidos and 
								 venCotizPediCuerpo.Renglon_Pe = venPediCuerpo.Renglon_Pe
WHERE (venPediCuerpo.venPedidos = @pvenPedidos)
AND (venPediCuerpo.Renglon_Pe = IsNull(@pRenglon_Pe, venPediCuerpo.Renglon_Pe))
 
RETURN @@Error 

GO


DROP PROCEDURE venPediCuerpoEliminar
GO
CREATE PROCEDURE venPediCuerpoEliminar
(
@pvenPedidos int,
@pRenglon_Pe int = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venPediCuerpo 
WHERE (venPedidos = @pvenPedidos)
AND (Renglon_Pe = ISNULL(@pRenglon_Pe, Renglon_Pe))
 
RETURN @@Error 

GO


DROP PROCEDURE venPediCuerpoEntregar
GO

CREATE PROCEDURE venPediCuerpoEntregar
(
@pvenPedidos int,
@pRenglon_Pe int,
@pCantidad qCantidadD8
)
as

UPDATE venPediCuerpo Set CantidadRemitida = CantidadRemitida + @pCantidad
	Where venPedidos = @pvenPedidos And 
		Renglon_Pe = @pRenglon_Pe

UPDATE venPediCuerpo Set Pendiente = Case when CantidadRemitida >= CantidadPedida
	Then 0 else 1 end  
	Where venPedidos = @pvenPedidos And 
		Renglon_Pe = @pRenglon_Pe
		
GO


DROP PROCEDURE venPediCuerpoFacturar
GO

CREATE PROCEDURE venPediCuerpoFacturar
(
@pvenPedidos int,
@pRenglon_Pe int,
@pCantidad qCantidadD8
)
as

UPDATE venPediCuerpo Set CantidadFacturada = CantidadFacturada + @pCantidad
	Where venPedidos = @pvenPedidos And 
		Renglon_Pe = @pRenglon_Pe
GO


DROP PROCEDURE venPediCuerpoRenglon
GO
CREATE PROCEDURE venPediCuerpoRenglon
(
@pvenPedidos int,
@pRenglon_Pe int
)
AS

exec venPediCuerpoDatos @pvenPedidos, @pRenglon_Pe

GO


DROP PROCEDURE venPediCuerpoDesecharPend
GO
CREATE PROCEDURE venPediCuerpoDesecharPend
(
@pvenPedidos int,
@pRenglon_Pe int=null
)

As
-- ver con Fabian porque estaba asi
Update venPediCuerpo Set Pendiente = 0 Where venPedidos = @pvenPedidos And Pendiente = 1 and Renglon_Pe=ISNULL(@pRenglon_Pe, Renglon_Pe)
	/* And ((CantidadPedida > CantidadRemitida And CantidadRemitida = 0) Or
	CantidadRemitida > CantidadFacturada) */

Go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venPedidos.sql*/
-- AJ MAY 17 QUITO EL 
-- AJ ENE 18 Metodo y Uso
-- venPedidosEstadoDatos 6

DROP PROCEDURE venPedidosGuardar
GO
CREATE PROCEDURE venPedidosGuardar
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20),
@pSubTipoMov_Id varchar(5),
@pFecha qFechaHora,
@pCliente_Id varChar(15) = NULL,
@pSucursal SucursalN = NULL,
@pSucursalUsu varChar(5),
@pMoneda_Id varchar(3) = NULL,
@pMonedaFacturacion varchar(3) = NULL,
@pCondPagoCli_Id varchar(5) = NULL,
@pListaPrecio_Id varchar(5) = NULL,	
@pVendedor_Id varChar(5) = NULL,
@pFormaEntrega_Id varchar(3) = NULL,
@pEstado char(1),
@pUsuarioAutoriz_Id varchar(25) = NULL,
@pFechaAutorizo datetime = NULL,
@pObservaciones QMemo = NULL,
@pObservEstado QMemo = NULL,
@pMotivo_Id smallint = NULL,
@pImporteTotal qMonedaD2,
@pBonificacion1 qMonedaD2,
@pBonificacion2 qMonedaD2,
@pBonificacion3 qMonedaD2,
@pBonificacion4 qMonedaD2,
@pBonificacion5 qMonedaD2,
@pDato1 qMonedaD2,
@pDato2 qMonedaD2,
@pDato3 qMonedaD2,
@pFechaUltMod qFechaHora,
@pCliOrdenCompra varchar(100),
@pvenNroPedido varchar(15),
@pFacturaAnticipo Sino,
@pTrabaDespacho Sino,
@pPorAnticipo qPorcentaje,
@pAnticipo qMonedaD2,
@pAnticipoPendiente qMonedaD2,
@pObsAnticipo QMemo = NULL,
@pTipoPrecioForm char(1),
@pCongelaCambio Sino,
@pFecha_Registro datetime,
@pCambio qMonedaD8,
@pIncoterm_Id char(3) = NULL,
@pSoloEntrega Sino,
@pUsuario_Id int,
@pPosteado Sino,
@pMetodoPago VarChar(3), 
@pUsoCfdi VarChar(3),
@pSubTotal qMonedaD2,
@pSubTotalBonif qMonedaD2
)
AS
SET NOCOUNT ON 
Declare @lIdentity int = (Select venPedidos
 from venPediSegmentos
 Where
	venPediSegmentos.Empresa_id = @pEmpresa_Id and 
	venPediSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	venPediSegmentos.Segmento1N = @pSegmento1N and 
	venPediSegmentos.Segmento2N = @pSegmento2N and 
	venPediSegmentos.Segmento3N = @pSegmento3N and 
	venPediSegmentos.Segmento4N = @pSegmento4N and 
	venPediSegmentos.Segmento1C = @pSegmento1C and 
	venPediSegmentos.Segmento2C = @pSegmento2C and 
	venPediSegmentos.Segmento3C = @pSegmento3C and 
	venPediSegmentos.Segmento4C = @pSegmento4C )

IF (@lIdentity IS NOT NULL)
BEGIN 
	UPDATE venPedidos
	SET 
		Empresa_Id = @pEmpresa_Id,
		SubTipoMov_Id = dbo.FuncFKvenSubTipoMov(@pSubTipoMov_Id),
		Fecha = @pFecha,
		Cliente_Id = dbo.FuncFKvenClientes(@pCliente_Id),
		Sucursal = @pSucursal,
		SucursalUsu = dbo.FuncFKgenSucursalesEmpr(@pSucursalUsu),
		Moneda_Id = dbo.FuncFKgenMonedas(@pMoneda_Id),
		MonedaFacturacion = dbo.FuncFKgenMonedas(@pMonedaFacturacion),
		CondPagoCli_Id = dbo.FuncFKvenCondPago(@pCondPagoCli_Id),
		ListaPrecio_Id = dbo.FuncFKvenListasPrecios(@pListaPrecio_Id),
		Vendedor_Id = dbo.FuncFKvenVendedores(@pVendedor_Id),
		FormaEntrega_Id = dbo.FuncFKvenFormaEntrega(@pFormaEntrega_Id),
		Estado = @pEstado,
		UsuarioAutoriz_Id = dbo.FuncFKgenUsuarios(@pUsuarioAutoriz_Id),
		FechaAutorizo = @pFechaAutorizo,
		Observaciones = @pObservaciones,
		ObservEstado = @pObservEstado,
		Motivo_Id = @pMotivo_Id,
		ImporteTotal = @pImporteTotal,
		Bonificacion1 = @pBonificacion1,
		Bonificacion2 = @pBonificacion2,
		Bonificacion3 = @pBonificacion3,
		Bonificacion4 = @pBonificacion4,
		Bonificacion5 = @pBonificacion5,
		Dato1 = @pDato1,
		Dato2 = @pDato2,
		Dato3 = @pDato3,
		FechaUltMod = @pFechaUltMod,
		CliOrdenCompra = @pCliOrdenCompra,
		venNroPedido = @pvenNroPedido,
		FacturaAnticipo = @pFacturaAnticipo,
		TrabaDespacho = @pTrabaDespacho,
		PorAnticipo = @pPorAnticipo,
		Anticipo = @pAnticipo,
		AnticipoPendiente = @pAnticipoPendiente,
		ObsAnticipo = @pObsAnticipo,
		TipoPrecioForm = @pTipoPrecioForm,
		CongelaCambio = @pCongelaCambio,
		Fecha_Registro = @pFecha_Registro,
		Cambio = @pCambio,
		Incoterm_Id = dbo.FuncFKvenIncoterm(@pIncoterm_Id),
		SoloEntrega = @pSoloEntrega,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado,
		MetodoPago = @pMetodoPago, 
		UsoCfdi = @pUsoCfdi,
		SubTotal = @pSubTotal,
		SubTotalBonif = @pSubTotalBonif
	WHERE venPedidos = @lIdentity
END 
ELSE 
BEGIN 
	INSERT INTO venPedidos
	(
		Empresa_Id,
		SubTipoMov_Id,
		Fecha,
		Cliente_Id,
		Sucursal,
		SucursalUsu,
		Moneda_Id,
		MonedaFacturacion,
		CondPagoCli_Id,
		ListaPrecio_Id,
		Vendedor_Id,
		FormaEntrega_Id,
		Estado,
		UsuarioAutoriz_Id,
		FechaAutorizo,
		Observaciones,
		ObservEstado,
		Motivo_Id,
		ImporteTotal,
		Bonificacion1,
		Bonificacion2,
		Bonificacion3,
		Bonificacion4,
		Bonificacion5,
		Dato1,
		Dato2,
		Dato3,
		FechaUltMod,
		CliOrdenCompra,
		venNroPedido,
		FacturaAnticipo,
		TrabaDespacho,
		PorAnticipo,
		Anticipo,
		AnticipoPendiente,
		ObsAnticipo,
		TipoPrecioForm,
		CongelaCambio,
		Fecha_Registro,
		Cambio,
		Incoterm_Id,
		SoloEntrega,
		Usuario_Id,
		Posteado, 
		MetodoPago,
		UsoCfdi,
		SubTotal,
		SubTotalBonif
	)
	VALUES 
	(
		@pEmpresa_Id,
		dbo.FuncFKvenSubTipoMov(@pSubTipoMov_Id),
		@pFecha,
		dbo.FuncFKvenClientes(@pCliente_Id),
		@pSucursal,
		dbo.FuncFKgenSucursalesEmpr(@pSucursalUsu),
		dbo.FuncFKgenMonedas(@pMoneda_Id),
		dbo.FuncFKgenMonedas(@pMonedaFacturacion),
		dbo.FuncFKvenCondPago(@pCondPagoCli_Id),
		dbo.FuncFKvenListasPrecios(@pListaPrecio_Id),
		dbo.FuncFKvenVendedores(@pVendedor_Id),
		dbo.FuncFKvenFormaEntrega(@pFormaEntrega_Id),
		@pEstado, /* FM 24/03/2019 Dec?a 'P' */
		dbo.FuncFKgenUsuarios(@pUsuarioAutoriz_Id),
		@pFechaAutorizo,
		@pObservaciones,
		@pObservEstado,
		@pMotivo_Id,
		@pImporteTotal,
		@pBonificacion1,
		@pBonificacion2,
		@pBonificacion3,
		@pBonificacion4,
		@pBonificacion5,
		@pDato1,
		@pDato2,
		@pDato3,
		@pFechaUltMod,
		@pCliOrdenCompra,
		@pvenNroPedido,
		@pFacturaAnticipo,
		@pTrabaDespacho,
		@pPorAnticipo,
		@pAnticipo,
		@pAnticipoPendiente,
		@pObsAnticipo,
		@pTipoPrecioForm,
		@pCongelaCambio,
		@pFecha_Registro,
		@pCambio,
		dbo.FuncFKvenIncoterm(@pIncoterm_Id),
		@pSoloEntrega,
		@pUsuario_Id,
		@pPosteado, 
		@pMetodoPago, 
		@pUsoCfdi,
		@pSubTotal,
		@pSubTotalBonif
	)
	SET @lIdentity =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentity as RetVal 

GO


DROP PROCEDURE venPedidosDatos_Identity
GO
CREATE PROCEDURE venPedidosDatos_Identity
(
@lIdentity int
)
AS
SET NOCOUNT ON 

SELECT venPedidos.venPedidos, venPediSegmentos.Empresa_Id, genSegmentos.Segmento_Id, venPediSegmentos.Segmento1N,
	venPediSegmentos.Segmento2N,venPediSegmentos.Segmento3N,venPediSegmentos.Segmento4N,
	venPediSegmentos.Segmento1C, venPediSegmentos.Segmento2C,venPediSegmentos.Segmento3C,
	venPediSegmentos.Segmento4C, 
	dbo.Segmento(venPediSegmentos.Segmento_Id, venPediSegmentos.Segmento1C, venPediSegmentos.Segmento2C,
	venPediSegmentos.Segmento3C, venPediSegmentos.Segmento4C, venPediSegmentos.Segmento1N,
	venPediSegmentos.Segmento2N,venPediSegmentos.Segmento3N,venPediSegmentos.Segmento4N) Segmento,
	venSubTipoMov.SubTipoMov_Id, venSubTipoMov.Descripcion as DescripcionSubTipoMov, venPedidos.Fecha,
	venClientes.Cliente_Id, venPedidos.Sucursal, venClieHabitual.NombreFantasia, genMonedas.Moneda_Id,
	genMonedas.Descripcion as DescripcionMonedas, genMonedasFact.Moneda_Id MonedaFacturacion, genMonedas.Descripcion DescripcionMonFacturacion,
	venCondPago.CondPagoCli_Id, venCondPago.Descripcion as DescripcionCondPago, 
	venListasPrecios.ListaPrecio_Id, venListasPrecios.Descripcion as DescripcionListasPrecios, venVendedores.Vendedor_Id, 
	venVendedores.Nombre as DescripcionVendedores, venFormaEntrega.FormaEntrega_Id,
	venFormaEntrega.RazonSocial as DescripcionFormaEntrega, venPedidos.Estado,
	genUsuarioAutoriz.Usuario_Id UsuarioAutoriz_Id, genUsuarioAutoriz.Apellido_y_Nombres as DescripcionUsuarioAutoriz,
	venPedidos.FechaAutorizo, venPedidos.Observaciones,
	venPedidos.ObservEstado, venPedidos.Motivo_Id, venPedidos.ImporteTotal, venPedidos.Bonificacion1,
	venPedidos.Bonificacion2, venPedidos.Bonificacion3, venPedidos.Bonificacion4, venPedidos.Bonificacion5,
	venPedidos.Dato1, venPedidos.Dato2, venPedidos.Dato3, venPedidos.FechaUltMod,
	venPedidos.CliOrdenCompra, venPedidos.venNroPedido, venPedidos.FacturaAnticipo, venPedidos.TrabaDespacho,
	venPedidos.PorAnticipo, venPedidos.Anticipo, venPedidos.AnticipoPendiente, venPedidos.ObsAnticipo,
	venPedidos.TipoPrecioForm, venPedidos.CongelaCambio, venPedidos.Fecha_Registro, venPedidos.Cambio,
	venIncoterm.Incoterm_Id, venIncoterm.Descripcion as DescripcionIncoterm, venPedidos.SoloEntrega,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, venPedidos.Posteado, 
	venPedidos.MetodoPago , venpedidos.UsoCfdi, UsosCfdi.Descripcion as DescripcionUsoCfdi, 
	Metodos.Descripcion as DescripcionMetodoPago, venPedidos.SubTotal, venPedidos.SubTotalBonif,
	genSucursalesEmpr.Sucursal SucursalUsu, 0 as TipoPago, CAST(0 as bit) AceptaDatosExternos
FROM venPedidos 
INNER JOIN venSubTipoMov  ON (venSubTipoMov.venSubTipoMov = venPedidos.SubTipoMov_Id)
LEFT JOIN venClieHabitual  ON (venClieHabitual.genEntidades = venPedidos.Cliente_Id) AND (venClieHabitual.Sucursal = venPedidos.Sucursal)
Left Join venClientes On venPedidos.Cliente_Id = venClientes.genEntidades
LEFT JOIN genMonedas  ON (genMonedas.genMonedas = venPedidos.Moneda_Id)
Left Join genMonedas genMonedasFact On genMonedasFact.genMonedas = venPedidos.MonedaFacturacion
LEFT JOIN venCondPago  ON (venCondPago.venCondPago = venPedidos.CondPagoCli_Id)
LEFT JOIN venListasPrecios  ON (venListasPrecios.venListasPrecios = venPedidos.ListaPrecio_Id)
LEFT JOIN venVendedores  ON (venVendedores.venVendedores = venPedidos.Vendedor_Id)
LEFT JOIN venFormaEntrega  ON (venFormaEntrega.venFormaEntrega = venPedidos.FormaEntrega_Id)
LEFT JOIN genUsuarios genUsuarioAutoriz  ON (genUsuarioAutoriz.genUsuarios = venPedidos.UsuarioAutoriz_Id)
LEFT JOIN venIncoterm  ON (venIncoterm.venIncoterm_int = venPedidos.Incoterm_Id)
INNER JOIN genUsuarios ON (genUsuarios.genUsuarios = venPedidos.Usuario_Id)
INNER JOIN venPediSegmentos ON venPediSegmentos.venPedidos = venPedidos.venPedidos
INNER JOIN genSegmentos ON venPediSegmentos.Segmento_Id = genSegmentos.genSegmentos
LEFT JOIN genEntidadesBasicasValor as UsosCfdi ON
UsosCfdi.Entidad_Id = 4 AND 
UsosCfdi.Dominio_Id = 'MX' AND 
UsosCfdi.Clave = venPedidos.UsoCfdi
LEFT JOIN genEntidadesBasicasValor as Metodos ON
Metodos.Entidad_Id = 6 AND 
Metodos.Dominio_Id = 'MX' AND 
Metodos.Clave = venPedidos.MetodoPago
Left Join genSucursalesEmpr On genSucursalesEmpr.genSucursalesEmpr = venPedidos.SucursalUsu

WHERE venPedidos.venPedidos = @lIdentity

exec venPediCuerpoDatos  @lIdentity

Exec genAtributosGeneralesIdentityDatos @lIdentity, 'venPedidos'

SELECT getdate() as Fecha, '' Producto_Id, '' Descripcion, 0.00 as Existencia, 
	0.00 as Compras, 0.00 as Embarques,	
		0.00 as Pedidos, 0.00 as TransitoLocal,
		0.00 as Final, '' as Deposito_Id

select '' as Entidad_Id, '' as Descripcion, '' SegmentoSTR, 0.00 as Cantidad


-- para v2 las cotizaciones
select genSegmentos.Segmento_Id, venCotizSegmento.Segmento1N, venCotizSegmento.Segmento2N,
	venCotizSegmento.Segmento3N, venCotizSegmento.Segmento4N, venCotizSegmento.Segmento1C,
	venCotizSegmento.Segmento2C, venCotizSegmento.Segmento3C, venCotizSegmento.Segmento4C,CAST(0 AS BIT) as Agregar
FROM venCotizPedidos INNER JOIN venCotizSegmento ON
	venCotizPedidos.Cotizacion_Id = venCotizSegmento.venCotizaciones
	INNER JOIN genSegmentos ON
	genSegmentos.genSegmentos = venCotizSegmento.Segmento_Id
	Where
		venCotizPedidos.Pedido_Id = @lIdentity


Select venNPAutorizando.venPedidos, venNPAutorizando.Secuencia, venNivelesAuto.NivelAuto_Id,
venNivelesAuto.Descripcion DescripcionNivelesAuto, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres DescripciongenUsuarios,
venNPAutorizando.Fecha, venNPAutorizando.TipoApro
From venNPAutorizando
Inner Join venNivelesAuto On venNivelesAuto.venNivelesAuto = venNPAutorizando.NivelAuto_Id
Inner Join genUsuarios On genUsuarios.genUsuarios = venNPAutorizando.Usuario_Id
Where venNPAutorizando.venPedidos = @lIdentity

Select venPedidos.venPedidos, venEsquemaAuto.EsquemaAuto_Id, venEsquemaAuto.Descripcion DescripcionEsquema 
From venPedidos
inner join venSubTipoMov ON venSubTipoMov.venSubTipoMov = venPedidos.SubTipoMov_Id
Left Join venEsquemaAuto On venEsquemaAuto.venEsquemaAuto = venSubTipoMov.EsquemaAuto_Id
Where venPedidos.venPedidos = @lIdentity

Select venNPAutorizando.venPedidos, venNPAutorizando.Secuencia, venNivelesAuto.NivelAuto_Id,
venNivelesAuto.Descripcion DescripcionNivelesAuto, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres DescripciongenUsuarios,
venNPAutorizando.Fecha, venNPAutorizando.TipoApro
From venNPAutorizando
Inner Join venNivelesAuto On venNivelesAuto.venNivelesAuto = venNPAutorizando.NivelAuto_Id
Left Join genUsuarios On genUsuarios.genUsuarios = venNPAutorizando.Usuario_Id
Where venNPAutorizando.venPedidos = @lIdentity

Select MVendedor, MFormaE, MListaP, MBonifDato, MBonifReng, MPrecioReng From venPediValiComer Where venPedidos = @lIdentity
select 0.00 as Disponible, 0.00 as LimiteCredito
exec venPedidosPendClie ''

exec genAdjuntosDatos '',0,0
Go




DROP PROCEDURE venPedidosDatos
GO
CREATE PROCEDURE venPedidosDatos
(
@pEmpresa_Id int, 
@pSegmento_id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
AS
SET NOCOUNT ON 

Declare @pIdentity int= (select venPedidos from venPediSegmentos
	Where
	venPediSegmentos.Empresa_id = @pEmpresa_id and 
	venPediSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_id) and 
	venPediSegmentos.Segmento1N = @pSegmento1N and 
	venPediSegmentos.Segmento2N = @pSegmento2N and 
	venPediSegmentos.Segmento3N = @pSegmento3N and 
	venPediSegmentos.Segmento4N = @pSegmento4N and 
	venPediSegmentos.Segmento1C = @pSegmento1C and 
	venPediSegmentos.Segmento2C = @pSegmento2C and 
	venPediSegmentos.Segmento3C = @pSegmento3C and 
	venPediSegmentos.Segmento4C = @pSegmento4C)

Exec venPedidosDatos_Identity @pIdentity

--Remitos
SELECT ' ' AS Remito, CONVERT(DATETIME,NULL) AS Fecha, CAST(0 AS bit) as Anulado

--Factura
SELECT ' ' AS Factura, CONVERT(DATETIME,NULL) AS Fecha, CAST(0 AS bit) as Anulado

--Reparto
SELECT ' ' AS Reparto, CONVERT(DATETIME,NULL) AS Fecha, CAST(0 AS bit) as Cerrado


RETURN @@Error
GO


DROP PROCEDURE venPedidosEliminar
GO
CREATE PROCEDURE venPedidosEliminar
(
@lIdentity int
)
AS
SET NOCOUNT ON 

DELETE FROM venPedidos WHERE venPedidos.venPedidos = @lIdentity
RETURN @@Error 

GO

Drop Procedure venPedidosAutorizar
Go

Create Procedure venPedidosAutorizar
(
@pvenPedidos Int,
@pUsuario_Id Int,
@pObservEstado qMemo
)
As
Update venPedidos Set UsuarioAutoriz_Id = @pUsuario_Id, FechaAutorizo = dbo.FechaActual(), ObservEstado = @pObservEstado
	Where venPedidos = @pvenPedidos
Go

Drop Procedure venPedidosRechazar
Go

Create Procedure venPedidosRechazar
(
@pvenPedidos Int,
@pUsuario_Id Int,
@pObservEstado qMemo
)
As
Update venPedidos Set UsuarioAutoriz_Id = @pUsuario_Id, FechaAutorizo = dbo.FechaActual(), ObservEstado = @pObservEstado,
	Estado = 'Z' Where venPedidos = @pvenPedidos
Go

Drop Procedure venPedidosAplicarAnticipo
Go

Create Procedure venPedidosAplicarAnticipo
(
@pvenPedidos Int,
@pMonto Numeric(18,2)
)
As
Update venPedidos Set AnticipoPendiente = AnticipoPendiente - @pMonto Where venPedidos = @pvenPedidos
Go

Drop Procedure venPedidosCambiarEstado
GO
Create Procedure venPedidosCambiarEstado
(
@pvenPedidos Int,
@pEstado Char(1)
)
As
Update venPedidos Set 	Estado = @pEstado Where venPedidos = @pvenPedidos
Go


Drop Procedure venPedidosEstadoDatos
GO
Create Procedure venPedidosEstadoDatos
(
@pvenPedidos Int
)
As
SELECT venPedidos.venPedidos, venPedidos.Estado, 
	venPedidos.UsuarioAutoriz_Id,
	Cast(MAX(Convert(int,Pendiente)) as bit) Pendiente , 
			SUM(CantidadPedida) CantidadPedida, 
			SUM(CantidadRemitida) CantidadRemitida, 
			SUM(CantidadFacturada) CantidadFacturada
FROM venPedidos INNER JOIN venPediCuerpo ON
	venPedidos.venPedidos = venPediCuerpo.venPedidos
WHERE
venPedidos.venPedidos = @pvenPedidos
GROUP BY venPedidos.venPedidos, venPedidos.Estado, venPedidos.UsuarioAutoriz_Id
	
Go


DROP PROCEDURE venPedidosRenglonesPend
GO
CREATE PROCEDURE venPedidosRenglonesPend
(
@pEmpresa_Id int, 
@pSegmento_id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
AS
SET NOCOUNT ON 

Declare @pIdentity int= (select venPedidos from venPediSegmentos
	Where
	venPediSegmentos.Empresa_id = @pEmpresa_id and 
	venPediSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_id) and 
	venPediSegmentos.Segmento1N = @pSegmento1N and 
	venPediSegmentos.Segmento2N = @pSegmento2N and 
	venPediSegmentos.Segmento3N = @pSegmento3N and 
	venPediSegmentos.Segmento4N = @pSegmento4N and 
	venPediSegmentos.Segmento1C = @pSegmento1C and 
	venPediSegmentos.Segmento2C = @pSegmento2C and 
	venPediSegmentos.Segmento3C = @pSegmento3C and 
	venPediSegmentos.Segmento4C = @pSegmento4C)
Go

Drop Procedure venPedidosMotivosGuardar
Go

Create Procedure venPedidosMotivosGuardar
(
@pvenPedidos Int,
@pMotivo smallint
)
As
Update venPedidos Set Motivo_Id = @pMotivo  Where venPedidos = @pvenPedidos
Go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venPedidosAnticipo.sql*/
-- venPedidosAnticipoDatos  1,'NP',2,0,0,0,'0001',' ',' ',' '
DROP PROCEDURE venPedidosAnticipoDatos
GO
CREATE PROCEDURE venPedidosAnticipoDatos
(

@pEmpresa_Id int, 
@pSegmento_id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)

)

AS

 SELECT venPedidos.venPedidos, venPediSegmentos.Empresa_Id, genSegmentos.Segmento_Id, venPediSegmentos.Segmento1N,
	venPediSegmentos.Segmento2N,venPediSegmentos.Segmento3N,venPediSegmentos.Segmento4N,
	venPediSegmentos.Segmento1C, venPediSegmentos.Segmento2C,venPediSegmentos.Segmento3C,
	venPediSegmentos.Segmento4C, 
	isnull(venSubTipoMov.SubTipoMov_Id,' ') AS SubTipoMov_Id, 
	isnull(venSubTipoMov.Descripcion,' ') as DescripcionSubTipoMov, venPedidos.Fecha,
	dbo.FechaActual() as FechaFactura, 
	venClientes.Cliente_Id, venPedidos.Sucursal, venClieHabitual.NombreFantasia, genMonedas.Moneda_Id,
	genMonedas.Descripcion as DescripcionMonedas, 
	genMonedasFact.Moneda_Id MonedaFacturacion, genMonedas.Descripcion DescripcionMonFacturacion,
	venCondPago.CondPagoCli_Id, venCondPago.Descripcion as DescripcionCondPago, 
	venListasPrecios.ListaPrecio_Id, venListasPrecios.Descripcion as DescripcionListasPrecios, 
	venVendedores.Vendedor_Id, venVendedores.Nombre as DescripcionVendedores, venFormaEntrega.FormaEntrega_Id,
	venFormaEntrega.RazonSocial as DescripcionFormaEntrega, venPedidos.Estado,
	genUsuarioAutoriz.Usuario_Id UsuarioAutoriz_Id, genUsuarioAutoriz.Apellido_y_Nombres as DescripcionUsuarioAutoriz,
	venPedidos.FechaAutorizo, venPedidos.Observaciones,
	venPedidos.ImporteTotal, 
	venPedidos.CliOrdenCompra, venPedidos.venNroPedido, 
	venPedidos.FacturaAnticipo, venPedidos.PorAnticipo, venPedidos.Anticipo, venPedidos.AnticipoPendiente, 
	venPedidos.ObsAnticipo,	venPedidos.CongelaCambio, venPedidos.Cambio, venPedidos.Posteado, 
	venPedidos.MetodoPago , venpedidos.UsoCfdi, UsosCfdi.Descripcion as DescripcionUsoCfdi, 
	Metodos.Descripcion as DescripcionMetodoPago, Cast(1 as Bit) as Timbrar , 
	dbo.Segmento(venPediSegmentos.Segmento_Id, venPediSegmentos.Segmento1C, venPediSegmentos.Segmento2C,
	venPediSegmentos.Segmento3C, venPediSegmentos.Segmento4C,venPediSegmentos.Segmento1N,
	venPediSegmentos.Segmento2N,venPediSegmentos.Segmento3N,venPediSegmentos.Segmento4N) as SegmentoStr, 
		' ' Segmento_IdFact , 0 Segmento1NFact , 0 Segmento2NFact , 0 Segmento3NFact , 0 Segmento4NFact ,
	' ' Segmento1CFact , ' ' Segmento2CFact, ' ' Segmento3CFact, ' ' Segmento4CFact,	
	' ' as ArchivoPDF, ' ' as ArchivoXML
FROM venPedidos 
LEFT JOIN venSubTipoMov  ON (venSubTipoMov.SubTipoMov_Id='FC')
LEFT JOIN venClieHabitual  ON (venClieHabitual.genEntidades = venPedidos.Cliente_Id) AND (venClieHabitual.Sucursal = venPedidos.Sucursal)
Left Join venClientes On venPedidos.Cliente_Id = venClientes.genEntidades
LEFT JOIN genMonedas  ON (genMonedas.genMonedas = venPedidos.Moneda_Id)
Left Join genMonedas genMonedasFact On genMonedasFact.genMonedas = venPedidos.MonedaFacturacion
LEFT JOIN venCondPago  ON (venCondPago.venCondPago = venPedidos.CondPagoCli_Id)
LEFT JOIN venListasPrecios  ON (venListasPrecios.venListasPrecios = venPedidos.ListaPrecio_Id)
LEFT JOIN venVendedores  ON (venVendedores.venVendedores = venPedidos.Vendedor_Id)
LEFT JOIN venFormaEntrega  ON (venFormaEntrega.venFormaEntrega = venPedidos.FormaEntrega_Id)
LEFT JOIN genUsuarios genUsuarioAutoriz  ON (genUsuarioAutoriz.genUsuarios = venPedidos.UsuarioAutoriz_Id)
LEFT JOIN venIncoterm  ON (venIncoterm.venIncoterm_int = venPedidos.Incoterm_Id)
INNER JOIN genUsuarios ON (genUsuarios.genUsuarios = venPedidos.Usuario_Id)
INNER JOIN venPediSegmentos ON venPediSegmentos.venPedidos = venPedidos.venPedidos
INNER JOIN genSegmentos ON venPediSegmentos.Segmento_Id = genSegmentos.genSegmentos
LEFT JOIN genEntidadesBasicasValor as UsosCfdi ON
UsosCfdi.Entidad_Id = 4 AND 
UsosCfdi.Dominio_Id = 'MX' AND 
UsosCfdi.Clave = venPedidos.UsoCfdi
LEFT JOIN genEntidadesBasicasValor as Metodos ON
Metodos.Entidad_Id = 6 AND 
Metodos.Dominio_Id = 'MX' AND 
Metodos.Clave = venPedidos.MetodoPago
WHERE 
	venPediSegmentos.Empresa_id = @pEmpresa_id and 
	venPediSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_id) and 
	venPediSegmentos.Segmento1N = @pSegmento1N and 
	venPediSegmentos.Segmento2N = @pSegmento2N and 
	venPediSegmentos.Segmento3N = @pSegmento3N and 
	venPediSegmentos.Segmento4N = @pSegmento4N and 
	venPediSegmentos.Segmento1C = @pSegmento1C and 
	venPediSegmentos.Segmento2C = @pSegmento2C and 
	venPediSegmentos.Segmento3C = @pSegmento3C and 
	venPediSegmentos.Segmento4C = @pSegmento4C
GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venPedidosAnticipoFactDatos.sql*/
-- venPedidosAnticipoFactDatos 793
DROP PROCEDURE venPedidosAnticipoFactDatos
GO
CREATE PROCEDURE venPedidosAnticipoFactDatos
(
	@venPedidos Int
)
AS



SELECT venPediFacturados.venPedidos,
	sum(CASE WHEN venTipomov.Signo = 1 then -conMovCont.Importe * (-2*conMovCont.Tipomov+3) else 0 end) as ImporteFac,  
	sum(CASE WHEN venTipomov.Signo = 1 then -conMovCont.ImporteMonedaOriginal* (-2*conMovCont.Tipomov+3) else 0 end ) as ImporteOriginalFac, 
	sum(CASE WHEN venTipomov.Signo = -1 then -conMovCont.Importe * (-2*conMovCont.Tipomov+3) else 0 end) as ImporteNC,  
	sum(CASE WHEN venTipomov.Signo = -1 then -conMovCont.ImporteMonedaOriginal* (-2*conMovCont.Tipomov+3) else 0 end ) as ImporteOriginalNC 
FROM venPediFacturados 
INNER JOIN venMovimientos ON venMovimientos.venMovimientos = venPediFacturados.venMovimientos
INNER JOIN conAsientos ON conAsientos.conAsientos = venMovimientos.venMovimientos
INNER JOIN venMovDetalle ON  venMovDetalle.venMovimientos = conAsientos.conAsientos 
INNER JOIN conMovCont ON conMovCont.conAsientos = venMovDetalle.venMovimientos AND
			conMovCont.Renglon = venMovDetalle.conRenglon
INNER JOIN venTipoMov ON  venTipoMov.venTipoMov = venMovimientos.venTipoMov
WHERE
	conAsientos.Anulado = 0 and 
	conAsientos.Posteado = 1 and 
	venPediFacturados.venPedidos = @venPedidos
GROUP BY venPediFacturados.venPedidos
GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venPedidosAnul.sql*/
DROP PROCEDURE venPedidosAnulGuardar
GO
CREATE PROCEDURE venPedidosAnulGuardar
(
@pvenPedidos int,
@pFecha qFechaHora,
@pOperacion char(1),
@pUsuario_Id int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venPedidosAnul WHERE (venPedidos = @pvenPedidos)))
BEGIN 
	UPDATE venPedidosAnul
	SET Fecha = @pFecha,
		Operacion = @pOperacion,
		Usuario_Id = @pUsuario_Id
	WHERE (venPedidos = @pvenPedidos)
END 
ELSE 
BEGIN 
	INSERT INTO venPedidosAnul
	(
		venPedidos,
		Fecha,
		Operacion,
		Usuario_Id
	)
	VALUES 
	(
		@pvenPedidos,
		@pFecha,
		@pOperacion,
		@pUsuario_Id
	)
END 

GO

DROP PROCEDURE venPedidosAnulDatos
GO
CREATE PROCEDURE venPedidosAnulDatos
(
@pvenPedidos int
)
AS
SET NOCOUNT ON 

SELECT venPedidos.venPedidos, venPedidosAnul.Fecha, venPedidosAnul.Operacion, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario
FROM venPedidosAnul 
INNER JOIN venPedidos ON (venPedidos.venPedidos = venPedidosAnul.venPedidos)
INNER JOIN genUsuarios ON (genUsuarios.genUsuarios = venPedidosAnul.Usuario_Id)
WHERE (venPedidosAnul.venPedidos = @pvenPedidos)
 
 RETURN @@Error 

GO

DROP PROCEDURE venPedidosAnulEliminar
GO
CREATE PROCEDURE venPedidosAnulEliminar
(
@pvenPedidos int
)
AS
SET NOCOUNT ON 

DELETE FROM venPedidosAnul WHERE (venPedidos = @pvenPedidos)
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venPedidosConsultaDrillDown.sql*/
DROP PROCEDURE venPedidosConsultaDrillDown
GO
CREATE PROCEDURE venPedidosConsultaDrillDown
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
As

Declare @lIdentity int = (select venPedidos from venPediSegmentos
	Where
	venPediSegmentos.Empresa_id = @pEmpresa_id and 
	venPediSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_id) and 
	venPediSegmentos.Segmento1N = @pSegmento1N and 
	venPediSegmentos.Segmento2N = @pSegmento2N and 
	venPediSegmentos.Segmento3N = @pSegmento3N and 
	venPediSegmentos.Segmento4N = @pSegmento4N and 
	venPediSegmentos.Segmento1C = @pSegmento1C and 
	venPediSegmentos.Segmento2C = @pSegmento2C and 
	venPediSegmentos.Segmento3C = @pSegmento3C and 
	venPediSegmentos.Segmento4C = @pSegmento4C)

SELECT venPedidos.venPedidos, venPediSegmentos.Empresa_Id, genSegmentos.Segmento_Id, venPediSegmentos.Segmento1N,
	venPediSegmentos.Segmento2N,venPediSegmentos.Segmento3N,venPediSegmentos.Segmento4N,
	venPediSegmentos.Segmento1C, venPediSegmentos.Segmento2C,venPediSegmentos.Segmento3C,
	venPediSegmentos.Segmento4C, 
	dbo.Segmento(venPediSegmentos.Segmento_Id, venPediSegmentos.Segmento1C, venPediSegmentos.Segmento2C,
	venPediSegmentos.Segmento3C, venPediSegmentos.Segmento4C, venPediSegmentos.Segmento1N,
	venPediSegmentos.Segmento2N,venPediSegmentos.Segmento3N,venPediSegmentos.Segmento4N) Segmento,
	venSubTipoMov.SubTipoMov_Id, venSubTipoMov.Descripcion as DescripcionSubTipoMov, venPedidos.Fecha,
	venClientes.Cliente_Id, venPedidos.Sucursal, venClieHabitual.NombreFantasia, genMonedas.Moneda_Id,
	genMonedas.Descripcion as DescripcionMonedas, genMonedasFact.Moneda_Id MonedaFacturacion, genMonedas.Descripcion DescripcionMonFacturacion,
	venCondPago.CondPagoCli_Id, venCondPago.Descripcion as DescripcionCondPago, 
	venListasPrecios.ListaPrecio_Id, venListasPrecios.Descripcion as DescripcionListasPrecios, venVendedores.Vendedor_Id, 
	venVendedores.Nombre as DescripcionVendedores, venFormaEntrega.FormaEntrega_Id,
	venFormaEntrega.RazonSocial as DescripcionFormaEntrega, venPedidos.Estado,
	genUsuarioAutoriz.Usuario_Id UsuarioAutoriz_Id, genUsuarioAutoriz.Apellido_y_Nombres as DescripcionUsuarioAutoriz,
	venPedidos.FechaAutorizo, venPedidos.Observaciones,
	venPedidos.ObservEstado, venPedidos.Motivo_Id, venPedidos.ImporteTotal, venPedidos.Bonificacion1,
	venPedidos.Bonificacion2, venPedidos.Bonificacion3, venPedidos.Bonificacion4, venPedidos.Bonificacion5,
	venPedidos.Dato1, venPedidos.Dato2, venPedidos.Dato3, venPedidos.FechaUltMod,
	venPedidos.CliOrdenCompra, venPedidos.venNroPedido, venPedidos.FacturaAnticipo, venPedidos.TrabaDespacho,
	venPedidos.PorAnticipo, venPedidos.Anticipo, venPedidos.AnticipoPendiente, venPedidos.ObsAnticipo,
	venPedidos.TipoPrecioForm, venPedidos.CongelaCambio, venPedidos.Fecha_Registro, venPedidos.Cambio,
	venIncoterm.Incoterm_Id, venIncoterm.Descripcion as DescripcionIncoterm, venPedidos.SoloEntrega,
	genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, venPedidos.Posteado, 
	venPedidos.MetodoPago , venpedidos.UsoCfdi, UsosCfdi.Descripcion as DescripcionUsoCfdi, 
	Metodos.Descripcion as DescripcionMetodoPago, venPedidos.SubTotal, venPedidos.SubTotalBonif,
	genSucursalesEmpr.Sucursal SucursalUsu
FROM venPedidos 
INNER JOIN venSubTipoMov  ON (venSubTipoMov.venSubTipoMov = venPedidos.SubTipoMov_Id)
LEFT JOIN venClieHabitual  ON (venClieHabitual.genEntidades = venPedidos.Cliente_Id) AND (venClieHabitual.Sucursal = venPedidos.Sucursal)
Left Join venClientes On venPedidos.Cliente_Id = venClientes.genEntidades
LEFT JOIN genMonedas  ON (genMonedas.genMonedas = venPedidos.Moneda_Id)
Left Join genMonedas genMonedasFact On genMonedasFact.genMonedas = venPedidos.MonedaFacturacion
LEFT JOIN venCondPago  ON (venCondPago.venCondPago = venPedidos.CondPagoCli_Id)
LEFT JOIN venListasPrecios  ON (venListasPrecios.venListasPrecios = venPedidos.ListaPrecio_Id)
LEFT JOIN venVendedores  ON (venVendedores.venVendedores = venPedidos.Vendedor_Id)
LEFT JOIN venFormaEntrega  ON (venFormaEntrega.venFormaEntrega = venPedidos.FormaEntrega_Id)
LEFT JOIN genUsuarios genUsuarioAutoriz  ON (genUsuarioAutoriz.genUsuarios = venPedidos.UsuarioAutoriz_Id)
LEFT JOIN venIncoterm  ON (venIncoterm.venIncoterm_int = venPedidos.Incoterm_Id)
INNER JOIN genUsuarios ON (genUsuarios.genUsuarios = venPedidos.Usuario_Id)
INNER JOIN venPediSegmentos ON venPediSegmentos.venPedidos = venPedidos.venPedidos
INNER JOIN genSegmentos ON venPediSegmentos.Segmento_Id = genSegmentos.genSegmentos
LEFT JOIN genEntidadesBasicasValor as UsosCfdi ON
UsosCfdi.Entidad_Id = 4 AND 
UsosCfdi.Dominio_Id = 'MX' AND 
UsosCfdi.Clave = venPedidos.UsoCfdi
LEFT JOIN genEntidadesBasicasValor as Metodos ON
Metodos.Entidad_Id = 6 AND 
Metodos.Dominio_Id = 'MX' AND 
Metodos.Clave = venPedidos.MetodoPago
Left Join genSucursalesEmpr On genSucursalesEmpr.genSucursalesEmpr = venPedidos.SucursalUsu
WHERE venPedidos.venPedidos = @lIdentity

exec venPediCuerpoDatos  @lIdentity

Exec genAtributosGeneralesIdentityDatos @lIdentity, 'venPedidos'

-- Consulta de stock --
SELECT getdate() as Fecha, '' Producto_Id, '' Descripcion, 0.00 as Existencia, 
	0.00 as Compras, 0.00 as Embarques,	
		0.00 as Pedidos, 0.00 as TransitoLocal,
		0.00 as Final, '' as Deposito_Id

Select '' as Entidad_Id, '' as Descripcion, '' SegmentoSTR, 0.00 as Cantidad


-- Autorizaciones --
Select venNPAutorizando.venPedidos, venNPAutorizando.Secuencia, venNivelesAuto.NivelAuto_Id,
venNivelesAuto.Descripcion DescripcionNivelesAuto, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres DescripciongenUsuarios,
venNPAutorizando.Fecha, venNPAutorizando.TipoApro
From venNPAutorizando
Inner Join venNivelesAuto On venNivelesAuto.venNivelesAuto = venNPAutorizando.NivelAuto_Id
Inner Join genUsuarios On genUsuarios.genUsuarios = venNPAutorizando.Usuario_Id
Where venNPAutorizando.venPedidos = @lIdentity

-- Esquema --
Select venPedidos.venPedidos, venEsquemaAuto.EsquemaAuto_Id, venEsquemaAuto.Descripcion DescripcionEsquema 
From venPedidos
inner join venSubTipoMov ON venSubTipoMov.venSubTipoMov = venPedidos.SubTipoMov_Id
Left Join venEsquemaAuto On venEsquemaAuto.venEsquemaAuto = venSubTipoMov.EsquemaAuto_Id
Where venPedidos.venPedidos = @lIdentity
/*
Select MVendedor, MFormaE, MListaP, MBonifDato, MBonifReng, MPrecioReng From venPediValiComer Where venPedidos = @lIdentity
select 0.00 as Disponible, 0.00 as LimiteCredito
exec venPedidosPendClie ''
*/

-- Remitos --
Select Distinct dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Relacionado, 	
genSegmentos.Segmento_Id, disFormularios.Formulario_Id, disFormularios.Descripcion
From venPediRemitidos
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = venPediRemitidos.stkMoviCabe
Inner Join genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
INNER JOIN conAsientos ON venPediRemitidos.stkMoviCabe = conAsientos.conAsientos
Cross Join (genMenus Inner Join disFormularios On disFormularios.disFormularios = genMenus.Formulario_Id)
WHERE venPediRemitidos.venPedidos = @lIdentity And genMenus.Orden = '239010'
Union All
-- Facturas --
Select Distinct dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Relacionado,
genSegmentos.Segmento_Id, disFormularios.Formulario_Id, disFormularios.Descripcion
From venMovConStockCrPed
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = venMovConStockCrPed.venMovimientos
Inner Join genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
INNER JOIN conAsientos ON venMovConStockCrPed.venMovimientos = conAsientos.conAsientos
Cross Join (genMenus Inner Join disFormularios On disFormularios.disFormularios = genMenus.Formulario_Id)
Where venMovConStockCrPed.venPedidos = @lIdentity And genMenus.Orden = '539910'
UNION 
Select Distinct dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Relacionado,
genSegmentos.Segmento_Id, disFormularios.Formulario_Id, disFormularios.Descripcion
From venPediFacturados
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = venPediFacturados.venMovimientos
Inner Join genSegmentos ON genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
INNER JOIN conAsientos ON venPediFacturados.venMovimientos = conAsientos.conAsientos
Cross Join (genMenus Inner Join disFormularios On disFormularios.disFormularios = genMenus.Formulario_Id)
Where venPediFacturados.venPedidos = @lIdentity And genMenus.Orden = '539910'
Union All
-- Repartos --
Select Distinct dbo.Segmento(venRepaSegmentos.Segmento_Id, venRepaSegmentos.Segmento1C, venRepaSegmentos.Segmento2C,
venRepaSegmentos.Segmento3C, venRepaSegmentos.Segmento4C, venRepaSegmentos.Segmento1N, venRepaSegmentos.Segmento2N,
venRepaSegmentos.Segmento3N, venRepaSegmentos.Segmento4N) Relacionado,
genSegmentos.Segmento_Id, disFormularios.Formulario_Id, disFormularios.Descripcion
From venRepaPedi
Inner Join venRepaSegmentos On venRepaSegmentos.venReparto = venRepaPedi.venReparto
Inner Join genSegmentos ON genSegmentos.genSegmentos = venRepaSegmentos.Segmento_Id
Cross Join (genMenus Inner Join disFormularios On disFormularios.disFormularios = genMenus.Formulario_Id)
Where venRepaPedi.venPedidos = @lIdentity And genMenus.Orden = '52103020' --##
Union All
-- Cotizaciones --
Select Distinct dbo.Segmento(venCotizSegmento.Segmento_Id, venCotizSegmento.Segmento1C, venCotizSegmento.Segmento2C,
venCotizSegmento.Segmento3C, venCotizSegmento.Segmento4C, venCotizSegmento.Segmento1N, venCotizSegmento.Segmento2N,
venCotizSegmento.Segmento3N, venCotizSegmento.Segmento4N) Relacionado,
genSegmentos.Segmento_Id, disFormularios.Formulario_Id, disFormularios.Descripcion
FROM venCotizPedidos
INNER JOIN venCotizSegmento ON venCotizPedidos.Cotizacion_Id = venCotizSegmento.venCotizaciones
INNER JOIN genSegmentos ON genSegmentos.genSegmentos = venCotizSegmento.Segmento_Id
Cross Join (genMenus Inner Join disFormularios On disFormularios.disFormularios = genMenus.Formulario_Id)
Where venCotizPedidos.Pedido_Id = @lIdentity And genMenus.Orden = '524010' --##

RETURN @@Error
GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venPedidosPendAuto.sql*/

DROP PROCEDURE venPedidosPendAuto
GO
CREATE PROCEDURE venPedidosPendAuto 
( 
@Empresa_Id int,
@pUsuario_Id int
)
AS

SELECT @Empresa_Id AS Empresa_Id


Select Distinct venPedidos.venPedidos, venPediSegmentos.Segmento_Id, 
dbo.Segmento(venPediSegmentos.Segmento_Id, venPediSegmentos.Segmento1C, venPediSegmentos.Segmento2C, venPediSegmentos.Segmento3C, 
venPediSegmentos.Segmento4C, venPediSegmentos.Segmento1N, venPediSegmentos.Segmento2N, venPediSegmentos.Segmento3N, 
venPediSegmentos.Segmento4N) Segmento,
venClientes.Cliente_Id, venClientes.RazonSocial, venPedidos.Fecha, venPedidos.ObservEstado, 'P' Estado, venPedidos.ImporteTotal,
venNivelesAuto.NivelAuto_Id, venNivelesAuto.Descripcion DescripcionNivel, venNPAutorizando.Secuencia, venNPAutorizando.ResultadoFormula,
venPediValiComer.MVendedor, venPediValiComer.MListaP, venPediValiComer.MFormaE, venPediValiComer.MBonifDato, venPediValiComer.MPrecioReng,
venPediValiComer.MBonifReng
FROM venPedidos
Inner Join venClieHabitual On venPedidos.Cliente_Id = venClieHabitual.genEntidades And venPedidos.Sucursal = venClieHabitual.Sucursal
Inner Join venPediSegmentos On venPediSegmentos.venPedidos = venPedidos.venPedidos
Inner Join venClientes On venClientes.genEntidades = venPedidos.Cliente_Id
Inner Join venNPAutorizando On venNPAutorizando.venPedidos = venPedidos.venPedidos
Inner Join venNivelesAuto On venNPAutorizando.NivelAuto_Id = venNivelesAuto.venNivelesAuto
Inner Join venNivelesAutoUsu ON venNivelesAutoUsu.NivelAuto_Id = venNivelesAuto.venNivelesAuto
Left Join venPediValiComer On venPediValiComer.venPedidos = venPedidos.venPedidos
WHERE
venPedidos.Estado = 'C'
And venNPAutorizando.Usuario_Id Is Null
And venNivelesAutoUsu.Usuario_Id = @pUsuario_Id
Order By venClientes.Cliente_Id, venPediSegmentos.Segmento_Id, 3


Go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venPedidosPendClie.sql*/
drop procedure venPedidosPendClie
go
create procedure venPedidosPendClie
(
    @pCliente_Id varchar(15)
)
as
select Segmento, Cliente_Id, RazonSocial, Fecha, Moneda_Id, Estado, ImporteTotal, Anticipo, AnticipoPendiente, Cambio from vvenPedidos
where 
Cliente_Id=@pCliente_Id AND Estado in ('A' ,'P')
go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venPedidosPorCliente.sql*/
DROP PROCEDURE venPedidosPorCliente
GO
CREATE PROCEDURE venPedidosPorCliente
(
	@Cliente_Id VarChar(15),
	@Empresa_Id Int, 
	@Historico bit,
	@FechaDesde DateTime, 
	@FechaHasta DateTime,
	@Vendedor_Id VarChar(5) = NULL
)
as

SELECT venClientes.Cliente_Id, venClientes.RazonSocial , @Historico as Historico,
@FechaDesde FechaDesde, @FechaHasta FechaHasta
FROM venClientes
Where
	venClientes.Cliente_Id = @Cliente_Id

SELECT dbo.Segmento( venPediSegmentos.Segmento_Id, venPediSegmentos.Segmento1C, venPediSegmentos.Segmento2C, 
	venPediSegmentos.Segmento3C,venPediSegmentos.Segmento4C,venPediSegmentos.Segmento1N, 
	venPediSegmentos.Segmento2N, venPediSegmentos.Segmento3N, venPediSegmentos.Segmento4N
	) AS Segmento, venPedidos.Fecha, venPedidos.Estado, venPedidos.ImporteTotal,
		genMonedas.Moneda_Id,
	venPedidos.Observaciones, genUsuarios.Apellido_y_Nombres Usuario, venPedidos.CliOrdenCompra
	FROM venPedidos INNER JOIN venClientes ON 
		venPedidos.Cliente_Id = venClientes.genEntidades
		INNER JOIN venPediSegmentos ON venPediSegmentos.venPedidos = venPedidos.venPedidos
		INNER JOIN genUsuarios ON genUsuarios.genUsuarios = venPedidos.Usuario_Id
		INNER JOIN genMonedas ON genMonedas.genMonedas = venPedidos.Moneda_Id
		INNER JOIN venVendedores ON venVendedores.venVendedores = venPedidos.Vendedor_Id
WHERE
	venClientes.Cliente_Id = @Cliente_Id AND 
	venPedidos.Empresa_Id = @Empresa_Id and 
	venPedidos.Estado NOT IN ('N','R') and 
	((@Historico = 0 and venPedidos.Estado!= 'T') OR
	(@Historico = 1 and venPedidos.Fecha Between @FechaDesde and @FechaHasta)) and
	venVendedores.Vendedor_Id = ISNULL(@Vendedor_Id, venVendedores.Vendedor_Id)
ORDER BY 2,1

SELECT stkProductos.Producto_Id, stkProductos.Descripcion, genMonedas.Moneda_Id,
		SUM(VenPediCuerpo.CantidadPedida) as Pedidos, 
		SUM(VenPediCuerpo.CantidadRemitida) as Remitidos,
		SUM(VenPediCuerpo.CantidadPedida*VenPediCuerpo.PrecioVenta) /SUM(VenPediCuerpo.CantidadPedida) Precio
FROM venPedidos INNER JOIN venClientes ON 
		venPedidos.Cliente_Id = venClientes.genEntidades
		INNER JOIN venPediCuerpo ON 
		venPediCuerpo.venPedidos = venPedidos.venPedidos
		INNER JOIN stkProductos ON 
		stkProductos.stkProductos = venPediCuerpo.Producto_Id
		INNER JOIN genMonedas ON genMonedas.genMonedas = venPedidos.Moneda_Id
		INNER JOIN venVendedores ON venVendedores.venVendedores = venPedidos.Vendedor_Id
WHERE
	venClientes.Cliente_Id = @Cliente_Id AND 
	venPedidos.Empresa_Id = @Empresa_Id and 
	venPedidos.Estado NOT IN ('N','R') and 
	((@Historico = 0 and venPedidos.Estado!= 'T' AND venPediCuerpo.Pendiente=1 and 
		venPediCuerpo.CantidadRemitida < venPediCuerpo.CantidadPedida ) OR
	(@Historico = 1 and venPedidos.Fecha Between @FechaDesde and @FechaHasta)) AND
	venVendedores.Vendedor_Id = ISNULL(@Vendedor_Id, venVendedores.Vendedor_Id) 
GROUP BY stkProductos.Producto_Id, stkProductos.Descripcion, genMonedas.Moneda_Id
ORDER BY 1
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venPediFacturados.sql*/
DROP PROCEDURE venPediFacturadosGuardar
GO
CREATE PROCEDURE venPediFacturadosGuardar
(
@pvenMovimientos bigint,
@pvenPedidos int ,
@pImporte qMonedaD2,
@pReparto_Id Int = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venPediFacturados WHERE (venMovimientos = @pvenMovimientos)))
BEGIN 
	UPDATE venPediFacturados
	SET		venPedidos = @pvenPedidos,
		Importe = @pImporte,
		Reparto_Id= @pReparto_Id
	WHERE (venMovimientos = @pvenMovimientos)
END 
ELSE 
BEGIN 
	INSERT INTO venPediFacturados
	(
		venMovimientos,
		venPedidos,
		Importe,
		Reparto_Id
	)
	VALUES 
	(
		@pvenMovimientos,
		@pvenPedidos,
		@pImporte,
		@pReparto_Id
	)
END 

GO

DROP PROCEDURE venPediFacturadosDatos
GO
CREATE PROCEDURE venPediFacturadosDatos
(
@pvenMovimientos bigint
)
AS
SET NOCOUNT ON 

SELECT venPediFacturados.venMovimientos, venPediFacturados.venPedidos, venPediFacturados.Importe, 
	dbo.Segmento(venPediSegmentos.Segmento_Id,venPediSegmentos.Segmento1C, venPediSegmentos.Segmento2C,
	venPediSegmentos.Segmento3C, venPediSegmentos.Segmento4C,venPediSegmentos.Segmento1N, venPediSegmentos.Segmento2N,
	venPediSegmentos.Segmento3N, venPediSegmentos.Segmento4N) AS PedidoStr, 
	venPediFacturados.Reparto_Id
FROM venPediFacturados 
INNER JOIN venMovimientos  ON (venMovimientos.venMovimientos = venPediFacturados.venMovimientos)
INNER JOIN venPedidos  ON (venPedidos.venPedidos = venPediFacturados.venPedidos)
INNER JOIN venPediSegmentos ON  venPediSegmentos.venPedidos = venPedidos.venPedidos
WHERE (venPediFacturados.venMovimientos = @pvenMovimientos)
 
 RETURN @@Error 

GO


DROP PROCEDURE venPediFacturadosPediDatos
GO
CREATE PROCEDURE venPediFacturadosPediDatos
(
@pvenPedidos bigint
)
AS
SET NOCOUNT ON 

SELECT venPediFacturados.venMovimientos, venPedidos.venPedidos, venPediFacturados.Importe,
dbo.Segmento(genAsiSegmentos.Segmento_Id,genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
	genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) AS venSegmento
FROM venPediFacturados 
INNER JOIN venMovimientos  ON (venMovimientos.venMovimientos = venPediFacturados.venMovimientos)
INNER JOIN venPedidos  ON (venPedidos.venPedidos = venPediFacturados.venPedidos)
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = venMovimientos.venMovimientos
WHERE (venPediFacturados.venPedidos = @pvenPedidos)
 
 RETURN @@Error 

GO

DROP PROCEDURE venPediFacturadosEliminar
GO
CREATE PROCEDURE venPediFacturadosEliminar
(
@pvenMovimientos bigint
)
AS
SET NOCOUNT ON 

DELETE FROM venPediFacturados 
WHERE (venMovimientos = @pvenMovimientos)
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venPediRemiFactu.sql*/
Drop procedure venPediRemiFactuDatos
Go
Create procedure venPediRemiFactuDatos
(
@pvenPedidos Int
)
As

Select @pvenPedidos venPedidos


Select Distinct dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Remitos, venPediRemitidos.stkMoviCabe, conAsientos.Fecha, 
conAsientos.Anulado
From venPediRemitidos
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = venPediRemitidos.stkMoviCabe
INNER JOIN conAsientos ON venPediRemitidos.stkMoviCabe = conAsientos.conAsientos
Where venPediRemitidos.venPedidos = @pvenPedidos
-- FM Traigo los remitos que se hicieron desde la factura --
Union
Select Distinct dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Facturas, venMovConStockCrPed.venMovimientos, conAsientos.Fecha,
conAsientos.Anulado
From venMovConStockCrPed
Inner Join venMovStkHist On venMovStkHist.venMovimientos = venMovConStockCrPed.venMovimientos
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = venMovStkHist.stkMoviCabe
INNER JOIN conAsientos ON venMovConStockCrPed.venMovimientos = conAsientos.conAsientos
Where venMovConStockCrPed.venPedidos = @pvenPedidos


Select Distinct dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Facturas, venMovConStockCrPed.venMovimientos, conAsientos.Fecha, 
conAsientos.Anulado
From venMovConStockCrPed
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = venMovConStockCrPed.venMovimientos
INNER JOIN conAsientos ON venMovConStockCrPed.venMovimientos = conAsientos.conAsientos
Where venMovConStockCrPed.venPedidos = @pvenPedidos
UNION 
Select Distinct dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C,
genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N,
genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) Facturas, venPediFacturados.venMovimientos, conAsientos.Fecha,
conAsientos.Anulado
From venPediFacturados
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = venPediFacturados.venMovimientos
INNER JOIN conAsientos ON venPediFacturados.venMovimientos = conAsientos.conAsientos
Where venPediFacturados.venPedidos = @pvenPedidos


Select Distinct dbo.Segmento(venRepaSegmentos.Segmento_Id, venRepaSegmentos.Segmento1C, venRepaSegmentos.Segmento2C,
venRepaSegmentos.Segmento3C, venRepaSegmentos.Segmento4C, venRepaSegmentos.Segmento1N, venRepaSegmentos.Segmento2N,
venRepaSegmentos.Segmento3N, venRepaSegmentos.Segmento4N) Repartos, venRepaPedi.venReparto, venReparto.FechaReparto Fecha,
venReparto.Cerrado
From venRepaPedi
Inner Join venRepaSegmentos On venRepaSegmentos.venReparto = venRepaPedi.venReparto
Inner Join venReparto On venRepaSegmentos.venReparto = venReparto.venReparto
Where venRepaPedi.venPedidos = @pvenPedidos
Go




Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venPediRemitidos.sql*/
DROP PROCEDURE venPediRemitidosGuardar
GO
CREATE PROCEDURE venPediRemitidosGuardar
(
@pvenPedidos int,
@pRenglon_Pe int,
@pRenglon int,
@pstkMoviCabe bigint,
@pvenReparto int = NULL
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venPediRemitidos WHERE (venPedidos = @pvenPedidos) AND (Renglon_Pe = @pRenglon_Pe) AND 
(Renglon = @pRenglon) AND (stkMoviCabe = @pstkMoviCabe)))
BEGIN 
	UPDATE venPediRemitidos
	SET		venReparto = @pvenReparto
	WHERE (venPedidos = @pvenPedidos) AND (Renglon_Pe = @pRenglon_Pe) AND (Renglon = @pRenglon) AND (stkMoviCabe = @pstkMoviCabe)
END 
ELSE 
BEGIN 
	INSERT INTO venPediRemitidos
	(
		venPedidos,
		Renglon_Pe,
		Renglon,
		stkMoviCabe,
		venReparto
	)
	VALUES 
	(
		@pvenPedidos,
		@pRenglon_Pe,
		@pRenglon,
		@pstkMoviCabe,
		@pvenReparto
	)
END 

GO

DROP PROCEDURE venPediRemitidosDatos
GO
CREATE PROCEDURE venPediRemitidosDatos
(
@pvenPedidos int,
@pRenglon_Pe int,
@pRenglon int,
@pstkMoviCabe bigint
)
AS
SET NOCOUNT ON 

SELECT venPediRemitidos.venPedidos, venPediRemitidos.Renglon_Pe, venPediRemitidos.stkMoviCabe,
	venPediRemitidos.Renglon, venPediRemitidos.venReparto
FROM venPediRemitidos 
INNER JOIN venPediCuerpo  ON (venPediCuerpo.venPedidos = venPediRemitidos.venPedidos) AND (venPediCuerpo.Renglon_Pe = venPediRemitidos.Renglon_Pe)
INNER JOIN stkMoviCuerpo  ON (stkMoviCuerpo.stkMoviCabe = venPediRemitidos.stkMoviCabe) AND (stkMoviCuerpo.Renglon = venPediRemitidos.Renglon)
LEFT JOIN venReparto  ON (venReparto.venReparto = venPediRemitidos.venReparto)
WHERE venPediRemitidos.venPedidos = @pvenPedidos
AND venPediRemitidos.Renglon_Pe = @pRenglon_Pe
AND venPediRemitidos.Renglon = @pRenglon
AND venPediRemitidos.stkMoviCabe = @pstkMoviCabe
 
 RETURN @@Error 

GO

DROP PROCEDURE venPediRemitidosEliminar
GO
CREATE PROCEDURE venPediRemitidosEliminar
(
@pvenPedidos int,
@pRenglon_Pe int,
@pRenglon int,
@pstkMoviCabe bigint
)
AS
SET NOCOUNT ON 

DELETE FROM venPediRemitidos 
WHERE (venPedidos = @pvenPedidos)
AND (Renglon_Pe = @pRenglon_Pe)
AND (Renglon = @pRenglon)
AND (stkMoviCabe = @pstkMoviCabe)
 
 RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venPediRemitidosDatosCanc.sql*/
--exec venPediRemitidosEliminar null,null,null,null
drop procedure venPediRemitidosDatosCanc
go
create procedure venPediRemitidosDatosCanc
(
    @pvenPedidos bigint=null,
    @pRenglon_Pedido int=null,
    @pstkMoviCabe bigint=null,
    @pRenglon_Stock int=null
)
as
select venPediRemitidos.venPedidos, venPediRemitidos.Renglon_Pe, venPediRemitidos.stkMoviCabe, venPediRemitidos.Renglon, 
	stkMoviCuerpo.Cantidad , venPediCuerpo.ReservaMercaderia, stkDepositos.Deposito_Id, stkProductos.Producto_Id
From venPediRemitidos 
inner join stkMoviCuerpo on stkMoviCuerpo.stkMoviCabe=venPediRemitidos.stkMoviCabe and stkMoviCuerpo.Renglon=venPediRemitidos.Renglon
inner join venPediCuerpo ON  venPediCuerpo.venPedidos = venPediRemitidos.venPedidos AND 
							 venPediCuerpo.Renglon_Pe = venPediRemitidos.Renglon_Pe
INNER JOIN stkProductos ON stkProductos.stkProductos = venPediCuerpo.Producto_Id 
INNER JOIN stkDepositos ON stkDepositos.stkDepositos= venPediCuerpo.Deposito_Id
where 
venPediRemitidos.venPedidos=isnull(@pvenPedidos, venPediRemitidos.venPedidos) and
venPediRemitidos.Renglon_Pe=isnull(@pRenglon_Pedido, venPediRemitidos.Renglon_Pe) and
venPediRemitidos.stkMoviCabe=isnull(@pstkMoviCabe, venPediRemitidos.stkMoviCabe) and
venPediRemitidos.Renglon=isnull(@pRenglon_Stock, venPediRemitidos.Renglon)
-- para el caso de factrua y remito en un solo paso
union all
select venMovConStockCrPed.venPedidos, venMovConStockCrPed.Renglon_Pe, 
	venMovStkHist.stkMoviCabe, venMovStkHist.Renglon, 
	stkMoviCuerpo.Cantidad , venPediCuerpo.ReservaMercaderia, stkDepositos.Deposito_Id, stkProductos.Producto_Id
From venMovStkHist 
INNER JOIN  venMovConStockCrPed ON
	venMovStkHist.venMovimientos = venMovConStockCrPed.venMovimientos AND
	venMovStkHist.RenglonCuerpo =venMovConStockCrPed.RenglonCuerpo
inner join stkMoviCuerpo on stkMoviCuerpo.stkMoviCabe=venMovStkHist.stkMoviCabe and stkMoviCuerpo.Renglon=venMovStkHist.Renglon
inner join venPediCuerpo ON  venPediCuerpo.venPedidos = venMovConStockCrPed.venPedidos AND 
							 venPediCuerpo.Renglon_Pe = venMovConStockCrPed.Renglon_Pe
INNER JOIN stkProductos ON stkProductos.stkProductos = venPediCuerpo.Producto_Id 
INNER JOIN stkDepositos ON stkDepositos.stkDepositos= venPediCuerpo.Deposito_Id
where 
venMovStkHist.FacturaRemito = '2' AND
venMovConStockCrPed.venPedidos=isnull(@pvenPedidos, venMovConStockCrPed.venPedidos) and
venMovConStockCrPed.Renglon_Pe=isnull(@pRenglon_Pedido, venMovConStockCrPed.Renglon_Pe) and
venMovStkHist.stkMoviCabe=isnull(@pstkMoviCabe, venMovStkHist.stkMoviCabe) and
venMovStkHist.Renglon=isnull(@pRenglon_Stock, venMovStkHist.Renglon)

go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venPediSegmentos.sql*/

-- venPediSegmentosGuardar  1,'FPRO',1003,0,0,0,'E','F',' ',' ',1,1
DROP PROCEDURE venPediSegmentosGuardar
GO
CREATE PROCEDURE venPediSegmentosGuardar
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pvenPedidos int, 
@pTieneAutomatico bit
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venPediSegmentos WHERE 
	(Empresa_Id = @pEmpresa_Id) AND 
	(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
	(Segmento1N = @pSegmento1N) AND 
	(Segmento2N = @pSegmento2N) AND 
	(Segmento3N = @pSegmento3N) AND 
	(Segmento4N = @pSegmento4N) AND 
	(Segmento1C = @pSegmento1C) AND 
	(Segmento2C = @pSegmento2C) AND 
	(Segmento3C = @pSegmento3C) AND 
	(Segmento4C = @pSegmento4C)))

BEGIN 
	UPDATE venPediSegmentos
	SET	Empresa_Id = @pEmpresa_Id,
		venPedidos = @pvenPedidos
	WHERE (Empresa_Id = @pEmpresa_Id) AND 
		(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
		(Segmento1N = @pSegmento1N) AND 
		(Segmento2N = @pSegmento2N) AND 
		(Segmento3N = @pSegmento3N) AND 
		(Segmento4N = @pSegmento4N) AND 
		(Segmento1C = @pSegmento1C) AND 
		(Segmento2C = @pSegmento2C) AND 
		(Segmento3C = @pSegmento3C) AND 
		(Segmento4C = @pSegmento4C)
END 
ELSE 
BEGIN 
	
	-- Averiguo el que sigue
	
	If (@pTieneAutomatico=1)
	BEGIN
		SET @pSegmento1N = (SELECT MAX(venPediSegmentos.Segmento1N)+1 AS Segmento1N 
				FROM venPediSegmentos 
					Where				
					venPediSegmentos.Segmento1N > 0 and 
					venPediSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) AND 
					venPediSegmentos.Segmento2N = @pSegmento2N AND 
					venPediSegmentos.Segmento3N = @pSegmento3N AND 
					venPediSegmentos.Segmento4N = @pSegmento4N AND 
					venPediSegmentos.Segmento1C = @pSegmento1C AND 
					venPediSegmentos.Segmento2C = @pSegmento2C AND 
					venPediSegmentos.Segmento3C = @pSegmento3C AND 
					venPediSegmentos.Segmento4C = @pSegmento4C And
					venPediSegmentos.Empresa_Id = @pEmpresa_Id)
		
		If @pSegmento1N Is Null
			SET @pSegmento1N = (SELECT genContadorSegmento.PrimerNumero AS Segmento1N 
				From genContadorSegmento Where
					genContadorSegmento.Empresa_Id = @pEmpresa_Id And
							(genContadorSegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
							genContadorSegmento.Segmento2N = @pSegmento2N AND 
							genContadorSegmento.Segmento3N = @pSegmento3N AND 
							genContadorSegmento.Segmento4N = @pSegmento4N AND 
							genContadorSegmento.Segmento1C = @pSegmento1C AND 
							genContadorSegmento.Segmento2C = @pSegmento2C AND 
							genContadorSegmento.Segmento3C = @pSegmento3C AND 
							genContadorSegmento.Segmento4C = @pSegmento4C
					)

		-- esto solo pasa si empieza en 1 esta prendido
			if @pSegmento1N is null or @pSegmento1N < 0
			begin
				set @pSegmento1N = 1
			end	
	END

	/* FM 08/06/2020 Corregir el BE para que no pase esto
	if (@pSegmento1N = 0)
		SET @pSegmento1N = 1
	*/
	
	INSERT INTO venPediSegmentos
	(
		Empresa_Id,
		Segmento_Id,
		Segmento1N,
		Segmento2N,
		Segmento3N,
		Segmento4N,
		Segmento1C,
		Segmento2C,
		Segmento3C,
		Segmento4C,
		venPedidos
	)
	VALUES 
	(
		@pEmpresa_Id,
		dbo.FuncFKgenSegmentos(@pSegmento_Id),
		@pSegmento1N,
		@pSegmento2N,
		@pSegmento3N,
		@pSegmento4N,
		@pSegmento1C,
		@pSegmento2C,
		@pSegmento3C,
		@pSegmento4C,
		@pvenPedidos
	)
	
END 
SELECT @pSegmento1N as RetVal

GO

DROP PROCEDURE venPediSegmentosDatos
GO
CREATE PROCEDURE venPediSegmentosDatos
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20)
)
AS
SET NOCOUNT ON 

SELECT venPediSegmentos.Empresa_Id, genSegmentos.Segmento_Id, 
	genSegmentos.Descripcion as DescripcionSegmentos, venPediSegmentos.Segmento1N,
	venPediSegmentos.Segmento2N, venPediSegmentos.Segmento3N, venPediSegmentos.Segmento4N, venPediSegmentos.Segmento1C,
	venPediSegmentos.Segmento2C, venPediSegmentos.Segmento3C, venPediSegmentos.Segmento4C, 
	venPediSegmentos.venPedidos, genSegmentos.TieneColumnaAutomatica
FROM venPediSegmentos 
INNER JOIN genSegmentos  ON (genSegmentos.genSegmentos = venPediSegmentos.Segmento_Id)
WHERE (venPediSegmentos.Empresa_Id = @pEmpresa_Id)
AND (venPediSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id))
AND (Segmento1N = @pSegmento1N)
AND (Segmento2N = @pSegmento2N)
AND (Segmento3N = @pSegmento3N)
AND (Segmento4N = @pSegmento4N)
AND (Segmento1C = @pSegmento1C)
AND (Segmento2C = @pSegmento2C)
AND (Segmento3C = @pSegmento3C)
AND (Segmento4C = @pSegmento4C)
 
 RETURN @@Error 

GO

DROP PROCEDURE venPediSegmentosEliminar
GO
CREATE PROCEDURE venPediSegmentosEliminar
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int ,
@pSegmento2N int ,
@pSegmento3N int ,
@pSegmento4N int ,
@pSegmento1C varchar(20) ,
@pSegmento2C varchar(20) ,
@pSegmento3C varchar(20) ,
@pSegmento4C varchar(20) 
)
AS
SET NOCOUNT ON 

DELETE FROM venPediSegmentos 
WHERE Empresa_Id = @pEmpresa_Id
AND  Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)
AND  Segmento1N = IsNull(@pSegmento1N, Segmento1N)
AND  Segmento2N = IsNull(@pSegmento2N, Segmento2N)
AND  Segmento3N = IsNull(@pSegmento3N, Segmento3N)
AND  Segmento4N = IsNull(@pSegmento4N, Segmento4N)
AND  Segmento1C = IsNull(@pSegmento1C, Segmento1C)
AND  Segmento2C = IsNull(@pSegmento2C, Segmento2C)
AND  Segmento3C = IsNull(@pSegmento3C, Segmento3C)
AND  Segmento4C = IsNull(@pSegmento4C, Segmento4C)
 
 RETURN @@Error 

GO



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venPediValiComer.sql*/
DROP PROCEDURE venPediValiComerGuardar
GO
CREATE PROCEDURE venPediValiComerGuardar
(
@pvenPedidos int,
@pMVendedor Sino,
@pMFormaE Sino,
@pMListaP Sino,
@pMBonifDato Sino,
@pMBonifReng Sino,
@pMPrecioReng Sino
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venPediValiComer WHERE (venPedidos = @pvenPedidos)))
BEGIN 
	UPDATE venPediValiComer
	SET MVendedor = @pMVendedor,
		MFormaE = @pMFormaE,
		MListaP = @pMListaP,
		MBonifDato = @pMBonifDato,
		MBonifReng = @pMBonifReng,
		MPrecioReng = @pMPrecioReng
	WHERE (venPedidos = @pvenPedidos)
END 
ELSE 
BEGIN 
	INSERT INTO venPediValiComer
	(
		venPedidos,
		MVendedor,
		MFormaE,
		MListaP,
		MBonifDato,
		MBonifReng,
		MPrecioReng
	)
	VALUES 
	(
		@pvenPedidos,
		@pMVendedor,
		@pMFormaE,
		@pMListaP,
		@pMBonifDato,
		@pMBonifReng,
		@pMPrecioReng
	)
END 

GO

DROP PROCEDURE venPediValiComerDatos
GO
CREATE PROCEDURE venPediValiComerDatos
(
@pvenPedidos int
)
AS
SET NOCOUNT ON 

SELECT venPediValiComer.venPedidos, venPediValiComer.MVendedor, venPediValiComer.MFormaE, venPediValiComer.MListaP,
	venPediValiComer.MBonifDato, venPediValiComer.MBonifReng, venPediValiComer.MPrecioReng
FROM venPediValiComer 
WHERE (venPedidos = @pvenPedidos)
 
 RETURN @@Error 

GO

DROP PROCEDURE venPediValiComerEliminar
GO
CREATE PROCEDURE venPediValiComerEliminar
(
@pvenPedidos int
)
AS
SET NOCOUNT ON 

DELETE FROM venPediValiComer 
WHERE venPedidos = @pvenPedidos
 
RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venPropietarioArrenda.sql*/
DROP PROCEDURE venPropietarioArrendaGuardar
GO
CREATE PROCEDURE venPropietarioArrendaGuardar
(
@pPropArre_Id varchar(15),
@pPropArre_Id_Nueva varchar(15),
@pEmpresa_Id int = NULL,
@pPropArre int,
@pRfc varchar(14),
@pNombre varchar(254),
@pNumRegIdTrib varchar(40),
@pResidenciaFiscal smallint,
@pCalle varchar(100),
@pNumeroExterior varchar(30) = NULL,
@pNumerointerior varchar(30) = NULL,
@pColonia varchar(120) = NULL,
@pLocalidad varchar(120) = NULL,
@pReferencia varchar(100) = NULL,
@pMunicipio varchar(120) = NULL,
@pEstado varchar(30) = NULL,
@pPais smallint = NULL,
@pCodigoPostal varchar(20) = NULL,
@pUsuario_Id int
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM venPropietarioArrenda WHERE  PropArre_Id = @pPropArre_Id))
BEGIN 
	UPDATE venPropietarioArrenda
	SET		@lIdentidad = venPropietarioArrenda,
		PropArre_Id = @pPropArre_Id_Nueva,
		Empresa_Id = @pEmpresa_Id,
		PropArre = @pPropArre,
		Rfc = @pRfc,
		Nombre = @pNombre,
		NumRegIdTrib = @pNumRegIdTrib,
		ResidenciaFiscal = dbo.FuncFKgenPaises(@pResidenciaFiscal),
		Calle = @pCalle,
		NumeroExterior = @pNumeroExterior,
		Numerointerior = @pNumerointerior,
		Colonia = @pColonia,
		Localidad = @pLocalidad,
		Referencia = @pReferencia,
		Municipio = @pMunicipio,
		Estado = @pEstado,
		Pais = dbo.FuncFKgenPaises(@pPais),
		CodigoPostal = @pCodigoPostal,
		Usuario_Id = @pUsuario_Id
	WHERE 
		PropArre_Id = @pPropArre_Id
END 
ELSE 
BEGIN 
	INSERT INTO venPropietarioArrenda
	(
		PropArre_Id,
		Empresa_Id,
		PropArre,
		Rfc,
		Nombre,
		NumRegIdTrib,
		ResidenciaFiscal,
		Calle,
		NumeroExterior,
		Numerointerior,
		Colonia,
		Localidad,
		Referencia,
		Municipio,
		Estado,
		Pais,
		CodigoPostal,
		Usuario_Id
	)
	VALUES 
	(
		@pPropArre_Id,
		@pEmpresa_Id,
		@pPropArre,
		@pRfc,
		@pNombre,
		@pNumRegIdTrib,
		dbo.FuncFKgenPaises(@pResidenciaFiscal),
		@pCalle,
		@pNumeroExterior,
		@pNumerointerior,
		@pColonia,
		@pLocalidad,
		@pReferencia,
		@pMunicipio,
		@pEstado,
		dbo.FuncFKgenPaises(@pPais),
		@pCodigoPostal,
		@pUsuario_Id
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE venPropietarioArrendaDatos
GO
CREATE PROCEDURE venPropietarioArrendaDatos
(
	@pPropArre_Id VarChar(15)
)
AS
SET NOCOUNT ON 

SELECT venPropietarioArrenda.venPropietarioArrenda, venPropietarioArrenda.PropArre_Id,  venPropietarioArrenda.Empresa_Id,
	Cast( Case When venPropietarioArrenda.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, venPropietarioArrenda.PropArre, 
	venPropietarioArrenda.Rfc, venPropietarioArrenda.Nombre,
	venPropietarioArrenda.NumRegIdTrib, genPaises.Pais_Id ResidenciaFiscal, genPaises.Descripcion as DescripcionRecidenciaFiscal, venPropietarioArrenda.Calle,
	venPropietarioArrenda.NumeroExterior, venPropietarioArrenda.Numerointerior, venPropietarioArrenda.Colonia, venPropietarioArrenda.Localidad,
	venPropietarioArrenda.Referencia, venPropietarioArrenda.Municipio, venPropietarioArrenda.Estado, genPaises2.Pais_Id,
	genPaises2.Descripcion as DescripcionPaises, venPropietarioArrenda.CodigoPostal, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario
FROM venPropietarioArrenda 
INNER JOIN genPaises  ON (genPaises.genPaises = venPropietarioArrenda.ResidenciaFiscal)
INNER JOIN genPaises genPaises2 ON (genPaises2.genPaises = venPropietarioArrenda.Pais)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = venPropietarioArrenda.Usuario_Id)
WHERE  
PropArre_Id = @pPropArre_Id

 Declare @pidentity bigint= dbo.FuncFKvenPropietarioArrenda(@pPropArre_Id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'venPropietarioArrenda'
RETURN @@Error 

GO

DROP PROCEDURE venPropietarioArrendaEliminar
GO
CREATE PROCEDURE venPropietarioArrendaEliminar
(
	@pPropArre_Id VarChar(15)
)
AS
SET NOCOUNT ON 

DELETE FROM venPropietarioArrenda 
WHERE  
PropArre_Id = @pPropArre_Id

RETURN @@Error 

GO

DROP FUNCTION FuncFKvenPropietarioArrenda
GO

CREATE FUNCTION FuncFKvenPropietarioArrenda
(
	@pPropArre_Id varchar (15)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = venPropietarioArrenda FROM venPropietarioArrenda WHERE 
	PropArre_Id = @pPropArre_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venRegion.sql*/
DROP PROCEDURE venRegionGuardar
GO
CREATE PROCEDURE venRegionGuardar
(
@pRegion_Id varchar(5),
@pRegion_Id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(50),
@pInactivo Sino,
@pUsuario_Id int,
@pPosteado Sino
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM venRegion WHERE (Region_Id = @pRegion_Id)))
BEGIN 
	UPDATE venRegion
	SET		@lIdentidad = venRegion,
		Region_Id = @pRegion_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (Region_Id = @pRegion_Id)
END 
ELSE 
BEGIN 
	INSERT INTO venRegion
	(
		Region_Id,
		Empresa_Id,
		Descripcion,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pRegion_Id,
		@pEmpresa_Id,
		@pDescripcion,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE venRegionDatos
GO
CREATE PROCEDURE venRegionDatos
(
@pRegion_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT venRegion.venRegion, venRegion.Region_Id, venRegion.Empresa_Id, Cast( Case When venRegion.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	venRegion.Descripcion, venRegion.Inactivo, venRegion.Usuario_Id, venRegion.Posteado
FROM venRegion 
WHERE (Region_Id = @pRegion_Id)
 


  Declare @pidentity bigint= dbo.FuncFKvenRegion(@pRegion_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'venRegion'
 RETURN @@Error 

GO

DROP PROCEDURE venRegionEliminar
GO
CREATE PROCEDURE venRegionEliminar
(
@pRegion_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venRegion 
WHERE (Region_Id = @pRegion_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKvenRegion
GO

CREATE FUNCTION FuncFKvenRegion
(
@pRegion_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = venRegion FROM venRegion WHERE 
	Region_Id = @pRegion_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venRepaPedi.sql*/
DROP PROCEDURE venRepaPediGuardar
GO
CREATE PROCEDURE venRepaPediGuardar
(
@pvenReparto int,
@pRenglon_Rep int,
@pvenPedidos int,
@pRenglon_Pe int,
@pCantidadForm qCantidadD8,
@pCantidadAlternaForm qCantidadD8,
@pRemitido Sino,
@pFacturado Sino
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venRepaPedi 
	WHERE (venReparto = @pvenReparto) AND (Renglon_Rep = @pRenglon_Rep) AND (venPedidos = @pvenPedidos) AND (Renglon_Pe = @pRenglon_Pe)))
BEGIN 
	UPDATE venRepaPedi
	SET CantidadForm = @pCantidadForm,
		CantidadAlternaForm = @pCantidadAlternaForm,
		Remitido = @pRemitido,
		Facturado = @pFacturado
	WHERE (venReparto = @pvenReparto) AND (Renglon_Rep = @pRenglon_Rep) AND (venPedidos = @pvenPedidos) AND (Renglon_Pe = @pRenglon_Pe)
END 
ELSE 
BEGIN 
	INSERT INTO venRepaPedi
	(
		venReparto,
		Renglon_Rep,
		venPedidos,
		Renglon_Pe,
		CantidadForm,

		CantidadAlternaForm,

		Remitido,
		Facturado
	)
	VALUES 
	(
		@pvenReparto,
		@pRenglon_Rep,
		@pvenPedidos,
		@pRenglon_Pe,
		@pCantidadForm,
		
		@pCantidadAlternaForm,

		@pRemitido,
		@pFacturado
	)
END 

GO


DROP PROCEDURE venRepaPediDatos
GO
CREATE PROCEDURE venRepaPediDatos
(
@pvenReparto int,
@pRenglon_Rep int
)
AS
SET NOCOUNT ON 

SELECT venRepaPedi.venReparto, venRepaPedi.Renglon_Rep, venRepaPedi.venPedidos, venRepaPedi.Renglon_Pe, 
venRepaPedi.CantidadForm, venRepaPedi.CantidadAlternaForm, venRepaPedi.Remitido, venRepaPedi.Facturado
FROM venRepaPedi 
INNER JOIN venReparto  ON (venReparto.venReparto = venRepaPedi.venReparto)
INNER JOIN venPediCuerpo  ON (venPediCuerpo.venPedidos = venRepaPedi.venPedidos) AND (venPediCuerpo.Renglon_Pe = venRepaPedi.Renglon_Pe)
WHERE (venReparto.venReparto = @pvenReparto)
AND (Renglon_Rep = @pRenglon_Rep)

 
 RETURN @@Error 

GO

DROP PROCEDURE venRepaPediEliminar
GO
CREATE PROCEDURE venRepaPediEliminar
(
@pvenReparto int,
@pRenglon_Rep int = NULL,
@pvenPedidos int = Null,
@pRenglon_Pe int = Null
)
AS
SET NOCOUNT ON 

DELETE FROM venRepaPedi 
WHERE (venReparto = @pvenReparto)
AND (Renglon_Rep = ISNULL(@pRenglon_Rep, Renglon_Rep))
AND (venPedidos = IsNull(@pvenPedidos, venPedidos))
AND (Renglon_Pe = IsNull(@pRenglon_Pe, Renglon_Pe))
 
 RETURN @@Error 

GO

Drop procedure venRepaPediMarcarRemitido
Go
Create procedure venRepaPediMarcarRemitido
(
@pvenReparto int,
@pRenglon_Rep int,
@pvenPedidos int,
@pRenglon_Pe int
)
As
Update venRepaPedi Set Remitido = 1 Where venReparto = @pvenReparto AND Renglon_Rep = @pRenglon_Rep AND 
venPedidos = @pvenPedidos AND Renglon_Pe = @pRenglon_Pe
Go


Drop procedure venRepaPediMarcarFacturado
Go
Create procedure venRepaPediMarcarFacturado
(
@pvenReparto int,
@pRenglon_Rep int,
@pvenPedidos int,
@pRenglon_Pe int
)
As
Update venRepaPedi Set Facturado = 1 Where venReparto = @pvenReparto AND Renglon_Rep = @pRenglon_Rep AND 
venPedidos = @pvenPedidos AND Renglon_Pe = @pRenglon_Pe
Go

DROP PROCEDURE venRepaPediRepXPed
GO
CREATE PROCEDURE venRepaPediRepXPed
(
@pvenPedidos int,
@pRenglon_Pe int
)
AS
SET NOCOUNT ON 

SELECT venRepaPedi.venReparto, venRepaPedi.Renglon_Rep, venRepaPedi.venPedidos, venRepaPedi.Renglon_Pe, 
venRepaPedi.CantidadForm, venRepaPedi.CantidadAlternaForm, venRepaPedi.Remitido, venRepaPedi.Facturado
FROM venRepaPedi 
INNER JOIN venReparto  ON (venReparto.venReparto = venRepaPedi.venReparto)
INNER JOIN venPediCuerpo  ON (venPediCuerpo.venPedidos = venRepaPedi.venPedidos) AND (venPediCuerpo.Renglon_Pe = venRepaPedi.Renglon_Pe)
WHERE venRepaPedi.venPedidos = @pvenPedidos And
venRepaPedi.Renglon_Pe = @pRenglon_Pe
 
RETURN @@Error 

GO

Drop procedure venRepaPediDesMarcarRemitido
Go
Create procedure venRepaPediDesMarcarRemitido
(
@pvenReparto int,
@pvenPedidos int,
@pRenglon_Pe int
)
As
Update venRepaPedi Set Remitido = 0 Where venReparto = @pvenReparto AND
venPedidos = @pvenPedidos AND Renglon_Pe = @pRenglon_Pe
Go


Drop procedure venRepaPediDesMarcarFacturado
Go
Create procedure venRepaPediDesMarcarFacturado
(
@pvenReparto int,
@pvenPedidos int,
@pRenglon_Pe int
)
As
Update venRepaPedi Set Facturado = 0 Where venReparto = @pvenReparto AND
venPedidos = @pvenPedidos AND Renglon_Pe = @pRenglon_Pe
Go
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venRepaPediSerie.sql*/
DROP PROCEDURE venRepaPediSerieGuardar
GO
CREATE PROCEDURE venRepaPediSerieGuardar
(
@pvenReparto int,
@pRenglon_Rep int,
@pvenPedidos int,
@pRenglon_Pe int,
@pSerie varchar(25),
@pCantidad qCantidadD8
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venRepaPediSerie WHERE (venReparto = @pvenReparto) AND (Renglon_Rep = @pRenglon_Rep) AND (venPedidos = @pvenPedidos) AND (Renglon_Pe = @pRenglon_Pe) AND (Serie = @pSerie)))
BEGIN 
	UPDATE venRepaPediSerie
	SET		Cantidad = @pCantidad
	WHERE (venReparto = @pvenReparto) AND (Renglon_Rep = @pRenglon_Rep) AND (venPedidos = @pvenPedidos) AND (Renglon_Pe = @pRenglon_Pe) AND (Serie = @pSerie)
END 
ELSE 
BEGIN 
	INSERT INTO venRepaPediSerie
	(
		venReparto,
		Renglon_Rep,
		venPedidos,
		Renglon_Pe,
		Serie,
		Cantidad
	)
	VALUES 
	(
		@pvenReparto,
		@pRenglon_Rep,
		@pvenPedidos,
		@pRenglon_Pe,
		@pSerie,
		@pCantidad
	)
END 

GO

DROP PROCEDURE venRepaPediSerieDatos
GO
CREATE PROCEDURE venRepaPediSerieDatos
(
@pvenReparto int,
@pRenglon_Rep int=NULL,
@pvenPedidos int=NULL,
@pRenglon_Pe int=NULL,
@pSerie varchar(25)=NULL
)
AS
SET NOCOUNT ON 

SELECT venRepaPediSerie.venReparto, venRepaPediSerie.Renglon_Rep, venRepaPediSerie.venPedidos, 
	venRepaPediSerie.Renglon_Pe, 
	venRepaPediSerie.Serie, isnull(venRepaPediSerieUbi.Cantidad, venRepaPediSerie.Cantidad) as Cantidad , 
		stkSerieVencimiento.Vencimiento, stkUbicaciones.Ubicacion_Id
FROM 
venRepaPediSerie 
INNER JOIN venReparto ON venReparto.venReparto = venRepaPediSerie.venReparto
INNER JOIN venPediCuerpo ON venPediCuerpo.venPedidos = venRepaPediSerie.venPedidos and 
							venPediCuerpo.Renglon_Pe = venRepaPediSerie.Renglon_pe
LEFT JOIN stkSerieVencimiento ON stkSerieVencimiento.Serie = venRepaPediSerie.Serie and 
					stkSerieVencimiento.Empresa_Id = venReparto.Empresa_Id and
					stkSerieVencimiento.Producto_Id = venPediCuerpo.Producto_Id
LEFT JOIN (venRepaPediSerieUbi INNER JOIN  stkUbicaciones ON 
	venRepaPediSerieUbi.Ubicacion_Id =  stkUbicaciones.stkUbicaciones ) ON
	venRepaPediSerieUbi.venReparto = venRepaPediSerie.venReparto and 
	venRepaPediSerieUbi.Renglon_Rep = venRepaPediSerie.Renglon_Rep and 
	venRepaPediSerieUbi.venPedidos = venRepaPediSerie.venPedidos and 
	venRepaPediSerieUbi.Renglon_Pe = venRepaPediSerie.Renglon_Pe and 
	venRepaPediSerieUbi.Serie = venRepaPediSerie.Serie
WHERE 
(venRepaPediSerie.venReparto = @pvenReparto)
AND (venRepaPediSerie.Renglon_Rep = ISNULL(@pRenglon_Rep,venRepaPediSerie.Renglon_Rep))
AND (venRepaPediSerie.venPedidos = ISNULL(@pvenPedidos,venRepaPediSerie.venPedidos))
AND (venRepaPediSerie.Renglon_Pe = ISNULL(@pRenglon_Pe,venRepaPediSerie.Renglon_Pe))
AND (venRepaPediSerie.Serie = ISNULL(@pSerie,venRepaPediSerie.Serie))
 
RETURN @@Error 

GO

DROP PROCEDURE venRepaPediSerieEliminar
GO
CREATE PROCEDURE venRepaPediSerieEliminar
(
@pvenReparto int,
@pRenglon_Rep int =NULL,
@pvenPedidos int=NULL,
@pRenglon_Pe int=NULL,
@pSerie varchar(25) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venRepaPediSerie 
WHERE (venReparto = @pvenReparto)
AND (Renglon_Rep = ISNULL(@pRenglon_Rep,Renglon_Rep))
AND (venPedidos = ISNULL(@pvenPedidos,venPedidos))
AND (Renglon_Pe = ISNULL(@pRenglon_Pe,Renglon_Pe))
AND (Serie = ISNULL(@pSerie, Serie))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venRepaPediSerieUbi.sql*/
DROP PROCEDURE venRepaPediSerieUbiInsertar
GO
CREATE PROCEDURE venRepaPediSerieUbiInsertar
(
@pvenReparto int,
@pRenglon_Rep int,
@pvenPedidos int,
@pRenglon_Pe int,
@pSerie varchar(25),
@pUbicacion_Id varchar(25),
@pCantidad qCantidadD8
)
AS
	INSERT INTO venRepaPediSerieUbi
	(
		venReparto,
		Renglon_Rep,
		venPedidos,
		Renglon_Pe,
		Serie,
		Ubicacion_Id,
		Cantidad
	)
	VALUES 
	(
		@pvenReparto,
		@pRenglon_Rep,
		@pvenPedidos,
		@pRenglon_Pe,
		@pSerie,
		dbo.FuncFKstkUbicaciones(@pUbicacion_Id),
		@pCantidad
	)

GO

DROP PROCEDURE venRepaPediSerieUbiDatos
GO
CREATE PROCEDURE venRepaPediSerieUbiDatos
(
@pvenReparto int,
@pRenglon_Rep int=null,
@pvenPedidos int=null,
@pRenglon_Pe int=null,
@pSerie varchar(25)=null,
@pUbicacion_Id varchar(25)= null
)
AS
SET NOCOUNT ON 

SELECT venRepaPediSerieUbi.venReparto, venRepaPediSerieUbi.Renglon_Rep, venRepaPediSerieUbi.venPedidos, venRepaPediSerieUbi.Renglon_Pe,
	venRepaPediSerieUbi.Serie, stkUbicaciones.Ubicacion_Id, venRepaPediSerieUbi.Cantidad
FROM venRepaPediSerieUbi 
INNER JOIN venRepaPediSerie  ON (venRepaPediSerie.venReparto = venRepaPediSerieUbi.venReparto) AND (venRepaPediSerie.Renglon_Rep = venRepaPediSerieUbi.Renglon_Rep) AND (venRepaPediSerie.venPedidos = venRepaPediSerieUbi.venPedidos) AND (venRepaPediSerie.Renglon_Pe = venRepaPediSerieUbi.Renglon_Pe) AND (venRepaPediSerie.Serie = venRepaPediSerieUbi.Serie)
INNER JOIN stkUbicaciones  ON (stkUbicaciones.stkUbicaciones = venRepaPediSerieUbi.Ubicacion_Id)
WHERE (venRepaPediSerie.venReparto = @pvenReparto)
AND venRepaPediSerie.Renglon_Rep = ISNULL(@pRenglon_Rep,venRepaPediSerie.Renglon_Rep)
AND venRepaPediSerie.venPedidos = ISNULL(@pvenPedidos,venRepaPediSerie.venPedidos)
AND venRepaPediSerie.Renglon_Pe = ISNULL(@pRenglon_Pe,venRepaPediSerie.Renglon_Pe)
AND venRepaPediSerie.Serie = ISNULL(@pSerie,venRepaPediSerie.Serie)
AND stkUbicaciones.Ubicacion_Id = ISNULL(@pUbicacion_Id,stkUbicaciones.Ubicacion_Id)
 
RETURN @@Error 

GO

DROP PROCEDURE venRepaPediSerieUbiEliminar
GO
CREATE PROCEDURE venRepaPediSerieUbiEliminar
(
@pvenReparto int,
@pRenglon_Rep int = null,
@pvenPedidos int= null,
@pRenglon_Pe int= null,
@pSerie varchar(25)= null,
@pUbicacion_Id varchar(25)= null
)
AS
SET NOCOUNT ON 

DELETE FROM venRepaPediSerieUbi 
WHERE (venReparto = @pvenReparto)
AND Renglon_Rep = ISNULL(@pRenglon_Rep,Renglon_Rep)
AND venPedidos = ISNULL(@pvenPedidos,venPedidos)
AND Renglon_Pe = ISNULL(@pRenglon_Pe,Renglon_Pe)
AND Serie = ISNULL(@pSerie,Serie)
AND (@pUbicacion_Id IS NULL OR Ubicacion_Id = dbo.FuncFKstkUbicaciones(@pUbicacion_Id))
 
RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venRepartoFacturas.sql*/
-- exec venRepartoFacturasDatos 1,'REPARTO',23,0,0,0,'0001',' ',' ', ' '


Drop procedure venRepartoFacturasDatos
Go
Create procedure venRepartoFacturasDatos
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
As

Select @pEmpresa_Id Empresa_Id, @pSegmento_Id Segmento_Id, @pSegmento1C Segmento1C, @pSegmento2C Segmento2C, @pSegmento3C Segmento3C, @pSegmento4C Segmento4C,
@pSegmento1N Segmento1N, @pSegmento2N Segmento2N, @pSegmento3N Segmento3N, @pSegmento4N Segmento4N

Select Distinct venMovConStockCrPed.venMovimientos, genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N
From venMovConStockCrPed
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = venMovConStockCrPed.venMovimientos
INNER JOIN conAsientos ON conAsientos.conAsientos = venMovConStockCrPed.venMovimientos
Inner Join genSegmentos On genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
INNER JOIN venRepaPedi ON venRepaPedi.venPedidos = venMovConStockCrPed.venPedidos and
							venRepaPedi.Renglon_Pe = venMovConStockCrPed.Renglon_Pe and 
							venRepaPedi.venReparto = 		venMovConStockCrPed.venReparto
Inner Join venRepaSegmentos On venRepaSegmentos.venReparto = venRepaPedi.venReparto
Where 
conAsientos.Anulado = 0 and conasientos.Posteado = 1 and 
venRepaSegmentos.Empresa_Id = @pEmpresa_Id And venRepaSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) And
venRepaSegmentos.Segmento1C = @pSegmento1C And venRepaSegmentos.Segmento2C = @pSegmento2C And 
venRepaSegmentos.Segmento3C = @pSegmento3C And venRepaSegmentos.Segmento4C = @pSegmento4C And
venRepaSegmentos.Segmento1N = @pSegmento1N And venRepaSegmentos.Segmento2N = @pSegmento2N And 
venRepaSegmentos.Segmento3N = @pSegmento3N And venRepaSegmentos.Segmento4N = @pSegmento4N
union all

Select venPediFacturados.venMovimientos, genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N
From venPediFacturados
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = venPediFacturados.venMovimientos
INNER JOIN conAsientos ON conAsientos.conAsientos = venPediFacturados.venMovimientos
INNER JOIN venMovimientos ON venMovimientos.venMovimientos = venPediFacturados.venMovimientos
Inner Join genSegmentos On genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
Inner Join venRepaSegmentos On venRepaSegmentos.venReparto = venPediFacturados.Reparto_Id
Where 
venMovimientos.venTipoMov = 'R' and 
conAsientos.Anulado = 0 and conasientos.Posteado = 1 and 
venRepaSegmentos.Empresa_Id = @pEmpresa_Id And venRepaSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) And
venRepaSegmentos.Segmento1C = @pSegmento1C And venRepaSegmentos.Segmento2C = @pSegmento2C And 
venRepaSegmentos.Segmento3C = @pSegmento3C And venRepaSegmentos.Segmento4C = @pSegmento4C And
venRepaSegmentos.Segmento1N = @pSegmento1N And venRepaSegmentos.Segmento2N = @pSegmento2N And 
venRepaSegmentos.Segmento3N = @pSegmento3N And venRepaSegmentos.Segmento4N = @pSegmento4N

Go


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venRepartoRemitos.sql*/
Drop procedure venRepartoRemitosDatos
Go
Create procedure venRepartoRemitosDatos
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
As

Select @pEmpresa_Id Empresa_Id, @pSegmento_Id Segmento_Id, @pSegmento1C Segmento1C, @pSegmento2C Segmento2C, @pSegmento3C Segmento3C, @pSegmento4C Segmento4C,
@pSegmento1N Segmento1N, @pSegmento2N Segmento2N, @pSegmento3N Segmento3N, @pSegmento4N Segmento4N

Select Distinct venPediRemitidos.stkMoviCabe, genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N
From venPediRemitidos
Inner Join genAsiSegmentos On genAsiSegmentos.Asiento_Id = venPediRemitidos.stkMoviCabe
Inner Join genSegmentos On genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
Inner Join stkRemitos On stkRemitos.stkMoviCabe = venPediRemitidos.stkMoviCabe
Inner Join venRepaSegmentos On venRepaSegmentos.venReparto = venPediRemitidos.venReparto
Where venRepaSegmentos.Empresa_Id = @pEmpresa_Id And venRepaSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) And
venRepaSegmentos.Segmento1C = @pSegmento1C And venRepaSegmentos.Segmento2C = @pSegmento2C And 
venRepaSegmentos.Segmento3C = @pSegmento3C And venRepaSegmentos.Segmento4C = @pSegmento4C And
venRepaSegmentos.Segmento1N = @pSegmento1N And venRepaSegmentos.Segmento2N = @pSegmento2N And 
venRepaSegmentos.Segmento3N = @pSegmento3N And venRepaSegmentos.Segmento4N = @pSegmento4N
Go




Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venRepartos.sql*/
--venrepartodatos 1
DROP PROCEDURE venRepartoGuardar
GO
CREATE PROCEDURE venRepartoGuardar
(
@pEmpresa_Id int,
@pSegmento_Id varChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pSucursal varChar(5),
@pFechaReparto qFecha,
@pFechaEntrega qFecha,
@pDeposito_Id varchar(15) = NULL,
@pZonaDesde varchar(5),
@pZonaHasta varchar(5),
@pTipoClieDesde varchar(5),
@pTipoClieHasta varchar(5),
@pClienteDesde varchar(15),
@pClienteHasta varchar(15),
@pDepoPedido_Id varchar(15) = NULL,
@pAutomatico Sino,
@pCerrado Sino
)
AS
SET NOCOUNT ON 
Declare @lIdentity int = (Select venReparto
 from venRepaSegmentos
 Where
	venRepaSegmentos.Empresa_id = @pEmpresa_Id and 
	venRepaSegmentos.Segmento_id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	venRepaSegmentos.Segmento1N = @pSegmento1N and 
	venRepaSegmentos.Segmento2N = @pSegmento2N and 
	venRepaSegmentos.Segmento3N = @pSegmento3N and 
	venRepaSegmentos.Segmento4N = @pSegmento4N and 
	venRepaSegmentos.Segmento1C = @pSegmento1C and 
	venRepaSegmentos.Segmento2C = @pSegmento2C and 
	venRepaSegmentos.Segmento3C = @pSegmento3C and 
	venRepaSegmentos.Segmento4C = @pSegmento4C )

IF (@lIdentity IS NOT NULL)
BEGIN 
	UPDATE venReparto
	SET
		Empresa_Id = @pEmpresa_Id,
		Sucursal = dbo.FuncFKgenSucursalesEmpr(@pSucursal),
		FechaReparto = @pFechaReparto,
		FechaEntrega = @pFechaEntrega,
		Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id),
		ZonaDesde = @pZonaDesde,
		ZonaHasta = @pZonaHasta,
		TipoClieDesde = @pTipoClieDesde,
		TipoClieHasta = @pTipoClieHasta,
		ClienteDesde = @pClienteDesde,
		ClienteHasta = @pClienteHasta,
		DepoPedido_Id = dbo.FuncFKstkDepositos(@pDepoPedido_Id),
		Automatico = @pAutomatico,
		Cerrado = @pCerrado
	WHERE @lIdentity = venReparto
END 
ELSE 
BEGIN 
	INSERT INTO venReparto
	(
		Empresa_Id,
		Sucursal,
		FechaReparto,
		FechaEntrega,
		Deposito_Id,
		ZonaDesde,
		ZonaHasta,
		TipoClieDesde,
		TipoClieHasta,
		ClienteDesde,
		ClienteHasta,
		DepoPedido_Id,
		Automatico,
		Cerrado
	)
	VALUES 
	(	
		@pEmpresa_Id,
		dbo.FuncFKgenSucursalesEmpr(@pSucursal),
		@pFechaReparto,
		@pFechaEntrega,
		dbo.FuncFKstkDepositos(@pDeposito_Id),
		@pZonaDesde,
		@pZonaHasta,
		@pTipoClieDesde,
		@pTipoClieHasta,
		@pClienteDesde,
		@pClienteHasta,
		dbo.FuncFKstkDepositos(@pDepoPedido_Id),
		@pAutomatico,
		@pCerrado
	)
	SET @lIdentity =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentity as RetVal 

GO

DROP PROCEDURE venRepartoDatos
GO
CREATE PROCEDURE venRepartoDatos
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
As

Declare @pIdentity int= (select venReparto from venRepaSegmentos
	Where
	venRepaSegmentos.Empresa_Id = @pEmpresa_Id and 
	venRepaSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) and 
	venRepaSegmentos.Segmento1N = @pSegmento1N and 
	venRepaSegmentos.Segmento2N = @pSegmento2N and 
	venRepaSegmentos.Segmento3N = @pSegmento3N and 
	venRepaSegmentos.Segmento4N = @pSegmento4N and 
	venRepaSegmentos.Segmento1C = @pSegmento1C and 
	venRepaSegmentos.Segmento2C = @pSegmento2C and 
	venRepaSegmentos.Segmento3C = @pSegmento3C and 
	venRepaSegmentos.Segmento4C = @pSegmento4C)

Exec venRepartoDatosIdentity @pIdentity

GO




Drop PROCEDURE venRepartoEliminar
Go

CREATE PROCEDURE venRepartoEliminar
(
@lIdentity int
)
AS
SET NOCOUNT ON 

DELETE FROM venReparto WHERE venReparto.venReparto = @lIdentity
RETURN @@Error 

GO

-- venRepartoCalcularCuerpo 1,'REPARTO',0,0,0,0,' ',' ',' ',' ','20231120','09','09',' ','ZZ',' ','ZZ','S100','S100'
Drop Procedure venRepartoCalcularCuerpo
Go

Create Procedure venRepartoCalcularCuerpo
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20),
@pFechaEntrega DateTime,
@pDeposito_Id varChar(5),
@pDepoPedido varChar(5),
@pZonaDesde varChar(5),
@pZonaHasta varChar(5),
@pTipoClieDesde varChar(5),
@pTipoClieHasta varChar(5),
@pClienteDesde varChar(15),
@pClienteHasta varChar(15)
)
As

Declare @pIdentity int = isnull((Select venReparto From venRepaSegmentos
	Where
	venRepaSegmentos.Empresa_Id = @pEmpresa_id And 
	venRepaSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) And 
	venRepaSegmentos.Segmento1N = @pSegmento1N And 
	venRepaSegmentos.Segmento2N = @pSegmento2N And 
	venRepaSegmentos.Segmento3N = @pSegmento3N And 
	venRepaSegmentos.Segmento4N = @pSegmento4N And 
	venRepaSegmentos.Segmento1C = @pSegmento1C And 
	venRepaSegmentos.Segmento2C = @pSegmento2C And 
	venRepaSegmentos.Segmento3C = @pSegmento3C And 
	venRepaSegmentos.Segmento4C = @pSegmento4C),0)


SELECT venReparto.venReparto, venRepaSegmentos.Empresa_Id, genSegmentos.Segmento_Id, venRepaSegmentos.Segmento1N,
	venRepaSegmentos.Segmento2N,venRepaSegmentos.Segmento3N,venRepaSegmentos.Segmento4N, venRepaSegmentos.Segmento1C, 
	venRepaSegmentos.Segmento2C,venRepaSegmentos.Segmento3C, venRepaSegmentos.Segmento4C, genSucursalesEmpr.Sucursal,
	venReparto.FechaReparto, venReparto.FechaEntrega, stkDepositos.Deposito_Id,
	stkDepositos.Descripcion as DescripcionDepositos, venReparto.ZonaDesde, venReparto.ZonaHasta, venReparto.TipoClieDesde,
	venReparto.TipoClieHasta, venReparto.ClienteDesde, venReparto.ClienteHasta, stkDepositos2.Deposito_Id DepoPedido_Id,
	stkDepositos2.Descripcion as DescripcionDepoPedido, venReparto.Automatico,
	venReparto.Cerrado, Convert(bit, 0) IncluyeStockCero, '' Mensaje, 0 Renglon, 'S' VolverACalcular, '' PrimeraVez, 0 Total

FROM venReparto 
LEFT JOIN stkDepositos  ON (stkDepositos.stkDepositos = venReparto.Deposito_Id)
LEFT JOIN stkDepositos stkDepositos2 ON (stkDepositos2.stkDepositos = venReparto.DepoPedido_Id)
Inner Join venRepaSegmentos On venRepaSegmentos.venReparto = venReparto.venReparto
Inner Join genSegmentos On genSegmentos.genSegmentos = venRepaSegmentos.Segmento_Id
Left Join genSucursalesEmpr On genSucursalesEmpr.genSucursalesEmpr = venReparto.Sucursal
WHERE venReparto.venReparto = @pIdentity

/*
If @pSegmento1N = 0
Begin
*/
-- Los renglones del reparto ingresado --
	Select venPediSegmentos.Empresa_Id,  venPediSegmentos.Segmento_Id, venPediSegmentos.Segmento1N,
		venPediSegmentos.Segmento2N,venPediSegmentos.Segmento3N,venPediSegmentos.Segmento4N, venPediSegmentos.Segmento1C, 
		venPediSegmentos.Segmento2C,venPediSegmentos.Segmento3C, venPediSegmentos.Segmento4C,
		dbo.Segmento(venPediSegmentos.Segmento_Id, venPediSegmentos.Segmento1C, venPediSegmentos.Segmento2C,
		venPediSegmentos.Segmento3C, venPediSegmentos.Segmento4C, venPediSegmentos.Segmento1N,
		venPediSegmentos.Segmento2N,venPediSegmentos.Segmento3N,venPediSegmentos.Segmento4N) Segmento,
		venClientes.Cliente_Id, venClientes.RazonSocial, 0 Renglon_Rep,
		venPedidos.venPedidos, venPedidos.UsuarioAutoriz_Id,
		venPediCuerpo.Renglon_Pe, stkProductos.Producto_Id, stkProductos.Descripcion,
		stkUniMed.Medida_Id MedidaPpal, stkUMAlt.Medida_Id MedidaAlterna, stkUMPed.Medida_Id MedidaPed,
		venPediCuerpo.Factor, stkProductos.FactorAlterna,
		stkProductos.Clase, stkProductos.ClaseAlterna, stkProductos.Serializable, stkProductos.TrabajaPorLotes, 
		(venPediCuerpo.CantidadPedida - venPediCuerpo.CantidadRemitida)/ venPediCuerpo.Factor PendienteRemitir,
		(venPediCuerpo.CantidadPedida - venPediCuerpo.CantidadFacturada)/ venPediCuerpo.Factor PendienteFacturar,
		stkExistencia.Cantidad/ venPediCuerpo.Factor Stock, stkExistencia.CantidadReservada/ venPediCuerpo.Factor CantidadReservada, 
		venPediCuerpo.ReservaMercaderia,
		venPediCuerpo.Bonificacion,
		(Select Sum(vrp.CantidadForm*vpc.Factor) From venRepaPedi vrp, venReparto vr, venPediCuerpo vpc, venRepaSegmentos vrs Where
			vrp.Remitido = 0 and vr.Cerrado = 0 And
			vrp.venReparto = vr.venReparto And
			vrs.venReparto = vr.venReparto And
			vpc.venPedidos = vrp.venPedidos And
			vpc.Renglon_Pe = vrp.Renglon_Pe And
			vpc.Producto_Id = stkProductos.stkProductos And vrs.Empresa_Id = @pEmpresa_Id And
			/*vpc.ReservaMercaderia = 0 And */
			vr.venReparto <> @pIdentity And vpc.Deposito_Id = dbo.FuncFKstkDepositos(@pDepoPedido))/ venPediCuerpo.Factor CantResePedi,
			/*
		(Select Sum(vrf.Cantidad) From venRepaFactu vrf, venReparto  vr, venMovConStockCr vmc Where
			vrf.Sucursal_rep = vr.Sucursal_rep and
			vrf.Numero_rep = vr.Numero_rep and
			vmc.venTipomov_id  = vrf.venTipomov_id and
			vmc.vensucursal = vrf.venSucursal and
			vmc.venComprobante = vrf.venComprobante and
			vmc.venLetra = vrf.venLetra and
			vmc.venRenglon = vrf.venRenglon and
			vmc.Producto_id = stkProductos.Producto_id and
			(vr.Sucursal_rep <> ?pSucursal_rep or vr.Numero_rep <> ?pNumero_rep)) */ 0 CantReseFactu,
		stkExistencia.CantidadAlterna StockAlterna, 

		venRepaPedi.CantidadForm, venRepaPedi.CantidadAlternaForm,
		venRepaPedi.Remitido, venRepaPedi.Facturado, venPediCuerpo.FechaEntrega,
		venCondPago.CondPagoCli_Id, venCondPago.Descripcion DescCondPago, 0 Renglon, 
		0.00 as Disponible, venPedidos.SoloEntrega, ' ' Color
	From venPedidos
	Inner Join venPediSegmentos On venPediSegmentos.venPedidos = venPedidos.venPedidos
	Inner Join venPediCuerpo On venPedidos.venPedidos = venPediCuerpo.venPedidos
	Inner Join venRepaPedi On venRepaPedi.venPedidos = venPediCuerpo.venPedidos And
			venRepaPedi.Renglon_Pe = venPediCuerpo.Renglon_Pe
	Inner Join venSubTipoMov On venSubTipoMov.venSubTipoMov = venPedidos.SubTipoMov_Id
	Inner Join stkProductos On stkProductos.stkProductos = venPediCuerpo.Producto_Id
	Inner Join stkUniMed On stkUniMed.stkUniMed = stkProductos.Medida_Id
	Left Join stkUniMed stkUMAlt On stkUMAlt.stkUniMed = stkProductos.MedidaAlterna
	Inner Join stkUniMed stkUMPed On stkUMPed.stkUniMed = venPediCuerpo.Medida_Id
	Inner Join venCondPago On venCondPago.venCondPago = venPedidos.CondPagoCli_Id
	Inner Join venClientes On venClientes.genEntidades = venPedidos.Cliente_Id
	Inner Join venClieHabitual On venClieHabitual.genEntidades = venPedidos.Cliente_Id And venClieHabitual.Sucursal = venPedidos.Sucursal
	Left Join stkExistencia On stkExistencia.Producto_Id = venPediCuerpo.Producto_Id And 
			stkExistencia.Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id) And stkExistencia.Empresa_Id= @pEmpresa_Id
	Inner Join venFormaEntrega On venFormaEntrega.venFormaEntrega = venPedidos.FormaEntrega_Id
	Inner Join venTiposClie On venTiposClie.venTiposClie = venClieHabitual.TipoClie_Id
	Where venFormaEntrega.ExcluirDelReparto = 0 And venPediCuerpo.FechaEntrega <= @pFechaEntrega And 
	venRepaPedi.venReparto = @pIdentity

Union All	
-- Los renglones pendientes de los pedidos --
	Select venPediSegmentos.Empresa_Id,  venPediSegmentos.Segmento_Id, venPediSegmentos.Segmento1N,
		venPediSegmentos.Segmento2N,venPediSegmentos.Segmento3N,venPediSegmentos.Segmento4N, venPediSegmentos.Segmento1C, 
		venPediSegmentos.Segmento2C,venPediSegmentos.Segmento3C, venPediSegmentos.Segmento4C,
		dbo.Segmento(venPediSegmentos.Segmento_Id, venPediSegmentos.Segmento1C, venPediSegmentos.Segmento2C,
		venPediSegmentos.Segmento3C, venPediSegmentos.Segmento4C, venPediSegmentos.Segmento1N,
		venPediSegmentos.Segmento2N,venPediSegmentos.Segmento3N,venPediSegmentos.Segmento4N) Segmento,
		venClientes.Cliente_Id, venClientes.RazonSocial, 0 Renglon_Rep,
		venPedidos.venPedidos, venPedidos.UsuarioAutoriz_Id,
		venPediCuerpo.Renglon_Pe, stkProductos.Producto_Id, stkProductos.Descripcion,
		stkUniMed.Medida_Id MedidaPpal, stkUMAlt.Medida_Id MedidaAlterna, stkUMPed.Medida_Id MedidaPed,
		venPediCuerpo.Factor, stkProductos.FactorAlterna,
		stkProductos.Clase, stkProductos.ClaseAlterna, stkProductos.Serializable, stkProductos.TrabajaPorLotes, 
		(venPediCuerpo.CantidadPedida - venPediCuerpo.CantidadRemitida)/ venPediCuerpo.Factor PendienteRemitir,
		(venPediCuerpo.CantidadPedida - venPediCuerpo.CantidadFacturada)/ venPediCuerpo.Factor PendienteFacturar,
		stkExistencia.Cantidad/ venPediCuerpo.Factor Stock, stkExistencia.CantidadReservada/ venPediCuerpo.Factor CantidadReservada, 
		venPediCuerpo.ReservaMercaderia,	venPediCuerpo.Bonificacion,
		(Select Sum(vrp.CantidadForm*vpc.Factor) From venRepaPedi vrp, venReparto vr, venPediCuerpo vpc, venRepaSegmentos vrs Where
			vrp.Remitido = 0 and vr.Cerrado = 0 And
			vrp.venReparto = vr.venReparto And
			vrs.venReparto = vr.venReparto And
			vpc.venPedidos = vrp.venPedidos And
			vpc.Renglon_Pe = vrp.Renglon_Pe And
			vpc.Producto_Id = stkProductos.stkProductos And vrs.Empresa_Id = @pEmpresa_Id And
			/*vpc.ReservaMercaderia = 0 And*/
			(vr.venReparto <> @pIdentity And vpc.Deposito_Id = dbo.FuncFKstkDepositos(@pDepoPedido)))/ venPediCuerpo.Factor CantResePedi,
			/*
		(Select Sum(vrf.Cantidad) From venRepaFactu vrf, venReparto  vr, venMovConStockCr vmc Where
			vrf.Sucursal_rep = vr.Sucursal_rep and
			vrf.Numero_rep = vr.Numero_rep and
			vmc.venTipomov_id  = vrf.venTipomov_id and
			vmc.vensucursal = vrf.venSucursal and
			vmc.venComprobante = vrf.venComprobante and
			vmc.venLetra = vrf.venLetra and
			vmc.venRenglon = vrf.venRenglon and
			vmc.Producto_id = stkProductos.Producto_id and
			(vr.Sucursal_rep <> ?pSucursal_rep or vr.Numero_rep <> ?pNumero_rep)) */ 0 CantReseFactu,
		stkExistencia.CantidadAlterna StockAlterna, 

		0 CantidadForm, 0 CantidadAlternaForm, Cast(0 As bit) Remitido, Cast(0 As bit) Facturado, venPediCuerpo.FechaEntrega,
		venCondPago.CondPagoCli_Id, venCondPago.Descripcion DescCondPago,
		Cast(ROW_NUMBER() OVER( ORDER BY venClientes.Cliente_Id, venPedidos.venPedidos, venPediCuerpo.Renglon_Pe) as int) - 1 as Renglon, 
		0.00 as Disponible, venPedidos.SoloEntrega, ' ' Color
	From venPedidos
	Inner Join venPediSegmentos On venPediSegmentos.venPedidos = venPedidos.venPedidos
	Inner Join venPediCuerpo On venPedidos.venPedidos = venPediCuerpo.venPedidos
	--Inner Join venRepaPedi On venRepaPedi.venPedidos = venPediCuerpo.venPedidos And
	--		venRepaPedi.Renglon_Pe = venPediCuerpo.Renglon_Pe
	Inner Join venSubTipoMov On venSubTipoMov.venSubTipoMov = venPedidos.SubTipoMov_Id
	Inner Join stkProductos On stkProductos.stkProductos = venPediCuerpo.Producto_Id
	Inner Join stkUniMed On stkUniMed.stkUniMed = stkProductos.Medida_Id
	Left Join stkUniMed stkUMAlt On stkUMAlt.stkUniMed = stkProductos.MedidaAlterna
	Inner Join stkUniMed stkUMPed On stkUMPed.stkUniMed = venPediCuerpo.Medida_Id
	Inner Join venCondPago On venCondPago.venCondPago = venPedidos.CondPagoCli_Id
	Inner Join venClientes On venClientes.genEntidades = venPedidos.Cliente_Id
	Inner Join venClieHabitual On venClieHabitual.genEntidades = venPedidos.Cliente_Id And venClieHabitual.Sucursal = venPedidos.Sucursal
	Left Join stkExistencia On stkExistencia.Producto_Id = venPediCuerpo.Producto_Id And 
			stkExistencia.Deposito_Id = dbo.FuncFKstkDepositos(@pDeposito_Id) and stkExistencia.Empresa_Id=@pEmpresa_Id
	Inner Join venFormaEntrega On venFormaEntrega.venFormaEntrega = venPedidos.FormaEntrega_Id
	Inner Join venTiposClie On venTiposClie.venTiposClie = venClieHabitual.TipoClie_Id
	Where venFormaEntrega.ExcluirDelReparto = 0 And venPediCuerpo.FechaEntrega <= @pFechaEntrega And 
	Not Exists (Select 1 From venRepaPedi, venReparto Where
			venReparto.venReparto = venRepaPedi.venReparto And
			( venReparto.Cerrado = 0 Or venReparto.venReparto = @pIdentity) And
			venRepaPedi.venPedidos = venPediCuerpo.venPedidos And
			venRepaPedi.Renglon_pe = venPediCuerpo.Renglon_pe) And
	venTiposClie.TipoClie_Id Between @pTipoClieDesde And @pTipoClieHasta And
	venClientes.Cliente_Id Between @pClienteDesde And @pClienteHasta And
	venPediCuerpo.Deposito_Id = dbo.FuncFKstkDepositos(@pDepoPedido) And
	venPediCuerpo.Pendiente = 1 And (venPediCuerpo.CantidadPedida > venPediCuerpo.CantidadRemitida /* Or
	venPediCuerpo.CantidadPedida > venPediCuerpo.CantidadFacturada*/) And
	venPedidos.Estado = 'P' and venPedidos.Empresa_Id= @pEmpresa_Id
	--Order by 11, 2,3,4,5,6,7,8,9
	Order by venClientes.Cliente_Id, venPedidos.venPedidos, venPediCuerpo.Renglon_Pe

EXEC venRepaPediSerieDatos @pIdentity	

Exec genAtributosGeneralesIdentityDatos @pidentity, 'venReparto'

Exec venRepaUbicacionDatos   @pidentity

Go




Drop procedure venRepartoCerrar
Go
Create procedure venRepartoCerrar
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
As
Declare @pIdentity int = (Select venReparto From venRepaSegmentos
	Where
	venRepaSegmentos.Empresa_Id = @pEmpresa_id And 
	venRepaSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) And 
	venRepaSegmentos.Segmento1N = @pSegmento1N And 
	venRepaSegmentos.Segmento2N = @pSegmento2N And 
	venRepaSegmentos.Segmento3N = @pSegmento3N And 
	venRepaSegmentos.Segmento4N = @pSegmento4N And 
	venRepaSegmentos.Segmento1C = @pSegmento1C And 
	venRepaSegmentos.Segmento2C = @pSegmento2C And 
	venRepaSegmentos.Segmento3C = @pSegmento3C And 
	venRepaSegmentos.Segmento4C = @pSegmento4C)

Update venReparto Set Cerrado = 1 Where venReparto = @pIdentity
Go

DROP PROCEDURE venRepartoDatosIdentity
GO
CREATE PROCEDURE venRepartoDatosIdentity
(
@pvenReparto int
)
As

SELECT venReparto.venReparto, venRepaSegmentos.Empresa_Id, genSegmentos.Segmento_Id, venRepaSegmentos.Segmento1N,
	venRepaSegmentos.Segmento2N,venRepaSegmentos.Segmento3N,venRepaSegmentos.Segmento4N, venRepaSegmentos.Segmento1C, 
	venRepaSegmentos.Segmento2C,venRepaSegmentos.Segmento3C, venRepaSegmentos.Segmento4C, genSucursalesEmpr.Sucursal,
	venReparto.FechaReparto, venReparto.FechaEntrega, stkDepositos.Deposito_Id,
	stkDepositos.Descripcion as DescripcionDepositos, venReparto.ZonaDesde, '' DescripcionZonaDesde,
	venReparto.ZonaHasta, '' DescripcionZonaHasta, venReparto.TipoClieDesde, '' DescripcionTipoClieDesde,
	venReparto.TipoClieHasta, '' DescripcionTipoClieHasta, venReparto.ClienteDesde, '' DescripcionClienteDesde,
	venReparto.ClienteHasta, '' DescripcionClienteHasta, stkDepositos2.Deposito_Id DepoPedido_Id,
	stkDepositos2.Descripcion as DescripcionDepoPedido, venReparto.Automatico,
	venReparto.Cerrado, Convert(bit, 0) IncluyeStockCero, '' Mensaje, 0 Renglon, 'S' VolverACalcular, '' PrimeraVez, 0 Total
	FROM venReparto 
LEFT JOIN stkDepositos  ON (stkDepositos.stkDepositos = venReparto.Deposito_Id)
LEFT JOIN stkDepositos stkDepositos2 ON (stkDepositos2.stkDepositos = venReparto.DepoPedido_Id)
Inner Join venRepaSegmentos On venRepaSegmentos.venReparto = venReparto.venReparto
Inner Join genSegmentos On genSegmentos.genSegmentos = venRepaSegmentos.Segmento_Id
Left Join genSucursalesEmpr On genSucursalesEmpr.genSucursalesEmpr = venReparto.Sucursal
WHERE venReparto.venReparto = @pvenReparto

	Select venPediSegmentos.Empresa_Id, venPediSegmentos.Segmento_Id, venPediSegmentos.Segmento1N,
		venPediSegmentos.Segmento2N,venPediSegmentos.Segmento3N,venPediSegmentos.Segmento4N, venPediSegmentos.Segmento1C, 
		venPediSegmentos.Segmento2C,venPediSegmentos.Segmento3C, venPediSegmentos.Segmento4C,
		dbo.Segmento(venPediSegmentos.Segmento_Id, venPediSegmentos.Segmento1C, venPediSegmentos.Segmento2C,
		venPediSegmentos.Segmento3C, venPediSegmentos.Segmento4C, venPediSegmentos.Segmento1N,
		venPediSegmentos.Segmento2N,venPediSegmentos.Segmento3N,venPediSegmentos.Segmento4N) Segmento,
		venClientes.Cliente_Id, venClientes.RazonSocial, venRepaPedi.Renglon_Rep,
		venPedidos.venPedidos, venPedidos.UsuarioAutoriz_Id,
		venPediCuerpo.Renglon_Pe, stkProductos.Producto_Id, stkProductos.Descripcion,
		venPediCuerpo.Factor, stkProductos.FactorAlterna,
		stkUniMed.Medida_Id MedidaPpal, stkUMAlt.Medida_Id MedidaAlterna, stkUMPed.Medida_Id MedidaPed,
		stkProductos.Clase, stkProductos.ClaseAlterna, stkProductos.Serializable, stkProductos.TrabajaPorLotes, 
		(venPediCuerpo.CantidadPedida - venPediCuerpo.CantidadRemitida)/ venPediCuerpo.Factor PendienteRemitir,
		(venPediCuerpo.CantidadPedida - venPediCuerpo.CantidadFacturada)/ venPediCuerpo.Factor PendienteFacturar,
		stkExistencia.Cantidad/ venPediCuerpo.Factor Stock, stkExistencia.CantidadReservada/ venPediCuerpo.Factor CantidadReservada, 
		venPediCuerpo.ReservaMercaderia,	venPediCuerpo.Bonificacion,
		(Select Sum(vrp.CantidadForm*vpc.Factor) From venRepaPedi vrp, venReparto vr, venPediCuerpo vpc, venRepaSegmentos vrs Where
			vrp.Remitido = 0 and vr.Cerrado = 0 And
			vrp.venReparto = vr.venReparto And
			vrs.venReparto = vr.venReparto And
			vpc.venPedidos = vrp.venPedidos And
			vpc.Renglon_Pe = vrp.Renglon_Pe And
			vpc.Producto_Id = stkProductos.stkProductos And vrs.Empresa_Id = venPediSegmentos.Empresa_Id And
			/*vpc.ReservaMercaderia = 0 And */
			(vr.venReparto <> @pvenReparto And vpc.Deposito_Id = venPediCuerpo.Deposito_Id))/ venPediCuerpo.Factor CantResePedi,
			/*
		(Select Sum(vrf.Cantidad) From venRepaFactu vrf, venReparto  vr, venMovConStockCr vmc Where
			vrf.Sucursal_rep = vr.Sucursal_rep and
			vrf.Numero_rep = vr.Numero_rep and
			vmc.venTipomov_id  = vrf.venTipomov_id and
			vmc.vensucursal = vrf.venSucursal and
			vmc.venComprobante = vrf.venComprobante and
			vmc.venLetra = vrf.venLetra and
			vmc.venRenglon = vrf.venRenglon and
			vmc.Producto_id = stkProductos.Producto_id and
			(vr.Sucursal_rep <> ?pSucursal_rep or vr.Numero_rep <> ?pNumero_rep)) */ 0 CantReseFactu,
		stkExistencia.CantidadAlterna StockAlterna, 

		venRepaPedi.CantidadForm, venRepaPedi.CantidadAlternaForm,
		venRepaPedi.Remitido, venRepaPedi.Facturado, venPediCuerpo.FechaEntrega,
		venCondPago.CondPagoCli_Id, venCondPago.Descripcion DescCondPago, 0 Renglon, 
		0.00 as Disponible, venPedidos.SoloEntrega, ' ' Color
	From venPedidos
	Inner Join venPediSegmentos On venPediSegmentos.venPedidos = venPedidos.venPedidos
	Inner Join venPediCuerpo On venPedidos.venPedidos = venPediCuerpo.venPedidos
	Inner Join venRepaPedi On venRepaPedi.venPedidos = venPediCuerpo.venPedidos And
			venRepaPedi.Renglon_Pe = venPediCuerpo.Renglon_Pe
	Inner Join venSubTipoMov On venSubTipoMov.venSubTipoMov = venPedidos.SubTipoMov_Id
	Inner Join stkProductos On stkProductos.stkProductos = venPediCuerpo.Producto_Id
	Inner Join stkUniMed On stkUniMed.stkUniMed = stkProductos.Medida_Id
	Left Join stkUniMed stkUMAlt On stkUMAlt.stkUniMed = stkProductos.MedidaAlterna
	Inner Join stkUniMed stkUMPed On stkUMPed.stkUniMed = venPediCuerpo.Medida_Id
	Inner Join venCondPago On venCondPago.venCondPago = venPedidos.CondPagoCli_Id
	Inner Join venClientes On venClientes.genEntidades = venPedidos.Cliente_Id
	Inner Join venClieHabitual On venClieHabitual.genEntidades = venPedidos.Cliente_Id And venClieHabitual.Sucursal = venPedidos.Sucursal
	Left Join stkExistencia On stkExistencia.Producto_Id = venPediCuerpo.Producto_Id And 
			stkExistencia.Deposito_Id = venPediCuerpo.Deposito_Id And stkExistencia.Empresa_Id= venPediSegmentos.Empresa_Id	
	Inner Join venFormaEntrega On venFormaEntrega.venFormaEntrega = venPedidos.FormaEntrega_Id
	Inner Join venTiposClie On venTiposClie.venTiposClie = venClieHabitual.TipoClie_Id
	Where venFormaEntrega.ExcluirDelReparto = 0 And venPediCuerpo.FechaEntrega <= dbo.FechaActual() And 
	venRepaPedi.venReparto = @pvenReparto

EXEC venRepaPediSerieDatos @pvenReparto	
Exec genAtributosGeneralesIdentityDatos @pvenReparto, 'venReparto'
Exec venRepaUbicacionDatos   @pvenReparto
Go



Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venRepaSegmentos.sql*/
DROP PROCEDURE venRepaSegmentosGuardar
GO
CREATE PROCEDURE venRepaSegmentosGuardar
(
@pEmpresa_Id int,
@pSegmento_Id VarChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20),
@pvenReparto int,
@pTieneAutomatico bit
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venRepaSegmentos 
	WHERE 
	(Empresa_Id = @pEmpresa_Id) AND 
	(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
	(Segmento1N = @pSegmento1N) AND 
	(Segmento2N = @pSegmento2N) AND 
	(Segmento3N = @pSegmento3N) AND 
	(Segmento4N = @pSegmento4N) AND 
	(Segmento1C = @pSegmento1C) AND 
	(Segmento2C = @pSegmento2C) AND 
	(Segmento3C = @pSegmento3C) AND 
	(Segmento4C = @pSegmento4C)))
BEGIN 
	UPDATE venRepaSegmentos
	SET Empresa_Id = @pEmpresa_Id,
		venReparto = @pvenReparto
	WHERE 
	(Empresa_Id = @pEmpresa_Id) AND 
	(Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id)) AND 
	(Segmento1N = @pSegmento1N) AND 
	(Segmento2N = @pSegmento2N) AND 
	(Segmento3N = @pSegmento3N) AND 
	(Segmento4N = @pSegmento4N) AND 
	(Segmento1C = @pSegmento1C) AND 
	(Segmento2C = @pSegmento2C) AND 
	(Segmento3C = @pSegmento3C) AND 
	(Segmento4C = @pSegmento4C)
END 
ELSE 
BEGIN

	If @pTieneAutomatico = 1
	Begin
		SET @pSegmento1N = (SELECT MAX(venRepaSegmentos.Segmento1N)+1 AS Segmento1N 
				FROM venRepaSegmentos 
					Where				
					venRepaSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) AND 
					venRepaSegmentos.Segmento2N = @pSegmento2N AND 
					venRepaSegmentos.Segmento3N = @pSegmento3N AND 
					venRepaSegmentos.Segmento4N = @pSegmento4N AND 
					venRepaSegmentos.Segmento1C = @pSegmento1C AND 
					venRepaSegmentos.Segmento2C = @pSegmento2C AND 
					venRepaSegmentos.Segmento3C = @pSegmento3C AND 
					venRepaSegmentos.Segmento4C = @pSegmento4C And
					venRepaSegmentos.Empresa_Id = @pEmpresa_Id)
		
		If @pSegmento1N Is Null
			SET @pSegmento1N = (SELECT genContadorSegmento.PrimerNumero AS Segmento1N 
				FROM genContadorSegmento Where genContadorSegmento.Empresa_Id = @pEmpresa_id And
					genContadorSegmento.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id) AND 
					genContadorSegmento.Segmento2N = @pSegmento2N AND 
					genContadorSegmento.Segmento3N = @pSegmento3N AND 
					genContadorSegmento.Segmento4N = @pSegmento4N AND 
					genContadorSegmento.Segmento1C = @pSegmento1C AND 
					genContadorSegmento.Segmento2C = @pSegmento2C AND 
					genContadorSegmento.Segmento3C = @pSegmento3C AND 
					genContadorSegmento.Segmento4C = @pSegmento4C)

		-- esto solo pasa si empieza en 1 esta prendido
			if @pSegmento1N is null or @pSegmento1N < 0
			begin
				set @pSegmento1N = 1
			end	
	End

	INSERT INTO venRepaSegmentos
	(
		Empresa_Id,
		Segmento_Id,
		Segmento1N,
		Segmento2N,
		Segmento3N,
		Segmento4N,
		Segmento1C,
		Segmento2C,
		Segmento3C,
		Segmento4C,
		venReparto
	)
	VALUES 
	(
		@pEmpresa_Id,
		dbo.FuncFKgenSegmentos(@pSegmento_Id),
		@pSegmento1N,
		@pSegmento2N,
		@pSegmento3N,
		@pSegmento4N,
		@pSegmento1C,
		@pSegmento2C,
		@pSegmento3C,
		@pSegmento4C,
		@pvenReparto
	)
END 
SELECT @pSegmento1N as RetVal
GO

DROP PROCEDURE venRepaSegmentosDatos
GO
CREATE PROCEDURE venRepaSegmentosDatos
(
@pEmpresa_Id int,
@pSegmento_Id varChar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20)
)
AS
SET NOCOUNT ON 

SELECT venRepaSegmentos.Empresa_Id, genSegmentos.Segmento_Id, genSegmentos.Descripcion as DescripcionSegmentos, venRepaSegmentos.Segmento1N,
	venRepaSegmentos.Segmento2N, venRepaSegmentos.Segmento3N, venRepaSegmentos.Segmento4N, venRepaSegmentos.Segmento1C,
	venRepaSegmentos.Segmento2C, venRepaSegmentos.Segmento3C, venRepaSegmentos.Segmento4C, venRepaSegmentos.venReparto,
	genSegmentos.TieneColumnaAutomatica
FROM venRepaSegmentos 
INNER JOIN genSegmentos  ON (genSegmentos.genSegmentos = venRepaSegmentos.Segmento_Id)
WHERE (venRepaSegmentos.Empresa_Id = @pEmpresa_Id)
AND (venRepaSegmentos.Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id))
AND (Segmento1N = @pSegmento1N)
AND (Segmento2N = @pSegmento2N)
AND (Segmento3N = @pSegmento3N)
AND (Segmento4N = @pSegmento4N)
AND (Segmento1C = @pSegmento1C)
AND (Segmento2C = @pSegmento2C)
AND (Segmento3C = @pSegmento3C)
AND (Segmento4C = @pSegmento4C)
 
 RETURN @@Error 

GO

DROP PROCEDURE venRepaSegmentosEliminar
GO
CREATE PROCEDURE venRepaSegmentosEliminar
(
@pEmpresa_Id int,
@pSegmento_Id varchar(10),
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C varchar(20),
@pSegmento2C varchar(20),
@pSegmento3C varchar(20),
@pSegmento4C varchar(20)
)
AS
SET NOCOUNT ON 

DELETE FROM venRepaSegmentos 
WHERE Empresa_Id = @pEmpresa_Id
AND (Segmento_Id = dbo.FuncFKgenSegmentos(@pSegmento_Id))
AND Segmento1N = @pSegmento1N
AND Segmento2N = @pSegmento2N
AND Segmento3N = @pSegmento3N
AND Segmento4N = @pSegmento4N
AND Segmento1C = @pSegmento1C
AND Segmento2C = @pSegmento2C
AND Segmento3C = @pSegmento3C
AND Segmento4C = @pSegmento4C
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venRepaUbicacion.sql*/
DROP PROCEDURE venRepaUbicacionInsertar
GO
CREATE PROCEDURE venRepaUbicacionInsertar
(
@pvenReparto int,
@pRenglon_Rep int,
@pvenPedidos int,
@pRenglon_Pe int,
@pUbicacion_Id varchar(25),
@pCantidadForm qCantidadD8,
@pCantidadAlternaForm qCantidadD8
)
AS
	INSERT INTO venRepaUbicacion
	(
		venReparto,
		Renglon_Rep,
		venPedidos,
		Renglon_Pe,
		Ubicacion_Id,
		CantidadForm,
		CantidadAlternaForm
	)
	VALUES 
	(
		@pvenReparto,
		@pRenglon_Rep,
		@pvenPedidos,
		@pRenglon_Pe,
		dbo.FuncFKstkUbicaciones(@pUbicacion_Id),
		@pCantidadForm,
		@pCantidadAlternaForm
	)

GO

DROP PROCEDURE venRepaUbicacionDatos
GO
CREATE PROCEDURE venRepaUbicacionDatos
(
@pvenReparto int,
@pRenglon_Rep int = null,
@pvenPedidos int= null,
@pRenglon_Pe int= null,
@pUbicacion_Id varchar(25) = NULL
)
AS
SET NOCOUNT ON 

SELECT venRepaUbicacion.venReparto, venRepaUbicacion.Renglon_Rep, venRepaUbicacion.venPedidos, 
	venRepaUbicacion.Renglon_Pe, stkUbicaciones.Ubicacion_Id, venRepaUbicacion.CantidadForm as Cantidad,
	venRepaUbicacion.CantidadAlternaForm as CantidadAlterna
FROM venRepaUbicacion 
INNER JOIN venRepaPedi  ON (venRepaPedi.venReparto = venRepaUbicacion.venReparto) AND (venRepaPedi.Renglon_Rep = venRepaUbicacion.Renglon_Rep) AND (venRepaPedi.venPedidos = venRepaUbicacion.venPedidos) AND (venRepaPedi.Renglon_Pe = venRepaUbicacion.Renglon_Pe)
INNER JOIN stkUbicaciones  ON (stkUbicaciones.stkUbicaciones = venRepaUbicacion.Ubicacion_Id)
WHERE (venRepaPedi.venReparto = @pvenReparto)
AND (venRepaPedi.Renglon_Rep = isnull(@pRenglon_Rep,venRepaPedi.Renglon_Rep))
AND (venRepaPedi.venPedidos = isnull(@pvenPedidos,venRepaPedi.venPedidos))
AND (venRepaPedi.Renglon_Pe = isnull(@pRenglon_Pe,venRepaPedi.Renglon_Pe))
AND (stkUbicaciones.Ubicacion_Id = isnull(@pUbicacion_Id,stkUbicaciones.Ubicacion_Id))
 
RETURN @@Error 

GO

DROP PROCEDURE venRepaUbicacionEliminar
GO
CREATE PROCEDURE venRepaUbicacionEliminar
(
@pvenReparto int,
@pRenglon_Rep int = NULL,
@pvenPedidos int = NULL ,
@pRenglon_Pe int = NULL,
@pUbicacion_Id varchar(25) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venRepaUbicacion 
WHERE venReparto = @pvenReparto
AND Renglon_Rep = isnull(@pRenglon_Rep,Renglon_Rep )
AND venPedidos = isnull(@pvenPedidos,venPedidos)
AND Renglon_Pe = isnull(@pRenglon_Pe,Renglon_Pe)
AND (@pUbicacion_Id IS NULL OR  Ubicacion_Id = dbo.FuncFKstkUbicaciones(@pUbicacion_Id))
 
RETURN @@Error 

GO


Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venSaldosPendientesTarea.sql*/
drop procedure venSaldosPendientesTarea
go
create procedure venSaldosPendientesTarea
(
    @pEmpresa_Id int
)
as
select '' as abc

select DISTINCT venClientes.Cliente_Id, venClieContacto.Email, genEmpresas.RazonSocial as RazonSocialEmpresa, venClientes.RazonSocial as RazonSocialCliente
from venClientes
inner join venClieContacto on (venClieContacto.EnviaFacturas=1 or venClieContacto.EnviaRecibo=1) and 
								venClieContacto.Cliente_Id=venClientes.genEntidades
inner join genEmpresas on genEmpresas.genEmpresas=@pEmpresa_Id
WHERE 
EXISTS(SELECT 1 FROM GENMOVCUOTAS 
inner join venmovimientos on venMovimientos.venMovimientos=genMovCuotas.Asiento_Id
inner join venTipoMov on venTipoMov.venTipoMov=venMovimientos.venTipoMov
inner join conAsientos on conAsientos.conAsientos=venMovimientos.venMovimientos
 where 
    venmovimientos.Cliente_Id = venClientes.genEntidades AND
	FechaVencimiento<dbo.FechaActual() and venTipoMov.Signo=1 and 
	genMovCuotas.Saldo>0 and 
	conAsientos.Anulado=0 and 
	conAsientos.Posteado=1 and 
	conAsientos.Empresa_Id=@pEmpresa_Id)
 go

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venSTMAfip.sql*/
DROP PROCEDURE venSTMAfipGuardar
GO
CREATE PROCEDURE venSTMAfipGuardar
(
@pvenSubTipoMov int,
@pLetra char(1),
@pComprobante_Id int
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venSTMAfip WHERE (venSubTipoMov = @pvenSubTipoMov) AND (Letra = @pLetra)))
BEGIN 
	UPDATE venSTMAfip
	SET		Comprobante_Id = @pComprobante_Id
	WHERE (venSubTipoMov = @pvenSubTipoMov) AND (Letra = @pLetra)
END 
ELSE 
BEGIN 
	INSERT INTO venSTMAfip
	(
		venSubTipoMov,
		Letra,
		Comprobante_Id
	)
	VALUES 
	(
		@pvenSubTipoMov,
		@pLetra,
		@pComprobante_Id
	)
END 

GO

DROP PROCEDURE venSTMAfipDatos
GO
CREATE PROCEDURE venSTMAfipDatos
(
@pvenSubTipoMov int,
@pLetra char(1) = null
)
AS
SET NOCOUNT ON 

SELECT venSubTipoMov.venSubTipoMov, venSTMAfip.Letra, venSTMAfip.Comprobante_Id,
	genTiposCompAfip.Descripcion as DescripcionTiposCompAfip
FROM venSTMAfip 
INNER JOIN venSubTipoMov  ON (venSubTipoMov.venSubTipoMov = venSTMAfip.venSubTipoMov)
LEFT JOIN genTiposCompAfip  ON (genTiposCompAfip.Comprobante_Id = venSTMAfip.Comprobante_Id)
WHERE (venSTMAfip.venSubTipoMov = @pvenSubTipoMov)
AND Letra = IsNull(@pLetra, Letra)
 
 RETURN @@Error 

GO

DROP PROCEDURE venSTMAfipEliminar
GO
CREATE PROCEDURE venSTMAfipEliminar
(
@pSubTipoMov_Id int,
@pLetra char(1) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venSTMAfip 
WHERE venSubTipoMov = @pSubTipoMov_Id
AND Letra = ISNULL(@pLetra, Letra)
 
 RETURN @@Error 

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venSubTipoMov.sql*/
DROP PROCEDURE venSubTipoMovGuardar
GO
CREATE PROCEDURE venSubTipoMovGuardar
(
@pSubTipoMov_Id varchar(5),
@pSubTipoMov_Id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pvenTipoMov char(1) = NULL,
@pDescripcion varchar(50),
@pMueveStock Sino,
@pEsVentaContado Sino,
@pAdmiteDevolucion Sino,
@pModificaPrecio Sino,
@pReservado Sino,
@pGeneraRemito Sino,
@pSegmentoRemito_Id varchar(10) = NULL,
@pNCxDevolucion Sino,
@pUsuarioAutorizado varchar(25) = NULL,
@pAdmiteBoniRenglon Sino,
@pCentro1_Id varchar(8) = NULL,
@pCentro2_Id varchar(8) = NULL,
@pPideCambio Sino,
@pModFecha Sino,
@pModCondPago Sino,
@pModVendedor Sino,
@pModCobrador Sino,
@pPideObervaciones Sino,
@pCantidadCopias smallint,
@pModDeposito Sino,
@pModListaPrecios Sino,
@pPideFechaEntrega Sino,
@pPideObsReng Sino,
@pCtaDefecto varchar(25) = NULL,
@pModCtaDefecto Sino,
@pModCentro1 Sino,
@pModCentro2 Sino,
@pPideOtrosCargos Sino,
@pCtaOtrosCargos varchar(25) = NULL,
@pPermModCtaOtCar Sino,
@pFechaEntregaporRen Sino,
@pAdmiteFactsinEntr Sino,
@pModiUniMed Sino,
@pAfectaComVenta Sino,
@pAfectaComCobra Sino,
@pMaxCantItems smallint,
@pEsPorDifPrecio Sino,
@pAfectaEstadistica Sino,
@pClaveAcceso varchar(50),
@pEsPorDifCambio Sino,
@pTipoPrecioForm char(1),
@pSoloImpuestos Sino,
@pCodigoFormulario varchar(15) = NULL,
@pBajoCosto Sino,
@pAdministrativa Sino,
@pPideReferencia Sino,
@pPideOrdenCompra Sino,
@pPideCongelarCambio Sino,
@pPideMarcaReserva Sino,
@pPermiteSoloEntrega Sino,
@pInactivo Sino,
@pUsuario_Id int,
@pPosteado Sino, 
@pPidePredial Sino,
@pPideCodProd SiNo, 
@pPideComExpoMX SiNo, 
@pCodigoFiscal VarChar(10)=NULL,
@pReporte_Id varchar(50)=null, 
@pEsquemaAuto_Id VarChar(10)= NULL, 
@pPorCotizacion SiNo, 
@pUsaCartaPorte Bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM venSubTipoMov WHERE (SubTipoMov_Id = @pSubTipoMov_Id)))
BEGIN 
	UPDATE venSubTipoMov
	SET		@lIdentidad = venSubTipoMov,
		SubTipoMov_Id = @pSubTipoMov_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		venTipoMov = @pvenTipoMov,
		Descripcion = @pDescripcion,
		MueveStock = @pMueveStock,
		EsVentaContado = @pEsVentaContado,
		AdmiteDevolucion = @pAdmiteDevolucion,
		ModificaPrecio = @pModificaPrecio,
		Reservado = @pReservado,
		GeneraRemito = @pGeneraRemito,
		SegmentoRemito_Id = dbo.FuncFKgenSegmentos(@pSegmentoRemito_Id),
		NCxDevolucion = @pNCxDevolucion,
		UsuarioAutorizado = dbo.FuncFKgenUsuarios(@pUsuarioAutorizado),
		AdmiteBoniRenglon = @pAdmiteBoniRenglon,
		Centro1_Id = dbo.FuncFKconCentro1(@pCentro1_Id),
		Centro2_Id = dbo.FuncFKconCentro2(@pCentro2_Id),
		PideCambio = @pPideCambio,
		ModFecha = @pModFecha,
		ModCondPago = @pModCondPago,
		ModVendedor = @pModVendedor,
		ModCobrador = @pModCobrador,
		PideObervaciones = @pPideObervaciones,
		CantidadCopias = @pCantidadCopias,
		ModDeposito = @pModDeposito,
		ModListaPrecios = @pModListaPrecios,
		PideFechaEntrega = @pPideFechaEntrega,
		PideObsReng = @pPideObsReng,
		CtaDefecto = dbo.FuncFKconCuentas(@pCtaDefecto),
		ModCtaDefecto = @pModCtaDefecto,
		ModCentro1 = @pModCentro1,
		ModCentro2 = @pModCentro2,
		PideOtrosCargos = @pPideOtrosCargos,
		CtaOtrosCargos = dbo.FuncFKconCuentas(@pCtaOtrosCargos),
		PermModCtaOtCar = @pPermModCtaOtCar,
		FechaEntregaporRen = @pFechaEntregaporRen,
		AdmiteFactsinEntr = @pAdmiteFactsinEntr,
		ModiUniMed = @pModiUniMed,
		AfectaComVenta = @pAfectaComVenta,
		AfectaComCobra = @pAfectaComCobra,
		MaxCantItems = @pMaxCantItems,
		EsPorDifPrecio = @pEsPorDifPrecio,
		AfectaEstadistica = @pAfectaEstadistica,
		ClaveAcceso = @pClaveAcceso,
		EsPorDifCambio = @pEsPorDifCambio,
		TipoPrecioForm = @pTipoPrecioForm,
		SoloImpuestos = @pSoloImpuestos,
		CodigoFormulario = @pCodigoFormulario,
		BajoCosto = @pBajoCosto,
		Administrativa = @pAdministrativa,
		PideReferencia = @pPideReferencia,
		PideOrdenCompra = @pPideOrdenCompra,
		PideCongelarCambio = @pPideCongelarCambio,
		PideMarcaReserva = @pPideMarcaReserva,
		PermiteSoloEntrega = @pPermiteSoloEntrega,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado, 
		PidePredial = @pPidePredial, PideCodProd = @pPideCodProd, 
		PideComExpoMX = @pPideComExpoMX, 
		CodigoFiscal = @pCodigoFiscal,
		Reporte_Id = dbo.FuncFKgenReportes(@pReporte_Id), 
		EsquemaAuto_Id = dbo.FuncfkvenEsquemaAuto(@pEsquemaAuto_Id), 
		PorCotizacion = @pPorCotizacion, 
		UsaCartaPorte = @pUsaCartaPorte
		
	WHERE (SubTipoMov_Id = @pSubTipoMov_Id)
END 
ELSE 
BEGIN 
	INSERT INTO venSubTipoMov
	(
		SubTipoMov_Id,
		Empresa_Id,
		venTipoMov,
		Descripcion,
		MueveStock,
		EsVentaContado,
		AdmiteDevolucion,
		ModificaPrecio,
		Reservado,
		GeneraRemito,
		SegmentoRemito_Id,
		NCxDevolucion,
		UsuarioAutorizado,
		AdmiteBoniRenglon,
		Centro1_Id,
		Centro2_Id,
		PideCambio,
		ModFecha,
		ModCondPago,
		ModVendedor,
		ModCobrador,
		PideObervaciones,
		CantidadCopias,
		ModDeposito,
		ModListaPrecios,
		PideFechaEntrega,
		PideObsReng,
		CtaDefecto,
		ModCtaDefecto,
		ModCentro1,
		ModCentro2,
		PideOtrosCargos,
		CtaOtrosCargos,
		PermModCtaOtCar,
		FechaEntregaporRen,
		AdmiteFactsinEntr,
		ModiUniMed,
		AfectaComVenta,
		AfectaComCobra,
		MaxCantItems,
		EsPorDifPrecio,
		AfectaEstadistica,
		ClaveAcceso,
		EsPorDifCambio,
		TipoPrecioForm,
		SoloImpuestos,
		CodigoFormulario,
		BajoCosto,
		Administrativa,
		PideReferencia,
		PideOrdenCompra,
		PideCongelarCambio,
		PideMarcaReserva,
		PermiteSoloEntrega,
		Inactivo,
		Usuario_Id,
		Posteado,
		PidePredial, 
		PideCodProd, 
		PideComExpoMX,
		CodigoFiscal,
		Reporte_Id, 
		EsquemaAuto_Id, 
		PorCotizacion, 
		UsaCartaPorte
		
	)
	VALUES 
	(
		@pSubTipoMov_Id,
		@pEmpresa_Id,
		@pvenTipoMov,
		@pDescripcion,
		@pMueveStock,
		@pEsVentaContado,
		@pAdmiteDevolucion,
		@pModificaPrecio,
		@pReservado,
		@pGeneraRemito,
		dbo.FuncFKgenSegmentos(@pSegmentoRemito_Id),
		@pNCxDevolucion,
		dbo.FuncFKgenUsuarios(@pUsuarioAutorizado),
		@pAdmiteBoniRenglon,
		dbo.FuncFKconCentro1(@pCentro1_Id),
		dbo.FuncFKconCentro2(@pCentro2_Id),
		@pPideCambio,
		@pModFecha,
		@pModCondPago,
		@pModVendedor,
		@pModCobrador,
		@pPideObervaciones,
		@pCantidadCopias,
		@pModDeposito,
		@pModListaPrecios,
		@pPideFechaEntrega,
		@pPideObsReng,
		dbo.FuncFKconCuentas(@pCtaDefecto),
		@pModCtaDefecto,
		@pModCentro1,
		@pModCentro2,
		@pPideOtrosCargos,
		dbo.FuncFKconCuentas(@pCtaOtrosCargos),
		@pPermModCtaOtCar,
		@pFechaEntregaporRen,
		@pAdmiteFactsinEntr,
		@pModiUniMed,
		@pAfectaComVenta,
		@pAfectaComCobra,
		@pMaxCantItems,
		@pEsPorDifPrecio,
		@pAfectaEstadistica,
		@pClaveAcceso,
		@pEsPorDifCambio,
		@pTipoPrecioForm,
		@pSoloImpuestos,
		@pCodigoFormulario,
		@pBajoCosto,
		@pAdministrativa,
		@pPideReferencia,
		@pPideOrdenCompra,
		@pPideCongelarCambio,
		@pPideMarcaReserva,
		@pPermiteSoloEntrega,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado, 
		@pPidePredial, 
		@pPideCodProd, 
		@pPideComExpoMX, 
		@pCodigoFiscal,
		dbo.FuncFKgenReportes(@pReporte_Id), 
		dbo.FuncfkvenEsquemaAuto(@pEsquemaAuto_Id), 
		@pPorCotizacion, 
		@pUsaCartaPorte
		)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE venSubTipoMovDatos
GO
CREATE PROCEDURE venSubTipoMovDatos
(
@pSubTipoMov_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT venSubTipoMov.venSubTipoMov, venSubTipoMov.SubTipoMov_Id, venSubTipoMov.SubTipoMov_Id as SubTipoMov_Id_Nueva, venSubTipoMov.Empresa_Id, 
	Cast( Case When venSubTipoMov.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas, venTipoMov.Signo, venTipoMov.TipoMovResumido,
	venSubTipoMov.venTipoMov, venTipoMov.Descripcion as DescripcionTipoMov, venSubTipoMov.Descripcion, venSubTipoMov.MueveStock,
	venSubTipoMov.EsVentaContado, venSubTipoMov.AdmiteDevolucion, venSubTipoMov.ModificaPrecio, venSubTipoMov.Reservado,
	venSubTipoMov.GeneraRemito, genSegmentos.Segmento_Id SegmentoRemito_Id, genSegmentos.Descripcion as DescripcionSegmentos, 
	venSubTipoMov.NCxDevolucion, genUsuarios.Usuario_Id UsuarioAutorizado, genUsuarios.Apellido_y_Nombres as DescripcionUsuarioAutorizado, 
	venSubTipoMov.AdmiteBoniRenglon, conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, 
	conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, venSubTipoMov.PideCambio,
	venSubTipoMov.ModFecha, venSubTipoMov.ModCondPago, venSubTipoMov.ModVendedor, venSubTipoMov.ModCobrador,
	venSubTipoMov.PideObervaciones, venSubTipoMov.CantidadCopias, venSubTipoMov.ModDeposito, venSubTipoMov.ModListaPrecios,
	venSubTipoMov.PideFechaEntrega, venSubTipoMov.PideObsReng, conCuentas.Cuenta_Id CtaDefecto, conCuentas.Descripcion as DescripcionCtaDefecto,
	venSubTipoMov.ModCtaDefecto, venSubTipoMov.ModCentro1, venSubTipoMov.ModCentro2, venSubTipoMov.PideOtrosCargos,
	conCuentas2.Cuenta_Id CtaOtrosCargos, conCuentas2.Descripcion as DescripcionCtaOtrosCargos, 
	venSubTipoMov.PermModCtaOtCar, venSubTipoMov.FechaEntregaporRen,
	venSubTipoMov.AdmiteFactsinEntr, venSubTipoMov.ModiUniMed, venSubTipoMov.AfectaComVenta, venSubTipoMov.AfectaComCobra,
	venSubTipoMov.MaxCantItems, venSubTipoMov.EsPorDifPrecio, venSubTipoMov.AfectaEstadistica, venSubTipoMov.ClaveAcceso,
	venSubTipoMov.EsPorDifCambio, venSubTipoMov.TipoPrecioForm, venSubTipoMov.SoloImpuestos, venSubTipoMov.CodigoFormulario,
	venSubTipoMov.BajoCosto, venSubTipoMov.Administrativa, venSubTipoMov.PideReferencia, venSubTipoMov.PideOrdenCompra,
	venSubTipoMov.PideCongelarCambio, PideMarcaReserva, venSubTipoMov.PermiteSoloEntrega,
	venSubTipoMov.Inactivo, genUsuarios2.Usuario_Id, genUsuarios2.Apellido_y_Nombres as DescripcionUsuario, venSubTipoMov.Posteado, 
	venSubTipoMov.PidePredial , venSubTipoMov.PideCodProd, venSubTipoMov.PideComExpoMX, venSubTipoMov.CodigoFiscal,
	genReportes.Reporte_Id, genReportes.Titulo as DescripcionReporte, venEsquemaAuto.EsquemaAuto_Id, 
	venEsquemaAuto.Descripcion as DescripcionEsquemaAuto, venSubTipoMov.PorCotizacion, venSubTipoMov.UsaCartaPorte
FROM venSubTipoMov 
LEFT JOIN venTipoMov  ON (venTipoMov.venTipoMov = venSubTipoMov.venTipoMov)
LEFT JOIN genSegmentos  ON (genSegmentos.genSegmentos = venSubTipoMov.SegmentoRemito_Id)
LEFT JOIN genUsuarios  ON (genUsuarios.genUsuarios = venSubTipoMov.UsuarioAutorizado)
LEFT JOIN conCentro1  ON (conCentro1.conCentro1 = venSubTipoMov.Centro1_Id)
LEFT JOIN conCentro2  ON (conCentro2.conCentro2 = venSubTipoMov.Centro2_Id)
LEFT JOIN conCuentas  ON (conCuentas.conCuentas = venSubTipoMov.CtaDefecto)
LEFT JOIN conCuentas conCuentas2 ON (conCuentas2.conCuentas = venSubTipoMov.CtaOtrosCargos)
INNER JOIN genUsuarios genUsuarios2 ON (genUsuarios2.genUsuarios = venSubTipoMov.Usuario_Id)
left join genReportes on venSubTipoMov.Reporte_Id=genReportes.genReportes
left join venEsquemaAuto ON  venEsquemaAuto.venEsquemaAuto = venSubTipoMov.EsquemaAuto_Id
WHERE (SubTipoMov_Id = @pSubTipoMov_Id)

Declare @pidentity bigint= dbo.FuncFKvenSubTipoMov(@pSubTipoMov_Id)
Exec genAtributosGeneralesIdentityDatos @pidentity, 'venSubTipoMov'

exec venSTMAfipDatos @pIdentity

RETURN @@Error 

GO


DROP PROCEDURE venSubTipoMovEliminar
GO
CREATE PROCEDURE venSubTipoMovEliminar
(
@pSubTipoMov_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venSubTipoMov 
WHERE (SubTipoMov_Id = @pSubTipoMov_Id)
 
RETURN @@Error 

GO

DROP FUNCTION FuncFKvenSubTipoMov
GO

CREATE FUNCTION FuncFKvenSubTipoMov
(
@pSubTipoMov_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = venSubTipoMov FROM venSubTipoMov WHERE 
	SubTipoMov_Id = @pSubTipoMov_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\ventasCanjeNotas.sql*/
-- ventasCanjeNotasDatos '0001','20180501','20180531',' ','ZZZZ', 1
DROP PROCEDURE ventasCanjeNotasDatos
GO
CREATE PROCEDURE ventasCanjeNotasDatos
(
 @Sucursal VarChar(25),
 @FechaDesde DateTime, 
 @FechaHasta DateTime, 
 @ClienteDesde VarChar(15),
 @ClienteHasta VarChar(15),
 @Empresa Int
)
as
SET NOCOUNT ON 

select @Sucursal as SucursalEmpr, @FechaDesde as FechaDesde, @FechaHasta as FechaHasta, 
	@ClienteDesde as ClienteDesde, @ClienteHasta as ClienteHasta,
	Convert(VarChar(15), ' ') as Cliente_Id, Convert(int, 1) as Sucursal, 
	' ' as CondFiscal_Id, 'P01' AS UsoCfdi, '01' AS FormaPago, Cast(1 as Bit) PorNota, 
	Cast(0 as Numeric(18,2)) as Total, ' ' as CFVenta_Id, 
	dbo.FechaActual() as Fecha, 
		' ' as Segmento_Id, 0 as Segmento1N, 0 as Segmento2N, 0 as Segmento3N, 0 as Segmento4N,
		' ' as Segmento1C, ' ' as Segmento2C, ' ' as Segmento3C, ' ' as Segmento4C, 
		' ' ArchivoPDF, ' ' ArchivoXML


SELECT genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, genAsiSegmentos.Segmento1C, 
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, 
	venMovimientos.venMovimientos, 
	dbo.Segmento( genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoStr , 
	conAsientos.Fecha, 
	venMovimientos.Importe, venMovimientos.Saldo,
	venMovimientos.Importe- isnull(sum(venMovImpuestos.Importe),0)  as SubTotal, 
	isnull(sum(venMovImpuestos.Importe),0) as Impuestos
From venMovimientos INNER JOIN genAsiSegmentos ON
	venMovimientos.venMovimientos =  genAsiSegmentos.Asiento_Id 
	INNER JOIN genSegmentos ON
	genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	INNER JOIN conAsientos ON
	conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
	INNER JOIN genSucursalesEmpr ON
	genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
	inner join venSubTipoMov ON
	venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
	INNER JOIN venCondFiscal ON
	venCondFiscal.venCondFiscal = venMovimientos.CondFisc_Id
	INNER JOIN venClientes ON
	venClientes.genEntidades = venMovimientos.Cliente_Id
	LEFT JOIN (venMovImpuestos inner join venImpuestos ON
	venMovImpuestos.Impuesto_Id = venImpuestos.venImpuestos)  ON
	venMovImpuestos.venMovimientos = venMovimientos.venMovimientos

	WHERE
		1 = 2
group by genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, genAsiSegmentos.Segmento1C, 
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, 
	venMovimientos.venMovimientos, 	conAsientos.Fecha, 
	venMovimientos.Importe, venMovimientos.Saldo, genAsiSegmentos.Segmento_Id
			

GO

-- ventasCanjeNotasAgregarDatos '0001','20180501','20180531',' ','ZZZZ', 1
DROP PROCEDURE ventasCanjeNotasAgregarDatos
GO
CREATE PROCEDURE ventasCanjeNotasAgregarDatos
(
 @Sucursal VarChar(25),
 @FechaDesde DateTime, 
 @FechaHasta DateTime, 
 @ClienteDesde VarChar(15),
 @ClienteHasta VarChar(15),
 @Empresa Int
)
as
SET NOCOUNT ON 

select @Sucursal as SucursalEmpr, @FechaDesde as FechaDesde, @FechaHasta as FechaHasta, 
	@ClienteDesde as ClienteDesde, @ClienteHasta as ClienteHasta,
	Convert(VarChar(15), ' ') as Cliente_Id, Convert(int, 1) as Sucursal

SELECT genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, genAsiSegmentos.Segmento1C, 
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, 
	venMovimientos.venMovimientos, 
	dbo.Segmento( genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoStr , 
	conAsientos.Fecha, 
	venMovimientos.Importe, venMovimientos.Saldo,
	venMovimientos.Importe- isnull(sum(venMovImpuestos.Importe),0)  as SubTotal, 
	isnull(sum(venMovImpuestos.Importe),0) as Impuestos
From venMovimientos INNER JOIN genAsiSegmentos ON
	venMovimientos.venMovimientos =  genAsiSegmentos.Asiento_Id 
	INNER JOIN genSegmentos ON
	genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	INNER JOIN conAsientos ON
	conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
	INNER JOIN genSucursalesEmpr ON
	genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
	inner join venSubTipoMov ON
	venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
	INNER JOIN venCondFiscal ON
	venCondFiscal.venCondFiscal = venMovimientos.CondFisc_Id
	INNER JOIN venClientes ON
	venClientes.genEntidades = venMovimientos.Cliente_Id
	LEFT JOIN (venMovImpuestos inner join venImpuestos ON
	venMovImpuestos.Impuesto_Id = venImpuestos.venImpuestos)  ON
	venMovImpuestos.venMovimientos = venMovimientos.venMovimientos

	WHERE
		conAsientos.Anulado = 0 AND 
		conAsientos.Empresa_Id = @Empresa and
		conAsientos.Fecha BETWEEN @FechaDesde and @FechaHasta and
		(genSucursalesEmpr.Sucursal = @Sucursal or @Sucursal = ' ') and 
		venMovimientos.venTipoMov = 'F' and
		--venSubTipoMov.MueveStock = 1 AND 
		venCondFiscal.FacturaElectronica = 0 and 
		venClientes.Cliente_Id BETWEEN @ClienteDesde and @ClienteHasta and
		NOT EXISTS(SELECT 1 FROM venCanjeNotas inner join conAsientos ON
			venCanjeNotas.venMovimientosFC = conAsientos.conAsientos
			where
			venCanjeNotas.venMovimientos = venMovimientos.venMovimientos aND
			conAsientos.Anulado = 0)

group by genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, genAsiSegmentos.Segmento1C, 
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, 
	venMovimientos.venMovimientos, 	conAsientos.Fecha, 
	venMovimientos.Importe, venMovimientos.Saldo, genAsiSegmentos.Segmento_Id
			
GO
--exec ventasCanjeNotaAgregarDatos @pEmpresa_Id=1,@pSegmento_Id='FC',@pSegmento1N=244858,@pSegmento2N=0,@pSegmento3N=0,@pSegmento4N=0,@pSegmento1C='F',@pSegmento2C='0004',@pSegmento3C='N',@pSegmento4C=''
DROP PROCEDURE ventasCanjeNotaAgregarDatos
GO
CREATE PROCEDURE ventasCanjeNotaAgregarDatos
(
@pEmpresa_Id int, 
@pSegmento_Id VarChar(10), 
@pSegmento1N int,
@pSegmento2N int,
@pSegmento3N int,
@pSegmento4N int,
@pSegmento1C VarChar(20),
@pSegmento2C VarChar(20),
@pSegmento3C VarChar(20),
@pSegmento4C VarChar(20)
)
as
SET NOCOUNT ON 

SELECT genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, genAsiSegmentos.Segmento1C, 
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, 
	venMovimientos.venMovimientos, 
	dbo.Segmento( genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C, 
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N) as SegmentoStr , 
	conAsientos.Fecha, 
	venMovimientos.Importe, venMovimientos.Saldo,
	venMovimientos.Importe- isnull(sum(venMovImpuestos.Importe),0)  as SubTotal, 
	isnull(sum(venMovImpuestos.Importe),0) as Impuestos
From venMovimientos INNER JOIN genAsiSegmentos ON
	venMovimientos.venMovimientos =  genAsiSegmentos.Asiento_Id 
	INNER JOIN genSegmentos ON
	genSegmentos.genSegmentos = genAsiSegmentos.Segmento_Id
	INNER JOIN conAsientos ON
	conAsientos.conAsientos = genAsiSegmentos.Asiento_Id
	INNER JOIN genSucursalesEmpr ON
	genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
	inner join venSubTipoMov ON
	venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
	INNER JOIN venCondFiscal ON
	venCondFiscal.venCondFiscal = venMovimientos.CondFisc_Id
	LEFT JOIN (venMovImpuestos inner join venImpuestos ON
	venMovImpuestos.Impuesto_Id = venImpuestos.venImpuestos)  ON
	venMovImpuestos.venMovimientos = venMovimientos.venMovimientos

	WHERE
		conAsientos.Anulado = 0 AND 
		venMovimientos.venTipoMov = 'F' and
		-- venSubTipoMov.MueveStock = 1 AND 
		genAsiSegmentos.Empresa_Id = @pEmpresa_Id and
		genSegmentos.Segmento_Id =@pSegmento_Id and
		genAsiSegmentos.Segmento1N = @pSegmento1N and
		genAsiSegmentos.Segmento2N = @pSegmento2N and
		genAsiSegmentos.Segmento3N = @pSegmento3N and
		genAsiSegmentos.Segmento4N = @pSegmento4N and
		genAsiSegmentos.Segmento1C = @pSegmento1C and
		genAsiSegmentos.Segmento2C = @pSegmento2C and
		genAsiSegmentos.Segmento3C = @pSegmento3C and
		genAsiSegmentos.Segmento4C = @pSegmento4C and
		venCondFiscal.FacturaElectronica = 0 AND
		NOT EXISTS(SELECT 1 FROM venCanjeNotas inner join conAsientos ON
			venCanjeNotas.venMovimientosFC = conAsientos.conAsientos
			where
			venCanjeNotas.venMovimientos = venMovimientos.venMovimientos aND
			conAsientos.Anulado = 0)
group by genSegmentos.Segmento_Id, genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,
	genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N, genAsiSegmentos.Segmento1C, 
	genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C, 
	venMovimientos.venMovimientos, 	conAsientos.Fecha, 
	venMovimientos.Importe, venMovimientos.Saldo, genAsiSegmentos.Segmento_Id
			
GO





Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\VentasCerrar.sql*/
--- VentasCerrar 1
DROP Procedure VentasCerrar
GO
CREATE Procedure VentasCerrar
(
@Empresa_Id Int
)
as

SELECT FechaCierreVentas as UltimoCierre, 
conPeriodos.Fecha_Hasta as ProximoCierre
FROM genEmpresas 
INNER JOIN conPeriodos on
genEmpresas.genEmpresas = conPeriodos.Empresa_Id and 
DATEADD(dd,1,FechaCierreVentas) between conPeriodos.Fecha_Desde And conPeriodos.Fecha_Hasta
Where
	genEmpresas.genEmpresas = @Empresa_Id

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\ventasIndVentas.sql*/
-- EXEC ventasIndVentasDatos '20200801','20200831',' ','ZZZ',' ','ZZZ',' ','ZZZ',' ','ZZ',' ','ZZ',1,' ','ZZ'
-- EXEC venGraTortaClienteDatos '20200801','20200831',' ','ZZZ',' ','ZZZ',1,' ','ZZZ'
-- EXEC venGraTortaFamiliaDatos '20200801','20200831',' ','ZZZ',' ','ZZZ',1,' ','ZZZ'
-- EXEC venGraTortaProductoDatos '20200801','20200831',' ','ZZZ',' ','zzz',' ','zzz',1,' ','ZZZ'
DROP PROCEDURE ventasIndVentasDatos
GO

CREATE PROCEDURE ventasIndVentasDatos
(

	@FechaDesde DateTime, 
	@FechaHasta DateTime, 
	@VendedorDesde VarChar(5),
	@VendedorHasta VarChar(5),
	@ClienteDesde VarChar(15),
	@ClienteHasta VarChar(15),
	@FamiliaDesde VarChar(15),
	@FamiliaHasta VarChar(15),
	@GrupoDesde VarChar(15),
	@GrupoHasta VarChar(15),
	@ProductoDesde VarChar(25),
	@ProductoHasta VarChar(25),
	@Empresa_Id Int,
	@SucursalDesde varchar(4),
	@SucursalHasta varchar(4)
)
as
SELECT @FechaDesde as FechaDesde, @FechaHasta as FechaHasta, 
	@VendedorDesde as VendedorDesde, @VendedorHasta VendedorHasta,
	@ClienteDesde ClienteDesde,  @ClienteHasta ClienteHasta,
	@FamiliaDesde FamiliaDesde, @FamiliaHasta FamiliaHasta,
	@GrupoDesde GrupoDesde, @GrupoHasta GrupoHasta,
	@ProductoDesde ProductoDesde, @ProductoHasta ProductoHasta,
	@Empresa_Id  Empresa_Id , CONVERT(Numeric(18,2),0) as  VentaTotal, 
	CONVERT(Numeric(18,2),0) as  VentaMismoPerAnioAnt,
	CONVERT(Numeric(18,2),0) as  VentaPerAnterior,
	@SucursalDesde SucursalDesde,@SucursalHasta SucursalHasta

SELECT 
Convert(Numeric(18,2),isnull(SUM(MONTO),0)) AS Monto
from (
SELECT SUM(venMovConStockCr.CantFacturada *venMovConStockCr.PrecioVenta * 
	conAsientos.Cambio * venTipoMov.Signo) AS Monto

from venMovimientos 
	INNER JOIN venMovConStockCr on venMovimientos.venMovimientos = venMovConStockCr.venMovimientos
	INNER JOIN conAsientos ON conAsientos.conAsientos = venMovimientos.venMovimientos
	INNER JOIN venTipoMov ON venTipoMov.venTipoMov = venMovimientos.venTipoMov
	INNER JOIN venSubTipoMov ON venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
	INNER JOIN stkProductos ON stkProductos.stkProductos = venMovConStockCr.Producto_Id
	LEFT JOIN stkFamilias ON stkFamilias.stkFamilias = stkProductos.Familia_Id
	LEFT JOIN stkGrupos ON stkGrupos.stkGrupos = stkProductos.Grupo_Id	
	INNER JOIN venVendedores ON  venVendedores.venVendedores  = venMovimientos.Vendedor_Id
	INNER JOIN venClientes ON venClientes.genEntidades = venMovimientos.Cliente_Id
	INNER Join genSucursalesEmpr on genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
WHERE	
	venSubTipoMov.AfectaEstadistica = 1 and
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Anulado = 0 and
	conAsientos.Posteado = 1 AND 
	conAsientos.Fecha BETWEEN @FechaDesde and @FechaHasta and 
	venVendedores.Vendedor_Id Between @VendedorDesde and @VendedorHasta and 
	venClientes.Cliente_Id Between @ClienteDesde and @ClienteHasta and 
	ISNULL(stkFamilias.Familia_Id,' ') Between @FamiliaDesde and @FamiliaHasta and 
	genSucursalesEmpr.Sucursal  Between @SucursalDesde and @SucursalHasta and 
	ISNULL(stkGrupos.Grupo_Id,' ') Between @GrupoDesde and @GrupoHasta and 
	stkProductos.Producto_Id  Between @ProductoDesde and @ProductoHasta
Union all
SELECT SUM(venMovDetalle.Cantidad  *  venMovDetalle.ImporteUnitario *
	conAsientos.Cambio * venTipoMov.Signo) as Monto

from venMovimientos 
	INNER JOIN venMovDetalle on venMovimientos.venMovimientos = venMovDetalle.venMovimientos
	INNER JOIN conAsientos ON conAsientos.conAsientos = venMovimientos.venMovimientos
	INNER JOIN venTipoMov ON venTipoMov.venTipoMov = venMovimientos.venTipoMov
	INNER JOIN venSubTipoMov ON venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
	INNER JOIN venVendedores ON  venVendedores.venVendedores  = venMovimientos.Vendedor_Id
	INNER JOIN venClientes ON venClientes.genEntidades = venMovimientos.Cliente_Id
	INNER Join genSucursalesEmpr on genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
WHERE	
	venSubTipoMov.AfectaEstadistica = 1 and
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Anulado = 0 and
	conAsientos.Posteado = 1 AND 
	conAsientos.Fecha BETWEEN @FechaDesde and @FechaHasta and
	venVendedores.Vendedor_Id Between @VendedorDesde and @VendedorHasta and 
	venClientes.Cliente_Id Between @ClienteDesde and @ClienteHasta and 
	genSucursalesEmpr.Sucursal  Between @SucursalDesde and @SucursalHasta and 
	@FamiliaDesde = ' ' and 
	@GrupoDesde = ' ' and 
	@ProductoDesde = ' ') as XXXX

	
GO

DROP PROCEDURE venGraTortaVendedorDatos
go
CREATE PROCEDURE venGraTortaVendedorDatos
(
	
	@FechaDesde DateTime, 
	@FechaHasta DateTime, 
	@VendedorDesde VarChar(5),
	@VendedorHasta VarChar(5),
	@Empresa_Id Int,
	@SucursalDesde varchar(4),
	@SucursalHasta varchar(4)
)
as

SELECT @FechaDesde as FechaDesde, @FechaHasta as FechaHasta, 
	@VendedorDesde as VendedorDesde, @VendedorHasta VendedorHasta,
	@Empresa_Id  Empresa_Id,	@SucursalDesde SucursalDesde,@SucursalHasta SucursalHasta

SELECT RTRIM(left(Nombre,20)) as Serie, Vendedor_Id,
Convert(Numeric(18,2),isnull(SUM(MONTO),0)) AS Monto,Nombre
from (
SELECT venVendedores.Vendedor_Id, venVendedores.Nombre,
SUM(venMovConStockCr.CantFacturada *venMovConStockCr.PrecioVenta * 
	conAsientos.Cambio * venTipoMov.Signo) AS Monto

from venMovimientos 
	INNER JOIN venMovConStockCr on venMovimientos.venMovimientos = venMovConStockCr.venMovimientos
	INNER JOIN conAsientos ON conAsientos.conAsientos = venMovimientos.venMovimientos
	INNER JOIN venTipoMov ON venTipoMov.venTipoMov = venMovimientos.venTipoMov
	INNER JOIN venSubTipoMov ON venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
	INNER JOIN stkProductos ON stkProductos.stkProductos = venMovConStockCr.Producto_Id
	LEFT JOIN stkFamilias ON stkFamilias.stkFamilias = stkProductos.Familia_Id
	LEFT JOIN stkGrupos ON stkGrupos.stkGrupos = stkProductos.Grupo_Id
	INNER JOIN venVendedores ON  venVendedores.venVendedores  = venMovimientos.Vendedor_Id
	INNER JOIN venClientes ON venClientes.genEntidades = venMovimientos.Cliente_Id
	INNER Join genSucursalesEmpr on genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
WHERE	
	venSubTipoMov.AfectaEstadistica = 1 and
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Anulado = 0 and
	conAsientos.Posteado = 1 AND 
	conAsientos.Fecha BETWEEN @FechaDesde and @FechaHasta and
	venVendedores.Vendedor_Id Between @VendedorDesde and @VendedorHasta and 
	genSucursalesEmpr.Sucursal  Between @SucursalDesde and @SucursalHasta

GROUP BY venVendedores.Vendedor_Id, venVendedores.Nombre
Union all
SELECT venVendedores.Vendedor_Id,
venVendedores.Nombre, SUM(venMovDetalle.Cantidad  *  venMovDetalle.ImporteUnitario *
	conAsientos.Cambio * venTipoMov.Signo) as Monto

from venMovimientos 
	INNER JOIN venMovDetalle on venMovimientos.venMovimientos = venMovDetalle.venMovimientos
	INNER JOIN conAsientos ON conAsientos.conAsientos = venMovimientos.venMovimientos
	INNER JOIN venTipoMov ON venTipoMov.venTipoMov = venMovimientos.venTipoMov
	INNER JOIN venSubTipoMov ON venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
	INNER JOIN venVendedores ON  venVendedores.venVendedores  = venMovimientos.Vendedor_Id
	INNER JOIN venClientes ON venClientes.genEntidades = venMovimientos.Cliente_Id
	INNER Join genSucursalesEmpr on genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
WHERE	
	venSubTipoMov.AfectaEstadistica = 1 and
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Anulado = 0 and
	conAsientos.Posteado = 1 AND 
	conAsientos.Fecha BETWEEN @FechaDesde and @FechaHasta and
	genSucursalesEmpr.Sucursal  Between @SucursalDesde and @SucursalHasta and 
	venVendedores.Vendedor_Id Between @VendedorDesde and @VendedorHasta 
	GROUP BY venVendedores.Nombre, venVendedores.Vendedor_Id
) as XXXX
GROUP BY Nombre, Vendedor_Id ORDER BY 3 DESC
GO

DROP PROCEDURE venGraTortaClienteDatos
go
CREATE PROCEDURE venGraTortaClienteDatos
(
	
	@FechaDesde DateTime, 
	@FechaHasta DateTime, 
	@ClienteDesde VarChar(15),
	@ClienteHasta VarChar(15),
	@VendedorDesde VarChar(5),
	@VendedorHasta VarChar(5),
	@Empresa_Id Int,
	@SucursalDesde varchar(4),
	@SucursalHasta varchar(4)
)
as

SELECT @FechaDesde as FechaDesde, @FechaHasta as FechaHasta, 
	@ClienteDesde as ClienteDesde, @ClienteHasta ClienteHasta,
	@Empresa_Id  Empresa_Id, @VendedorDesde VendedorDesde,
	@VendedorHasta VendedorHasta,
	@SucursalDesde SucursalDesde,@SucursalHasta SucursalHasta

SELECT RTRIM(LEFT(RazonSocial,20)) as Serie, 
Convert(Numeric(18,2),isnull(SUM(MONTO),0)) AS Monto, Cliente_Id, 
RazonSocial 
from (
SELECT venClientes.Cliente_Id,
venClientes.RazonSocial,
SUM(venMovConStockCr.CantFacturada *venMovConStockCr.PrecioVenta * 
	conAsientos.Cambio * venTipoMov.Signo) AS Monto

from venMovimientos 
	INNER JOIN venMovConStockCr on venMovimientos.venMovimientos = venMovConStockCr.venMovimientos
	INNER JOIN conAsientos ON conAsientos.conAsientos = venMovimientos.venMovimientos
	INNER JOIN venTipoMov ON venTipoMov.venTipoMov = venMovimientos.venTipoMov
	INNER JOIN venSubTipoMov ON venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
	INNER JOIN stkProductos ON stkProductos.stkProductos = venMovConStockCr.Producto_Id
	LEFT JOIN stkFamilias ON stkFamilias.stkFamilias = stkProductos.Familia_Id
	LEFT JOIN stkGrupos ON stkGrupos.stkGrupos = stkProductos.Grupo_Id
	INNER JOIN venVendedores ON  venVendedores.venVendedores  = venMovimientos.Vendedor_Id
	INNER JOIN venClientes ON venClientes.genEntidades = venMovimientos.Cliente_Id
	INNER Join genSucursalesEmpr on genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
WHERE	
	venSubTipoMov.AfectaEstadistica = 1 and
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Anulado = 0 and
	conAsientos.Posteado = 1 AND 
	conAsientos.Fecha BETWEEN @FechaDesde and @FechaHasta and
	venClientes.Cliente_Id Between @ClienteDesde and @ClienteHasta  and 
	venVendedores.Vendedor_Id  Between @VendedorDesde and @VendedorHasta and 
	genSucursalesEmpr.Sucursal  Between @SucursalDesde and @SucursalHasta 

GROUP BY venClientes.Cliente_Id, venClientes.RazonSocial
Union all
SELECT venClientes.Cliente_Id,
venClientes.RazonSocial, SUM(venMovDetalle.Cantidad  *  venMovDetalle.ImporteUnitario *
	conAsientos.Cambio * venTipoMov.Signo) as Monto

from venMovimientos 
	INNER JOIN venMovDetalle on venMovimientos.venMovimientos = venMovDetalle.venMovimientos
	INNER JOIN conAsientos ON conAsientos.conAsientos = venMovimientos.venMovimientos
	INNER JOIN venTipoMov ON venTipoMov.venTipoMov = venMovimientos.venTipoMov
	INNER JOIN venSubTipoMov ON venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
	INNER JOIN venVendedores ON  venVendedores.venVendedores  = venMovimientos.Vendedor_Id
	INNER JOIN venClientes ON venClientes.genEntidades = venMovimientos.Cliente_Id
		INNER Join genSucursalesEmpr on genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
WHERE	
	venSubTipoMov.AfectaEstadistica = 1 and
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Anulado = 0 and
	conAsientos.Posteado = 1 AND 
	conAsientos.Fecha BETWEEN @FechaDesde and @FechaHasta and
	venClientes.Cliente_Id Between @ClienteDesde and @ClienteHasta and
	genSucursalesEmpr.Sucursal  Between @SucursalDesde and @SucursalHasta  and
	venVendedores.Vendedor_Id  Between @VendedorDesde and @VendedorHasta
GROUP BY venClientes.Cliente_Id, venClientes.RazonSocial
) as XXXX
GROUP BY RazonSocial, Cliente_Id ORDER BY 2 DESC

GO


DROP PROCEDURE venGraTortaFamiliaDatos
go
CREATE PROCEDURE venGraTortaFamiliaDatos
(
	
	@FechaDesde DateTime, 
	@FechaHasta DateTime, 
	@FamiliaDesde VarChar(5),
	@FamiliaHasta VarChar(5),
	@ClienteDesde VarChar(15),
	@ClienteHasta VarChar(15),
	@Empresa_Id Int,
	@SucursalDesde varchar(4),
	@SucursalHasta varchar(4)
)
as

SELECT @FechaDesde as FechaDesde, @FechaHasta as FechaHasta, 
	@FamiliaDesde as FamiliaDesde, @FamiliaHasta FamiliaHasta,
	@ClienteDesde ClienteDesde, @ClienteHasta  ClienteHasta,
	@Empresa_Id  Empresa_Id ,@SucursalDesde SucursalDesde,@SucursalHasta SucursalHasta

SELECT RTRIM(LEFT( Descripcion,20)) as Serie, 
Convert(Numeric(18,2),isnull(SUM(MONTO),0)) AS Monto, Familia_Id, Descripcion
from (
SELECT stkFamilias.Familia_Id, stkFamilias.Descripcion,
SUM(venMovConStockCr.CantFacturada *venMovConStockCr.PrecioVenta * 
	conAsientos.Cambio * venTipoMov.Signo) AS Monto
from venMovimientos 
	INNER JOIN venMovConStockCr on venMovimientos.venMovimientos = venMovConStockCr.venMovimientos
	INNER JOIN conAsientos ON conAsientos.conAsientos = venMovimientos.venMovimientos
	INNER JOIN venTipoMov ON venTipoMov.venTipoMov = venMovimientos.venTipoMov
	INNER JOIN venSubTipoMov ON venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
	INNER JOIN stkProductos ON stkProductos.stkProductos = venMovConStockCr.Producto_Id
	LEFT JOIN stkFamilias ON stkFamilias.stkFamilias = stkProductos.Familia_Id
	LEFT JOIN stkGrupos ON stkGrupos.stkGrupos = stkProductos.Grupo_Id
	INNER JOIN venVendedores ON  venVendedores.venVendedores  = venMovimientos.Vendedor_Id
	INNER JOIN venClientes ON venClientes.genEntidades = venMovimientos.Cliente_Id
	INNER Join genSucursalesEmpr on genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
WHERE	
	venSubTipoMov.AfectaEstadistica = 1 and
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Anulado = 0 and
	conAsientos.Posteado = 1 AND 
	conAsientos.Fecha BETWEEN @FechaDesde and @FechaHasta and
	venClientes.Cliente_Id BETWEEN @ClienteDesde AND @ClienteHasta AND 
	isnull(stkFamilias.Familia_Id,' ') BETWEEN @FamiliaDesde AND @FamiliaHasta and
	genSucursalesEmpr.Sucursal  Between @SucursalDesde and @SucursalHasta 
GROUP BY stkFamilias.Familia_Id, stkFamilias.Descripcion
Union all
SELECT ' ' as Familia_Id, 'SIN FAMILIA', SUM(venMovDetalle.Cantidad  *  venMovDetalle.ImporteUnitario *
	conAsientos.Cambio * venTipoMov.Signo) as Monto

from venMovimientos 
	INNER JOIN venMovDetalle on venMovimientos.venMovimientos = venMovDetalle.venMovimientos
	INNER JOIN conAsientos ON conAsientos.conAsientos = venMovimientos.venMovimientos
	INNER JOIN venTipoMov ON venTipoMov.venTipoMov = venMovimientos.venTipoMov
	INNER JOIN venSubTipoMov ON venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
	INNER JOIN venVendedores ON  venVendedores.venVendedores  = venMovimientos.Vendedor_Id
	INNER JOIN venClientes ON venClientes.genEntidades = venMovimientos.Cliente_Id
	INNER Join genSucursalesEmpr on genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
WHERE	
	venSubTipoMov.AfectaEstadistica = 1 and
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Anulado = 0 and
	conAsientos.Posteado = 1 AND 
	conAsientos.Fecha BETWEEN @FechaDesde and @FechaHasta and
	venClientes.Cliente_Id BETWEEN @ClienteDesde AND @ClienteHasta AND 
	@FamiliaDesde = ' ' and
	genSucursalesEmpr.Sucursal  Between @SucursalDesde and @SucursalHasta 
	
) as XXXX
GROUP BY Descripcion, Familia_Id ORDER BY 2 DESC
GO






DROP PROCEDURE venGraTortaGrupoDatos
go
CREATE PROCEDURE venGraTortaGrupoDatos
(
	
	@FechaDesde DateTime, 
	@FechaHasta DateTime, 
	@FamiliaDesde VarChar(15),
	@FamiliaHasta VarChar(15),
	@GrupoDesde VarChar(15),
	@GrupoHasta VarChar(15),
	@Empresa_Id Int,
	@SucursalDesde varchar(4),
	@SucursalHasta varchar(4)
)
as

SELECT @FechaDesde as FechaDesde, @FechaHasta as FechaHasta, 
	@FamiliaDesde as FamiliaDesde, @FamiliaHasta FamiliaHasta,
	@GrupoDesde  as GrupoDesde , @GrupoHasta as GrupoHasta, 
	@Empresa_Id  Empresa_Id,@SucursalDesde SucursalDesde,@SucursalHasta SucursalHasta

SELECT RTRIM(LEFT(Descripcion,20)) as Serie, 
Convert(Numeric(18,2),isnull(SUM(MONTO),0)) AS Monto, Grupo_Id,Descripcion
from (
SELECT stkGrupos.Grupo_Id, stkGrupos.Descripcion,
SUM(venMovConStockCr.CantFacturada *venMovConStockCr.PrecioVenta * 
	conAsientos.Cambio * venTipoMov.Signo) AS Monto
from venMovimientos 
	INNER JOIN venMovConStockCr on venMovimientos.venMovimientos = venMovConStockCr.venMovimientos
	INNER JOIN conAsientos ON conAsientos.conAsientos = venMovimientos.venMovimientos
	INNER JOIN venTipoMov ON venTipoMov.venTipoMov = venMovimientos.venTipoMov
	INNER JOIN venSubTipoMov ON venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
	INNER JOIN stkProductos ON stkProductos.stkProductos = venMovConStockCr.Producto_Id
	LEFT JOIN stkFamilias ON stkFamilias.stkFamilias = stkProductos.Familia_Id
	LEFT JOIN stkGrupos ON stkGrupos.stkGrupos = stkProductos.Grupo_Id
	INNER JOIN venVendedores ON  venVendedores.venVendedores  = venMovimientos.Vendedor_Id
	INNER JOIN venClientes ON venClientes.genEntidades = venMovimientos.Cliente_Id 
	INNER Join genSucursalesEmpr on genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
WHERE	
	venSubTipoMov.AfectaEstadistica = 1 and
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Anulado = 0 and
	conAsientos.Posteado = 1 AND 
	conAsientos.Fecha BETWEEN @FechaDesde and @FechaHasta and
	isnull(stkFamilias.Familia_Id,' ') BETWEEN @FamiliaDesde AND @FamiliaHasta and 
	ISNULL(stkGrupos.Grupo_Id,' ') Between @GrupoDesde and @GrupoHasta and
		genSucursalesEmpr.Sucursal  Between @SucursalDesde and @SucursalHasta 
GROUP BY stkGrupos.Grupo_Id, stkGrupos.Descripcion
Union all
SELECT ' ' as Grupo_Id, 'NO CODIFICADOS', SUM(venMovDetalle.Cantidad  *  venMovDetalle.ImporteUnitario *
	conAsientos.Cambio * venTipoMov.Signo) as Monto

from venMovimientos 
	INNER JOIN venMovDetalle on venMovimientos.venMovimientos = venMovDetalle.venMovimientos
	INNER JOIN conAsientos ON conAsientos.conAsientos = venMovimientos.venMovimientos
	INNER JOIN venTipoMov ON venTipoMov.venTipoMov = venMovimientos.venTipoMov
	INNER JOIN venSubTipoMov ON venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
	INNER JOIN venVendedores ON  venVendedores.venVendedores  = venMovimientos.Vendedor_Id
	INNER JOIN venClientes ON venClientes.genEntidades = venMovimientos.Cliente_Id 
	INNER Join genSucursalesEmpr on genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
WHERE	
	venSubTipoMov.AfectaEstadistica = 1 and
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Anulado = 0 and
	conAsientos.Posteado = 1 AND 
	conAsientos.Fecha BETWEEN @FechaDesde and @FechaHasta and
	@FamiliaDesde = ' ' and @GrupoDesde = ' ' and
		genSucursalesEmpr.Sucursal  Between @SucursalDesde and @SucursalHasta 
	
) as XXXX
GROUP BY Descripcion, Grupo_Id ORDER BY 2 DESC
GO

DROP PROCEDURE venGraTortaProductoDatos
go
CREATE PROCEDURE venGraTortaProductoDatos
(
	
	@FechaDesde DateTime, 
	@FechaHasta DateTime, 
	@FamiliaDesde VarChar(15),
	@FamiliaHasta VarChar(15),
	@GrupoDesde VarChar(15),
	@GrupoHasta VarChar(15),
	@ProductoDesde VarChar(25),
	@ProductoHasta VarChar(25),
	@Empresa_Id Int,
	@SucursalDesde varchar(4),
	@SucursalHasta varchar(4)
)
as

SELECT @FechaDesde as FechaDesde, @FechaHasta as FechaHasta, 
	@FamiliaDesde as FamiliaDesde, @FamiliaHasta FamiliaHasta,
	@GrupoDesde  as GrupoDesde , @GrupoHasta as GrupoHasta, 
	@ProductoDesde as ProductoDesde, @ProductoHasta AS ProductoHasta,
	@Empresa_Id  Empresa_Id,@SucursalDesde SucursalDesde,@SucursalHasta SucursalHasta

SELECT RTRIM(LEFT(Descripcion,20)) as Serie, 
Convert(Numeric(18,2),isnull(SUM(MONTO),0)) AS Monto, Producto_Id,Descripcion
from (
SELECT stkProductos.Producto_Id, stkProductos.Descripcion,
SUM(venMovConStockCr.CantFacturada *venMovConStockCr.PrecioVenta * 
	conAsientos.Cambio * venTipoMov.Signo) AS Monto
from venMovimientos 
	INNER JOIN venMovConStockCr on venMovimientos.venMovimientos = venMovConStockCr.venMovimientos
	INNER JOIN conAsientos ON conAsientos.conAsientos = venMovimientos.venMovimientos
	INNER JOIN venTipoMov ON venTipoMov.venTipoMov = venMovimientos.venTipoMov
	INNER JOIN venSubTipoMov ON venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
	INNER JOIN stkProductos ON stkProductos.stkProductos = venMovConStockCr.Producto_Id
	LEFT JOIN stkFamilias ON stkFamilias.stkFamilias = stkProductos.Familia_Id
	LEFT JOIN stkGrupos ON stkGrupos.stkGrupos = stkProductos.Grupo_Id
	INNER JOIN venVendedores ON  venVendedores.venVendedores  = venMovimientos.Vendedor_Id
	INNER JOIN venClientes ON venClientes.genEntidades = venMovimientos.Cliente_Id 
	INNER Join genSucursalesEmpr on genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
WHERE	
	venSubTipoMov.AfectaEstadistica = 1 and
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Anulado = 0 and
	conAsientos.Posteado = 1 AND 
	conAsientos.Fecha BETWEEN @FechaDesde and @FechaHasta and
	isnull(stkFamilias.Familia_Id,' ') BETWEEN @FamiliaDesde AND @FamiliaHasta and 
	ISNULL(stkGrupos.Grupo_Id,' ') Between @GrupoDesde and @GrupoHasta and 
	stkProductos.Producto_Id  Between @ProductoDesde and @ProductoHasta and
		genSucursalesEmpr.Sucursal  Between @SucursalDesde and @SucursalHasta 
GROUP BY stkProductos.Producto_Id, stkProductos.Descripcion
Union all
SELECT ' ' as Familia_Id, 'NO CODIFICADOS', SUM(venMovDetalle.Cantidad  *  venMovDetalle.ImporteUnitario *
	conAsientos.Cambio * venTipoMov.Signo) as Monto

from venMovimientos 
	INNER JOIN venMovDetalle on venMovimientos.venMovimientos = venMovDetalle.venMovimientos
	INNER JOIN conAsientos ON conAsientos.conAsientos = venMovimientos.venMovimientos
	INNER JOIN venTipoMov ON venTipoMov.venTipoMov = venMovimientos.venTipoMov
	INNER JOIN venSubTipoMov ON venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
	INNER JOIN venVendedores ON  venVendedores.venVendedores  = venMovimientos.Vendedor_Id
	INNER JOIN venClientes ON venClientes.genEntidades = venMovimientos.Cliente_Id 
	INNER Join genSucursalesEmpr on genSucursalesEmpr.genSucursalesEmpr = conAsientos.Sucursal
WHERE	
	venSubTipoMov.AfectaEstadistica = 1 and
	conAsientos.Empresa_Id = @Empresa_Id and 
	conAsientos.Anulado = 0 and
	conAsientos.Posteado = 1 AND 
	conAsientos.Fecha BETWEEN @FechaDesde and @FechaHasta and
	@FamiliaDesde = ' ' and @GrupoDesde = ' ' and
	genSucursalesEmpr.Sucursal  Between @SucursalDesde and @SucursalHasta 
	
) as XXXX
GROUP BY Descripcion, Producto_Id ORDER BY 2 DESC
GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\Ventas_XmlComprobante.sql*/
-- venCondPago - TipoFiscal
-- genSucursalesEmpr.CodigoPostal
-- conAsientos - Sucursal y genEntidad
-- Tabla venMovimientosMetodoPago
--set transaction isolation level read uncommitted
-- Ventas_XmlComprobante 16, 'F'

DROP PROCEDURE Ventas_XmlComprobante
GO
CREATE PROCEDURE Ventas_XmlComprobante(	
	@Asiento_Id BigInt,
	@TipoPrecio Char(1)
)

as
DECLARE @Empresa_Id INT

SET @Empresa_Id = (Select Empresa_Id from conAsientos Where conAsientos.conAsientos= @Asiento_Id)
-- Comprobante
SELECT '3.3' as Version, conAsientos.conAsientos Asiento_Id, 
	genAsiSegmentos.Segmento1N, genAsiSegmentos.Segmento2N, genAsiSegmentos.Segmento3N, genAsiSegmentos.Segmento4N,
	genAsiSegmentos.Segmento1C,genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
	 conAsientos.Fecha , conAsientos.FechaRegistro ,
	 case when venMovimientos.Importe=0 THEN ' ' ELSE
		ISNULL(venMovimientosMetodoPago.nMetodoPago,' ')  END MetodoPago, 
		ISNULL(venMovimientosFiscal.NoCertificadoPropio,(SELECT cValor FROM genGlobales WHERE NOMBRE_VAR = 'VENNOCERTIFICADO' and Empresa_Id=@Empresa_Id)) AS NoCertificado, 
		convert(VarChar(max),(SELECT mValor FROM genGlobales where Nombre_var = 'GENWSAAPUBLICKEY' and Empresa_Id=@Empresa_Id)) AS Certificado,
		venCondPago.descripcion as CondicionesDePago, 
		venMovimientos.Importe - 
			isnull((SELECT SUM(venMovImpuestos.Importe) from venMovImpuestos 
				WHERE 
				venMovimientos.venMovimientos = venMovImpuestos.venMovimientos),0) as SubTotal,
		Convert(Numeric(18,2) , 0) as Descuento, 		
		genMonedas.CodigoFiscal as Moneda, genMonedas.Descripcion as DescripcionMoneda, 
		genMonedas.Moneda_Id,
		venMovimientos.Importe as Total,
		conAsientos.Cambio as TipoCambio,
		case when venMovimientos.Importe = 0 THEN 'T' ELSE
		case when venTipoMov.Signo = 1 Then 
		'I' ELSE 'E' end END as TipoDeComprobante, 
		ISNULL(venMovimientosMetodoPago.MetodoPago,'99') as  FormaPago, 
		genSucursalesEmpr.CodigoPostal as LugarExpedicion, ' ' Confirmacion, 
		venMovimientos.venMovimientos
from venMovimientos INNER JOIN conAsientos ON
venMovimientos.venMovimientos = conAsientos.conAsientos
inner join genAsiSegmentos ON
genAsiSegmentos.Asiento_Id = conAsientos.conAsientos
LEFT OUTER JOIN  venCondPago ON
venCondPago.venCondPago = venMovimientos.CondPagoCli_id
left OUTER JOIN venMovimientosFiscal ON 
venMovimientos.venMovimientos =  venMovimientosFiscal.venMovimientos 
INNER JOIN genMonedas ON 
genMonedas.genMonedas = conAsientos.Moneda_Id
left JOIN venSubTipoMov ON
venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
INNER JOIN venTipoMov ON
venTipoMov.venTipomov = venMovimientos.venTipomov
left outer JOIN venMovimientosMetodoPago ON
venMovimientos.venMovimientos =  venMovimientosMetodoPago.venMovimientos
LEFT OUTER JOIN genSucursalesEmpr ON
conAsientos.Sucursal = genSucursalesEmpr.genSucursalesEmpr
Where
venMovimientos.venMovimientos = @Asiento_Id


-- CFDI Relacionados
SELECT DISTINCT TipoRelacion FROM venMovimientosCFDIR 
	where 
	venMovimientosCFDIR.venMovimientos =  @Asiento_Id
	

-- CFDI RELACIONADO
SELECT TipoRelacion, venMovimientosFiscal.ClaveFiscal UUID 
FROM venMovimientosCFDIR INNER JOIN venMovimientosFiscal ON
	venMovimientosCFDIR.venMovimientosR = venMovimientosFiscal.venMovimientos
	Where 
	venMovimientosCFDIR.venMovimientos = @Asiento_Id

-- Emisor

SELECT 
genEmpresas.Cuit AS Rfc,
genEmpresas.RazonSocial AS Nombre,
genEmpresas.Regimen AS RegimenFiscal,
Convert(VarChar(max),(select mValor from genGlobales where Nombre_var = 'GENWSAAPRIVATEKEY' and Empresa_Id=@Empresa_Id)) AS EmpPrivateKey,
genEmpresas.Calle,
genEmpresas.NoExterior,
genEmpresas.NoInterior,
genEmpresas.CodColonia Colonia,
genEmpresas.CodLocalidad Localidad,
genEmpresas.CodMunicipio Municipio,
genProvincias.CodFiscal AS Provincia,
genPaises.CodFiscal AS Pais,
genEmpresas.CodigoPostal, 
genEmpresas.CodLocalidad, 
genEmpresas.CodColonia, 
genEmpresas.CodMunicipio
from genEmpresas inner join conAsientos ON 
genEmpresas.genEmpresas = conAsientos.Empresa_Id 
LEFT OUTER JOIN genProvincias ON 
genEmpresas.Provincia_Id =genProvincias.genProvincias
LEFT OUTER JOIN genPaises ON 
genPaises.genPaises = genEmpresas.Pais_Id
Where
conAsientos.conAsientos = @Asiento_Id

-- Receptor
SELECT genEntidades.CUIT AS Rfc, 
	venClientes.RazonSocial as Nombre, 
	ISNULL(genPaises.CodFiscal,'MX') AS ResidenciaFiscal,
	ISNULL(venMovimientosExpMX.receptornumregidtrib,' ') AS NumRegIdTrib,
	-- ' ' AS NumRegIdTrib,
	isnull(venMovimientosMetodoPago.UsoCfdi, ' ') as UsoCfdi, 
	venClieHabitual.Direccion1_Fact Calle , venClieHabitual.NroExterior_Fact NroExterior, 
	venClieHabitual.NroInterior_Fact NroInterior, venClieHabitual.Direccion2_Fact Colonia,
	venClieHabitual.Localidad_Fact AS Localidad,
	genProvincias.CodFiscal as Provincia, genPaises.CodFiscal as Pais, 
	venClieHabitual.CodPostal_Fact as CodigoPostal
from venClientes INNER JOIN venMovimientos ON	
venClientes.genEntidades = venMovimientos.Cliente_id
INNER JOIN genEntidades ON
genEntidades.genEntidades = venMovimientos.Cliente_id
INNER JOIN venClieHabitual ON 
venMovimientos.Cliente_id = venClieHabitual.genEntidades and 
venMovimientos.Sucursal = venClieHabitual.Sucursal
INNER JOIN genPaises ON 
venClieHabitual.Pais_id_Fact = genPaises.genPaises
LEFT OUTER JOIN venMovimientosExpMX ON
venMovimientos.venMovimientos =  venMovimientosExpMX.venMovimientos 
LEFT JOIN venSubTipomov ON 
venSubTipomov.venSubTipomov = venMovimientos.venSubTipomov_id
INNER JOIN genProvincias ON
genProvincias.genProvincias = venClieHabitual.Provincia_id_Fact
INNER JOIN venMovimientosMetodoPago ON
venMovimientosMetodoPago.venMovimientos = venMovimientos.venMovimientos
Where
venMovimientos.venMovimientos = @Asiento_Id
union all -- Cambio de Almacen es el mismo que el Emisor
Select genEmpresas.Cuit AS Rfc,
genEmpresas.RazonSocial AS Nombre,
ISNULL(genPaises.CodFiscal,'MEX') AS ResidenciaFiscal,
' ' AS NumRegIdTrib,
'P01' as UsoCfdi,
genEmpresas.Calle,
genEmpresas.NoExterior,
genEmpresas.NoInterior,
genEmpresas.Colonia Colonia,
genEmpresas.Localidad Localidad,
genProvincias.CodFiscal AS Provincia,
genPaises.CodFiscal AS Pais,
genEmpresas.CodigoPostal
from genEmpresas inner join conAsientos ON 
genEmpresas.genEmpresas = conAsientos.Empresa_Id 
LEFT OUTER JOIN genProvincias ON 
genEmpresas.Provincia_Id =genProvincias.genProvincias
LEFT OUTER JOIN genPaises ON 
genPaises.genPaises = genEmpresas.Pais_Id
Where
conAsientos.conAsientos = @Asiento_Id


-- Concepto

SELECT venMovConStockCr.RenglonCuerpo as Renglon, 
	isNull(stkProductos.CodigoFiscal, ' ') as ClaveProdServ,
	stkProductos.Producto_id as NoIdentificacion, 
	case when @TipoPrecio= 'F' THEN 
	venMovConStockCr.CantOriginal ELSE
		venMovConStockCr.CantFacturada END AS Cantidad,
	ISNULL(case when @TipoPrecio= 'F' THEN 
		MO.CodigoFiscal
		ELSE
		MP.CodigoFiscal END,' ') AS ClaveUnidad,

	case when @TipoPrecio= 'F' THEN 
		MO.Medida_id
		ELSE
		MP.Medida_id END as Unidad,
	stkProductos.Descripcion, 			
	case when @TipoPrecio= 'F' THEN 
		venMovConStockCr.PrecioVenta * venMovConStockCr.Factor
	ELSE
		venMovConStockCr.PrecioVenta END AS ValorUnitario,
	venMovConStockCr.PrecioVenta * venMovConStockCr.CantFacturada as Importe, 
	Convert(Numeric(18,2) , 0) as Descuento	
FROM venMovConStockCr INNER JOIN stkProductos ON		
venMovConStockCr.Producto_id = stkProductos.stkProductos
INNER JOIN stkUniMed as MO ON
MO.stkUniMed = venMovConStockCr.Medida_id 
INNER JOIN stkUniMed as MP ON
MP.stkUniMed = stkProductos.Medida_Id
WHERE
venMovConStockCr.venMovimientos = @Asiento_Id
UNION ALL 
SELECT venMovDetalle.conRenglon as Renglon, 
	isNull(venMovDetalle.CodigoFiscal, ' ') as ClaveProdServ,
	venMovDetalle.Producto_Id as NoIdentificacion, 
	venMovDetalle.Cantidad,
	MO.CodigoFiscal  AS ClaveUnidad,
	MO.Medida_id as Unidad,
	venMovDetalle.Detalle, 			
	venMovDetalle.ImporteUnitario ValorUnitario,
	venMovDetalle.SubTotal as Importe, 
	Convert(Numeric(18,2) , 0) as Descuento	
FROM venMovDetalle INNER JOIN stkUniMed as MO ON
MO.stkUniMed =  venMovDetalle.Medida_id
WHERE
venMovDetalle.venMovimientos = @Asiento_Id 
UNION ALL -- REMITOS
SELECT stkMoviCuerpo.Renglon as Renglon, 
	isNull(stkProductos.CodigoFiscal, ' ') as ClaveProdServ,
	stkProductos.Producto_id as NoIdentificacion, 
	case when @TipoPrecio= 'F' THEN 
	stkMoviCuerpo.CantidadForm ELSE
		stkMoviCuerpo.Cantidad END AS Cantidad,
	ISNULL(case when @TipoPrecio= 'F' THEN 
		MO.CodigoFiscal
		ELSE
		MP.CodigoFiscal END,' ') AS ClaveUnidad,

	case when @TipoPrecio= 'F' THEN 
		MO.Medida_id
		ELSE
		MP.Medida_id END as Unidad,
	stkProductos.Descripcion, 			
	0 AS ValorUnitario,
	0 as Importe, 
	Convert(Numeric(18,2) , 0) as Descuento	
FROM stkMoviCuerpo INNER JOIN stkProductos ON		
stkMoviCuerpo.Producto_id = stkProductos.stkProductos
INNER JOIN stkUniMed as MO ON
MO.stkUniMed = stkMoviCuerpo.Medida_id 
INNER JOIN stkUniMed as MP ON
MP.stkUniMed = stkProductos.Medida_Id
WHERE
stkMoviCuerpo.stkMoviCabe = @Asiento_Id
UNION ALL
--- CARTA PORTE M
SELECT venCompCartaPorteMercancia.Renglon as Renglon, 
	isNull(venCompCartaPorteMercancia.BienesTransp, ' ') as ClaveProdServ,
	' ' as NoIdentificacion, 
	venCompCartaPorteMercancia.Cantidad,
	MO.CodigoFiscal AS ClaveUnidad,
	MO.Medida_Id Unidad,
	venCompCartaPorteMercancia.Descripcion, 			
	0.00 AS ValorUnitario,
	0.00 as Importe, 
	Convert(Numeric(18,2) , 0) as Descuento	
FROM venCompCartaPorteMercancia 
INNER JOIN stkUniMed as MO ON
MO.stkUniMed = venCompCartaPorteMercancia.Medida_id 
WHERE
venCompCartaPorteMercancia.venMovimientos = @Asiento_Id
ORDER BY 1

-- Pedimentos
SELECT venMovConStockCr.RenglonCuerpo as Renglon, 
ISNULL(comDespachos.Anio,'XX') + '  ' + ltrim(ISNULL(comDespachos.Aduana_id,'XX'))+'  '+
		ltrim(ISNULL(comDespachos.Patente,'XXXX'))	+ '  ' +
		left('0000000', 7-len(Ltrim(str(ISNULL(comDespachos.Pedimento,0),7))))+ Ltrim(str(ISNULL(comDespachos.Pedimento,0),7)) as NroPedimento, 
			comDespachos.Despacho_Id
From venMovConStockCr inner join venMovStkHist ON
venMovConStockCr.venMovimientos =  venMovStkHist.venMovimientos and 
venMovConStockCr.RenglonCuerpo = venMovStkHist.RenglonCuerpo
INNER JOIN stkMoviDespa ON
stkMoviDespa.stkMoviCabe = venMovStkHist.stkMoviCabe and 
stkMoviDespa.Renglon  = venMovStkHist.Renglon
INNER JOIN comDespachos ON 
comDespachos.comDespachos = stkMoviDespa.Despacho_Id
WHERE
venMovConStockCr.venMovimientos = @Asiento_id and 
comDespachos.Pedimento > 0
union all
SELECT stkMoviCuerpo.Renglon, 
ISNULL(comDespachos.Anio,'XX') + '  ' + ltrim(ISNULL(comDespachos.Aduana_id,'XX'))+'  '+
		ltrim(ISNULL(comDespachos.Patente,'XXXX'))	+ '  ' +
		left('0000000', 7-len(Ltrim(str(ISNULL(comDespachos.Pedimento,0),7))))+ Ltrim(str(ISNULL(comDespachos.Pedimento,0),7)) as NroPedimento, 
			comDespachos.Despacho_Id
From stkMoviCuerpo 
INNER JOIN stkMoviDespa ON
stkMoviDespa.stkMoviCabe = stkMoviCuerpo.stkMoviCabe and 
stkMoviDespa.Renglon  = stkMoviCuerpo.Renglon
INNER JOIN comDespachos ON 
comDespachos.comDespachos = stkMoviDespa.Despacho_Id
WHERE
stkMoviCuerpo.stkMoviCabe = @Asiento_id and 
comDespachos.Pedimento > 0
ORDER BY 1

-- Cuenta Predial

SELECT venMoviPredial.conRenglon as Renglon ,  
	venMoviPredial.CuentaPredial
From venMoviPredial 
WHERE
venMoviPredial.venMovimientos = @Asiento_Id


-- Rentencion Prod
select venMovCSImpuestos.RenglonCuerpo as Renglon, venMovCSImpuestos.BaseImponible Base, 
	impTipoImpuesto.Referencia02 Impuesto, 
	case when impTipoImpuesto.CodigoFiscal ='E1' THEN 'Cuota' else 'Tasa' END TipoFactor, 
	abs(venMovCSImpuestos.Porcentaje/100) TasaOCuota, 
	-venMovCSImpuestos.Importe as Importe
From venMovCSImpuestos INNER JOIN venImpuestos ON
venMovCSImpuestos.Impuesto_Id = venImpuestos.venImpuestos
INNER JOIN impTipoImpuesto ON
impTipoImpuesto.TipoImpuesto = venImpuestos.TipoImpuesto
WHERE
venMovCSImpuestos.Importe < 0 and 
venMovCSImpuestos.venMovimientos =@Asiento_id
UNION ALL
select venMovSSImpuestos.conRenglon as Renglon, venMovSSImpuestos.BaseImponible Base, 
	impTipoImpuesto.Referencia02 Impuesto, 
	case when impTipoImpuesto.CodigoFiscal='E1' THEN 'Cuota' else 'Tasa' END TipoFactor, 
	abs(venMovSSImpuestos.Porcentaje/100) TasaOCuota, 
	-venMovSSImpuestos.Importe as Importe
From venMovSSImpuestos INNER JOIN venImpuestos ON
venMovSSImpuestos.Impuesto_Id = venImpuestos.venImpuestos
INNER JOIN impTipoImpuesto ON
impTipoImpuesto.TipoImpuesto = venImpuestos.TipoImpuesto
WHERE
venMovSSImpuestos.Importe < 0 and 
venMovSSImpuestos.venMovimientos = @Asiento_ID
ORDER BY 1

-- Traslados Prod
select venMovCSImpuestos.RenglonCuerpo as Renglon, venMovCSImpuestos.BaseImponible Base, 
	impTipoImpuesto.Referencia02 Impuesto, 
	case when impTipoImpuesto.CodigoFiscal ='E1' THEN 'Cuota' else 'Tasa' END TipoFactor, 
	abs(venMovCSImpuestos.Porcentaje/100) TasaOCuota, 
	venMovCSImpuestos.Importe as Importe
From venMovCSImpuestos INNER JOIN venImpuestos ON
venMovCSImpuestos.Impuesto_Id = venImpuestos.venImpuestos
INNER JOIN impTipoImpuesto ON
impTipoImpuesto.TipoImpuesto = venImpuestos.TipoImpuesto
WHERE
venMovCSImpuestos.Importe >= 0 and 
venMovCSImpuestos.venMovimientos =@Asiento_id
UNION ALL
select venMovSSImpuestos.conRenglon as Renglon, venMovSSImpuestos.BaseImponible Base, 
	impTipoImpuesto.Referencia02 Impuesto, 
	case when impTipoImpuesto.CodigoFiscal='E1' THEN 'Cuota' else 'Tasa' END TipoFactor, 
	abs(venMovSSImpuestos.Porcentaje/100) TasaOCuota, 
	venMovSSImpuestos.Importe as Importe
From venMovSSImpuestos INNER JOIN venImpuestos ON
venMovSSImpuestos.Impuesto_Id = venImpuestos.venImpuestos
INNER JOIN impTipoImpuesto ON
impTipoImpuesto.TipoImpuesto = venImpuestos.TipoImpuesto
WHERE
venMovSSImpuestos.Importe >= 0 and 
venMovSSImpuestos.venMovimientos = @Asiento_ID
ORDER BY 1



-- Impuestos
SELECT 
 isnull(sum(case when venMovimpuestos.Importe>=0 then venMovimpuestos.Importe else 0 end ),0) as TotalimpuestosTraslados,
 isnull(sum(case when venMovimpuestos.Importe<0 then -venMovimpuestos.Importe else 0 end ),0) as TotalimpuestosRetenciones
From venMovImpuestos 
WHERE
venMovImpuestos.VenMovimientos = @Asiento_Id

-- Traslado
SELECT impTipoImpuesto.Referencia02 as Impuesto, 
	case when impTipoImpuesto.CodigoFiscal='E1' THEN 'Cuota' else 'Tasa' END TipoFactor, 
	ABS(venMovImpuestos.Porcentaje/100) TasaOCuota, 
	venMovImpuestos.Importe 
From venMovImpuestos INNER JOIN venImpuestos ON
venImpuestos.venImpuestos = venMovImpuestos.Impuesto_Id
INNER JOIN impTipoImpuesto ON
impTipoImpuesto.TipoImpuesto = venImpuestos.TipoImpuesto
WHERE
venMovimpuestos.Importe>=0 and 
venMovImpuestos.venMovimientos = @Asiento_Id
 
-- Retencion
SELECT impTipoImpuesto.Referencia02 as Impuesto, 
	case when impTipoImpuesto.CodigoFiscal='E1' THEN 'Cuota' else 'Tasa' END TipoFactor, 
	ABS(venMovImpuestos.Porcentaje/100) TasaOCuota, 
	-venMovImpuestos.Importe as Importe
From venMovImpuestos INNER JOIN venImpuestos ON
venImpuestos.venImpuestos = venMovImpuestos.Impuesto_Id
INNER JOIN impTipoImpuesto ON
impTipoImpuesto.TipoImpuesto = venImpuestos.TipoImpuesto
WHERE
venMovimpuestos.Importe<0 and 
venMovImpuestos.venMovimientos = @Asiento_Id
 
-- Complemento

SELECT '1.1' as Version,  venMovimientosFiscal.ClaveFiscal as UUID, 
	venMovimientosFiscal.FechaString FechaTimbrado, 
	isnull(venMovimientosFiscal.RfcProvCertif,' ') as RfcProvCertif,
	isnull(venMovimientosFiscal.Leyenda,' ') as Leyenda,
	venMovimientosFiscal.SelloDigital as SelloCFD,
	venMovimientosFiscal.NoCertificadoFiscal NoCertificadoSAT,
	venMovimientosFiscal.SelloFiscal SelloSAT
FROM venMovimientosFiscal
WHERE
venMovimientosFiscal.venMovimientos = @Asiento_Id

-- Complemento INE

SELECT TipoProceso, TipoComite, idContabilidad FROM venMovimientosFiscal
WHERE
TipoProceso IS NOT NULL AND 
venMovimientosFiscal.venMovimientos = @Asiento_Id

SELECT Ambito, ClaveIdentidad , idContabilidad 
FROM venMovimientosFiscalINE
WHERE
venMovimientosFiscalINE.venMovimientos = @Asiento_Id
ORDER BY 2,1

-- Complemento Exportaciones

select venMovimientosExpMX.Motivo_id, 
	case when venMovimientosExpMX.TipoOperacion='B' THEN '2' ELSE venMovimientosExpMX.TipoOperacion END AS TipoOperacion, 
	venMovimientosExpMX.ClaveDePedimento, 
	venMovimientosExpMX.CertificadoOrigen, venMovimientosExpMX.NumeroExportadorConfiable, 
	venIncoterm.Incoterm_id as Incoterm, venMovimientosExpMX.Subdivision, venMovimientosExpMX.Observaciones, 
	venMovimientosExpMX.TipoCambioUSD, venMovimientosExpMX.TotalUSD, venMovimientosExpMX.UsaProv, 
	venMovimientosExpMX.PropNumRegIdTrib, venMovimientosExpMX.PropResidenciaFiscal, 
	venMovimientosExpMX.ReceptorNumRegIdTrib, venMovimientosExpMX.Destinatario_id, venMovimientosExpMX.SucursalDest,
	venClientes.RazonSocial,
	venClieHabitual.Direccion1_Fact Calle , venClieHabitual.NroExterior_Fact NroExterior, 
	venClieHabitual.NroInterior_Fact NroInterior, venClieHabitual.Direccion2_Fact Colonia,
	venClieHabitual.Localidad_Fact AS Localidad,
	genProvincias.CodFiscal as Provincia, genPaises.CodFiscal as Pais, 
	venClieHabitual.CodPostal_Fact as CodigoPostal, venMovimientosExpMX.ReceptorNumRegIdTrib AS NumRegIdTrib
from venMovimientosExpMX LEFT OUTER JOIN 
	(venClieHabitual INNER JOIN genPaises ON
		venClieHabitual.Pais_id_Fact = genPaises.genPaises
		inner join genProvincias ON
			genProvincias.genProvincias = venClieHabitual.Provincia_id_Fact 
			INNER JOIN venClientes ON 
			venClientes.genEntidades = venClieHabitual.genEntidades  ) ON
		venClieHabitual.genEntidades  =venMovimientosExpMX.Destinatario_id and 
		venClieHabitual.Sucursal = venMovimientosExpMX.SucursalDest
		INNER JOIN venMovimientos ON 
		venMovimientos.venMovimientos = venMovimientosExpMX.venMovimientos
		INNER JOIN venIncoterm ON
		venIncoterm.venIncoterm_int =  venMovimientos.Incoterm_Id
WHERE
venMovimientosExpMX.venMovimientos = @Asiento_Id

SELECT venMovConStockCr.RenglonCuerpo venRenglon, stkProductos.Producto_id as NoIdentificacion,
	convert(numeric(18,3),isnull(CantidadAduana, venMovConStockCr.CantOriginal)* ISNULL(genAtributosValores.Valorn,1)) as CantidadAduana , 
	isnull(UnidadAduana, stkUniMed.UniExpor) as UnidadAduana , 
	Convert(numeric(18,2),venMovConStockCr.PrecioVenta*venMovConStockCr.CantFacturada/venMovConStockCr.CantOriginal
		/ ISNULL(genAtributosValores.Valorn,1)) as ValorUnitarioAduana ,
	 isnull(ValorDolares , venMovConStockCr.PrecioVenta * venMovConStockCr.CantFacturada ) ValorDolares, 
	 stkProductos.FraccionArancelaria
FROM  venMovConStockCr left outer join venMovimientosCRExpMX ON
venMovimientosCRExpMX.VenMovimientos = venMovConStockCr.venMovimientos and 
venMovimientosCRExpMX.RenglonCuerpo = venMovConStockCr.RenglonCuerpo
INNER JOIN venMovimientosExpMX ON
venMovimientosExpMX.venMovimientos =venMovConStockCr.venMovimientos 
INNER JOIN stkUniMed ON
stkUniMed.stkUniMed = venMovConStockCr.Medida_id
INNER JOIN stkProductos ON
stkProductos.stkProductos = venMovConStockCr.Producto_id
LEFT JOIN genAtributosValores ON 
genAtributosValores.Tabla_Id = 'stkProductos' and 
genAtributosValores.Identity_Id = stkProductos.stkProductos and 
genAtributosValores.AtributoNro = 5
WHERE
venMovConStockCr.venMovimientos = @Asiento_ID
order by 1


--- Complemento Carta Porte

SELECT TranspInternac, EntradaSalidaMerc, ViaEntradaSalida, TotalDistRec, 
	PesoBrutoTotal, UnidadPeso, PesoNetoTotal, CargoPorTasacion, 
	venCamiones.Patente_Id, venCamiones.Descripcion, venCamiones.Modelo, venCamiones.ConfVehicular,
	venCamiones.Marca, 	venCamiones.NroPoliza,  venCamiones.NombreAseg, venCamiones.TipoPermisoSCT, venCamiones.NroPermisoSCT,
	venCamiones.AseguraMedAmb, venCamiones.PolizaMedAmbiente, 
	venCamiones.AseguraCarga, venCamiones.PolizaCarga, venCamiones.PrimaSeguro,
	Remolque1.Patente_Id PatenteR1, Remolque1.Descripcion DescripcionR1, Remolque1.Modelo ModeloR1, Remolque1.ConfVehicular ConfVehicularR1 ,
	Remolque1.Marca MarcaR1, 	Remolque1.NroPoliza NroPolizaR1,  Remolque1.NombreAseg NombreAsegR1, 
	Remolque1.TipoPermisoSCT TipoPermisoSCTR1, Remolque1.NroPermisoSCT NroPermisoSCTR1,
	Remolque1.AseguraMedAmb AseguraMedAmbR1, Remolque1.PolizaMedAmbiente PolizaMedAmbienteR1, 
	Remolque1.AseguraCarga AseguraCargaR1, Remolque1.PolizaCarga PolizaCargaR1, Remolque1.PrimaSeguro PrimaSeguroR1,
	Remolque2.Patente_Id PatenteR2, Remolque2.Descripcion DescripcionR2, Remolque2.Modelo ModeloR2, Remolque2.ConfVehicular ConfVehicularR2 ,
	Remolque2.Marca MarcaR2, 	Remolque2.NroPoliza NroPolizaR2,  Remolque2.NombreAseg NombreAsegR2 , 
	Remolque2.TipoPermisoSCT TipoPermisoSCTR2, Remolque1.NroPermisoSCT NroPermisoSCTR2,
	Remolque2.AseguraMedAmb AseguraMedAmbR2, Remolque2.PolizaMedAmbiente PolizaMedAmbienteR2, 
	Remolque2.AseguraCarga AseguraCargaR2, Remolque1.PolizaCarga PolizaCargaR2, Remolque1.PrimaSeguro PrimaSeguroR2
	FROM venCompCartaPorte
	left join venCamiones on venCamiones.venCamiones = venCompCartaPorte.Camion_Id
	left join venCamiones Remolque1 on Remolque1.venCamiones = venCompCartaPorte.Remolque1
	left join venCamiones Remolque2 on Remolque2.venCamiones = venCompCartaPorte.Remolque2
WHERE
venCompCartaPorte.venMovimientos = @Asiento_ID
order by 1


SELECT venCompCartaPorteUbi.Ubicacion, venCompCartaPorteUbi.TipoEstacion, venCompCartaPorteUbi.DistanciaRecorrida
	FROM venCompCartaPorteUbi
WHERE
venCompCartaPorteUbi.venMovimientos = @Asiento_ID
order by 1


select venCompCartaPorteOrigen.Ubicacion, venCompCartaPorteOrigen.idOrigen, venCompCartaPorteOrigen.RFCRemitente,
	venCompCartaPorteOrigen.NombreRemitente, venCompCartaPorteOrigen.NumRegIdTrib, genPaisesR.CodFiscal ResidenciaFiscal,
	venCompCartaPorteOrigen.NumEstacion, venCompCartaPorteOrigen.NombreEstacion, venCompCartaPorteOrigen.NavegacionTrafico,
	venCompCartaPorteOrigen.FechaHoraSalida, venCompCartaPorteOrigen.Calle, venCompCartaPorteOrigen.NumeroExterior, 
	venCompCartaPorteOrigen.Numerointerior,venCompCartaPorteOrigen.Colonia, venCompCartaPorteOrigen.Localidad,
	venCompCartaPorteOrigen.Referencia, venCompCartaPorteOrigen.Municipio, venCompCartaPorteOrigen.Estado,
	genPaises.CodFiscal Pais, venCompCartaPorteOrigen.CodigoPostal
	FROM venCompCartaPorteOrigen
	LEFT JOIN genPaises genPaisesR ON genPaisesR.genPaises = venCompCartaPorteOrigen.ResidenciaFiscal
	INNER JOIN genPaises on  genPaises.genPaises =venCompCartaPorteOrigen.Pais
WHERE
venCompCartaPorteOrigen.venMovimientos = @Asiento_ID
order by 1


select venCompCartaPorteDestino.Ubicacion, venCompCartaPorteDestino.idDestino, venCompCartaPorteDestino.RFCDestinatario,
	venCompCartaPorteDestino.NombreDestinatario, venCompCartaPorteDestino.NumRegIdTrib, genPaises.CodFiscal ResidenciaFiscal,
	venCompCartaPorteDestino.NumEstacion, venCompCartaPorteDestino.NombreEstacion, venCompCartaPorteDestino.NavegacionTrafico,
	venCompCartaPorteDestino.FechaHoraProgLlegada, venCompCartaPorteDestino.Calle, venCompCartaPorteDestino.NumeroExterior, 
	venCompCartaPorteDestino.Numerointerior,venCompCartaPorteDestino.Colonia, venCompCartaPorteDestino.Localidad,
	venCompCartaPorteDestino.Referencia, venCompCartaPorteDestino.Municipio, venCompCartaPorteDestino.Estado,
	genPaises.CodFiscal Pais, venCompCartaPorteDestino.CodigoPostal
	FROM venCompCartaPorteDestino
	LEFT JOIN genPaises genPaisesR ON genPaisesR.genPaises = venCompCartaPorteDestino.ResidenciaFiscal
	INNER JOIN genPaises on  genPaises.genPaises =venCompCartaPorteDestino.Pais
WHERE
venCompCartaPorteDestino.venMovimientos = @Asiento_ID
order by 1




select venCompCartaPorteMercancia.idDestino,  venCompCartaPorteMercancia.Renglon, venCompCartaPorteMercancia.BienesTransp, venCompCartaPorteMercancia.ClaveSTCC, 
venCompCartaPorteMercancia.Descripcion, venCompCartaPorteMercancia.Cantidad, stkUniMed.CodigoFiscal Medida_id, 
venCompCartaPorteMercancia.Dimensiones, 
stkUniMed.Descripcion AS Unidad,
Cast(case when venCompCartaPorteMercancia.MaterialPeligroso='Si' THEN 1 ELSE 0 END AS Bit) AS MaterialPeligroso , venCompCartaPorteMercancia.CveMaterialPeligroso, venCompCartaPorteMercancia.Embalaje,
venCompCartaPorteMercancia.DescripEmbalaje, venCompCartaPorteMercancia.PesoEnKg, venCompCartaPorteMercancia.ValorMercancia, venCompCartaPorteMercancia.FraccionArancelaria, 
venCompCartaPorteMercancia.UUIDComercioExt
FROM venCompCartaPorteMercancia
inner join stkUniMed ON  stkUniMed.stkUniMed = venCompCartaPorteMercancia.Medida_Id
WHERE
	venCompCartaPorteMercancia.venmovimientos= @Asiento_Id
UNION ALL
select 1 as idDestino,   venMovConStockCr.RenglonCuerpo, stkProductos.CodigoFiscal BienesTransp, stkProductos.ClaveSTCC, 
stkProductos.Descripcion, venMovConStockCr.CantEntregada, stkUniMed.CodigoFiscal Medida_id, ' ' Dimensiones,
stkUniMed.Descripcion AS Unidad,
stkProductos.MaterialPeligroso, stkProductos.CveMaterialPeligroso, stkProductos.Embalaje,
'' DescripEmbalaje, stkProductos.PesoEnKg*venMovConStockCr.CantEntregada as PesoEnKg, 
stkProductos.CostoUltCompra * venMovConStockCr.CantEntregada ValorMercancia, stkProductos.FraccionArancelaria, 
'' UUIDComercioExt
FROM venMovConStockCr
INNER JOIN stkProductos ON  stkProductos.stkProductos = venMovConStockCr.Producto_Id
inner join stkUniMed ON  stkUniMed.stkUniMed = stkProductos.Medida_Id
WHERE
	venMovConStockCr.venmovimientos= @Asiento_Id and not exists(select 1 from venCompCartaPorteMercancia
		where venCompCartaPorteMercancia.venmovimientos =@Asiento_Id)
UNION ALL -- REMISIONES
select 1 as idDestino,   stkMoviCuerpo.Renglon, stkProductos.CodigoFiscal BienesTransp, stkProductos.ClaveSTCC, 
stkProductos.Descripcion, stkMoviCuerpo.Cantidad, stkUniMed.CodigoFiscal Medida_id, ' ' Dimensiones, 
stkUniMed.Descripcion AS Unidad,
stkProductos.MaterialPeligroso, stkProductos.CveMaterialPeligroso, stkProductos.Embalaje,
'' DescripEmbalaje, stkProductos.PesoEnKg*stkMoviCuerpo.Cantidad as PesoEnKg, 
stkProductos.CostoUltCompra * stkMoviCuerpo.Cantidad ValorMercancia, stkProductos.FraccionArancelaria, 
'' UUIDComercioExt
FROM stkMoviCuerpo
INNER JOIN stkProductos ON  stkProductos.stkProductos = stkMoviCuerpo.Producto_Id
inner join stkUniMed ON  stkUniMed.stkUniMed = stkProductos.Medida_Id
WHERE
	stkMoviCuerpo.stkMoviCabe= @Asiento_Id and not exists(select 1 from venCompCartaPorteMercancia
		where venCompCartaPorteMercancia.venmovimientos =@Asiento_Id)

Select venCompCartaPorteDestinatario.NumRegIdTrib, venCompCartaPorteDestinatario.Nombre,
venCompCartaPorteDestinatario.Calle, venCompCartaPorteDestinatario.NumeroExterior,
venCompCartaPorteDestinatario.Numerointerior, venCompCartaPorteDestinatario.Colonia,
venCompCartaPorteDestinatario.Localidad, venCompCartaPorteDestinatario.Referencia,
venCompCartaPorteDestinatario.Municipio, venCompCartaPorteDestinatario.Estado,
genPaises.CodFiscal Pais, venCompCartaPorteDestinatario.CodigoPostal
FROM venCompCartaPorteDestinatario
inner join genPaises ON venCompCartaPorteDestinatario.Pais = genPaises.genPaises
union all
Select genEntidades.IdFiscal NumRegIdTrib, venClientes.RazonSocial Nombre,
venClieHabitual.Direccion1_Entr Calle, venClieHabitual.NroExterior_Entr NumeroExterior,
venClieHabitual.NroInterior_Entr Numerointerior,  
case when genPaises.CodFiscal = 'MEX' THEN venClieHabitual.c_ColoniaEntr else venClieHabitual.Direccion2_Entr end Colonia,
case when genPaises.CodFiscal = 'MEX' THEN venClieHabitual.c_LocalidadEntr else venClieHabitual.Localidad_Entr end Localidad, 
' ' Referencia,
case when genPaises.CodFiscal = 'MEX' THEN venClieHabitual.c_MunicipioEntr else ' ' end Municipio, 
CASE WHEN genProvincias.CodFiscal = ' ' THEN genProvincias.Descripcion ELSE genProvincias.CodFiscal END Estado,
genPaises.CodFiscal Pais, venClieHabitual.CodPostal_Entr CodigoPostal
FROM venMovimientos 
	INNER JOIN venClientes ON  venClientes.genEntidades =venMovimientos.Cliente_Id
	INNER JOIN genEntidades ON  genEntidades.genEntidades =venClientes.genEntidades
	INNER JOIN venClieHabitual ON  venClieHabitual.genEntidades =venMovimientos.Cliente_Id AND 
		venClieHabitual.Sucursal = venMovimientos.Sucursal
	inner join genPaises ON venClieHabitual.Pais_Id_Entr = genPaises.genPaises
	inner join genProvincias ON  genProvincias.genProvincias =venClieHabitual.Provincia_Id_Entr
WHERE
	venMovimientos.venMovimientos = @Asiento_Id
	/*
union all -- remitos
Select genEntidades.IdFiscal NumRegIdTrib, venClientes.RazonSocial Nombre,
venClieHabitual.Direccion1_Entr Calle, venClieHabitual.NroExterior_Entr NumeroExterior,
venClieHabitual.NroInterior_Entr Numerointerior,  
case when genPaises.CodFiscal = 'MEX' THEN venClieHabitual.c_ColoniaEntr else venClieHabitual.Direccion2_Entr end Colonia,
case when genPaises.CodFiscal = 'MEX' THEN venClieHabitual.c_LocalidadEntr else venClieHabitual.Localidad_Entr end Localidad, 
' ' Referencia,
case when genPaises.CodFiscal = 'MEX' THEN venClieHabitual.c_MunicipioEntr else ' ' end Municipio, 
CASE WHEN genProvincias.CodFiscal = ' ' THEN genProvincias.Descripcion ELSE genProvincias.CodFiscal END Estado,
genPaises.CodFiscal Pais, venClieHabitual.CodPostal_Entr CodigoPostal
FROM stkRemitos
	INNER JOIN venClientes ON  venClientes.genEntidades =stkRemitos.Cliente_Id
	INNER JOIN genEntidades ON  genEntidades.genEntidades =venClientes.genEntidades
	INNER JOIN venClieHabitual ON  venClieHabitual.genEntidades =stkRemitos.Cliente_Id AND 
		venClieHabitual.Sucursal = stkRemitos.Sucursal
	inner join genPaises ON venClieHabitual.Pais_Id_Entr = genPaises.genPaises
	inner join genProvincias ON  genProvincias.genProvincias =venClieHabitual.Provincia_Id_Entr
WHERE
	stkRemitos.stkMoviCabe = @Asiento_Id
	*/

SELECT 	venCamiones.ConfVehicular, venPropietarioArrenda.PropArre, 
		venPropietarioArrenda.Rfc, venPropietarioArrenda.Nombre, 
			genPaises.CodFiscal ResidenciaFiscal, venPropietarioArrenda.NumRegIdTrib, 
			venPropietarioArrenda.Calle, venPropietarioArrenda.NumeroExterior, 
			venPropietarioArrenda.Numerointerior, venPropietarioArrenda.Colonia, 
			venPropietarioArrenda.Localidad, venPropietarioArrenda.Municipio, 
			venPropietarioArrenda.CodigoPostal, venPropietarioArrenda.Estado, 
			venPropietarioArrenda.Referencia, genPaisesDom.CodFiscal Pais
	FROM venCompCartaPorte
	inner join venCamiones on venCamiones.venCamiones = venCompCartaPorte.Camion_Id
	LEFT JOIN (venPropietarioArrenda INNER JOIN genPaises ON  genPaises.genPaises= venPropietarioArrenda.ResidenciaFiscal
	inner join genPaises genPaisesDom on genPaisesDom.genPaises = venPropietarioArrenda.Pais) 	ON 
		venPropietarioArrenda.venPropietarioArrenda = venCamiones.PropArre_Id 
WHERE
venCompCartaPorte.venMovimientos = @Asiento_ID
order by 1


SELECT 		venOperadores.RfcOperador, venOperadores.NombreOperador, 
			venOperadores.NumLicencia,
			genPaises.CodFiscal ResidenciaFiscal, venOperadores.NumRegIdTribOperador, 
			venOperadores.Calle, venOperadores.NumeroExterior, 
			venOperadores.Numerointerior, venOperadores.Colonia, 
			venOperadores.Localidad, venOperadores.Municipio, 
			venOperadores.CodigoPostal, venOperadores.Estado, 
			venOperadores.Referencia, genPaisesDom.CodFiscal Pais
	FROM venCompCartaPorte
	INNER JOIN venOperadores ON venOperadores.venOperadores = venCompCartaPorte.Operador_Id
	INNER JOIN genPaises ON  genPaises.genPaises= venOperadores.ResidenciaFiscalOperador
	inner join genPaises genPaisesDom on genPaisesDom.genPaises = venOperadores.Pais
WHERE
venCompCartaPorte.venMovimientos = @Asiento_ID
order by 1








GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venTipoMov.sql*/
DROP PROCEDURE venTipoMovGuardar
GO
CREATE PROCEDURE venTipoMovGuardar
(
@pvenTipoMov char(1),
@pDescripcion char(50),
@pSigno smallint,
@pTipoMovResumido char(3)
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venTipoMov WHERE (venTipoMov = @pvenTipoMov)))
BEGIN 
	UPDATE venTipoMov
	SET		Descripcion = @pDescripcion,
		Signo = @pSigno,
		TipoMovResumido = @pTipoMovResumido
	WHERE (venTipoMov = @pvenTipoMov)
END 
ELSE 
BEGIN 
	INSERT INTO venTipoMov
	(
		venTipoMov,
		Descripcion,
		Signo,
		TipoMovResumido
	)
	VALUES 
	(
		@pvenTipoMov,
		@pDescripcion,
		@pSigno,
		@pTipoMovResumido
	)
END 

GO

DROP PROCEDURE venTipoMovDatos
GO
CREATE PROCEDURE venTipoMovDatos
(
@pvenTipoMov char(1)
)
AS
SET NOCOUNT ON 

SELECT venTipoMov.venTipoMov, venTipoMov.Descripcion, venTipoMov.Signo, venTipoMov.TipoMovResumido
FROM venTipoMov 
WHERE (venTipoMov = @pvenTipoMov)
 
 RETURN @@Error 

GO

DROP PROCEDURE venTipoMovEliminar
GO
CREATE PROCEDURE venTipoMovEliminar
(
@pvenTipoMov char(1) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venTipoMov 
WHERE (venTipoMov = ISNULL(@pvenTipoMov, venTipoMov))
 
 RETURN @@Error 

GO

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venTiposClie.sql*/
DROP PROCEDURE venTiposClieGuardar
GO
CREATE PROCEDURE venTiposClieGuardar
(
@pTipoClie_Id varchar(5),
@pTipoClie_Id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(35),
@pCentro1_Id varchar(8) = NULL,
@pCentro2_Id varchar(8) = NULL,
@pUsuario_Id int,
@pPosteado bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM venTiposClie WHERE (TipoClie_Id = @pTipoClie_Id)))
BEGIN 
	UPDATE venTiposClie
	SET		@lIdentidad = venTiposClie,
		TipoClie_Id = @pTipoClie_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Centro1_Id = dbo.FuncFKconCentro1(@pCentro1_Id),
		Centro2_Id = dbo.FuncFKconCentro2(@pCentro2_Id),
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (TipoClie_Id = @pTipoClie_Id)
END 
ELSE 
BEGIN 
	INSERT INTO venTiposClie
	(
		TipoClie_Id,
		Empresa_Id,
		Descripcion,
		Centro1_Id,
		Centro2_Id,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pTipoClie_Id,
		@pEmpresa_Id,
		@pDescripcion,
		dbo.FuncFKconCentro1(@pCentro1_Id),
		dbo.FuncFKconCentro2(@pCentro2_Id),
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE venTiposClieDatos
GO
CREATE PROCEDURE venTiposClieDatos
(
@pTipoClie_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT venTiposClie.venTiposClie, venTiposClie.TipoClie_Id, venTiposClie.Empresa_Id, Cast( Case When venTiposClie.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	venTiposClie.Descripcion, conCentro1.Centro1_Id, conCentro1.Descripcion as DescripcionCentro1, conCentro2.Centro2_Id,
	conCentro2.Descripcion as DescripcionCentro2, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario, venTiposClie.Posteado
FROM venTiposClie 
LEFT JOIN conCentro1  ON (conCentro1.conCentro1 = venTiposClie.Centro1_Id)
LEFT JOIN conCentro2  ON (conCentro2.conCentro2 = venTiposClie.Centro2_Id)
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = venTiposClie.Usuario_Id)
WHERE (TipoClie_Id = @pTipoClie_Id)
 


  Declare @pidentity bigint= dbo.FuncFKvenTiposClie(@pTipoClie_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'venTiposClie'
 RETURN @@Error 

GO

DROP PROCEDURE venTiposClieEliminar
GO
CREATE PROCEDURE venTiposClieEliminar
(
@pTipoClie_Id varchar(5) 
)
AS
SET NOCOUNT ON 

DELETE FROM venTiposClie 
WHERE (TipoClie_Id = @pTipoClie_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKvenTiposClie
GO

CREATE FUNCTION FuncFKvenTiposClie
(
@pTipoClie_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = venTiposClie FROM venTiposClie WHERE 
	TipoClie_Id = @pTipoClie_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venTraePendientes.sql*/
DROP PROCEDURE venTraePendientes 
GO
CREATE PROCEDURE venTraePendientes (
	@pEmpresa_Id int,
	@Cliente_Id VarChar(15), 
	@Moneda_Id VarChar(3), 
	@Signo Int )

AS
select Cast(0 as bigint) as venMovimientos, 0.00 as Importe, @Moneda_Id as Moneda_Id, @Cliente_Id as Cliente_id, @Signo as Signo

SELECT genMovCuotas.FechaVencimiento, Fecha, venMovimientos.venMovimientos, 
	dbo.Segmento(genAsiSegmentos.Segmento_Id, genAsiSegmentos.Segmento1C,
		genAsiSegmentos.Segmento2C, genAsiSegmentos.Segmento3C, genAsiSegmentos.Segmento4C,
		genAsiSegmentos.Segmento1N,genAsiSegmentos.Segmento2N,genAsiSegmentos.Segmento3N,
		genAsiSegmentos.Segmento4N) SegmentoStr, genMovCuotas.CuotaNro, 
		genMovCuotas.Importe,
		genMovCuotas.Saldo, genMovCuotas.Saldo*0 as ImporteAplicado
From venMovimientos
Inner join genMovCuotas ON venMovimientos.venMovimientos = genMovCuotas.Asiento_Id
INNER join venClientes ON venClientes.genEntidades = venMovimientos.Cliente_Id 
INNER JOIN conAsientos ON conAsientos.conAsientos = venMovimientos.venMovimientos
inner join genMonedas ON genMonedas.genMonedas =  conAsientos.Moneda_Id
INNER Join venSubTipoMov ON venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
inner join venTipoMov ON venTipoMov.venTipoMov = venMovimientos.venTipoMov
INNER JOIN genAsiSegmentos ON genAsiSegmentos.Asiento_Id = venMovimientos.venMovimientos
Where
	conAsientos.Empresa_Id = @pEmpresa_Id And conAsientos.Anulado = 0 And
	genMovCuotas.Saldo > 0 and 
	venTipoMov.Signo = @Signo and 
	venClientes.Cliente_Id = @Cliente_Id and 
	genMonedas.Moneda_Id = @Moneda_Id
order by 1, 2
GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venVendedores.sql*/
DROP PROCEDURE venVendedoresGuardar
GO
CREATE PROCEDURE venVendedoresGuardar
(
@pvenVendedores bigint,
@pVendedor_Id varchar(5),
@pVendedor_Id_Nueva varchar(5),
@pEmpresa_Id int = NULL,
@pNombre varchar(35),
@pComision numeric(5,2),
@pComisionxSuperv numeric(5,2),
@pSupervisor_Id varChar(5)=null,
@pPisoDeVentas numeric(18,2),
@pCentro1_Id varchar(8) = NULL,
@pCentro2_Id varchar(8) = NULL,
@pFacturaCobrada bit,
@pConAnticipos bit,
@pSinImpuestos bit,
@pInactivo bit,
@pUsuario varChar(25)=null,
@pUsuario_Id int,
@pPosteado bit
)
AS
SET NOCOUNT ON 
IF (EXISTS (SELECT 1 FROM venVendedores WHERE (venVendedores = @pvenVendedores)))
BEGIN 
	UPDATE venVendedores
	SET		Vendedor_id = @pVendedor_Id_Nueva,
		Empresa_Id = @pEmpresa_Id,
		Nombre = @pNombre,
		Comision = @pComision,
		ComisionxSuperv = @pComisionxSuperv,
		Supervisor_Id = dbo.FuncFKVenVendedores(@pSupervisor_Id),
		PisoDeVentas = @pPisoDeVentas,
		Centro1_Id = dbo.FuncFKconCentro1(@pCentro1_Id),
		Centro2_Id = dbo.FuncFKconCentro2(@pCentro2_Id),
		FacturaCobrada = @pFacturaCobrada,
		ConAnticipos = @pConAnticipos,
		SinImpuestos = @pSinImpuestos,
		Inactivo = @pInactivo,
		Usuario = dbo.FuncFKgenUsuarios(@pUsuario),
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (venVendedores = @pvenVendedores)
END 
ELSE 
BEGIN 
	INSERT INTO venVendedores
	(
		venVendedores,
		Vendedor_Id,
		Empresa_Id,
		Nombre,
		Comision,
		ComisionxSuperv,
		Supervisor_Id,
		PisoDeVentas,
		Centro1_Id,
		Centro2_Id,
		FacturaCobrada,
		ConAnticipos,
		SinImpuestos,
		Inactivo,
		Usuario, 
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pvenVendedores,
		@pVendedor_Id_Nueva,
		@pEmpresa_Id,
		@pNombre,
		@pComision,
		@pComisionxSuperv,
		dbo.FuncFKVenVendedores(@pSupervisor_Id),
		@pPisoDeVentas,
		dbo.FuncFKconCentro1(@pCentro1_Id),
		dbo.FuncFKconCentro2(@pCentro2_Id),
		@pFacturaCobrada,
		@pConAnticipos,
		@pSinImpuestos,
		@pInactivo,
		dbo.FuncFKgenUsuarios(@pUsuario),
		@pUsuario_Id,
		@pPosteado
	)
END 

GO

DROP PROCEDURE venVendedoresDatos
GO
CREATE PROCEDURE venVendedoresDatos
(
@pVendedor_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT  venVendedores.venVendedores, venVendedores.Vendedor_Id, genEntidades.CUIT, genEntidades.TipoDoc, genEntidades.IdFiscal,
	venVendedores.Empresa_Id, 
Cast( Case When venVendedores.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	venVendedores.Nombre, venVendedores.Comision, venVendedores.ComisionxSuperv,
	Supervisor.Vendedor_id Supervisor_Id,  Supervisor.Nombre as NombreSupervisor,
	venVendedores.PisoDeVentas, conCentro1.Centro1_Id,
	conCentro1.Descripcion as DescripcionCentro1, conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, venVendedores.FacturaCobrada,
	venVendedores.ConAnticipos, venVendedores.SinImpuestos, venVendedores.Inactivo, 
	Usuario.Usuario_id as Usuario, Usuario.Apellido_y_Nombres as DescripcionUsuario,
	IsNull(venClientes.Cliente_Id, '') Cliente_Id, IsNull(venClientes.RazonSocial, '') ClieRazonSocial,
	IsNull(comProveedores.Proveed_Id, '') Proveed_Id, IsNull(comProveedores.RazonSocial, '') ProvRazonSocial,
	IsNull(venCobradores.Cobrador_Id, '') Cobrador_Id, IsNull( venCobradores.Nombre, '') CobNombre,
	IsNull(SuePersonal.Legajo, 0) Legajo, IsNull(suePersonal.ApellidoPaterno, '') SueNombre,
	genUsuarios.Usuario_Id,
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario_Id, 
	venVendedores.Posteado 
FROM venVendedores 
	INNER JOIN genEntidades  ON genEntidades.genEntidades = venVendedores.venVendedores
	LEFT JOIN venVendedores  as Supervisor ON Supervisor.venVendedores = venVendedores.Supervisor_Id
	LEFT JOIN conCentro1  ON conCentro1.conCentro1 = venVendedores.Centro1_Id
	LEFT JOIN conCentro2  ON conCentro2.conCentro2 = venVendedores.Centro2_Id
	LEFT JOIN genUsuarios as Usuario ON Usuario.genUsuarios = venVendedores.Usuario
	Inner Join genUsuarios  ON genUsuarios.genUsuarios = venVendedores.Usuario_id
Left Outer Join venClientes On venClientes.genEntidades = genEntidades.genEntidades
Left Outer Join comProveedores On comProveedores.genEntidades = genEntidades.genEntidades
Left Outer Join venCobradores On venCobradores.venCobradores = genEntidades.genEntidades
Left Outer Join suePersonal On suePersonal.genEntidades = genEntidades.genEntidades
WHERE venVendedores.Vendedor_id = @pVendedor_id

 Declare @pidentity bigint= dbo.FuncFKvenVendedores (@pVendedor_id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'venVendedores'
 RETURN @@Error 

GO

DROP PROCEDURE venVendedoresDatosId
GO
CREATE PROCEDURE venVendedoresDatosId
(
@pIdentity bigint
)
AS
SET NOCOUNT ON 

SELECT  venVendedores.venVendedores, venVendedores.Vendedor_Id, genEntidades.CUIT, genEntidades.TipoDoc, genEntidades.IdFiscal,
	venVendedores.Empresa_Id, 
Cast( Case When venVendedores.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	venVendedores.Nombre, venVendedores.Comision, venVendedores.ComisionxSuperv,
	Supervisor.Vendedor_id Supervisor_Id,  Supervisor.Nombre as NombreSupervisor,
	venVendedores.PisoDeVentas, conCentro1.Centro1_Id,
	conCentro1.Descripcion as DescripcionCentro1, conCentro2.Centro2_Id, conCentro2.Descripcion as DescripcionCentro2, venVendedores.FacturaCobrada,
	venVendedores.ConAnticipos, venVendedores.SinImpuestos, venVendedores.Inactivo, 
	Usuario.Usuario_id as Usuario, Usuario.Apellido_y_Nombres as DescripcionUsuario,
	IsNull(venClientes.Cliente_Id, '') Cliente_Id, IsNull(venClientes.RazonSocial, '') ClieRazonSocial,
	IsNull(comProveedores.Proveed_Id, '') Proveed_Id, IsNull(comProveedores.RazonSocial, '') ProvRazonSocial,
	IsNull(venCobradores.Cobrador_Id, '') Cobrador_Id, IsNull( venCobradores.Nombre, '') CobNombre,
	IsNull(SuePersonal.Legajo, 0) Legajo, IsNull(suePersonal.ApellidoPaterno, '') SueNombre,
	genUsuarios.Usuario_Id,
	genUsuarios.Apellido_y_Nombres as DescripcionUsuario_Id, 
	venVendedores.Posteado 
FROM venVendedores 
	INNER JOIN genEntidades  ON genEntidades.genEntidades = venVendedores.venVendedores
	LEFT JOIN venVendedores  as Supervisor ON Supervisor.venVendedores = venVendedores.Supervisor_Id
	LEFT JOIN conCentro1  ON conCentro1.conCentro1 = venVendedores.Centro1_Id
	LEFT JOIN conCentro2  ON conCentro2.conCentro2 = venVendedores.Centro2_Id
	LEFT JOIN genUsuarios as Usuario ON Usuario.genUsuarios = venVendedores.Usuario
	Inner Join genUsuarios  ON genUsuarios.genUsuarios = venVendedores.Usuario_id
Left Outer Join venClientes On venClientes.genEntidades = genEntidades.genEntidades
Left Outer Join comProveedores On comProveedores.genEntidades = genEntidades.genEntidades
Left Outer Join venCobradores On venCobradores.venCobradores = genEntidades.genEntidades
Left Outer Join suePersonal On suePersonal.genEntidades = genEntidades.genEntidades
WHERE venVendedores.venVendedores = @pIdentity

Exec genAtributosGeneralesIdentityDatos @pIdentity, 'venVendedores'
RETURN @@Error 

GO

DROP PROCEDURE venVendedoresEliminar
GO
CREATE PROCEDURE venVendedoresEliminar
(
@pVendedor_id VarChar(5)
)
AS
SET NOCOUNT ON 

DELETE FROM venVendedores 
WHERE (Vendedor_id = @pVendedor_id)
 
 RETURN @@Error 

GO

GO
DROP FUNCTION FuncFKvenVendedores
GO
CREATE FUNCTION FuncFKvenVendedores
(
@pVendedor_id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = venVendedores FROM venVendedores WHERE 
	Vendedor_id = @pVendedor_id
  RETURN @pIdentity
END


GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venVeriCredito.sql*/
Drop Procedure TieneMovimientosTipo
Go

Create Procedure TieneMovimientosTipo
(
@pEmpresa_Id int,
@pCliente_Id varchar(15),
@pSubTipoMov_Id varChar(5)
)
As
Select Count(1) Cantidad 
	FROM genMovCuotas
	Inner Join venMovimientos On genMovCuotas.Asiento_Id = venMovimientos.venMovimientos
	Inner Join conAsientos On conAsientos.conAsientos = venMovimientos.venMovimientos
	WHERE venMovimientos.venSubTipoMov_Id = dbo.FuncFKvenSubTipoMov(@pSubTipoMov_Id) AND 
	venMovimientos.Cliente_Id = dbo.FuncFKvenClientes(@pCliente_Id) AND 
	genMovCuotas.Saldo > 0 And conAsientos.Anulado = 0 And
	conAsientos.Empresa_Id = @pEmpresa_Id

Go

Drop Procedure CalculoSaldoCtaCte
Go


Create Procedure CalculoSaldoCtaCte
(
@pEmpresa_Id int,
@pCliente_Id varChar(15),
@pMonedaLimCred varChar(3)
)
As

Declare @lHoy DateTime
Set @lHoy = Convert(DateTime, Convert(varchar(10), dbo.FechaActual(), 103),103)

Create Table #_TiposCambio
(Moneda_Id int Not Null,
Cambio Numeric(17,4) Not Null)

Insert Into #_TiposCambio
Select genMonedas, dbo.func_TipoCambio(genMonedas, @lHoy, @pEmpresa_Id) From genMonedas

Declare @pMonedaBase Int
Set @pMonedaBase = (Select Moneda_Id From genEmpresas Where genEmpresas = @pEmpresa_Id)

Declare @pMonedaLC Int
Set @pMonedaLC = (Select dbo.FuncFKgenMonedas(@pMonedaLimCred))


If @pMonedaLC = @pMonedaBase
Begin
	-- Estoy pidiendo el saldo en la moneda base de la empresa => multiplico por el tipo de cambio de la moneda de cada movimiento --
	SELECT Sum(genMovCuotas.Saldo*venTipoMov.Signo*Cambio.Cambio) As Saldo 
		FROM genMovCuotas
		Inner Join venMovimientos On genMovCuotas.Asiento_Id = venMovimientos.venMovimientos
		Inner Join venSubTipoMov On venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
		Inner Join venTipoMov On venTipoMov.venTipoMov = venMovimientos.venTipoMov
		Inner Join conAsientos On conAsientos.conAsientos = venMovimientos.venMovimientos
		Inner Join #_TiposCambio Cambio On Cambio.Moneda_Id = conAsientos.Moneda_Id
		Inner Join genEmpresas On genEmpresas.genEmpresas = conAsientos.Empresa_Id
		WHERE 
		venSubTipomov.EsPorDifCambio = 0 And 
		conAsientos.Anulado = 0 And 
		genMovCuotas.Saldo <> 0 And 
		venmovimientos.cliente_Id = dbo.FuncFKvenClientes(@pCliente_Id) And
		genEmpresas.genEmpresas = @pEmpresa_Id
End
Else
Begin
	Select Sum(Saldo) As Saldo From
	(
		-- Si el movimiento es en la moneda pedida, se toma el valor directamente --
		SELECT Sum(genMovCuotas.Saldo*venTipoMov.Signo) As Saldo 
		FROM genMovCuotas
		Inner Join venMovimientos On genMovCuotas.Asiento_Id = venMovimientos.venMovimientos
		Inner Join venSubTipoMov On venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
		Inner Join venTipoMov On venTipoMov.venTipoMov = venMovimientos.venTipoMov
		Inner Join conAsientos On conAsientos.conAsientos = venMovimientos.venMovimientos
		Inner Join genEmpresas On genEmpresas.genEmpresas = conAsientos.Empresa_Id
		WHERE 
		venSubTipomov.EsPorDifCambio = 0 And 
		conAsientos.Anulado = 0 And 
		genMovCuotas.Saldo <> 0 And 
		venmovimientos.cliente_Id = dbo.FuncFKvenClientes(@pCliente_Id) And
		genEmpresas.genEmpresas = @pEmpresa_Id And
		conAsientos.Moneda_Id = @pMonedaLC
		Union All
		-- Los movimientos en la moneda base se dividen por el cambio para llevarlos a la moneda pedida --
		SELECT Sum(genMovCuotas.Saldo*venTipoMov.Signo/CambioMLC.Cambio) As Saldo 
		FROM genMovCuotas
		Inner Join venMovimientos On genMovCuotas.Asiento_Id = venMovimientos.venMovimientos
		Inner Join venSubTipoMov On venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
		Inner Join venTipoMov On venTipoMov.venTipoMov = venMovimientos.venTipoMov
		Inner Join conAsientos On conAsientos.conAsientos = venMovimientos.venMovimientos
		Inner Join #_TiposCambio CambioMLC On CambioMLC.Moneda_Id = @pMonedaLC
		Inner Join genEmpresas On genEmpresas.genEmpresas = conAsientos.Empresa_Id
		WHERE 
		venSubTipomov.EsPorDifCambio = 0 And 
		conAsientos.Anulado = 0 And 
		genMovCuotas.Saldo <> 0 And 
		venmovimientos.cliente_Id = dbo.FuncFKvenClientes(@pCliente_Id) And
		genEmpresas.genEmpresas = @pEmpresa_Id And
		conAsientos.Moneda_Id = @pMonedaBase
		Union All
		-- La moneda del movimiento no es ni la pedida ahora ni la del l?mite de cr?dito as? que --
		-- llevarla a la moneda base y luego a la moneda pedida como par?metro --
		SELECT Sum(genMovCuotas.Saldo*venTipoMov.Signo*CambioMov.Cambio/CambioMB.Cambio) As Saldo 
		FROM genMovCuotas
		Inner Join venMovimientos On genMovCuotas.Asiento_Id = venMovimientos.venMovimientos
		Inner Join venSubTipoMov On venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
		Inner Join venTipoMov On venTipoMov.venTipoMov = venMovimientos.venTipoMov
		Inner Join conAsientos On conAsientos.conAsientos = venMovimientos.venMovimientos
		Inner Join #_TiposCambio CambioMov On CambioMov.Moneda_Id = conAsientos.Moneda_Id
		Inner Join #_TiposCambio CambioMB On CambioMB.Moneda_Id = @pMonedaLC
		Inner Join genEmpresas On genEmpresas.genEmpresas = conAsientos.Empresa_Id
		WHERE 
		venSubTipomov.EsPorDifCambio = 0 And 
		conAsientos.Anulado = 0 And 
		genMovCuotas.Saldo <> 0 And 
		venmovimientos.cliente_Id = dbo.FuncFKvenClientes(@pCliente_Id) And
		genEmpresas.genEmpresas = @pEmpresa_Id And
		conAsientos.Moneda_Id <> @pMonedaBase And
		conAsientos.Moneda_Id <> @pMonedaLC
	) a
End
Drop table #_TiposCambio

Go

Drop Procedure CalculoSaldoDocumentada
Go

Create Procedure CalculoSaldoDocumentada
(
@pEmpresa_Id Int,
@pCliente_Id varChar(15)
)
As
Declare @lHoy DateTime
Set @lHoy = Convert(DateTime, Convert(varchar(10), dbo.FechaActual(), 103),103)

Select Sum(Saldo) Saldo From
(
Select Sum(conMovCont.Importe) Saldo
From conMovCont
Inner Join tesRengMovi On tesRengMovi.tesMovimientos = conMovCont.conAsientos And 
		tesRengMovi.conRenglon = conMovCont.Renglon
Inner Join tesCTlink On tesCTlink.tesMovimientos = tesRengMovi.tesMovimientos And
		tesCTlink.conRenglon = tesRengMovi.conRenglon
Inner Join tesCheqTerceros On tesCheqTerceros.tesCheqTerceros = tesCTlink.tesCheqTerceros And
		tesCheqTerceros.SecuenciaActual = tesCTlink.Secuencia
	Inner Join conAsientos On conAsientos.conAsientos = tesRengMovi.tesMovimientos
Where ((tesCheqTerceros.Estado_Id IN ('N','E','P') And
	tesCheqTerceros.FechaVencimiento >= @lHoy) Or
	tesCheqTerceros.Estado_Id In ('C','S','T','U','R')) And
	tesCheqTerceros.Cliente_Id = dbo.FuncFKvenClientes(@pCliente_Id) And
	conAsientos.Anulado = 0 And conAsientos.Empresa_Id = @pEmpresa_Id
Union All
Select Sum(conMovCont.Importe) Saldo
From conMovCont
Inner Join tesRengMovi On tesRengMovi.tesMovimientos = conMovCont.conAsientos And 
		tesRengMovi.conRenglon = conMovCont.Renglon
Inner Join tesCTlink On tesCTlink.tesMovimientos = tesRengMovi.tesMovimientos And
		tesCTlink.conRenglon = tesRengMovi.conRenglon
Inner Join tesCheqTerceros On tesCheqTerceros.tesCheqTerceros = tesCTlink.tesCheqTerceros And
		tesCheqTerceros.SecuenciaActual = tesCTlink.Secuencia
Inner Join tesClearing On tesClearing.Clearing = tesCheqTerceros.Clearing
Inner Join conAsientos On conAsientos.conAsientos = tesRengMovi.tesMovimientos
Where ((tesCheqTerceros.Estado_Id = 'N' And
	tesCheqTerceros.FechaVencimiento < @lHoy) Or
	tesCheqTerceros.Estado_Id In ('C','S','T','U','R')) And
	DateAdd(dd, tesClearing.Dias, conAsientos.Fecha) < @lHoy And
	tesCheqTerceros.Cliente_Id = dbo.FuncFKvenClientes(@pCliente_Id) And
	conAsientos.Anulado = 0 And conAsientos.Empresa_Id = @pEmpresa_Id
) a
Go


Drop Procedure CalculoSaldoCtaCteVencida
Go

Create Procedure CalculoSaldoCtaCteVencida
(
@pEmpresa_Id Int,
@pCliente_Id varChar(15),
@pMonedaLimCred varChar(3)
)
As

Declare @lHoy DateTime
Set @lHoy = Convert(DateTime, Convert(varchar(10), dbo.FechaActual(), 103),103)

Create Table #_TiposCambio
(Moneda_Id int Not Null,
Cambio Numeric(17,4) Not Null)

Insert Into #_TiposCambio
Select genMonedas, dbo.func_TipoCambio(genMonedas, @lHoy, @pEmpresa_Id) From genMonedas

Declare @pMonedaBase Int
Set @pMonedaBase = (Select Moneda_Id From genEmpresas Where genEmpresas = @pEmpresa_Id)

Declare @pMonedaLC Int
Set @pMonedaLC = (Select dbo.FuncFKgenMonedas(@pMonedaLimCred))


If @pMonedaLC = @pMonedaBase
Begin
	Select Sum(genMovCuotas.Saldo * venTipoMov.Signo) Saldo
	From genMovCuotas
	Inner Join venMovimientos On venMovimientos.venMovimientos = genMovCuotas.Asiento_Id
	Inner Join venSubTipoMov On venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
	Inner Join venTipoMov On venTipoMov.venTipoMov = venMovimientos.venTipoMov
	Inner Join conAsientos On conAsientos.conAsientos = venMovimientos.venMovimientos
	Where venMovimientos.Cliente_Id = dbo.FuncFKvenClientes(@pCliente_Id) And
	genMovCuotas.Saldo <> 0 And genMovCuotas.FechaVencimiento < @lHoy And
	conAsientos.Anulado = 0 And conAsientos.Empresa_Id = @pEmpresa_Id
End
Else
Begin
		-- Si el movimiento es en la moneda pedida, se toma el valor directamente --
		Select Sum(genMovCuotas.Saldo * venTipoMov.Signo) Saldo
		From genMovCuotas
		Inner Join venMovimientos On venMovimientos.venMovimientos = genMovCuotas.Asiento_Id
		Inner Join venSubTipoMov On venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
		Inner Join venTipoMov On venTipoMov.venTipoMov = venMovimientos.venTipoMov
		Inner Join conAsientos On conAsientos.conAsientos = venMovimientos.venMovimientos
		Where venMovimientos.Cliente_Id = dbo.FuncFKvenClientes(@pCliente_Id) And
		genMovCuotas.Saldo <> 0 And genMovCuotas.FechaVencimiento < @lHoy And
		conAsientos.Anulado = 0 And conAsientos.Empresa_Id = @pEmpresa_Id And
		conAsientos.Moneda_Id = @pMonedaLC
		Union All
		-- Los movimientos en la moneda base se dividen por el cambio para llevarlos a la moneda pedida --
		Select Sum(genMovCuotas.Saldo * venTipoMov.Signo / CambioMLC.Cambio) Saldo
		From genMovCuotas
		Inner Join venMovimientos On venMovimientos.venMovimientos = genMovCuotas.Asiento_Id
		Inner Join venSubTipoMov On venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
		Inner Join venTipoMov On venTipoMov.venTipoMov = venMovimientos.venTipoMov
		Inner Join conAsientos On conAsientos.conAsientos = venMovimientos.venMovimientos
		Inner Join #_TiposCambio CambioMLC On CambioMLC.Moneda_Id = @pMonedaLC
		Where venMovimientos.Cliente_Id = dbo.FuncFKvenClientes(@pCliente_Id) And
		genMovCuotas.Saldo <> 0 And genMovCuotas.FechaVencimiento < @lHoy And
		conAsientos.Anulado = 0 And conAsientos.Empresa_Id = @pEmpresa_Id And
		conAsientos.Moneda_Id = @pMonedaBase
		Union All
		-- La moneda del movimiento no es ni la pedida ahora ni la del l?mite de cr?dito as? que --
		-- llevarla a la moneda base y luego a la moneda pedida como par?metro --
		Select Sum(genMovCuotas.Saldo * venTipoMov.Signo * CambioMov.Cambio / CambioMB.Cambio) Saldo
		From genMovCuotas
		Inner Join venMovimientos On venMovimientos.venMovimientos = genMovCuotas.Asiento_Id
		Inner Join venSubTipoMov On venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
		Inner Join venTipoMov On venTipoMov.venTipoMov = venMovimientos.venTipoMov
		Inner Join conAsientos On conAsientos.conAsientos = venMovimientos.venMovimientos
		Inner Join #_TiposCambio CambioMov On CambioMov.Moneda_Id = conAsientos.Moneda_Id
		Inner Join #_TiposCambio CambioMB On CambioMB.Moneda_Id = @pMonedaLC
		Where venMovimientos.Cliente_Id = dbo.FuncFKvenClientes(@pCliente_Id) And
		genMovCuotas.Saldo <> 0 And genMovCuotas.FechaVencimiento < @lHoy And
		conAsientos.Anulado = 0 And conAsientos.Empresa_Id = @pEmpresa_Id And
		conAsientos.Moneda_Id <> @pMonedaBase And
		conAsientos.Moneda_Id <> @pMonedaLC
End
Go

Drop Procedure CalculoMaxAntiguedad
Go

Create Procedure CalculoMaxAntiguedad
(
@pEmpresa_Id Int,
@pCliente_Id varChar(15)
)
As

Declare @lHoy DateTime
Declare @lFecha DateTime
Set @lHoy = Convert(DateTime, Convert(varchar(10), dbo.FechaActual(), 103),103)

Select @lFecha = IsNull(Min(genMovCuotas.FechaVencimiento), @lHoy)
From genMovCuotas
Inner Join venMovimientos On venMovimientos.venMovimientos = genMovCuotas.Asiento_Id
Inner Join venSubTipoMov On venSubTipoMov.venSubTipoMov = venMovimientos.venSubTipoMov_Id
Inner Join venTipoMov On venTipoMov.venTipoMov = venMovimientos.venTipoMov
Inner Join conAsientos On conAsientos.conAsientos = venMovimientos.venMovimientos
Where venMovimientos.Cliente_Id = dbo.FuncFKvenClientes(@pCliente_Id) And
conAsientos.Anulado = 0 And conAsientos.Empresa_Id = @pEmpresa_Id and 
genMovCuotas.Saldo*venTipoMov.Signo > 0

Select Convert(int, @lHoy - @lFecha) Dias
Go







Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\venZona.sql*/
DROP PROCEDURE venZonaGuardar
GO
CREATE PROCEDURE venZonaGuardar
(
@pZona_Id varchar(5),
@pZona_Id_Nuevo varchar(5),
@pEmpresa_Id int = NULL,
@pDescripcion varchar(50),
@pInactivo bit,
@pUsuario_Id int,
@pPosteado bit
)
AS
SET NOCOUNT ON 
DECLARE @lIdentidad int
IF (EXISTS (SELECT 1 FROM venZona WHERE (Zona_Id = @pZona_Id)))
BEGIN 
	UPDATE venZona
	SET		@lIdentidad = venZona,
		Zona_Id = @pZona_Id_Nuevo,
		Empresa_Id = @pEmpresa_Id,
		Descripcion = @pDescripcion,
		Inactivo = @pInactivo,
		Usuario_Id = @pUsuario_Id,
		Posteado = @pPosteado
	WHERE (Zona_Id = @pZona_Id)
END 
ELSE 
BEGIN 
	INSERT INTO venZona
	(
		Zona_Id,
		Empresa_Id,
		Descripcion,
		Inactivo,
		Usuario_Id,
		Posteado
	)
	VALUES 
	(
		@pZona_Id,
		@pEmpresa_Id,
		@pDescripcion,
		@pInactivo,
		@pUsuario_Id,
		@pPosteado
	)
	SET @lIdentidad =  Cast(SCOPE_IDENTITY() as int) 
END 
Select @lIdentidad as RetVal 

GO

DROP PROCEDURE venZonaDatos
GO
CREATE PROCEDURE venZonaDatos
(
@pZona_Id varchar(5)
)
AS
SET NOCOUNT ON 

SELECT venZona.venZona, venZona.Zona_Id, venZona.Empresa_Id, Cast( Case When venZona.Empresa_Id IS NULL THEN 1 ELSE 0 END AS BIT ) as PTodasEmpresas,
	venZona.Descripcion, venZona.Inactivo, genUsuarios.Usuario_Id, genUsuarios.Apellido_y_Nombres as DescripcionUsuario,
	venZona.Posteado
FROM venZona 
INNER JOIN genUsuarios  ON (genUsuarios.genUsuarios = venZona.Usuario_Id)
WHERE (Zona_Id = @pZona_Id)
 


  Declare @pidentity bigint= dbo.FuncFKvenZona(@pZona_Id)
 Exec genAtributosGeneralesIdentityDatos @pidentity, 'venZona'
 RETURN @@Error 

GO

DROP PROCEDURE venZonaEliminar
GO
CREATE PROCEDURE venZonaEliminar
(
@pZona_Id varchar(5) = NULL
)
AS
SET NOCOUNT ON 

DELETE FROM venZona 
WHERE (Zona_Id = @pZona_Id)
 
 RETURN @@Error 

GO

DROP FUNCTION FuncFKvenZona
GO

CREATE FUNCTION FuncFKvenZona
(
@pZona_Id varchar (5)
)
RETURNS int

AS
BEGIN
  DECLARE @pIdentity int
  SELECT @pIdentity = venZona FROM venZona WHERE 
	Zona_Id = @pZona_Id
  RETURN @pIdentity
END


GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\vgenLetraCompras.sql*/
DROP VIEW vgenLetraCompras
GO

CREATE VIEW vgenLetraCompras
AS
SELECT ' ' as Valor, 'S/L' as Descripcion
UNION
SELECT 'A' as Valor, 'A' as Descripcion
UNION
SELECT 'B' as Valor, 'B' as Descripcion
UNION
SELECT 'C' as Valor, 'C' as Descripcion
UNION
SELECT 'M' as Valor, 'M' as Descripcion
--UNION
--SELECT 'F' as Valor, 'F' as Descripcion
--UNION
--SELECT 'X' as Valor, 'X' as Descripcion

GO
Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\vgenLetrasCompras.sql*/
DROP VIEW vGenLetrasCompras
GO

CREATE VIEW vGenLetrasCompras
AS
SELECT 'A' as Letra, 'A' as Descripcion
UNION
SELECT 'B' as Letra, 'B' as Descripcion
UNION
SELECT 'C' as Letra, 'C' as Descripcion
UNION
SELECT 'E' as Letra, 'E' as Descripcion

GO

Go 

/* C:\V3\SummaAdvanced\Scripts\Procedures\vgenLetrasVentas.sql*/
DROP VIEW vGenLetrasVentas
GO

CREATE VIEW vGenLetrasVentas
AS
SELECT 'A' as Letra, 'A' as Descripcion
UNION
SELECT 'B' as Letra, 'B' as Descripcion
UNION
SELECT 'C' as Letra, 'C' as Descripcion
UNION
SELECT 'E' as Letra, 'E' as Descripcion

GO

Go 

